# coding: utf-8

"""
Earnix import export API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from earnix2_sdk.clients.imx.models.problem_detail_brief_message_argument1 import (
    ProblemDetailBriefMessageArgument1,
)
from earnix2_sdk.clients.imx.models.problem_detail_brief_message_argument2 import (
    ProblemDetailBriefMessageArgument2,
)
from earnix2_sdk.clients.imx.models.problem_detail_detailed_message_argument1 import (
    ProblemDetailDetailedMessageArgument1,
)
from earnix2_sdk.clients.imx.models.problem_detail_detailed_message_argument2 import (
    ProblemDetailDetailedMessageArgument2,
)


class ProblemDetail(BaseModel):
    """
    Definition of [RFC7807](https://tools.ietf.org/html/rfc7807) problem detail
    """  # noqa: E501

    type: Optional[StrictStr] = Field(
        default=None, description="A URI reference that identifies the problem type."
    )
    title: StrictStr = Field(
        description="A short, human-readable summary of the problem type."
    )
    status: Optional[Annotated[int, Field(le=599, strict=True, ge=100)]] = Field(
        default=None,
        description="The HTTP status code generated by the origin server for this occurrence of the problem.",
    )
    detail: StrictStr = Field(
        description="A human-readable explanation specific to this occurrence of the problem."
    )
    instance: Optional[StrictStr] = Field(
        default=None,
        description="A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.",
    )
    brief_message_format: Optional[StrictStr] = Field(
        default=None,
        description="Format of a human-readable summary of the problem type. Its combination with the values of fields 'briefMessageArgument_1', 'briefMessageArgument_2', etc., should form the value of field 'title'",
        alias="briefMessageFormat",
    )
    brief_message_argument_1: Optional[ProblemDetailBriefMessageArgument1] = Field(
        default=None, alias="briefMessageArgument_1"
    )
    brief_message_argument_2: Optional[ProblemDetailBriefMessageArgument2] = Field(
        default=None, alias="briefMessageArgument_2"
    )
    detailed_message_format: Optional[StrictStr] = Field(
        default=None,
        description="Format of a detailed human-readable description of the problem type. Its combination with the values of fields 'detailedMessageArgument_1', 'detailedMessageArgument_2', etc., should form the value of field 'detail'",
        alias="detailedMessageFormat",
    )
    detailed_message_argument_1: Optional[ProblemDetailDetailedMessageArgument1] = (
        Field(default=None, alias="detailedMessageArgument_1")
    )
    detailed_message_argument_2: Optional[ProblemDetailDetailedMessageArgument2] = (
        Field(default=None, alias="detailedMessageArgument_2")
    )
    error_category: Optional[StrictStr] = Field(
        default=None, description="Category of error", alias="errorCategory"
    )
    error_code: Optional[StrictStr] = Field(
        default=None,
        description="Code of error which is unique within the category specified in field 'errorCategory'",
        alias="errorCode",
    )
    __properties: ClassVar[List[str]] = [
        "type",
        "title",
        "status",
        "detail",
        "instance",
        "briefMessageFormat",
        "briefMessageArgument_1",
        "briefMessageArgument_2",
        "detailedMessageFormat",
        "detailedMessageArgument_1",
        "detailedMessageArgument_2",
        "errorCategory",
        "errorCode",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProblemDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of brief_message_argument_1
        if self.brief_message_argument_1:
            _dict["briefMessageArgument_1"] = self.brief_message_argument_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brief_message_argument_2
        if self.brief_message_argument_2:
            _dict["briefMessageArgument_2"] = self.brief_message_argument_2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of detailed_message_argument_1
        if self.detailed_message_argument_1:
            _dict["detailedMessageArgument_1"] = (
                self.detailed_message_argument_1.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of detailed_message_argument_2
        if self.detailed_message_argument_2:
            _dict["detailedMessageArgument_2"] = (
                self.detailed_message_argument_2.to_dict()
            )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProblemDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "type": obj.get("type"),
                "title": obj.get("title"),
                "status": obj.get("status"),
                "detail": obj.get("detail"),
                "instance": obj.get("instance"),
                "briefMessageFormat": obj.get("briefMessageFormat"),
                "briefMessageArgument_1": ProblemDetailBriefMessageArgument1.from_dict(
                    obj["briefMessageArgument_1"]
                )
                if obj.get("briefMessageArgument_1") is not None
                else None,
                "briefMessageArgument_2": ProblemDetailBriefMessageArgument2.from_dict(
                    obj["briefMessageArgument_2"]
                )
                if obj.get("briefMessageArgument_2") is not None
                else None,
                "detailedMessageFormat": obj.get("detailedMessageFormat"),
                "detailedMessageArgument_1": ProblemDetailDetailedMessageArgument1.from_dict(
                    obj["detailedMessageArgument_1"]
                )
                if obj.get("detailedMessageArgument_1") is not None
                else None,
                "detailedMessageArgument_2": ProblemDetailDetailedMessageArgument2.from_dict(
                    obj["detailedMessageArgument_2"]
                )
                if obj.get("detailedMessageArgument_2") is not None
                else None,
                "errorCategory": obj.get("errorCategory"),
                "errorCode": obj.get("errorCode"),
            }
        )
        return _obj
