"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ansys.api.dyna.v0.dynasolver_pb2
import grpc
import typing

class DynaSolverCommStub:
    """Defines the service"""
    def __init__(self, channel: grpc.Channel) -> None: ...
    send_request: grpc.UnaryUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverRelay,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverRelay] = ...
    """Function invoked to send the request to server, which is passed to Dyna"""

    upload_file: grpc.StreamUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileData,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus] = ...
    """upload a local file to the server, who puts in in Dyna's working directory"""

    download_file: grpc.UnaryStreamMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileRequest,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileData] = ...
    """download a from Dyna's working directory"""

    tail_file: grpc.UnaryStreamMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverTailRequest,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileData] = ...
    """monitor the standard output or standard error"""

    list_files: grpc.UnaryUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileRequest,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileList] = ...
    """return file & size info for all files in Dyna's working directory"""

    start_solver: grpc.UnaryUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStart,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus] = ...
    """Start Dyna, which then pauses and waits for command line info"""

    quit_server: grpc.UnaryUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.QuitServer,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus] = ...
    """Terminate the server.  The server actually ignores this when running
    in a container, so there may not be much point here...
    """

    log_level: grpc.UnaryUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.LogLevel,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus] = ...
    """set logging level for server"""

    start_solver_locally: grpc.UnaryUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStartLocal,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus] = ...
    """start and run Syna locally"""

    set_working_directory: grpc.UnaryUnaryMultiCallable[
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverWorkDir,
        ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus] = ...


class DynaSolverCommServicer(metaclass=abc.ABCMeta):
    """Defines the service"""
    @abc.abstractmethod
    def send_request(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.DynaSolverRelay,
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverRelay:
        """Function invoked to send the request to server, which is passed to Dyna"""
        pass

    @abc.abstractmethod
    def upload_file(self,
        request: typing.Iterator[ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileData],
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus:
        """upload a local file to the server, who puts in in Dyna's working directory"""
        pass

    @abc.abstractmethod
    def download_file(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileData]:
        """download a from Dyna's working directory"""
        pass

    @abc.abstractmethod
    def tail_file(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.DynaSolverTailRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileData]:
        """monitor the standard output or standard error"""
        pass

    @abc.abstractmethod
    def list_files(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileRequest,
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverFileList:
        """return file & size info for all files in Dyna's working directory"""
        pass

    @abc.abstractmethod
    def start_solver(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStart,
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus:
        """Start Dyna, which then pauses and waits for command line info"""
        pass

    @abc.abstractmethod
    def quit_server(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.QuitServer,
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus:
        """Terminate the server.  The server actually ignores this when running
        in a container, so there may not be much point here...
        """
        pass

    @abc.abstractmethod
    def log_level(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.LogLevel,
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus:
        """set logging level for server"""
        pass

    @abc.abstractmethod
    def start_solver_locally(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStartLocal,
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus:
        """start and run Syna locally"""
        pass

    @abc.abstractmethod
    def set_working_directory(self,
        request: ansys.api.dyna.v0.dynasolver_pb2.DynaSolverWorkDir,
        context: grpc.ServicerContext,
    ) -> ansys.api.dyna.v0.dynasolver_pb2.DynaSolverStatus: ...


def add_DynaSolverCommServicer_to_server(servicer: DynaSolverCommServicer, server: grpc.Server) -> None: ...
