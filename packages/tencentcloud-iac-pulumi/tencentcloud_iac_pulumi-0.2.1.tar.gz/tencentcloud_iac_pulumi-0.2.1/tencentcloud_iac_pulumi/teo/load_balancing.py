# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LoadBalancingArgs', 'LoadBalancing']

@pulumi.input_type
class LoadBalancingArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 origin_group_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 backup_origin_group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a LoadBalancing resource.
        :param pulumi.Input[str] host: Subdomain name. You can use @ to represent the root domain.
        :param pulumi.Input[str] origin_group_id: ID of the origin group to use.
        :param pulumi.Input[str] type: Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
        :param pulumi.Input[str] zone_id: Site ID.
        :param pulumi.Input[str] backup_origin_group_id: ID of the backup origin group to use.
        :param pulumi.Input[str] status: Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
        :param pulumi.Input[int] ttl: Indicates DNS TTL time when `Type` is dns_only.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "origin_group_id", origin_group_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zone_id", zone_id)
        if backup_origin_group_id is not None:
            pulumi.set(__self__, "backup_origin_group_id", backup_origin_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Subdomain name. You can use @ to represent the root domain.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="originGroupId")
    def origin_group_id(self) -> pulumi.Input[str]:
        """
        ID of the origin group to use.
        """
        return pulumi.get(self, "origin_group_id")

    @origin_group_id.setter
    def origin_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_group_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="backupOriginGroupId")
    def backup_origin_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup origin group to use.
        """
        return pulumi.get(self, "backup_origin_group_id")

    @backup_origin_group_id.setter
    def backup_origin_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_origin_group_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates DNS TTL time when `Type` is dns_only.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _LoadBalancingState:
    def __init__(__self__, *,
                 backup_origin_group_id: Optional[pulumi.Input[str]] = None,
                 cname: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 load_balancing_id: Optional[pulumi.Input[str]] = None,
                 origin_group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering LoadBalancing resources.
        :param pulumi.Input[str] backup_origin_group_id: ID of the backup origin group to use.
        :param pulumi.Input[str] cname: Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] host: Subdomain name. You can use @ to represent the root domain.
        :param pulumi.Input[str] load_balancing_id: Load balancer instance ID.
        :param pulumi.Input[str] origin_group_id: ID of the origin group to use.
        :param pulumi.Input[str] status: Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
        :param pulumi.Input[int] ttl: Indicates DNS TTL time when `Type` is dns_only.
        :param pulumi.Input[str] type: Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
        :param pulumi.Input[str] update_time: Last modification date.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        if backup_origin_group_id is not None:
            pulumi.set(__self__, "backup_origin_group_id", backup_origin_group_id)
        if cname is not None:
            pulumi.set(__self__, "cname", cname)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if load_balancing_id is not None:
            pulumi.set(__self__, "load_balancing_id", load_balancing_id)
        if origin_group_id is not None:
            pulumi.set(__self__, "origin_group_id", origin_group_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="backupOriginGroupId")
    def backup_origin_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the backup origin group to use.
        """
        return pulumi.get(self, "backup_origin_group_id")

    @backup_origin_group_id.setter
    def backup_origin_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_origin_group_id", value)

    @property
    @pulumi.getter
    def cname(self) -> Optional[pulumi.Input[str]]:
        """
        Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cname")

    @cname.setter
    def cname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Subdomain name. You can use @ to represent the root domain.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="loadBalancingId")
    def load_balancing_id(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancer instance ID.
        """
        return pulumi.get(self, "load_balancing_id")

    @load_balancing_id.setter
    def load_balancing_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancing_id", value)

    @property
    @pulumi.getter(name="originGroupId")
    def origin_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the origin group to use.
        """
        return pulumi.get(self, "origin_group_id")

    @origin_group_id.setter
    def origin_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_group_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Indicates DNS TTL time when `Type` is dns_only.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modification date.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class LoadBalancing(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_origin_group_id: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 origin_group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a LoadBalancing resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_origin_group_id: ID of the backup origin group to use.
        :param pulumi.Input[str] host: Subdomain name. You can use @ to represent the root domain.
        :param pulumi.Input[str] origin_group_id: ID of the origin group to use.
        :param pulumi.Input[str] status: Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
        :param pulumi.Input[int] ttl: Indicates DNS TTL time when `Type` is dns_only.
        :param pulumi.Input[str] type: Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LoadBalancing resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LoadBalancingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_origin_group_id: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 origin_group_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancingArgs.__new__(LoadBalancingArgs)

            __props__.__dict__["backup_origin_group_id"] = backup_origin_group_id
            if host is None and not opts.urn:
                raise TypeError("Missing required property 'host'")
            __props__.__dict__["host"] = host
            if origin_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'origin_group_id'")
            __props__.__dict__["origin_group_id"] = origin_group_id
            __props__.__dict__["status"] = status
            __props__.__dict__["ttl"] = ttl
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["cname"] = None
            __props__.__dict__["load_balancing_id"] = None
            __props__.__dict__["update_time"] = None
        super(LoadBalancing, __self__).__init__(
            'tencentcloud:Teo/loadBalancing:LoadBalancing',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_origin_group_id: Optional[pulumi.Input[str]] = None,
            cname: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            load_balancing_id: Optional[pulumi.Input[str]] = None,
            origin_group_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'LoadBalancing':
        """
        Get an existing LoadBalancing resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] backup_origin_group_id: ID of the backup origin group to use.
        :param pulumi.Input[str] cname: Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] host: Subdomain name. You can use @ to represent the root domain.
        :param pulumi.Input[str] load_balancing_id: Load balancer instance ID.
        :param pulumi.Input[str] origin_group_id: ID of the origin group to use.
        :param pulumi.Input[str] status: Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
        :param pulumi.Input[int] ttl: Indicates DNS TTL time when `Type` is dns_only.
        :param pulumi.Input[str] type: Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
        :param pulumi.Input[str] update_time: Last modification date.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancingState.__new__(_LoadBalancingState)

        __props__.__dict__["backup_origin_group_id"] = backup_origin_group_id
        __props__.__dict__["cname"] = cname
        __props__.__dict__["host"] = host
        __props__.__dict__["load_balancing_id"] = load_balancing_id
        __props__.__dict__["origin_group_id"] = origin_group_id
        __props__.__dict__["status"] = status
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["type"] = type
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["zone_id"] = zone_id
        return LoadBalancing(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupOriginGroupId")
    def backup_origin_group_id(self) -> pulumi.Output[str]:
        """
        ID of the backup origin group to use.
        """
        return pulumi.get(self, "backup_origin_group_id")

    @property
    @pulumi.getter
    def cname(self) -> pulumi.Output[str]:
        """
        Schedules domain names. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        Subdomain name. You can use @ to represent the root domain.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="loadBalancingId")
    def load_balancing_id(self) -> pulumi.Output[str]:
        """
        Load balancer instance ID.
        """
        return pulumi.get(self, "load_balancing_id")

    @property
    @pulumi.getter(name="originGroupId")
    def origin_group_id(self) -> pulumi.Output[str]:
        """
        ID of the origin group to use.
        """
        return pulumi.get(self, "origin_group_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the task. Valid values to set: `online`, `offline`. During status change, the status is `process`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[int]:
        """
        Indicates DNS TTL time when `Type` is dns_only.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Proxy mode.- `dns_only`: Only DNS.- `proxied`: Enable proxy.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Last modification date.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

