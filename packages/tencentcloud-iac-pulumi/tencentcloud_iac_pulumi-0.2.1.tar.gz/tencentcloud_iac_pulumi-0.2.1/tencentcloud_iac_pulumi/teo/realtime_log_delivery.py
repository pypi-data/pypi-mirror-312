# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RealtimeLogDeliveryArgs', 'RealtimeLogDelivery']

@pulumi.input_type
class RealtimeLogDeliveryArgs:
    def __init__(__self__, *,
                 area: pulumi.Input[str],
                 entity_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 fields: pulumi.Input[Sequence[pulumi.Input[str]]],
                 log_type: pulumi.Input[str],
                 sample: pulumi.Input[int],
                 task_name: pulumi.Input[str],
                 task_type: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 cls: Optional[pulumi.Input['RealtimeLogDeliveryClsArgs']] = None,
                 custom_endpoint: Optional[pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs']] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]]] = None,
                 delivery_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]]] = None,
                 delivery_status: Optional[pulumi.Input[str]] = None,
                 log_format: Optional[pulumi.Input['RealtimeLogDeliveryLogFormatArgs']] = None,
                 s3: Optional[pulumi.Input['RealtimeLogDeliveryS3Args']] = None):
        """
        The set of arguments for constructing a RealtimeLogDelivery resource.
        :param pulumi.Input[str] area: Data delivery area, possible values are: `mainland`: within mainland China; `overseas`: worldwide (excluding mainland China).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_lists: List of entities (seven-layer domain names or four-layer proxy instances) corresponding to real-time log delivery tasks. Example values are as follows: Seven-layer domain name: `domain.example.com`; four-layer proxy instance: sid-2s69eb5wcms7. For values, refer to: `https://cloud.tencent.com/document/api/1552/80690`, `https://cloud.tencent.com/document/api/1552/86336`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: A list of preset fields for delivery.
        :param pulumi.Input[str] log_type: Data delivery type, the values are: `domain`: site acceleration log; `application`: four-layer proxy log; `web-rateLiming`: rate limit and CC attack protection log; `web-attack`: managed rule log; `web-rule`: custom rule log; `web-bot`: Bot management log.
        :param pulumi.Input[int] sample: The sampling ratio is in thousandths, with a value range of 1-1000. For example, filling in 605 means the sampling ratio is 60.5%. Leaving it blank means the sampling ratio is 100%.
        :param pulumi.Input[str] task_name: The name of the real-time log delivery task. The format is a combination of numbers, English, -, and _. The maximum length is 200 characters.
        :param pulumi.Input[str] task_type: The real-time log delivery task type. The possible values are: `cls`: push to Tencent Cloud CLS; `custom_endpoint`: push to a custom HTTP(S) address; `s3`: push to an AWS S3 compatible storage bucket address.
        :param pulumi.Input[str] zone_id: ID of the site.
        :param pulumi.Input['RealtimeLogDeliveryClsArgs'] cls: CLS configuration information. This parameter is required when TaskType is cls.
        :param pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs'] custom_endpoint: Customize the configuration information of the HTTP service. This parameter is required when TaskType is set to custom_endpoint.
        :param pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]] custom_fields: The list of custom fields delivered supports extracting specified field values from HTTP request headers, response headers, and cookies. Custom field names cannot be repeated and cannot exceed 200 fields.
        :param pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]] delivery_conditions: The filter condition for log delivery. If it is not filled, all logs will be delivered.
        :param pulumi.Input[str] delivery_status: The status of the real-time log delivery task. The values are: `enabled`: enabled; `disabled`: disabled. Leave it blank to keep the original configuration. Not required when creating.
        :param pulumi.Input['RealtimeLogDeliveryLogFormatArgs'] log_format: The output format of log delivery. If it is not filled, it means the default format. The default format logic is as follows: when TaskType is `custom_endpoint`, the default format is an array of multiple JSON objects, each JSON object is a log; when TaskType is `s3`, the default format is JSON Lines; in particular, when TaskType is `cls`, the value of LogFormat.FormatType can only be json, and other parameters in LogFormat will be ignored. It is recommended not to pass LogFormat.
        :param pulumi.Input['RealtimeLogDeliveryS3Args'] s3: Configuration information of AWS S3 compatible storage bucket. This parameter is required when TaskType is s3.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "entity_lists", entity_lists)
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "sample", sample)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_type", task_type)
        pulumi.set(__self__, "zone_id", zone_id)
        if cls is not None:
            pulumi.set(__self__, "cls", cls)
        if custom_endpoint is not None:
            pulumi.set(__self__, "custom_endpoint", custom_endpoint)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if delivery_conditions is not None:
            pulumi.set(__self__, "delivery_conditions", delivery_conditions)
        if delivery_status is not None:
            pulumi.set(__self__, "delivery_status", delivery_status)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Input[str]:
        """
        Data delivery area, possible values are: `mainland`: within mainland China; `overseas`: worldwide (excluding mainland China).
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: pulumi.Input[str]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter(name="entityLists")
    def entity_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of entities (seven-layer domain names or four-layer proxy instances) corresponding to real-time log delivery tasks. Example values are as follows: Seven-layer domain name: `domain.example.com`; four-layer proxy instance: sid-2s69eb5wcms7. For values, refer to: `https://cloud.tencent.com/document/api/1552/80690`, `https://cloud.tencent.com/document/api/1552/86336`.
        """
        return pulumi.get(self, "entity_lists")

    @entity_lists.setter
    def entity_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "entity_lists", value)

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of preset fields for delivery.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        Data delivery type, the values are: `domain`: site acceleration log; `application`: four-layer proxy log; `web-rateLiming`: rate limit and CC attack protection log; `web-attack`: managed rule log; `web-rule`: custom rule log; `web-bot`: Bot management log.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def sample(self) -> pulumi.Input[int]:
        """
        The sampling ratio is in thousandths, with a value range of 1-1000. For example, filling in 605 means the sampling ratio is 60.5%. Leaving it blank means the sampling ratio is 100%.
        """
        return pulumi.get(self, "sample")

    @sample.setter
    def sample(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[str]:
        """
        The name of the real-time log delivery task. The format is a combination of numbers, English, -, and _. The maximum length is 200 characters.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        The real-time log delivery task type. The possible values are: `cls`: push to Tencent Cloud CLS; `custom_endpoint`: push to a custom HTTP(S) address; `s3`: push to an AWS S3 compatible storage bucket address.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        ID of the site.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def cls(self) -> Optional[pulumi.Input['RealtimeLogDeliveryClsArgs']]:
        """
        CLS configuration information. This parameter is required when TaskType is cls.
        """
        return pulumi.get(self, "cls")

    @cls.setter
    def cls(self, value: Optional[pulumi.Input['RealtimeLogDeliveryClsArgs']]):
        pulumi.set(self, "cls", value)

    @property
    @pulumi.getter(name="customEndpoint")
    def custom_endpoint(self) -> Optional[pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs']]:
        """
        Customize the configuration information of the HTTP service. This parameter is required when TaskType is set to custom_endpoint.
        """
        return pulumi.get(self, "custom_endpoint")

    @custom_endpoint.setter
    def custom_endpoint(self, value: Optional[pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs']]):
        pulumi.set(self, "custom_endpoint", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]]]:
        """
        The list of custom fields delivered supports extracting specified field values from HTTP request headers, response headers, and cookies. Custom field names cannot be repeated and cannot exceed 200 fields.
        """
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter(name="deliveryConditions")
    def delivery_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]]]:
        """
        The filter condition for log delivery. If it is not filled, all logs will be delivered.
        """
        return pulumi.get(self, "delivery_conditions")

    @delivery_conditions.setter
    def delivery_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]]]):
        pulumi.set(self, "delivery_conditions", value)

    @property
    @pulumi.getter(name="deliveryStatus")
    def delivery_status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the real-time log delivery task. The values are: `enabled`: enabled; `disabled`: disabled. Leave it blank to keep the original configuration. Not required when creating.
        """
        return pulumi.get(self, "delivery_status")

    @delivery_status.setter
    def delivery_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_status", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input['RealtimeLogDeliveryLogFormatArgs']]:
        """
        The output format of log delivery. If it is not filled, it means the default format. The default format logic is as follows: when TaskType is `custom_endpoint`, the default format is an array of multiple JSON objects, each JSON object is a log; when TaskType is `s3`, the default format is JSON Lines; in particular, when TaskType is `cls`, the value of LogFormat.FormatType can only be json, and other parameters in LogFormat will be ignored. It is recommended not to pass LogFormat.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input['RealtimeLogDeliveryLogFormatArgs']]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['RealtimeLogDeliveryS3Args']]:
        """
        Configuration information of AWS S3 compatible storage bucket. This parameter is required when TaskType is s3.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['RealtimeLogDeliveryS3Args']]):
        pulumi.set(self, "s3", value)


@pulumi.input_type
class _RealtimeLogDeliveryState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 cls: Optional[pulumi.Input['RealtimeLogDeliveryClsArgs']] = None,
                 custom_endpoint: Optional[pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs']] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]]] = None,
                 delivery_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]]] = None,
                 delivery_status: Optional[pulumi.Input[str]] = None,
                 entity_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_format: Optional[pulumi.Input['RealtimeLogDeliveryLogFormatArgs']] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input['RealtimeLogDeliveryS3Args']] = None,
                 sample: Optional[pulumi.Input[int]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RealtimeLogDelivery resources.
        :param pulumi.Input[str] area: Data delivery area, possible values are: `mainland`: within mainland China; `overseas`: worldwide (excluding mainland China).
        :param pulumi.Input['RealtimeLogDeliveryClsArgs'] cls: CLS configuration information. This parameter is required when TaskType is cls.
        :param pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs'] custom_endpoint: Customize the configuration information of the HTTP service. This parameter is required when TaskType is set to custom_endpoint.
        :param pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]] custom_fields: The list of custom fields delivered supports extracting specified field values from HTTP request headers, response headers, and cookies. Custom field names cannot be repeated and cannot exceed 200 fields.
        :param pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]] delivery_conditions: The filter condition for log delivery. If it is not filled, all logs will be delivered.
        :param pulumi.Input[str] delivery_status: The status of the real-time log delivery task. The values are: `enabled`: enabled; `disabled`: disabled. Leave it blank to keep the original configuration. Not required when creating.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_lists: List of entities (seven-layer domain names or four-layer proxy instances) corresponding to real-time log delivery tasks. Example values are as follows: Seven-layer domain name: `domain.example.com`; four-layer proxy instance: sid-2s69eb5wcms7. For values, refer to: `https://cloud.tencent.com/document/api/1552/80690`, `https://cloud.tencent.com/document/api/1552/86336`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: A list of preset fields for delivery.
        :param pulumi.Input['RealtimeLogDeliveryLogFormatArgs'] log_format: The output format of log delivery. If it is not filled, it means the default format. The default format logic is as follows: when TaskType is `custom_endpoint`, the default format is an array of multiple JSON objects, each JSON object is a log; when TaskType is `s3`, the default format is JSON Lines; in particular, when TaskType is `cls`, the value of LogFormat.FormatType can only be json, and other parameters in LogFormat will be ignored. It is recommended not to pass LogFormat.
        :param pulumi.Input[str] log_type: Data delivery type, the values are: `domain`: site acceleration log; `application`: four-layer proxy log; `web-rateLiming`: rate limit and CC attack protection log; `web-attack`: managed rule log; `web-rule`: custom rule log; `web-bot`: Bot management log.
        :param pulumi.Input['RealtimeLogDeliveryS3Args'] s3: Configuration information of AWS S3 compatible storage bucket. This parameter is required when TaskType is s3.
        :param pulumi.Input[int] sample: The sampling ratio is in thousandths, with a value range of 1-1000. For example, filling in 605 means the sampling ratio is 60.5%. Leaving it blank means the sampling ratio is 100%.
        :param pulumi.Input[str] task_id: Real-time log delivery task ID.
        :param pulumi.Input[str] task_name: The name of the real-time log delivery task. The format is a combination of numbers, English, -, and _. The maximum length is 200 characters.
        :param pulumi.Input[str] task_type: The real-time log delivery task type. The possible values are: `cls`: push to Tencent Cloud CLS; `custom_endpoint`: push to a custom HTTP(S) address; `s3`: push to an AWS S3 compatible storage bucket address.
        :param pulumi.Input[str] zone_id: ID of the site.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if cls is not None:
            pulumi.set(__self__, "cls", cls)
        if custom_endpoint is not None:
            pulumi.set(__self__, "custom_endpoint", custom_endpoint)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if delivery_conditions is not None:
            pulumi.set(__self__, "delivery_conditions", delivery_conditions)
        if delivery_status is not None:
            pulumi.set(__self__, "delivery_status", delivery_status)
        if entity_lists is not None:
            pulumi.set(__self__, "entity_lists", entity_lists)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if sample is not None:
            pulumi.set(__self__, "sample", sample)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Data delivery area, possible values are: `mainland`: within mainland China; `overseas`: worldwide (excluding mainland China).
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def cls(self) -> Optional[pulumi.Input['RealtimeLogDeliveryClsArgs']]:
        """
        CLS configuration information. This parameter is required when TaskType is cls.
        """
        return pulumi.get(self, "cls")

    @cls.setter
    def cls(self, value: Optional[pulumi.Input['RealtimeLogDeliveryClsArgs']]):
        pulumi.set(self, "cls", value)

    @property
    @pulumi.getter(name="customEndpoint")
    def custom_endpoint(self) -> Optional[pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs']]:
        """
        Customize the configuration information of the HTTP service. This parameter is required when TaskType is set to custom_endpoint.
        """
        return pulumi.get(self, "custom_endpoint")

    @custom_endpoint.setter
    def custom_endpoint(self, value: Optional[pulumi.Input['RealtimeLogDeliveryCustomEndpointArgs']]):
        pulumi.set(self, "custom_endpoint", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]]]:
        """
        The list of custom fields delivered supports extracting specified field values from HTTP request headers, response headers, and cookies. Custom field names cannot be repeated and cannot exceed 200 fields.
        """
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryCustomFieldArgs']]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter(name="deliveryConditions")
    def delivery_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]]]:
        """
        The filter condition for log delivery. If it is not filled, all logs will be delivered.
        """
        return pulumi.get(self, "delivery_conditions")

    @delivery_conditions.setter
    def delivery_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RealtimeLogDeliveryDeliveryConditionArgs']]]]):
        pulumi.set(self, "delivery_conditions", value)

    @property
    @pulumi.getter(name="deliveryStatus")
    def delivery_status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the real-time log delivery task. The values are: `enabled`: enabled; `disabled`: disabled. Leave it blank to keep the original configuration. Not required when creating.
        """
        return pulumi.get(self, "delivery_status")

    @delivery_status.setter
    def delivery_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_status", value)

    @property
    @pulumi.getter(name="entityLists")
    def entity_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of entities (seven-layer domain names or four-layer proxy instances) corresponding to real-time log delivery tasks. Example values are as follows: Seven-layer domain name: `domain.example.com`; four-layer proxy instance: sid-2s69eb5wcms7. For values, refer to: `https://cloud.tencent.com/document/api/1552/80690`, `https://cloud.tencent.com/document/api/1552/86336`.
        """
        return pulumi.get(self, "entity_lists")

    @entity_lists.setter
    def entity_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entity_lists", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of preset fields for delivery.
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input['RealtimeLogDeliveryLogFormatArgs']]:
        """
        The output format of log delivery. If it is not filled, it means the default format. The default format logic is as follows: when TaskType is `custom_endpoint`, the default format is an array of multiple JSON objects, each JSON object is a log; when TaskType is `s3`, the default format is JSON Lines; in particular, when TaskType is `cls`, the value of LogFormat.FormatType can only be json, and other parameters in LogFormat will be ignored. It is recommended not to pass LogFormat.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input['RealtimeLogDeliveryLogFormatArgs']]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Data delivery type, the values are: `domain`: site acceleration log; `application`: four-layer proxy log; `web-rateLiming`: rate limit and CC attack protection log; `web-attack`: managed rule log; `web-rule`: custom rule log; `web-bot`: Bot management log.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['RealtimeLogDeliveryS3Args']]:
        """
        Configuration information of AWS S3 compatible storage bucket. This parameter is required when TaskType is s3.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['RealtimeLogDeliveryS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def sample(self) -> Optional[pulumi.Input[int]]:
        """
        The sampling ratio is in thousandths, with a value range of 1-1000. For example, filling in 605 means the sampling ratio is 60.5%. Leaving it blank means the sampling ratio is 100%.
        """
        return pulumi.get(self, "sample")

    @sample.setter
    def sample(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Real-time log delivery task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the real-time log delivery task. The format is a combination of numbers, English, -, and _. The maximum length is 200 characters.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        The real-time log delivery task type. The possible values are: `cls`: push to Tencent Cloud CLS; `custom_endpoint`: push to a custom HTTP(S) address; `s3`: push to an AWS S3 compatible storage bucket address.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the site.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class RealtimeLogDelivery(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 cls: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryClsArgs']]] = None,
                 custom_endpoint: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomEndpointArgs']]] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomFieldArgs']]]]] = None,
                 delivery_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryDeliveryConditionArgs']]]]] = None,
                 delivery_status: Optional[pulumi.Input[str]] = None,
                 entity_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_format: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryLogFormatArgs']]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryS3Args']]] = None,
                 sample: Optional[pulumi.Input[int]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a teo teo_realtime_log_delivery

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        teo_realtime_log_delivery = tencentcloud.teo.RealtimeLogDelivery("teoRealtimeLogDelivery",
            area="overseas",
            delivery_status="disabled",
            entity_lists=["sid-2yvhjw98uaco"],
            fields=[
                "ServiceID",
                "ConnectTimeStamp",
                "DisconnetTimeStamp",
                "DisconnetReason",
                "ClientRealIP",
                "ClientRegion",
                "EdgeIP",
                "ForwardProtocol",
                "ForwardPort",
                "SentBytes",
                "ReceivedBytes",
                "LogTimeStamp",
            ],
            log_format=tencentcloud.teo.RealtimeLogDeliveryLogFormatArgs(
                field_delimiter=",",
                format_type="json",
                record_delimiter=\"\"\"

        \"\"\",
                record_prefix="{",
                record_suffix="}",
            ),
            log_type="application",
            s3=tencentcloud.teo.RealtimeLogDeliveryS3Args(
                access_id="xxxxxxxxxx",
                access_key="xxxxxxxxxx",
                bucket="test-1253833068",
                compress_type="gzip",
                endpoint="https://test-1253833068.cos.ap-nanjing.myqcloud.com",
                region="ap-nanjing",
            ),
            sample=0,
            task_name="test",
            task_type="s3",
            zone_id="zone-2qtuhspy7cr6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        teo teo_realtime_log_delivery can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/realtimeLogDelivery:RealtimeLogDelivery teo_realtime_log_delivery zoneId#taskId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Data delivery area, possible values are: `mainland`: within mainland China; `overseas`: worldwide (excluding mainland China).
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryClsArgs']] cls: CLS configuration information. This parameter is required when TaskType is cls.
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomEndpointArgs']] custom_endpoint: Customize the configuration information of the HTTP service. This parameter is required when TaskType is set to custom_endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomFieldArgs']]]] custom_fields: The list of custom fields delivered supports extracting specified field values from HTTP request headers, response headers, and cookies. Custom field names cannot be repeated and cannot exceed 200 fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryDeliveryConditionArgs']]]] delivery_conditions: The filter condition for log delivery. If it is not filled, all logs will be delivered.
        :param pulumi.Input[str] delivery_status: The status of the real-time log delivery task. The values are: `enabled`: enabled; `disabled`: disabled. Leave it blank to keep the original configuration. Not required when creating.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_lists: List of entities (seven-layer domain names or four-layer proxy instances) corresponding to real-time log delivery tasks. Example values are as follows: Seven-layer domain name: `domain.example.com`; four-layer proxy instance: sid-2s69eb5wcms7. For values, refer to: `https://cloud.tencent.com/document/api/1552/80690`, `https://cloud.tencent.com/document/api/1552/86336`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: A list of preset fields for delivery.
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryLogFormatArgs']] log_format: The output format of log delivery. If it is not filled, it means the default format. The default format logic is as follows: when TaskType is `custom_endpoint`, the default format is an array of multiple JSON objects, each JSON object is a log; when TaskType is `s3`, the default format is JSON Lines; in particular, when TaskType is `cls`, the value of LogFormat.FormatType can only be json, and other parameters in LogFormat will be ignored. It is recommended not to pass LogFormat.
        :param pulumi.Input[str] log_type: Data delivery type, the values are: `domain`: site acceleration log; `application`: four-layer proxy log; `web-rateLiming`: rate limit and CC attack protection log; `web-attack`: managed rule log; `web-rule`: custom rule log; `web-bot`: Bot management log.
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryS3Args']] s3: Configuration information of AWS S3 compatible storage bucket. This parameter is required when TaskType is s3.
        :param pulumi.Input[int] sample: The sampling ratio is in thousandths, with a value range of 1-1000. For example, filling in 605 means the sampling ratio is 60.5%. Leaving it blank means the sampling ratio is 100%.
        :param pulumi.Input[str] task_name: The name of the real-time log delivery task. The format is a combination of numbers, English, -, and _. The maximum length is 200 characters.
        :param pulumi.Input[str] task_type: The real-time log delivery task type. The possible values are: `cls`: push to Tencent Cloud CLS; `custom_endpoint`: push to a custom HTTP(S) address; `s3`: push to an AWS S3 compatible storage bucket address.
        :param pulumi.Input[str] zone_id: ID of the site.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RealtimeLogDeliveryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a teo teo_realtime_log_delivery

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        teo_realtime_log_delivery = tencentcloud.teo.RealtimeLogDelivery("teoRealtimeLogDelivery",
            area="overseas",
            delivery_status="disabled",
            entity_lists=["sid-2yvhjw98uaco"],
            fields=[
                "ServiceID",
                "ConnectTimeStamp",
                "DisconnetTimeStamp",
                "DisconnetReason",
                "ClientRealIP",
                "ClientRegion",
                "EdgeIP",
                "ForwardProtocol",
                "ForwardPort",
                "SentBytes",
                "ReceivedBytes",
                "LogTimeStamp",
            ],
            log_format=tencentcloud.teo.RealtimeLogDeliveryLogFormatArgs(
                field_delimiter=",",
                format_type="json",
                record_delimiter=\"\"\"

        \"\"\",
                record_prefix="{",
                record_suffix="}",
            ),
            log_type="application",
            s3=tencentcloud.teo.RealtimeLogDeliveryS3Args(
                access_id="xxxxxxxxxx",
                access_key="xxxxxxxxxx",
                bucket="test-1253833068",
                compress_type="gzip",
                endpoint="https://test-1253833068.cos.ap-nanjing.myqcloud.com",
                region="ap-nanjing",
            ),
            sample=0,
            task_name="test",
            task_type="s3",
            zone_id="zone-2qtuhspy7cr6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        teo teo_realtime_log_delivery can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/realtimeLogDelivery:RealtimeLogDelivery teo_realtime_log_delivery zoneId#taskId
        ```

        :param str resource_name: The name of the resource.
        :param RealtimeLogDeliveryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RealtimeLogDeliveryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 cls: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryClsArgs']]] = None,
                 custom_endpoint: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomEndpointArgs']]] = None,
                 custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomFieldArgs']]]]] = None,
                 delivery_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryDeliveryConditionArgs']]]]] = None,
                 delivery_status: Optional[pulumi.Input[str]] = None,
                 entity_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_format: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryLogFormatArgs']]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryS3Args']]] = None,
                 sample: Optional[pulumi.Input[int]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RealtimeLogDeliveryArgs.__new__(RealtimeLogDeliveryArgs)

            if area is None and not opts.urn:
                raise TypeError("Missing required property 'area'")
            __props__.__dict__["area"] = area
            __props__.__dict__["cls"] = cls
            __props__.__dict__["custom_endpoint"] = custom_endpoint
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["delivery_conditions"] = delivery_conditions
            __props__.__dict__["delivery_status"] = delivery_status
            if entity_lists is None and not opts.urn:
                raise TypeError("Missing required property 'entity_lists'")
            __props__.__dict__["entity_lists"] = entity_lists
            if fields is None and not opts.urn:
                raise TypeError("Missing required property 'fields'")
            __props__.__dict__["fields"] = fields
            __props__.__dict__["log_format"] = log_format
            if log_type is None and not opts.urn:
                raise TypeError("Missing required property 'log_type'")
            __props__.__dict__["log_type"] = log_type
            __props__.__dict__["s3"] = s3
            if sample is None and not opts.urn:
                raise TypeError("Missing required property 'sample'")
            __props__.__dict__["sample"] = sample
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            if task_type is None and not opts.urn:
                raise TypeError("Missing required property 'task_type'")
            __props__.__dict__["task_type"] = task_type
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["task_id"] = None
        super(RealtimeLogDelivery, __self__).__init__(
            'tencentcloud:Teo/realtimeLogDelivery:RealtimeLogDelivery',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            cls: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryClsArgs']]] = None,
            custom_endpoint: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomEndpointArgs']]] = None,
            custom_fields: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomFieldArgs']]]]] = None,
            delivery_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryDeliveryConditionArgs']]]]] = None,
            delivery_status: Optional[pulumi.Input[str]] = None,
            entity_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            log_format: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryLogFormatArgs']]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            s3: Optional[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryS3Args']]] = None,
            sample: Optional[pulumi.Input[int]] = None,
            task_id: Optional[pulumi.Input[str]] = None,
            task_name: Optional[pulumi.Input[str]] = None,
            task_type: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'RealtimeLogDelivery':
        """
        Get an existing RealtimeLogDelivery resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Data delivery area, possible values are: `mainland`: within mainland China; `overseas`: worldwide (excluding mainland China).
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryClsArgs']] cls: CLS configuration information. This parameter is required when TaskType is cls.
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomEndpointArgs']] custom_endpoint: Customize the configuration information of the HTTP service. This parameter is required when TaskType is set to custom_endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryCustomFieldArgs']]]] custom_fields: The list of custom fields delivered supports extracting specified field values from HTTP request headers, response headers, and cookies. Custom field names cannot be repeated and cannot exceed 200 fields.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RealtimeLogDeliveryDeliveryConditionArgs']]]] delivery_conditions: The filter condition for log delivery. If it is not filled, all logs will be delivered.
        :param pulumi.Input[str] delivery_status: The status of the real-time log delivery task. The values are: `enabled`: enabled; `disabled`: disabled. Leave it blank to keep the original configuration. Not required when creating.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] entity_lists: List of entities (seven-layer domain names or four-layer proxy instances) corresponding to real-time log delivery tasks. Example values are as follows: Seven-layer domain name: `domain.example.com`; four-layer proxy instance: sid-2s69eb5wcms7. For values, refer to: `https://cloud.tencent.com/document/api/1552/80690`, `https://cloud.tencent.com/document/api/1552/86336`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] fields: A list of preset fields for delivery.
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryLogFormatArgs']] log_format: The output format of log delivery. If it is not filled, it means the default format. The default format logic is as follows: when TaskType is `custom_endpoint`, the default format is an array of multiple JSON objects, each JSON object is a log; when TaskType is `s3`, the default format is JSON Lines; in particular, when TaskType is `cls`, the value of LogFormat.FormatType can only be json, and other parameters in LogFormat will be ignored. It is recommended not to pass LogFormat.
        :param pulumi.Input[str] log_type: Data delivery type, the values are: `domain`: site acceleration log; `application`: four-layer proxy log; `web-rateLiming`: rate limit and CC attack protection log; `web-attack`: managed rule log; `web-rule`: custom rule log; `web-bot`: Bot management log.
        :param pulumi.Input[pulumi.InputType['RealtimeLogDeliveryS3Args']] s3: Configuration information of AWS S3 compatible storage bucket. This parameter is required when TaskType is s3.
        :param pulumi.Input[int] sample: The sampling ratio is in thousandths, with a value range of 1-1000. For example, filling in 605 means the sampling ratio is 60.5%. Leaving it blank means the sampling ratio is 100%.
        :param pulumi.Input[str] task_id: Real-time log delivery task ID.
        :param pulumi.Input[str] task_name: The name of the real-time log delivery task. The format is a combination of numbers, English, -, and _. The maximum length is 200 characters.
        :param pulumi.Input[str] task_type: The real-time log delivery task type. The possible values are: `cls`: push to Tencent Cloud CLS; `custom_endpoint`: push to a custom HTTP(S) address; `s3`: push to an AWS S3 compatible storage bucket address.
        :param pulumi.Input[str] zone_id: ID of the site.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RealtimeLogDeliveryState.__new__(_RealtimeLogDeliveryState)

        __props__.__dict__["area"] = area
        __props__.__dict__["cls"] = cls
        __props__.__dict__["custom_endpoint"] = custom_endpoint
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["delivery_conditions"] = delivery_conditions
        __props__.__dict__["delivery_status"] = delivery_status
        __props__.__dict__["entity_lists"] = entity_lists
        __props__.__dict__["fields"] = fields
        __props__.__dict__["log_format"] = log_format
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["s3"] = s3
        __props__.__dict__["sample"] = sample
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_type"] = task_type
        __props__.__dict__["zone_id"] = zone_id
        return RealtimeLogDelivery(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[str]:
        """
        Data delivery area, possible values are: `mainland`: within mainland China; `overseas`: worldwide (excluding mainland China).
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cls(self) -> pulumi.Output['outputs.RealtimeLogDeliveryCls']:
        """
        CLS configuration information. This parameter is required when TaskType is cls.
        """
        return pulumi.get(self, "cls")

    @property
    @pulumi.getter(name="customEndpoint")
    def custom_endpoint(self) -> pulumi.Output['outputs.RealtimeLogDeliveryCustomEndpoint']:
        """
        Customize the configuration information of the HTTP service. This parameter is required when TaskType is set to custom_endpoint.
        """
        return pulumi.get(self, "custom_endpoint")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Sequence['outputs.RealtimeLogDeliveryCustomField']]:
        """
        The list of custom fields delivered supports extracting specified field values from HTTP request headers, response headers, and cookies. Custom field names cannot be repeated and cannot exceed 200 fields.
        """
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter(name="deliveryConditions")
    def delivery_conditions(self) -> pulumi.Output[Sequence['outputs.RealtimeLogDeliveryDeliveryCondition']]:
        """
        The filter condition for log delivery. If it is not filled, all logs will be delivered.
        """
        return pulumi.get(self, "delivery_conditions")

    @property
    @pulumi.getter(name="deliveryStatus")
    def delivery_status(self) -> pulumi.Output[str]:
        """
        The status of the real-time log delivery task. The values are: `enabled`: enabled; `disabled`: disabled. Leave it blank to keep the original configuration. Not required when creating.
        """
        return pulumi.get(self, "delivery_status")

    @property
    @pulumi.getter(name="entityLists")
    def entity_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        List of entities (seven-layer domain names or four-layer proxy instances) corresponding to real-time log delivery tasks. Example values are as follows: Seven-layer domain name: `domain.example.com`; four-layer proxy instance: sid-2s69eb5wcms7. For values, refer to: `https://cloud.tencent.com/document/api/1552/80690`, `https://cloud.tencent.com/document/api/1552/86336`.
        """
        return pulumi.get(self, "entity_lists")

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of preset fields for delivery.
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> pulumi.Output['outputs.RealtimeLogDeliveryLogFormat']:
        """
        The output format of log delivery. If it is not filled, it means the default format. The default format logic is as follows: when TaskType is `custom_endpoint`, the default format is an array of multiple JSON objects, each JSON object is a log; when TaskType is `s3`, the default format is JSON Lines; in particular, when TaskType is `cls`, the value of LogFormat.FormatType can only be json, and other parameters in LogFormat will be ignored. It is recommended not to pass LogFormat.
        """
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[str]:
        """
        Data delivery type, the values are: `domain`: site acceleration log; `application`: four-layer proxy log; `web-rateLiming`: rate limit and CC attack protection log; `web-attack`: managed rule log; `web-rule`: custom rule log; `web-bot`: Bot management log.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Output['outputs.RealtimeLogDeliveryS3']:
        """
        Configuration information of AWS S3 compatible storage bucket. This parameter is required when TaskType is s3.
        """
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter
    def sample(self) -> pulumi.Output[int]:
        """
        The sampling ratio is in thousandths, with a value range of 1-1000. For example, filling in 605 means the sampling ratio is 60.5%. Leaving it blank means the sampling ratio is 100%.
        """
        return pulumi.get(self, "sample")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[str]:
        """
        Real-time log delivery task ID.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[str]:
        """
        The name of the real-time log delivery task. The format is a combination of numbers, English, -, and _. The maximum length is 200 characters.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[str]:
        """
        The real-time log delivery task type. The possible values are: `cls`: push to Tencent Cloud CLS; `custom_endpoint`: push to a custom HTTP(S) address; `s3`: push to an AWS S3 compatible storage bucket address.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        ID of the site.
        """
        return pulumi.get(self, "zone_id")

