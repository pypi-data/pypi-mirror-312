# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DnsSecArgs', 'DnsSec']

@pulumi.input_type
class DnsSecArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 dnssec: Optional[pulumi.Input['DnsSecDnssecArgs']] = None):
        """
        The set of arguments for constructing a DnsSec resource.
        :param pulumi.Input[str] status: DNSSEC status. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] zone_id: Site ID.
        :param pulumi.Input['DnsSecDnssecArgs'] dnssec: DNSSEC infos.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone_id", zone_id)
        if dnssec is not None:
            pulumi.set(__self__, "dnssec", dnssec)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        DNSSEC status. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def dnssec(self) -> Optional[pulumi.Input['DnsSecDnssecArgs']]:
        """
        DNSSEC infos.
        """
        return pulumi.get(self, "dnssec")

    @dnssec.setter
    def dnssec(self, value: Optional[pulumi.Input['DnsSecDnssecArgs']]):
        pulumi.set(self, "dnssec", value)


@pulumi.input_type
class _DnsSecState:
    def __init__(__self__, *,
                 dnssec: Optional[pulumi.Input['DnsSecDnssecArgs']] = None,
                 modified_on: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DnsSec resources.
        :param pulumi.Input['DnsSecDnssecArgs'] dnssec: DNSSEC infos.
        :param pulumi.Input[str] modified_on: Last modification date.
        :param pulumi.Input[str] status: DNSSEC status. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        if dnssec is not None:
            pulumi.set(__self__, "dnssec", dnssec)
        if modified_on is not None:
            pulumi.set(__self__, "modified_on", modified_on)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def dnssec(self) -> Optional[pulumi.Input['DnsSecDnssecArgs']]:
        """
        DNSSEC infos.
        """
        return pulumi.get(self, "dnssec")

    @dnssec.setter
    def dnssec(self, value: Optional[pulumi.Input['DnsSecDnssecArgs']]):
        pulumi.set(self, "dnssec", value)

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> Optional[pulumi.Input[str]]:
        """
        Last modification date.
        """
        return pulumi.get(self, "modified_on")

    @modified_on.setter
    def modified_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modified_on", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        DNSSEC status. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class DnsSec(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dnssec: Optional[pulumi.Input[pulumi.InputType['DnsSecDnssecArgs']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DnsSec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DnsSecDnssecArgs']] dnssec: DNSSEC infos.
        :param pulumi.Input[str] status: DNSSEC status. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DnsSecArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DnsSec resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DnsSecArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DnsSecArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dnssec: Optional[pulumi.Input[pulumi.InputType['DnsSecDnssecArgs']]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DnsSecArgs.__new__(DnsSecArgs)

            __props__.__dict__["dnssec"] = dnssec
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["modified_on"] = None
        super(DnsSec, __self__).__init__(
            'tencentcloud:Teo/dnsSec:DnsSec',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dnssec: Optional[pulumi.Input[pulumi.InputType['DnsSecDnssecArgs']]] = None,
            modified_on: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'DnsSec':
        """
        Get an existing DnsSec resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DnsSecDnssecArgs']] dnssec: DNSSEC infos.
        :param pulumi.Input[str] modified_on: Last modification date.
        :param pulumi.Input[str] status: DNSSEC status. Valid values: `enabled`, `disabled`.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DnsSecState.__new__(_DnsSecState)

        __props__.__dict__["dnssec"] = dnssec
        __props__.__dict__["modified_on"] = modified_on
        __props__.__dict__["status"] = status
        __props__.__dict__["zone_id"] = zone_id
        return DnsSec(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def dnssec(self) -> pulumi.Output['outputs.DnsSecDnssec']:
        """
        DNSSEC infos.
        """
        return pulumi.get(self, "dnssec")

    @property
    @pulumi.getter(name="modifiedOn")
    def modified_on(self) -> pulumi.Output[str]:
        """
        Last modification date.
        """
        return pulumi.get(self, "modified_on")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        DNSSEC status. Valid values: `enabled`, `disabled`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

