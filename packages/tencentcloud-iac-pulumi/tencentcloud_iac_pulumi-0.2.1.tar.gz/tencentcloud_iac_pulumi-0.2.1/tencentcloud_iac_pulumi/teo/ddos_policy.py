# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DdosPolicyArgs', 'DdosPolicy']

@pulumi.input_type
class DdosPolicyArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[int],
                 zone_id: pulumi.Input[str],
                 ddos_rule: Optional[pulumi.Input['DdosPolicyDdosRuleArgs']] = None):
        """
        The set of arguments for constructing a DdosPolicy resource.
        :param pulumi.Input[int] policy_id: Policy ID.
        :param pulumi.Input[str] zone_id: Site ID.
        :param pulumi.Input['DdosPolicyDdosRuleArgs'] ddos_rule: DDoS Configuration of the zone.
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if ddos_rule is not None:
            pulumi.set(__self__, "ddos_rule", ddos_rule)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="ddosRule")
    def ddos_rule(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleArgs']]:
        """
        DDoS Configuration of the zone.
        """
        return pulumi.get(self, "ddos_rule")

    @ddos_rule.setter
    def ddos_rule(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleArgs']]):
        pulumi.set(self, "ddos_rule", value)


@pulumi.input_type
class _DdosPolicyState:
    def __init__(__self__, *,
                 ddos_rule: Optional[pulumi.Input['DdosPolicyDdosRuleArgs']] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DdosPolicy resources.
        :param pulumi.Input['DdosPolicyDdosRuleArgs'] ddos_rule: DDoS Configuration of the zone.
        :param pulumi.Input[int] policy_id: Policy ID.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        if ddos_rule is not None:
            pulumi.set(__self__, "ddos_rule", ddos_rule)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="ddosRule")
    def ddos_rule(self) -> Optional[pulumi.Input['DdosPolicyDdosRuleArgs']]:
        """
        DDoS Configuration of the zone.
        """
        return pulumi.get(self, "ddos_rule")

    @ddos_rule.setter
    def ddos_rule(self, value: Optional[pulumi.Input['DdosPolicyDdosRuleArgs']]):
        pulumi.set(self, "ddos_rule", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class DdosPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ddos_rule: Optional[pulumi.Input[pulumi.InputType['DdosPolicyDdosRuleArgs']]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DdosPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DdosPolicyDdosRuleArgs']] ddos_rule: DDoS Configuration of the zone.
        :param pulumi.Input[int] policy_id: Policy ID.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DdosPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DdosPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DdosPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DdosPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ddos_rule: Optional[pulumi.Input[pulumi.InputType['DdosPolicyDdosRuleArgs']]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DdosPolicyArgs.__new__(DdosPolicyArgs)

            __props__.__dict__["ddos_rule"] = ddos_rule
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
        super(DdosPolicy, __self__).__init__(
            'tencentcloud:Teo/ddosPolicy:DdosPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ddos_rule: Optional[pulumi.Input[pulumi.InputType['DdosPolicyDdosRuleArgs']]] = None,
            policy_id: Optional[pulumi.Input[int]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'DdosPolicy':
        """
        Get an existing DdosPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DdosPolicyDdosRuleArgs']] ddos_rule: DDoS Configuration of the zone.
        :param pulumi.Input[int] policy_id: Policy ID.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DdosPolicyState.__new__(_DdosPolicyState)

        __props__.__dict__["ddos_rule"] = ddos_rule
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["zone_id"] = zone_id
        return DdosPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ddosRule")
    def ddos_rule(self) -> pulumi.Output['outputs.DdosPolicyDdosRule']:
        """
        DDoS Configuration of the zone.
        """
        return pulumi.get(self, "ddos_rule")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[int]:
        """
        Policy ID.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

