# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZoneSettingArgs', 'ZoneSetting']

@pulumi.input_type
class ZoneSettingArgs:
    def __init__(__self__, *,
                 zone_id: pulumi.Input[str],
                 cache: Optional[pulumi.Input['ZoneSettingCacheArgs']] = None,
                 cache_key: Optional[pulumi.Input['ZoneSettingCacheKeyArgs']] = None,
                 cache_prefresh: Optional[pulumi.Input['ZoneSettingCachePrefreshArgs']] = None,
                 client_ip_header: Optional[pulumi.Input['ZoneSettingClientIpHeaderArgs']] = None,
                 compression: Optional[pulumi.Input['ZoneSettingCompressionArgs']] = None,
                 force_redirect: Optional[pulumi.Input['ZoneSettingForceRedirectArgs']] = None,
                 https: Optional[pulumi.Input['ZoneSettingHttpsArgs']] = None,
                 ipv6: Optional[pulumi.Input['ZoneSettingIpv6Args']] = None,
                 max_age: Optional[pulumi.Input['ZoneSettingMaxAgeArgs']] = None,
                 offline_cache: Optional[pulumi.Input['ZoneSettingOfflineCacheArgs']] = None,
                 origin: Optional[pulumi.Input['ZoneSettingOriginArgs']] = None,
                 post_max_size: Optional[pulumi.Input['ZoneSettingPostMaxSizeArgs']] = None,
                 quic: Optional[pulumi.Input['ZoneSettingQuicArgs']] = None,
                 smart_routing: Optional[pulumi.Input['ZoneSettingSmartRoutingArgs']] = None,
                 upstream_http2: Optional[pulumi.Input['ZoneSettingUpstreamHttp2Args']] = None,
                 web_socket: Optional[pulumi.Input['ZoneSettingWebSocketArgs']] = None):
        """
        The set of arguments for constructing a ZoneSetting resource.
        :param pulumi.Input[str] zone_id: Site ID.
        :param pulumi.Input['ZoneSettingCacheArgs'] cache: Cache expiration time configuration.
        :param pulumi.Input['ZoneSettingCacheKeyArgs'] cache_key: Node cache key configuration.
        :param pulumi.Input['ZoneSettingCachePrefreshArgs'] cache_prefresh: Cache pre-refresh configuration.
        :param pulumi.Input['ZoneSettingClientIpHeaderArgs'] client_ip_header: Origin-pull client IP header configuration.
        :param pulumi.Input['ZoneSettingCompressionArgs'] compression: Smart compression configuration.
        :param pulumi.Input['ZoneSettingForceRedirectArgs'] force_redirect: Force HTTPS redirect configuration.
        :param pulumi.Input['ZoneSettingHttpsArgs'] https: HTTPS acceleration configuration.
        :param pulumi.Input['ZoneSettingIpv6Args'] ipv6: IPv6 access configuration.
        :param pulumi.Input['ZoneSettingMaxAgeArgs'] max_age: Browser cache configuration.
        :param pulumi.Input['ZoneSettingOfflineCacheArgs'] offline_cache: Offline cache configuration.
        :param pulumi.Input['ZoneSettingOriginArgs'] origin: Origin server configuration.
        :param pulumi.Input['ZoneSettingPostMaxSizeArgs'] post_max_size: Maximum size of files transferred over POST request.
        :param pulumi.Input['ZoneSettingQuicArgs'] quic: QUIC access configuration.
        :param pulumi.Input['ZoneSettingSmartRoutingArgs'] smart_routing: Smart acceleration configuration.
        :param pulumi.Input['ZoneSettingUpstreamHttp2Args'] upstream_http2: HTTP2 origin-pull configuration.
        :param pulumi.Input['ZoneSettingWebSocketArgs'] web_socket: WebSocket configuration.
        """
        pulumi.set(__self__, "zone_id", zone_id)
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if cache_prefresh is not None:
            pulumi.set(__self__, "cache_prefresh", cache_prefresh)
        if client_ip_header is not None:
            pulumi.set(__self__, "client_ip_header", client_ip_header)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if force_redirect is not None:
            pulumi.set(__self__, "force_redirect", force_redirect)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if offline_cache is not None:
            pulumi.set(__self__, "offline_cache", offline_cache)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if post_max_size is not None:
            pulumi.set(__self__, "post_max_size", post_max_size)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if smart_routing is not None:
            pulumi.set(__self__, "smart_routing", smart_routing)
        if upstream_http2 is not None:
            pulumi.set(__self__, "upstream_http2", upstream_http2)
        if web_socket is not None:
            pulumi.set(__self__, "web_socket", web_socket)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter
    def cache(self) -> Optional[pulumi.Input['ZoneSettingCacheArgs']]:
        """
        Cache expiration time configuration.
        """
        return pulumi.get(self, "cache")

    @cache.setter
    def cache(self, value: Optional[pulumi.Input['ZoneSettingCacheArgs']]):
        pulumi.set(self, "cache", value)

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[pulumi.Input['ZoneSettingCacheKeyArgs']]:
        """
        Node cache key configuration.
        """
        return pulumi.get(self, "cache_key")

    @cache_key.setter
    def cache_key(self, value: Optional[pulumi.Input['ZoneSettingCacheKeyArgs']]):
        pulumi.set(self, "cache_key", value)

    @property
    @pulumi.getter(name="cachePrefresh")
    def cache_prefresh(self) -> Optional[pulumi.Input['ZoneSettingCachePrefreshArgs']]:
        """
        Cache pre-refresh configuration.
        """
        return pulumi.get(self, "cache_prefresh")

    @cache_prefresh.setter
    def cache_prefresh(self, value: Optional[pulumi.Input['ZoneSettingCachePrefreshArgs']]):
        pulumi.set(self, "cache_prefresh", value)

    @property
    @pulumi.getter(name="clientIpHeader")
    def client_ip_header(self) -> Optional[pulumi.Input['ZoneSettingClientIpHeaderArgs']]:
        """
        Origin-pull client IP header configuration.
        """
        return pulumi.get(self, "client_ip_header")

    @client_ip_header.setter
    def client_ip_header(self, value: Optional[pulumi.Input['ZoneSettingClientIpHeaderArgs']]):
        pulumi.set(self, "client_ip_header", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['ZoneSettingCompressionArgs']]:
        """
        Smart compression configuration.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['ZoneSettingCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> Optional[pulumi.Input['ZoneSettingForceRedirectArgs']]:
        """
        Force HTTPS redirect configuration.
        """
        return pulumi.get(self, "force_redirect")

    @force_redirect.setter
    def force_redirect(self, value: Optional[pulumi.Input['ZoneSettingForceRedirectArgs']]):
        pulumi.set(self, "force_redirect", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input['ZoneSettingHttpsArgs']]:
        """
        HTTPS acceleration configuration.
        """
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input['ZoneSettingHttpsArgs']]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input['ZoneSettingIpv6Args']]:
        """
        IPv6 access configuration.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input['ZoneSettingIpv6Args']]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input['ZoneSettingMaxAgeArgs']]:
        """
        Browser cache configuration.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input['ZoneSettingMaxAgeArgs']]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="offlineCache")
    def offline_cache(self) -> Optional[pulumi.Input['ZoneSettingOfflineCacheArgs']]:
        """
        Offline cache configuration.
        """
        return pulumi.get(self, "offline_cache")

    @offline_cache.setter
    def offline_cache(self, value: Optional[pulumi.Input['ZoneSettingOfflineCacheArgs']]):
        pulumi.set(self, "offline_cache", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input['ZoneSettingOriginArgs']]:
        """
        Origin server configuration.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input['ZoneSettingOriginArgs']]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="postMaxSize")
    def post_max_size(self) -> Optional[pulumi.Input['ZoneSettingPostMaxSizeArgs']]:
        """
        Maximum size of files transferred over POST request.
        """
        return pulumi.get(self, "post_max_size")

    @post_max_size.setter
    def post_max_size(self, value: Optional[pulumi.Input['ZoneSettingPostMaxSizeArgs']]):
        pulumi.set(self, "post_max_size", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['ZoneSettingQuicArgs']]:
        """
        QUIC access configuration.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['ZoneSettingQuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter(name="smartRouting")
    def smart_routing(self) -> Optional[pulumi.Input['ZoneSettingSmartRoutingArgs']]:
        """
        Smart acceleration configuration.
        """
        return pulumi.get(self, "smart_routing")

    @smart_routing.setter
    def smart_routing(self, value: Optional[pulumi.Input['ZoneSettingSmartRoutingArgs']]):
        pulumi.set(self, "smart_routing", value)

    @property
    @pulumi.getter(name="upstreamHttp2")
    def upstream_http2(self) -> Optional[pulumi.Input['ZoneSettingUpstreamHttp2Args']]:
        """
        HTTP2 origin-pull configuration.
        """
        return pulumi.get(self, "upstream_http2")

    @upstream_http2.setter
    def upstream_http2(self, value: Optional[pulumi.Input['ZoneSettingUpstreamHttp2Args']]):
        pulumi.set(self, "upstream_http2", value)

    @property
    @pulumi.getter(name="webSocket")
    def web_socket(self) -> Optional[pulumi.Input['ZoneSettingWebSocketArgs']]:
        """
        WebSocket configuration.
        """
        return pulumi.get(self, "web_socket")

    @web_socket.setter
    def web_socket(self, value: Optional[pulumi.Input['ZoneSettingWebSocketArgs']]):
        pulumi.set(self, "web_socket", value)


@pulumi.input_type
class _ZoneSettingState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 cache: Optional[pulumi.Input['ZoneSettingCacheArgs']] = None,
                 cache_key: Optional[pulumi.Input['ZoneSettingCacheKeyArgs']] = None,
                 cache_prefresh: Optional[pulumi.Input['ZoneSettingCachePrefreshArgs']] = None,
                 client_ip_header: Optional[pulumi.Input['ZoneSettingClientIpHeaderArgs']] = None,
                 compression: Optional[pulumi.Input['ZoneSettingCompressionArgs']] = None,
                 force_redirect: Optional[pulumi.Input['ZoneSettingForceRedirectArgs']] = None,
                 https: Optional[pulumi.Input['ZoneSettingHttpsArgs']] = None,
                 ipv6: Optional[pulumi.Input['ZoneSettingIpv6Args']] = None,
                 max_age: Optional[pulumi.Input['ZoneSettingMaxAgeArgs']] = None,
                 offline_cache: Optional[pulumi.Input['ZoneSettingOfflineCacheArgs']] = None,
                 origin: Optional[pulumi.Input['ZoneSettingOriginArgs']] = None,
                 post_max_size: Optional[pulumi.Input['ZoneSettingPostMaxSizeArgs']] = None,
                 quic: Optional[pulumi.Input['ZoneSettingQuicArgs']] = None,
                 smart_routing: Optional[pulumi.Input['ZoneSettingSmartRoutingArgs']] = None,
                 upstream_http2: Optional[pulumi.Input['ZoneSettingUpstreamHttp2Args']] = None,
                 web_socket: Optional[pulumi.Input['ZoneSettingWebSocketArgs']] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ZoneSetting resources.
        :param pulumi.Input[str] area: Acceleration area of the zone. Valid values: `mainland`, `overseas`.
        :param pulumi.Input['ZoneSettingCacheArgs'] cache: Cache expiration time configuration.
        :param pulumi.Input['ZoneSettingCacheKeyArgs'] cache_key: Node cache key configuration.
        :param pulumi.Input['ZoneSettingCachePrefreshArgs'] cache_prefresh: Cache pre-refresh configuration.
        :param pulumi.Input['ZoneSettingClientIpHeaderArgs'] client_ip_header: Origin-pull client IP header configuration.
        :param pulumi.Input['ZoneSettingCompressionArgs'] compression: Smart compression configuration.
        :param pulumi.Input['ZoneSettingForceRedirectArgs'] force_redirect: Force HTTPS redirect configuration.
        :param pulumi.Input['ZoneSettingHttpsArgs'] https: HTTPS acceleration configuration.
        :param pulumi.Input['ZoneSettingIpv6Args'] ipv6: IPv6 access configuration.
        :param pulumi.Input['ZoneSettingMaxAgeArgs'] max_age: Browser cache configuration.
        :param pulumi.Input['ZoneSettingOfflineCacheArgs'] offline_cache: Offline cache configuration.
        :param pulumi.Input['ZoneSettingOriginArgs'] origin: Origin server configuration.
        :param pulumi.Input['ZoneSettingPostMaxSizeArgs'] post_max_size: Maximum size of files transferred over POST request.
        :param pulumi.Input['ZoneSettingQuicArgs'] quic: QUIC access configuration.
        :param pulumi.Input['ZoneSettingSmartRoutingArgs'] smart_routing: Smart acceleration configuration.
        :param pulumi.Input['ZoneSettingUpstreamHttp2Args'] upstream_http2: HTTP2 origin-pull configuration.
        :param pulumi.Input['ZoneSettingWebSocketArgs'] web_socket: WebSocket configuration.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if cache is not None:
            pulumi.set(__self__, "cache", cache)
        if cache_key is not None:
            pulumi.set(__self__, "cache_key", cache_key)
        if cache_prefresh is not None:
            pulumi.set(__self__, "cache_prefresh", cache_prefresh)
        if client_ip_header is not None:
            pulumi.set(__self__, "client_ip_header", client_ip_header)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if force_redirect is not None:
            pulumi.set(__self__, "force_redirect", force_redirect)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if offline_cache is not None:
            pulumi.set(__self__, "offline_cache", offline_cache)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if post_max_size is not None:
            pulumi.set(__self__, "post_max_size", post_max_size)
        if quic is not None:
            pulumi.set(__self__, "quic", quic)
        if smart_routing is not None:
            pulumi.set(__self__, "smart_routing", smart_routing)
        if upstream_http2 is not None:
            pulumi.set(__self__, "upstream_http2", upstream_http2)
        if web_socket is not None:
            pulumi.set(__self__, "web_socket", web_socket)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Acceleration area of the zone. Valid values: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def cache(self) -> Optional[pulumi.Input['ZoneSettingCacheArgs']]:
        """
        Cache expiration time configuration.
        """
        return pulumi.get(self, "cache")

    @cache.setter
    def cache(self, value: Optional[pulumi.Input['ZoneSettingCacheArgs']]):
        pulumi.set(self, "cache", value)

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> Optional[pulumi.Input['ZoneSettingCacheKeyArgs']]:
        """
        Node cache key configuration.
        """
        return pulumi.get(self, "cache_key")

    @cache_key.setter
    def cache_key(self, value: Optional[pulumi.Input['ZoneSettingCacheKeyArgs']]):
        pulumi.set(self, "cache_key", value)

    @property
    @pulumi.getter(name="cachePrefresh")
    def cache_prefresh(self) -> Optional[pulumi.Input['ZoneSettingCachePrefreshArgs']]:
        """
        Cache pre-refresh configuration.
        """
        return pulumi.get(self, "cache_prefresh")

    @cache_prefresh.setter
    def cache_prefresh(self, value: Optional[pulumi.Input['ZoneSettingCachePrefreshArgs']]):
        pulumi.set(self, "cache_prefresh", value)

    @property
    @pulumi.getter(name="clientIpHeader")
    def client_ip_header(self) -> Optional[pulumi.Input['ZoneSettingClientIpHeaderArgs']]:
        """
        Origin-pull client IP header configuration.
        """
        return pulumi.get(self, "client_ip_header")

    @client_ip_header.setter
    def client_ip_header(self, value: Optional[pulumi.Input['ZoneSettingClientIpHeaderArgs']]):
        pulumi.set(self, "client_ip_header", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['ZoneSettingCompressionArgs']]:
        """
        Smart compression configuration.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['ZoneSettingCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> Optional[pulumi.Input['ZoneSettingForceRedirectArgs']]:
        """
        Force HTTPS redirect configuration.
        """
        return pulumi.get(self, "force_redirect")

    @force_redirect.setter
    def force_redirect(self, value: Optional[pulumi.Input['ZoneSettingForceRedirectArgs']]):
        pulumi.set(self, "force_redirect", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input['ZoneSettingHttpsArgs']]:
        """
        HTTPS acceleration configuration.
        """
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input['ZoneSettingHttpsArgs']]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input['ZoneSettingIpv6Args']]:
        """
        IPv6 access configuration.
        """
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input['ZoneSettingIpv6Args']]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input['ZoneSettingMaxAgeArgs']]:
        """
        Browser cache configuration.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input['ZoneSettingMaxAgeArgs']]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="offlineCache")
    def offline_cache(self) -> Optional[pulumi.Input['ZoneSettingOfflineCacheArgs']]:
        """
        Offline cache configuration.
        """
        return pulumi.get(self, "offline_cache")

    @offline_cache.setter
    def offline_cache(self, value: Optional[pulumi.Input['ZoneSettingOfflineCacheArgs']]):
        pulumi.set(self, "offline_cache", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input['ZoneSettingOriginArgs']]:
        """
        Origin server configuration.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input['ZoneSettingOriginArgs']]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="postMaxSize")
    def post_max_size(self) -> Optional[pulumi.Input['ZoneSettingPostMaxSizeArgs']]:
        """
        Maximum size of files transferred over POST request.
        """
        return pulumi.get(self, "post_max_size")

    @post_max_size.setter
    def post_max_size(self, value: Optional[pulumi.Input['ZoneSettingPostMaxSizeArgs']]):
        pulumi.set(self, "post_max_size", value)

    @property
    @pulumi.getter
    def quic(self) -> Optional[pulumi.Input['ZoneSettingQuicArgs']]:
        """
        QUIC access configuration.
        """
        return pulumi.get(self, "quic")

    @quic.setter
    def quic(self, value: Optional[pulumi.Input['ZoneSettingQuicArgs']]):
        pulumi.set(self, "quic", value)

    @property
    @pulumi.getter(name="smartRouting")
    def smart_routing(self) -> Optional[pulumi.Input['ZoneSettingSmartRoutingArgs']]:
        """
        Smart acceleration configuration.
        """
        return pulumi.get(self, "smart_routing")

    @smart_routing.setter
    def smart_routing(self, value: Optional[pulumi.Input['ZoneSettingSmartRoutingArgs']]):
        pulumi.set(self, "smart_routing", value)

    @property
    @pulumi.getter(name="upstreamHttp2")
    def upstream_http2(self) -> Optional[pulumi.Input['ZoneSettingUpstreamHttp2Args']]:
        """
        HTTP2 origin-pull configuration.
        """
        return pulumi.get(self, "upstream_http2")

    @upstream_http2.setter
    def upstream_http2(self, value: Optional[pulumi.Input['ZoneSettingUpstreamHttp2Args']]):
        pulumi.set(self, "upstream_http2", value)

    @property
    @pulumi.getter(name="webSocket")
    def web_socket(self) -> Optional[pulumi.Input['ZoneSettingWebSocketArgs']]:
        """
        WebSocket configuration.
        """
        return pulumi.get(self, "web_socket")

    @web_socket.setter
    def web_socket(self, value: Optional[pulumi.Input['ZoneSettingWebSocketArgs']]):
        pulumi.set(self, "web_socket", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class ZoneSetting(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCacheArgs']]] = None,
                 cache_key: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCacheKeyArgs']]] = None,
                 cache_prefresh: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCachePrefreshArgs']]] = None,
                 client_ip_header: Optional[pulumi.Input[pulumi.InputType['ZoneSettingClientIpHeaderArgs']]] = None,
                 compression: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCompressionArgs']]] = None,
                 force_redirect: Optional[pulumi.Input[pulumi.InputType['ZoneSettingForceRedirectArgs']]] = None,
                 https: Optional[pulumi.Input[pulumi.InputType['ZoneSettingHttpsArgs']]] = None,
                 ipv6: Optional[pulumi.Input[pulumi.InputType['ZoneSettingIpv6Args']]] = None,
                 max_age: Optional[pulumi.Input[pulumi.InputType['ZoneSettingMaxAgeArgs']]] = None,
                 offline_cache: Optional[pulumi.Input[pulumi.InputType['ZoneSettingOfflineCacheArgs']]] = None,
                 origin: Optional[pulumi.Input[pulumi.InputType['ZoneSettingOriginArgs']]] = None,
                 post_max_size: Optional[pulumi.Input[pulumi.InputType['ZoneSettingPostMaxSizeArgs']]] = None,
                 quic: Optional[pulumi.Input[pulumi.InputType['ZoneSettingQuicArgs']]] = None,
                 smart_routing: Optional[pulumi.Input[pulumi.InputType['ZoneSettingSmartRoutingArgs']]] = None,
                 upstream_http2: Optional[pulumi.Input[pulumi.InputType['ZoneSettingUpstreamHttp2Args']]] = None,
                 web_socket: Optional[pulumi.Input[pulumi.InputType['ZoneSettingWebSocketArgs']]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a teo zone_setting

        ## Import

        teo zone_setting can be imported using the zone_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/zoneSetting:ZoneSetting zone_setting zone-297z8rf93cfw#
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCacheArgs']] cache: Cache expiration time configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCacheKeyArgs']] cache_key: Node cache key configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCachePrefreshArgs']] cache_prefresh: Cache pre-refresh configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingClientIpHeaderArgs']] client_ip_header: Origin-pull client IP header configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCompressionArgs']] compression: Smart compression configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingForceRedirectArgs']] force_redirect: Force HTTPS redirect configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingHttpsArgs']] https: HTTPS acceleration configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingIpv6Args']] ipv6: IPv6 access configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingMaxAgeArgs']] max_age: Browser cache configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingOfflineCacheArgs']] offline_cache: Offline cache configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingOriginArgs']] origin: Origin server configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingPostMaxSizeArgs']] post_max_size: Maximum size of files transferred over POST request.
        :param pulumi.Input[pulumi.InputType['ZoneSettingQuicArgs']] quic: QUIC access configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingSmartRoutingArgs']] smart_routing: Smart acceleration configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingUpstreamHttp2Args']] upstream_http2: HTTP2 origin-pull configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingWebSocketArgs']] web_socket: WebSocket configuration.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZoneSettingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a teo zone_setting

        ## Import

        teo zone_setting can be imported using the zone_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/zoneSetting:ZoneSetting zone_setting zone-297z8rf93cfw#
        ```

        :param str resource_name: The name of the resource.
        :param ZoneSettingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZoneSettingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCacheArgs']]] = None,
                 cache_key: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCacheKeyArgs']]] = None,
                 cache_prefresh: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCachePrefreshArgs']]] = None,
                 client_ip_header: Optional[pulumi.Input[pulumi.InputType['ZoneSettingClientIpHeaderArgs']]] = None,
                 compression: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCompressionArgs']]] = None,
                 force_redirect: Optional[pulumi.Input[pulumi.InputType['ZoneSettingForceRedirectArgs']]] = None,
                 https: Optional[pulumi.Input[pulumi.InputType['ZoneSettingHttpsArgs']]] = None,
                 ipv6: Optional[pulumi.Input[pulumi.InputType['ZoneSettingIpv6Args']]] = None,
                 max_age: Optional[pulumi.Input[pulumi.InputType['ZoneSettingMaxAgeArgs']]] = None,
                 offline_cache: Optional[pulumi.Input[pulumi.InputType['ZoneSettingOfflineCacheArgs']]] = None,
                 origin: Optional[pulumi.Input[pulumi.InputType['ZoneSettingOriginArgs']]] = None,
                 post_max_size: Optional[pulumi.Input[pulumi.InputType['ZoneSettingPostMaxSizeArgs']]] = None,
                 quic: Optional[pulumi.Input[pulumi.InputType['ZoneSettingQuicArgs']]] = None,
                 smart_routing: Optional[pulumi.Input[pulumi.InputType['ZoneSettingSmartRoutingArgs']]] = None,
                 upstream_http2: Optional[pulumi.Input[pulumi.InputType['ZoneSettingUpstreamHttp2Args']]] = None,
                 web_socket: Optional[pulumi.Input[pulumi.InputType['ZoneSettingWebSocketArgs']]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZoneSettingArgs.__new__(ZoneSettingArgs)

            __props__.__dict__["cache"] = cache
            __props__.__dict__["cache_key"] = cache_key
            __props__.__dict__["cache_prefresh"] = cache_prefresh
            __props__.__dict__["client_ip_header"] = client_ip_header
            __props__.__dict__["compression"] = compression
            __props__.__dict__["force_redirect"] = force_redirect
            __props__.__dict__["https"] = https
            __props__.__dict__["ipv6"] = ipv6
            __props__.__dict__["max_age"] = max_age
            __props__.__dict__["offline_cache"] = offline_cache
            __props__.__dict__["origin"] = origin
            __props__.__dict__["post_max_size"] = post_max_size
            __props__.__dict__["quic"] = quic
            __props__.__dict__["smart_routing"] = smart_routing
            __props__.__dict__["upstream_http2"] = upstream_http2
            __props__.__dict__["web_socket"] = web_socket
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["area"] = None
        super(ZoneSetting, __self__).__init__(
            'tencentcloud:Teo/zoneSetting:ZoneSetting',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            cache: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCacheArgs']]] = None,
            cache_key: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCacheKeyArgs']]] = None,
            cache_prefresh: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCachePrefreshArgs']]] = None,
            client_ip_header: Optional[pulumi.Input[pulumi.InputType['ZoneSettingClientIpHeaderArgs']]] = None,
            compression: Optional[pulumi.Input[pulumi.InputType['ZoneSettingCompressionArgs']]] = None,
            force_redirect: Optional[pulumi.Input[pulumi.InputType['ZoneSettingForceRedirectArgs']]] = None,
            https: Optional[pulumi.Input[pulumi.InputType['ZoneSettingHttpsArgs']]] = None,
            ipv6: Optional[pulumi.Input[pulumi.InputType['ZoneSettingIpv6Args']]] = None,
            max_age: Optional[pulumi.Input[pulumi.InputType['ZoneSettingMaxAgeArgs']]] = None,
            offline_cache: Optional[pulumi.Input[pulumi.InputType['ZoneSettingOfflineCacheArgs']]] = None,
            origin: Optional[pulumi.Input[pulumi.InputType['ZoneSettingOriginArgs']]] = None,
            post_max_size: Optional[pulumi.Input[pulumi.InputType['ZoneSettingPostMaxSizeArgs']]] = None,
            quic: Optional[pulumi.Input[pulumi.InputType['ZoneSettingQuicArgs']]] = None,
            smart_routing: Optional[pulumi.Input[pulumi.InputType['ZoneSettingSmartRoutingArgs']]] = None,
            upstream_http2: Optional[pulumi.Input[pulumi.InputType['ZoneSettingUpstreamHttp2Args']]] = None,
            web_socket: Optional[pulumi.Input[pulumi.InputType['ZoneSettingWebSocketArgs']]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'ZoneSetting':
        """
        Get an existing ZoneSetting resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Acceleration area of the zone. Valid values: `mainland`, `overseas`.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCacheArgs']] cache: Cache expiration time configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCacheKeyArgs']] cache_key: Node cache key configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCachePrefreshArgs']] cache_prefresh: Cache pre-refresh configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingClientIpHeaderArgs']] client_ip_header: Origin-pull client IP header configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingCompressionArgs']] compression: Smart compression configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingForceRedirectArgs']] force_redirect: Force HTTPS redirect configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingHttpsArgs']] https: HTTPS acceleration configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingIpv6Args']] ipv6: IPv6 access configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingMaxAgeArgs']] max_age: Browser cache configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingOfflineCacheArgs']] offline_cache: Offline cache configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingOriginArgs']] origin: Origin server configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingPostMaxSizeArgs']] post_max_size: Maximum size of files transferred over POST request.
        :param pulumi.Input[pulumi.InputType['ZoneSettingQuicArgs']] quic: QUIC access configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingSmartRoutingArgs']] smart_routing: Smart acceleration configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingUpstreamHttp2Args']] upstream_http2: HTTP2 origin-pull configuration.
        :param pulumi.Input[pulumi.InputType['ZoneSettingWebSocketArgs']] web_socket: WebSocket configuration.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZoneSettingState.__new__(_ZoneSettingState)

        __props__.__dict__["area"] = area
        __props__.__dict__["cache"] = cache
        __props__.__dict__["cache_key"] = cache_key
        __props__.__dict__["cache_prefresh"] = cache_prefresh
        __props__.__dict__["client_ip_header"] = client_ip_header
        __props__.__dict__["compression"] = compression
        __props__.__dict__["force_redirect"] = force_redirect
        __props__.__dict__["https"] = https
        __props__.__dict__["ipv6"] = ipv6
        __props__.__dict__["max_age"] = max_age
        __props__.__dict__["offline_cache"] = offline_cache
        __props__.__dict__["origin"] = origin
        __props__.__dict__["post_max_size"] = post_max_size
        __props__.__dict__["quic"] = quic
        __props__.__dict__["smart_routing"] = smart_routing
        __props__.__dict__["upstream_http2"] = upstream_http2
        __props__.__dict__["web_socket"] = web_socket
        __props__.__dict__["zone_id"] = zone_id
        return ZoneSetting(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[str]:
        """
        Acceleration area of the zone. Valid values: `mainland`, `overseas`.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def cache(self) -> pulumi.Output['outputs.ZoneSettingCache']:
        """
        Cache expiration time configuration.
        """
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter(name="cacheKey")
    def cache_key(self) -> pulumi.Output['outputs.ZoneSettingCacheKey']:
        """
        Node cache key configuration.
        """
        return pulumi.get(self, "cache_key")

    @property
    @pulumi.getter(name="cachePrefresh")
    def cache_prefresh(self) -> pulumi.Output['outputs.ZoneSettingCachePrefresh']:
        """
        Cache pre-refresh configuration.
        """
        return pulumi.get(self, "cache_prefresh")

    @property
    @pulumi.getter(name="clientIpHeader")
    def client_ip_header(self) -> pulumi.Output['outputs.ZoneSettingClientIpHeader']:
        """
        Origin-pull client IP header configuration.
        """
        return pulumi.get(self, "client_ip_header")

    @property
    @pulumi.getter
    def compression(self) -> pulumi.Output['outputs.ZoneSettingCompression']:
        """
        Smart compression configuration.
        """
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter(name="forceRedirect")
    def force_redirect(self) -> pulumi.Output['outputs.ZoneSettingForceRedirect']:
        """
        Force HTTPS redirect configuration.
        """
        return pulumi.get(self, "force_redirect")

    @property
    @pulumi.getter
    def https(self) -> pulumi.Output['outputs.ZoneSettingHttps']:
        """
        HTTPS acceleration configuration.
        """
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def ipv6(self) -> pulumi.Output['outputs.ZoneSettingIpv6']:
        """
        IPv6 access configuration.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> pulumi.Output['outputs.ZoneSettingMaxAge']:
        """
        Browser cache configuration.
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="offlineCache")
    def offline_cache(self) -> pulumi.Output['outputs.ZoneSettingOfflineCache']:
        """
        Offline cache configuration.
        """
        return pulumi.get(self, "offline_cache")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output['outputs.ZoneSettingOrigin']:
        """
        Origin server configuration.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="postMaxSize")
    def post_max_size(self) -> pulumi.Output['outputs.ZoneSettingPostMaxSize']:
        """
        Maximum size of files transferred over POST request.
        """
        return pulumi.get(self, "post_max_size")

    @property
    @pulumi.getter
    def quic(self) -> pulumi.Output['outputs.ZoneSettingQuic']:
        """
        QUIC access configuration.
        """
        return pulumi.get(self, "quic")

    @property
    @pulumi.getter(name="smartRouting")
    def smart_routing(self) -> pulumi.Output['outputs.ZoneSettingSmartRouting']:
        """
        Smart acceleration configuration.
        """
        return pulumi.get(self, "smart_routing")

    @property
    @pulumi.getter(name="upstreamHttp2")
    def upstream_http2(self) -> pulumi.Output['outputs.ZoneSettingUpstreamHttp2']:
        """
        HTTP2 origin-pull configuration.
        """
        return pulumi.get(self, "upstream_http2")

    @property
    @pulumi.getter(name="webSocket")
    def web_socket(self) -> pulumi.Output['outputs.ZoneSettingWebSocket']:
        """
        WebSocket configuration.
        """
        return pulumi.get(self, "web_socket")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

