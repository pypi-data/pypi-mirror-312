# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ApplicationProxyRuleArgs', 'ApplicationProxyRule']

@pulumi.input_type
class ApplicationProxyRuleArgs:
    def __init__(__self__, *,
                 origin_port: pulumi.Input[str],
                 origin_type: pulumi.Input[str],
                 origin_values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 ports: pulumi.Input[Sequence[pulumi.Input[str]]],
                 proto: pulumi.Input[str],
                 proxy_id: pulumi.Input[str],
                 zone_id: pulumi.Input[str],
                 forward_client_ip: Optional[pulumi.Input[str]] = None,
                 session_persist: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApplicationProxyRule resource.
        :param pulumi.Input[str] origin_port: Origin port, supported formats: single port: 80; Port segment: 81-90, 81 to 90 ports.
        :param pulumi.Input[str] origin_type: Origin server type. Valid values: `custom`: Specified origins; `origins`: An origin group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origin_values: Origin site information: When `OriginType` is `custom`, it indicates one or more origin sites, such as `['8.8.8.8', '9.9.9.9']` or `OriginValue=['test.com']`; When `OriginType` is `origins`, there is required to be one and only one element, representing the origin site group ID, such as `['origin-537f5b41-162a-11ed-abaa-525400c5da15']`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ports: Valid values: `80` means port 80; `81-90` means port range 81-90.
        :param pulumi.Input[str] proto: Protocol. Valid values: `TCP`, `UDP`.
        :param pulumi.Input[str] proxy_id: Proxy ID.
        :param pulumi.Input[str] zone_id: Site ID.
        :param pulumi.Input[str] forward_client_ip: Passes the client IP. Default value is `OFF`. When Proto is TCP, valid values: `TOA`: Pass the client IP via TOA; `PPV1`: Pass the client IP via Proxy Protocol V1; `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP. When Proto=UDP, valid values: `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP.
        :param pulumi.Input[bool] session_persist: Specifies whether to enable session persistence. Default value is false.
        :param pulumi.Input[str] status: Status, the values are: `online`: enabled; `offline`: deactivated; `progress`: being deployed; `stopping`: being deactivated; `fail`: deployment failure/deactivation failure.
        """
        pulumi.set(__self__, "origin_port", origin_port)
        pulumi.set(__self__, "origin_type", origin_type)
        pulumi.set(__self__, "origin_values", origin_values)
        pulumi.set(__self__, "ports", ports)
        pulumi.set(__self__, "proto", proto)
        pulumi.set(__self__, "proxy_id", proxy_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if forward_client_ip is not None:
            pulumi.set(__self__, "forward_client_ip", forward_client_ip)
        if session_persist is not None:
            pulumi.set(__self__, "session_persist", session_persist)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="originPort")
    def origin_port(self) -> pulumi.Input[str]:
        """
        Origin port, supported formats: single port: 80; Port segment: 81-90, 81 to 90 ports.
        """
        return pulumi.get(self, "origin_port")

    @origin_port.setter
    def origin_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_port", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> pulumi.Input[str]:
        """
        Origin server type. Valid values: `custom`: Specified origins; `origins`: An origin group.
        """
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter(name="originValues")
    def origin_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Origin site information: When `OriginType` is `custom`, it indicates one or more origin sites, such as `['8.8.8.8', '9.9.9.9']` or `OriginValue=['test.com']`; When `OriginType` is `origins`, there is required to be one and only one element, representing the origin site group ID, such as `['origin-537f5b41-162a-11ed-abaa-525400c5da15']`.
        """
        return pulumi.get(self, "origin_values")

    @origin_values.setter
    def origin_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "origin_values", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Valid values: `80` means port 80; `81-90` means port range 81-90.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Input[str]:
        """
        Protocol. Valid values: `TCP`, `UDP`.
        """
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: pulumi.Input[str]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> pulumi.Input[str]:
        """
        Proxy ID.
        """
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="forwardClientIp")
    def forward_client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Passes the client IP. Default value is `OFF`. When Proto is TCP, valid values: `TOA`: Pass the client IP via TOA; `PPV1`: Pass the client IP via Proxy Protocol V1; `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP. When Proto=UDP, valid values: `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP.
        """
        return pulumi.get(self, "forward_client_ip")

    @forward_client_ip.setter
    def forward_client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_client_ip", value)

    @property
    @pulumi.getter(name="sessionPersist")
    def session_persist(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable session persistence. Default value is false.
        """
        return pulumi.get(self, "session_persist")

    @session_persist.setter
    def session_persist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_persist", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status, the values are: `online`: enabled; `offline`: deactivated; `progress`: being deployed; `stopping`: being deactivated; `fail`: deployment failure/deactivation failure.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _ApplicationProxyRuleState:
    def __init__(__self__, *,
                 forward_client_ip: Optional[pulumi.Input[str]] = None,
                 origin_port: Optional[pulumi.Input[str]] = None,
                 origin_type: Optional[pulumi.Input[str]] = None,
                 origin_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 session_persist: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApplicationProxyRule resources.
        :param pulumi.Input[str] forward_client_ip: Passes the client IP. Default value is `OFF`. When Proto is TCP, valid values: `TOA`: Pass the client IP via TOA; `PPV1`: Pass the client IP via Proxy Protocol V1; `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP. When Proto=UDP, valid values: `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP.
        :param pulumi.Input[str] origin_port: Origin port, supported formats: single port: 80; Port segment: 81-90, 81 to 90 ports.
        :param pulumi.Input[str] origin_type: Origin server type. Valid values: `custom`: Specified origins; `origins`: An origin group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origin_values: Origin site information: When `OriginType` is `custom`, it indicates one or more origin sites, such as `['8.8.8.8', '9.9.9.9']` or `OriginValue=['test.com']`; When `OriginType` is `origins`, there is required to be one and only one element, representing the origin site group ID, such as `['origin-537f5b41-162a-11ed-abaa-525400c5da15']`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ports: Valid values: `80` means port 80; `81-90` means port range 81-90.
        :param pulumi.Input[str] proto: Protocol. Valid values: `TCP`, `UDP`.
        :param pulumi.Input[str] proxy_id: Proxy ID.
        :param pulumi.Input[str] rule_id: Rule ID.
        :param pulumi.Input[bool] session_persist: Specifies whether to enable session persistence. Default value is false.
        :param pulumi.Input[str] status: Status, the values are: `online`: enabled; `offline`: deactivated; `progress`: being deployed; `stopping`: being deactivated; `fail`: deployment failure/deactivation failure.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        if forward_client_ip is not None:
            pulumi.set(__self__, "forward_client_ip", forward_client_ip)
        if origin_port is not None:
            pulumi.set(__self__, "origin_port", origin_port)
        if origin_type is not None:
            pulumi.set(__self__, "origin_type", origin_type)
        if origin_values is not None:
            pulumi.set(__self__, "origin_values", origin_values)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if proto is not None:
            pulumi.set(__self__, "proto", proto)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if session_persist is not None:
            pulumi.set(__self__, "session_persist", session_persist)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="forwardClientIp")
    def forward_client_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Passes the client IP. Default value is `OFF`. When Proto is TCP, valid values: `TOA`: Pass the client IP via TOA; `PPV1`: Pass the client IP via Proxy Protocol V1; `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP. When Proto=UDP, valid values: `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP.
        """
        return pulumi.get(self, "forward_client_ip")

    @forward_client_ip.setter
    def forward_client_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_client_ip", value)

    @property
    @pulumi.getter(name="originPort")
    def origin_port(self) -> Optional[pulumi.Input[str]]:
        """
        Origin port, supported formats: single port: 80; Port segment: 81-90, 81 to 90 ports.
        """
        return pulumi.get(self, "origin_port")

    @origin_port.setter
    def origin_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_port", value)

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> Optional[pulumi.Input[str]]:
        """
        Origin server type. Valid values: `custom`: Specified origins; `origins`: An origin group.
        """
        return pulumi.get(self, "origin_type")

    @origin_type.setter
    def origin_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_type", value)

    @property
    @pulumi.getter(name="originValues")
    def origin_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Origin site information: When `OriginType` is `custom`, it indicates one or more origin sites, such as `['8.8.8.8', '9.9.9.9']` or `OriginValue=['test.com']`; When `OriginType` is `origins`, there is required to be one and only one element, representing the origin site group ID, such as `['origin-537f5b41-162a-11ed-abaa-525400c5da15']`.
        """
        return pulumi.get(self, "origin_values")

    @origin_values.setter
    def origin_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "origin_values", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Valid values: `80` means port 80; `81-90` means port range 81-90.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def proto(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol. Valid values: `TCP`, `UDP`.
        """
        return pulumi.get(self, "proto")

    @proto.setter
    def proto(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proto", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy ID.
        """
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="sessionPersist")
    def session_persist(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable session persistence. Default value is false.
        """
        return pulumi.get(self, "session_persist")

    @session_persist.setter
    def session_persist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_persist", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status, the values are: `online`: enabled; `offline`: deactivated; `progress`: being deployed; `stopping`: being deactivated; `fail`: deployment failure/deactivation failure.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone_id", value)


class ApplicationProxyRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 forward_client_ip: Optional[pulumi.Input[str]] = None,
                 origin_port: Optional[pulumi.Input[str]] = None,
                 origin_type: Optional[pulumi.Input[str]] = None,
                 origin_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 session_persist: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a teo application_proxy_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application_proxy_rule = tencentcloud.teo.ApplicationProxyRule("applicationProxyRule",
            forward_client_ip="TOA",
            origin_port="8083",
            origin_type="custom",
            origin_values=["127.0.0.1"],
            ports=["8083"],
            proto="TCP",
            proxy_id="proxy-6972528a-373a-11ed-afca-52540044a456",
            session_persist=False,
            status="online",
            zone_id="zone-2983wizgxqvm")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        teo application_proxy_rule can be imported using the zoneId#proxyId#ruleId, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/applicationProxyRule:ApplicationProxyRule application_proxy_rule zone-2983wizgxqvm#proxy-6972528a-373a-11ed-afca-52540044a456#rule-90b13bb4-373a-11ed-8794-525400eddfed
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] forward_client_ip: Passes the client IP. Default value is `OFF`. When Proto is TCP, valid values: `TOA`: Pass the client IP via TOA; `PPV1`: Pass the client IP via Proxy Protocol V1; `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP. When Proto=UDP, valid values: `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP.
        :param pulumi.Input[str] origin_port: Origin port, supported formats: single port: 80; Port segment: 81-90, 81 to 90 ports.
        :param pulumi.Input[str] origin_type: Origin server type. Valid values: `custom`: Specified origins; `origins`: An origin group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origin_values: Origin site information: When `OriginType` is `custom`, it indicates one or more origin sites, such as `['8.8.8.8', '9.9.9.9']` or `OriginValue=['test.com']`; When `OriginType` is `origins`, there is required to be one and only one element, representing the origin site group ID, such as `['origin-537f5b41-162a-11ed-abaa-525400c5da15']`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ports: Valid values: `80` means port 80; `81-90` means port range 81-90.
        :param pulumi.Input[str] proto: Protocol. Valid values: `TCP`, `UDP`.
        :param pulumi.Input[str] proxy_id: Proxy ID.
        :param pulumi.Input[bool] session_persist: Specifies whether to enable session persistence. Default value is false.
        :param pulumi.Input[str] status: Status, the values are: `online`: enabled; `offline`: deactivated; `progress`: being deployed; `stopping`: being deactivated; `fail`: deployment failure/deactivation failure.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationProxyRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a teo application_proxy_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application_proxy_rule = tencentcloud.teo.ApplicationProxyRule("applicationProxyRule",
            forward_client_ip="TOA",
            origin_port="8083",
            origin_type="custom",
            origin_values=["127.0.0.1"],
            ports=["8083"],
            proto="TCP",
            proxy_id="proxy-6972528a-373a-11ed-afca-52540044a456",
            session_persist=False,
            status="online",
            zone_id="zone-2983wizgxqvm")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        teo application_proxy_rule can be imported using the zoneId#proxyId#ruleId, e.g.

        ```sh
        $ pulumi import tencentcloud:Teo/applicationProxyRule:ApplicationProxyRule application_proxy_rule zone-2983wizgxqvm#proxy-6972528a-373a-11ed-afca-52540044a456#rule-90b13bb4-373a-11ed-8794-525400eddfed
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationProxyRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationProxyRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 forward_client_ip: Optional[pulumi.Input[str]] = None,
                 origin_port: Optional[pulumi.Input[str]] = None,
                 origin_type: Optional[pulumi.Input[str]] = None,
                 origin_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 proto: Optional[pulumi.Input[str]] = None,
                 proxy_id: Optional[pulumi.Input[str]] = None,
                 session_persist: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationProxyRuleArgs.__new__(ApplicationProxyRuleArgs)

            __props__.__dict__["forward_client_ip"] = forward_client_ip
            if origin_port is None and not opts.urn:
                raise TypeError("Missing required property 'origin_port'")
            __props__.__dict__["origin_port"] = origin_port
            if origin_type is None and not opts.urn:
                raise TypeError("Missing required property 'origin_type'")
            __props__.__dict__["origin_type"] = origin_type
            if origin_values is None and not opts.urn:
                raise TypeError("Missing required property 'origin_values'")
            __props__.__dict__["origin_values"] = origin_values
            if ports is None and not opts.urn:
                raise TypeError("Missing required property 'ports'")
            __props__.__dict__["ports"] = ports
            if proto is None and not opts.urn:
                raise TypeError("Missing required property 'proto'")
            __props__.__dict__["proto"] = proto
            if proxy_id is None and not opts.urn:
                raise TypeError("Missing required property 'proxy_id'")
            __props__.__dict__["proxy_id"] = proxy_id
            __props__.__dict__["session_persist"] = session_persist
            __props__.__dict__["status"] = status
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["rule_id"] = None
        super(ApplicationProxyRule, __self__).__init__(
            'tencentcloud:Teo/applicationProxyRule:ApplicationProxyRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            forward_client_ip: Optional[pulumi.Input[str]] = None,
            origin_port: Optional[pulumi.Input[str]] = None,
            origin_type: Optional[pulumi.Input[str]] = None,
            origin_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            proto: Optional[pulumi.Input[str]] = None,
            proxy_id: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            session_persist: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[str]] = None) -> 'ApplicationProxyRule':
        """
        Get an existing ApplicationProxyRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] forward_client_ip: Passes the client IP. Default value is `OFF`. When Proto is TCP, valid values: `TOA`: Pass the client IP via TOA; `PPV1`: Pass the client IP via Proxy Protocol V1; `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP. When Proto=UDP, valid values: `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP.
        :param pulumi.Input[str] origin_port: Origin port, supported formats: single port: 80; Port segment: 81-90, 81 to 90 ports.
        :param pulumi.Input[str] origin_type: Origin server type. Valid values: `custom`: Specified origins; `origins`: An origin group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origin_values: Origin site information: When `OriginType` is `custom`, it indicates one or more origin sites, such as `['8.8.8.8', '9.9.9.9']` or `OriginValue=['test.com']`; When `OriginType` is `origins`, there is required to be one and only one element, representing the origin site group ID, such as `['origin-537f5b41-162a-11ed-abaa-525400c5da15']`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ports: Valid values: `80` means port 80; `81-90` means port range 81-90.
        :param pulumi.Input[str] proto: Protocol. Valid values: `TCP`, `UDP`.
        :param pulumi.Input[str] proxy_id: Proxy ID.
        :param pulumi.Input[str] rule_id: Rule ID.
        :param pulumi.Input[bool] session_persist: Specifies whether to enable session persistence. Default value is false.
        :param pulumi.Input[str] status: Status, the values are: `online`: enabled; `offline`: deactivated; `progress`: being deployed; `stopping`: being deactivated; `fail`: deployment failure/deactivation failure.
        :param pulumi.Input[str] zone_id: Site ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationProxyRuleState.__new__(_ApplicationProxyRuleState)

        __props__.__dict__["forward_client_ip"] = forward_client_ip
        __props__.__dict__["origin_port"] = origin_port
        __props__.__dict__["origin_type"] = origin_type
        __props__.__dict__["origin_values"] = origin_values
        __props__.__dict__["ports"] = ports
        __props__.__dict__["proto"] = proto
        __props__.__dict__["proxy_id"] = proxy_id
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["session_persist"] = session_persist
        __props__.__dict__["status"] = status
        __props__.__dict__["zone_id"] = zone_id
        return ApplicationProxyRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forwardClientIp")
    def forward_client_ip(self) -> pulumi.Output[str]:
        """
        Passes the client IP. Default value is `OFF`. When Proto is TCP, valid values: `TOA`: Pass the client IP via TOA; `PPV1`: Pass the client IP via Proxy Protocol V1; `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP. When Proto=UDP, valid values: `PPV2`: Pass the client IP via Proxy Protocol V2; `OFF`: Do not pass the client IP.
        """
        return pulumi.get(self, "forward_client_ip")

    @property
    @pulumi.getter(name="originPort")
    def origin_port(self) -> pulumi.Output[str]:
        """
        Origin port, supported formats: single port: 80; Port segment: 81-90, 81 to 90 ports.
        """
        return pulumi.get(self, "origin_port")

    @property
    @pulumi.getter(name="originType")
    def origin_type(self) -> pulumi.Output[str]:
        """
        Origin server type. Valid values: `custom`: Specified origins; `origins`: An origin group.
        """
        return pulumi.get(self, "origin_type")

    @property
    @pulumi.getter(name="originValues")
    def origin_values(self) -> pulumi.Output[Sequence[str]]:
        """
        Origin site information: When `OriginType` is `custom`, it indicates one or more origin sites, such as `['8.8.8.8', '9.9.9.9']` or `OriginValue=['test.com']`; When `OriginType` is `origins`, there is required to be one and only one element, representing the origin site group ID, such as `['origin-537f5b41-162a-11ed-abaa-525400c5da15']`.
        """
        return pulumi.get(self, "origin_values")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Sequence[str]]:
        """
        Valid values: `80` means port 80; `81-90` means port range 81-90.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def proto(self) -> pulumi.Output[str]:
        """
        Protocol. Valid values: `TCP`, `UDP`.
        """
        return pulumi.get(self, "proto")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> pulumi.Output[str]:
        """
        Proxy ID.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="sessionPersist")
    def session_persist(self) -> pulumi.Output[bool]:
        """
        Specifies whether to enable session persistence. Default value is false.
        """
        return pulumi.get(self, "session_persist")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status, the values are: `online`: enabled; `offline`: deactivated; `progress`: being deployed; `stopping`: being deactivated; `fail`: deployment failure/deactivation failure.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[str]:
        """
        Site ID.
        """
        return pulumi.get(self, "zone_id")

