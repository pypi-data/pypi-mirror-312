# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccessLogConfigArgs', 'AccessLogConfig']

@pulumi.input_type
class AccessLogConfigArgs:
    def __init__(__self__, *,
                 mesh_name: pulumi.Input[str],
                 address: Optional[pulumi.Input[str]] = None,
                 cls: Optional[pulumi.Input['AccessLogConfigClsArgs']] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 enable_server: Optional[pulumi.Input[bool]] = None,
                 enable_stdout: Optional[pulumi.Input[bool]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 selected_range: Optional[pulumi.Input['AccessLogConfigSelectedRangeArgs']] = None,
                 template: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AccessLogConfig resource.
        :param pulumi.Input[str] mesh_name: Mesh ID.
        :param pulumi.Input[str] address: Third party grpc server address.
        :param pulumi.Input['AccessLogConfigClsArgs'] cls: CLS config.
        :param pulumi.Input[bool] enable: Whether enable log.
        :param pulumi.Input[bool] enable_server: Whether enable third party grpc server.
        :param pulumi.Input[bool] enable_stdout: Whether enable stdout.
        :param pulumi.Input[str] encoding: Log encoding, TEXT or JSON.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input['AccessLogConfigSelectedRangeArgs'] selected_range: Selected range.
        :param pulumi.Input[str] template: Log template, istio/trace/custome.
        """
        pulumi.set(__self__, "mesh_name", mesh_name)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if cls is not None:
            pulumi.set(__self__, "cls", cls)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enable_server is not None:
            pulumi.set(__self__, "enable_server", enable_server)
        if enable_stdout is not None:
            pulumi.set(__self__, "enable_stdout", enable_stdout)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if selected_range is not None:
            pulumi.set(__self__, "selected_range", selected_range)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="meshName")
    def mesh_name(self) -> pulumi.Input[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_name")

    @mesh_name.setter
    def mesh_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "mesh_name", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Third party grpc server address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def cls(self) -> Optional[pulumi.Input['AccessLogConfigClsArgs']]:
        """
        CLS config.
        """
        return pulumi.get(self, "cls")

    @cls.setter
    def cls(self, value: Optional[pulumi.Input['AccessLogConfigClsArgs']]):
        pulumi.set(self, "cls", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable log.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="enableServer")
    def enable_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable third party grpc server.
        """
        return pulumi.get(self, "enable_server")

    @enable_server.setter
    def enable_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_server", value)

    @property
    @pulumi.getter(name="enableStdout")
    def enable_stdout(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable stdout.
        """
        return pulumi.get(self, "enable_stdout")

    @enable_stdout.setter
    def enable_stdout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_stdout", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Log encoding, TEXT or JSON.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="selectedRange")
    def selected_range(self) -> Optional[pulumi.Input['AccessLogConfigSelectedRangeArgs']]:
        """
        Selected range.
        """
        return pulumi.get(self, "selected_range")

    @selected_range.setter
    def selected_range(self, value: Optional[pulumi.Input['AccessLogConfigSelectedRangeArgs']]):
        pulumi.set(self, "selected_range", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        Log template, istio/trace/custome.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class _AccessLogConfigState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 cls: Optional[pulumi.Input['AccessLogConfigClsArgs']] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 enable_server: Optional[pulumi.Input[bool]] = None,
                 enable_stdout: Optional[pulumi.Input[bool]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 mesh_name: Optional[pulumi.Input[str]] = None,
                 selected_range: Optional[pulumi.Input['AccessLogConfigSelectedRangeArgs']] = None,
                 template: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AccessLogConfig resources.
        :param pulumi.Input[str] address: Third party grpc server address.
        :param pulumi.Input['AccessLogConfigClsArgs'] cls: CLS config.
        :param pulumi.Input[bool] enable: Whether enable log.
        :param pulumi.Input[bool] enable_server: Whether enable third party grpc server.
        :param pulumi.Input[bool] enable_stdout: Whether enable stdout.
        :param pulumi.Input[str] encoding: Log encoding, TEXT or JSON.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input[str] mesh_name: Mesh ID.
        :param pulumi.Input['AccessLogConfigSelectedRangeArgs'] selected_range: Selected range.
        :param pulumi.Input[str] template: Log template, istio/trace/custome.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if cls is not None:
            pulumi.set(__self__, "cls", cls)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if enable_server is not None:
            pulumi.set(__self__, "enable_server", enable_server)
        if enable_stdout is not None:
            pulumi.set(__self__, "enable_stdout", enable_stdout)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if mesh_name is not None:
            pulumi.set(__self__, "mesh_name", mesh_name)
        if selected_range is not None:
            pulumi.set(__self__, "selected_range", selected_range)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        Third party grpc server address.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def cls(self) -> Optional[pulumi.Input['AccessLogConfigClsArgs']]:
        """
        CLS config.
        """
        return pulumi.get(self, "cls")

    @cls.setter
    def cls(self, value: Optional[pulumi.Input['AccessLogConfigClsArgs']]):
        pulumi.set(self, "cls", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable log.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="enableServer")
    def enable_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable third party grpc server.
        """
        return pulumi.get(self, "enable_server")

    @enable_server.setter
    def enable_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_server", value)

    @property
    @pulumi.getter(name="enableStdout")
    def enable_stdout(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable stdout.
        """
        return pulumi.get(self, "enable_stdout")

    @enable_stdout.setter
    def enable_stdout(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_stdout", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        """
        Log encoding, TEXT or JSON.
        """
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="meshName")
    def mesh_name(self) -> Optional[pulumi.Input[str]]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_name")

    @mesh_name.setter
    def mesh_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_name", value)

    @property
    @pulumi.getter(name="selectedRange")
    def selected_range(self) -> Optional[pulumi.Input['AccessLogConfigSelectedRangeArgs']]:
        """
        Selected range.
        """
        return pulumi.get(self, "selected_range")

    @selected_range.setter
    def selected_range(self, value: Optional[pulumi.Input['AccessLogConfigSelectedRangeArgs']]):
        pulumi.set(self, "selected_range", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        Log template, istio/trace/custome.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)


class AccessLogConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 cls: Optional[pulumi.Input[pulumi.InputType['AccessLogConfigClsArgs']]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 enable_server: Optional[pulumi.Input[bool]] = None,
                 enable_stdout: Optional[pulumi.Input[bool]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 mesh_name: Optional[pulumi.Input[str]] = None,
                 selected_range: Optional[pulumi.Input[pulumi.InputType['AccessLogConfigSelectedRangeArgs']]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcm access_log_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        access_log_config = tencentcloud.tcm.AccessLogConfig("accessLogConfig",
            address="10.0.0.1",
            cls=tencentcloud.tcm.AccessLogConfigClsArgs(
                enable=False,
            ),
            enable=True,
            enable_server=True,
            enable_stdout=True,
            encoding="JSON",
            format=\"\"\"{
        	"authority": "%REQ(:AUTHORITY)%",
        	"bytes_received": "%BYTES_RECEIVED%",
        	"bytes_sent": "%BYTES_SENT%",
        	"downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%",
        	"downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%",
        	"duration": "%DURATION%",
        	"istio_policy_status": "%DYNAMIC_METADATA(istio.mixer:status)%",
        	"method": "%REQ(:METHOD)%",
        	"path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
        	"protocol": "%PROTOCOL%",
        	"request_id": "%REQ(X-REQUEST-ID)%",
        	"requested_server_name": "%REQUESTED_SERVER_NAME%",
        	"response_code": "%RESPONSE_CODE%",
        	"response_flags": "%RESPONSE_FLAGS%",
        	"route_name": "%ROUTE_NAME%",
        	"start_time": "%START_TIME%",
        	"upstream_cluster": "%UPSTREAM_CLUSTER%",
        	"upstream_host": "%UPSTREAM_HOST%",
        	"upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",
        	"upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
        	"upstream_transport_failure_reason": "%UPSTREAM_TRANSPORT_FAILURE_REASON%",
        	"user_agent": "%REQ(USER-AGENT)%",
        	"x_forwarded_for": "%REQ(X-FORWARDED-FOR)%"
        }

        \"\"\",
            mesh_name="mesh-rofjmxxx",
            selected_range=tencentcloud.tcm.AccessLogConfigSelectedRangeArgs(
                all=True,
            ),
            template="istio")
        delete_log_config = tencentcloud.tcm.AccessLogConfig("deleteLogConfig",
            cls=tencentcloud.tcm.AccessLogConfigClsArgs(
                enable=False,
            ),
            enable_server=False,
            enable_stdout=False,
            mesh_name="mesh-rofjmux7")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm access_log_config can be imported using the mesh_id(mesh_name), e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/accessLogConfig:AccessLogConfig access_log_config mesh-rofjmxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: Third party grpc server address.
        :param pulumi.Input[pulumi.InputType['AccessLogConfigClsArgs']] cls: CLS config.
        :param pulumi.Input[bool] enable: Whether enable log.
        :param pulumi.Input[bool] enable_server: Whether enable third party grpc server.
        :param pulumi.Input[bool] enable_stdout: Whether enable stdout.
        :param pulumi.Input[str] encoding: Log encoding, TEXT or JSON.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input[str] mesh_name: Mesh ID.
        :param pulumi.Input[pulumi.InputType['AccessLogConfigSelectedRangeArgs']] selected_range: Selected range.
        :param pulumi.Input[str] template: Log template, istio/trace/custome.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccessLogConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcm access_log_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        access_log_config = tencentcloud.tcm.AccessLogConfig("accessLogConfig",
            address="10.0.0.1",
            cls=tencentcloud.tcm.AccessLogConfigClsArgs(
                enable=False,
            ),
            enable=True,
            enable_server=True,
            enable_stdout=True,
            encoding="JSON",
            format=\"\"\"{
        	"authority": "%REQ(:AUTHORITY)%",
        	"bytes_received": "%BYTES_RECEIVED%",
        	"bytes_sent": "%BYTES_SENT%",
        	"downstream_local_address": "%DOWNSTREAM_LOCAL_ADDRESS%",
        	"downstream_remote_address": "%DOWNSTREAM_REMOTE_ADDRESS%",
        	"duration": "%DURATION%",
        	"istio_policy_status": "%DYNAMIC_METADATA(istio.mixer:status)%",
        	"method": "%REQ(:METHOD)%",
        	"path": "%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%",
        	"protocol": "%PROTOCOL%",
        	"request_id": "%REQ(X-REQUEST-ID)%",
        	"requested_server_name": "%REQUESTED_SERVER_NAME%",
        	"response_code": "%RESPONSE_CODE%",
        	"response_flags": "%RESPONSE_FLAGS%",
        	"route_name": "%ROUTE_NAME%",
        	"start_time": "%START_TIME%",
        	"upstream_cluster": "%UPSTREAM_CLUSTER%",
        	"upstream_host": "%UPSTREAM_HOST%",
        	"upstream_local_address": "%UPSTREAM_LOCAL_ADDRESS%",
        	"upstream_service_time": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%",
        	"upstream_transport_failure_reason": "%UPSTREAM_TRANSPORT_FAILURE_REASON%",
        	"user_agent": "%REQ(USER-AGENT)%",
        	"x_forwarded_for": "%REQ(X-FORWARDED-FOR)%"
        }

        \"\"\",
            mesh_name="mesh-rofjmxxx",
            selected_range=tencentcloud.tcm.AccessLogConfigSelectedRangeArgs(
                all=True,
            ),
            template="istio")
        delete_log_config = tencentcloud.tcm.AccessLogConfig("deleteLogConfig",
            cls=tencentcloud.tcm.AccessLogConfigClsArgs(
                enable=False,
            ),
            enable_server=False,
            enable_stdout=False,
            mesh_name="mesh-rofjmux7")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm access_log_config can be imported using the mesh_id(mesh_name), e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/accessLogConfig:AccessLogConfig access_log_config mesh-rofjmxxx
        ```

        :param str resource_name: The name of the resource.
        :param AccessLogConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessLogConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 cls: Optional[pulumi.Input[pulumi.InputType['AccessLogConfigClsArgs']]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 enable_server: Optional[pulumi.Input[bool]] = None,
                 enable_stdout: Optional[pulumi.Input[bool]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 mesh_name: Optional[pulumi.Input[str]] = None,
                 selected_range: Optional[pulumi.Input[pulumi.InputType['AccessLogConfigSelectedRangeArgs']]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessLogConfigArgs.__new__(AccessLogConfigArgs)

            __props__.__dict__["address"] = address
            __props__.__dict__["cls"] = cls
            __props__.__dict__["enable"] = enable
            __props__.__dict__["enable_server"] = enable_server
            __props__.__dict__["enable_stdout"] = enable_stdout
            __props__.__dict__["encoding"] = encoding
            __props__.__dict__["format"] = format
            if mesh_name is None and not opts.urn:
                raise TypeError("Missing required property 'mesh_name'")
            __props__.__dict__["mesh_name"] = mesh_name
            __props__.__dict__["selected_range"] = selected_range
            __props__.__dict__["template"] = template
        super(AccessLogConfig, __self__).__init__(
            'tencentcloud:Tcm/accessLogConfig:AccessLogConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[str]] = None,
            cls: Optional[pulumi.Input[pulumi.InputType['AccessLogConfigClsArgs']]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            enable_server: Optional[pulumi.Input[bool]] = None,
            enable_stdout: Optional[pulumi.Input[bool]] = None,
            encoding: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            mesh_name: Optional[pulumi.Input[str]] = None,
            selected_range: Optional[pulumi.Input[pulumi.InputType['AccessLogConfigSelectedRangeArgs']]] = None,
            template: Optional[pulumi.Input[str]] = None) -> 'AccessLogConfig':
        """
        Get an existing AccessLogConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: Third party grpc server address.
        :param pulumi.Input[pulumi.InputType['AccessLogConfigClsArgs']] cls: CLS config.
        :param pulumi.Input[bool] enable: Whether enable log.
        :param pulumi.Input[bool] enable_server: Whether enable third party grpc server.
        :param pulumi.Input[bool] enable_stdout: Whether enable stdout.
        :param pulumi.Input[str] encoding: Log encoding, TEXT or JSON.
        :param pulumi.Input[str] format: Log format.
        :param pulumi.Input[str] mesh_name: Mesh ID.
        :param pulumi.Input[pulumi.InputType['AccessLogConfigSelectedRangeArgs']] selected_range: Selected range.
        :param pulumi.Input[str] template: Log template, istio/trace/custome.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccessLogConfigState.__new__(_AccessLogConfigState)

        __props__.__dict__["address"] = address
        __props__.__dict__["cls"] = cls
        __props__.__dict__["enable"] = enable
        __props__.__dict__["enable_server"] = enable_server
        __props__.__dict__["enable_stdout"] = enable_stdout
        __props__.__dict__["encoding"] = encoding
        __props__.__dict__["format"] = format
        __props__.__dict__["mesh_name"] = mesh_name
        __props__.__dict__["selected_range"] = selected_range
        __props__.__dict__["template"] = template
        return AccessLogConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[Optional[str]]:
        """
        Third party grpc server address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def cls(self) -> pulumi.Output[Optional['outputs.AccessLogConfigCls']]:
        """
        CLS config.
        """
        return pulumi.get(self, "cls")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether enable log.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="enableServer")
    def enable_server(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether enable third party grpc server.
        """
        return pulumi.get(self, "enable_server")

    @property
    @pulumi.getter(name="enableStdout")
    def enable_stdout(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether enable stdout.
        """
        return pulumi.get(self, "enable_stdout")

    @property
    @pulumi.getter
    def encoding(self) -> pulumi.Output[Optional[str]]:
        """
        Log encoding, TEXT or JSON.
        """
        return pulumi.get(self, "encoding")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="meshName")
    def mesh_name(self) -> pulumi.Output[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_name")

    @property
    @pulumi.getter(name="selectedRange")
    def selected_range(self) -> pulumi.Output[Optional['outputs.AccessLogConfigSelectedRange']]:
        """
        Selected range.
        """
        return pulumi.get(self, "selected_range")

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output[Optional[str]]:
        """
        Log template, istio/trace/custome.
        """
        return pulumi.get(self, "template")

