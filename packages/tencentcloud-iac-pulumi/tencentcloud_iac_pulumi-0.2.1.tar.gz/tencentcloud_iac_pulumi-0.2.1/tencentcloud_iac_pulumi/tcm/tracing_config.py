# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TracingConfigArgs', 'TracingConfig']

@pulumi.input_type
class TracingConfigArgs:
    def __init__(__self__, *,
                 mesh_id: pulumi.Input[str],
                 apm: Optional[pulumi.Input['TracingConfigApmArgs']] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 sampling: Optional[pulumi.Input[float]] = None,
                 zipkin: Optional[pulumi.Input['TracingConfigZipkinArgs']] = None):
        """
        The set of arguments for constructing a TracingConfig resource.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input['TracingConfigApmArgs'] apm: APM config.
        :param pulumi.Input[bool] enable: Whether enable tracing.
        :param pulumi.Input[float] sampling: Tracing sampling, 0.0-1.0.
        :param pulumi.Input['TracingConfigZipkinArgs'] zipkin: Third party zipkin config.
        """
        pulumi.set(__self__, "mesh_id", mesh_id)
        if apm is not None:
            pulumi.set(__self__, "apm", apm)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if sampling is not None:
            pulumi.set(__self__, "sampling", sampling)
        if zipkin is not None:
            pulumi.set(__self__, "zipkin", zipkin)

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> pulumi.Input[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @mesh_id.setter
    def mesh_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mesh_id", value)

    @property
    @pulumi.getter
    def apm(self) -> Optional[pulumi.Input['TracingConfigApmArgs']]:
        """
        APM config.
        """
        return pulumi.get(self, "apm")

    @apm.setter
    def apm(self, value: Optional[pulumi.Input['TracingConfigApmArgs']]):
        pulumi.set(self, "apm", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable tracing.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter
    def sampling(self) -> Optional[pulumi.Input[float]]:
        """
        Tracing sampling, 0.0-1.0.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def zipkin(self) -> Optional[pulumi.Input['TracingConfigZipkinArgs']]:
        """
        Third party zipkin config.
        """
        return pulumi.get(self, "zipkin")

    @zipkin.setter
    def zipkin(self, value: Optional[pulumi.Input['TracingConfigZipkinArgs']]):
        pulumi.set(self, "zipkin", value)


@pulumi.input_type
class _TracingConfigState:
    def __init__(__self__, *,
                 apm: Optional[pulumi.Input['TracingConfigApmArgs']] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 sampling: Optional[pulumi.Input[float]] = None,
                 zipkin: Optional[pulumi.Input['TracingConfigZipkinArgs']] = None):
        """
        Input properties used for looking up and filtering TracingConfig resources.
        :param pulumi.Input['TracingConfigApmArgs'] apm: APM config.
        :param pulumi.Input[bool] enable: Whether enable tracing.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input[float] sampling: Tracing sampling, 0.0-1.0.
        :param pulumi.Input['TracingConfigZipkinArgs'] zipkin: Third party zipkin config.
        """
        if apm is not None:
            pulumi.set(__self__, "apm", apm)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if mesh_id is not None:
            pulumi.set(__self__, "mesh_id", mesh_id)
        if sampling is not None:
            pulumi.set(__self__, "sampling", sampling)
        if zipkin is not None:
            pulumi.set(__self__, "zipkin", zipkin)

    @property
    @pulumi.getter
    def apm(self) -> Optional[pulumi.Input['TracingConfigApmArgs']]:
        """
        APM config.
        """
        return pulumi.get(self, "apm")

    @apm.setter
    def apm(self, value: Optional[pulumi.Input['TracingConfigApmArgs']]):
        pulumi.set(self, "apm", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether enable tracing.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> Optional[pulumi.Input[str]]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @mesh_id.setter
    def mesh_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_id", value)

    @property
    @pulumi.getter
    def sampling(self) -> Optional[pulumi.Input[float]]:
        """
        Tracing sampling, 0.0-1.0.
        """
        return pulumi.get(self, "sampling")

    @sampling.setter
    def sampling(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sampling", value)

    @property
    @pulumi.getter
    def zipkin(self) -> Optional[pulumi.Input['TracingConfigZipkinArgs']]:
        """
        Third party zipkin config.
        """
        return pulumi.get(self, "zipkin")

    @zipkin.setter
    def zipkin(self, value: Optional[pulumi.Input['TracingConfigZipkinArgs']]):
        pulumi.set(self, "zipkin", value)


class TracingConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apm: Optional[pulumi.Input[pulumi.InputType['TracingConfigApmArgs']]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 sampling: Optional[pulumi.Input[float]] = None,
                 zipkin: Optional[pulumi.Input[pulumi.InputType['TracingConfigZipkinArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcm tracing_config

        > **NOTE:** If you use the config attribute tracing in tencentcloud_tcm_mesh, do not use Tcm.TracingConfig

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tracing_config = tencentcloud.tcm.TracingConfig("tracingConfig",
            apm=tencentcloud.tcm.TracingConfigApmArgs(
                enable=True,
                instance_id="apm-xxx",
                region="ap-guangzhou",
            ),
            enable=True,
            mesh_id="mesh-xxxxxxxx",
            sampling=1,
            zipkin=tencentcloud.tcm.TracingConfigZipkinArgs(
                address="10.10.10.10:9411",
            ))
        delete_config = tencentcloud.tcm.TracingConfig("deleteConfig",
            apm=tencentcloud.tcm.TracingConfigApmArgs(
                enable=False,
            ),
            enable=True,
            mesh_id="mesh-rofjmxxx",
            sampling=0,
            zipkin=tencentcloud.tcm.TracingConfigZipkinArgs(
                address="",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm tracing_config can be imported using the mesh_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/tracingConfig:TracingConfig tracing_config mesh-rofjmxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TracingConfigApmArgs']] apm: APM config.
        :param pulumi.Input[bool] enable: Whether enable tracing.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input[float] sampling: Tracing sampling, 0.0-1.0.
        :param pulumi.Input[pulumi.InputType['TracingConfigZipkinArgs']] zipkin: Third party zipkin config.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TracingConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcm tracing_config

        > **NOTE:** If you use the config attribute tracing in tencentcloud_tcm_mesh, do not use Tcm.TracingConfig

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tracing_config = tencentcloud.tcm.TracingConfig("tracingConfig",
            apm=tencentcloud.tcm.TracingConfigApmArgs(
                enable=True,
                instance_id="apm-xxx",
                region="ap-guangzhou",
            ),
            enable=True,
            mesh_id="mesh-xxxxxxxx",
            sampling=1,
            zipkin=tencentcloud.tcm.TracingConfigZipkinArgs(
                address="10.10.10.10:9411",
            ))
        delete_config = tencentcloud.tcm.TracingConfig("deleteConfig",
            apm=tencentcloud.tcm.TracingConfigApmArgs(
                enable=False,
            ),
            enable=True,
            mesh_id="mesh-rofjmxxx",
            sampling=0,
            zipkin=tencentcloud.tcm.TracingConfigZipkinArgs(
                address="",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm tracing_config can be imported using the mesh_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/tracingConfig:TracingConfig tracing_config mesh-rofjmxxx
        ```

        :param str resource_name: The name of the resource.
        :param TracingConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TracingConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apm: Optional[pulumi.Input[pulumi.InputType['TracingConfigApmArgs']]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 sampling: Optional[pulumi.Input[float]] = None,
                 zipkin: Optional[pulumi.Input[pulumi.InputType['TracingConfigZipkinArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TracingConfigArgs.__new__(TracingConfigArgs)

            __props__.__dict__["apm"] = apm
            __props__.__dict__["enable"] = enable
            if mesh_id is None and not opts.urn:
                raise TypeError("Missing required property 'mesh_id'")
            __props__.__dict__["mesh_id"] = mesh_id
            __props__.__dict__["sampling"] = sampling
            __props__.__dict__["zipkin"] = zipkin
        super(TracingConfig, __self__).__init__(
            'tencentcloud:Tcm/tracingConfig:TracingConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apm: Optional[pulumi.Input[pulumi.InputType['TracingConfigApmArgs']]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            mesh_id: Optional[pulumi.Input[str]] = None,
            sampling: Optional[pulumi.Input[float]] = None,
            zipkin: Optional[pulumi.Input[pulumi.InputType['TracingConfigZipkinArgs']]] = None) -> 'TracingConfig':
        """
        Get an existing TracingConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TracingConfigApmArgs']] apm: APM config.
        :param pulumi.Input[bool] enable: Whether enable tracing.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input[float] sampling: Tracing sampling, 0.0-1.0.
        :param pulumi.Input[pulumi.InputType['TracingConfigZipkinArgs']] zipkin: Third party zipkin config.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TracingConfigState.__new__(_TracingConfigState)

        __props__.__dict__["apm"] = apm
        __props__.__dict__["enable"] = enable
        __props__.__dict__["mesh_id"] = mesh_id
        __props__.__dict__["sampling"] = sampling
        __props__.__dict__["zipkin"] = zipkin
        return TracingConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def apm(self) -> pulumi.Output[Optional['outputs.TracingConfigApm']]:
        """
        APM config.
        """
        return pulumi.get(self, "apm")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether enable tracing.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> pulumi.Output[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @property
    @pulumi.getter
    def sampling(self) -> pulumi.Output[Optional[float]]:
        """
        Tracing sampling, 0.0-1.0.
        """
        return pulumi.get(self, "sampling")

    @property
    @pulumi.getter
    def zipkin(self) -> pulumi.Output[Optional['outputs.TracingConfigZipkin']]:
        """
        Third party zipkin config.
        """
        return pulumi.get(self, "zipkin")

