# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PrometheusAttachmentArgs', 'PrometheusAttachment']

@pulumi.input_type
class PrometheusAttachmentArgs:
    def __init__(__self__, *,
                 mesh_id: pulumi.Input[str],
                 prometheus: pulumi.Input['PrometheusAttachmentPrometheusArgs']):
        """
        The set of arguments for constructing a PrometheusAttachment resource.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input['PrometheusAttachmentPrometheusArgs'] prometheus: Prometheus configuration.
        """
        pulumi.set(__self__, "mesh_id", mesh_id)
        pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> pulumi.Input[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @mesh_id.setter
    def mesh_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mesh_id", value)

    @property
    @pulumi.getter
    def prometheus(self) -> pulumi.Input['PrometheusAttachmentPrometheusArgs']:
        """
        Prometheus configuration.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: pulumi.Input['PrometheusAttachmentPrometheusArgs']):
        pulumi.set(self, "prometheus", value)


@pulumi.input_type
class _PrometheusAttachmentState:
    def __init__(__self__, *,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input['PrometheusAttachmentPrometheusArgs']] = None):
        """
        Input properties used for looking up and filtering PrometheusAttachment resources.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input['PrometheusAttachmentPrometheusArgs'] prometheus: Prometheus configuration.
        """
        if mesh_id is not None:
            pulumi.set(__self__, "mesh_id", mesh_id)
        if prometheus is not None:
            pulumi.set(__self__, "prometheus", prometheus)

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> Optional[pulumi.Input[str]]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @mesh_id.setter
    def mesh_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_id", value)

    @property
    @pulumi.getter
    def prometheus(self) -> Optional[pulumi.Input['PrometheusAttachmentPrometheusArgs']]:
        """
        Prometheus configuration.
        """
        return pulumi.get(self, "prometheus")

    @prometheus.setter
    def prometheus(self, value: Optional[pulumi.Input['PrometheusAttachmentPrometheusArgs']]):
        pulumi.set(self, "prometheus", value)


class PrometheusAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[pulumi.InputType['PrometheusAttachmentPrometheusArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcm prometheus_attachment

        > **NOTE:** Instructions for use: 1. Use Tencent Cloud Prometheus to monitor TMP, please enter `vpc_id`, `subnet_id`, `region` or `instance_id`, it is recommended to use an existing tmp instance; 2. To use the third-party Prometheus service, please enter `custom_prom`; 3. `Tcm.PrometheusAttachment` does not support modification; 4. If you use Tencent Cloud Prometheus to monitor TMP, enter `vpc_id`, `subnet_id`, `region` to create a new Prometheus monitoring instance, destroy will not destroy the Prometheus monitoring instance
        **NOTE:** If you use the config attribute prometheus in tencentcloud_tcm_mesh, do not use Tcm.PrometheusAttachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        prometheus_attachment = tencentcloud.tcm.PrometheusAttachment("prometheusAttachment",
            mesh_id="mesh-rofjmxxx",
            prometheus=tencentcloud.tcm.PrometheusAttachmentPrometheusArgs(
                instance_id="",
                region="ap-guangzhou",
                subnet_id="subnet-driddxxx",
                vpc_id="vpc-pewdpxxx",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm prometheus_attachment can be imported using the mesh_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/prometheusAttachment:PrometheusAttachment prometheus_attachment mesh-rofjmxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input[pulumi.InputType['PrometheusAttachmentPrometheusArgs']] prometheus: Prometheus configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PrometheusAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcm prometheus_attachment

        > **NOTE:** Instructions for use: 1. Use Tencent Cloud Prometheus to monitor TMP, please enter `vpc_id`, `subnet_id`, `region` or `instance_id`, it is recommended to use an existing tmp instance; 2. To use the third-party Prometheus service, please enter `custom_prom`; 3. `Tcm.PrometheusAttachment` does not support modification; 4. If you use Tencent Cloud Prometheus to monitor TMP, enter `vpc_id`, `subnet_id`, `region` to create a new Prometheus monitoring instance, destroy will not destroy the Prometheus monitoring instance
        **NOTE:** If you use the config attribute prometheus in tencentcloud_tcm_mesh, do not use Tcm.PrometheusAttachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        prometheus_attachment = tencentcloud.tcm.PrometheusAttachment("prometheusAttachment",
            mesh_id="mesh-rofjmxxx",
            prometheus=tencentcloud.tcm.PrometheusAttachmentPrometheusArgs(
                instance_id="",
                region="ap-guangzhou",
                subnet_id="subnet-driddxxx",
                vpc_id="vpc-pewdpxxx",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm prometheus_attachment can be imported using the mesh_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/prometheusAttachment:PrometheusAttachment prometheus_attachment mesh-rofjmxxx
        ```

        :param str resource_name: The name of the resource.
        :param PrometheusAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PrometheusAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 prometheus: Optional[pulumi.Input[pulumi.InputType['PrometheusAttachmentPrometheusArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PrometheusAttachmentArgs.__new__(PrometheusAttachmentArgs)

            if mesh_id is None and not opts.urn:
                raise TypeError("Missing required property 'mesh_id'")
            __props__.__dict__["mesh_id"] = mesh_id
            if prometheus is None and not opts.urn:
                raise TypeError("Missing required property 'prometheus'")
            __props__.__dict__["prometheus"] = prometheus
        super(PrometheusAttachment, __self__).__init__(
            'tencentcloud:Tcm/prometheusAttachment:PrometheusAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            mesh_id: Optional[pulumi.Input[str]] = None,
            prometheus: Optional[pulumi.Input[pulumi.InputType['PrometheusAttachmentPrometheusArgs']]] = None) -> 'PrometheusAttachment':
        """
        Get an existing PrometheusAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input[pulumi.InputType['PrometheusAttachmentPrometheusArgs']] prometheus: Prometheus configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PrometheusAttachmentState.__new__(_PrometheusAttachmentState)

        __props__.__dict__["mesh_id"] = mesh_id
        __props__.__dict__["prometheus"] = prometheus
        return PrometheusAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> pulumi.Output[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @property
    @pulumi.getter
    def prometheus(self) -> pulumi.Output['outputs.PrometheusAttachmentPrometheus']:
        """
        Prometheus configuration.
        """
        return pulumi.get(self, "prometheus")

