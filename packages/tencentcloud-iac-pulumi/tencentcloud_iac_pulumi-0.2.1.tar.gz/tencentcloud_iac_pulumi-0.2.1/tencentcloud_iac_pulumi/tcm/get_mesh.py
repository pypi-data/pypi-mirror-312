# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMeshResult',
    'AwaitableGetMeshResult',
    'get_mesh',
    'get_mesh_output',
]

@pulumi.output_type
class GetMeshResult:
    """
    A collection of values returned by getMesh.
    """
    def __init__(__self__, id=None, mesh_clusters=None, mesh_ids=None, mesh_lists=None, mesh_names=None, result_output_file=None, tags=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mesh_clusters and not isinstance(mesh_clusters, list):
            raise TypeError("Expected argument 'mesh_clusters' to be a list")
        pulumi.set(__self__, "mesh_clusters", mesh_clusters)
        if mesh_ids and not isinstance(mesh_ids, list):
            raise TypeError("Expected argument 'mesh_ids' to be a list")
        pulumi.set(__self__, "mesh_ids", mesh_ids)
        if mesh_lists and not isinstance(mesh_lists, list):
            raise TypeError("Expected argument 'mesh_lists' to be a list")
        pulumi.set(__self__, "mesh_lists", mesh_lists)
        if mesh_names and not isinstance(mesh_names, list):
            raise TypeError("Expected argument 'mesh_names' to be a list")
        pulumi.set(__self__, "mesh_names", mesh_names)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="meshClusters")
    def mesh_clusters(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mesh_clusters")

    @property
    @pulumi.getter(name="meshIds")
    def mesh_ids(self) -> Optional[Sequence[str]]:
        """
        Mesh instance Id.
        """
        return pulumi.get(self, "mesh_ids")

    @property
    @pulumi.getter(name="meshLists")
    def mesh_lists(self) -> Sequence['outputs.GetMeshMeshListResult']:
        """
        The mesh information is queriedNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "mesh_lists")

    @property
    @pulumi.getter(name="meshNames")
    def mesh_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "mesh_names")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


class AwaitableGetMeshResult(GetMeshResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMeshResult(
            id=self.id,
            mesh_clusters=self.mesh_clusters,
            mesh_ids=self.mesh_ids,
            mesh_lists=self.mesh_lists,
            mesh_names=self.mesh_names,
            result_output_file=self.result_output_file,
            tags=self.tags)


def get_mesh(mesh_clusters: Optional[Sequence[str]] = None,
             mesh_ids: Optional[Sequence[str]] = None,
             mesh_names: Optional[Sequence[str]] = None,
             result_output_file: Optional[str] = None,
             tags: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMeshResult:
    """
    Use this data source to query detailed information of tcm mesh

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    mesh = tencentcloud.Tcm.get_mesh(mesh_clusters=["cls-xxxx"],
        mesh_ids=["mesh-xxxxxx"],
        mesh_names=["KEEP_MASH"],
        tags=["key"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] mesh_clusters: Mesh name.
    :param Sequence[str] mesh_ids: Mesh instance Id.
    :param Sequence[str] mesh_names: Display name.
    :param str result_output_file: Used to save results.
    :param Sequence[str] tags: tag key.
    """
    __args__ = dict()
    __args__['meshClusters'] = mesh_clusters
    __args__['meshIds'] = mesh_ids
    __args__['meshNames'] = mesh_names
    __args__['resultOutputFile'] = result_output_file
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tcm/getMesh:getMesh', __args__, opts=opts, typ=GetMeshResult).value

    return AwaitableGetMeshResult(
        id=pulumi.get(__ret__, 'id'),
        mesh_clusters=pulumi.get(__ret__, 'mesh_clusters'),
        mesh_ids=pulumi.get(__ret__, 'mesh_ids'),
        mesh_lists=pulumi.get(__ret__, 'mesh_lists'),
        mesh_names=pulumi.get(__ret__, 'mesh_names'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_mesh)
def get_mesh_output(mesh_clusters: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    mesh_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    mesh_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    tags: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMeshResult]:
    """
    Use this data source to query detailed information of tcm mesh

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    mesh = tencentcloud.Tcm.get_mesh(mesh_clusters=["cls-xxxx"],
        mesh_ids=["mesh-xxxxxx"],
        mesh_names=["KEEP_MASH"],
        tags=["key"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] mesh_clusters: Mesh name.
    :param Sequence[str] mesh_ids: Mesh instance Id.
    :param Sequence[str] mesh_names: Display name.
    :param str result_output_file: Used to save results.
    :param Sequence[str] tags: tag key.
    """
    ...
