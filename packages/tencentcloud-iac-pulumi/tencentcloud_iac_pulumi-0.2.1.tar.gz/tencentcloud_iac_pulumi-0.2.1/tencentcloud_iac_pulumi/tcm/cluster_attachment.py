# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterAttachmentArgs', 'ClusterAttachment']

@pulumi.input_type
class ClusterAttachmentArgs:
    def __init__(__self__, *,
                 mesh_id: pulumi.Input[str],
                 cluster_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]]] = None):
        """
        The set of arguments for constructing a ClusterAttachment resource.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]] cluster_lists: Cluster list.
        """
        pulumi.set(__self__, "mesh_id", mesh_id)
        if cluster_lists is not None:
            pulumi.set(__self__, "cluster_lists", cluster_lists)

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> pulumi.Input[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @mesh_id.setter
    def mesh_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mesh_id", value)

    @property
    @pulumi.getter(name="clusterLists")
    def cluster_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]]]:
        """
        Cluster list.
        """
        return pulumi.get(self, "cluster_lists")

    @cluster_lists.setter
    def cluster_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]]]):
        pulumi.set(self, "cluster_lists", value)


@pulumi.input_type
class _ClusterAttachmentState:
    def __init__(__self__, *,
                 cluster_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]]] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClusterAttachment resources.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]] cluster_lists: Cluster list.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        """
        if cluster_lists is not None:
            pulumi.set(__self__, "cluster_lists", cluster_lists)
        if mesh_id is not None:
            pulumi.set(__self__, "mesh_id", mesh_id)

    @property
    @pulumi.getter(name="clusterLists")
    def cluster_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]]]:
        """
        Cluster list.
        """
        return pulumi.get(self, "cluster_lists")

    @cluster_lists.setter
    def cluster_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterAttachmentClusterListArgs']]]]):
        pulumi.set(self, "cluster_lists", value)

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> Optional[pulumi.Input[str]]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

    @mesh_id.setter
    def mesh_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mesh_id", value)


class ClusterAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterAttachmentClusterListArgs']]]]] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcm cluster_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster_attachment = tencentcloud.tcm.ClusterAttachment("clusterAttachment",
            cluster_lists=[tencentcloud.tcm.ClusterAttachmentClusterListArgs(
                cluster_id="cls-rc5uy6dy",
                region="ap-guangzhou",
                role="REMOTE",
                subnet_id="subnet-lkyb3ayc",
                type="TKE",
                vpc_id="vpc-a1jycmbx",
            )],
            mesh_id="mesh-b9q6vf9l")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm cluster_attachment can be imported using the mesh_id#cluster_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/clusterAttachment:ClusterAttachment cluster_attachment mesh-b9q6vf9l#cls-rc5uy6dy
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterAttachmentClusterListArgs']]]] cluster_lists: Cluster list.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcm cluster_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster_attachment = tencentcloud.tcm.ClusterAttachment("clusterAttachment",
            cluster_lists=[tencentcloud.tcm.ClusterAttachmentClusterListArgs(
                cluster_id="cls-rc5uy6dy",
                region="ap-guangzhou",
                role="REMOTE",
                subnet_id="subnet-lkyb3ayc",
                type="TKE",
                vpc_id="vpc-a1jycmbx",
            )],
            mesh_id="mesh-b9q6vf9l")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcm cluster_attachment can be imported using the mesh_id#cluster_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcm/clusterAttachment:ClusterAttachment cluster_attachment mesh-b9q6vf9l#cls-rc5uy6dy
        ```

        :param str resource_name: The name of the resource.
        :param ClusterAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterAttachmentClusterListArgs']]]]] = None,
                 mesh_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterAttachmentArgs.__new__(ClusterAttachmentArgs)

            __props__.__dict__["cluster_lists"] = cluster_lists
            if mesh_id is None and not opts.urn:
                raise TypeError("Missing required property 'mesh_id'")
            __props__.__dict__["mesh_id"] = mesh_id
        super(ClusterAttachment, __self__).__init__(
            'tencentcloud:Tcm/clusterAttachment:ClusterAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterAttachmentClusterListArgs']]]]] = None,
            mesh_id: Optional[pulumi.Input[str]] = None) -> 'ClusterAttachment':
        """
        Get an existing ClusterAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterAttachmentClusterListArgs']]]] cluster_lists: Cluster list.
        :param pulumi.Input[str] mesh_id: Mesh ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterAttachmentState.__new__(_ClusterAttachmentState)

        __props__.__dict__["cluster_lists"] = cluster_lists
        __props__.__dict__["mesh_id"] = mesh_id
        return ClusterAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterLists")
    def cluster_lists(self) -> pulumi.Output[Sequence['outputs.ClusterAttachmentClusterList']]:
        """
        Cluster list.
        """
        return pulumi.get(self, "cluster_lists")

    @property
    @pulumi.getter(name="meshId")
    def mesh_id(self) -> pulumi.Output[str]:
        """
        Mesh ID.
        """
        return pulumi.get(self, "mesh_id")

