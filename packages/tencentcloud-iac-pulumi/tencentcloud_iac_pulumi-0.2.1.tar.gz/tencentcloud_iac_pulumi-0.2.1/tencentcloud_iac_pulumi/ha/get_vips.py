# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetVipsResult',
    'AwaitableGetVipsResult',
    'get_vips',
    'get_vips_output',
]

@pulumi.output_type
class GetVipsResult:
    """
    A collection of values returned by getVips.
    """
    def __init__(__self__, address_ip=None, ha_vip_lists=None, id=None, name=None, result_output_file=None, subnet_id=None, vpc_id=None):
        if address_ip and not isinstance(address_ip, str):
            raise TypeError("Expected argument 'address_ip' to be a str")
        pulumi.set(__self__, "address_ip", address_ip)
        if ha_vip_lists and not isinstance(ha_vip_lists, list):
            raise TypeError("Expected argument 'ha_vip_lists' to be a list")
        pulumi.set(__self__, "ha_vip_lists", ha_vip_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="addressIp")
    def address_ip(self) -> Optional[str]:
        """
        EIP that is associated.
        """
        return pulumi.get(self, "address_ip")

    @property
    @pulumi.getter(name="haVipLists")
    def ha_vip_lists(self) -> Sequence['outputs.GetVipsHaVipListResult']:
        """
        Information list of the dedicated HA VIPs.
        """
        return pulumi.get(self, "ha_vip_lists")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the HA VIP.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the HA VIP.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        VPC id.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetVipsResult(GetVipsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVipsResult(
            address_ip=self.address_ip,
            ha_vip_lists=self.ha_vip_lists,
            id=self.id,
            name=self.name,
            result_output_file=self.result_output_file,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_vips(address_ip: Optional[str] = None,
             id: Optional[str] = None,
             name: Optional[str] = None,
             result_output_file: Optional[str] = None,
             subnet_id: Optional[str] = None,
             vpc_id: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVipsResult:
    """
    Use this data source to query detailed information of HA VIPs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    havips = tencentcloud.Ha.get_vips(address_ip="10.0.4.16",
        id="havip-kjqwe4ba",
        name="test",
        subnet_id="subnet-4d4m4cd4",
        vpc_id="vpc-gzea3dd7")
    ```
    <!--End PulumiCodeChooser -->


    :param str address_ip: EIP of the HA VIP to be queried.
    :param str id: ID of the HA VIP to be queried.
    :param str name: Name of the HA VIP. The length of character is limited to 1-60.
    :param str result_output_file: Used to save results.
    :param str subnet_id: Subnet id of the HA VIP to be queried.
    :param str vpc_id: VPC id of the HA VIP to be queried.
    """
    __args__ = dict()
    __args__['addressIp'] = address_ip
    __args__['id'] = id
    __args__['name'] = name
    __args__['resultOutputFile'] = result_output_file
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ha/getVips:getVips', __args__, opts=opts, typ=GetVipsResult).value

    return AwaitableGetVipsResult(
        address_ip=pulumi.get(__ret__, 'address_ip'),
        ha_vip_lists=pulumi.get(__ret__, 'ha_vip_lists'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_vips)
def get_vips_output(address_ip: Optional[pulumi.Input[Optional[str]]] = None,
                    id: Optional[pulumi.Input[Optional[str]]] = None,
                    name: Optional[pulumi.Input[Optional[str]]] = None,
                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                    vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVipsResult]:
    """
    Use this data source to query detailed information of HA VIPs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    havips = tencentcloud.Ha.get_vips(address_ip="10.0.4.16",
        id="havip-kjqwe4ba",
        name="test",
        subnet_id="subnet-4d4m4cd4",
        vpc_id="vpc-gzea3dd7")
    ```
    <!--End PulumiCodeChooser -->


    :param str address_ip: EIP of the HA VIP to be queried.
    :param str id: ID of the HA VIP to be queried.
    :param str name: Name of the HA VIP. The length of character is limited to 1-60.
    :param str result_output_file: Used to save results.
    :param str subnet_id: Subnet id of the HA VIP to be queried.
    :param str vpc_id: VPC id of the HA VIP to be queried.
    """
    ...
