# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceConfigsResult',
    'AwaitableGetInstanceConfigsResult',
    'get_instance_configs',
    'get_instance_configs_output',
]

@pulumi.output_type
class GetInstanceConfigsResult:
    """
    A collection of values returned by getInstanceConfigs.
    """
    def __init__(__self__, availability_zone=None, config_lists=None, duration=None, id=None, instance_type=None, offering_type=None, product_description=None, result_output_file=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if config_lists and not isinstance(config_lists, list):
            raise TypeError("Expected argument 'config_lists' to be a list")
        pulumi.set(__self__, "config_lists", config_lists)
        if duration and not isinstance(duration, int):
            raise TypeError("Expected argument 'duration' to be a int")
        pulumi.set(__self__, "duration", duration)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if offering_type and not isinstance(offering_type, str):
            raise TypeError("Expected argument 'offering_type' to be a str")
        pulumi.set(__self__, "offering_type", offering_type)
        if product_description and not isinstance(product_description, str):
            raise TypeError("Expected argument 'product_description' to be a str")
        pulumi.set(__self__, "product_description", product_description)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        Availability zone of the purchasable reserved instance.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="configLists")
    def config_lists(self) -> Sequence['outputs.GetInstanceConfigsConfigListResult']:
        """
        An information list of reserved instance configuration. Each element contains the following attributes:
        """
        return pulumi.get(self, "config_lists")

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        """
        Validity period of the reserved instance.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        """
        Instance type of the reserved instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="offeringType")
    def offering_type(self) -> Optional[str]:
        """
        OfferingType of the reserved instance.
        """
        return pulumi.get(self, "offering_type")

    @property
    @pulumi.getter(name="productDescription")
    def product_description(self) -> Optional[str]:
        return pulumi.get(self, "product_description")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetInstanceConfigsResult(GetInstanceConfigsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceConfigsResult(
            availability_zone=self.availability_zone,
            config_lists=self.config_lists,
            duration=self.duration,
            id=self.id,
            instance_type=self.instance_type,
            offering_type=self.offering_type,
            product_description=self.product_description,
            result_output_file=self.result_output_file)


def get_instance_configs(availability_zone: Optional[str] = None,
                         duration: Optional[int] = None,
                         instance_type: Optional[str] = None,
                         offering_type: Optional[str] = None,
                         product_description: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceConfigsResult:
    """
    Use this data source to query reserved instances configuration.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = tencentcloud.Reserved.get_instance_configs(availability_zone="na-siliconvalley-1")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the reserved instance locates at.
    :param int duration: Validity period of the reserved instance. Valid values are `31536000`(1 year) and `94608000`(3 years).
    :param str instance_type: The type of reserved instance.
    :param str offering_type: Filter by Payment Type. Such as All Upfront.
    :param str product_description: Filter by the Platform Description (that is, operating system) for Reserved Instance billing. Shaped like: linux.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['duration'] = duration
    __args__['instanceType'] = instance_type
    __args__['offeringType'] = offering_type
    __args__['productDescription'] = product_description
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Reserved/getInstanceConfigs:getInstanceConfigs', __args__, opts=opts, typ=GetInstanceConfigsResult).value

    return AwaitableGetInstanceConfigsResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        config_lists=pulumi.get(__ret__, 'config_lists'),
        duration=pulumi.get(__ret__, 'duration'),
        id=pulumi.get(__ret__, 'id'),
        instance_type=pulumi.get(__ret__, 'instance_type'),
        offering_type=pulumi.get(__ret__, 'offering_type'),
        product_description=pulumi.get(__ret__, 'product_description'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_instance_configs)
def get_instance_configs_output(availability_zone: Optional[pulumi.Input[Optional[str]]] = None,
                                duration: Optional[pulumi.Input[Optional[int]]] = None,
                                instance_type: Optional[pulumi.Input[Optional[str]]] = None,
                                offering_type: Optional[pulumi.Input[Optional[str]]] = None,
                                product_description: Optional[pulumi.Input[Optional[str]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceConfigsResult]:
    """
    Use this data source to query reserved instances configuration.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = tencentcloud.Reserved.get_instance_configs(availability_zone="na-siliconvalley-1")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the reserved instance locates at.
    :param int duration: Validity period of the reserved instance. Valid values are `31536000`(1 year) and `94608000`(3 years).
    :param str instance_type: The type of reserved instance.
    :param str offering_type: Filter by Payment Type. Such as All Upfront.
    :param str product_description: Filter by the Platform Description (that is, operating system) for Reserved Instance billing. Shaped like: linux.
    :param str result_output_file: Used to save results.
    """
    ...
