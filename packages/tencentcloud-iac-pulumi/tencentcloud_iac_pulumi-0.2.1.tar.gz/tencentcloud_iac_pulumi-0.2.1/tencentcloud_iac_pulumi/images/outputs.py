# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceImageResult',
    'GetInstanceImageSnapshotResult',
]

@pulumi.output_type
class GetInstanceImageResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 created_time: str,
                 image_creator: str,
                 image_description: str,
                 image_id: str,
                 image_name: str,
                 image_size: int,
                 image_source: str,
                 image_state: str,
                 image_type: str,
                 os_name: str,
                 platform: str,
                 snapshots: Sequence['outputs.GetInstanceImageSnapshotResult'],
                 support_cloud_init: bool,
                 sync_percent: int):
        """
        :param str architecture: Architecture of the image.
        :param str created_time: Created time of the image.
        :param str image_creator: Image creator of the image.
        :param str image_description: Description of the image.
        :param str image_id: ID of the image to be queried.
        :param str image_name: Name of the image.
        :param int image_size: Size of the image.
        :param str image_source: Image source of the image.
        :param str image_state: State of the image.
        :param str image_type: A list of the image type to be queried. Valid values: 'PUBLIC_IMAGE', 'PRIVATE_IMAGE', 'SHARED_IMAGE', 'MARKET_IMAGE'.
        :param str os_name: A string to apply with fuzzy match to the os_name attribute on the image list returned by TencentCloud, conflict with 'image_name_regex'.
        :param str platform: Platform of the image.
        :param Sequence['GetInstanceImageSnapshotArgs'] snapshots: List of snapshot details.
        :param bool support_cloud_init: Whether support cloud-init.
        :param int sync_percent: Sync percent of the image.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "image_creator", image_creator)
        pulumi.set(__self__, "image_description", image_description)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_size", image_size)
        pulumi.set(__self__, "image_source", image_source)
        pulumi.set(__self__, "image_state", image_state)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "platform", platform)
        pulumi.set(__self__, "snapshots", snapshots)
        pulumi.set(__self__, "support_cloud_init", support_cloud_init)
        pulumi.set(__self__, "sync_percent", sync_percent)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        """
        Architecture of the image.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        Created time of the image.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="imageCreator")
    def image_creator(self) -> str:
        """
        Image creator of the image.
        """
        return pulumi.get(self, "image_creator")

    @property
    @pulumi.getter(name="imageDescription")
    def image_description(self) -> str:
        """
        Description of the image.
        """
        return pulumi.get(self, "image_description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        ID of the image to be queried.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        Name of the image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageSize")
    def image_size(self) -> int:
        """
        Size of the image.
        """
        return pulumi.get(self, "image_size")

    @property
    @pulumi.getter(name="imageSource")
    def image_source(self) -> str:
        """
        Image source of the image.
        """
        return pulumi.get(self, "image_source")

    @property
    @pulumi.getter(name="imageState")
    def image_state(self) -> str:
        """
        State of the image.
        """
        return pulumi.get(self, "image_state")

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        """
        A list of the image type to be queried. Valid values: 'PUBLIC_IMAGE', 'PRIVATE_IMAGE', 'SHARED_IMAGE', 'MARKET_IMAGE'.
        """
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> str:
        """
        A string to apply with fuzzy match to the os_name attribute on the image list returned by TencentCloud, conflict with 'image_name_regex'.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def platform(self) -> str:
        """
        Platform of the image.
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetInstanceImageSnapshotResult']:
        """
        List of snapshot details.
        """
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter(name="supportCloudInit")
    def support_cloud_init(self) -> bool:
        """
        Whether support cloud-init.
        """
        return pulumi.get(self, "support_cloud_init")

    @property
    @pulumi.getter(name="syncPercent")
    def sync_percent(self) -> int:
        """
        Sync percent of the image.
        """
        return pulumi.get(self, "sync_percent")


@pulumi.output_type
class GetInstanceImageSnapshotResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_usage: str,
                 snapshot_id: str,
                 snapshot_name: str):
        """
        :param int disk_size: Size of the cloud disk used to create the snapshot; unit: GB.
        :param str disk_usage: Type of the cloud disk used to create the snapshot.
        :param str snapshot_id: Snapshot ID.
        :param str snapshot_name: Snapshot name, the user-defined snapshot alias.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_usage", disk_usage)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "snapshot_name", snapshot_name)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Size of the cloud disk used to create the snapshot; unit: GB.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskUsage")
    def disk_usage(self) -> str:
        """
        Type of the cloud disk used to create the snapshot.
        """
        return pulumi.get(self, "disk_usage")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        """
        Snapshot ID.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> str:
        """
        Snapshot name, the user-defined snapshot alias.
        """
        return pulumi.get(self, "snapshot_name")


