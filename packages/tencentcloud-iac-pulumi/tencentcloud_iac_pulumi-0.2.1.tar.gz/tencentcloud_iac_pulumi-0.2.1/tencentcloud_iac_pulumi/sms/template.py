# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TemplateArgs', 'Template']

@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 international: pulumi.Input[int],
                 remark: pulumi.Input[str],
                 sms_type: pulumi.Input[int],
                 template_content: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a Template resource.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] remark: Template remarks, such as reason for application and use case.
        :param pulumi.Input[int] sms_type: SMS type. 0: regular SMS, 1: marketing SMS.
        :param pulumi.Input[str] template_content: Message Template Content.
        :param pulumi.Input[str] template_name: Message Template name, which must be unique.
        """
        pulumi.set(__self__, "international", international)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "sms_type", sms_type)
        pulumi.set(__self__, "template_content", template_content)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter
    def international(self) -> pulumi.Input[int]:
        """
        Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        """
        return pulumi.get(self, "international")

    @international.setter
    def international(self, value: pulumi.Input[int]):
        pulumi.set(self, "international", value)

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Input[str]:
        """
        Template remarks, such as reason for application and use case.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: pulumi.Input[str]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="smsType")
    def sms_type(self) -> pulumi.Input[int]:
        """
        SMS type. 0: regular SMS, 1: marketing SMS.
        """
        return pulumi.get(self, "sms_type")

    @sms_type.setter
    def sms_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "sms_type", value)

    @property
    @pulumi.getter(name="templateContent")
    def template_content(self) -> pulumi.Input[str]:
        """
        Message Template Content.
        """
        return pulumi.get(self, "template_content")

    @template_content.setter
    def template_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_content", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Message Template name, which must be unique.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class _TemplateState:
    def __init__(__self__, *,
                 international: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 sms_type: Optional[pulumi.Input[int]] = None,
                 template_content: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Template resources.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] remark: Template remarks, such as reason for application and use case.
        :param pulumi.Input[int] sms_type: SMS type. 0: regular SMS, 1: marketing SMS.
        :param pulumi.Input[str] template_content: Message Template Content.
        :param pulumi.Input[str] template_name: Message Template name, which must be unique.
        """
        if international is not None:
            pulumi.set(__self__, "international", international)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if sms_type is not None:
            pulumi.set(__self__, "sms_type", sms_type)
        if template_content is not None:
            pulumi.set(__self__, "template_content", template_content)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter
    def international(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        """
        return pulumi.get(self, "international")

    @international.setter
    def international(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "international", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Template remarks, such as reason for application and use case.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="smsType")
    def sms_type(self) -> Optional[pulumi.Input[int]]:
        """
        SMS type. 0: regular SMS, 1: marketing SMS.
        """
        return pulumi.get(self, "sms_type")

    @sms_type.setter
    def sms_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sms_type", value)

    @property
    @pulumi.getter(name="templateContent")
    def template_content(self) -> Optional[pulumi.Input[str]]:
        """
        Message Template Content.
        """
        return pulumi.get(self, "template_content")

    @template_content.setter
    def template_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_content", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Message Template name, which must be unique.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class Template(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 international: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 sms_type: Optional[pulumi.Input[int]] = None,
                 template_content: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a sms template

        ## Example Usage

        ### Create a sms template

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        template = tencentcloud.sms.Template("template",
            international=0,
            remark="terraform example",
            sms_type=0,
            template_content="example for sms template",
            template_name="tf_example_sms_template")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] remark: Template remarks, such as reason for application and use case.
        :param pulumi.Input[int] sms_type: SMS type. 0: regular SMS, 1: marketing SMS.
        :param pulumi.Input[str] template_content: Message Template Content.
        :param pulumi.Input[str] template_name: Message Template name, which must be unique.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sms template

        ## Example Usage

        ### Create a sms template

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        template = tencentcloud.sms.Template("template",
            international=0,
            remark="terraform example",
            sms_type=0,
            template_content="example for sms template",
            template_name="tf_example_sms_template")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 international: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 sms_type: Optional[pulumi.Input[int]] = None,
                 template_content: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateArgs.__new__(TemplateArgs)

            if international is None and not opts.urn:
                raise TypeError("Missing required property 'international'")
            __props__.__dict__["international"] = international
            if remark is None and not opts.urn:
                raise TypeError("Missing required property 'remark'")
            __props__.__dict__["remark"] = remark
            if sms_type is None and not opts.urn:
                raise TypeError("Missing required property 'sms_type'")
            __props__.__dict__["sms_type"] = sms_type
            if template_content is None and not opts.urn:
                raise TypeError("Missing required property 'template_content'")
            __props__.__dict__["template_content"] = template_content
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
        super(Template, __self__).__init__(
            'tencentcloud:Sms/template:Template',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            international: Optional[pulumi.Input[int]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            sms_type: Optional[pulumi.Input[int]] = None,
            template_content: Optional[pulumi.Input[str]] = None,
            template_name: Optional[pulumi.Input[str]] = None) -> 'Template':
        """
        Get an existing Template resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] remark: Template remarks, such as reason for application and use case.
        :param pulumi.Input[int] sms_type: SMS type. 0: regular SMS, 1: marketing SMS.
        :param pulumi.Input[str] template_content: Message Template Content.
        :param pulumi.Input[str] template_name: Message Template name, which must be unique.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TemplateState.__new__(_TemplateState)

        __props__.__dict__["international"] = international
        __props__.__dict__["remark"] = remark
        __props__.__dict__["sms_type"] = sms_type
        __props__.__dict__["template_content"] = template_content
        __props__.__dict__["template_name"] = template_name
        return Template(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def international(self) -> pulumi.Output[int]:
        """
        Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        """
        return pulumi.get(self, "international")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        Template remarks, such as reason for application and use case.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="smsType")
    def sms_type(self) -> pulumi.Output[int]:
        """
        SMS type. 0: regular SMS, 1: marketing SMS.
        """
        return pulumi.get(self, "sms_type")

    @property
    @pulumi.getter(name="templateContent")
    def template_content(self) -> pulumi.Output[str]:
        """
        Message Template Content.
        """
        return pulumi.get(self, "template_content")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Message Template name, which must be unique.
        """
        return pulumi.get(self, "template_name")

