# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SignArgs', 'Sign']

@pulumi.input_type
class SignArgs:
    def __init__(__self__, *,
                 document_type: pulumi.Input[int],
                 international: pulumi.Input[int],
                 proof_image: pulumi.Input[str],
                 sign_name: pulumi.Input[str],
                 sign_purpose: pulumi.Input[int],
                 sign_type: pulumi.Input[int],
                 commission_image: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Sign resource.
        :param pulumi.Input[int] document_type: DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] proof_image: You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        :param pulumi.Input[str] sign_name: Sms sign name, unique.
        :param pulumi.Input[int] sign_purpose: Signature purpose: 0: for personal use; 1: for others.
        :param pulumi.Input[int] sign_type: Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        :param pulumi.Input[str] commission_image: Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        :param pulumi.Input[str] remark: Signature application remarks.
        """
        pulumi.set(__self__, "document_type", document_type)
        pulumi.set(__self__, "international", international)
        pulumi.set(__self__, "proof_image", proof_image)
        pulumi.set(__self__, "sign_name", sign_name)
        pulumi.set(__self__, "sign_purpose", sign_purpose)
        pulumi.set(__self__, "sign_type", sign_type)
        if commission_image is not None:
            pulumi.set(__self__, "commission_image", commission_image)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="documentType")
    def document_type(self) -> pulumi.Input[int]:
        """
        DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
        """
        return pulumi.get(self, "document_type")

    @document_type.setter
    def document_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "document_type", value)

    @property
    @pulumi.getter
    def international(self) -> pulumi.Input[int]:
        """
        Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        """
        return pulumi.get(self, "international")

    @international.setter
    def international(self, value: pulumi.Input[int]):
        pulumi.set(self, "international", value)

    @property
    @pulumi.getter(name="proofImage")
    def proof_image(self) -> pulumi.Input[str]:
        """
        You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        """
        return pulumi.get(self, "proof_image")

    @proof_image.setter
    def proof_image(self, value: pulumi.Input[str]):
        pulumi.set(self, "proof_image", value)

    @property
    @pulumi.getter(name="signName")
    def sign_name(self) -> pulumi.Input[str]:
        """
        Sms sign name, unique.
        """
        return pulumi.get(self, "sign_name")

    @sign_name.setter
    def sign_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "sign_name", value)

    @property
    @pulumi.getter(name="signPurpose")
    def sign_purpose(self) -> pulumi.Input[int]:
        """
        Signature purpose: 0: for personal use; 1: for others.
        """
        return pulumi.get(self, "sign_purpose")

    @sign_purpose.setter
    def sign_purpose(self, value: pulumi.Input[int]):
        pulumi.set(self, "sign_purpose", value)

    @property
    @pulumi.getter(name="signType")
    def sign_type(self) -> pulumi.Input[int]:
        """
        Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        """
        return pulumi.get(self, "sign_type")

    @sign_type.setter
    def sign_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "sign_type", value)

    @property
    @pulumi.getter(name="commissionImage")
    def commission_image(self) -> Optional[pulumi.Input[str]]:
        """
        Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        """
        return pulumi.get(self, "commission_image")

    @commission_image.setter
    def commission_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commission_image", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Signature application remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _SignState:
    def __init__(__self__, *,
                 commission_image: Optional[pulumi.Input[str]] = None,
                 document_type: Optional[pulumi.Input[int]] = None,
                 international: Optional[pulumi.Input[int]] = None,
                 proof_image: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 sign_name: Optional[pulumi.Input[str]] = None,
                 sign_purpose: Optional[pulumi.Input[int]] = None,
                 sign_type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Sign resources.
        :param pulumi.Input[str] commission_image: Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        :param pulumi.Input[int] document_type: DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] proof_image: You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        :param pulumi.Input[str] remark: Signature application remarks.
        :param pulumi.Input[str] sign_name: Sms sign name, unique.
        :param pulumi.Input[int] sign_purpose: Signature purpose: 0: for personal use; 1: for others.
        :param pulumi.Input[int] sign_type: Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        """
        if commission_image is not None:
            pulumi.set(__self__, "commission_image", commission_image)
        if document_type is not None:
            pulumi.set(__self__, "document_type", document_type)
        if international is not None:
            pulumi.set(__self__, "international", international)
        if proof_image is not None:
            pulumi.set(__self__, "proof_image", proof_image)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if sign_name is not None:
            pulumi.set(__self__, "sign_name", sign_name)
        if sign_purpose is not None:
            pulumi.set(__self__, "sign_purpose", sign_purpose)
        if sign_type is not None:
            pulumi.set(__self__, "sign_type", sign_type)

    @property
    @pulumi.getter(name="commissionImage")
    def commission_image(self) -> Optional[pulumi.Input[str]]:
        """
        Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        """
        return pulumi.get(self, "commission_image")

    @commission_image.setter
    def commission_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commission_image", value)

    @property
    @pulumi.getter(name="documentType")
    def document_type(self) -> Optional[pulumi.Input[int]]:
        """
        DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
        """
        return pulumi.get(self, "document_type")

    @document_type.setter
    def document_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "document_type", value)

    @property
    @pulumi.getter
    def international(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        """
        return pulumi.get(self, "international")

    @international.setter
    def international(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "international", value)

    @property
    @pulumi.getter(name="proofImage")
    def proof_image(self) -> Optional[pulumi.Input[str]]:
        """
        You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        """
        return pulumi.get(self, "proof_image")

    @proof_image.setter
    def proof_image(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proof_image", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Signature application remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="signName")
    def sign_name(self) -> Optional[pulumi.Input[str]]:
        """
        Sms sign name, unique.
        """
        return pulumi.get(self, "sign_name")

    @sign_name.setter
    def sign_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_name", value)

    @property
    @pulumi.getter(name="signPurpose")
    def sign_purpose(self) -> Optional[pulumi.Input[int]]:
        """
        Signature purpose: 0: for personal use; 1: for others.
        """
        return pulumi.get(self, "sign_purpose")

    @sign_purpose.setter
    def sign_purpose(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sign_purpose", value)

    @property
    @pulumi.getter(name="signType")
    def sign_type(self) -> Optional[pulumi.Input[int]]:
        """
        Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        """
        return pulumi.get(self, "sign_type")

    @sign_type.setter
    def sign_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sign_type", value)


class Sign(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 commission_image: Optional[pulumi.Input[str]] = None,
                 document_type: Optional[pulumi.Input[int]] = None,
                 international: Optional[pulumi.Input[int]] = None,
                 proof_image: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 sign_name: Optional[pulumi.Input[str]] = None,
                 sign_purpose: Optional[pulumi.Input[int]] = None,
                 sign_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a sms sign

        ## Example Usage

        ### Create a sms sign instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sms.Sign("example",
            document_type=4,
            international=0,
            proof_image="your_proof_image",
            sign_name="tf_example_sms_sign",
            sign_purpose=0,
            sign_type=1)
        # 1：APP,  DocumentType can be chosen（0，1，2，3，4）
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] commission_image: Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        :param pulumi.Input[int] document_type: DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] proof_image: You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        :param pulumi.Input[str] remark: Signature application remarks.
        :param pulumi.Input[str] sign_name: Sms sign name, unique.
        :param pulumi.Input[int] sign_purpose: Signature purpose: 0: for personal use; 1: for others.
        :param pulumi.Input[int] sign_type: Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SignArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sms sign

        ## Example Usage

        ### Create a sms sign instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sms.Sign("example",
            document_type=4,
            international=0,
            proof_image="your_proof_image",
            sign_name="tf_example_sms_sign",
            sign_purpose=0,
            sign_type=1)
        # 1：APP,  DocumentType can be chosen（0，1，2，3，4）
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SignArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SignArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 commission_image: Optional[pulumi.Input[str]] = None,
                 document_type: Optional[pulumi.Input[int]] = None,
                 international: Optional[pulumi.Input[int]] = None,
                 proof_image: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 sign_name: Optional[pulumi.Input[str]] = None,
                 sign_purpose: Optional[pulumi.Input[int]] = None,
                 sign_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SignArgs.__new__(SignArgs)

            __props__.__dict__["commission_image"] = commission_image
            if document_type is None and not opts.urn:
                raise TypeError("Missing required property 'document_type'")
            __props__.__dict__["document_type"] = document_type
            if international is None and not opts.urn:
                raise TypeError("Missing required property 'international'")
            __props__.__dict__["international"] = international
            if proof_image is None and not opts.urn:
                raise TypeError("Missing required property 'proof_image'")
            __props__.__dict__["proof_image"] = proof_image
            __props__.__dict__["remark"] = remark
            if sign_name is None and not opts.urn:
                raise TypeError("Missing required property 'sign_name'")
            __props__.__dict__["sign_name"] = sign_name
            if sign_purpose is None and not opts.urn:
                raise TypeError("Missing required property 'sign_purpose'")
            __props__.__dict__["sign_purpose"] = sign_purpose
            if sign_type is None and not opts.urn:
                raise TypeError("Missing required property 'sign_type'")
            __props__.__dict__["sign_type"] = sign_type
        super(Sign, __self__).__init__(
            'tencentcloud:Sms/sign:Sign',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            commission_image: Optional[pulumi.Input[str]] = None,
            document_type: Optional[pulumi.Input[int]] = None,
            international: Optional[pulumi.Input[int]] = None,
            proof_image: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            sign_name: Optional[pulumi.Input[str]] = None,
            sign_purpose: Optional[pulumi.Input[int]] = None,
            sign_type: Optional[pulumi.Input[int]] = None) -> 'Sign':
        """
        Get an existing Sign resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] commission_image: Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        :param pulumi.Input[int] document_type: DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
        :param pulumi.Input[int] international: Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        :param pulumi.Input[str] proof_image: You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        :param pulumi.Input[str] remark: Signature application remarks.
        :param pulumi.Input[str] sign_name: Sms sign name, unique.
        :param pulumi.Input[int] sign_purpose: Signature purpose: 0: for personal use; 1: for others.
        :param pulumi.Input[int] sign_type: Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SignState.__new__(_SignState)

        __props__.__dict__["commission_image"] = commission_image
        __props__.__dict__["document_type"] = document_type
        __props__.__dict__["international"] = international
        __props__.__dict__["proof_image"] = proof_image
        __props__.__dict__["remark"] = remark
        __props__.__dict__["sign_name"] = sign_name
        __props__.__dict__["sign_purpose"] = sign_purpose
        __props__.__dict__["sign_type"] = sign_type
        return Sign(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="commissionImage")
    def commission_image(self) -> pulumi.Output[Optional[str]]:
        """
        Power of attorney, which should be submitted if SignPurpose is for use by others. You should Base64-encode the image first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter. Note: this field will take effect only when SignPurpose is 1 (for user by others).
        """
        return pulumi.get(self, "commission_image")

    @property
    @pulumi.getter(name="documentType")
    def document_type(self) -> pulumi.Output[int]:
        """
        DocumentType is used for enterprise authentication, or website, app authentication, etc. DocumentType: 0, 1, 2, 3, 4, 5, 6, 7, 8.
        """
        return pulumi.get(self, "document_type")

    @property
    @pulumi.getter
    def international(self) -> pulumi.Output[int]:
        """
        Whether it is Global SMS: 0: Mainland China SMS; 1: Global SMS.
        """
        return pulumi.get(self, "international")

    @property
    @pulumi.getter(name="proofImage")
    def proof_image(self) -> pulumi.Output[str]:
        """
        You should Base64-encode the image of the identity certificate corresponding to the signature first, remove the prefix data:image/jpeg;base64, from the resulted string, and then use it as the value of this parameter.
        """
        return pulumi.get(self, "proof_image")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        Signature application remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="signName")
    def sign_name(self) -> pulumi.Output[str]:
        """
        Sms sign name, unique.
        """
        return pulumi.get(self, "sign_name")

    @property
    @pulumi.getter(name="signPurpose")
    def sign_purpose(self) -> pulumi.Output[int]:
        """
        Signature purpose: 0: for personal use; 1: for others.
        """
        return pulumi.get(self, "sign_purpose")

    @property
    @pulumi.getter(name="signType")
    def sign_type(self) -> pulumi.Output[int]:
        """
        Sms sign type: 0, 1, 2, 3, 4, 5, 6.
        """
        return pulumi.get(self, "sign_type")

