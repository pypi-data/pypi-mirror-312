# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 dc_id: pulumi.Input[str],
                 dcg_id: pulumi.Input[str],
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 bgp_asn: Optional[pulumi.Input[int]] = None,
                 bgp_auth_key: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 dc_owner_account: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_region: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 route_filter_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] dc_id: ID of the DC to be queried, application deployment offline.
        :param pulumi.Input[str] dcg_id: ID of the DC Gateway. Currently only new in the console.
        :param pulumi.Input[int] bandwidth: Bandwidth of the DC.
        :param pulumi.Input[int] bgp_asn: BGP ASN of the user. A required field within BGP.
        :param pulumi.Input[str] bgp_auth_key: BGP key of the user.
        :param pulumi.Input[str] customer_address: Interconnect IP of the DC within client.
        :param pulumi.Input[str] dc_owner_account: Connection owner, who is the current customer by default. The developer account ID should be entered for shared connections.
        :param pulumi.Input[str] name: Name of the dedicated tunnel.
        :param pulumi.Input[str] network_region: Network region.
        :param pulumi.Input[str] network_type: Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] route_filter_prefixes: Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable field within BGP.
        :param pulumi.Input[str] route_type: Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
        :param pulumi.Input[str] tencent_address: Interconnect IP of the DC within Tencent.
        :param pulumi.Input[int] vlan: Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the physical connect.
        :param pulumi.Input[str] vpc_id: ID of the VPC or BMVPC.
        """
        pulumi.set(__self__, "dc_id", dc_id)
        pulumi.set(__self__, "dcg_id", dcg_id)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bgp_asn is not None:
            pulumi.set(__self__, "bgp_asn", bgp_asn)
        if bgp_auth_key is not None:
            pulumi.set(__self__, "bgp_auth_key", bgp_auth_key)
        if customer_address is not None:
            pulumi.set(__self__, "customer_address", customer_address)
        if dc_owner_account is not None:
            pulumi.set(__self__, "dc_owner_account", dc_owner_account)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_region is not None:
            pulumi.set(__self__, "network_region", network_region)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if route_filter_prefixes is not None:
            pulumi.set(__self__, "route_filter_prefixes", route_filter_prefixes)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if tencent_address is not None:
            pulumi.set(__self__, "tencent_address", tencent_address)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> pulumi.Input[str]:
        """
        ID of the DC to be queried, application deployment offline.
        """
        return pulumi.get(self, "dc_id")

    @dc_id.setter
    def dc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dc_id", value)

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> pulumi.Input[str]:
        """
        ID of the DC Gateway. Currently only new in the console.
        """
        return pulumi.get(self, "dcg_id")

    @dcg_id.setter
    def dcg_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dcg_id", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth of the DC.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> Optional[pulumi.Input[int]]:
        """
        BGP ASN of the user. A required field within BGP.
        """
        return pulumi.get(self, "bgp_asn")

    @bgp_asn.setter
    def bgp_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_asn", value)

    @property
    @pulumi.getter(name="bgpAuthKey")
    def bgp_auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        BGP key of the user.
        """
        return pulumi.get(self, "bgp_auth_key")

    @bgp_auth_key.setter
    def bgp_auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_auth_key", value)

    @property
    @pulumi.getter(name="customerAddress")
    def customer_address(self) -> Optional[pulumi.Input[str]]:
        """
        Interconnect IP of the DC within client.
        """
        return pulumi.get(self, "customer_address")

    @customer_address.setter
    def customer_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_address", value)

    @property
    @pulumi.getter(name="dcOwnerAccount")
    def dc_owner_account(self) -> Optional[pulumi.Input[str]]:
        """
        Connection owner, who is the current customer by default. The developer account ID should be entered for shared connections.
        """
        return pulumi.get(self, "dc_owner_account")

    @dc_owner_account.setter
    def dc_owner_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dc_owner_account", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dedicated tunnel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkRegion")
    def network_region(self) -> Optional[pulumi.Input[str]]:
        """
        Network region.
        """
        return pulumi.get(self, "network_region")

    @network_region.setter
    def network_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_region", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="routeFilterPrefixes")
    def route_filter_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable field within BGP.
        """
        return pulumi.get(self, "route_filter_prefixes")

    @route_filter_prefixes.setter
    def route_filter_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "route_filter_prefixes", value)

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
        """
        return pulumi.get(self, "route_type")

    @route_type.setter
    def route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_type", value)

    @property
    @pulumi.getter(name="tencentAddress")
    def tencent_address(self) -> Optional[pulumi.Input[str]]:
        """
        Interconnect IP of the DC within Tencent.
        """
        return pulumi.get(self, "tencent_address")

    @tencent_address.setter
    def tencent_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tencent_address", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the physical connect.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC or BMVPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 bgp_asn: Optional[pulumi.Input[int]] = None,
                 bgp_auth_key: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 dc_owner_account: Optional[pulumi.Input[str]] = None,
                 dcg_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_region: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 route_filter_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] bandwidth: Bandwidth of the DC.
        :param pulumi.Input[int] bgp_asn: BGP ASN of the user. A required field within BGP.
        :param pulumi.Input[str] bgp_auth_key: BGP key of the user.
        :param pulumi.Input[str] create_time: Creation time of resource.
        :param pulumi.Input[str] customer_address: Interconnect IP of the DC within client.
        :param pulumi.Input[str] dc_id: ID of the DC to be queried, application deployment offline.
        :param pulumi.Input[str] dc_owner_account: Connection owner, who is the current customer by default. The developer account ID should be entered for shared connections.
        :param pulumi.Input[str] dcg_id: ID of the DC Gateway. Currently only new in the console.
        :param pulumi.Input[str] name: Name of the dedicated tunnel.
        :param pulumi.Input[str] network_region: Network region.
        :param pulumi.Input[str] network_type: Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] route_filter_prefixes: Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable field within BGP.
        :param pulumi.Input[str] route_type: Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
        :param pulumi.Input[str] state: State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`, `COMFIRMING` and `REJECTED`.
        :param pulumi.Input[str] tencent_address: Interconnect IP of the DC within Tencent.
        :param pulumi.Input[int] vlan: Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the physical connect.
        :param pulumi.Input[str] vpc_id: ID of the VPC or BMVPC.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bgp_asn is not None:
            pulumi.set(__self__, "bgp_asn", bgp_asn)
        if bgp_auth_key is not None:
            pulumi.set(__self__, "bgp_auth_key", bgp_auth_key)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if customer_address is not None:
            pulumi.set(__self__, "customer_address", customer_address)
        if dc_id is not None:
            pulumi.set(__self__, "dc_id", dc_id)
        if dc_owner_account is not None:
            pulumi.set(__self__, "dc_owner_account", dc_owner_account)
        if dcg_id is not None:
            pulumi.set(__self__, "dcg_id", dcg_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_region is not None:
            pulumi.set(__self__, "network_region", network_region)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if route_filter_prefixes is not None:
            pulumi.set(__self__, "route_filter_prefixes", route_filter_prefixes)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tencent_address is not None:
            pulumi.set(__self__, "tencent_address", tencent_address)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth of the DC.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> Optional[pulumi.Input[int]]:
        """
        BGP ASN of the user. A required field within BGP.
        """
        return pulumi.get(self, "bgp_asn")

    @bgp_asn.setter
    def bgp_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bgp_asn", value)

    @property
    @pulumi.getter(name="bgpAuthKey")
    def bgp_auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        BGP key of the user.
        """
        return pulumi.get(self, "bgp_auth_key")

    @bgp_auth_key.setter
    def bgp_auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_auth_key", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of resource.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="customerAddress")
    def customer_address(self) -> Optional[pulumi.Input[str]]:
        """
        Interconnect IP of the DC within client.
        """
        return pulumi.get(self, "customer_address")

    @customer_address.setter
    def customer_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_address", value)

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the DC to be queried, application deployment offline.
        """
        return pulumi.get(self, "dc_id")

    @dc_id.setter
    def dc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dc_id", value)

    @property
    @pulumi.getter(name="dcOwnerAccount")
    def dc_owner_account(self) -> Optional[pulumi.Input[str]]:
        """
        Connection owner, who is the current customer by default. The developer account ID should be entered for shared connections.
        """
        return pulumi.get(self, "dc_owner_account")

    @dc_owner_account.setter
    def dc_owner_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dc_owner_account", value)

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the DC Gateway. Currently only new in the console.
        """
        return pulumi.get(self, "dcg_id")

    @dcg_id.setter
    def dcg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcg_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the dedicated tunnel.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkRegion")
    def network_region(self) -> Optional[pulumi.Input[str]]:
        """
        Network region.
        """
        return pulumi.get(self, "network_region")

    @network_region.setter
    def network_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_region", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="routeFilterPrefixes")
    def route_filter_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable field within BGP.
        """
        return pulumi.get(self, "route_filter_prefixes")

    @route_filter_prefixes.setter
    def route_filter_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "route_filter_prefixes", value)

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
        """
        return pulumi.get(self, "route_type")

    @route_type.setter
    def route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_type", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`, `COMFIRMING` and `REJECTED`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="tencentAddress")
    def tencent_address(self) -> Optional[pulumi.Input[str]]:
        """
        Interconnect IP of the DC within Tencent.
        """
        return pulumi.get(self, "tencent_address")

    @tencent_address.setter
    def tencent_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tencent_address", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the physical connect.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC or BMVPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 bgp_asn: Optional[pulumi.Input[int]] = None,
                 bgp_auth_key: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 dc_owner_account: Optional[pulumi.Input[str]] = None,
                 dcg_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_region: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 route_filter_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to creating dedicated tunnels instances.

        > **NOTE:** 1. ID of the DC is queried, can only apply for this resource offline.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        dc_id = config.get("dcId")
        if dc_id is None:
            dc_id = "dc-kax48sg7"
        dcg_id = config.get("dcgId")
        if dcg_id is None:
            dcg_id = "dcg-dmbhf7jf"
        vpc_id = config.get("vpcId")
        if vpc_id is None:
            vpc_id = "vpc-4h9v4mo3"
        bgp_main = tencentcloud.dcx.Instance("bgpMain",
            bandwidth=900,
            dc_id=dc_id,
            dcg_id=dcg_id,
            network_type="VPC",
            route_type="BGP",
            vlan=306,
            vpc_id=vpc_id)
        static_main = tencentcloud.dcx.Instance("staticMain",
            bandwidth=900,
            dc_id=dc_id,
            dcg_id=dcg_id,
            dc_owner_account="xxxxxxxx",
            network_type="VPC",
            route_type="STATIC",
            vlan=301,
            vpc_id=vpc_id,
            route_filter_prefixes=["10.10.10.101/32"],
            tencent_address="100.93.46.1/30",
            customer_address="100.93.46.2/30")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        DCX instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcx/instance:Instance foo dcx-cbbr1gjk
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bandwidth: Bandwidth of the DC.
        :param pulumi.Input[int] bgp_asn: BGP ASN of the user. A required field within BGP.
        :param pulumi.Input[str] bgp_auth_key: BGP key of the user.
        :param pulumi.Input[str] customer_address: Interconnect IP of the DC within client.
        :param pulumi.Input[str] dc_id: ID of the DC to be queried, application deployment offline.
        :param pulumi.Input[str] dc_owner_account: Connection owner, who is the current customer by default. The developer account ID should be entered for shared connections.
        :param pulumi.Input[str] dcg_id: ID of the DC Gateway. Currently only new in the console.
        :param pulumi.Input[str] name: Name of the dedicated tunnel.
        :param pulumi.Input[str] network_region: Network region.
        :param pulumi.Input[str] network_type: Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] route_filter_prefixes: Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable field within BGP.
        :param pulumi.Input[str] route_type: Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
        :param pulumi.Input[str] tencent_address: Interconnect IP of the DC within Tencent.
        :param pulumi.Input[int] vlan: Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the physical connect.
        :param pulumi.Input[str] vpc_id: ID of the VPC or BMVPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to creating dedicated tunnels instances.

        > **NOTE:** 1. ID of the DC is queried, can only apply for this resource offline.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        dc_id = config.get("dcId")
        if dc_id is None:
            dc_id = "dc-kax48sg7"
        dcg_id = config.get("dcgId")
        if dcg_id is None:
            dcg_id = "dcg-dmbhf7jf"
        vpc_id = config.get("vpcId")
        if vpc_id is None:
            vpc_id = "vpc-4h9v4mo3"
        bgp_main = tencentcloud.dcx.Instance("bgpMain",
            bandwidth=900,
            dc_id=dc_id,
            dcg_id=dcg_id,
            network_type="VPC",
            route_type="BGP",
            vlan=306,
            vpc_id=vpc_id)
        static_main = tencentcloud.dcx.Instance("staticMain",
            bandwidth=900,
            dc_id=dc_id,
            dcg_id=dcg_id,
            dc_owner_account="xxxxxxxx",
            network_type="VPC",
            route_type="STATIC",
            vlan=301,
            vpc_id=vpc_id,
            route_filter_prefixes=["10.10.10.101/32"],
            tencent_address="100.93.46.1/30",
            customer_address="100.93.46.2/30")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        DCX instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcx/instance:Instance foo dcx-cbbr1gjk
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 bgp_asn: Optional[pulumi.Input[int]] = None,
                 bgp_auth_key: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 dc_id: Optional[pulumi.Input[str]] = None,
                 dc_owner_account: Optional[pulumi.Input[str]] = None,
                 dcg_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_region: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 route_filter_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["bgp_asn"] = bgp_asn
            __props__.__dict__["bgp_auth_key"] = bgp_auth_key
            __props__.__dict__["customer_address"] = customer_address
            if dc_id is None and not opts.urn:
                raise TypeError("Missing required property 'dc_id'")
            __props__.__dict__["dc_id"] = dc_id
            __props__.__dict__["dc_owner_account"] = dc_owner_account
            if dcg_id is None and not opts.urn:
                raise TypeError("Missing required property 'dcg_id'")
            __props__.__dict__["dcg_id"] = dcg_id
            __props__.__dict__["name"] = name
            __props__.__dict__["network_region"] = network_region
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["route_filter_prefixes"] = route_filter_prefixes
            __props__.__dict__["route_type"] = route_type
            __props__.__dict__["tencent_address"] = tencent_address
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["state"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Dcx/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            bgp_asn: Optional[pulumi.Input[int]] = None,
            bgp_auth_key: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            customer_address: Optional[pulumi.Input[str]] = None,
            dc_id: Optional[pulumi.Input[str]] = None,
            dc_owner_account: Optional[pulumi.Input[str]] = None,
            dcg_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_region: Optional[pulumi.Input[str]] = None,
            network_type: Optional[pulumi.Input[str]] = None,
            route_filter_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            route_type: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tencent_address: Optional[pulumi.Input[str]] = None,
            vlan: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bandwidth: Bandwidth of the DC.
        :param pulumi.Input[int] bgp_asn: BGP ASN of the user. A required field within BGP.
        :param pulumi.Input[str] bgp_auth_key: BGP key of the user.
        :param pulumi.Input[str] create_time: Creation time of resource.
        :param pulumi.Input[str] customer_address: Interconnect IP of the DC within client.
        :param pulumi.Input[str] dc_id: ID of the DC to be queried, application deployment offline.
        :param pulumi.Input[str] dc_owner_account: Connection owner, who is the current customer by default. The developer account ID should be entered for shared connections.
        :param pulumi.Input[str] dcg_id: ID of the DC Gateway. Currently only new in the console.
        :param pulumi.Input[str] name: Name of the dedicated tunnel.
        :param pulumi.Input[str] network_region: Network region.
        :param pulumi.Input[str] network_type: Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] route_filter_prefixes: Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable field within BGP.
        :param pulumi.Input[str] route_type: Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
        :param pulumi.Input[str] state: State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`, `COMFIRMING` and `REJECTED`.
        :param pulumi.Input[str] tencent_address: Interconnect IP of the DC within Tencent.
        :param pulumi.Input[int] vlan: Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the physical connect.
        :param pulumi.Input[str] vpc_id: ID of the VPC or BMVPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["bgp_asn"] = bgp_asn
        __props__.__dict__["bgp_auth_key"] = bgp_auth_key
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["customer_address"] = customer_address
        __props__.__dict__["dc_id"] = dc_id
        __props__.__dict__["dc_owner_account"] = dc_owner_account
        __props__.__dict__["dcg_id"] = dcg_id
        __props__.__dict__["name"] = name
        __props__.__dict__["network_region"] = network_region
        __props__.__dict__["network_type"] = network_type
        __props__.__dict__["route_filter_prefixes"] = route_filter_prefixes
        __props__.__dict__["route_type"] = route_type
        __props__.__dict__["state"] = state
        __props__.__dict__["tencent_address"] = tencent_address
        __props__.__dict__["vlan"] = vlan
        __props__.__dict__["vpc_id"] = vpc_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[int]:
        """
        Bandwidth of the DC.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> pulumi.Output[int]:
        """
        BGP ASN of the user. A required field within BGP.
        """
        return pulumi.get(self, "bgp_asn")

    @property
    @pulumi.getter(name="bgpAuthKey")
    def bgp_auth_key(self) -> pulumi.Output[Optional[str]]:
        """
        BGP key of the user.
        """
        return pulumi.get(self, "bgp_auth_key")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customerAddress")
    def customer_address(self) -> pulumi.Output[str]:
        """
        Interconnect IP of the DC within client.
        """
        return pulumi.get(self, "customer_address")

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> pulumi.Output[str]:
        """
        ID of the DC to be queried, application deployment offline.
        """
        return pulumi.get(self, "dc_id")

    @property
    @pulumi.getter(name="dcOwnerAccount")
    def dc_owner_account(self) -> pulumi.Output[str]:
        """
        Connection owner, who is the current customer by default. The developer account ID should be entered for shared connections.
        """
        return pulumi.get(self, "dc_owner_account")

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> pulumi.Output[str]:
        """
        ID of the DC Gateway. Currently only new in the console.
        """
        return pulumi.get(self, "dcg_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the dedicated tunnel.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkRegion")
    def network_region(self) -> pulumi.Output[Optional[str]]:
        """
        Network region.
        """
        return pulumi.get(self, "network_region")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of the network. Valid value: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="routeFilterPrefixes")
    def route_filter_prefixes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Static route, the network address of the user IDC. It can be modified after setting but cannot be deleted. AN unable field within BGP.
        """
        return pulumi.get(self, "route_filter_prefixes")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of the route, and available values include BGP and STATIC. The default value is `BGP`.
        """
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the dedicated tunnels. Valid value: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`, `COMFIRMING` and `REJECTED`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tencentAddress")
    def tencent_address(self) -> pulumi.Output[str]:
        """
        Interconnect IP of the DC within Tencent.
        """
        return pulumi.get(self, "tencent_address")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Vlan of the dedicated tunnels. Valid value ranges: (0~3000). `0` means that only one tunnel can be created for the physical connect.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the VPC or BMVPC.
        """
        return pulumi.get(self, "vpc_id")

