# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ExtraConfigBfdInfo',
    'ExtraConfigBgpPeer',
    'ExtraConfigNqaInfo',
    'ExtraConfigRouteFilterPrefixes',
    'GetInstancesInstanceListResult',
]

@pulumi.output_type
class ExtraConfigBfdInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "probeFailedTimes":
            suggest = "probe_failed_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtraConfigBfdInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtraConfigBfdInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtraConfigBfdInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: Optional[int] = None,
                 probe_failed_times: Optional[int] = None):
        """
        :param int interval: detect interval.
        :param int probe_failed_times: detect times.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probe_failed_times is not None:
            pulumi.set(__self__, "probe_failed_times", probe_failed_times)

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        detect interval.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="probeFailedTimes")
    def probe_failed_times(self) -> Optional[int]:
        """
        detect times.
        """
        return pulumi.get(self, "probe_failed_times")


@pulumi.output_type
class ExtraConfigBgpPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authKey":
            suggest = "auth_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtraConfigBgpPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtraConfigBgpPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtraConfigBgpPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 asn: Optional[int] = None,
                 auth_key: Optional[str] = None):
        """
        :param int asn: user idc BGP Asn.
        :param str auth_key: user bgp key.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)

    @property
    @pulumi.getter
    def asn(self) -> Optional[int]:
        """
        user idc BGP Asn.
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[str]:
        """
        user bgp key.
        """
        return pulumi.get(self, "auth_key")


@pulumi.output_type
class ExtraConfigNqaInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationIp":
            suggest = "destination_ip"
        elif key == "probeFailedTimes":
            suggest = "probe_failed_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ExtraConfigNqaInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ExtraConfigNqaInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ExtraConfigNqaInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ip: Optional[str] = None,
                 interval: Optional[int] = None,
                 probe_failed_times: Optional[int] = None):
        """
        :param str destination_ip: detect ip.
        :param int interval: detect interval.
        :param int probe_failed_times: detect times.
        """
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probe_failed_times is not None:
            pulumi.set(__self__, "probe_failed_times", probe_failed_times)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[str]:
        """
        detect ip.
        """
        return pulumi.get(self, "destination_ip")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        detect interval.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="probeFailedTimes")
    def probe_failed_times(self) -> Optional[int]:
        """
        detect times.
        """
        return pulumi.get(self, "probe_failed_times")


@pulumi.output_type
class ExtraConfigRouteFilterPrefixes(dict):
    def __init__(__self__, *,
                 cidr: Optional[str] = None):
        """
        :param str cidr: user network prefixes.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[str]:
        """
        user network prefixes.
        """
        return pulumi.get(self, "cidr")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 bgp_asn: int,
                 bgp_auth_key: str,
                 create_time: str,
                 customer_address: str,
                 dc_id: str,
                 dcg_id: str,
                 dcx_id: str,
                 name: str,
                 network_region: str,
                 network_type: str,
                 route_filter_prefixes: Sequence[str],
                 route_type: str,
                 state: str,
                 tencent_address: str,
                 vlan: int,
                 vpc_id: str):
        """
        :param int bandwidth: Bandwidth of the DC.
        :param int bgp_asn: BGP ASN of the user.
        :param str bgp_auth_key: BGP key of the user.
        :param str create_time: Creation time of resource.
        :param str customer_address: Interconnect IP of the DC within client.
        :param str dc_id: ID of the DC.
        :param str dcg_id: ID of the DC Gateway. Currently only new in the console.
        :param str dcx_id: ID of the dedicated tunnels to be queried.
        :param str name: Name of the dedicated tunnels to be queried.
        :param str network_region: The region of the dedicated tunnel.
        :param str network_type: Type of the network. Valid values: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        :param Sequence[str] route_filter_prefixes: Static route, the network address of the user IDC.
        :param str route_type: Type of the route. Valid values: `BGP` and `STATIC`. The default value is `BGP`.
        :param str state: State of the dedicated tunnels. Valid values: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`, `COMFIRMING` and `REJECTED`.
        :param str tencent_address: Interconnect IP of the DC within Tencent.
        :param int vlan: Vlan of the dedicated tunnels.  Valid value ranges: [0-3000]. `0` means that only one tunnel can be created for the physical connect.
        :param str vpc_id: ID of the VPC or BMVPC.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "bgp_auth_key", bgp_auth_key)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "customer_address", customer_address)
        pulumi.set(__self__, "dc_id", dc_id)
        pulumi.set(__self__, "dcg_id", dcg_id)
        pulumi.set(__self__, "dcx_id", dcx_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_region", network_region)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "route_filter_prefixes", route_filter_prefixes)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tencent_address", tencent_address)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        Bandwidth of the DC.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> int:
        """
        BGP ASN of the user.
        """
        return pulumi.get(self, "bgp_asn")

    @property
    @pulumi.getter(name="bgpAuthKey")
    def bgp_auth_key(self) -> str:
        """
        BGP key of the user.
        """
        return pulumi.get(self, "bgp_auth_key")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customerAddress")
    def customer_address(self) -> str:
        """
        Interconnect IP of the DC within client.
        """
        return pulumi.get(self, "customer_address")

    @property
    @pulumi.getter(name="dcId")
    def dc_id(self) -> str:
        """
        ID of the DC.
        """
        return pulumi.get(self, "dc_id")

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> str:
        """
        ID of the DC Gateway. Currently only new in the console.
        """
        return pulumi.get(self, "dcg_id")

    @property
    @pulumi.getter(name="dcxId")
    def dcx_id(self) -> str:
        """
        ID of the dedicated tunnels to be queried.
        """
        return pulumi.get(self, "dcx_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the dedicated tunnels to be queried.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkRegion")
    def network_region(self) -> str:
        """
        The region of the dedicated tunnel.
        """
        return pulumi.get(self, "network_region")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> str:
        """
        Type of the network. Valid values: `VPC`, `BMVPC` and `CCN`. The default value is `VPC`.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="routeFilterPrefixes")
    def route_filter_prefixes(self) -> Sequence[str]:
        """
        Static route, the network address of the user IDC.
        """
        return pulumi.get(self, "route_filter_prefixes")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> str:
        """
        Type of the route. Valid values: `BGP` and `STATIC`. The default value is `BGP`.
        """
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the dedicated tunnels. Valid values: `PENDING`, `ALLOCATING`, `ALLOCATED`, `ALTERING`, `DELETING`, `DELETED`, `COMFIRMING` and `REJECTED`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tencentAddress")
    def tencent_address(self) -> str:
        """
        Interconnect IP of the DC within Tencent.
        """
        return pulumi.get(self, "tencent_address")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        Vlan of the dedicated tunnels.  Valid value ranges: [0-3000]. `0` means that only one tunnel can be created for the physical connect.
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC or BMVPC.
        """
        return pulumi.get(self, "vpc_id")


