# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ExtraConfigBfdInfoArgs',
    'ExtraConfigBgpPeerArgs',
    'ExtraConfigNqaInfoArgs',
    'ExtraConfigRouteFilterPrefixesArgs',
]

@pulumi.input_type
class ExtraConfigBfdInfoArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input[int]] = None,
                 probe_failed_times: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] interval: detect interval.
        :param pulumi.Input[int] probe_failed_times: detect times.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probe_failed_times is not None:
            pulumi.set(__self__, "probe_failed_times", probe_failed_times)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        detect interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="probeFailedTimes")
    def probe_failed_times(self) -> Optional[pulumi.Input[int]]:
        """
        detect times.
        """
        return pulumi.get(self, "probe_failed_times")

    @probe_failed_times.setter
    def probe_failed_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_failed_times", value)


@pulumi.input_type
class ExtraConfigBgpPeerArgs:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[int]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] asn: user idc BGP Asn.
        :param pulumi.Input[str] auth_key: user bgp key.
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[int]]:
        """
        user idc BGP Asn.
        """
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        user bgp key.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)


@pulumi.input_type
class ExtraConfigNqaInfoArgs:
    def __init__(__self__, *,
                 destination_ip: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 probe_failed_times: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] destination_ip: detect ip.
        :param pulumi.Input[int] interval: detect interval.
        :param pulumi.Input[int] probe_failed_times: detect times.
        """
        if destination_ip is not None:
            pulumi.set(__self__, "destination_ip", destination_ip)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if probe_failed_times is not None:
            pulumi.set(__self__, "probe_failed_times", probe_failed_times)

    @property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> Optional[pulumi.Input[str]]:
        """
        detect ip.
        """
        return pulumi.get(self, "destination_ip")

    @destination_ip.setter
    def destination_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ip", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        detect interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="probeFailedTimes")
    def probe_failed_times(self) -> Optional[pulumi.Input[int]]:
        """
        detect times.
        """
        return pulumi.get(self, "probe_failed_times")

    @probe_failed_times.setter
    def probe_failed_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "probe_failed_times", value)


@pulumi.input_type
class ExtraConfigRouteFilterPrefixesArgs:
    def __init__(__self__, *,
                 cidr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cidr: user network prefixes.
        """
        if cidr is not None:
            pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> Optional[pulumi.Input[str]]:
        """
        user network prefixes.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr", value)


