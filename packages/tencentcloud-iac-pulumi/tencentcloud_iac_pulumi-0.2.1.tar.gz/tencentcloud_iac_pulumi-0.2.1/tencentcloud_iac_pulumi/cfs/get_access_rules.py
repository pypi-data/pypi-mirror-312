# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccessRulesResult',
    'AwaitableGetAccessRulesResult',
    'get_access_rules',
    'get_access_rules_output',
]

@pulumi.output_type
class GetAccessRulesResult:
    """
    A collection of values returned by getAccessRules.
    """
    def __init__(__self__, access_group_id=None, access_rule_id=None, access_rule_lists=None, id=None, result_output_file=None):
        if access_group_id and not isinstance(access_group_id, str):
            raise TypeError("Expected argument 'access_group_id' to be a str")
        pulumi.set(__self__, "access_group_id", access_group_id)
        if access_rule_id and not isinstance(access_rule_id, str):
            raise TypeError("Expected argument 'access_rule_id' to be a str")
        pulumi.set(__self__, "access_rule_id", access_rule_id)
        if access_rule_lists and not isinstance(access_rule_lists, list):
            raise TypeError("Expected argument 'access_rule_lists' to be a list")
        pulumi.set(__self__, "access_rule_lists", access_rule_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="accessGroupId")
    def access_group_id(self) -> str:
        return pulumi.get(self, "access_group_id")

    @property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> Optional[str]:
        """
        ID of the access rule.
        """
        return pulumi.get(self, "access_rule_id")

    @property
    @pulumi.getter(name="accessRuleLists")
    def access_rule_lists(self) -> Sequence['outputs.GetAccessRulesAccessRuleListResult']:
        """
        An information list of CFS access rule. Each element contains the following attributes:
        """
        return pulumi.get(self, "access_rule_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetAccessRulesResult(GetAccessRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessRulesResult(
            access_group_id=self.access_group_id,
            access_rule_id=self.access_rule_id,
            access_rule_lists=self.access_rule_lists,
            id=self.id,
            result_output_file=self.result_output_file)


def get_access_rules(access_group_id: Optional[str] = None,
                     access_rule_id: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessRulesResult:
    """
    Use this data source to query the detail information of CFS access rule.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    access_rules = tencentcloud.Cfs.get_access_rules(access_group_id="pgroup-7nx89k7l",
        access_rule_id="rule-qcndbqzj")
    ```
    <!--End PulumiCodeChooser -->


    :param str access_group_id: A specified access group ID used to query.
    :param str access_rule_id: A specified access rule ID used to query.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['accessGroupId'] = access_group_id
    __args__['accessRuleId'] = access_rule_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cfs/getAccessRules:getAccessRules', __args__, opts=opts, typ=GetAccessRulesResult).value

    return AwaitableGetAccessRulesResult(
        access_group_id=pulumi.get(__ret__, 'access_group_id'),
        access_rule_id=pulumi.get(__ret__, 'access_rule_id'),
        access_rule_lists=pulumi.get(__ret__, 'access_rule_lists'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_access_rules)
def get_access_rules_output(access_group_id: Optional[pulumi.Input[str]] = None,
                            access_rule_id: Optional[pulumi.Input[Optional[str]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccessRulesResult]:
    """
    Use this data source to query the detail information of CFS access rule.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    access_rules = tencentcloud.Cfs.get_access_rules(access_group_id="pgroup-7nx89k7l",
        access_rule_id="rule-qcndbqzj")
    ```
    <!--End PulumiCodeChooser -->


    :param str access_group_id: A specified access group ID used to query.
    :param str access_rule_id: A specified access rule ID used to query.
    :param str result_output_file: Used to save results.
    """
    ...
