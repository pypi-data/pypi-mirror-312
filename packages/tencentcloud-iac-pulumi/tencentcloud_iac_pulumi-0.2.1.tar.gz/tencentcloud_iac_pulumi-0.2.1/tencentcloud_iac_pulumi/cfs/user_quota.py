# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserQuotaArgs', 'UserQuota']

@pulumi.input_type
class UserQuotaArgs:
    def __init__(__self__, *,
                 file_system_id: pulumi.Input[str],
                 user_id: pulumi.Input[str],
                 user_type: pulumi.Input[str],
                 capacity_hard_limit: Optional[pulumi.Input[int]] = None,
                 file_hard_limit: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a UserQuota resource.
        :param pulumi.Input[str] file_system_id: File system ID.
        :param pulumi.Input[str] user_id: Info of UID/GID.
        :param pulumi.Input[str] user_type: Quota type. Valid value: `Uid`, `Gid`.
        :param pulumi.Input[int] capacity_hard_limit: Capacity Limit(GB).
        :param pulumi.Input[int] file_hard_limit: File limit.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_type", user_type)
        if capacity_hard_limit is not None:
            pulumi.set(__self__, "capacity_hard_limit", capacity_hard_limit)
        if file_hard_limit is not None:
            pulumi.set(__self__, "file_hard_limit", file_hard_limit)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Input[str]:
        """
        File system ID.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        Info of UID/GID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Input[str]:
        """
        Quota type. Valid value: `Uid`, `Gid`.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_type", value)

    @property
    @pulumi.getter(name="capacityHardLimit")
    def capacity_hard_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity Limit(GB).
        """
        return pulumi.get(self, "capacity_hard_limit")

    @capacity_hard_limit.setter
    def capacity_hard_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity_hard_limit", value)

    @property
    @pulumi.getter(name="fileHardLimit")
    def file_hard_limit(self) -> Optional[pulumi.Input[int]]:
        """
        File limit.
        """
        return pulumi.get(self, "file_hard_limit")

    @file_hard_limit.setter
    def file_hard_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_hard_limit", value)


@pulumi.input_type
class _UserQuotaState:
    def __init__(__self__, *,
                 capacity_hard_limit: Optional[pulumi.Input[int]] = None,
                 file_hard_limit: Optional[pulumi.Input[int]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserQuota resources.
        :param pulumi.Input[int] capacity_hard_limit: Capacity Limit(GB).
        :param pulumi.Input[int] file_hard_limit: File limit.
        :param pulumi.Input[str] file_system_id: File system ID.
        :param pulumi.Input[str] user_id: Info of UID/GID.
        :param pulumi.Input[str] user_type: Quota type. Valid value: `Uid`, `Gid`.
        """
        if capacity_hard_limit is not None:
            pulumi.set(__self__, "capacity_hard_limit", capacity_hard_limit)
        if file_hard_limit is not None:
            pulumi.set(__self__, "file_hard_limit", file_hard_limit)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="capacityHardLimit")
    def capacity_hard_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Capacity Limit(GB).
        """
        return pulumi.get(self, "capacity_hard_limit")

    @capacity_hard_limit.setter
    def capacity_hard_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "capacity_hard_limit", value)

    @property
    @pulumi.getter(name="fileHardLimit")
    def file_hard_limit(self) -> Optional[pulumi.Input[int]]:
        """
        File limit.
        """
        return pulumi.get(self, "file_hard_limit")

    @file_hard_limit.setter
    def file_hard_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_hard_limit", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        """
        File system ID.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        Info of UID/GID.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        Quota type. Valid value: `Uid`, `Gid`.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)


class UserQuota(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_hard_limit: Optional[pulumi.Input[int]] = None,
                 file_hard_limit: Optional[pulumi.Input[int]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cfs user_quota

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user_quota = tencentcloud.cfs.UserQuota("userQuota",
            capacity_hard_limit=10,
            file_hard_limit=10000,
            file_system_id="cfs-4636029bc",
            user_id="2159973417",
            user_type="Uid")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfs user_quota can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cfs/userQuota:UserQuota user_quota user_quota_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity_hard_limit: Capacity Limit(GB).
        :param pulumi.Input[int] file_hard_limit: File limit.
        :param pulumi.Input[str] file_system_id: File system ID.
        :param pulumi.Input[str] user_id: Info of UID/GID.
        :param pulumi.Input[str] user_type: Quota type. Valid value: `Uid`, `Gid`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserQuotaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfs user_quota

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user_quota = tencentcloud.cfs.UserQuota("userQuota",
            capacity_hard_limit=10,
            file_hard_limit=10000,
            file_system_id="cfs-4636029bc",
            user_id="2159973417",
            user_type="Uid")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfs user_quota can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cfs/userQuota:UserQuota user_quota user_quota_id
        ```

        :param str resource_name: The name of the resource.
        :param UserQuotaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserQuotaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_hard_limit: Optional[pulumi.Input[int]] = None,
                 file_hard_limit: Optional[pulumi.Input[int]] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserQuotaArgs.__new__(UserQuotaArgs)

            __props__.__dict__["capacity_hard_limit"] = capacity_hard_limit
            __props__.__dict__["file_hard_limit"] = file_hard_limit
            if file_system_id is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_id'")
            __props__.__dict__["file_system_id"] = file_system_id
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            if user_type is None and not opts.urn:
                raise TypeError("Missing required property 'user_type'")
            __props__.__dict__["user_type"] = user_type
        super(UserQuota, __self__).__init__(
            'tencentcloud:Cfs/userQuota:UserQuota',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            capacity_hard_limit: Optional[pulumi.Input[int]] = None,
            file_hard_limit: Optional[pulumi.Input[int]] = None,
            file_system_id: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            user_type: Optional[pulumi.Input[str]] = None) -> 'UserQuota':
        """
        Get an existing UserQuota resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] capacity_hard_limit: Capacity Limit(GB).
        :param pulumi.Input[int] file_hard_limit: File limit.
        :param pulumi.Input[str] file_system_id: File system ID.
        :param pulumi.Input[str] user_id: Info of UID/GID.
        :param pulumi.Input[str] user_type: Quota type. Valid value: `Uid`, `Gid`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserQuotaState.__new__(_UserQuotaState)

        __props__.__dict__["capacity_hard_limit"] = capacity_hard_limit
        __props__.__dict__["file_hard_limit"] = file_hard_limit
        __props__.__dict__["file_system_id"] = file_system_id
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_type"] = user_type
        return UserQuota(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="capacityHardLimit")
    def capacity_hard_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Capacity Limit(GB).
        """
        return pulumi.get(self, "capacity_hard_limit")

    @property
    @pulumi.getter(name="fileHardLimit")
    def file_hard_limit(self) -> pulumi.Output[Optional[int]]:
        """
        File limit.
        """
        return pulumi.get(self, "file_hard_limit")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Output[str]:
        """
        File system ID.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        Info of UID/GID.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[str]:
        """
        Quota type. Valid value: `Uid`, `Gid`.
        """
        return pulumi.get(self, "user_type")

