# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetFileSystemsResult',
    'AwaitableGetFileSystemsResult',
    'get_file_systems',
    'get_file_systems_output',
]

@pulumi.output_type
class GetFileSystemsResult:
    """
    A collection of values returned by getFileSystems.
    """
    def __init__(__self__, availability_zone=None, file_system_id=None, file_system_lists=None, id=None, name=None, result_output_file=None, subnet_id=None, vpc_id=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if file_system_id and not isinstance(file_system_id, str):
            raise TypeError("Expected argument 'file_system_id' to be a str")
        pulumi.set(__self__, "file_system_id", file_system_id)
        if file_system_lists and not isinstance(file_system_lists, list):
            raise TypeError("Expected argument 'file_system_lists' to be a list")
        pulumi.set(__self__, "file_system_lists", file_system_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The available zone that the file system locates at.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[str]:
        """
        ID of the file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemLists")
    def file_system_lists(self) -> Sequence['outputs.GetFileSystemsFileSystemListResult']:
        """
        An information list of cloud file system. Each element contains the following attributes:
        """
        return pulumi.get(self, "file_system_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the file system.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_id")


class AwaitableGetFileSystemsResult(GetFileSystemsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFileSystemsResult(
            availability_zone=self.availability_zone,
            file_system_id=self.file_system_id,
            file_system_lists=self.file_system_lists,
            id=self.id,
            name=self.name,
            result_output_file=self.result_output_file,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_file_systems(availability_zone: Optional[str] = None,
                     file_system_id: Optional[str] = None,
                     name: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     subnet_id: Optional[str] = None,
                     vpc_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFileSystemsResult:
    """
    Use this data source to query the detail information of cloud file systems(CFS).

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    file_systems = tencentcloud.Cfs.get_file_systems(availability_zone="ap-guangzhou-3",
        file_system_id="cfs-6hgquxmj",
        name="test")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the file system locates at.
    :param str file_system_id: A specified file system ID used to query.
    :param str name: A file system name used to query.
    :param str result_output_file: Used to save results.
    :param str subnet_id: ID of a vpc subnet.
    :param str vpc_id: ID of the vpc to be queried.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['fileSystemId'] = file_system_id
    __args__['name'] = name
    __args__['resultOutputFile'] = result_output_file
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cfs/getFileSystems:getFileSystems', __args__, opts=opts, typ=GetFileSystemsResult).value

    return AwaitableGetFileSystemsResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        file_system_id=pulumi.get(__ret__, 'file_system_id'),
        file_system_lists=pulumi.get(__ret__, 'file_system_lists'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_file_systems)
def get_file_systems_output(availability_zone: Optional[pulumi.Input[Optional[str]]] = None,
                            file_system_id: Optional[pulumi.Input[Optional[str]]] = None,
                            name: Optional[pulumi.Input[Optional[str]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                            vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFileSystemsResult]:
    """
    Use this data source to query the detail information of cloud file systems(CFS).

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    file_systems = tencentcloud.Cfs.get_file_systems(availability_zone="ap-guangzhou-3",
        file_system_id="cfs-6hgquxmj",
        name="test")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the file system locates at.
    :param str file_system_id: A specified file system ID used to query.
    :param str name: A file system name used to query.
    :param str result_output_file: Used to save results.
    :param str subnet_id: ID of a vpc subnet.
    :param str vpc_id: ID of the vpc to be queried.
    """
    ...
