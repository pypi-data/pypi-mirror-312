# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SignUpCfsServiceArgs', 'SignUpCfsService']

@pulumi.input_type
class SignUpCfsServiceArgs:
    def __init__(__self__):
        """
        The set of arguments for constructing a SignUpCfsService resource.
        """
        pass


@pulumi.input_type
class _SignUpCfsServiceState:
    def __init__(__self__, *,
                 cfs_service_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SignUpCfsService resources.
        :param pulumi.Input[str] cfs_service_status: Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
        """
        if cfs_service_status is not None:
            pulumi.set(__self__, "cfs_service_status", cfs_service_status)

    @property
    @pulumi.getter(name="cfsServiceStatus")
    def cfs_service_status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
        """
        return pulumi.get(self, "cfs_service_status")

    @cfs_service_status.setter
    def cfs_service_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cfs_service_status", value)


class SignUpCfsService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        Provides a resource to create a cfs sign_up_cfs_service

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        sign_up_cfs_service = tencentcloud.cfs.SignUpCfsService("signUpCfsService")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SignUpCfsServiceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfs sign_up_cfs_service

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        sign_up_cfs_service = tencentcloud.cfs.SignUpCfsService("signUpCfsService")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SignUpCfsServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SignUpCfsServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SignUpCfsServiceArgs.__new__(SignUpCfsServiceArgs)

            __props__.__dict__["cfs_service_status"] = None
        super(SignUpCfsService, __self__).__init__(
            'tencentcloud:Cfs/signUpCfsService:SignUpCfsService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cfs_service_status: Optional[pulumi.Input[str]] = None) -> 'SignUpCfsService':
        """
        Get an existing SignUpCfsService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cfs_service_status: Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SignUpCfsServiceState.__new__(_SignUpCfsServiceState)

        __props__.__dict__["cfs_service_status"] = cfs_service_status
        return SignUpCfsService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cfsServiceStatus")
    def cfs_service_status(self) -> pulumi.Output[str]:
        """
        Current status of the CFS service for this user. Valid values: creating (activating); created (activated).
        """
        return pulumi.get(self, "cfs_service_status")

