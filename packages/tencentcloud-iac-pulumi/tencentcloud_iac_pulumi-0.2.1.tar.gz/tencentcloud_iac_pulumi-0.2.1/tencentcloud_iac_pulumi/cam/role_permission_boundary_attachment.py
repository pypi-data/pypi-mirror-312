# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RolePermissionBoundaryAttachmentArgs', 'RolePermissionBoundaryAttachment']

@pulumi.input_type
class RolePermissionBoundaryAttachmentArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[int],
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RolePermissionBoundaryAttachment resource.
        :param pulumi.Input[int] policy_id: Role ID.
        :param pulumi.Input[str] role_id: Role ID (at least one should be filled in with the role name).
        :param pulumi.Input[str] role_name: Role name (at least one should be filled in with the role ID).
        """
        pulumi.set(__self__, "policy_id", policy_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[int]:
        """
        Role ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Role ID (at least one should be filled in with the role name).
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role name (at least one should be filled in with the role ID).
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


@pulumi.input_type
class _RolePermissionBoundaryAttachmentState:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RolePermissionBoundaryAttachment resources.
        :param pulumi.Input[int] policy_id: Role ID.
        :param pulumi.Input[str] role_id: Role ID (at least one should be filled in with the role name).
        :param pulumi.Input[str] role_name: Role name (at least one should be filled in with the role ID).
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Role ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Role ID (at least one should be filled in with the role name).
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role name (at least one should be filled in with the role ID).
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


class RolePermissionBoundaryAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cam role_permission_boundary_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        role_permission_boundary_attachment = tencentcloud.cam.RolePermissionBoundaryAttachment("rolePermissionBoundaryAttachment",
            policy_id=1,
            role_name="test-cam-tag")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam role_permission_boundary_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/rolePermissionBoundaryAttachment:RolePermissionBoundaryAttachment role_permission_boundary_attachment role_permission_boundary_attachment_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] policy_id: Role ID.
        :param pulumi.Input[str] role_id: Role ID (at least one should be filled in with the role name).
        :param pulumi.Input[str] role_name: Role name (at least one should be filled in with the role ID).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RolePermissionBoundaryAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cam role_permission_boundary_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        role_permission_boundary_attachment = tencentcloud.cam.RolePermissionBoundaryAttachment("rolePermissionBoundaryAttachment",
            policy_id=1,
            role_name="test-cam-tag")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam role_permission_boundary_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/rolePermissionBoundaryAttachment:RolePermissionBoundaryAttachment role_permission_boundary_attachment role_permission_boundary_attachment_id
        ```

        :param str resource_name: The name of the resource.
        :param RolePermissionBoundaryAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RolePermissionBoundaryAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RolePermissionBoundaryAttachmentArgs.__new__(RolePermissionBoundaryAttachmentArgs)

            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["role_name"] = role_name
        super(RolePermissionBoundaryAttachment, __self__).__init__(
            'tencentcloud:Cam/rolePermissionBoundaryAttachment:RolePermissionBoundaryAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policy_id: Optional[pulumi.Input[int]] = None,
            role_id: Optional[pulumi.Input[str]] = None,
            role_name: Optional[pulumi.Input[str]] = None) -> 'RolePermissionBoundaryAttachment':
        """
        Get an existing RolePermissionBoundaryAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] policy_id: Role ID.
        :param pulumi.Input[str] role_id: Role ID (at least one should be filled in with the role name).
        :param pulumi.Input[str] role_name: Role name (at least one should be filled in with the role ID).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RolePermissionBoundaryAttachmentState.__new__(_RolePermissionBoundaryAttachmentState)

        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["role_name"] = role_name
        return RolePermissionBoundaryAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[int]:
        """
        Role ID.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        Role ID (at least one should be filled in with the role name).
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[Optional[str]]:
        """
        Role name (at least one should be filled in with the role ID).
        """
        return pulumi.get(self, "role_name")

