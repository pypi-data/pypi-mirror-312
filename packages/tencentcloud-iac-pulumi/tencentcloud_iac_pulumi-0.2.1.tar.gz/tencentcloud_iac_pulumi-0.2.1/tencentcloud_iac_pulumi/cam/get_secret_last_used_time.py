# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecretLastUsedTimeResult',
    'AwaitableGetSecretLastUsedTimeResult',
    'get_secret_last_used_time',
    'get_secret_last_used_time_output',
]

@pulumi.output_type
class GetSecretLastUsedTimeResult:
    """
    A collection of values returned by getSecretLastUsedTime.
    """
    def __init__(__self__, id=None, result_output_file=None, secret_id_last_used_rows=None, secret_id_lists=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if secret_id_last_used_rows and not isinstance(secret_id_last_used_rows, list):
            raise TypeError("Expected argument 'secret_id_last_used_rows' to be a list")
        pulumi.set(__self__, "secret_id_last_used_rows", secret_id_last_used_rows)
        if secret_id_lists and not isinstance(secret_id_lists, list):
            raise TypeError("Expected argument 'secret_id_lists' to be a list")
        pulumi.set(__self__, "secret_id_lists", secret_id_lists)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="secretIdLastUsedRows")
    def secret_id_last_used_rows(self) -> Sequence['outputs.GetSecretLastUsedTimeSecretIdLastUsedRowResult']:
        """
        Last used time list.
        """
        return pulumi.get(self, "secret_id_last_used_rows")

    @property
    @pulumi.getter(name="secretIdLists")
    def secret_id_lists(self) -> Sequence[str]:
        return pulumi.get(self, "secret_id_lists")


class AwaitableGetSecretLastUsedTimeResult(GetSecretLastUsedTimeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretLastUsedTimeResult(
            id=self.id,
            result_output_file=self.result_output_file,
            secret_id_last_used_rows=self.secret_id_last_used_rows,
            secret_id_lists=self.secret_id_lists)


def get_secret_last_used_time(result_output_file: Optional[str] = None,
                              secret_id_lists: Optional[Sequence[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretLastUsedTimeResult:
    """
    Use this data source to query detailed information of cam secret_last_used_time

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    secret_last_used_time = tencentcloud.Cam.get_secret_last_used_time(secret_id_lists=["xxxx"])
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    :param Sequence[str] secret_id_lists: Query the key ID list. Supports up to 10.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['secretIdLists'] = secret_id_lists
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cam/getSecretLastUsedTime:getSecretLastUsedTime', __args__, opts=opts, typ=GetSecretLastUsedTimeResult).value

    return AwaitableGetSecretLastUsedTimeResult(
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        secret_id_last_used_rows=pulumi.get(__ret__, 'secret_id_last_used_rows'),
        secret_id_lists=pulumi.get(__ret__, 'secret_id_lists'))


@_utilities.lift_output_func(get_secret_last_used_time)
def get_secret_last_used_time_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                     secret_id_lists: Optional[pulumi.Input[Sequence[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecretLastUsedTimeResult]:
    """
    Use this data source to query detailed information of cam secret_last_used_time

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    secret_last_used_time = tencentcloud.Cam.get_secret_last_used_time(secret_id_lists=["xxxx"])
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    :param Sequence[str] secret_id_lists: Query the key ID list. Supports up to 10.
    """
    ...
