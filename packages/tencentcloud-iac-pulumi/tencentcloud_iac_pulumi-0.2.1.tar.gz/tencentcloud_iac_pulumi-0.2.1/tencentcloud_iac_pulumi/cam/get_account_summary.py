# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetAccountSummaryResult',
    'AwaitableGetAccountSummaryResult',
    'get_account_summary',
    'get_account_summary_output',
]

@pulumi.output_type
class GetAccountSummaryResult:
    """
    A collection of values returned by getAccountSummary.
    """
    def __init__(__self__, group=None, id=None, identity_providers=None, member=None, policies=None, result_output_file=None, roles=None, user=None):
        if group and not isinstance(group, int):
            raise TypeError("Expected argument 'group' to be a int")
        pulumi.set(__self__, "group", group)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_providers and not isinstance(identity_providers, int):
            raise TypeError("Expected argument 'identity_providers' to be a int")
        pulumi.set(__self__, "identity_providers", identity_providers)
        if member and not isinstance(member, int):
            raise TypeError("Expected argument 'member' to be a int")
        pulumi.set(__self__, "member", member)
        if policies and not isinstance(policies, int):
            raise TypeError("Expected argument 'policies' to be a int")
        pulumi.set(__self__, "policies", policies)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if roles and not isinstance(roles, int):
            raise TypeError("Expected argument 'roles' to be a int")
        pulumi.set(__self__, "roles", roles)
        if user and not isinstance(user, int):
            raise TypeError("Expected argument 'user' to be a int")
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def group(self) -> int:
        """
        The number of Group.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProviders")
    def identity_providers(self) -> int:
        """
        The number of identity provider.
        """
        return pulumi.get(self, "identity_providers")

    @property
    @pulumi.getter
    def member(self) -> int:
        """
        The number of grouped users.
        """
        return pulumi.get(self, "member")

    @property
    @pulumi.getter
    def policies(self) -> int:
        """
        The number of policy.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def roles(self) -> int:
        """
        The number of role.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def user(self) -> int:
        """
        The number of Sub-user.
        """
        return pulumi.get(self, "user")


class AwaitableGetAccountSummaryResult(GetAccountSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountSummaryResult(
            group=self.group,
            id=self.id,
            identity_providers=self.identity_providers,
            member=self.member,
            policies=self.policies,
            result_output_file=self.result_output_file,
            roles=self.roles,
            user=self.user)


def get_account_summary(result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountSummaryResult:
    """
    Use this data source to query detailed information of cam account_summary

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    account_summary = tencentcloud.Cam.get_account_summary()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cam/getAccountSummary:getAccountSummary', __args__, opts=opts, typ=GetAccountSummaryResult).value

    return AwaitableGetAccountSummaryResult(
        group=pulumi.get(__ret__, 'group'),
        id=pulumi.get(__ret__, 'id'),
        identity_providers=pulumi.get(__ret__, 'identity_providers'),
        member=pulumi.get(__ret__, 'member'),
        policies=pulumi.get(__ret__, 'policies'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        roles=pulumi.get(__ret__, 'roles'),
        user=pulumi.get(__ret__, 'user'))


@_utilities.lift_output_func(get_account_summary)
def get_account_summary_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountSummaryResult]:
    """
    Use this data source to query detailed information of cam account_summary

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    account_summary = tencentcloud.Cam.get_account_summary()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    ...
