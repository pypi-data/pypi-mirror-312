# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetListAttachedUserPolicyResult',
    'AwaitableGetListAttachedUserPolicyResult',
    'get_list_attached_user_policy',
    'get_list_attached_user_policy_output',
]

@pulumi.output_type
class GetListAttachedUserPolicyResult:
    """
    A collection of values returned by getListAttachedUserPolicy.
    """
    def __init__(__self__, attach_type=None, id=None, keyword=None, policy_lists=None, result_output_file=None, strategy_type=None, target_uin=None):
        if attach_type and not isinstance(attach_type, int):
            raise TypeError("Expected argument 'attach_type' to be a int")
        pulumi.set(__self__, "attach_type", attach_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keyword and not isinstance(keyword, str):
            raise TypeError("Expected argument 'keyword' to be a str")
        pulumi.set(__self__, "keyword", keyword)
        if policy_lists and not isinstance(policy_lists, list):
            raise TypeError("Expected argument 'policy_lists' to be a list")
        pulumi.set(__self__, "policy_lists", policy_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if strategy_type and not isinstance(strategy_type, int):
            raise TypeError("Expected argument 'strategy_type' to be a int")
        pulumi.set(__self__, "strategy_type", strategy_type)
        if target_uin and not isinstance(target_uin, int):
            raise TypeError("Expected argument 'target_uin' to be a int")
        pulumi.set(__self__, "target_uin", target_uin)

    @property
    @pulumi.getter(name="attachType")
    def attach_type(self) -> int:
        return pulumi.get(self, "attach_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def keyword(self) -> Optional[str]:
        return pulumi.get(self, "keyword")

    @property
    @pulumi.getter(name="policyLists")
    def policy_lists(self) -> Sequence['outputs.GetListAttachedUserPolicyPolicyListResult']:
        return pulumi.get(self, "policy_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[int]:
        return pulumi.get(self, "strategy_type")

    @property
    @pulumi.getter(name="targetUin")
    def target_uin(self) -> int:
        return pulumi.get(self, "target_uin")


class AwaitableGetListAttachedUserPolicyResult(GetListAttachedUserPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListAttachedUserPolicyResult(
            attach_type=self.attach_type,
            id=self.id,
            keyword=self.keyword,
            policy_lists=self.policy_lists,
            result_output_file=self.result_output_file,
            strategy_type=self.strategy_type,
            target_uin=self.target_uin)


def get_list_attached_user_policy(attach_type: Optional[int] = None,
                                  keyword: Optional[str] = None,
                                  result_output_file: Optional[str] = None,
                                  strategy_type: Optional[int] = None,
                                  target_uin: Optional[int] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListAttachedUserPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['attachType'] = attach_type
    __args__['keyword'] = keyword
    __args__['resultOutputFile'] = result_output_file
    __args__['strategyType'] = strategy_type
    __args__['targetUin'] = target_uin
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cam/getListAttachedUserPolicy:getListAttachedUserPolicy', __args__, opts=opts, typ=GetListAttachedUserPolicyResult).value

    return AwaitableGetListAttachedUserPolicyResult(
        attach_type=pulumi.get(__ret__, 'attach_type'),
        id=pulumi.get(__ret__, 'id'),
        keyword=pulumi.get(__ret__, 'keyword'),
        policy_lists=pulumi.get(__ret__, 'policy_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        strategy_type=pulumi.get(__ret__, 'strategy_type'),
        target_uin=pulumi.get(__ret__, 'target_uin'))


@_utilities.lift_output_func(get_list_attached_user_policy)
def get_list_attached_user_policy_output(attach_type: Optional[pulumi.Input[int]] = None,
                                         keyword: Optional[pulumi.Input[Optional[str]]] = None,
                                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                         strategy_type: Optional[pulumi.Input[Optional[int]]] = None,
                                         target_uin: Optional[pulumi.Input[int]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetListAttachedUserPolicyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
