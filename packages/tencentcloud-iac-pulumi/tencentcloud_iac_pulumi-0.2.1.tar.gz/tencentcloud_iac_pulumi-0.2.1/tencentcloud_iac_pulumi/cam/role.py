# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RoleArgs', 'Role']

@pulumi.input_type
class RoleArgs:
    def __init__(__self__, *,
                 document: pulumi.Input[str],
                 console_login: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Role resource.
        :param pulumi.Input[str] document: Document of the CAM role. The syntax refers to CAM POLICY Name of CAM role.
        :param pulumi.Input[bool] console_login: Indicates whether the CAM role can login or not.
        :param pulumi.Input[str] description: Description of the CAM role.
        :param pulumi.Input[str] name: Name of CAM role.
        :param pulumi.Input[int] session_duration: The maximum validity period of the temporary key for creating a role.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        """
        pulumi.set(__self__, "document", document)
        if console_login is not None:
            pulumi.set(__self__, "console_login", console_login)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def document(self) -> pulumi.Input[str]:
        """
        Document of the CAM role. The syntax refers to CAM POLICY Name of CAM role.
        """
        return pulumi.get(self, "document")

    @document.setter
    def document(self, value: pulumi.Input[str]):
        pulumi.set(self, "document", value)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the CAM role can login or not.
        """
        return pulumi.get(self, "console_login")

    @console_login.setter
    def console_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "console_login", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the CAM role.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of CAM role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum validity period of the temporary key for creating a role.
        """
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _RoleState:
    def __init__(__self__, *,
                 console_login: Optional[pulumi.Input[bool]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 document: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Role resources.
        :param pulumi.Input[bool] console_login: Indicates whether the CAM role can login or not.
        :param pulumi.Input[str] create_time: Create time of the CAM role.
        :param pulumi.Input[str] description: Description of the CAM role.
        :param pulumi.Input[str] document: Document of the CAM role. The syntax refers to CAM POLICY Name of CAM role.
        :param pulumi.Input[str] name: Name of CAM role.
        :param pulumi.Input[int] session_duration: The maximum validity period of the temporary key for creating a role.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] update_time: The last update time of the CAM role.
        """
        if console_login is not None:
            pulumi.set(__self__, "console_login", console_login)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if document is not None:
            pulumi.set(__self__, "document", document)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session_duration is not None:
            pulumi.set(__self__, "session_duration", session_duration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the CAM role can login or not.
        """
        return pulumi.get(self, "console_login")

    @console_login.setter
    def console_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "console_login", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the CAM role.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the CAM role.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def document(self) -> Optional[pulumi.Input[str]]:
        """
        Document of the CAM role. The syntax refers to CAM POLICY Name of CAM role.
        """
        return pulumi.get(self, "document")

    @document.setter
    def document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of CAM role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum validity period of the temporary key for creating a role.
        """
        return pulumi.get(self, "session_duration")

    @session_duration.setter
    def session_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_duration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the CAM role.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class Role(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 console_login: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 document: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provides a resource to create a CAM role.

        ## Example Usage

        ### Create normally

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        my_uin = info.owner_uin
        pulumi.export("uin", my_uin)
        foo = tencentcloud.cam.Role("foo",
            document=json.dumps({
                "statement": [{
                    "action": "name/sts:AssumeRole",
                    "effect": "allow",
                    "principal": {
                        "qcs": [f"qcs::cam::uin/{my_uin}:root"],
                    },
                }],
                "version": "2.0",
            }),
            console_login=True,
            description="test",
            session_duration=7200,
            tags={
                "test": "tf-cam-role",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create with SAML provider

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        saml_provider = config.get("saml-provider")
        if saml_provider is None:
            saml_provider = "example"
        info = tencentcloud.User.get_info()
        uin = info.uin
        saml_provider = saml_provider
        boo = tencentcloud.cam.Role("boo",
            document=f\"\"\"{{
          "version": "2.0",
          "statement": [
            {{
              "action": [
                "name/sts:AssumeRole"
              ],
              "effect": "allow",
              "principal": {{
                "qcs": [
                  "qcs::cam::uin/{uin}:saml-provider/{saml_provider}"
                ]
              }}
            }}
          ]
        }}
        \"\"\",
            description="tf_test",
            console_login=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CAM role can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/role:Role foo 4611686018427733635
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] console_login: Indicates whether the CAM role can login or not.
        :param pulumi.Input[str] description: Description of the CAM role.
        :param pulumi.Input[str] document: Document of the CAM role. The syntax refers to CAM POLICY Name of CAM role.
        :param pulumi.Input[str] name: Name of CAM role.
        :param pulumi.Input[int] session_duration: The maximum validity period of the temporary key for creating a role.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CAM role.

        ## Example Usage

        ### Create normally

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        my_uin = info.owner_uin
        pulumi.export("uin", my_uin)
        foo = tencentcloud.cam.Role("foo",
            document=json.dumps({
                "statement": [{
                    "action": "name/sts:AssumeRole",
                    "effect": "allow",
                    "principal": {
                        "qcs": [f"qcs::cam::uin/{my_uin}:root"],
                    },
                }],
                "version": "2.0",
            }),
            console_login=True,
            description="test",
            session_duration=7200,
            tags={
                "test": "tf-cam-role",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create with SAML provider

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        saml_provider = config.get("saml-provider")
        if saml_provider is None:
            saml_provider = "example"
        info = tencentcloud.User.get_info()
        uin = info.uin
        saml_provider = saml_provider
        boo = tencentcloud.cam.Role("boo",
            document=f\"\"\"{{
          "version": "2.0",
          "statement": [
            {{
              "action": [
                "name/sts:AssumeRole"
              ],
              "effect": "allow",
              "principal": {{
                "qcs": [
                  "qcs::cam::uin/{uin}:saml-provider/{saml_provider}"
                ]
              }}
            }}
          ]
        }}
        \"\"\",
            description="tf_test",
            console_login=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CAM role can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/role:Role foo 4611686018427733635
        ```

        :param str resource_name: The name of the resource.
        :param RoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 console_login: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 document: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 session_duration: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleArgs.__new__(RoleArgs)

            __props__.__dict__["console_login"] = console_login
            __props__.__dict__["description"] = description
            if document is None and not opts.urn:
                raise TypeError("Missing required property 'document'")
            __props__.__dict__["document"] = document
            __props__.__dict__["name"] = name
            __props__.__dict__["session_duration"] = session_duration
            __props__.__dict__["tags"] = tags
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(Role, __self__).__init__(
            'tencentcloud:Cam/role:Role',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            console_login: Optional[pulumi.Input[bool]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            document: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            session_duration: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'Role':
        """
        Get an existing Role resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] console_login: Indicates whether the CAM role can login or not.
        :param pulumi.Input[str] create_time: Create time of the CAM role.
        :param pulumi.Input[str] description: Description of the CAM role.
        :param pulumi.Input[str] document: Document of the CAM role. The syntax refers to CAM POLICY Name of CAM role.
        :param pulumi.Input[str] name: Name of CAM role.
        :param pulumi.Input[int] session_duration: The maximum validity period of the temporary key for creating a role.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] update_time: The last update time of the CAM role.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoleState.__new__(_RoleState)

        __props__.__dict__["console_login"] = console_login
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["document"] = document
        __props__.__dict__["name"] = name
        __props__.__dict__["session_duration"] = session_duration
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_time"] = update_time
        return Role(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the CAM role can login or not.
        """
        return pulumi.get(self, "console_login")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the CAM role.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the CAM role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def document(self) -> pulumi.Output[str]:
        """
        Document of the CAM role. The syntax refers to CAM POLICY Name of CAM role.
        """
        return pulumi.get(self, "document")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of CAM role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sessionDuration")
    def session_duration(self) -> pulumi.Output[int]:
        """
        The maximum validity period of the temporary key for creating a role.
        """
        return pulumi.get(self, "session_duration")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The last update time of the CAM role.
        """
        return pulumi.get(self, "update_time")

