# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PolicyVersionArgs', 'PolicyVersion']

@pulumi.input_type
class PolicyVersionArgs:
    def __init__(__self__, *,
                 policy_document: pulumi.Input[str],
                 policy_id: pulumi.Input[int],
                 set_as_default: pulumi.Input[bool],
                 policy_versions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]]] = None):
        """
        The set of arguments for constructing a PolicyVersion resource.
        :param pulumi.Input[str] policy_document: Strategic text information.
        :param pulumi.Input[int] policy_id: Strategy ID.
        :param pulumi.Input[bool] set_as_default: Whether to set as a version of the current strategy.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]] policy_versions: Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        pulumi.set(__self__, "policy_document", policy_document)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "set_as_default", set_as_default)
        if policy_versions is not None:
            pulumi.set(__self__, "policy_versions", policy_versions)

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> pulumi.Input[str]:
        """
        Strategic text information.
        """
        return pulumi.get(self, "policy_document")

    @policy_document.setter
    def policy_document(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_document", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[int]:
        """
        Strategy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="setAsDefault")
    def set_as_default(self) -> pulumi.Input[bool]:
        """
        Whether to set as a version of the current strategy.
        """
        return pulumi.get(self, "set_as_default")

    @set_as_default.setter
    def set_as_default(self, value: pulumi.Input[bool]):
        pulumi.set(self, "set_as_default", value)

    @property
    @pulumi.getter(name="policyVersions")
    def policy_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]]]:
        """
        Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "policy_versions")

    @policy_versions.setter
    def policy_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]]]):
        pulumi.set(self, "policy_versions", value)


@pulumi.input_type
class _PolicyVersionState:
    def __init__(__self__, *,
                 policy_document: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 policy_versions: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]]] = None,
                 set_as_default: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering PolicyVersion resources.
        :param pulumi.Input[str] policy_document: Strategic text information.
        :param pulumi.Input[int] policy_id: Strategy ID.
        :param pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]] policy_versions: Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] set_as_default: Whether to set as a version of the current strategy.
        """
        if policy_document is not None:
            pulumi.set(__self__, "policy_document", policy_document)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_versions is not None:
            pulumi.set(__self__, "policy_versions", policy_versions)
        if set_as_default is not None:
            pulumi.set(__self__, "set_as_default", set_as_default)

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> Optional[pulumi.Input[str]]:
        """
        Strategic text information.
        """
        return pulumi.get(self, "policy_document")

    @policy_document.setter
    def policy_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_document", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Strategy ID.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyVersions")
    def policy_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]]]:
        """
        Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "policy_versions")

    @policy_versions.setter
    def policy_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyVersionPolicyVersionArgs']]]]):
        pulumi.set(self, "policy_versions", value)

    @property
    @pulumi.getter(name="setAsDefault")
    def set_as_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to set as a version of the current strategy.
        """
        return pulumi.get(self, "set_as_default")

    @set_as_default.setter
    def set_as_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_as_default", value)


class PolicyVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_document: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 policy_versions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVersionPolicyVersionArgs']]]]] = None,
                 set_as_default: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a cam policy_version

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        policy_version = tencentcloud.cam.PolicyVersion("policyVersion",
            policy_id=171173780,
            policy_document=json.dumps({
                "version": "2.0",
                "statement": [
                    {
                        "effect": "allow",
                        "action": ["sts:AssumeRole"],
                        "resource": ["*"],
                    },
                    {
                        "effect": "allow",
                        "action": ["cos:PutObject"],
                        "resource": ["*"],
                    },
                    {
                        "effect": "deny",
                        "action": ["aa:*"],
                        "resource": ["*"],
                    },
                    {
                        "effect": "deny",
                        "action": ["aa:*"],
                        "resource": ["*"],
                    },
                ],
            }),
            set_as_default=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam policy_version can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/policyVersion:PolicyVersion policy_version policy_version_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] policy_document: Strategic text information.
        :param pulumi.Input[int] policy_id: Strategy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVersionPolicyVersionArgs']]]] policy_versions: Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] set_as_default: Whether to set as a version of the current strategy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cam policy_version

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        policy_version = tencentcloud.cam.PolicyVersion("policyVersion",
            policy_id=171173780,
            policy_document=json.dumps({
                "version": "2.0",
                "statement": [
                    {
                        "effect": "allow",
                        "action": ["sts:AssumeRole"],
                        "resource": ["*"],
                    },
                    {
                        "effect": "allow",
                        "action": ["cos:PutObject"],
                        "resource": ["*"],
                    },
                    {
                        "effect": "deny",
                        "action": ["aa:*"],
                        "resource": ["*"],
                    },
                    {
                        "effect": "deny",
                        "action": ["aa:*"],
                        "resource": ["*"],
                    },
                ],
            }),
            set_as_default=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam policy_version can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/policyVersion:PolicyVersion policy_version policy_version_id
        ```

        :param str resource_name: The name of the resource.
        :param PolicyVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_document: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 policy_versions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVersionPolicyVersionArgs']]]]] = None,
                 set_as_default: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyVersionArgs.__new__(PolicyVersionArgs)

            if policy_document is None and not opts.urn:
                raise TypeError("Missing required property 'policy_document'")
            __props__.__dict__["policy_document"] = policy_document
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["policy_versions"] = policy_versions
            if set_as_default is None and not opts.urn:
                raise TypeError("Missing required property 'set_as_default'")
            __props__.__dict__["set_as_default"] = set_as_default
        super(PolicyVersion, __self__).__init__(
            'tencentcloud:Cam/policyVersion:PolicyVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policy_document: Optional[pulumi.Input[str]] = None,
            policy_id: Optional[pulumi.Input[int]] = None,
            policy_versions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVersionPolicyVersionArgs']]]]] = None,
            set_as_default: Optional[pulumi.Input[bool]] = None) -> 'PolicyVersion':
        """
        Get an existing PolicyVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] policy_document: Strategic text information.
        :param pulumi.Input[int] policy_id: Strategy ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PolicyVersionPolicyVersionArgs']]]] policy_versions: Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
        :param pulumi.Input[bool] set_as_default: Whether to set as a version of the current strategy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PolicyVersionState.__new__(_PolicyVersionState)

        __props__.__dict__["policy_document"] = policy_document
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["policy_versions"] = policy_versions
        __props__.__dict__["set_as_default"] = set_as_default
        return PolicyVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> pulumi.Output[str]:
        """
        Strategic text information.
        """
        return pulumi.get(self, "policy_document")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[int]:
        """
        Strategy ID.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyVersions")
    def policy_versions(self) -> pulumi.Output[Sequence['outputs.PolicyVersionPolicyVersion']]:
        """
        Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
        """
        return pulumi.get(self, "policy_versions")

    @property
    @pulumi.getter(name="setAsDefault")
    def set_as_default(self) -> pulumi.Output[bool]:
        """
        Whether to set as a version of the current strategy.
        """
        return pulumi.get(self, "set_as_default")

