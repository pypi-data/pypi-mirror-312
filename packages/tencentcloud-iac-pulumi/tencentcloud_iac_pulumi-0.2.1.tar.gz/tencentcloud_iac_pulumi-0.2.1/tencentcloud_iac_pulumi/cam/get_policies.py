# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPoliciesResult',
    'AwaitableGetPoliciesResult',
    'get_policies',
    'get_policies_output',
]

@pulumi.output_type
class GetPoliciesResult:
    """
    A collection of values returned by getPolicies.
    """
    def __init__(__self__, create_mode=None, description=None, id=None, name=None, policy_id=None, policy_lists=None, result_output_file=None, type=None):
        if create_mode and not isinstance(create_mode, int):
            raise TypeError("Expected argument 'create_mode' to be a int")
        pulumi.set(__self__, "create_mode", create_mode)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if policy_lists and not isinstance(policy_lists, list):
            raise TypeError("Expected argument 'policy_lists' to be a list")
        pulumi.set(__self__, "policy_lists", policy_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if type and not isinstance(type, int):
            raise TypeError("Expected argument 'type' to be a int")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createMode")
    def create_mode(self) -> Optional[int]:
        """
        Mode of creation of policy strategy. `1` means policy was created with console, and `2` means it was created by strategies.
        """
        return pulumi.get(self, "create_mode")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of CAM policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of CAM policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        ID of the policy strategy.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyLists")
    def policy_lists(self) -> Sequence['outputs.GetPoliciesPolicyListResult']:
        """
        A list of CAM policies. Each element contains the following attributes:
        """
        return pulumi.get(self, "policy_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        """
        Type of the policy strategy. `1` means customer strategy and `2` means preset strategy.
        """
        return pulumi.get(self, "type")


class AwaitableGetPoliciesResult(GetPoliciesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoliciesResult(
            create_mode=self.create_mode,
            description=self.description,
            id=self.id,
            name=self.name,
            policy_id=self.policy_id,
            policy_lists=self.policy_lists,
            result_output_file=self.result_output_file,
            type=self.type)


def get_policies(create_mode: Optional[int] = None,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 policy_id: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 type: Optional[int] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPoliciesResult:
    """
    Use this data source to query detailed information of CAM policies

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Cam.get_policies(policy_id=tencentcloud_cam_policy["foo"]["id"])
    bar = tencentcloud.Cam.get_policies(policy_id=tencentcloud_cam_policy["foo"]["id"],
        name="tf-auto-test")
    ```
    <!--End PulumiCodeChooser -->


    :param int create_mode: Mode of creation of policy strategy. Valid values: `1`, `2`. `1` means policy was created with console, and `2` means it was created by strategies.
    :param str description: The description of the CAM policy.
    :param str name: Name of the CAM policy to be queried.
    :param str policy_id: ID of CAM policy to be queried.
    :param str result_output_file: Used to save results.
    :param int type: Type of the policy strategy. Valid values: `1`, `2`. `1` means customer strategy and `2` means preset strategy.
    """
    __args__ = dict()
    __args__['createMode'] = create_mode
    __args__['description'] = description
    __args__['name'] = name
    __args__['policyId'] = policy_id
    __args__['resultOutputFile'] = result_output_file
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cam/getPolicies:getPolicies', __args__, opts=opts, typ=GetPoliciesResult).value

    return AwaitableGetPoliciesResult(
        create_mode=pulumi.get(__ret__, 'create_mode'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        policy_lists=pulumi.get(__ret__, 'policy_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_policies)
def get_policies_output(create_mode: Optional[pulumi.Input[Optional[int]]] = None,
                        description: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        policy_id: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        type: Optional[pulumi.Input[Optional[int]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPoliciesResult]:
    """
    Use this data source to query detailed information of CAM policies

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Cam.get_policies(policy_id=tencentcloud_cam_policy["foo"]["id"])
    bar = tencentcloud.Cam.get_policies(policy_id=tencentcloud_cam_policy["foo"]["id"],
        name="tf-auto-test")
    ```
    <!--End PulumiCodeChooser -->


    :param int create_mode: Mode of creation of policy strategy. Valid values: `1`, `2`. `1` means policy was created with console, and `2` means it was created by strategies.
    :param str description: The description of the CAM policy.
    :param str name: Name of the CAM policy to be queried.
    :param str policy_id: ID of CAM policy to be queried.
    :param str result_output_file: Used to save results.
    :param int type: Type of the policy strategy. Valid values: `1`, `2`. `1` means customer strategy and `2` means preset strategy.
    """
    ...
