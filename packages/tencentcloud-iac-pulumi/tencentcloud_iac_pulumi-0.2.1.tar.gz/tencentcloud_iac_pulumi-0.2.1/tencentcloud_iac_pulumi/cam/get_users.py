# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetUsersResult',
    'AwaitableGetUsersResult',
    'get_users',
    'get_users_output',
]

@pulumi.output_type
class GetUsersResult:
    """
    A collection of values returned by getUsers.
    """
    def __init__(__self__, console_login=None, country_code=None, email=None, id=None, name=None, phone_num=None, remark=None, result_output_file=None, uid=None, uin=None, user_lists=None):
        if console_login and not isinstance(console_login, bool):
            raise TypeError("Expected argument 'console_login' to be a bool")
        pulumi.set(__self__, "console_login", console_login)
        if country_code and not isinstance(country_code, str):
            raise TypeError("Expected argument 'country_code' to be a str")
        pulumi.set(__self__, "country_code", country_code)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if phone_num and not isinstance(phone_num, str):
            raise TypeError("Expected argument 'phone_num' to be a str")
        pulumi.set(__self__, "phone_num", phone_num)
        if remark and not isinstance(remark, str):
            raise TypeError("Expected argument 'remark' to be a str")
        pulumi.set(__self__, "remark", remark)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if uid and not isinstance(uid, int):
            raise TypeError("Expected argument 'uid' to be a int")
        pulumi.set(__self__, "uid", uid)
        if uin and not isinstance(uin, int):
            raise TypeError("Expected argument 'uin' to be a int")
        pulumi.set(__self__, "uin", uin)
        if user_lists and not isinstance(user_lists, list):
            raise TypeError("Expected argument 'user_lists' to be a list")
        pulumi.set(__self__, "user_lists", user_lists)

    @property
    @pulumi.getter(name="consoleLogin")
    def console_login(self) -> Optional[bool]:
        return pulumi.get(self, "console_login")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        """
        Country code of the CAM user.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email of the CAM user.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of CAM user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="phoneNum")
    def phone_num(self) -> Optional[str]:
        """
        Phone num of the CAM user.
        """
        return pulumi.get(self, "phone_num")

    @property
    @pulumi.getter
    def remark(self) -> Optional[str]:
        """
        Remark of the CAM user.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def uid(self) -> Optional[int]:
        """
        Uid of the CAM user.
        """
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def uin(self) -> Optional[int]:
        """
        Uin of the CAM user.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="userLists")
    def user_lists(self) -> Sequence['outputs.GetUsersUserListResult']:
        """
        A list of CAM users. Each element contains the following attributes:
        """
        return pulumi.get(self, "user_lists")


class AwaitableGetUsersResult(GetUsersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsersResult(
            console_login=self.console_login,
            country_code=self.country_code,
            email=self.email,
            id=self.id,
            name=self.name,
            phone_num=self.phone_num,
            remark=self.remark,
            result_output_file=self.result_output_file,
            uid=self.uid,
            uin=self.uin,
            user_lists=self.user_lists)


def get_users(console_login: Optional[bool] = None,
              country_code: Optional[str] = None,
              email: Optional[str] = None,
              name: Optional[str] = None,
              phone_num: Optional[str] = None,
              remark: Optional[str] = None,
              result_output_file: Optional[str] = None,
              uid: Optional[int] = None,
              uin: Optional[int] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsersResult:
    """
    Use this data source to query detailed information of CAM users

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Cam.get_users(name="cam-user-test")
    bar = tencentcloud.Cam.get_users(email="hello@test.com")
    far = tencentcloud.Cam.get_users(phone_num="12345678910")
    ```
    <!--End PulumiCodeChooser -->


    :param bool console_login: Indicate whether the user can login in.
    :param str country_code: Country code of the CAM user to be queried.
    :param str email: Email of the CAM user to be queried.
    :param str name: Name of CAM user to be queried.
    :param str phone_num: Phone num of the CAM user to be queried.
    :param str remark: Remark of the CAM user to be queried.
    :param str result_output_file: Used to save results.
    :param int uid: Uid of the CAM user to be queried.
    :param int uin: Uin of the CAM user to be queried.
    """
    __args__ = dict()
    __args__['consoleLogin'] = console_login
    __args__['countryCode'] = country_code
    __args__['email'] = email
    __args__['name'] = name
    __args__['phoneNum'] = phone_num
    __args__['remark'] = remark
    __args__['resultOutputFile'] = result_output_file
    __args__['uid'] = uid
    __args__['uin'] = uin
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cam/getUsers:getUsers', __args__, opts=opts, typ=GetUsersResult).value

    return AwaitableGetUsersResult(
        console_login=pulumi.get(__ret__, 'console_login'),
        country_code=pulumi.get(__ret__, 'country_code'),
        email=pulumi.get(__ret__, 'email'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        phone_num=pulumi.get(__ret__, 'phone_num'),
        remark=pulumi.get(__ret__, 'remark'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        uid=pulumi.get(__ret__, 'uid'),
        uin=pulumi.get(__ret__, 'uin'),
        user_lists=pulumi.get(__ret__, 'user_lists'))


@_utilities.lift_output_func(get_users)
def get_users_output(console_login: Optional[pulumi.Input[Optional[bool]]] = None,
                     country_code: Optional[pulumi.Input[Optional[str]]] = None,
                     email: Optional[pulumi.Input[Optional[str]]] = None,
                     name: Optional[pulumi.Input[Optional[str]]] = None,
                     phone_num: Optional[pulumi.Input[Optional[str]]] = None,
                     remark: Optional[pulumi.Input[Optional[str]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     uid: Optional[pulumi.Input[Optional[int]]] = None,
                     uin: Optional[pulumi.Input[Optional[int]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUsersResult]:
    """
    Use this data source to query detailed information of CAM users

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Cam.get_users(name="cam-user-test")
    bar = tencentcloud.Cam.get_users(email="hello@test.com")
    far = tencentcloud.Cam.get_users(phone_num="12345678910")
    ```
    <!--End PulumiCodeChooser -->


    :param bool console_login: Indicate whether the user can login in.
    :param str country_code: Country code of the CAM user to be queried.
    :param str email: Email of the CAM user to be queried.
    :param str name: Name of CAM user to be queried.
    :param str phone_num: Phone num of the CAM user to be queried.
    :param str remark: Remark of the CAM user to be queried.
    :param str result_output_file: Used to save results.
    :param int uid: Uid of the CAM user to be queried.
    :param int uin: Uin of the CAM user to be queried.
    """
    ...
