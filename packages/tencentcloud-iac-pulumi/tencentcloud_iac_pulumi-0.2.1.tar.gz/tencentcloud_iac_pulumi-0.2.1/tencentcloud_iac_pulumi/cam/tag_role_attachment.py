# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TagRoleAttachmentArgs', 'TagRoleAttachment']

@pulumi.input_type
class TagRoleAttachmentArgs:
    def __init__(__self__, *,
                 tags: pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]],
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TagRoleAttachment resource.
        :param pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]] tags: Label.
        :param pulumi.Input[str] role_id: Character ID, at least one input with the character name.
        :param pulumi.Input[str] role_name: Character name, at least one input with the character ID.
        """
        pulumi.set(__self__, "tags", tags)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]]:
        """
        Label.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Character ID, at least one input with the character name.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Character name, at least one input with the character ID.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


@pulumi.input_type
class _TagRoleAttachmentState:
    def __init__(__self__, *,
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering TagRoleAttachment resources.
        :param pulumi.Input[str] role_id: Character ID, at least one input with the character name.
        :param pulumi.Input[str] role_name: Character name, at least one input with the character ID.
        :param pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]] tags: Label.
        """
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Character ID, at least one input with the character name.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Character name, at least one input with the character ID.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]]]:
        """
        Label.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TagRoleAttachmentTagArgs']]]]):
        pulumi.set(self, "tags", value)


class TagRoleAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRoleAttachmentTagArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a cam tag_role

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tag_role = tencentcloud.cam.TagRoleAttachment("tagRole",
            role_id="test-cam-tag",
            tags=[tencentcloud.cam.TagRoleAttachmentTagArgs(
                key="test1",
                value="test1",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam tag_role can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/tagRoleAttachment:TagRoleAttachment tag_role tag_role_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] role_id: Character ID, at least one input with the character name.
        :param pulumi.Input[str] role_name: Character name, at least one input with the character ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRoleAttachmentTagArgs']]]] tags: Label.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TagRoleAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cam tag_role

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tag_role = tencentcloud.cam.TagRoleAttachment("tagRole",
            role_id="test-cam-tag",
            tags=[tencentcloud.cam.TagRoleAttachmentTagArgs(
                key="test1",
                value="test1",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam tag_role can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/tagRoleAttachment:TagRoleAttachment tag_role tag_role_id
        ```

        :param str resource_name: The name of the resource.
        :param TagRoleAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TagRoleAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRoleAttachmentTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TagRoleAttachmentArgs.__new__(TagRoleAttachmentArgs)

            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["role_name"] = role_name
            if tags is None and not opts.urn:
                raise TypeError("Missing required property 'tags'")
            __props__.__dict__["tags"] = tags
        super(TagRoleAttachment, __self__).__init__(
            'tencentcloud:Cam/tagRoleAttachment:TagRoleAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            role_id: Optional[pulumi.Input[str]] = None,
            role_name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRoleAttachmentTagArgs']]]]] = None) -> 'TagRoleAttachment':
        """
        Get an existing TagRoleAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] role_id: Character ID, at least one input with the character name.
        :param pulumi.Input[str] role_name: Character name, at least one input with the character ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TagRoleAttachmentTagArgs']]]] tags: Label.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TagRoleAttachmentState.__new__(_TagRoleAttachmentState)

        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["role_name"] = role_name
        __props__.__dict__["tags"] = tags
        return TagRoleAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        Character ID, at least one input with the character name.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[str]:
        """
        Character name, at least one input with the character ID.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.TagRoleAttachmentTag']]:
        """
        Label.
        """
        return pulumi.get(self, "tags")

