# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserSamlConfigArgs', 'UserSamlConfig']

@pulumi.input_type
class UserSamlConfigArgs:
    def __init__(__self__, *,
                 saml_metadata_document: pulumi.Input[str],
                 metadata_document_file: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserSamlConfig resource.
        :param pulumi.Input[str] saml_metadata_document: SAML metadata document, xml format, support string content or file path.
        :param pulumi.Input[str] metadata_document_file: The path used to save the samlMetadat file.
        """
        pulumi.set(__self__, "saml_metadata_document", saml_metadata_document)
        if metadata_document_file is not None:
            pulumi.set(__self__, "metadata_document_file", metadata_document_file)

    @property
    @pulumi.getter(name="samlMetadataDocument")
    def saml_metadata_document(self) -> pulumi.Input[str]:
        """
        SAML metadata document, xml format, support string content or file path.
        """
        return pulumi.get(self, "saml_metadata_document")

    @saml_metadata_document.setter
    def saml_metadata_document(self, value: pulumi.Input[str]):
        pulumi.set(self, "saml_metadata_document", value)

    @property
    @pulumi.getter(name="metadataDocumentFile")
    def metadata_document_file(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to save the samlMetadat file.
        """
        return pulumi.get(self, "metadata_document_file")

    @metadata_document_file.setter
    def metadata_document_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_document_file", value)


@pulumi.input_type
class _UserSamlConfigState:
    def __init__(__self__, *,
                 metadata_document_file: Optional[pulumi.Input[str]] = None,
                 saml_metadata_document: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering UserSamlConfig resources.
        :param pulumi.Input[str] metadata_document_file: The path used to save the samlMetadat file.
        :param pulumi.Input[str] saml_metadata_document: SAML metadata document, xml format, support string content or file path.
        :param pulumi.Input[int] status: Status: `0`: not set, `11`: enabled, `2`: disabled.
        """
        if metadata_document_file is not None:
            pulumi.set(__self__, "metadata_document_file", metadata_document_file)
        if saml_metadata_document is not None:
            pulumi.set(__self__, "saml_metadata_document", saml_metadata_document)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="metadataDocumentFile")
    def metadata_document_file(self) -> Optional[pulumi.Input[str]]:
        """
        The path used to save the samlMetadat file.
        """
        return pulumi.get(self, "metadata_document_file")

    @metadata_document_file.setter
    def metadata_document_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metadata_document_file", value)

    @property
    @pulumi.getter(name="samlMetadataDocument")
    def saml_metadata_document(self) -> Optional[pulumi.Input[str]]:
        """
        SAML metadata document, xml format, support string content or file path.
        """
        return pulumi.get(self, "saml_metadata_document")

    @saml_metadata_document.setter
    def saml_metadata_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_metadata_document", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status: `0`: not set, `11`: enabled, `2`: disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


class UserSamlConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata_document_file: Optional[pulumi.Input[str]] = None,
                 saml_metadata_document: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cam user_saml_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user_saml_config = tencentcloud.cam.UserSamlConfig("userSamlConfig", saml_metadata_document="./metadataDocument.xml")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam user_saml_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/userSamlConfig:UserSamlConfig user_saml_config user_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] metadata_document_file: The path used to save the samlMetadat file.
        :param pulumi.Input[str] saml_metadata_document: SAML metadata document, xml format, support string content or file path.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserSamlConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cam user_saml_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user_saml_config = tencentcloud.cam.UserSamlConfig("userSamlConfig", saml_metadata_document="./metadataDocument.xml")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cam user_saml_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cam/userSamlConfig:UserSamlConfig user_saml_config user_id
        ```

        :param str resource_name: The name of the resource.
        :param UserSamlConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserSamlConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata_document_file: Optional[pulumi.Input[str]] = None,
                 saml_metadata_document: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserSamlConfigArgs.__new__(UserSamlConfigArgs)

            __props__.__dict__["metadata_document_file"] = metadata_document_file
            if saml_metadata_document is None and not opts.urn:
                raise TypeError("Missing required property 'saml_metadata_document'")
            __props__.__dict__["saml_metadata_document"] = saml_metadata_document
            __props__.__dict__["status"] = None
        super(UserSamlConfig, __self__).__init__(
            'tencentcloud:Cam/userSamlConfig:UserSamlConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            metadata_document_file: Optional[pulumi.Input[str]] = None,
            saml_metadata_document: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None) -> 'UserSamlConfig':
        """
        Get an existing UserSamlConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] metadata_document_file: The path used to save the samlMetadat file.
        :param pulumi.Input[str] saml_metadata_document: SAML metadata document, xml format, support string content or file path.
        :param pulumi.Input[int] status: Status: `0`: not set, `11`: enabled, `2`: disabled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserSamlConfigState.__new__(_UserSamlConfigState)

        __props__.__dict__["metadata_document_file"] = metadata_document_file
        __props__.__dict__["saml_metadata_document"] = saml_metadata_document
        __props__.__dict__["status"] = status
        return UserSamlConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="metadataDocumentFile")
    def metadata_document_file(self) -> pulumi.Output[Optional[str]]:
        """
        The path used to save the samlMetadat file.
        """
        return pulumi.get(self, "metadata_document_file")

    @property
    @pulumi.getter(name="samlMetadataDocument")
    def saml_metadata_document(self) -> pulumi.Output[str]:
        """
        SAML metadata document, xml format, support string content or file path.
        """
        return pulumi.get(self, "saml_metadata_document")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Status: `0`: not set, `11`: enabled, `2`: disabled.
        """
        return pulumi.get(self, "status")

