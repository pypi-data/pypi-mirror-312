# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetTargetGroupListResult',
    'AwaitableGetTargetGroupListResult',
    'get_target_group_list',
    'get_target_group_list_output',
]

@pulumi.output_type
class GetTargetGroupListResult:
    """
    A collection of values returned by getTargetGroupList.
    """
    def __init__(__self__, filters=None, id=None, result_output_file=None, target_group_ids=None, target_group_sets=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if target_group_ids and not isinstance(target_group_ids, list):
            raise TypeError("Expected argument 'target_group_ids' to be a list")
        pulumi.set(__self__, "target_group_ids", target_group_ids)
        if target_group_sets and not isinstance(target_group_sets, list):
            raise TypeError("Expected argument 'target_group_sets' to be a list")
        pulumi.set(__self__, "target_group_sets", target_group_sets)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetTargetGroupListFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="targetGroupIds")
    def target_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "target_group_ids")

    @property
    @pulumi.getter(name="targetGroupSets")
    def target_group_sets(self) -> Sequence['outputs.GetTargetGroupListTargetGroupSetResult']:
        """
        Information set of displayed target groups.
        """
        return pulumi.get(self, "target_group_sets")


class AwaitableGetTargetGroupListResult(GetTargetGroupListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTargetGroupListResult(
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file,
            target_group_ids=self.target_group_ids,
            target_group_sets=self.target_group_sets)


def get_target_group_list(filters: Optional[Sequence[pulumi.InputType['GetTargetGroupListFilterArgs']]] = None,
                          result_output_file: Optional[str] = None,
                          target_group_ids: Optional[Sequence[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTargetGroupListResult:
    """
    Use this data source to query detailed information of clb target_group_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    target_group_list = tencentcloud.Clb.get_target_group_list(filters=[tencentcloud.clb.GetTargetGroupListFilterArgs(
        name="TargetGroupName",
        values=["keep-tgg"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetTargetGroupListFilterArgs']] filters: Filter array, which is exclusive of TargetGroupIds. Valid values: TargetGroupVpcId and TargetGroupName. Target group ID will be used first.
    :param str result_output_file: Used to save results.
    :param Sequence[str] target_group_ids: Target group ID array.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    __args__['targetGroupIds'] = target_group_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/getTargetGroupList:getTargetGroupList', __args__, opts=opts, typ=GetTargetGroupListResult).value

    return AwaitableGetTargetGroupListResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        target_group_ids=pulumi.get(__ret__, 'target_group_ids'),
        target_group_sets=pulumi.get(__ret__, 'target_group_sets'))


@_utilities.lift_output_func(get_target_group_list)
def get_target_group_list_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetTargetGroupListFilterArgs']]]]] = None,
                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 target_group_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTargetGroupListResult]:
    """
    Use this data source to query detailed information of clb target_group_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    target_group_list = tencentcloud.Clb.get_target_group_list(filters=[tencentcloud.clb.GetTargetGroupListFilterArgs(
        name="TargetGroupName",
        values=["keep-tgg"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetTargetGroupListFilterArgs']] filters: Filter array, which is exclusive of TargetGroupIds. Valid values: TargetGroupVpcId and TargetGroupName. Target group ID will be used first.
    :param str result_output_file: Used to save results.
    :param Sequence[str] target_group_ids: Target group ID array.
    """
    ...
