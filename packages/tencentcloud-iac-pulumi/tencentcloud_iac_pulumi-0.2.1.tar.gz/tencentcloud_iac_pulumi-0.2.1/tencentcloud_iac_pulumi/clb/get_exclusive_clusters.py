# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetExclusiveClustersResult',
    'AwaitableGetExclusiveClustersResult',
    'get_exclusive_clusters',
    'get_exclusive_clusters_output',
]

@pulumi.output_type
class GetExclusiveClustersResult:
    """
    A collection of values returned by getExclusiveClusters.
    """
    def __init__(__self__, cluster_sets=None, filters=None, id=None, result_output_file=None):
        if cluster_sets and not isinstance(cluster_sets, list):
            raise TypeError("Expected argument 'cluster_sets' to be a list")
        pulumi.set(__self__, "cluster_sets", cluster_sets)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clusterSets")
    def cluster_sets(self) -> Sequence['outputs.GetExclusiveClustersClusterSetResult']:
        """
        cluster list.
        """
        return pulumi.get(self, "cluster_sets")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetExclusiveClustersFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetExclusiveClustersResult(GetExclusiveClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetExclusiveClustersResult(
            cluster_sets=self.cluster_sets,
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file)


def get_exclusive_clusters(filters: Optional[Sequence[pulumi.InputType['GetExclusiveClustersFilterArgs']]] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetExclusiveClustersResult:
    """
    Use this data source to query detailed information of clb exclusive_clusters

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    exclusive_clusters = tencentcloud.Clb.get_exclusive_clusters(filters=[tencentcloud.clb.GetExclusiveClustersFilterArgs(
        name="zone",
        values=["ap-guangzhou-1"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetExclusiveClustersFilterArgs']] filters: Filter to query the list of AZ resources as detailed below: cluster-type - String - Required: No - (Filter condition) Filter by cluster type, such as TGW. cluster-id - String - Required: No - (Filter condition) Filter by cluster ID, such as tgw-xxxxxxxx. cluster-name - String - Required: No - (Filter condition) Filter by cluster name, such as test-xxxxxx. cluster-tag - String - Required: No - (Filter condition) Filter by cluster tag, such as TAG-xxxxx. vip - String - Required: No - (Filter condition) Filter by vip in the cluster, such as x.x.x.x. network - String - Required: No - (Filter condition) Filter by cluster network type, such as Public or Private. zone - String - Required: No - (Filter condition) Filter by cluster zone, such as ap-guangzhou-1. isp - String - Required: No - (Filter condition) Filter by TGW cluster isp type, such as BGP. loadblancer-id - String - Required: No - (Filter condition) Filter by loadblancer-id in the cluste, such as lb-xxxxxxxx.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/getExclusiveClusters:getExclusiveClusters', __args__, opts=opts, typ=GetExclusiveClustersResult).value

    return AwaitableGetExclusiveClustersResult(
        cluster_sets=pulumi.get(__ret__, 'cluster_sets'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_exclusive_clusters)
def get_exclusive_clusters_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetExclusiveClustersFilterArgs']]]]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetExclusiveClustersResult]:
    """
    Use this data source to query detailed information of clb exclusive_clusters

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    exclusive_clusters = tencentcloud.Clb.get_exclusive_clusters(filters=[tencentcloud.clb.GetExclusiveClustersFilterArgs(
        name="zone",
        values=["ap-guangzhou-1"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetExclusiveClustersFilterArgs']] filters: Filter to query the list of AZ resources as detailed below: cluster-type - String - Required: No - (Filter condition) Filter by cluster type, such as TGW. cluster-id - String - Required: No - (Filter condition) Filter by cluster ID, such as tgw-xxxxxxxx. cluster-name - String - Required: No - (Filter condition) Filter by cluster name, such as test-xxxxxx. cluster-tag - String - Required: No - (Filter condition) Filter by cluster tag, such as TAG-xxxxx. vip - String - Required: No - (Filter condition) Filter by vip in the cluster, such as x.x.x.x. network - String - Required: No - (Filter condition) Filter by cluster network type, such as Public or Private. zone - String - Required: No - (Filter condition) Filter by cluster zone, such as ap-guangzhou-1. isp - String - Required: No - (Filter condition) Filter by TGW cluster isp type, such as BGP. loadblancer-id - String - Required: No - (Filter condition) Filter by loadblancer-id in the cluste, such as lb-xxxxxxxx.
    :param str result_output_file: Used to save results.
    """
    ...
