# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TargetGroupAttachmentsArgs', 'TargetGroupAttachments']

@pulumi.input_type
class TargetGroupAttachmentsArgs:
    def __init__(__self__, *,
                 associations: pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]],
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 target_group_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TargetGroupAttachments resource.
        :param pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]] associations: Association array, the combination cannot exceed 20.
        :param pulumi.Input[str] load_balancer_id: CLB instance ID, (load_balancer_id and target_group_id require at least one).
        :param pulumi.Input[str] target_group_id: Target group ID, (load_balancer_id and target_group_id require at least one).
        """
        pulumi.set(__self__, "associations", associations)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if target_group_id is not None:
            pulumi.set(__self__, "target_group_id", target_group_id)

    @property
    @pulumi.getter
    def associations(self) -> pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]]:
        """
        Association array, the combination cannot exceed 20.
        """
        return pulumi.get(self, "associations")

    @associations.setter
    def associations(self, value: pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]]):
        pulumi.set(self, "associations", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLB instance ID, (load_balancer_id and target_group_id require at least one).
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Target group ID, (load_balancer_id and target_group_id require at least one).
        """
        return pulumi.get(self, "target_group_id")

    @target_group_id.setter
    def target_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_id", value)


@pulumi.input_type
class _TargetGroupAttachmentsState:
    def __init__(__self__, *,
                 associations: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 target_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TargetGroupAttachments resources.
        :param pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]] associations: Association array, the combination cannot exceed 20.
        :param pulumi.Input[str] load_balancer_id: CLB instance ID, (load_balancer_id and target_group_id require at least one).
        :param pulumi.Input[str] target_group_id: Target group ID, (load_balancer_id and target_group_id require at least one).
        """
        if associations is not None:
            pulumi.set(__self__, "associations", associations)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if target_group_id is not None:
            pulumi.set(__self__, "target_group_id", target_group_id)

    @property
    @pulumi.getter
    def associations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]]]:
        """
        Association array, the combination cannot exceed 20.
        """
        return pulumi.get(self, "associations")

    @associations.setter
    def associations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TargetGroupAttachmentsAssociationArgs']]]]):
        pulumi.set(self, "associations", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLB instance ID, (load_balancer_id and target_group_id require at least one).
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Target group ID, (load_balancer_id and target_group_id require at least one).
        """
        return pulumi.get(self, "target_group_id")

    @target_group_id.setter
    def target_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_group_id", value)


class TargetGroupAttachments(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetGroupAttachmentsAssociationArgs']]]]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 target_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a clb target_group_attachments

        This resource supports bidirectional binding (target group binding to the load balancer, load balancer binding to the target group). When choosing either the load balancer or the target group as the binding target, up to 20 combinations can be bound at most.

        ## Example Usage

        ### Load balancer binding to the target group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        target_group_attachments = tencentcloud.clb.TargetGroupAttachments("targetGroupAttachments",
            associations=[tencentcloud.clb.TargetGroupAttachmentsAssociationArgs(
                listener_id="lbl-m2q6sp9m",
                location_id="loc-jjqr0ric",
                target_group_id="lbtg-5xunivs0",
            )],
            load_balancer_id="lb-phbx2420")
        ```
        <!--End PulumiCodeChooser -->

        ### Target group binding to the load balancer

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        target_group_attachments = tencentcloud.clb.TargetGroupAttachments("targetGroupAttachments",
            associations=[tencentcloud.clb.TargetGroupAttachmentsAssociationArgs(
                listener_id="lbl-m2q6sp9m",
                load_balancer_id="lb-phbx2420",
                location_id="loc-jjqr0ric",
            )],
            target_group_id="lbtg-5xunivs0")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetGroupAttachmentsAssociationArgs']]]] associations: Association array, the combination cannot exceed 20.
        :param pulumi.Input[str] load_balancer_id: CLB instance ID, (load_balancer_id and target_group_id require at least one).
        :param pulumi.Input[str] target_group_id: Target group ID, (load_balancer_id and target_group_id require at least one).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TargetGroupAttachmentsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a clb target_group_attachments

        This resource supports bidirectional binding (target group binding to the load balancer, load balancer binding to the target group). When choosing either the load balancer or the target group as the binding target, up to 20 combinations can be bound at most.

        ## Example Usage

        ### Load balancer binding to the target group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        target_group_attachments = tencentcloud.clb.TargetGroupAttachments("targetGroupAttachments",
            associations=[tencentcloud.clb.TargetGroupAttachmentsAssociationArgs(
                listener_id="lbl-m2q6sp9m",
                location_id="loc-jjqr0ric",
                target_group_id="lbtg-5xunivs0",
            )],
            load_balancer_id="lb-phbx2420")
        ```
        <!--End PulumiCodeChooser -->

        ### Target group binding to the load balancer

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        target_group_attachments = tencentcloud.clb.TargetGroupAttachments("targetGroupAttachments",
            associations=[tencentcloud.clb.TargetGroupAttachmentsAssociationArgs(
                listener_id="lbl-m2q6sp9m",
                load_balancer_id="lb-phbx2420",
                location_id="loc-jjqr0ric",
            )],
            target_group_id="lbtg-5xunivs0")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TargetGroupAttachmentsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TargetGroupAttachmentsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetGroupAttachmentsAssociationArgs']]]]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 target_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TargetGroupAttachmentsArgs.__new__(TargetGroupAttachmentsArgs)

            if associations is None and not opts.urn:
                raise TypeError("Missing required property 'associations'")
            __props__.__dict__["associations"] = associations
            __props__.__dict__["load_balancer_id"] = load_balancer_id
            __props__.__dict__["target_group_id"] = target_group_id
        super(TargetGroupAttachments, __self__).__init__(
            'tencentcloud:Clb/targetGroupAttachments:TargetGroupAttachments',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            associations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetGroupAttachmentsAssociationArgs']]]]] = None,
            load_balancer_id: Optional[pulumi.Input[str]] = None,
            target_group_id: Optional[pulumi.Input[str]] = None) -> 'TargetGroupAttachments':
        """
        Get an existing TargetGroupAttachments resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TargetGroupAttachmentsAssociationArgs']]]] associations: Association array, the combination cannot exceed 20.
        :param pulumi.Input[str] load_balancer_id: CLB instance ID, (load_balancer_id and target_group_id require at least one).
        :param pulumi.Input[str] target_group_id: Target group ID, (load_balancer_id and target_group_id require at least one).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TargetGroupAttachmentsState.__new__(_TargetGroupAttachmentsState)

        __props__.__dict__["associations"] = associations
        __props__.__dict__["load_balancer_id"] = load_balancer_id
        __props__.__dict__["target_group_id"] = target_group_id
        return TargetGroupAttachments(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def associations(self) -> pulumi.Output[Sequence['outputs.TargetGroupAttachmentsAssociation']]:
        """
        Association array, the combination cannot exceed 20.
        """
        return pulumi.get(self, "associations")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Output[Optional[str]]:
        """
        CLB instance ID, (load_balancer_id and target_group_id require at least one).
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        Target group ID, (load_balancer_id and target_group_id require at least one).
        """
        return pulumi.get(self, "target_group_id")

