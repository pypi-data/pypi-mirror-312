# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceTrafficResult',
    'AwaitableGetInstanceTrafficResult',
    'get_instance_traffic',
    'get_instance_traffic_output',
]

@pulumi.output_type
class GetInstanceTrafficResult:
    """
    A collection of values returned by getInstanceTraffic.
    """
    def __init__(__self__, id=None, load_balancer_region=None, load_balancer_traffics=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if load_balancer_region and not isinstance(load_balancer_region, str):
            raise TypeError("Expected argument 'load_balancer_region' to be a str")
        pulumi.set(__self__, "load_balancer_region", load_balancer_region)
        if load_balancer_traffics and not isinstance(load_balancer_traffics, list):
            raise TypeError("Expected argument 'load_balancer_traffics' to be a list")
        pulumi.set(__self__, "load_balancer_traffics", load_balancer_traffics)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loadBalancerRegion")
    def load_balancer_region(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_region")

    @property
    @pulumi.getter(name="loadBalancerTraffics")
    def load_balancer_traffics(self) -> Sequence['outputs.GetInstanceTrafficLoadBalancerTrafficResult']:
        """
        Information of CLB instances sorted by outbound bandwidth from highest to lowest. Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "load_balancer_traffics")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetInstanceTrafficResult(GetInstanceTrafficResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceTrafficResult(
            id=self.id,
            load_balancer_region=self.load_balancer_region,
            load_balancer_traffics=self.load_balancer_traffics,
            result_output_file=self.result_output_file)


def get_instance_traffic(load_balancer_region: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceTrafficResult:
    """
    Use this data source to query detailed information of clb instance_traffic

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    instance_traffic = tencentcloud.Clb.get_instance_traffic(load_balancer_region="ap-guangzhou")
    ```
    <!--End PulumiCodeChooser -->


    :param str load_balancer_region: CLB instance region. If this parameter is not passed in, CLB instances in all regions will be returned.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['loadBalancerRegion'] = load_balancer_region
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/getInstanceTraffic:getInstanceTraffic', __args__, opts=opts, typ=GetInstanceTrafficResult).value

    return AwaitableGetInstanceTrafficResult(
        id=pulumi.get(__ret__, 'id'),
        load_balancer_region=pulumi.get(__ret__, 'load_balancer_region'),
        load_balancer_traffics=pulumi.get(__ret__, 'load_balancer_traffics'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_instance_traffic)
def get_instance_traffic_output(load_balancer_region: Optional[pulumi.Input[Optional[str]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceTrafficResult]:
    """
    Use this data source to query detailed information of clb instance_traffic

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    instance_traffic = tencentcloud.Clb.get_instance_traffic(load_balancer_region="ap-guangzhou")
    ```
    <!--End PulumiCodeChooser -->


    :param str load_balancer_region: CLB instance region. If this parameter is not passed in, CLB instances in all regions will be returned.
    :param str result_output_file: Used to save results.
    """
    ...
