# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReplaceCertForLbsArgs', 'ReplaceCertForLbs']

@pulumi.input_type
class ReplaceCertForLbsArgs:
    def __init__(__self__, *,
                 certificate: pulumi.Input['ReplaceCertForLbsCertificateArgs'],
                 old_certificate_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ReplaceCertForLbs resource.
        :param pulumi.Input['ReplaceCertForLbsCertificateArgs'] certificate: Information such as the content of the new certificate.
        :param pulumi.Input[str] old_certificate_id: ID of the certificate to be replaced, which can be a server certificate or a client certificate.
        """
        pulumi.set(__self__, "certificate", certificate)
        pulumi.set(__self__, "old_certificate_id", old_certificate_id)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Input['ReplaceCertForLbsCertificateArgs']:
        """
        Information such as the content of the new certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: pulumi.Input['ReplaceCertForLbsCertificateArgs']):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="oldCertificateId")
    def old_certificate_id(self) -> pulumi.Input[str]:
        """
        ID of the certificate to be replaced, which can be a server certificate or a client certificate.
        """
        return pulumi.get(self, "old_certificate_id")

    @old_certificate_id.setter
    def old_certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_certificate_id", value)


@pulumi.input_type
class _ReplaceCertForLbsState:
    def __init__(__self__, *,
                 certificate: Optional[pulumi.Input['ReplaceCertForLbsCertificateArgs']] = None,
                 old_certificate_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReplaceCertForLbs resources.
        :param pulumi.Input['ReplaceCertForLbsCertificateArgs'] certificate: Information such as the content of the new certificate.
        :param pulumi.Input[str] old_certificate_id: ID of the certificate to be replaced, which can be a server certificate or a client certificate.
        """
        if certificate is not None:
            pulumi.set(__self__, "certificate", certificate)
        if old_certificate_id is not None:
            pulumi.set(__self__, "old_certificate_id", old_certificate_id)

    @property
    @pulumi.getter
    def certificate(self) -> Optional[pulumi.Input['ReplaceCertForLbsCertificateArgs']]:
        """
        Information such as the content of the new certificate.
        """
        return pulumi.get(self, "certificate")

    @certificate.setter
    def certificate(self, value: Optional[pulumi.Input['ReplaceCertForLbsCertificateArgs']]):
        pulumi.set(self, "certificate", value)

    @property
    @pulumi.getter(name="oldCertificateId")
    def old_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the certificate to be replaced, which can be a server certificate or a client certificate.
        """
        return pulumi.get(self, "old_certificate_id")

    @old_certificate_id.setter
    def old_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "old_certificate_id", value)


class ReplaceCertForLbs(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[pulumi.InputType['ReplaceCertForLbsCertificateArgs']]] = None,
                 old_certificate_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a clb replace_cert_for_lbs

        ## Example Usage

        ### Replace Server Cert By Cert ID

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        replace_cert_for_lbs = tencentcloud.clb.ReplaceCertForLbs("replaceCertForLbs",
            certificate=tencentcloud.clb.ReplaceCertForLbsCertificateArgs(
                cert_id="6vcK02GC",
            ),
            old_certificate_id="zjUMifFK")
        ```
        <!--End PulumiCodeChooser -->

        ### Replace Server Cert By Cert Content

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.Ssl.get_certificates(name="keep-ssl-ca")
        replace_cert_for_lbs = tencentcloud.clb.ReplaceCertForLbs("replaceCertForLbs",
            old_certificate_id=foo.certificates[0].id,
            certificate=tencentcloud.clb.ReplaceCertForLbsCertificateArgs(
                cert_name="tf-test-cert",
                cert_content=\"\"\"-----BEGIN CERTIFICATE-----
        xxxxxxxxxxxxxxxxxxxxxxxxxxx
        -----END CERTIFICATE-----
        EOT,
            certKey     = <<-EOT
        -----BEGIN RSA PRIVATE KEY-----
        xxxxxxxxxxxxxxxxxxxxxxxxxxxx
        -----END RSA PRIVATE KEY-----
        \"\"\",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Replace Client Cert By Cert Content

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        replace_cert_for_lbs = tencentcloud.clb.ReplaceCertForLbs("replaceCertForLbs",
            old_certificate_id="zjUMifFK",
            certificate=tencentcloud.clb.ReplaceCertForLbsCertificateArgs(
                cert_ca_name="tf-test-cert",
                cert_ca_content=\"\"\"-----BEGIN CERTIFICATE-----
        xxxxxxxxContentxxxxxxxxxxxxxx
        -----END CERTIFICATE-----
        \"\"\",
            ))
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ReplaceCertForLbsCertificateArgs']] certificate: Information such as the content of the new certificate.
        :param pulumi.Input[str] old_certificate_id: ID of the certificate to be replaced, which can be a server certificate or a client certificate.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReplaceCertForLbsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a clb replace_cert_for_lbs

        ## Example Usage

        ### Replace Server Cert By Cert ID

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        replace_cert_for_lbs = tencentcloud.clb.ReplaceCertForLbs("replaceCertForLbs",
            certificate=tencentcloud.clb.ReplaceCertForLbsCertificateArgs(
                cert_id="6vcK02GC",
            ),
            old_certificate_id="zjUMifFK")
        ```
        <!--End PulumiCodeChooser -->

        ### Replace Server Cert By Cert Content

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.Ssl.get_certificates(name="keep-ssl-ca")
        replace_cert_for_lbs = tencentcloud.clb.ReplaceCertForLbs("replaceCertForLbs",
            old_certificate_id=foo.certificates[0].id,
            certificate=tencentcloud.clb.ReplaceCertForLbsCertificateArgs(
                cert_name="tf-test-cert",
                cert_content=\"\"\"-----BEGIN CERTIFICATE-----
        xxxxxxxxxxxxxxxxxxxxxxxxxxx
        -----END CERTIFICATE-----
        EOT,
            certKey     = <<-EOT
        -----BEGIN RSA PRIVATE KEY-----
        xxxxxxxxxxxxxxxxxxxxxxxxxxxx
        -----END RSA PRIVATE KEY-----
        \"\"\",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Replace Client Cert By Cert Content

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        replace_cert_for_lbs = tencentcloud.clb.ReplaceCertForLbs("replaceCertForLbs",
            old_certificate_id="zjUMifFK",
            certificate=tencentcloud.clb.ReplaceCertForLbsCertificateArgs(
                cert_ca_name="tf-test-cert",
                cert_ca_content=\"\"\"-----BEGIN CERTIFICATE-----
        xxxxxxxxContentxxxxxxxxxxxxxx
        -----END CERTIFICATE-----
        \"\"\",
            ))
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ReplaceCertForLbsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReplaceCertForLbsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate: Optional[pulumi.Input[pulumi.InputType['ReplaceCertForLbsCertificateArgs']]] = None,
                 old_certificate_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReplaceCertForLbsArgs.__new__(ReplaceCertForLbsArgs)

            if certificate is None and not opts.urn:
                raise TypeError("Missing required property 'certificate'")
            __props__.__dict__["certificate"] = certificate
            if old_certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'old_certificate_id'")
            __props__.__dict__["old_certificate_id"] = old_certificate_id
        super(ReplaceCertForLbs, __self__).__init__(
            'tencentcloud:Clb/replaceCertForLbs:ReplaceCertForLbs',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate: Optional[pulumi.Input[pulumi.InputType['ReplaceCertForLbsCertificateArgs']]] = None,
            old_certificate_id: Optional[pulumi.Input[str]] = None) -> 'ReplaceCertForLbs':
        """
        Get an existing ReplaceCertForLbs resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ReplaceCertForLbsCertificateArgs']] certificate: Information such as the content of the new certificate.
        :param pulumi.Input[str] old_certificate_id: ID of the certificate to be replaced, which can be a server certificate or a client certificate.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReplaceCertForLbsState.__new__(_ReplaceCertForLbsState)

        __props__.__dict__["certificate"] = certificate
        __props__.__dict__["old_certificate_id"] = old_certificate_id
        return ReplaceCertForLbs(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def certificate(self) -> pulumi.Output['outputs.ReplaceCertForLbsCertificate']:
        """
        Information such as the content of the new certificate.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="oldCertificateId")
    def old_certificate_id(self) -> pulumi.Output[str]:
        """
        ID of the certificate to be replaced, which can be a server certificate or a client certificate.
        """
        return pulumi.get(self, "old_certificate_id")

