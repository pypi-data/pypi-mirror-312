# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CustomizedConfigArgs', 'CustomizedConfig']

@pulumi.input_type
class CustomizedConfigArgs:
    def __init__(__self__, *,
                 config_content: pulumi.Input[str],
                 config_name: pulumi.Input[str],
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CustomizedConfig resource.
        :param pulumi.Input[str] config_content: Content of Customized Config.
        :param pulumi.Input[str] config_name: Name of Customized Config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of LoadBalancer Ids.
        """
        pulumi.set(__self__, "config_content", config_content)
        pulumi.set(__self__, "config_name", config_name)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)

    @property
    @pulumi.getter(name="configContent")
    def config_content(self) -> pulumi.Input[str]:
        """
        Content of Customized Config.
        """
        return pulumi.get(self, "config_content")

    @config_content.setter
    def config_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_content", value)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> pulumi.Input[str]:
        """
        Name of Customized Config.
        """
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of LoadBalancer Ids.
        """
        return pulumi.get(self, "load_balancer_ids")

    @load_balancer_ids.setter
    def load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ids", value)


@pulumi.input_type
class _CustomizedConfigState:
    def __init__(__self__, *,
                 config_content: Optional[pulumi.Input[str]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomizedConfig resources.
        :param pulumi.Input[str] config_content: Content of Customized Config.
        :param pulumi.Input[str] config_name: Name of Customized Config.
        :param pulumi.Input[str] create_time: Create time of Customized Config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of LoadBalancer Ids.
        :param pulumi.Input[str] update_time: Update time of Customized Config.
        """
        if config_content is not None:
            pulumi.set(__self__, "config_content", config_content)
        if config_name is not None:
            pulumi.set(__self__, "config_name", config_name)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="configContent")
    def config_content(self) -> Optional[pulumi.Input[str]]:
        """
        Content of Customized Config.
        """
        return pulumi.get(self, "config_content")

    @config_content.setter
    def config_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_content", value)

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Customized Config.
        """
        return pulumi.get(self, "config_name")

    @config_name.setter
    def config_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_name", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of Customized Config.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of LoadBalancer Ids.
        """
        return pulumi.get(self, "load_balancer_ids")

    @load_balancer_ids.setter
    def load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ids", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time of Customized Config.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class CustomizedConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_content: Optional[pulumi.Input[str]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a CLB customized config.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.clb.CustomizedConfig("foo",
            config_content=\"\"\"client_max_body_size 224M;
        client_body_timeout 60s;
        \"\"\",
            config_name="helloWorld",
            load_balancer_ids=[
                tencentcloud_clb_instance["internal_clb"]["id"],
                tencentcloud_clb_instance["internal_clb2"]["id"],
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB customized config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/customizedConfig:CustomizedConfig foo pz-diowqstq
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_content: Content of Customized Config.
        :param pulumi.Input[str] config_name: Name of Customized Config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of LoadBalancer Ids.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomizedConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a CLB customized config.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.clb.CustomizedConfig("foo",
            config_content=\"\"\"client_max_body_size 224M;
        client_body_timeout 60s;
        \"\"\",
            config_name="helloWorld",
            load_balancer_ids=[
                tencentcloud_clb_instance["internal_clb"]["id"],
                tencentcloud_clb_instance["internal_clb2"]["id"],
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        CLB customized config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/customizedConfig:CustomizedConfig foo pz-diowqstq
        ```

        :param str resource_name: The name of the resource.
        :param CustomizedConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomizedConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_content: Optional[pulumi.Input[str]] = None,
                 config_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomizedConfigArgs.__new__(CustomizedConfigArgs)

            if config_content is None and not opts.urn:
                raise TypeError("Missing required property 'config_content'")
            __props__.__dict__["config_content"] = config_content
            if config_name is None and not opts.urn:
                raise TypeError("Missing required property 'config_name'")
            __props__.__dict__["config_name"] = config_name
            __props__.__dict__["load_balancer_ids"] = load_balancer_ids
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(CustomizedConfig, __self__).__init__(
            'tencentcloud:Clb/customizedConfig:CustomizedConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_content: Optional[pulumi.Input[str]] = None,
            config_name: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'CustomizedConfig':
        """
        Get an existing CustomizedConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_content: Content of Customized Config.
        :param pulumi.Input[str] config_name: Name of Customized Config.
        :param pulumi.Input[str] create_time: Create time of Customized Config.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of LoadBalancer Ids.
        :param pulumi.Input[str] update_time: Update time of Customized Config.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomizedConfigState.__new__(_CustomizedConfigState)

        __props__.__dict__["config_content"] = config_content
        __props__.__dict__["config_name"] = config_name
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["load_balancer_ids"] = load_balancer_ids
        __props__.__dict__["update_time"] = update_time
        return CustomizedConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configContent")
    def config_content(self) -> pulumi.Output[str]:
        """
        Content of Customized Config.
        """
        return pulumi.get(self, "config_content")

    @property
    @pulumi.getter(name="configName")
    def config_name(self) -> pulumi.Output[str]:
        """
        Name of Customized Config.
        """
        return pulumi.get(self, "config_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of Customized Config.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of LoadBalancer Ids.
        """
        return pulumi.get(self, "load_balancer_ids")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time of Customized Config.
        """
        return pulumi.get(self, "update_time")

