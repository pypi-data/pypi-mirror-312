# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetClusterResourcesResult',
    'AwaitableGetClusterResourcesResult',
    'get_cluster_resources',
    'get_cluster_resources_output',
]

@pulumi.output_type
class GetClusterResourcesResult:
    """
    A collection of values returned by getClusterResources.
    """
    def __init__(__self__, cluster_resource_sets=None, filters=None, id=None, result_output_file=None):
        if cluster_resource_sets and not isinstance(cluster_resource_sets, list):
            raise TypeError("Expected argument 'cluster_resource_sets' to be a list")
        pulumi.set(__self__, "cluster_resource_sets", cluster_resource_sets)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clusterResourceSets")
    def cluster_resource_sets(self) -> Sequence['outputs.GetClusterResourcesClusterResourceSetResult']:
        """
        Cluster resource set.
        """
        return pulumi.get(self, "cluster_resource_sets")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetClusterResourcesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetClusterResourcesResult(GetClusterResourcesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResourcesResult(
            cluster_resource_sets=self.cluster_resource_sets,
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file)


def get_cluster_resources(filters: Optional[Sequence[pulumi.InputType['GetClusterResourcesFilterArgs']]] = None,
                          result_output_file: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResourcesResult:
    """
    Use this data source to query detailed information of clb cluster_resources

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster_resources = tencentcloud.Clb.get_cluster_resources(filters=[tencentcloud.clb.GetClusterResourcesFilterArgs(
        name="idle",
        values=["True"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetClusterResourcesFilterArgs']] filters: Filter conditions to query cluster. cluster-id - String - Required: No - (Filter condition) Filter by cluster ID, such as tgw-12345678. vip - String - Required: No - (Filter condition) Filter by loadbalancer vip, such as 192.168.0.1. loadblancer-id - String - Required: No - (Filter condition) Filter by loadblancer ID, such as lbl-12345678. idle - String - Required: No - (Filter condition) Filter by Whether load balancing is idle, such as True, False.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/getClusterResources:getClusterResources', __args__, opts=opts, typ=GetClusterResourcesResult).value

    return AwaitableGetClusterResourcesResult(
        cluster_resource_sets=pulumi.get(__ret__, 'cluster_resource_sets'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_cluster_resources)
def get_cluster_resources_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetClusterResourcesFilterArgs']]]]] = None,
                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResourcesResult]:
    """
    Use this data source to query detailed information of clb cluster_resources

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster_resources = tencentcloud.Clb.get_cluster_resources(filters=[tencentcloud.clb.GetClusterResourcesFilterArgs(
        name="idle",
        values=["True"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetClusterResourcesFilterArgs']] filters: Filter conditions to query cluster. cluster-id - String - Required: No - (Filter condition) Filter by cluster ID, such as tgw-12345678. vip - String - Required: No - (Filter condition) Filter by loadbalancer vip, such as 192.168.0.1. loadblancer-id - String - Required: No - (Filter condition) Filter by loadblancer ID, such as lbl-12345678. idle - String - Required: No - (Filter condition) Filter by Whether load balancing is idle, such as True, False.
    :param str result_output_file: Used to save results.
    """
    ...
