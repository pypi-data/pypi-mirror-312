# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnatIpArgs', 'SnatIp']

@pulumi.input_type
class SnatIpArgs:
    def __init__(__self__, *,
                 clb_id: pulumi.Input[str],
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]]] = None):
        """
        The set of arguments for constructing a SnatIp resource.
        :param pulumi.Input[str] clb_id: CLB instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]] ips: Snat IP address config.
        """
        pulumi.set(__self__, "clb_id", clb_id)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Input[str]:
        """
        CLB instance ID.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]]]:
        """
        Snat IP address config.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]]]):
        pulumi.set(self, "ips", value)


@pulumi.input_type
class _SnatIpState:
    def __init__(__self__, *,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]]] = None):
        """
        Input properties used for looking up and filtering SnatIp resources.
        :param pulumi.Input[str] clb_id: CLB instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]] ips: Snat IP address config.
        """
        if clb_id is not None:
            pulumi.set(__self__, "clb_id", clb_id)
        if ips is not None:
            pulumi.set(__self__, "ips", ips)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLB instance ID.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]]]:
        """
        Snat IP address config.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnatIpIpArgs']]]]):
        pulumi.set(self, "ips", value)


class SnatIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnatIpIpArgs']]]]] = None,
                 __props__=None):
        """
        Provide a resource to create a SnatIp of CLB instance.

        > **NOTE:** Target CLB instance must enable `snat_pro` before creating snat ips.
        **NOTE:** Dynamic allocate IP doesn't support for now.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        snat_test = tencentcloud.clb.Instance("snatTest",
            network_type="OPEN",
            clb_name="tf-clb-snat-test")
        foo = tencentcloud.clb.SnatIp("foo",
            clb_id=snat_test.id,
            ips=[
                tencentcloud.clb.SnatIpIpArgs(
                    subnet_id="subnet-12345678",
                    ip="172.16.0.1",
                ),
                tencentcloud.clb.SnatIpIpArgs(
                    subnet_id="subnet-12345678",
                    ip="172.16.0.2",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ClbSnatIp instance can be imported by clb instance id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/snatIp:SnatIp test clb_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clb_id: CLB instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnatIpIpArgs']]]] ips: Snat IP address config.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnatIpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a SnatIp of CLB instance.

        > **NOTE:** Target CLB instance must enable `snat_pro` before creating snat ips.
        **NOTE:** Dynamic allocate IP doesn't support for now.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        snat_test = tencentcloud.clb.Instance("snatTest",
            network_type="OPEN",
            clb_name="tf-clb-snat-test")
        foo = tencentcloud.clb.SnatIp("foo",
            clb_id=snat_test.id,
            ips=[
                tencentcloud.clb.SnatIpIpArgs(
                    subnet_id="subnet-12345678",
                    ip="172.16.0.1",
                ),
                tencentcloud.clb.SnatIpIpArgs(
                    subnet_id="subnet-12345678",
                    ip="172.16.0.2",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ClbSnatIp instance can be imported by clb instance id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/snatIp:SnatIp test clb_id
        ```

        :param str resource_name: The name of the resource.
        :param SnatIpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnatIpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clb_id: Optional[pulumi.Input[str]] = None,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnatIpIpArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnatIpArgs.__new__(SnatIpArgs)

            if clb_id is None and not opts.urn:
                raise TypeError("Missing required property 'clb_id'")
            __props__.__dict__["clb_id"] = clb_id
            __props__.__dict__["ips"] = ips
        super(SnatIp, __self__).__init__(
            'tencentcloud:Clb/snatIp:SnatIp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clb_id: Optional[pulumi.Input[str]] = None,
            ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnatIpIpArgs']]]]] = None) -> 'SnatIp':
        """
        Get an existing SnatIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clb_id: CLB instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnatIpIpArgs']]]] ips: Snat IP address config.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnatIpState.__new__(_SnatIpState)

        __props__.__dict__["clb_id"] = clb_id
        __props__.__dict__["ips"] = ips
        return SnatIp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> pulumi.Output[str]:
        """
        CLB instance ID.
        """
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter
    def ips(self) -> pulumi.Output[Optional[Sequence['outputs.SnatIpIp']]]:
        """
        Snat IP address config.
        """
        return pulumi.get(self, "ips")

