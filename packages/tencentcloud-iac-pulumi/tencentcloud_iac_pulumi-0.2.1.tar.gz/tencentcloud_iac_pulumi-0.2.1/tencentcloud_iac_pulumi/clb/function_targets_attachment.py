# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionTargetsAttachmentArgs', 'FunctionTargetsAttachment']

@pulumi.input_type
class FunctionTargetsAttachmentArgs:
    def __init__(__self__, *,
                 function_targets: pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs'],
                 listener_id: pulumi.Input[str],
                 load_balancer_id: pulumi.Input[str],
                 domain: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FunctionTargetsAttachment resource.
        :param pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs'] function_targets: List of cloud functions to be bound.
        :param pulumi.Input[str] listener_id: Load Balancer Listener ID.
        :param pulumi.Input[str] load_balancer_id: Load Balancer Instance ID.
        :param pulumi.Input[str] domain: The domain name of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        :param pulumi.Input[str] location_id: The ID of the target forwarding rule. When binding the cloud function to a layer-7 forwarding rule, this parameter or the Domain+Url parameter must be entered.
        :param pulumi.Input[str] url: The URL of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        pulumi.set(__self__, "function_targets", function_targets)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="functionTargets")
    def function_targets(self) -> pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs']:
        """
        List of cloud functions to be bound.
        """
        return pulumi.get(self, "function_targets")

    @function_targets.setter
    def function_targets(self, value: pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs']):
        pulumi.set(self, "function_targets", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Input[str]:
        """
        Load Balancer Listener ID.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Input[str]:
        """
        Load Balancer Instance ID.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the target forwarding rule. When binding the cloud function to a layer-7 forwarding rule, this parameter or the Domain+Url parameter must be entered.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class _FunctionTargetsAttachmentState:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 function_targets: Optional[pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs']] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FunctionTargetsAttachment resources.
        :param pulumi.Input[str] domain: The domain name of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        :param pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs'] function_targets: List of cloud functions to be bound.
        :param pulumi.Input[str] listener_id: Load Balancer Listener ID.
        :param pulumi.Input[str] load_balancer_id: Load Balancer Instance ID.
        :param pulumi.Input[str] location_id: The ID of the target forwarding rule. When binding the cloud function to a layer-7 forwarding rule, this parameter or the Domain+Url parameter must be entered.
        :param pulumi.Input[str] url: The URL of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if function_targets is not None:
            pulumi.set(__self__, "function_targets", function_targets)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if load_balancer_id is not None:
            pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="functionTargets")
    def function_targets(self) -> Optional[pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs']]:
        """
        List of cloud functions to be bound.
        """
        return pulumi.get(self, "function_targets")

    @function_targets.setter
    def function_targets(self, value: Optional[pulumi.Input['FunctionTargetsAttachmentFunctionTargetsArgs']]):
        pulumi.set(self, "function_targets", value)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[str]]:
        """
        Load Balancer Listener ID.
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> Optional[pulumi.Input[str]]:
        """
        Load Balancer Instance ID.
        """
        return pulumi.get(self, "load_balancer_id")

    @load_balancer_id.setter
    def load_balancer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the target forwarding rule. When binding the cloud function to a layer-7 forwarding rule, this parameter or the Domain+Url parameter must be entered.
        """
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class FunctionTargetsAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 function_targets: Optional[pulumi.Input[pulumi.InputType['FunctionTargetsAttachmentFunctionTargetsArgs']]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a clb function_targets_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        function_targets = tencentcloud.clb.FunctionTargetsAttachment("functionTargets",
            domain="xxx.com",
            function_targets=tencentcloud.clb.FunctionTargetsAttachmentFunctionTargetsArgs(
                function=tencentcloud.clb.FunctionTargetsAttachmentFunctionTargetsFunctionArgs(
                    function_name="keep-tf-test-1675954233",
                    function_namespace="default",
                    function_qualifier="$LATEST",
                    function_qualifier_type="VERSION",
                ),
                weight=10,
            ),
            listener_id="lbl-nonkgvc2",
            load_balancer_id="lb-5dnrkgry",
            url="/")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        clb function_targets_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/functionTargetsAttachment:FunctionTargetsAttachment function_targets loadBalancerId#listenerId#locationId or loadBalancerId#listenerId#domain#rule
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: The domain name of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        :param pulumi.Input[pulumi.InputType['FunctionTargetsAttachmentFunctionTargetsArgs']] function_targets: List of cloud functions to be bound.
        :param pulumi.Input[str] listener_id: Load Balancer Listener ID.
        :param pulumi.Input[str] load_balancer_id: Load Balancer Instance ID.
        :param pulumi.Input[str] location_id: The ID of the target forwarding rule. When binding the cloud function to a layer-7 forwarding rule, this parameter or the Domain+Url parameter must be entered.
        :param pulumi.Input[str] url: The URL of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionTargetsAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a clb function_targets_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        function_targets = tencentcloud.clb.FunctionTargetsAttachment("functionTargets",
            domain="xxx.com",
            function_targets=tencentcloud.clb.FunctionTargetsAttachmentFunctionTargetsArgs(
                function=tencentcloud.clb.FunctionTargetsAttachmentFunctionTargetsFunctionArgs(
                    function_name="keep-tf-test-1675954233",
                    function_namespace="default",
                    function_qualifier="$LATEST",
                    function_qualifier_type="VERSION",
                ),
                weight=10,
            ),
            listener_id="lbl-nonkgvc2",
            load_balancer_id="lb-5dnrkgry",
            url="/")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        clb function_targets_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clb/functionTargetsAttachment:FunctionTargetsAttachment function_targets loadBalancerId#listenerId#locationId or loadBalancerId#listenerId#domain#rule
        ```

        :param str resource_name: The name of the resource.
        :param FunctionTargetsAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionTargetsAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 function_targets: Optional[pulumi.Input[pulumi.InputType['FunctionTargetsAttachmentFunctionTargetsArgs']]] = None,
                 listener_id: Optional[pulumi.Input[str]] = None,
                 load_balancer_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionTargetsAttachmentArgs.__new__(FunctionTargetsAttachmentArgs)

            __props__.__dict__["domain"] = domain
            if function_targets is None and not opts.urn:
                raise TypeError("Missing required property 'function_targets'")
            __props__.__dict__["function_targets"] = function_targets
            if listener_id is None and not opts.urn:
                raise TypeError("Missing required property 'listener_id'")
            __props__.__dict__["listener_id"] = listener_id
            if load_balancer_id is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_id'")
            __props__.__dict__["load_balancer_id"] = load_balancer_id
            __props__.__dict__["location_id"] = location_id
            __props__.__dict__["url"] = url
        super(FunctionTargetsAttachment, __self__).__init__(
            'tencentcloud:Clb/functionTargetsAttachment:FunctionTargetsAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain: Optional[pulumi.Input[str]] = None,
            function_targets: Optional[pulumi.Input[pulumi.InputType['FunctionTargetsAttachmentFunctionTargetsArgs']]] = None,
            listener_id: Optional[pulumi.Input[str]] = None,
            load_balancer_id: Optional[pulumi.Input[str]] = None,
            location_id: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'FunctionTargetsAttachment':
        """
        Get an existing FunctionTargetsAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: The domain name of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        :param pulumi.Input[pulumi.InputType['FunctionTargetsAttachmentFunctionTargetsArgs']] function_targets: List of cloud functions to be bound.
        :param pulumi.Input[str] listener_id: Load Balancer Listener ID.
        :param pulumi.Input[str] load_balancer_id: Load Balancer Instance ID.
        :param pulumi.Input[str] location_id: The ID of the target forwarding rule. When binding the cloud function to a layer-7 forwarding rule, this parameter or the Domain+Url parameter must be entered.
        :param pulumi.Input[str] url: The URL of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionTargetsAttachmentState.__new__(_FunctionTargetsAttachmentState)

        __props__.__dict__["domain"] = domain
        __props__.__dict__["function_targets"] = function_targets
        __props__.__dict__["listener_id"] = listener_id
        __props__.__dict__["load_balancer_id"] = load_balancer_id
        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["url"] = url
        return FunctionTargetsAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The domain name of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="functionTargets")
    def function_targets(self) -> pulumi.Output['outputs.FunctionTargetsAttachmentFunctionTargets']:
        """
        List of cloud functions to be bound.
        """
        return pulumi.get(self, "function_targets")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> pulumi.Output[str]:
        """
        Load Balancer Listener ID.
        """
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> pulumi.Output[str]:
        """
        Load Balancer Instance ID.
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[str]:
        """
        The ID of the target forwarding rule. When binding the cloud function to a layer-7 forwarding rule, this parameter or the Domain+Url parameter must be entered.
        """
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the target forwarding rule. If the LocationId parameter has been entered, this parameter will not take effect.
        """
        return pulumi.get(self, "url")

