# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstancesResult',
    'AwaitableGetInstancesResult',
    'get_instances',
    'get_instances_output',
]

@pulumi.output_type
class GetInstancesResult:
    """
    A collection of values returned by getInstances.
    """
    def __init__(__self__, clb_id=None, clb_lists=None, clb_name=None, id=None, master_zone=None, network_type=None, project_id=None, result_output_file=None):
        if clb_id and not isinstance(clb_id, str):
            raise TypeError("Expected argument 'clb_id' to be a str")
        pulumi.set(__self__, "clb_id", clb_id)
        if clb_lists and not isinstance(clb_lists, list):
            raise TypeError("Expected argument 'clb_lists' to be a list")
        pulumi.set(__self__, "clb_lists", clb_lists)
        if clb_name and not isinstance(clb_name, str):
            raise TypeError("Expected argument 'clb_name' to be a str")
        pulumi.set(__self__, "clb_name", clb_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if master_zone and not isinstance(master_zone, str):
            raise TypeError("Expected argument 'master_zone' to be a str")
        pulumi.set(__self__, "master_zone", master_zone)
        if network_type and not isinstance(network_type, str):
            raise TypeError("Expected argument 'network_type' to be a str")
        pulumi.set(__self__, "network_type", network_type)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> Optional[str]:
        """
        ID of CLB.
        """
        return pulumi.get(self, "clb_id")

    @property
    @pulumi.getter(name="clbLists")
    def clb_lists(self) -> Sequence['outputs.GetInstancesClbListResult']:
        """
        A list of cloud load balancers. Each element contains the following attributes:
        """
        return pulumi.get(self, "clb_lists")

    @property
    @pulumi.getter(name="clbName")
    def clb_name(self) -> Optional[str]:
        """
        Name of CLB.
        """
        return pulumi.get(self, "clb_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterZone")
    def master_zone(self) -> Optional[str]:
        return pulumi.get(self, "master_zone")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[str]:
        """
        Types of CLB.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        ID of the project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetInstancesResult(GetInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesResult(
            clb_id=self.clb_id,
            clb_lists=self.clb_lists,
            clb_name=self.clb_name,
            id=self.id,
            master_zone=self.master_zone,
            network_type=self.network_type,
            project_id=self.project_id,
            result_output_file=self.result_output_file)


def get_instances(clb_id: Optional[str] = None,
                  clb_name: Optional[str] = None,
                  master_zone: Optional[str] = None,
                  network_type: Optional[str] = None,
                  project_id: Optional[int] = None,
                  result_output_file: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesResult:
    """
    Use this data source to query detailed information of CLB

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Clb.get_instances(clb_id="lb-k2zjp9lv",
        clb_name="myclb",
        network_type="OPEN",
        project_id=0,
        result_output_file="mytestpath")
    ```
    <!--End PulumiCodeChooser -->


    :param str clb_id: ID of the CLB to be queried.
    :param str clb_name: Name of the CLB to be queried.
    :param str master_zone: Master available zone id.
    :param str network_type: Type of CLB instance, and available values include `OPEN` and `INTERNAL`.
    :param int project_id: Project ID of the CLB.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['clbId'] = clb_id
    __args__['clbName'] = clb_name
    __args__['masterZone'] = master_zone
    __args__['networkType'] = network_type
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clb/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult).value

    return AwaitableGetInstancesResult(
        clb_id=pulumi.get(__ret__, 'clb_id'),
        clb_lists=pulumi.get(__ret__, 'clb_lists'),
        clb_name=pulumi.get(__ret__, 'clb_name'),
        id=pulumi.get(__ret__, 'id'),
        master_zone=pulumi.get(__ret__, 'master_zone'),
        network_type=pulumi.get(__ret__, 'network_type'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_instances)
def get_instances_output(clb_id: Optional[pulumi.Input[Optional[str]]] = None,
                         clb_name: Optional[pulumi.Input[Optional[str]]] = None,
                         master_zone: Optional[pulumi.Input[Optional[str]]] = None,
                         network_type: Optional[pulumi.Input[Optional[str]]] = None,
                         project_id: Optional[pulumi.Input[Optional[int]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstancesResult]:
    """
    Use this data source to query detailed information of CLB

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Clb.get_instances(clb_id="lb-k2zjp9lv",
        clb_name="myclb",
        network_type="OPEN",
        project_id=0,
        result_output_file="mytestpath")
    ```
    <!--End PulumiCodeChooser -->


    :param str clb_id: ID of the CLB to be queried.
    :param str clb_name: Name of the CLB to be queried.
    :param str master_zone: Master available zone id.
    :param str network_type: Type of CLB instance, and available values include `OPEN` and `INTERNAL`.
    :param int project_id: Project ID of the CLB.
    :param str result_output_file: Used to save results.
    """
    ...
