# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WatermarkTemplateArgs', 'WatermarkTemplate']

@pulumi.input_type
class WatermarkTemplateArgs:
    def __init__(__self__, *,
                 sub_app_id: pulumi.Input[int],
                 type: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 svg_template: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']] = None,
                 text_template: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WatermarkTemplate resource.
        :param pulumi.Input[int] sub_app_id: The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
        :param pulumi.Input[str] type: Watermarking type. Valid values: image: image watermark; text: text watermark; svg: SVG watermark.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position. Valid values: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text; TopRight: the origin of coordinates is in the top-right corner of the video, and the origin of the watermark is in the top-right corner of the image or text; BottomLeft: the origin of coordinates is in the bottom-left corner of the video, and the origin of the watermark is in the bottom-left corner of the image or text; BottomRight: the origin of coordinates is in the bottom-right corner of the video, and the origin of the watermark is in the bottom-right corner of the image or text.Default value: TopLeft.
        :param pulumi.Input['WatermarkTemplateImageTemplateArgs'] image_template: Image watermarking template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param pulumi.Input[str] name: Watermarking template name. Length limit: 64 characters.
        :param pulumi.Input['WatermarkTemplateSvgTemplateArgs'] svg_template: SVG watermarking template. This field is required when `Type` is `svg` and is invalid when `Type` is `image` or `text`.
        :param pulumi.Input['WatermarkTemplateTextTemplateArgs'] text_template: Text watermarking template. This field is required when `Type` is `text` and is invalid when `Type` is `image`.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        pulumi.set(__self__, "sub_app_id", sub_app_id)
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if svg_template is not None:
            pulumi.set(__self__, "svg_template", svg_template)
        if text_template is not None:
            pulumi.set(__self__, "text_template", text_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> pulumi.Input[int]:
        """
        The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
        """
        return pulumi.get(self, "sub_app_id")

    @sub_app_id.setter
    def sub_app_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "sub_app_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Watermarking type. Valid values: image: image watermark; text: text watermark; svg: SVG watermark.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description. Length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Origin position. Valid values: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text; TopRight: the origin of coordinates is in the top-right corner of the video, and the origin of the watermark is in the top-right corner of the image or text; BottomLeft: the origin of coordinates is in the bottom-left corner of the video, and the origin of the watermark is in the bottom-left corner of the image or text; BottomRight: the origin of coordinates is in the bottom-right corner of the video, and the origin of the watermark is in the bottom-right corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]:
        """
        Image watermarking template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Watermarking template name. Length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="svgTemplate")
    def svg_template(self) -> Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]:
        """
        SVG watermarking template. This field is required when `Type` is `svg` and is invalid when `Type` is `image` or `text`.
        """
        return pulumi.get(self, "svg_template")

    @svg_template.setter
    def svg_template(self, value: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]):
        pulumi.set(self, "svg_template", value)

    @property
    @pulumi.getter(name="textTemplate")
    def text_template(self) -> Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]:
        """
        Text watermarking template. This field is required when `Type` is `text` and is invalid when `Type` is `image`.
        """
        return pulumi.get(self, "text_template")

    @text_template.setter
    def text_template(self, value: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]):
        pulumi.set(self, "text_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class _WatermarkTemplateState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 svg_template: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']] = None,
                 text_template: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WatermarkTemplate resources.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position. Valid values: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text; TopRight: the origin of coordinates is in the top-right corner of the video, and the origin of the watermark is in the top-right corner of the image or text; BottomLeft: the origin of coordinates is in the bottom-left corner of the video, and the origin of the watermark is in the bottom-left corner of the image or text; BottomRight: the origin of coordinates is in the bottom-right corner of the video, and the origin of the watermark is in the bottom-right corner of the image or text.Default value: TopLeft.
        :param pulumi.Input['WatermarkTemplateImageTemplateArgs'] image_template: Image watermarking template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param pulumi.Input[str] name: Watermarking template name. Length limit: 64 characters.
        :param pulumi.Input[int] sub_app_id: The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
        :param pulumi.Input['WatermarkTemplateSvgTemplateArgs'] svg_template: SVG watermarking template. This field is required when `Type` is `svg` and is invalid when `Type` is `image` or `text`.
        :param pulumi.Input['WatermarkTemplateTextTemplateArgs'] text_template: Text watermarking template. This field is required when `Type` is `text` and is invalid when `Type` is `image`.
        :param pulumi.Input[str] type: Watermarking type. Valid values: image: image watermark; text: text watermark; svg: SVG watermark.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sub_app_id is not None:
            pulumi.set(__self__, "sub_app_id", sub_app_id)
        if svg_template is not None:
            pulumi.set(__self__, "svg_template", svg_template)
        if text_template is not None:
            pulumi.set(__self__, "text_template", text_template)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description. Length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Origin position. Valid values: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text; TopRight: the origin of coordinates is in the top-right corner of the video, and the origin of the watermark is in the top-right corner of the image or text; BottomLeft: the origin of coordinates is in the bottom-left corner of the video, and the origin of the watermark is in the bottom-left corner of the image or text; BottomRight: the origin of coordinates is in the bottom-right corner of the video, and the origin of the watermark is in the bottom-right corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]:
        """
        Image watermarking template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Watermarking template name. Length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> Optional[pulumi.Input[int]]:
        """
        The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
        """
        return pulumi.get(self, "sub_app_id")

    @sub_app_id.setter
    def sub_app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_app_id", value)

    @property
    @pulumi.getter(name="svgTemplate")
    def svg_template(self) -> Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]:
        """
        SVG watermarking template. This field is required when `Type` is `svg` and is invalid when `Type` is `image` or `text`.
        """
        return pulumi.get(self, "svg_template")

    @svg_template.setter
    def svg_template(self, value: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]):
        pulumi.set(self, "svg_template", value)

    @property
    @pulumi.getter(name="textTemplate")
    def text_template(self) -> Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]:
        """
        Text watermarking template. This field is required when `Type` is `text` and is invalid when `Type` is `image`.
        """
        return pulumi.get(self, "text_template")

    @text_template.setter
    def text_template(self, value: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]):
        pulumi.set(self, "text_template", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Watermarking type. Valid values: image: image watermark; text: text watermark; svg: SVG watermark.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


class WatermarkTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 svg_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']]] = None,
                 text_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vod watermark template

        ## Import

        vod watermark template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vod/watermarkTemplate:WatermarkTemplate watermark_template $subAppId#$templateId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position. Valid values: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text; TopRight: the origin of coordinates is in the top-right corner of the video, and the origin of the watermark is in the top-right corner of the image or text; BottomLeft: the origin of coordinates is in the bottom-left corner of the video, and the origin of the watermark is in the bottom-left corner of the image or text; BottomRight: the origin of coordinates is in the bottom-right corner of the video, and the origin of the watermark is in the bottom-right corner of the image or text.Default value: TopLeft.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']] image_template: Image watermarking template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param pulumi.Input[str] name: Watermarking template name. Length limit: 64 characters.
        :param pulumi.Input[int] sub_app_id: The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']] svg_template: SVG watermarking template. This field is required when `Type` is `svg` and is invalid when `Type` is `image` or `text`.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']] text_template: Text watermarking template. This field is required when `Type` is `text` and is invalid when `Type` is `image`.
        :param pulumi.Input[str] type: Watermarking type. Valid values: image: image watermark; text: text watermark; svg: SVG watermark.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WatermarkTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vod watermark template

        ## Import

        vod watermark template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vod/watermarkTemplate:WatermarkTemplate watermark_template $subAppId#$templateId
        ```

        :param str resource_name: The name of the resource.
        :param WatermarkTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WatermarkTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 svg_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']]] = None,
                 text_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WatermarkTemplateArgs.__new__(WatermarkTemplateArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["coordinate_origin"] = coordinate_origin
            __props__.__dict__["image_template"] = image_template
            __props__.__dict__["name"] = name
            if sub_app_id is None and not opts.urn:
                raise TypeError("Missing required property 'sub_app_id'")
            __props__.__dict__["sub_app_id"] = sub_app_id
            __props__.__dict__["svg_template"] = svg_template
            __props__.__dict__["text_template"] = text_template
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["x_pos"] = x_pos
            __props__.__dict__["y_pos"] = y_pos
        super(WatermarkTemplate, __self__).__init__(
            'tencentcloud:Vod/watermarkTemplate:WatermarkTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            coordinate_origin: Optional[pulumi.Input[str]] = None,
            image_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sub_app_id: Optional[pulumi.Input[int]] = None,
            svg_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']]] = None,
            text_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            x_pos: Optional[pulumi.Input[str]] = None,
            y_pos: Optional[pulumi.Input[str]] = None) -> 'WatermarkTemplate':
        """
        Get an existing WatermarkTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position. Valid values: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text; TopRight: the origin of coordinates is in the top-right corner of the video, and the origin of the watermark is in the top-right corner of the image or text; BottomLeft: the origin of coordinates is in the bottom-left corner of the video, and the origin of the watermark is in the bottom-left corner of the image or text; BottomRight: the origin of coordinates is in the bottom-right corner of the video, and the origin of the watermark is in the bottom-right corner of the image or text.Default value: TopLeft.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']] image_template: Image watermarking template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        :param pulumi.Input[str] name: Watermarking template name. Length limit: 64 characters.
        :param pulumi.Input[int] sub_app_id: The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']] svg_template: SVG watermarking template. This field is required when `Type` is `svg` and is invalid when `Type` is `image` or `text`.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']] text_template: Text watermarking template. This field is required when `Type` is `text` and is invalid when `Type` is `image`.
        :param pulumi.Input[str] type: Watermarking type. Valid values: image: image watermark; text: text watermark; svg: SVG watermark.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WatermarkTemplateState.__new__(_WatermarkTemplateState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["coordinate_origin"] = coordinate_origin
        __props__.__dict__["image_template"] = image_template
        __props__.__dict__["name"] = name
        __props__.__dict__["sub_app_id"] = sub_app_id
        __props__.__dict__["svg_template"] = svg_template
        __props__.__dict__["text_template"] = text_template
        __props__.__dict__["type"] = type
        __props__.__dict__["x_pos"] = x_pos
        __props__.__dict__["y_pos"] = y_pos
        return WatermarkTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        Template description. Length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> pulumi.Output[str]:
        """
        Origin position. Valid values: TopLeft: the origin of coordinates is in the top-left corner of the video, and the origin of the watermark is in the top-left corner of the image or text; TopRight: the origin of coordinates is in the top-right corner of the video, and the origin of the watermark is in the top-right corner of the image or text; BottomLeft: the origin of coordinates is in the bottom-left corner of the video, and the origin of the watermark is in the bottom-left corner of the image or text; BottomRight: the origin of coordinates is in the bottom-right corner of the video, and the origin of the watermark is in the bottom-right corner of the image or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> pulumi.Output['outputs.WatermarkTemplateImageTemplate']:
        """
        Image watermarking template. This field is required when `Type` is `image` and is invalid when `Type` is `text`.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Watermarking template name. Length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> pulumi.Output[int]:
        """
        The VOD [application](https://intl.cloud.tencent.com/document/product/266/14574) ID. For customers who activate VOD service from December 25, 2023, if they want to access resources in a VOD application (whether it's the default application or a newly created one), they must fill in this field with the application ID.
        """
        return pulumi.get(self, "sub_app_id")

    @property
    @pulumi.getter(name="svgTemplate")
    def svg_template(self) -> pulumi.Output['outputs.WatermarkTemplateSvgTemplate']:
        """
        SVG watermarking template. This field is required when `Type` is `svg` and is invalid when `Type` is `image` or `text`.
        """
        return pulumi.get(self, "svg_template")

    @property
    @pulumi.getter(name="textTemplate")
    def text_template(self) -> pulumi.Output['outputs.WatermarkTemplateTextTemplate']:
        """
        Text watermarking template. This field is required when `Type` is `text` and is invalid when `Type` is `image`.
        """
        return pulumi.get(self, "text_template")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Watermarking type. Valid values: image: image watermark; text: text watermark; svg: SVG watermark.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> pulumi.Output[str]:
        """
        The horizontal position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `XPos` of the watermark will be the specified percentage of the video width; for example, `10%` means that `XPos` is 10% of the video width; If the string ends in px, the `XPos` of the watermark will be the specified px; for example, `100px` means that `XPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> pulumi.Output[str]:
        """
        The vertical position of the origin of the watermark relative to the origin of coordinates of the video. % and px formats are supported: If the string ends in %, the `YPos` of the watermark will be the specified percentage of the video height; for example, `10%` means that `YPos` is 10% of the video height; If the string ends in px, the `YPos` of the watermark will be the specified px; for example, `100px` means that `YPos` is 100 px.Default value: 0 px.
        """
        return pulumi.get(self, "y_pos")

