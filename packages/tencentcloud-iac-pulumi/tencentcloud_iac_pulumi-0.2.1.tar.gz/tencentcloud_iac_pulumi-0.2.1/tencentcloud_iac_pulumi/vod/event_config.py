# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EventConfigArgs', 'EventConfig']

@pulumi.input_type
class EventConfigArgs:
    def __init__(__self__, *,
                 sub_app_id: pulumi.Input[int],
                 delete_media_complete_event_switch: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 notification_url: Optional[pulumi.Input[str]] = None,
                 upload_media_complete_event_switch: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EventConfig resource.
        :param pulumi.Input[int] sub_app_id: Sub app id.
        :param pulumi.Input[str] delete_media_complete_event_switch: Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON` is to receive event notification.
        :param pulumi.Input[str] mode: How to receive event notifications. Valid values:
               - Push: HTTP callback notification;
               - PULL: Reliable notification based on message queuing.
        :param pulumi.Input[str] notification_url: The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        :param pulumi.Input[str] upload_media_complete_event_switch: Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification, `ON` means to receive event notification.
        """
        pulumi.set(__self__, "sub_app_id", sub_app_id)
        if delete_media_complete_event_switch is not None:
            pulumi.set(__self__, "delete_media_complete_event_switch", delete_media_complete_event_switch)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if notification_url is not None:
            pulumi.set(__self__, "notification_url", notification_url)
        if upload_media_complete_event_switch is not None:
            pulumi.set(__self__, "upload_media_complete_event_switch", upload_media_complete_event_switch)

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> pulumi.Input[int]:
        """
        Sub app id.
        """
        return pulumi.get(self, "sub_app_id")

    @sub_app_id.setter
    def sub_app_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "sub_app_id", value)

    @property
    @pulumi.getter(name="deleteMediaCompleteEventSwitch")
    def delete_media_complete_event_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON` is to receive event notification.
        """
        return pulumi.get(self, "delete_media_complete_event_switch")

    @delete_media_complete_event_switch.setter
    def delete_media_complete_event_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_media_complete_event_switch", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        How to receive event notifications. Valid values:
        - Push: HTTP callback notification;
        - PULL: Reliable notification based on message queuing.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="notificationUrl")
    def notification_url(self) -> Optional[pulumi.Input[str]]:
        """
        The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        """
        return pulumi.get(self, "notification_url")

    @notification_url.setter
    def notification_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_url", value)

    @property
    @pulumi.getter(name="uploadMediaCompleteEventSwitch")
    def upload_media_complete_event_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification, `ON` means to receive event notification.
        """
        return pulumi.get(self, "upload_media_complete_event_switch")

    @upload_media_complete_event_switch.setter
    def upload_media_complete_event_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_media_complete_event_switch", value)


@pulumi.input_type
class _EventConfigState:
    def __init__(__self__, *,
                 delete_media_complete_event_switch: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 notification_url: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 upload_media_complete_event_switch: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EventConfig resources.
        :param pulumi.Input[str] delete_media_complete_event_switch: Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON` is to receive event notification.
        :param pulumi.Input[str] mode: How to receive event notifications. Valid values:
               - Push: HTTP callback notification;
               - PULL: Reliable notification based on message queuing.
        :param pulumi.Input[str] notification_url: The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        :param pulumi.Input[int] sub_app_id: Sub app id.
        :param pulumi.Input[str] upload_media_complete_event_switch: Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification, `ON` means to receive event notification.
        """
        if delete_media_complete_event_switch is not None:
            pulumi.set(__self__, "delete_media_complete_event_switch", delete_media_complete_event_switch)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if notification_url is not None:
            pulumi.set(__self__, "notification_url", notification_url)
        if sub_app_id is not None:
            pulumi.set(__self__, "sub_app_id", sub_app_id)
        if upload_media_complete_event_switch is not None:
            pulumi.set(__self__, "upload_media_complete_event_switch", upload_media_complete_event_switch)

    @property
    @pulumi.getter(name="deleteMediaCompleteEventSwitch")
    def delete_media_complete_event_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON` is to receive event notification.
        """
        return pulumi.get(self, "delete_media_complete_event_switch")

    @delete_media_complete_event_switch.setter
    def delete_media_complete_event_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_media_complete_event_switch", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        How to receive event notifications. Valid values:
        - Push: HTTP callback notification;
        - PULL: Reliable notification based on message queuing.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="notificationUrl")
    def notification_url(self) -> Optional[pulumi.Input[str]]:
        """
        The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        """
        return pulumi.get(self, "notification_url")

    @notification_url.setter
    def notification_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_url", value)

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> Optional[pulumi.Input[int]]:
        """
        Sub app id.
        """
        return pulumi.get(self, "sub_app_id")

    @sub_app_id.setter
    def sub_app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_app_id", value)

    @property
    @pulumi.getter(name="uploadMediaCompleteEventSwitch")
    def upload_media_complete_event_switch(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification, `ON` means to receive event notification.
        """
        return pulumi.get(self, "upload_media_complete_event_switch")

    @upload_media_complete_event_switch.setter
    def upload_media_complete_event_switch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_media_complete_event_switch", value)


class EventConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_media_complete_event_switch: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 notification_url: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 upload_media_complete_event_switch: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a vod event config.

        ## Import

        VOD event config can be imported using the subAppId, e.g.

        ```sh
        $ pulumi import tencentcloud:Vod/eventConfig:EventConfig foo $subAppId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_media_complete_event_switch: Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON` is to receive event notification.
        :param pulumi.Input[str] mode: How to receive event notifications. Valid values:
               - Push: HTTP callback notification;
               - PULL: Reliable notification based on message queuing.
        :param pulumi.Input[str] notification_url: The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        :param pulumi.Input[int] sub_app_id: Sub app id.
        :param pulumi.Input[str] upload_media_complete_event_switch: Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification, `ON` means to receive event notification.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a vod event config.

        ## Import

        VOD event config can be imported using the subAppId, e.g.

        ```sh
        $ pulumi import tencentcloud:Vod/eventConfig:EventConfig foo $subAppId
        ```

        :param str resource_name: The name of the resource.
        :param EventConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_media_complete_event_switch: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 notification_url: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 upload_media_complete_event_switch: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventConfigArgs.__new__(EventConfigArgs)

            __props__.__dict__["delete_media_complete_event_switch"] = delete_media_complete_event_switch
            __props__.__dict__["mode"] = mode
            __props__.__dict__["notification_url"] = notification_url
            if sub_app_id is None and not opts.urn:
                raise TypeError("Missing required property 'sub_app_id'")
            __props__.__dict__["sub_app_id"] = sub_app_id
            __props__.__dict__["upload_media_complete_event_switch"] = upload_media_complete_event_switch
        super(EventConfig, __self__).__init__(
            'tencentcloud:Vod/eventConfig:EventConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_media_complete_event_switch: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            notification_url: Optional[pulumi.Input[str]] = None,
            sub_app_id: Optional[pulumi.Input[int]] = None,
            upload_media_complete_event_switch: Optional[pulumi.Input[str]] = None) -> 'EventConfig':
        """
        Get an existing EventConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_media_complete_event_switch: Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON` is to receive event notification.
        :param pulumi.Input[str] mode: How to receive event notifications. Valid values:
               - Push: HTTP callback notification;
               - PULL: Reliable notification based on message queuing.
        :param pulumi.Input[str] notification_url: The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        :param pulumi.Input[int] sub_app_id: Sub app id.
        :param pulumi.Input[str] upload_media_complete_event_switch: Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification, `ON` means to receive event notification.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventConfigState.__new__(_EventConfigState)

        __props__.__dict__["delete_media_complete_event_switch"] = delete_media_complete_event_switch
        __props__.__dict__["mode"] = mode
        __props__.__dict__["notification_url"] = notification_url
        __props__.__dict__["sub_app_id"] = sub_app_id
        __props__.__dict__["upload_media_complete_event_switch"] = upload_media_complete_event_switch
        return EventConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteMediaCompleteEventSwitch")
    def delete_media_complete_event_switch(self) -> pulumi.Output[str]:
        """
        Whether to receive video deletion completion event notification, default `OFF` is to ignore the event notification, `ON` is to receive event notification.
        """
        return pulumi.get(self, "delete_media_complete_event_switch")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        How to receive event notifications. Valid values:
        - Push: HTTP callback notification;
        - PULL: Reliable notification based on message queuing.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="notificationUrl")
    def notification_url(self) -> pulumi.Output[Optional[str]]:
        """
        The address used to receive 3.0 format callbacks when receiving HTTP callback notifications. Note: If you take the NotificationUrl parameter and the value is an empty string, the 3.0 format callback address is cleared.
        """
        return pulumi.get(self, "notification_url")

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> pulumi.Output[int]:
        """
        Sub app id.
        """
        return pulumi.get(self, "sub_app_id")

    @property
    @pulumi.getter(name="uploadMediaCompleteEventSwitch")
    def upload_media_complete_event_switch(self) -> pulumi.Output[str]:
        """
        Whether to receive video upload completion event notification, default `OFF` means to ignore the event notification, `ON` means to receive event notification.
        """
        return pulumi.get(self, "upload_media_complete_event_switch")

