# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SuperPlayerConfigArgs', 'SuperPlayerConfig']

@pulumi.input_type
class SuperPlayerConfigArgs:
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_definition: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 drm_streaming_info: Optional[pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs']] = None,
                 drm_switch: Optional[pulumi.Input[bool]] = None,
                 image_sprite_definition: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_names: Optional[pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SuperPlayerConfig resource.
        :param pulumi.Input[str] adaptive_dynamic_streaming_definition: ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] domain: Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
        :param pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs'] drm_streaming_info: Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
        :param pulumi.Input[bool] drm_switch: Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
        :param pulumi.Input[str] image_sprite_definition: ID of the image sprite template that allows output.
        :param pulumi.Input[str] name: Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
        :param pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]] resolution_names: Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
        :param pulumi.Input[str] scheme: Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
        :param pulumi.Input[int] sub_app_id: Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        """
        if adaptive_dynamic_streaming_definition is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_definition", adaptive_dynamic_streaming_definition)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if drm_streaming_info is not None:
            pulumi.set(__self__, "drm_streaming_info", drm_streaming_info)
        if drm_switch is not None:
            pulumi.set(__self__, "drm_switch", drm_switch)
        if image_sprite_definition is not None:
            pulumi.set(__self__, "image_sprite_definition", image_sprite_definition)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resolution_names is not None:
            pulumi.set(__self__, "resolution_names", resolution_names)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if sub_app_id is not None:
            pulumi.set(__self__, "sub_app_id", sub_app_id)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingDefinition")
    def adaptive_dynamic_streaming_definition(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
        """
        return pulumi.get(self, "adaptive_dynamic_streaming_definition")

    @adaptive_dynamic_streaming_definition.setter
    def adaptive_dynamic_streaming_definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adaptive_dynamic_streaming_definition", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description. Length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="drmStreamingInfo")
    def drm_streaming_info(self) -> Optional[pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs']]:
        """
        Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
        """
        return pulumi.get(self, "drm_streaming_info")

    @drm_streaming_info.setter
    def drm_streaming_info(self, value: Optional[pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs']]):
        pulumi.set(self, "drm_streaming_info", value)

    @property
    @pulumi.getter(name="drmSwitch")
    def drm_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
        """
        return pulumi.get(self, "drm_switch")

    @drm_switch.setter
    def drm_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drm_switch", value)

    @property
    @pulumi.getter(name="imageSpriteDefinition")
    def image_sprite_definition(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the image sprite template that allows output.
        """
        return pulumi.get(self, "image_sprite_definition")

    @image_sprite_definition.setter
    def image_sprite_definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_sprite_definition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resolutionNames")
    def resolution_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]]]:
        """
        Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
        """
        return pulumi.get(self, "resolution_names")

    @resolution_names.setter
    def resolution_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]]]):
        pulumi.set(self, "resolution_names", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> Optional[pulumi.Input[int]]:
        """
        Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        """
        return pulumi.get(self, "sub_app_id")

    @sub_app_id.setter
    def sub_app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_app_id", value)


@pulumi.input_type
class _SuperPlayerConfigState:
    def __init__(__self__, *,
                 adaptive_dynamic_streaming_definition: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 drm_streaming_info: Optional[pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs']] = None,
                 drm_switch: Optional[pulumi.Input[bool]] = None,
                 image_sprite_definition: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_names: Optional[pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SuperPlayerConfig resources.
        :param pulumi.Input[str] adaptive_dynamic_streaming_definition: ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] create_time: Creation time of template in ISO date format.
        :param pulumi.Input[str] domain: Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
        :param pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs'] drm_streaming_info: Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
        :param pulumi.Input[bool] drm_switch: Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
        :param pulumi.Input[str] image_sprite_definition: ID of the image sprite template that allows output.
        :param pulumi.Input[str] name: Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
        :param pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]] resolution_names: Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
        :param pulumi.Input[str] scheme: Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
        :param pulumi.Input[int] sub_app_id: Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        :param pulumi.Input[str] update_time: Last modified time of template in ISO date format.
        """
        if adaptive_dynamic_streaming_definition is not None:
            pulumi.set(__self__, "adaptive_dynamic_streaming_definition", adaptive_dynamic_streaming_definition)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if drm_streaming_info is not None:
            pulumi.set(__self__, "drm_streaming_info", drm_streaming_info)
        if drm_switch is not None:
            pulumi.set(__self__, "drm_switch", drm_switch)
        if image_sprite_definition is not None:
            pulumi.set(__self__, "image_sprite_definition", image_sprite_definition)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resolution_names is not None:
            pulumi.set(__self__, "resolution_names", resolution_names)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if sub_app_id is not None:
            pulumi.set(__self__, "sub_app_id", sub_app_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingDefinition")
    def adaptive_dynamic_streaming_definition(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
        """
        return pulumi.get(self, "adaptive_dynamic_streaming_definition")

    @adaptive_dynamic_streaming_definition.setter
    def adaptive_dynamic_streaming_definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adaptive_dynamic_streaming_definition", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description. Length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of template in ISO date format.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="drmStreamingInfo")
    def drm_streaming_info(self) -> Optional[pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs']]:
        """
        Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
        """
        return pulumi.get(self, "drm_streaming_info")

    @drm_streaming_info.setter
    def drm_streaming_info(self, value: Optional[pulumi.Input['SuperPlayerConfigDrmStreamingInfoArgs']]):
        pulumi.set(self, "drm_streaming_info", value)

    @property
    @pulumi.getter(name="drmSwitch")
    def drm_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
        """
        return pulumi.get(self, "drm_switch")

    @drm_switch.setter
    def drm_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "drm_switch", value)

    @property
    @pulumi.getter(name="imageSpriteDefinition")
    def image_sprite_definition(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the image sprite template that allows output.
        """
        return pulumi.get(self, "image_sprite_definition")

    @image_sprite_definition.setter
    def image_sprite_definition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_sprite_definition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resolutionNames")
    def resolution_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]]]:
        """
        Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
        """
        return pulumi.get(self, "resolution_names")

    @resolution_names.setter
    def resolution_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SuperPlayerConfigResolutionNameArgs']]]]):
        pulumi.set(self, "resolution_names", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> Optional[pulumi.Input[int]]:
        """
        Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        """
        return pulumi.get(self, "sub_app_id")

    @sub_app_id.setter
    def sub_app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sub_app_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modified time of template in ISO date format.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class SuperPlayerConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adaptive_dynamic_streaming_definition: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 drm_streaming_info: Optional[pulumi.Input[pulumi.InputType['SuperPlayerConfigDrmStreamingInfoArgs']]] = None,
                 drm_switch: Optional[pulumi.Input[bool]] = None,
                 image_sprite_definition: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuperPlayerConfigResolutionNameArgs']]]]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provide a resource to create a VOD super player config.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo_adaptive_dynamic_streaming_template = tencentcloud.vod.AdaptiveDynamicStreamingTemplate("fooAdaptiveDynamicStreamingTemplate",
            format="HLS",
            drm_type="SimpleAES",
            disable_higher_video_bitrate=False,
            disable_higher_video_resolution=False,
            comment="test",
            stream_infos=[
                tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    video=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        codec="libx265",
                        fps=4,
                        bitrate=129,
                        resolution_adaptive=False,
                        width=128,
                        height=128,
                        fill_type="stretch",
                    ),
                    audio=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        codec="libmp3lame",
                        bitrate=129,
                        sample_rate=44100,
                        audio_channel="dual",
                    ),
                    remove_audio=False,
                ),
                tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    video=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        codec="libx264",
                        fps=4,
                        bitrate=256,
                    ),
                    audio=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        codec="libfdk_aac",
                        bitrate=256,
                        sample_rate=44100,
                    ),
                    remove_audio=True,
                ),
            ])
        foo_image_sprite_template = tencentcloud.vod.ImageSpriteTemplate("fooImageSpriteTemplate",
            sample_type="Percent",
            sample_interval=10,
            row_count=3,
            column_count=3,
            comment="test",
            fill_type="stretch",
            width=128,
            height=128,
            resolution_adaptive=False)
        foo_super_player_config = tencentcloud.vod.SuperPlayerConfig("fooSuperPlayerConfig",
            drm_switch=True,
            drm_streaming_info=tencentcloud.vod.SuperPlayerConfigDrmStreamingInfoArgs(
                simple_aes_definition=foo_adaptive_dynamic_streaming_template.id,
            ),
            image_sprite_definition=foo_image_sprite_template.id,
            resolution_names=[
                tencentcloud.vod.SuperPlayerConfigResolutionNameArgs(
                    min_edge_length=889,
                    name="test1",
                ),
                tencentcloud.vod.SuperPlayerConfigResolutionNameArgs(
                    min_edge_length=890,
                    name="test2",
                ),
            ],
            domain="Default",
            scheme="Default",
            comment="test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VOD super player config can be imported using the name, e.g.

        ```sh
        $ pulumi import tencentcloud:Vod/superPlayerConfig:SuperPlayerConfig foo tf-super-player
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adaptive_dynamic_streaming_definition: ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] domain: Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
        :param pulumi.Input[pulumi.InputType['SuperPlayerConfigDrmStreamingInfoArgs']] drm_streaming_info: Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
        :param pulumi.Input[bool] drm_switch: Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
        :param pulumi.Input[str] image_sprite_definition: ID of the image sprite template that allows output.
        :param pulumi.Input[str] name: Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuperPlayerConfigResolutionNameArgs']]]] resolution_names: Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
        :param pulumi.Input[str] scheme: Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
        :param pulumi.Input[int] sub_app_id: Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SuperPlayerConfigArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a VOD super player config.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo_adaptive_dynamic_streaming_template = tencentcloud.vod.AdaptiveDynamicStreamingTemplate("fooAdaptiveDynamicStreamingTemplate",
            format="HLS",
            drm_type="SimpleAES",
            disable_higher_video_bitrate=False,
            disable_higher_video_resolution=False,
            comment="test",
            stream_infos=[
                tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    video=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        codec="libx265",
                        fps=4,
                        bitrate=129,
                        resolution_adaptive=False,
                        width=128,
                        height=128,
                        fill_type="stretch",
                    ),
                    audio=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        codec="libmp3lame",
                        bitrate=129,
                        sample_rate=44100,
                        audio_channel="dual",
                    ),
                    remove_audio=False,
                ),
                tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    video=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        codec="libx264",
                        fps=4,
                        bitrate=256,
                    ),
                    audio=tencentcloud.vod.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        codec="libfdk_aac",
                        bitrate=256,
                        sample_rate=44100,
                    ),
                    remove_audio=True,
                ),
            ])
        foo_image_sprite_template = tencentcloud.vod.ImageSpriteTemplate("fooImageSpriteTemplate",
            sample_type="Percent",
            sample_interval=10,
            row_count=3,
            column_count=3,
            comment="test",
            fill_type="stretch",
            width=128,
            height=128,
            resolution_adaptive=False)
        foo_super_player_config = tencentcloud.vod.SuperPlayerConfig("fooSuperPlayerConfig",
            drm_switch=True,
            drm_streaming_info=tencentcloud.vod.SuperPlayerConfigDrmStreamingInfoArgs(
                simple_aes_definition=foo_adaptive_dynamic_streaming_template.id,
            ),
            image_sprite_definition=foo_image_sprite_template.id,
            resolution_names=[
                tencentcloud.vod.SuperPlayerConfigResolutionNameArgs(
                    min_edge_length=889,
                    name="test1",
                ),
                tencentcloud.vod.SuperPlayerConfigResolutionNameArgs(
                    min_edge_length=890,
                    name="test2",
                ),
            ],
            domain="Default",
            scheme="Default",
            comment="test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VOD super player config can be imported using the name, e.g.

        ```sh
        $ pulumi import tencentcloud:Vod/superPlayerConfig:SuperPlayerConfig foo tf-super-player
        ```

        :param str resource_name: The name of the resource.
        :param SuperPlayerConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SuperPlayerConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 adaptive_dynamic_streaming_definition: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 drm_streaming_info: Optional[pulumi.Input[pulumi.InputType['SuperPlayerConfigDrmStreamingInfoArgs']]] = None,
                 drm_switch: Optional[pulumi.Input[bool]] = None,
                 image_sprite_definition: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuperPlayerConfigResolutionNameArgs']]]]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 sub_app_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SuperPlayerConfigArgs.__new__(SuperPlayerConfigArgs)

            __props__.__dict__["adaptive_dynamic_streaming_definition"] = adaptive_dynamic_streaming_definition
            __props__.__dict__["comment"] = comment
            __props__.__dict__["domain"] = domain
            __props__.__dict__["drm_streaming_info"] = drm_streaming_info
            __props__.__dict__["drm_switch"] = drm_switch
            __props__.__dict__["image_sprite_definition"] = image_sprite_definition
            __props__.__dict__["name"] = name
            __props__.__dict__["resolution_names"] = resolution_names
            __props__.__dict__["scheme"] = scheme
            __props__.__dict__["sub_app_id"] = sub_app_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(SuperPlayerConfig, __self__).__init__(
            'tencentcloud:Vod/superPlayerConfig:SuperPlayerConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            adaptive_dynamic_streaming_definition: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            drm_streaming_info: Optional[pulumi.Input[pulumi.InputType['SuperPlayerConfigDrmStreamingInfoArgs']]] = None,
            drm_switch: Optional[pulumi.Input[bool]] = None,
            image_sprite_definition: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resolution_names: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuperPlayerConfigResolutionNameArgs']]]]] = None,
            scheme: Optional[pulumi.Input[str]] = None,
            sub_app_id: Optional[pulumi.Input[int]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'SuperPlayerConfig':
        """
        Get an existing SuperPlayerConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] adaptive_dynamic_streaming_definition: ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
        :param pulumi.Input[str] comment: Template description. Length limit: 256 characters.
        :param pulumi.Input[str] create_time: Creation time of template in ISO date format.
        :param pulumi.Input[str] domain: Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
        :param pulumi.Input[pulumi.InputType['SuperPlayerConfigDrmStreamingInfoArgs']] drm_streaming_info: Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
        :param pulumi.Input[bool] drm_switch: Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
        :param pulumi.Input[str] image_sprite_definition: ID of the image sprite template that allows output.
        :param pulumi.Input[str] name: Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SuperPlayerConfigResolutionNameArgs']]]] resolution_names: Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
        :param pulumi.Input[str] scheme: Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
        :param pulumi.Input[int] sub_app_id: Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        :param pulumi.Input[str] update_time: Last modified time of template in ISO date format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SuperPlayerConfigState.__new__(_SuperPlayerConfigState)

        __props__.__dict__["adaptive_dynamic_streaming_definition"] = adaptive_dynamic_streaming_definition
        __props__.__dict__["comment"] = comment
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["domain"] = domain
        __props__.__dict__["drm_streaming_info"] = drm_streaming_info
        __props__.__dict__["drm_switch"] = drm_switch
        __props__.__dict__["image_sprite_definition"] = image_sprite_definition
        __props__.__dict__["name"] = name
        __props__.__dict__["resolution_names"] = resolution_names
        __props__.__dict__["scheme"] = scheme
        __props__.__dict__["sub_app_id"] = sub_app_id
        __props__.__dict__["update_time"] = update_time
        return SuperPlayerConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adaptiveDynamicStreamingDefinition")
    def adaptive_dynamic_streaming_definition(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the unencrypted adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `false`.
        """
        return pulumi.get(self, "adaptive_dynamic_streaming_definition")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Template description. Length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of template in ISO date format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        Domain name used for playback. If it is left empty or set to `Default`, the domain name configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. `Default` by default.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="drmStreamingInfo")
    def drm_streaming_info(self) -> pulumi.Output[Optional['outputs.SuperPlayerConfigDrmStreamingInfo']]:
        """
        Content of the DRM-protected adaptive bitrate streaming template that allows output, which is required if `drm_switch` is `true`.
        """
        return pulumi.get(self, "drm_streaming_info")

    @property
    @pulumi.getter(name="drmSwitch")
    def drm_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        Switch of DRM-protected adaptive bitstream playback: `true`: enabled, indicating to play back only output adaptive bitstreams protected by DRM; `false`: disabled, indicating to play back unencrypted output adaptive bitstreams. Default value: `false`.
        """
        return pulumi.get(self, "drm_switch")

    @property
    @pulumi.getter(name="imageSpriteDefinition")
    def image_sprite_definition(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the image sprite template that allows output.
        """
        return pulumi.get(self, "image_sprite_definition")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Player configuration name, which can contain up to 64 letters, digits, underscores, and hyphens (such as test_ABC-123) and must be unique under a user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resolutionNames")
    def resolution_names(self) -> pulumi.Output[Optional[Sequence['outputs.SuperPlayerConfigResolutionName']]]:
        """
        Display name of player for substreams with different resolutions. If this parameter is left empty or an empty array, the default configuration will be used: `min_edge_length: 240, name: LD`; `min_edge_length: 480, name: SD`; `min_edge_length: 720, name: HD`; `min_edge_length: 1080, name: FHD`; `min_edge_length: 1440, name: 2K`; `min_edge_length: 2160, name: 4K`; `min_edge_length: 4320, name: 8K`.
        """
        return pulumi.get(self, "resolution_names")

    @property
    @pulumi.getter
    def scheme(self) -> pulumi.Output[Optional[str]]:
        """
        Scheme used for playback. If it is left empty or set to `Default`, the scheme configured in [Default Distribution Configuration](https://cloud.tencent.com/document/product/266/33373) will be used. Other valid values: `HTTP`; `HTTPS`.
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter(name="subAppId")
    def sub_app_id(self) -> pulumi.Output[Optional[int]]:
        """
        Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
        """
        return pulumi.get(self, "sub_app_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Last modified time of template in ISO date format.
        """
        return pulumi.get(self, "update_time")

