# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConfigInstanceRoGroupArgs', 'ConfigInstanceRoGroup']

@pulumi.input_type
class ConfigInstanceRoGroupArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 read_only_group_id: pulumi.Input[str],
                 auto_weight: Optional[pulumi.Input[int]] = None,
                 balance_weight: Optional[pulumi.Input[int]] = None,
                 is_offline_delay: Optional[pulumi.Input[int]] = None,
                 min_read_only_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 read_only_max_delay_time: Optional[pulumi.Input[int]] = None,
                 weight_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]]] = None):
        """
        The set of arguments for constructing a ConfigInstanceRoGroup resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] read_only_group_id: Read-only group ID.
        :param pulumi.Input[int] auto_weight: 0-user-defined weight (adjusted according to WeightPairs), 1-system automatically assigns weight (WeightPairs is invalid), the default is 0.
        :param pulumi.Input[int] balance_weight: 0-do not rebalance the load, 1-rebalance the load, the default is 0.
        :param pulumi.Input[int] is_offline_delay: Whether to enable timeout culling function. 0- Disable the culling function. 1- Enable the culling function.
        :param pulumi.Input[int] min_read_only_in_group: After the timeout removal function is enabled, the number of read-only copies retained by the read-only group at least, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[str] read_only_group_name: Read-only group name. If this parameter is not specified, it is not modified.
        :param pulumi.Input[int] read_only_max_delay_time: After the timeout elimination function is enabled, the timeout threshold used, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]] weight_pairs: Read-only group instance weight modification set, if this parameter is not filled, it will not be modified.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "read_only_group_id", read_only_group_id)
        if auto_weight is not None:
            pulumi.set(__self__, "auto_weight", auto_weight)
        if balance_weight is not None:
            pulumi.set(__self__, "balance_weight", balance_weight)
        if is_offline_delay is not None:
            pulumi.set(__self__, "is_offline_delay", is_offline_delay)
        if min_read_only_in_group is not None:
            pulumi.set(__self__, "min_read_only_in_group", min_read_only_in_group)
        if read_only_group_name is not None:
            pulumi.set(__self__, "read_only_group_name", read_only_group_name)
        if read_only_max_delay_time is not None:
            pulumi.set(__self__, "read_only_max_delay_time", read_only_max_delay_time)
        if weight_pairs is not None:
            pulumi.set(__self__, "weight_pairs", weight_pairs)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> pulumi.Input[str]:
        """
        Read-only group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "read_only_group_id", value)

    @property
    @pulumi.getter(name="autoWeight")
    def auto_weight(self) -> Optional[pulumi.Input[int]]:
        """
        0-user-defined weight (adjusted according to WeightPairs), 1-system automatically assigns weight (WeightPairs is invalid), the default is 0.
        """
        return pulumi.get(self, "auto_weight")

    @auto_weight.setter
    def auto_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_weight", value)

    @property
    @pulumi.getter(name="balanceWeight")
    def balance_weight(self) -> Optional[pulumi.Input[int]]:
        """
        0-do not rebalance the load, 1-rebalance the load, the default is 0.
        """
        return pulumi.get(self, "balance_weight")

    @balance_weight.setter
    def balance_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "balance_weight", value)

    @property
    @pulumi.getter(name="isOfflineDelay")
    def is_offline_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable timeout culling function. 0- Disable the culling function. 1- Enable the culling function.
        """
        return pulumi.get(self, "is_offline_delay")

    @is_offline_delay.setter
    def is_offline_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_offline_delay", value)

    @property
    @pulumi.getter(name="minReadOnlyInGroup")
    def min_read_only_in_group(self) -> Optional[pulumi.Input[int]]:
        """
        After the timeout removal function is enabled, the number of read-only copies retained by the read-only group at least, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "min_read_only_in_group")

    @min_read_only_in_group.setter
    def min_read_only_in_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_read_only_in_group", value)

    @property
    @pulumi.getter(name="readOnlyGroupName")
    def read_only_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Read-only group name. If this parameter is not specified, it is not modified.
        """
        return pulumi.get(self, "read_only_group_name")

    @read_only_group_name.setter
    def read_only_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_name", value)

    @property
    @pulumi.getter(name="readOnlyMaxDelayTime")
    def read_only_max_delay_time(self) -> Optional[pulumi.Input[int]]:
        """
        After the timeout elimination function is enabled, the timeout threshold used, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "read_only_max_delay_time")

    @read_only_max_delay_time.setter
    def read_only_max_delay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_max_delay_time", value)

    @property
    @pulumi.getter(name="weightPairs")
    def weight_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]]]:
        """
        Read-only group instance weight modification set, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "weight_pairs")

    @weight_pairs.setter
    def weight_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]]]):
        pulumi.set(self, "weight_pairs", value)


@pulumi.input_type
class _ConfigInstanceRoGroupState:
    def __init__(__self__, *,
                 auto_weight: Optional[pulumi.Input[int]] = None,
                 balance_weight: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_offline_delay: Optional[pulumi.Input[int]] = None,
                 min_read_only_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 read_only_max_delay_time: Optional[pulumi.Input[int]] = None,
                 weight_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]]] = None):
        """
        Input properties used for looking up and filtering ConfigInstanceRoGroup resources.
        :param pulumi.Input[int] auto_weight: 0-user-defined weight (adjusted according to WeightPairs), 1-system automatically assigns weight (WeightPairs is invalid), the default is 0.
        :param pulumi.Input[int] balance_weight: 0-do not rebalance the load, 1-rebalance the load, the default is 0.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] is_offline_delay: Whether to enable timeout culling function. 0- Disable the culling function. 1- Enable the culling function.
        :param pulumi.Input[int] min_read_only_in_group: After the timeout removal function is enabled, the number of read-only copies retained by the read-only group at least, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[str] read_only_group_id: Read-only group ID.
        :param pulumi.Input[str] read_only_group_name: Read-only group name. If this parameter is not specified, it is not modified.
        :param pulumi.Input[int] read_only_max_delay_time: After the timeout elimination function is enabled, the timeout threshold used, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]] weight_pairs: Read-only group instance weight modification set, if this parameter is not filled, it will not be modified.
        """
        if auto_weight is not None:
            pulumi.set(__self__, "auto_weight", auto_weight)
        if balance_weight is not None:
            pulumi.set(__self__, "balance_weight", balance_weight)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_offline_delay is not None:
            pulumi.set(__self__, "is_offline_delay", is_offline_delay)
        if min_read_only_in_group is not None:
            pulumi.set(__self__, "min_read_only_in_group", min_read_only_in_group)
        if read_only_group_id is not None:
            pulumi.set(__self__, "read_only_group_id", read_only_group_id)
        if read_only_group_name is not None:
            pulumi.set(__self__, "read_only_group_name", read_only_group_name)
        if read_only_max_delay_time is not None:
            pulumi.set(__self__, "read_only_max_delay_time", read_only_max_delay_time)
        if weight_pairs is not None:
            pulumi.set(__self__, "weight_pairs", weight_pairs)

    @property
    @pulumi.getter(name="autoWeight")
    def auto_weight(self) -> Optional[pulumi.Input[int]]:
        """
        0-user-defined weight (adjusted according to WeightPairs), 1-system automatically assigns weight (WeightPairs is invalid), the default is 0.
        """
        return pulumi.get(self, "auto_weight")

    @auto_weight.setter
    def auto_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_weight", value)

    @property
    @pulumi.getter(name="balanceWeight")
    def balance_weight(self) -> Optional[pulumi.Input[int]]:
        """
        0-do not rebalance the load, 1-rebalance the load, the default is 0.
        """
        return pulumi.get(self, "balance_weight")

    @balance_weight.setter
    def balance_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "balance_weight", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isOfflineDelay")
    def is_offline_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable timeout culling function. 0- Disable the culling function. 1- Enable the culling function.
        """
        return pulumi.get(self, "is_offline_delay")

    @is_offline_delay.setter
    def is_offline_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_offline_delay", value)

    @property
    @pulumi.getter(name="minReadOnlyInGroup")
    def min_read_only_in_group(self) -> Optional[pulumi.Input[int]]:
        """
        After the timeout removal function is enabled, the number of read-only copies retained by the read-only group at least, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "min_read_only_in_group")

    @min_read_only_in_group.setter
    def min_read_only_in_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_read_only_in_group", value)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Read-only group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_id", value)

    @property
    @pulumi.getter(name="readOnlyGroupName")
    def read_only_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Read-only group name. If this parameter is not specified, it is not modified.
        """
        return pulumi.get(self, "read_only_group_name")

    @read_only_group_name.setter
    def read_only_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_name", value)

    @property
    @pulumi.getter(name="readOnlyMaxDelayTime")
    def read_only_max_delay_time(self) -> Optional[pulumi.Input[int]]:
        """
        After the timeout elimination function is enabled, the timeout threshold used, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "read_only_max_delay_time")

    @read_only_max_delay_time.setter
    def read_only_max_delay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_max_delay_time", value)

    @property
    @pulumi.getter(name="weightPairs")
    def weight_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]]]:
        """
        Read-only group instance weight modification set, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "weight_pairs")

    @weight_pairs.setter
    def weight_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigInstanceRoGroupWeightPairArgs']]]]):
        pulumi.set(self, "weight_pairs", value)


class ConfigInstanceRoGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_weight: Optional[pulumi.Input[int]] = None,
                 balance_weight: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_offline_delay: Optional[pulumi.Input[int]] = None,
                 min_read_only_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 read_only_max_delay_time: Optional[pulumi.Input[int]] = None,
                 weight_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigInstanceRoGroupWeightPairArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver config_instance_ro_group

        ## Import

        sqlserver config_instance_ro_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/configInstanceRoGroup:ConfigInstanceRoGroup example mssql-ds1xhnt9#mssqlro-o6dv2ugx#0#0
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_weight: 0-user-defined weight (adjusted according to WeightPairs), 1-system automatically assigns weight (WeightPairs is invalid), the default is 0.
        :param pulumi.Input[int] balance_weight: 0-do not rebalance the load, 1-rebalance the load, the default is 0.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] is_offline_delay: Whether to enable timeout culling function. 0- Disable the culling function. 1- Enable the culling function.
        :param pulumi.Input[int] min_read_only_in_group: After the timeout removal function is enabled, the number of read-only copies retained by the read-only group at least, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[str] read_only_group_id: Read-only group ID.
        :param pulumi.Input[str] read_only_group_name: Read-only group name. If this parameter is not specified, it is not modified.
        :param pulumi.Input[int] read_only_max_delay_time: After the timeout elimination function is enabled, the timeout threshold used, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigInstanceRoGroupWeightPairArgs']]]] weight_pairs: Read-only group instance weight modification set, if this parameter is not filled, it will not be modified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigInstanceRoGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver config_instance_ro_group

        ## Import

        sqlserver config_instance_ro_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/configInstanceRoGroup:ConfigInstanceRoGroup example mssql-ds1xhnt9#mssqlro-o6dv2ugx#0#0
        ```

        :param str resource_name: The name of the resource.
        :param ConfigInstanceRoGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigInstanceRoGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_weight: Optional[pulumi.Input[int]] = None,
                 balance_weight: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_offline_delay: Optional[pulumi.Input[int]] = None,
                 min_read_only_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 read_only_max_delay_time: Optional[pulumi.Input[int]] = None,
                 weight_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigInstanceRoGroupWeightPairArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigInstanceRoGroupArgs.__new__(ConfigInstanceRoGroupArgs)

            __props__.__dict__["auto_weight"] = auto_weight
            __props__.__dict__["balance_weight"] = balance_weight
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_offline_delay"] = is_offline_delay
            __props__.__dict__["min_read_only_in_group"] = min_read_only_in_group
            if read_only_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'read_only_group_id'")
            __props__.__dict__["read_only_group_id"] = read_only_group_id
            __props__.__dict__["read_only_group_name"] = read_only_group_name
            __props__.__dict__["read_only_max_delay_time"] = read_only_max_delay_time
            __props__.__dict__["weight_pairs"] = weight_pairs
        super(ConfigInstanceRoGroup, __self__).__init__(
            'tencentcloud:Sqlserver/configInstanceRoGroup:ConfigInstanceRoGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_weight: Optional[pulumi.Input[int]] = None,
            balance_weight: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            is_offline_delay: Optional[pulumi.Input[int]] = None,
            min_read_only_in_group: Optional[pulumi.Input[int]] = None,
            read_only_group_id: Optional[pulumi.Input[str]] = None,
            read_only_group_name: Optional[pulumi.Input[str]] = None,
            read_only_max_delay_time: Optional[pulumi.Input[int]] = None,
            weight_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigInstanceRoGroupWeightPairArgs']]]]] = None) -> 'ConfigInstanceRoGroup':
        """
        Get an existing ConfigInstanceRoGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_weight: 0-user-defined weight (adjusted according to WeightPairs), 1-system automatically assigns weight (WeightPairs is invalid), the default is 0.
        :param pulumi.Input[int] balance_weight: 0-do not rebalance the load, 1-rebalance the load, the default is 0.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] is_offline_delay: Whether to enable timeout culling function. 0- Disable the culling function. 1- Enable the culling function.
        :param pulumi.Input[int] min_read_only_in_group: After the timeout removal function is enabled, the number of read-only copies retained by the read-only group at least, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[str] read_only_group_id: Read-only group ID.
        :param pulumi.Input[str] read_only_group_name: Read-only group name. If this parameter is not specified, it is not modified.
        :param pulumi.Input[int] read_only_max_delay_time: After the timeout elimination function is enabled, the timeout threshold used, if this parameter is not filled, it will not be modified.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigInstanceRoGroupWeightPairArgs']]]] weight_pairs: Read-only group instance weight modification set, if this parameter is not filled, it will not be modified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigInstanceRoGroupState.__new__(_ConfigInstanceRoGroupState)

        __props__.__dict__["auto_weight"] = auto_weight
        __props__.__dict__["balance_weight"] = balance_weight
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_offline_delay"] = is_offline_delay
        __props__.__dict__["min_read_only_in_group"] = min_read_only_in_group
        __props__.__dict__["read_only_group_id"] = read_only_group_id
        __props__.__dict__["read_only_group_name"] = read_only_group_name
        __props__.__dict__["read_only_max_delay_time"] = read_only_max_delay_time
        __props__.__dict__["weight_pairs"] = weight_pairs
        return ConfigInstanceRoGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoWeight")
    def auto_weight(self) -> pulumi.Output[Optional[int]]:
        """
        0-user-defined weight (adjusted according to WeightPairs), 1-system automatically assigns weight (WeightPairs is invalid), the default is 0.
        """
        return pulumi.get(self, "auto_weight")

    @property
    @pulumi.getter(name="balanceWeight")
    def balance_weight(self) -> pulumi.Output[Optional[int]]:
        """
        0-do not rebalance the load, 1-rebalance the load, the default is 0.
        """
        return pulumi.get(self, "balance_weight")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isOfflineDelay")
    def is_offline_delay(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable timeout culling function. 0- Disable the culling function. 1- Enable the culling function.
        """
        return pulumi.get(self, "is_offline_delay")

    @property
    @pulumi.getter(name="minReadOnlyInGroup")
    def min_read_only_in_group(self) -> pulumi.Output[Optional[int]]:
        """
        After the timeout removal function is enabled, the number of read-only copies retained by the read-only group at least, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "min_read_only_in_group")

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> pulumi.Output[str]:
        """
        Read-only group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @property
    @pulumi.getter(name="readOnlyGroupName")
    def read_only_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        Read-only group name. If this parameter is not specified, it is not modified.
        """
        return pulumi.get(self, "read_only_group_name")

    @property
    @pulumi.getter(name="readOnlyMaxDelayTime")
    def read_only_max_delay_time(self) -> pulumi.Output[Optional[int]]:
        """
        After the timeout elimination function is enabled, the timeout threshold used, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "read_only_max_delay_time")

    @property
    @pulumi.getter(name="weightPairs")
    def weight_pairs(self) -> pulumi.Output[Optional[Sequence['outputs.ConfigInstanceRoGroupWeightPair']]]:
        """
        Read-only group instance weight modification set, if this parameter is not filled, it will not be modified.
        """
        return pulumi.get(self, "weight_pairs")

