# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RollbackInstanceArgs', 'RollbackInstance']

@pulumi.input_type
class RollbackInstanceArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 rename_restores: pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]],
                 time: pulumi.Input[str]):
        """
        The set of arguments for constructing a RollbackInstance resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]] rename_restores: Rename the databases listed in ReNameRestoreDatabase.
        :param pulumi.Input[str] time: Target time point for rollback.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "rename_restores", rename_restores)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]]:
        """
        Rename the databases listed in ReNameRestoreDatabase.
        """
        return pulumi.get(self, "rename_restores")

    @rename_restores.setter
    def rename_restores(self, value: pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]]):
        pulumi.set(self, "rename_restores", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        Target time point for rollback.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class _RollbackInstanceState:
    def __init__(__self__, *,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackInstanceEncryptionArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RollbackInstance resources.
        :param pulumi.Input[Sequence[pulumi.Input['RollbackInstanceEncryptionArgs']]] encryptions: TDE encryption, `enable` encrypted, `disable` unencrypted.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]] rename_restores: Rename the databases listed in ReNameRestoreDatabase.
        :param pulumi.Input[str] time: Target time point for rollback.
        """
        if encryptions is not None:
            pulumi.set(__self__, "encryptions", encryptions)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if rename_restores is not None:
            pulumi.set(__self__, "rename_restores", rename_restores)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def encryptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollbackInstanceEncryptionArgs']]]]:
        """
        TDE encryption, `enable` encrypted, `disable` unencrypted.
        """
        return pulumi.get(self, "encryptions")

    @encryptions.setter
    def encryptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackInstanceEncryptionArgs']]]]):
        pulumi.set(self, "encryptions", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]]]:
        """
        Rename the databases listed in ReNameRestoreDatabase.
        """
        return pulumi.get(self, "rename_restores")

    @rename_restores.setter
    def rename_restores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackInstanceRenameRestoreArgs']]]]):
        pulumi.set(self, "rename_restores", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        """
        Target time point for rollback.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


class RollbackInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackInstanceRenameRestoreArgs']]]]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver rollback_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        rollback_instance = tencentcloud.sqlserver.RollbackInstance("rollbackInstance",
            instance_id="mssql-qelbzgwf",
            rename_restores=[tencentcloud.sqlserver.RollbackInstanceRenameRestoreArgs(
                new_name="rollback_pubsub_db3",
                old_name="keep_pubsub_db2",
            )],
            time="2023-05-23 01:00:00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver rollback_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/rollbackInstance:RollbackInstance rollback_instance mssql-qelbzgwf#2023-05-23 01:00:00#keep_pubsub_db2#rollback_pubsub_db3
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackInstanceRenameRestoreArgs']]]] rename_restores: Rename the databases listed in ReNameRestoreDatabase.
        :param pulumi.Input[str] time: Target time point for rollback.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RollbackInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver rollback_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        rollback_instance = tencentcloud.sqlserver.RollbackInstance("rollbackInstance",
            instance_id="mssql-qelbzgwf",
            rename_restores=[tencentcloud.sqlserver.RollbackInstanceRenameRestoreArgs(
                new_name="rollback_pubsub_db3",
                old_name="keep_pubsub_db2",
            )],
            time="2023-05-23 01:00:00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver rollback_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/rollbackInstance:RollbackInstance rollback_instance mssql-qelbzgwf#2023-05-23 01:00:00#keep_pubsub_db2#rollback_pubsub_db3
        ```

        :param str resource_name: The name of the resource.
        :param RollbackInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RollbackInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackInstanceRenameRestoreArgs']]]]] = None,
                 time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RollbackInstanceArgs.__new__(RollbackInstanceArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if rename_restores is None and not opts.urn:
                raise TypeError("Missing required property 'rename_restores'")
            __props__.__dict__["rename_restores"] = rename_restores
            if time is None and not opts.urn:
                raise TypeError("Missing required property 'time'")
            __props__.__dict__["time"] = time
            __props__.__dict__["encryptions"] = None
        super(RollbackInstance, __self__).__init__(
            'tencentcloud:Sqlserver/rollbackInstance:RollbackInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            encryptions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackInstanceEncryptionArgs']]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackInstanceRenameRestoreArgs']]]]] = None,
            time: Optional[pulumi.Input[str]] = None) -> 'RollbackInstance':
        """
        Get an existing RollbackInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackInstanceEncryptionArgs']]]] encryptions: TDE encryption, `enable` encrypted, `disable` unencrypted.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackInstanceRenameRestoreArgs']]]] rename_restores: Rename the databases listed in ReNameRestoreDatabase.
        :param pulumi.Input[str] time: Target time point for rollback.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RollbackInstanceState.__new__(_RollbackInstanceState)

        __props__.__dict__["encryptions"] = encryptions
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["rename_restores"] = rename_restores
        __props__.__dict__["time"] = time
        return RollbackInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def encryptions(self) -> pulumi.Output[Sequence['outputs.RollbackInstanceEncryption']]:
        """
        TDE encryption, `enable` encrypted, `disable` unencrypted.
        """
        return pulumi.get(self, "encryptions")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> pulumi.Output[Sequence['outputs.RollbackInstanceRenameRestore']]:
        """
        Rename the databases listed in ReNameRestoreDatabase.
        """
        return pulumi.get(self, "rename_restores")

    @property
    @pulumi.getter
    def time(self) -> pulumi.Output[str]:
        """
        Target time point for rollback.
        """
        return pulumi.get(self, "time")

