# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ConfigBackupStrategyArgs', 'ConfigBackupStrategy']

@pulumi.input_type
class ConfigBackupStrategyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 backup_cycles: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 backup_day: Optional[pulumi.Input[int]] = None,
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_save_days: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[int]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None,
                 regular_backup_counts: Optional[pulumi.Input[int]] = None,
                 regular_backup_enable: Optional[pulumi.Input[str]] = None,
                 regular_backup_save_days: Optional[pulumi.Input[int]] = None,
                 regular_backup_start_time: Optional[pulumi.Input[str]] = None,
                 regular_backup_strategy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ConfigBackupStrategy resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backup_cycles: The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
        :param pulumi.Input[int] backup_day: Backup interval in days when the BackupType is daily. The current value can only be 1.
        :param pulumi.Input[str] backup_model: Backup mode. Valid values: master_pkg (archive the backup files of the primary node), master_no_pkg (do not archive the backup files of the primary node), slave_pkg (archive the backup files of the replica node), slave_no_pkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
        :param pulumi.Input[int] backup_save_days: Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
        :param pulumi.Input[int] backup_time: Backup time. Value range: an integer from 0 to 23.
        :param pulumi.Input[str] backup_type: Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
        :param pulumi.Input[int] regular_backup_counts: The number of retained archive backups. Default value: 1.
        :param pulumi.Input[str] regular_backup_enable: Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
        :param pulumi.Input[int] regular_backup_save_days: Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
        :param pulumi.Input[str] regular_backup_start_time: Archive backup start date in YYYY-MM-DD format, which is the current time by default.
        :param pulumi.Input[str] regular_backup_strategy: Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if backup_cycles is not None:
            pulumi.set(__self__, "backup_cycles", backup_cycles)
        if backup_day is not None:
            pulumi.set(__self__, "backup_day", backup_day)
        if backup_model is not None:
            pulumi.set(__self__, "backup_model", backup_model)
        if backup_save_days is not None:
            pulumi.set(__self__, "backup_save_days", backup_save_days)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if regular_backup_counts is not None:
            pulumi.set(__self__, "regular_backup_counts", regular_backup_counts)
        if regular_backup_enable is not None:
            pulumi.set(__self__, "regular_backup_enable", regular_backup_enable)
        if regular_backup_save_days is not None:
            pulumi.set(__self__, "regular_backup_save_days", regular_backup_save_days)
        if regular_backup_start_time is not None:
            pulumi.set(__self__, "regular_backup_start_time", regular_backup_start_time)
        if regular_backup_strategy is not None:
            pulumi.set(__self__, "regular_backup_strategy", regular_backup_strategy)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="backupCycles")
    def backup_cycles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
        """
        return pulumi.get(self, "backup_cycles")

    @backup_cycles.setter
    def backup_cycles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "backup_cycles", value)

    @property
    @pulumi.getter(name="backupDay")
    def backup_day(self) -> Optional[pulumi.Input[int]]:
        """
        Backup interval in days when the BackupType is daily. The current value can only be 1.
        """
        return pulumi.get(self, "backup_day")

    @backup_day.setter
    def backup_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_day", value)

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> Optional[pulumi.Input[str]]:
        """
        Backup mode. Valid values: master_pkg (archive the backup files of the primary node), master_no_pkg (do not archive the backup files of the primary node), slave_pkg (archive the backup files of the replica node), slave_no_pkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
        """
        return pulumi.get(self, "backup_model")

    @backup_model.setter
    def backup_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_model", value)

    @property
    @pulumi.getter(name="backupSaveDays")
    def backup_save_days(self) -> Optional[pulumi.Input[int]]:
        """
        Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
        """
        return pulumi.get(self, "backup_save_days")

    @backup_save_days.setter
    def backup_save_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_save_days", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[int]]:
        """
        Backup time. Value range: an integer from 0 to 23.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
        """
        return pulumi.get(self, "backup_type")

    @backup_type.setter
    def backup_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_type", value)

    @property
    @pulumi.getter(name="regularBackupCounts")
    def regular_backup_counts(self) -> Optional[pulumi.Input[int]]:
        """
        The number of retained archive backups. Default value: 1.
        """
        return pulumi.get(self, "regular_backup_counts")

    @regular_backup_counts.setter
    def regular_backup_counts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "regular_backup_counts", value)

    @property
    @pulumi.getter(name="regularBackupEnable")
    def regular_backup_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
        """
        return pulumi.get(self, "regular_backup_enable")

    @regular_backup_enable.setter
    def regular_backup_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_backup_enable", value)

    @property
    @pulumi.getter(name="regularBackupSaveDays")
    def regular_backup_save_days(self) -> Optional[pulumi.Input[int]]:
        """
        Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
        """
        return pulumi.get(self, "regular_backup_save_days")

    @regular_backup_save_days.setter
    def regular_backup_save_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "regular_backup_save_days", value)

    @property
    @pulumi.getter(name="regularBackupStartTime")
    def regular_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Archive backup start date in YYYY-MM-DD format, which is the current time by default.
        """
        return pulumi.get(self, "regular_backup_start_time")

    @regular_backup_start_time.setter
    def regular_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_backup_start_time", value)

    @property
    @pulumi.getter(name="regularBackupStrategy")
    def regular_backup_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
        """
        return pulumi.get(self, "regular_backup_strategy")

    @regular_backup_strategy.setter
    def regular_backup_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_backup_strategy", value)


@pulumi.input_type
class _ConfigBackupStrategyState:
    def __init__(__self__, *,
                 backup_cycles: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 backup_day: Optional[pulumi.Input[int]] = None,
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_save_days: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[int]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 regular_backup_counts: Optional[pulumi.Input[int]] = None,
                 regular_backup_enable: Optional[pulumi.Input[str]] = None,
                 regular_backup_save_days: Optional[pulumi.Input[int]] = None,
                 regular_backup_start_time: Optional[pulumi.Input[str]] = None,
                 regular_backup_strategy: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConfigBackupStrategy resources.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backup_cycles: The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
        :param pulumi.Input[int] backup_day: Backup interval in days when the BackupType is daily. The current value can only be 1.
        :param pulumi.Input[str] backup_model: Backup mode. Valid values: master_pkg (archive the backup files of the primary node), master_no_pkg (do not archive the backup files of the primary node), slave_pkg (archive the backup files of the replica node), slave_no_pkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
        :param pulumi.Input[int] backup_save_days: Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
        :param pulumi.Input[int] backup_time: Backup time. Value range: an integer from 0 to 23.
        :param pulumi.Input[str] backup_type: Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] regular_backup_counts: The number of retained archive backups. Default value: 1.
        :param pulumi.Input[str] regular_backup_enable: Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
        :param pulumi.Input[int] regular_backup_save_days: Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
        :param pulumi.Input[str] regular_backup_start_time: Archive backup start date in YYYY-MM-DD format, which is the current time by default.
        :param pulumi.Input[str] regular_backup_strategy: Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
        """
        if backup_cycles is not None:
            pulumi.set(__self__, "backup_cycles", backup_cycles)
        if backup_day is not None:
            pulumi.set(__self__, "backup_day", backup_day)
        if backup_model is not None:
            pulumi.set(__self__, "backup_model", backup_model)
        if backup_save_days is not None:
            pulumi.set(__self__, "backup_save_days", backup_save_days)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if backup_type is not None:
            pulumi.set(__self__, "backup_type", backup_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if regular_backup_counts is not None:
            pulumi.set(__self__, "regular_backup_counts", regular_backup_counts)
        if regular_backup_enable is not None:
            pulumi.set(__self__, "regular_backup_enable", regular_backup_enable)
        if regular_backup_save_days is not None:
            pulumi.set(__self__, "regular_backup_save_days", regular_backup_save_days)
        if regular_backup_start_time is not None:
            pulumi.set(__self__, "regular_backup_start_time", regular_backup_start_time)
        if regular_backup_strategy is not None:
            pulumi.set(__self__, "regular_backup_strategy", regular_backup_strategy)

    @property
    @pulumi.getter(name="backupCycles")
    def backup_cycles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
        """
        return pulumi.get(self, "backup_cycles")

    @backup_cycles.setter
    def backup_cycles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "backup_cycles", value)

    @property
    @pulumi.getter(name="backupDay")
    def backup_day(self) -> Optional[pulumi.Input[int]]:
        """
        Backup interval in days when the BackupType is daily. The current value can only be 1.
        """
        return pulumi.get(self, "backup_day")

    @backup_day.setter
    def backup_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_day", value)

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> Optional[pulumi.Input[str]]:
        """
        Backup mode. Valid values: master_pkg (archive the backup files of the primary node), master_no_pkg (do not archive the backup files of the primary node), slave_pkg (archive the backup files of the replica node), slave_no_pkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
        """
        return pulumi.get(self, "backup_model")

    @backup_model.setter
    def backup_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_model", value)

    @property
    @pulumi.getter(name="backupSaveDays")
    def backup_save_days(self) -> Optional[pulumi.Input[int]]:
        """
        Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
        """
        return pulumi.get(self, "backup_save_days")

    @backup_save_days.setter
    def backup_save_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_save_days", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[int]]:
        """
        Backup time. Value range: an integer from 0 to 23.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
        """
        return pulumi.get(self, "backup_type")

    @backup_type.setter
    def backup_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="regularBackupCounts")
    def regular_backup_counts(self) -> Optional[pulumi.Input[int]]:
        """
        The number of retained archive backups. Default value: 1.
        """
        return pulumi.get(self, "regular_backup_counts")

    @regular_backup_counts.setter
    def regular_backup_counts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "regular_backup_counts", value)

    @property
    @pulumi.getter(name="regularBackupEnable")
    def regular_backup_enable(self) -> Optional[pulumi.Input[str]]:
        """
        Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
        """
        return pulumi.get(self, "regular_backup_enable")

    @regular_backup_enable.setter
    def regular_backup_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_backup_enable", value)

    @property
    @pulumi.getter(name="regularBackupSaveDays")
    def regular_backup_save_days(self) -> Optional[pulumi.Input[int]]:
        """
        Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
        """
        return pulumi.get(self, "regular_backup_save_days")

    @regular_backup_save_days.setter
    def regular_backup_save_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "regular_backup_save_days", value)

    @property
    @pulumi.getter(name="regularBackupStartTime")
    def regular_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Archive backup start date in YYYY-MM-DD format, which is the current time by default.
        """
        return pulumi.get(self, "regular_backup_start_time")

    @regular_backup_start_time.setter
    def regular_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_backup_start_time", value)

    @property
    @pulumi.getter(name="regularBackupStrategy")
    def regular_backup_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
        """
        return pulumi.get(self, "regular_backup_strategy")

    @regular_backup_strategy.setter
    def regular_backup_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regular_backup_strategy", value)


class ConfigBackupStrategy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_cycles: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 backup_day: Optional[pulumi.Input[int]] = None,
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_save_days: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[int]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 regular_backup_counts: Optional[pulumi.Input[int]] = None,
                 regular_backup_enable: Optional[pulumi.Input[str]] = None,
                 regular_backup_save_days: Optional[pulumi.Input[int]] = None,
                 regular_backup_start_time: Optional[pulumi.Input[str]] = None,
                 regular_backup_strategy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver config_backup_strategy

        ## Example Usage

        ### Daily backup

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        example_config_backup_strategy = tencentcloud.sqlserver.ConfigBackupStrategy("exampleConfigBackupStrategy",
            instance_id=example_basic_instance.id,
            backup_type="daily",
            backup_time=0,
            backup_day=1,
            backup_model="master_no_pkg",
            backup_cycles=[1],
            backup_save_days=7,
            regular_backup_enable="disable",
            regular_backup_save_days=90,
            regular_backup_strategy="months",
            regular_backup_counts=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Weekly backup

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.ConfigBackupStrategy("example",
            instance_id=tencentcloud_sqlserver_basic_instance["example"]["id"],
            backup_type="weekly",
            backup_time=0,
            backup_model="master_no_pkg",
            backup_cycles=[
                1,
                3,
                5,
            ],
            backup_save_days=7,
            regular_backup_enable="disable",
            regular_backup_save_days=90,
            regular_backup_strategy="months",
            regular_backup_counts=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Regular backup

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.ConfigBackupStrategy("example",
            instance_id=tencentcloud_sqlserver_basic_instance["example"]["id"],
            backup_time=0,
            backup_model="master_no_pkg",
            backup_cycles=[
                1,
                3,
            ],
            backup_save_days=7,
            regular_backup_enable="enable",
            regular_backup_save_days=120,
            regular_backup_strategy="months",
            regular_backup_counts=1,
            regular_backup_start_time="%s")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver config_backup_strategy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/configBackupStrategy:ConfigBackupStrategy example mssql-si2823jyl
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backup_cycles: The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
        :param pulumi.Input[int] backup_day: Backup interval in days when the BackupType is daily. The current value can only be 1.
        :param pulumi.Input[str] backup_model: Backup mode. Valid values: master_pkg (archive the backup files of the primary node), master_no_pkg (do not archive the backup files of the primary node), slave_pkg (archive the backup files of the replica node), slave_no_pkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
        :param pulumi.Input[int] backup_save_days: Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
        :param pulumi.Input[int] backup_time: Backup time. Value range: an integer from 0 to 23.
        :param pulumi.Input[str] backup_type: Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] regular_backup_counts: The number of retained archive backups. Default value: 1.
        :param pulumi.Input[str] regular_backup_enable: Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
        :param pulumi.Input[int] regular_backup_save_days: Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
        :param pulumi.Input[str] regular_backup_start_time: Archive backup start date in YYYY-MM-DD format, which is the current time by default.
        :param pulumi.Input[str] regular_backup_strategy: Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigBackupStrategyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver config_backup_strategy

        ## Example Usage

        ### Daily backup

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        example_config_backup_strategy = tencentcloud.sqlserver.ConfigBackupStrategy("exampleConfigBackupStrategy",
            instance_id=example_basic_instance.id,
            backup_type="daily",
            backup_time=0,
            backup_day=1,
            backup_model="master_no_pkg",
            backup_cycles=[1],
            backup_save_days=7,
            regular_backup_enable="disable",
            regular_backup_save_days=90,
            regular_backup_strategy="months",
            regular_backup_counts=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Weekly backup

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.ConfigBackupStrategy("example",
            instance_id=tencentcloud_sqlserver_basic_instance["example"]["id"],
            backup_type="weekly",
            backup_time=0,
            backup_model="master_no_pkg",
            backup_cycles=[
                1,
                3,
                5,
            ],
            backup_save_days=7,
            regular_backup_enable="disable",
            regular_backup_save_days=90,
            regular_backup_strategy="months",
            regular_backup_counts=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Regular backup

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.ConfigBackupStrategy("example",
            instance_id=tencentcloud_sqlserver_basic_instance["example"]["id"],
            backup_time=0,
            backup_model="master_no_pkg",
            backup_cycles=[
                1,
                3,
            ],
            backup_save_days=7,
            regular_backup_enable="enable",
            regular_backup_save_days=120,
            regular_backup_strategy="months",
            regular_backup_counts=1,
            regular_backup_start_time="%s")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver config_backup_strategy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/configBackupStrategy:ConfigBackupStrategy example mssql-si2823jyl
        ```

        :param str resource_name: The name of the resource.
        :param ConfigBackupStrategyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigBackupStrategyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_cycles: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 backup_day: Optional[pulumi.Input[int]] = None,
                 backup_model: Optional[pulumi.Input[str]] = None,
                 backup_save_days: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[int]] = None,
                 backup_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 regular_backup_counts: Optional[pulumi.Input[int]] = None,
                 regular_backup_enable: Optional[pulumi.Input[str]] = None,
                 regular_backup_save_days: Optional[pulumi.Input[int]] = None,
                 regular_backup_start_time: Optional[pulumi.Input[str]] = None,
                 regular_backup_strategy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigBackupStrategyArgs.__new__(ConfigBackupStrategyArgs)

            __props__.__dict__["backup_cycles"] = backup_cycles
            __props__.__dict__["backup_day"] = backup_day
            __props__.__dict__["backup_model"] = backup_model
            __props__.__dict__["backup_save_days"] = backup_save_days
            __props__.__dict__["backup_time"] = backup_time
            __props__.__dict__["backup_type"] = backup_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["regular_backup_counts"] = regular_backup_counts
            __props__.__dict__["regular_backup_enable"] = regular_backup_enable
            __props__.__dict__["regular_backup_save_days"] = regular_backup_save_days
            __props__.__dict__["regular_backup_start_time"] = regular_backup_start_time
            __props__.__dict__["regular_backup_strategy"] = regular_backup_strategy
        super(ConfigBackupStrategy, __self__).__init__(
            'tencentcloud:Sqlserver/configBackupStrategy:ConfigBackupStrategy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_cycles: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            backup_day: Optional[pulumi.Input[int]] = None,
            backup_model: Optional[pulumi.Input[str]] = None,
            backup_save_days: Optional[pulumi.Input[int]] = None,
            backup_time: Optional[pulumi.Input[int]] = None,
            backup_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            regular_backup_counts: Optional[pulumi.Input[int]] = None,
            regular_backup_enable: Optional[pulumi.Input[str]] = None,
            regular_backup_save_days: Optional[pulumi.Input[int]] = None,
            regular_backup_start_time: Optional[pulumi.Input[str]] = None,
            regular_backup_strategy: Optional[pulumi.Input[str]] = None) -> 'ConfigBackupStrategy':
        """
        Get an existing ConfigBackupStrategy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backup_cycles: The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
        :param pulumi.Input[int] backup_day: Backup interval in days when the BackupType is daily. The current value can only be 1.
        :param pulumi.Input[str] backup_model: Backup mode. Valid values: master_pkg (archive the backup files of the primary node), master_no_pkg (do not archive the backup files of the primary node), slave_pkg (archive the backup files of the replica node), slave_no_pkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
        :param pulumi.Input[int] backup_save_days: Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
        :param pulumi.Input[int] backup_time: Backup time. Value range: an integer from 0 to 23.
        :param pulumi.Input[str] backup_type: Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] regular_backup_counts: The number of retained archive backups. Default value: 1.
        :param pulumi.Input[str] regular_backup_enable: Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
        :param pulumi.Input[int] regular_backup_save_days: Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
        :param pulumi.Input[str] regular_backup_start_time: Archive backup start date in YYYY-MM-DD format, which is the current time by default.
        :param pulumi.Input[str] regular_backup_strategy: Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigBackupStrategyState.__new__(_ConfigBackupStrategyState)

        __props__.__dict__["backup_cycles"] = backup_cycles
        __props__.__dict__["backup_day"] = backup_day
        __props__.__dict__["backup_model"] = backup_model
        __props__.__dict__["backup_save_days"] = backup_save_days
        __props__.__dict__["backup_time"] = backup_time
        __props__.__dict__["backup_type"] = backup_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["regular_backup_counts"] = regular_backup_counts
        __props__.__dict__["regular_backup_enable"] = regular_backup_enable
        __props__.__dict__["regular_backup_save_days"] = regular_backup_save_days
        __props__.__dict__["regular_backup_start_time"] = regular_backup_start_time
        __props__.__dict__["regular_backup_strategy"] = regular_backup_strategy
        return ConfigBackupStrategy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupCycles")
    def backup_cycles(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        The days of the week on which backup will be performed when `BackupType` is weekly. If data backup retention period is less than 7 days, the values will be 1-7, indicating that backup will be performed everyday by default; if data backup retention period is greater than or equal to 7 days, the values will be at least any two days, indicating that backup will be performed at least twice in a week by default.
        """
        return pulumi.get(self, "backup_cycles")

    @property
    @pulumi.getter(name="backupDay")
    def backup_day(self) -> pulumi.Output[Optional[int]]:
        """
        Backup interval in days when the BackupType is daily. The current value can only be 1.
        """
        return pulumi.get(self, "backup_day")

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> pulumi.Output[Optional[str]]:
        """
        Backup mode. Valid values: master_pkg (archive the backup files of the primary node), master_no_pkg (do not archive the backup files of the primary node), slave_pkg (archive the backup files of the replica node), slave_no_pkg (do not archive the backup files of the replica node). Backup files of the replica node are supported only when Always On disaster recovery is enabled.
        """
        return pulumi.get(self, "backup_model")

    @property
    @pulumi.getter(name="backupSaveDays")
    def backup_save_days(self) -> pulumi.Output[Optional[int]]:
        """
        Data (log) backup retention period. Value range: 3-1830 days, default value: 7 days.
        """
        return pulumi.get(self, "backup_save_days")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> pulumi.Output[Optional[int]]:
        """
        Backup time. Value range: an integer from 0 to 23.
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> pulumi.Output[Optional[str]]:
        """
        Backup type. Valid values: weekly (when length(BackupDay) <=7 && length(BackupDay) >=2), daily (when length(BackupDay)=1). Default value: daily.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="regularBackupCounts")
    def regular_backup_counts(self) -> pulumi.Output[Optional[int]]:
        """
        The number of retained archive backups. Default value: 1.
        """
        return pulumi.get(self, "regular_backup_counts")

    @property
    @pulumi.getter(name="regularBackupEnable")
    def regular_backup_enable(self) -> pulumi.Output[Optional[str]]:
        """
        Archive backup status. Valid values: enable (enabled); disable (disabled). Default value: disable.
        """
        return pulumi.get(self, "regular_backup_enable")

    @property
    @pulumi.getter(name="regularBackupSaveDays")
    def regular_backup_save_days(self) -> pulumi.Output[Optional[int]]:
        """
        Archive backup retention days. Value range: 90-3650 days. Default value: 365 days.
        """
        return pulumi.get(self, "regular_backup_save_days")

    @property
    @pulumi.getter(name="regularBackupStartTime")
    def regular_backup_start_time(self) -> pulumi.Output[Optional[str]]:
        """
        Archive backup start date in YYYY-MM-DD format, which is the current time by default.
        """
        return pulumi.get(self, "regular_backup_start_time")

    @property
    @pulumi.getter(name="regularBackupStrategy")
    def regular_backup_strategy(self) -> pulumi.Output[Optional[str]]:
        """
        Archive backup policy. Valid values: years (yearly); quarters (quarterly); months(monthly); Default value: `months`.
        """
        return pulumi.get(self, "regular_backup_strategy")

