# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BusinessIntelligenceInstanceArgs', 'BusinessIntelligenceInstance']

@pulumi.input_type
class BusinessIntelligenceInstanceArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input[int],
                 instance_name: pulumi.Input[str],
                 machine_type: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 storage: pulumi.Input[int],
                 zone: pulumi.Input[str],
                 db_version: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a BusinessIntelligenceInstance resource.
        :param pulumi.Input[int] cpu: The number of CPU cores of the instance you want to purchase.
        :param pulumi.Input[str] instance_name: Instance Name.
        :param pulumi.Input[str] machine_type: The host type of purchased instance. Valid values: CLOUD_PREMIUM (virtual machine with premium cloud disk), CLOUD_SSD (virtual machine with SSD).
        :param pulumi.Input[int] memory: Instance memory size in GB.
        :param pulumi.Input[int] storage: Instance disk size in GB.
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through theDescribeZones API.
        :param pulumi.Input[str] db_version: Supported versions of business intelligence server. Valid values: 201603 (SQL Server 2016 Integration Services), 201703 (SQL Server 2017 Integration Services), 201903 (SQL Server 2019 Integration Services). Default value: 201903. As the purchasable versions are region-specific, you can use the DescribeProductConfig API to query the information of purchasable versions in each region.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]] resource_tags: Tags associated with the instances to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, which contains security group IDs in the format of sg-xxx.
        :param pulumi.Input[int] span: Configuration of the maintenance window, which specifies the maintenance duration in hours.
        :param pulumi.Input[str] start_time: Configuration of the maintenance window, which specifies the start time of daily maintenance.
        :param pulumi.Input[str] subnet_id: VPC subnet ID in the format of subnet-bdoe83fa. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[str] vpc_id: VPC ID in the format of vpc-dsp338hz. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Configuration of the maintenance window, which specifies the day of the week when maintenance can be performed. Valid values: 1 (Monday), 2 (Tuesday), 3 (Wednesday), 4 (Thursday), 5 (Friday), 6 (Saturday), 7 (Sunday).
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "zone", zone)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_lists is not None:
            pulumi.set(__self__, "security_group_lists", security_group_lists)
        if span is not None:
            pulumi.set(__self__, "span", span)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if weeklies is not None:
            pulumi.set(__self__, "weeklies", weeklies)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[int]:
        """
        The number of CPU cores of the instance you want to purchase.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Instance Name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        The host type of purchased instance. Valid values: CLOUD_PREMIUM (virtual machine with premium cloud disk), CLOUD_SSD (virtual machine with SSD).
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        Instance memory size in GB.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[int]:
        """
        Instance disk size in GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through theDescribeZones API.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        Supported versions of business intelligence server. Valid values: 201603 (SQL Server 2016 Integration Services), 201703 (SQL Server 2017 Integration Services), 201903 (SQL Server 2019 Integration Services). Default value: 201903. As the purchasable versions are region-specific, you can use the DescribeProductConfig API to query the information of purchasable versions in each region.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]]]:
        """
        Tags associated with the instances to be created.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group list, which contains security group IDs in the format of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @security_group_lists.setter
    def security_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_lists", value)

    @property
    @pulumi.getter
    def span(self) -> Optional[pulumi.Input[int]]:
        """
        Configuration of the maintenance window, which specifies the maintenance duration in hours.
        """
        return pulumi.get(self, "span")

    @span.setter
    def span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "span", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration of the maintenance window, which specifies the start time of daily maintenance.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC subnet ID in the format of subnet-bdoe83fa. Both SubnetId and VpcId need to be set or unset at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID in the format of vpc-dsp338hz. Both SubnetId and VpcId need to be set or unset at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def weeklies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Configuration of the maintenance window, which specifies the day of the week when maintenance can be performed. Valid values: 1 (Monday), 2 (Tuesday), 3 (Wednesday), 4 (Thursday), 5 (Friday), 6 (Saturday), 7 (Sunday).
        """
        return pulumi.get(self, "weeklies")

    @weeklies.setter
    def weeklies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "weeklies", value)


@pulumi.input_type
class _BusinessIntelligenceInstanceState:
    def __init__(__self__, *,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BusinessIntelligenceInstance resources.
        :param pulumi.Input[int] cpu: The number of CPU cores of the instance you want to purchase.
        :param pulumi.Input[str] db_version: Supported versions of business intelligence server. Valid values: 201603 (SQL Server 2016 Integration Services), 201703 (SQL Server 2017 Integration Services), 201903 (SQL Server 2019 Integration Services). Default value: 201903. As the purchasable versions are region-specific, you can use the DescribeProductConfig API to query the information of purchasable versions in each region.
        :param pulumi.Input[str] instance_name: Instance Name.
        :param pulumi.Input[str] machine_type: The host type of purchased instance. Valid values: CLOUD_PREMIUM (virtual machine with premium cloud disk), CLOUD_SSD (virtual machine with SSD).
        :param pulumi.Input[int] memory: Instance memory size in GB.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]] resource_tags: Tags associated with the instances to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, which contains security group IDs in the format of sg-xxx.
        :param pulumi.Input[int] span: Configuration of the maintenance window, which specifies the maintenance duration in hours.
        :param pulumi.Input[str] start_time: Configuration of the maintenance window, which specifies the start time of daily maintenance.
        :param pulumi.Input[int] storage: Instance disk size in GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID in the format of subnet-bdoe83fa. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[str] vpc_id: VPC ID in the format of vpc-dsp338hz. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Configuration of the maintenance window, which specifies the day of the week when maintenance can be performed. Valid values: 1 (Monday), 2 (Tuesday), 3 (Wednesday), 4 (Thursday), 5 (Friday), 6 (Saturday), 7 (Sunday).
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through theDescribeZones API.
        """
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_lists is not None:
            pulumi.set(__self__, "security_group_lists", security_group_lists)
        if span is not None:
            pulumi.set(__self__, "span", span)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if weeklies is not None:
            pulumi.set(__self__, "weeklies", weeklies)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        The number of CPU cores of the instance you want to purchase.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        Supported versions of business intelligence server. Valid values: 201603 (SQL Server 2016 Integration Services), 201703 (SQL Server 2017 Integration Services), 201903 (SQL Server 2019 Integration Services). Default value: 201903. As the purchasable versions are region-specific, you can use the DescribeProductConfig API to query the information of purchasable versions in each region.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The host type of purchased instance. Valid values: CLOUD_PREMIUM (virtual machine with premium cloud disk), CLOUD_SSD (virtual machine with SSD).
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Instance memory size in GB.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]]]:
        """
        Tags associated with the instances to be created.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BusinessIntelligenceInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group list, which contains security group IDs in the format of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @security_group_lists.setter
    def security_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_lists", value)

    @property
    @pulumi.getter
    def span(self) -> Optional[pulumi.Input[int]]:
        """
        Configuration of the maintenance window, which specifies the maintenance duration in hours.
        """
        return pulumi.get(self, "span")

    @span.setter
    def span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "span", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration of the maintenance window, which specifies the start time of daily maintenance.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        Instance disk size in GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC subnet ID in the format of subnet-bdoe83fa. Both SubnetId and VpcId need to be set or unset at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID in the format of vpc-dsp338hz. Both SubnetId and VpcId need to be set or unset at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def weeklies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Configuration of the maintenance window, which specifies the day of the week when maintenance can be performed. Valid values: 1 (Monday), 2 (Tuesday), 3 (Wednesday), 4 (Thursday), 5 (Friday), 6 (Saturday), 7 (Sunday).
        """
        return pulumi.get(self, "weeklies")

    @weeklies.setter
    def weeklies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "weeklies", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through theDescribeZones API.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class BusinessIntelligenceInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BusinessIntelligenceInstanceResourceTagArgs']]]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver business_intelligence_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example = tencentcloud.sqlserver.BusinessIntelligenceInstance("example",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="201603",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                4,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            instance_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver business_intelligence_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/businessIntelligenceInstance:BusinessIntelligenceInstance example mssqlbi-fo2dwujt
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cpu: The number of CPU cores of the instance you want to purchase.
        :param pulumi.Input[str] db_version: Supported versions of business intelligence server. Valid values: 201603 (SQL Server 2016 Integration Services), 201703 (SQL Server 2017 Integration Services), 201903 (SQL Server 2019 Integration Services). Default value: 201903. As the purchasable versions are region-specific, you can use the DescribeProductConfig API to query the information of purchasable versions in each region.
        :param pulumi.Input[str] instance_name: Instance Name.
        :param pulumi.Input[str] machine_type: The host type of purchased instance. Valid values: CLOUD_PREMIUM (virtual machine with premium cloud disk), CLOUD_SSD (virtual machine with SSD).
        :param pulumi.Input[int] memory: Instance memory size in GB.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BusinessIntelligenceInstanceResourceTagArgs']]]] resource_tags: Tags associated with the instances to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, which contains security group IDs in the format of sg-xxx.
        :param pulumi.Input[int] span: Configuration of the maintenance window, which specifies the maintenance duration in hours.
        :param pulumi.Input[str] start_time: Configuration of the maintenance window, which specifies the start time of daily maintenance.
        :param pulumi.Input[int] storage: Instance disk size in GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID in the format of subnet-bdoe83fa. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[str] vpc_id: VPC ID in the format of vpc-dsp338hz. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Configuration of the maintenance window, which specifies the day of the week when maintenance can be performed. Valid values: 1 (Monday), 2 (Tuesday), 3 (Wednesday), 4 (Thursday), 5 (Friday), 6 (Saturday), 7 (Sunday).
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through theDescribeZones API.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BusinessIntelligenceInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver business_intelligence_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example = tencentcloud.sqlserver.BusinessIntelligenceInstance("example",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="201603",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                4,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            instance_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver business_intelligence_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/businessIntelligenceInstance:BusinessIntelligenceInstance example mssqlbi-fo2dwujt
        ```

        :param str resource_name: The name of the resource.
        :param BusinessIntelligenceInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BusinessIntelligenceInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BusinessIntelligenceInstanceResourceTagArgs']]]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BusinessIntelligenceInstanceArgs.__new__(BusinessIntelligenceInstanceArgs)

            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["db_version"] = db_version
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["resource_tags"] = resource_tags
            __props__.__dict__["security_group_lists"] = security_group_lists
            __props__.__dict__["span"] = span
            __props__.__dict__["start_time"] = start_time
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["weeklies"] = weeklies
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        super(BusinessIntelligenceInstance, __self__).__init__(
            'tencentcloud:Sqlserver/businessIntelligenceInstance:BusinessIntelligenceInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            db_version: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            machine_type: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BusinessIntelligenceInstanceResourceTagArgs']]]]] = None,
            security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            span: Optional[pulumi.Input[int]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'BusinessIntelligenceInstance':
        """
        Get an existing BusinessIntelligenceInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] cpu: The number of CPU cores of the instance you want to purchase.
        :param pulumi.Input[str] db_version: Supported versions of business intelligence server. Valid values: 201603 (SQL Server 2016 Integration Services), 201703 (SQL Server 2017 Integration Services), 201903 (SQL Server 2019 Integration Services). Default value: 201903. As the purchasable versions are region-specific, you can use the DescribeProductConfig API to query the information of purchasable versions in each region.
        :param pulumi.Input[str] instance_name: Instance Name.
        :param pulumi.Input[str] machine_type: The host type of purchased instance. Valid values: CLOUD_PREMIUM (virtual machine with premium cloud disk), CLOUD_SSD (virtual machine with SSD).
        :param pulumi.Input[int] memory: Instance memory size in GB.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BusinessIntelligenceInstanceResourceTagArgs']]]] resource_tags: Tags associated with the instances to be created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, which contains security group IDs in the format of sg-xxx.
        :param pulumi.Input[int] span: Configuration of the maintenance window, which specifies the maintenance duration in hours.
        :param pulumi.Input[str] start_time: Configuration of the maintenance window, which specifies the start time of daily maintenance.
        :param pulumi.Input[int] storage: Instance disk size in GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID in the format of subnet-bdoe83fa. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[str] vpc_id: VPC ID in the format of vpc-dsp338hz. Both SubnetId and VpcId need to be set or unset at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Configuration of the maintenance window, which specifies the day of the week when maintenance can be performed. Valid values: 1 (Monday), 2 (Tuesday), 3 (Wednesday), 4 (Thursday), 5 (Friday), 6 (Saturday), 7 (Sunday).
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through theDescribeZones API.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BusinessIntelligenceInstanceState.__new__(_BusinessIntelligenceInstanceState)

        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["db_version"] = db_version
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["memory"] = memory
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_tags"] = resource_tags
        __props__.__dict__["security_group_lists"] = security_group_lists
        __props__.__dict__["span"] = span
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["weeklies"] = weeklies
        __props__.__dict__["zone"] = zone
        return BusinessIntelligenceInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        The number of CPU cores of the instance you want to purchase.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> pulumi.Output[str]:
        """
        Supported versions of business intelligence server. Valid values: 201603 (SQL Server 2016 Integration Services), 201703 (SQL Server 2017 Integration Services), 201903 (SQL Server 2019 Integration Services). Default value: 201903. As the purchasable versions are region-specific, you can use the DescribeProductConfig API to query the information of purchasable versions in each region.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance Name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[str]:
        """
        The host type of purchased instance. Valid values: CLOUD_PREMIUM (virtual machine with premium cloud disk), CLOUD_SSD (virtual machine with SSD).
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        Instance memory size in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> pulumi.Output[Sequence['outputs.BusinessIntelligenceInstanceResourceTag']]:
        """
        Tags associated with the instances to be created.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        Security group list, which contains security group IDs in the format of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @property
    @pulumi.getter
    def span(self) -> pulumi.Output[int]:
        """
        Configuration of the maintenance window, which specifies the maintenance duration in hours.
        """
        return pulumi.get(self, "span")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Configuration of the maintenance window, which specifies the start time of daily maintenance.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        Instance disk size in GB.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        VPC subnet ID in the format of subnet-bdoe83fa. Both SubnetId and VpcId need to be set or unset at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        VPC ID in the format of vpc-dsp338hz. Both SubnetId and VpcId need to be set or unset at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def weeklies(self) -> pulumi.Output[Sequence[int]]:
        """
        Configuration of the maintenance window, which specifies the day of the week when maintenance can be performed. Valid values: 1 (Monday), 2 (Tuesday), 3 (Wednesday), 4 (Thursday), 5 (Friday), 6 (Saturday), 7 (Sunday).
        """
        return pulumi.get(self, "weeklies")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through theDescribeZones API.
        """
        return pulumi.get(self, "zone")

