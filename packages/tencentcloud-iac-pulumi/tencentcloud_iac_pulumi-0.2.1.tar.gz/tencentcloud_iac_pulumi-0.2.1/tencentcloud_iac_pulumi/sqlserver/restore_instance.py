# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RestoreInstanceArgs', 'RestoreInstance']

@pulumi.input_type
class RestoreInstanceArgs:
    def __init__(__self__, *,
                 backup_id: pulumi.Input[int],
                 instance_id: pulumi.Input[str],
                 rename_restores: pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]]):
        """
        The set of arguments for constructing a RestoreInstance resource.
        :param pulumi.Input[int] backup_id: Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]] rename_restores: Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left empty, all databases will be restored and renamed in the default format.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "rename_restores", rename_restores)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Input[int]:
        """
        Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]]:
        """
        Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left empty, all databases will be restored and renamed in the default format.
        """
        return pulumi.get(self, "rename_restores")

    @rename_restores.setter
    def rename_restores(self, value: pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]]):
        pulumi.set(self, "rename_restores", value)


@pulumi.input_type
class _RestoreInstanceState:
    def __init__(__self__, *,
                 backup_id: Optional[pulumi.Input[int]] = None,
                 encryptions: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreInstanceEncryptionArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]]] = None):
        """
        Input properties used for looking up and filtering RestoreInstance resources.
        :param pulumi.Input[int] backup_id: Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        :param pulumi.Input[Sequence[pulumi.Input['RestoreInstanceEncryptionArgs']]] encryptions: TDE encryption, `enable` encrypted, `disable` unencrypted.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]] rename_restores: Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left empty, all databases will be restored and renamed in the default format.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if encryptions is not None:
            pulumi.set(__self__, "encryptions", encryptions)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if rename_restores is not None:
            pulumi.set(__self__, "rename_restores", rename_restores)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[pulumi.Input[int]]:
        """
        Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        """
        return pulumi.get(self, "backup_id")

    @backup_id.setter
    def backup_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_id", value)

    @property
    @pulumi.getter
    def encryptions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestoreInstanceEncryptionArgs']]]]:
        """
        TDE encryption, `enable` encrypted, `disable` unencrypted.
        """
        return pulumi.get(self, "encryptions")

    @encryptions.setter
    def encryptions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreInstanceEncryptionArgs']]]]):
        pulumi.set(self, "encryptions", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]]]:
        """
        Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left empty, all databases will be restored and renamed in the default format.
        """
        return pulumi.get(self, "rename_restores")

    @rename_restores.setter
    def rename_restores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestoreInstanceRenameRestoreArgs']]]]):
        pulumi.set(self, "rename_restores", value)


class RestoreInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreInstanceRenameRestoreArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver restore_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        restore_instance = tencentcloud.sqlserver.RestoreInstance("restoreInstance",
            backup_id=3482091273,
            instance_id="mssql-qelbzgwf",
            rename_restores=[tencentcloud.sqlserver.RestoreInstanceRenameRestoreArgs(
                new_name="restore_keep_pubsub_db2",
                old_name="keep_pubsub_db2",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver restore_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/restoreInstance:RestoreInstance restore_instance mssql-qelbzgwf#3482091273#keep_pubsub_db2#restore_keep_pubsub_db2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] backup_id: Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreInstanceRenameRestoreArgs']]]] rename_restores: Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left empty, all databases will be restored and renamed in the default format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestoreInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver restore_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        restore_instance = tencentcloud.sqlserver.RestoreInstance("restoreInstance",
            backup_id=3482091273,
            instance_id="mssql-qelbzgwf",
            rename_restores=[tencentcloud.sqlserver.RestoreInstanceRenameRestoreArgs(
                new_name="restore_keep_pubsub_db2",
                old_name="keep_pubsub_db2",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver restore_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/restoreInstance:RestoreInstance restore_instance mssql-qelbzgwf#3482091273#keep_pubsub_db2#restore_keep_pubsub_db2
        ```

        :param str resource_name: The name of the resource.
        :param RestoreInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestoreInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_id: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreInstanceRenameRestoreArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestoreInstanceArgs.__new__(RestoreInstanceArgs)

            if backup_id is None and not opts.urn:
                raise TypeError("Missing required property 'backup_id'")
            __props__.__dict__["backup_id"] = backup_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if rename_restores is None and not opts.urn:
                raise TypeError("Missing required property 'rename_restores'")
            __props__.__dict__["rename_restores"] = rename_restores
            __props__.__dict__["encryptions"] = None
        super(RestoreInstance, __self__).__init__(
            'tencentcloud:Sqlserver/restoreInstance:RestoreInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_id: Optional[pulumi.Input[int]] = None,
            encryptions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreInstanceEncryptionArgs']]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreInstanceRenameRestoreArgs']]]]] = None) -> 'RestoreInstance':
        """
        Get an existing RestoreInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] backup_id: Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreInstanceEncryptionArgs']]]] encryptions: TDE encryption, `enable` encrypted, `disable` unencrypted.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestoreInstanceRenameRestoreArgs']]]] rename_restores: Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left empty, all databases will be restored and renamed in the default format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestoreInstanceState.__new__(_RestoreInstanceState)

        __props__.__dict__["backup_id"] = backup_id
        __props__.__dict__["encryptions"] = encryptions
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["rename_restores"] = rename_restores
        return RestoreInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> pulumi.Output[int]:
        """
        Backup file ID, which can be obtained through the Id field in the returned value of the DescribeBackups API.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter
    def encryptions(self) -> pulumi.Output[Sequence['outputs.RestoreInstanceEncryption']]:
        """
        TDE encryption, `enable` encrypted, `disable` unencrypted.
        """
        return pulumi.get(self, "encryptions")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> pulumi.Output[Sequence['outputs.RestoreInstanceRenameRestore']]:
        """
        Restore the databases listed in ReNameRestoreDatabase and rename them after restoration. If this parameter is left empty, all databases will be restored and renamed in the default format.
        """
        return pulumi.get(self, "rename_restores")

