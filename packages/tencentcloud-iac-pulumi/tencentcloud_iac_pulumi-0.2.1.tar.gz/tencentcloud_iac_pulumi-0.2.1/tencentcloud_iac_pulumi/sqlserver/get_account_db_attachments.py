# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccountDbAttachmentsResult',
    'AwaitableGetAccountDbAttachmentsResult',
    'get_account_db_attachments',
    'get_account_db_attachments_output',
]

@pulumi.output_type
class GetAccountDbAttachmentsResult:
    """
    A collection of values returned by getAccountDbAttachments.
    """
    def __init__(__self__, account_name=None, db_name=None, id=None, instance_id=None, lists=None, result_output_file=None):
        if account_name and not isinstance(account_name, str):
            raise TypeError("Expected argument 'account_name' to be a str")
        pulumi.set(__self__, "account_name", account_name)
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[str]:
        """
        SQL Server account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        SQL Server DB name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        SQL Server instance ID that the account belongs to.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetAccountDbAttachmentsListResult']:
        """
        A list of SQL Server account. Each element contains the following attributes:
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetAccountDbAttachmentsResult(GetAccountDbAttachmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountDbAttachmentsResult(
            account_name=self.account_name,
            db_name=self.db_name,
            id=self.id,
            instance_id=self.instance_id,
            lists=self.lists,
            result_output_file=self.result_output_file)


def get_account_db_attachments(account_name: Optional[str] = None,
                               db_name: Optional[str] = None,
                               instance_id: Optional[str] = None,
                               result_output_file: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountDbAttachmentsResult:
    """
    Use this data source to query the list of SQL Server account DB privileges.


    :param str account_name: Name of the SQL Server account to be queried.
    :param str db_name: Name of the DB to be queried.
    :param str instance_id: SQL Server instance ID that the account belongs to.
    :param str result_output_file: Used to store results.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Sqlserver/getAccountDbAttachments:getAccountDbAttachments', __args__, opts=opts, typ=GetAccountDbAttachmentsResult).value

    return AwaitableGetAccountDbAttachmentsResult(
        account_name=pulumi.get(__ret__, 'account_name'),
        db_name=pulumi.get(__ret__, 'db_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        lists=pulumi.get(__ret__, 'lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_account_db_attachments)
def get_account_db_attachments_output(account_name: Optional[pulumi.Input[Optional[str]]] = None,
                                      db_name: Optional[pulumi.Input[Optional[str]]] = None,
                                      instance_id: Optional[pulumi.Input[str]] = None,
                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountDbAttachmentsResult]:
    """
    Use this data source to query the list of SQL Server account DB privileges.


    :param str account_name: Name of the SQL Server account to be queried.
    :param str db_name: Name of the DB to be queried.
    :param str instance_id: SQL Server instance ID that the account belongs to.
    :param str result_output_file: Used to store results.
    """
    ...
