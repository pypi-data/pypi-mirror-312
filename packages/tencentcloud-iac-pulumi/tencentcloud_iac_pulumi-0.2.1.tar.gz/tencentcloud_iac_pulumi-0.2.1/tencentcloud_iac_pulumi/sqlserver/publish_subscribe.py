# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PublishSubscribeArgs', 'PublishSubscribe']

@pulumi.input_type
class PublishSubscribeArgs:
    def __init__(__self__, *,
                 database_tuples: pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]],
                 publish_instance_id: pulumi.Input[str],
                 subscribe_instance_id: pulumi.Input[str],
                 delete_subscribe_db: Optional[pulumi.Input[bool]] = None,
                 publish_subscribe_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PublishSubscribe resource.
        :param pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]] database_tuples: Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
        :param pulumi.Input[str] publish_instance_id: ID of the SQL Server instance which publish.
        :param pulumi.Input[str] subscribe_instance_id: ID of the SQL Server instance which subscribe.
        :param pulumi.Input[bool] delete_subscribe_db: Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
        :param pulumi.Input[str] publish_subscribe_name: The name of the Publish and Subscribe. Default is `default_name`.
        """
        pulumi.set(__self__, "database_tuples", database_tuples)
        pulumi.set(__self__, "publish_instance_id", publish_instance_id)
        pulumi.set(__self__, "subscribe_instance_id", subscribe_instance_id)
        if delete_subscribe_db is not None:
            pulumi.set(__self__, "delete_subscribe_db", delete_subscribe_db)
        if publish_subscribe_name is not None:
            pulumi.set(__self__, "publish_subscribe_name", publish_subscribe_name)

    @property
    @pulumi.getter(name="databaseTuples")
    def database_tuples(self) -> pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]]:
        """
        Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
        """
        return pulumi.get(self, "database_tuples")

    @database_tuples.setter
    def database_tuples(self, value: pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]]):
        pulumi.set(self, "database_tuples", value)

    @property
    @pulumi.getter(name="publishInstanceId")
    def publish_instance_id(self) -> pulumi.Input[str]:
        """
        ID of the SQL Server instance which publish.
        """
        return pulumi.get(self, "publish_instance_id")

    @publish_instance_id.setter
    def publish_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "publish_instance_id", value)

    @property
    @pulumi.getter(name="subscribeInstanceId")
    def subscribe_instance_id(self) -> pulumi.Input[str]:
        """
        ID of the SQL Server instance which subscribe.
        """
        return pulumi.get(self, "subscribe_instance_id")

    @subscribe_instance_id.setter
    def subscribe_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscribe_instance_id", value)

    @property
    @pulumi.getter(name="deleteSubscribeDb")
    def delete_subscribe_db(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
        """
        return pulumi.get(self, "delete_subscribe_db")

    @delete_subscribe_db.setter
    def delete_subscribe_db(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_subscribe_db", value)

    @property
    @pulumi.getter(name="publishSubscribeName")
    def publish_subscribe_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Publish and Subscribe. Default is `default_name`.
        """
        return pulumi.get(self, "publish_subscribe_name")

    @publish_subscribe_name.setter
    def publish_subscribe_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_subscribe_name", value)


@pulumi.input_type
class _PublishSubscribeState:
    def __init__(__self__, *,
                 database_tuples: Optional[pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]]] = None,
                 delete_subscribe_db: Optional[pulumi.Input[bool]] = None,
                 publish_instance_id: Optional[pulumi.Input[str]] = None,
                 publish_subscribe_name: Optional[pulumi.Input[str]] = None,
                 subscribe_instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PublishSubscribe resources.
        :param pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]] database_tuples: Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
        :param pulumi.Input[bool] delete_subscribe_db: Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
        :param pulumi.Input[str] publish_instance_id: ID of the SQL Server instance which publish.
        :param pulumi.Input[str] publish_subscribe_name: The name of the Publish and Subscribe. Default is `default_name`.
        :param pulumi.Input[str] subscribe_instance_id: ID of the SQL Server instance which subscribe.
        """
        if database_tuples is not None:
            pulumi.set(__self__, "database_tuples", database_tuples)
        if delete_subscribe_db is not None:
            pulumi.set(__self__, "delete_subscribe_db", delete_subscribe_db)
        if publish_instance_id is not None:
            pulumi.set(__self__, "publish_instance_id", publish_instance_id)
        if publish_subscribe_name is not None:
            pulumi.set(__self__, "publish_subscribe_name", publish_subscribe_name)
        if subscribe_instance_id is not None:
            pulumi.set(__self__, "subscribe_instance_id", subscribe_instance_id)

    @property
    @pulumi.getter(name="databaseTuples")
    def database_tuples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]]]:
        """
        Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
        """
        return pulumi.get(self, "database_tuples")

    @database_tuples.setter
    def database_tuples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PublishSubscribeDatabaseTupleArgs']]]]):
        pulumi.set(self, "database_tuples", value)

    @property
    @pulumi.getter(name="deleteSubscribeDb")
    def delete_subscribe_db(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
        """
        return pulumi.get(self, "delete_subscribe_db")

    @delete_subscribe_db.setter
    def delete_subscribe_db(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_subscribe_db", value)

    @property
    @pulumi.getter(name="publishInstanceId")
    def publish_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the SQL Server instance which publish.
        """
        return pulumi.get(self, "publish_instance_id")

    @publish_instance_id.setter
    def publish_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_instance_id", value)

    @property
    @pulumi.getter(name="publishSubscribeName")
    def publish_subscribe_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Publish and Subscribe. Default is `default_name`.
        """
        return pulumi.get(self, "publish_subscribe_name")

    @publish_subscribe_name.setter
    def publish_subscribe_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_subscribe_name", value)

    @property
    @pulumi.getter(name="subscribeInstanceId")
    def subscribe_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the SQL Server instance which subscribe.
        """
        return pulumi.get(self, "subscribe_instance_id")

    @subscribe_instance_id.setter
    def subscribe_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscribe_instance_id", value)


class PublishSubscribe(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_tuples: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublishSubscribeDatabaseTupleArgs']]]]] = None,
                 delete_subscribe_db: Optional[pulumi.Input[bool]] = None,
                 publish_instance_id: Optional[pulumi.Input[str]] = None,
                 publish_subscribe_name: Optional[pulumi.Input[str]] = None,
                 subscribe_instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a SQL Server PublishSubscribe resource belongs to SQL Server instance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_pub_general_cloud_instance = tencentcloud.sqlserver.GeneralCloudInstance("examplePubGeneralCloudInstance",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        example_sub_general_cloud_instance = tencentcloud.sqlserver.GeneralCloudInstance("exampleSubGeneralCloudInstance",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        example_pub_db = tencentcloud.sqlserver.Db("examplePubDb",
            instance_id=example_pub_general_cloud_instance.id,
            charset="Chinese_PRC_BIN",
            remark="test-remark")
        example_sub_db = tencentcloud.sqlserver.Db("exampleSubDb",
            instance_id=example_sub_general_cloud_instance.id,
            charset="Chinese_PRC_BIN",
            remark="test-remark")
        example = tencentcloud.sqlserver.PublishSubscribe("example",
            publish_instance_id=example_pub_general_cloud_instance.id,
            subscribe_instance_id=example_sub_general_cloud_instance.id,
            publish_subscribe_name="example",
            delete_subscribe_db=False,
            database_tuples=[tencentcloud.sqlserver.PublishSubscribeDatabaseTupleArgs(
                publish_database=example_pub_db.name,
                subscribe_database=example_sub_db.name,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SQL Server PublishSubscribe can be imported using the publish_sqlserver_id#subscribe_sqlserver_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe example publish_sqlserver_id#subscribe_sqlserver_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublishSubscribeDatabaseTupleArgs']]]] database_tuples: Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
        :param pulumi.Input[bool] delete_subscribe_db: Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
        :param pulumi.Input[str] publish_instance_id: ID of the SQL Server instance which publish.
        :param pulumi.Input[str] publish_subscribe_name: The name of the Publish and Subscribe. Default is `default_name`.
        :param pulumi.Input[str] subscribe_instance_id: ID of the SQL Server instance which subscribe.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PublishSubscribeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a SQL Server PublishSubscribe resource belongs to SQL Server instance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_pub_general_cloud_instance = tencentcloud.sqlserver.GeneralCloudInstance("examplePubGeneralCloudInstance",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        example_sub_general_cloud_instance = tencentcloud.sqlserver.GeneralCloudInstance("exampleSubGeneralCloudInstance",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        example_pub_db = tencentcloud.sqlserver.Db("examplePubDb",
            instance_id=example_pub_general_cloud_instance.id,
            charset="Chinese_PRC_BIN",
            remark="test-remark")
        example_sub_db = tencentcloud.sqlserver.Db("exampleSubDb",
            instance_id=example_sub_general_cloud_instance.id,
            charset="Chinese_PRC_BIN",
            remark="test-remark")
        example = tencentcloud.sqlserver.PublishSubscribe("example",
            publish_instance_id=example_pub_general_cloud_instance.id,
            subscribe_instance_id=example_sub_general_cloud_instance.id,
            publish_subscribe_name="example",
            delete_subscribe_db=False,
            database_tuples=[tencentcloud.sqlserver.PublishSubscribeDatabaseTupleArgs(
                publish_database=example_pub_db.name,
                subscribe_database=example_sub_db.name,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        SQL Server PublishSubscribe can be imported using the publish_sqlserver_id#subscribe_sqlserver_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe example publish_sqlserver_id#subscribe_sqlserver_id
        ```

        :param str resource_name: The name of the resource.
        :param PublishSubscribeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PublishSubscribeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_tuples: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublishSubscribeDatabaseTupleArgs']]]]] = None,
                 delete_subscribe_db: Optional[pulumi.Input[bool]] = None,
                 publish_instance_id: Optional[pulumi.Input[str]] = None,
                 publish_subscribe_name: Optional[pulumi.Input[str]] = None,
                 subscribe_instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PublishSubscribeArgs.__new__(PublishSubscribeArgs)

            if database_tuples is None and not opts.urn:
                raise TypeError("Missing required property 'database_tuples'")
            __props__.__dict__["database_tuples"] = database_tuples
            __props__.__dict__["delete_subscribe_db"] = delete_subscribe_db
            if publish_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'publish_instance_id'")
            __props__.__dict__["publish_instance_id"] = publish_instance_id
            __props__.__dict__["publish_subscribe_name"] = publish_subscribe_name
            if subscribe_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscribe_instance_id'")
            __props__.__dict__["subscribe_instance_id"] = subscribe_instance_id
        super(PublishSubscribe, __self__).__init__(
            'tencentcloud:Sqlserver/publishSubscribe:PublishSubscribe',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            database_tuples: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublishSubscribeDatabaseTupleArgs']]]]] = None,
            delete_subscribe_db: Optional[pulumi.Input[bool]] = None,
            publish_instance_id: Optional[pulumi.Input[str]] = None,
            publish_subscribe_name: Optional[pulumi.Input[str]] = None,
            subscribe_instance_id: Optional[pulumi.Input[str]] = None) -> 'PublishSubscribe':
        """
        Get an existing PublishSubscribe resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PublishSubscribeDatabaseTupleArgs']]]] database_tuples: Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
        :param pulumi.Input[bool] delete_subscribe_db: Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
        :param pulumi.Input[str] publish_instance_id: ID of the SQL Server instance which publish.
        :param pulumi.Input[str] publish_subscribe_name: The name of the Publish and Subscribe. Default is `default_name`.
        :param pulumi.Input[str] subscribe_instance_id: ID of the SQL Server instance which subscribe.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PublishSubscribeState.__new__(_PublishSubscribeState)

        __props__.__dict__["database_tuples"] = database_tuples
        __props__.__dict__["delete_subscribe_db"] = delete_subscribe_db
        __props__.__dict__["publish_instance_id"] = publish_instance_id
        __props__.__dict__["publish_subscribe_name"] = publish_subscribe_name
        __props__.__dict__["subscribe_instance_id"] = subscribe_instance_id
        return PublishSubscribe(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="databaseTuples")
    def database_tuples(self) -> pulumi.Output[Sequence['outputs.PublishSubscribeDatabaseTuple']]:
        """
        Database Publish and Publish relationship list. The elements inside can be deleted and added individually, but modification is not allowed.
        """
        return pulumi.get(self, "database_tuples")

    @property
    @pulumi.getter(name="deleteSubscribeDb")
    def delete_subscribe_db(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to delete the subscriber database when deleting the Publish and Subscribe. `true` for deletes the subscribe database, `false` for does not delete the subscribe database. default is `false`.
        """
        return pulumi.get(self, "delete_subscribe_db")

    @property
    @pulumi.getter(name="publishInstanceId")
    def publish_instance_id(self) -> pulumi.Output[str]:
        """
        ID of the SQL Server instance which publish.
        """
        return pulumi.get(self, "publish_instance_id")

    @property
    @pulumi.getter(name="publishSubscribeName")
    def publish_subscribe_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the Publish and Subscribe. Default is `default_name`.
        """
        return pulumi.get(self, "publish_subscribe_name")

    @property
    @pulumi.getter(name="subscribeInstanceId")
    def subscribe_instance_id(self) -> pulumi.Output[str]:
        """
        ID of the SQL Server instance which subscribe.
        """
        return pulumi.get(self, "subscribe_instance_id")

