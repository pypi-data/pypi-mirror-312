# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetBackupByFlowIdResult',
    'AwaitableGetBackupByFlowIdResult',
    'get_backup_by_flow_id',
    'get_backup_by_flow_id_output',
]

@pulumi.output_type
class GetBackupByFlowIdResult:
    """
    A collection of values returned by getBackupByFlowId.
    """
    def __init__(__self__, backup_name=None, backup_way=None, dbs=None, end_time=None, external_addr=None, file_name=None, flow_id=None, group_id=None, id=None, instance_id=None, internal_addr=None, result_output_file=None, start_time=None, status=None, strategy=None):
        if backup_name and not isinstance(backup_name, str):
            raise TypeError("Expected argument 'backup_name' to be a str")
        pulumi.set(__self__, "backup_name", backup_name)
        if backup_way and not isinstance(backup_way, int):
            raise TypeError("Expected argument 'backup_way' to be a int")
        pulumi.set(__self__, "backup_way", backup_way)
        if dbs and not isinstance(dbs, list):
            raise TypeError("Expected argument 'dbs' to be a list")
        pulumi.set(__self__, "dbs", dbs)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if external_addr and not isinstance(external_addr, str):
            raise TypeError("Expected argument 'external_addr' to be a str")
        pulumi.set(__self__, "external_addr", external_addr)
        if file_name and not isinstance(file_name, str):
            raise TypeError("Expected argument 'file_name' to be a str")
        pulumi.set(__self__, "file_name", file_name)
        if flow_id and not isinstance(flow_id, str):
            raise TypeError("Expected argument 'flow_id' to be a str")
        pulumi.set(__self__, "flow_id", flow_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if internal_addr and not isinstance(internal_addr, str):
            raise TypeError("Expected argument 'internal_addr' to be a str")
        pulumi.set(__self__, "internal_addr", internal_addr)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)
        if strategy and not isinstance(strategy, int):
            raise TypeError("Expected argument 'strategy' to be a int")
        pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> str:
        """
        Backup task name, customizable.
        """
        return pulumi.get(self, "backup_name")

    @property
    @pulumi.getter(name="backupWay")
    def backup_way(self) -> int:
        """
        Backup method, 0-scheduled backup; 1-manual temporary backup; instance status is 0-creating, this field is the default value 0, meaningless.
        """
        return pulumi.get(self, "backup_way")

    @property
    @pulumi.getter
    def dbs(self) -> Sequence[str]:
        """
        For the DB list, only the library name contained in the first record is returned for a single-database backup file; for a single-database backup file, the library names of all records need to be obtained through the DescribeBackupFiles interface.
        """
        return pulumi.get(self, "dbs")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        backup end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="externalAddr")
    def external_addr(self) -> str:
        """
        External network download address, for a single database backup file, only the external network download address of the first record is returned; single database backup files need to obtain the download addresses of all records through the DescribeBackupFiles interface.
        """
        return pulumi.get(self, "external_addr")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        File name. For a single-database backup file, only the file name of the first record is returned; for a single-database backup file, the file names of all records need to be obtained through the DescribeBackupFiles interface.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> str:
        return pulumi.get(self, "flow_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Aggregate Id, this value is not returned for packaged backup files. Use this value to call the DescribeBackupFiles interface to obtain the detailed information of a single database backup file.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="internalAddr")
    def internal_addr(self) -> str:
        """
        Intranet download address, for a single database backup file, only the intranet download address of the first record is returned; single database backup files need to obtain the download addresses of all records through the DescribeBackupFiles interface.
        """
        return pulumi.get(self, "internal_addr")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        backup start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Backup file status, 0-creating; 1-success; 2-failure.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def strategy(self) -> int:
        """
        Backup strategy, 0-instance backup; 1-multi-database backup; when the instance status is 0-creating, this field is the default value 0, meaningless.
        """
        return pulumi.get(self, "strategy")


class AwaitableGetBackupByFlowIdResult(GetBackupByFlowIdResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupByFlowIdResult(
            backup_name=self.backup_name,
            backup_way=self.backup_way,
            dbs=self.dbs,
            end_time=self.end_time,
            external_addr=self.external_addr,
            file_name=self.file_name,
            flow_id=self.flow_id,
            group_id=self.group_id,
            id=self.id,
            instance_id=self.instance_id,
            internal_addr=self.internal_addr,
            result_output_file=self.result_output_file,
            start_time=self.start_time,
            status=self.status,
            strategy=self.strategy)


def get_backup_by_flow_id(flow_id: Optional[str] = None,
                          instance_id: Optional[str] = None,
                          result_output_file: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupByFlowIdResult:
    """
    Use this data source to query detailed information of sqlserver datasource_backup_by_flow_id

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
    vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
    subnet = tencentcloud.subnet.Instance("subnet",
        availability_zone=zones.zones[4].name,
        vpc_id=vpc.id,
        cidr_block="10.0.0.0/16",
        is_multicast=False)
    security_group = tencentcloud.security.Group("securityGroup", description="desc.")
    example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
        availability_zone=zones.zones[4].name,
        charge_type="POSTPAID_BY_HOUR",
        vpc_id=vpc.id,
        subnet_id=subnet.id,
        project_id=0,
        memory=4,
        storage=100,
        cpu=2,
        machine_type="CLOUD_PREMIUM",
        maintenance_week_sets=[
            1,
            2,
            3,
        ],
        maintenance_start_time="09:00",
        maintenance_time_span=3,
        security_groups=[security_group.id],
        tags={
            "test": "test",
        })
    example_db = tencentcloud.sqlserver.Db("exampleDb",
        instance_id=example_basic_instance.id,
        charset="Chinese_PRC_BIN",
        remark="test-remark")
    example_general_backup = tencentcloud.sqlserver.GeneralBackup("exampleGeneralBackup",
        instance_id=example_db.id,
        backup_name="tf_example_backup",
        strategy=0)
    example_backup_by_flow_id = tencentcloud.Sqlserver.get_backup_by_flow_id_output(instance_id=example_general_backup.instance_id,
        flow_id=example_general_backup.flow_id)
    ```
    <!--End PulumiCodeChooser -->


    :param str flow_id: Create a backup process ID, which can be obtained through the [CreateBackup](https://cloud.tencent.com/document/product/238/19946) interface.
    :param str instance_id: Instance ID.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['flowId'] = flow_id
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Sqlserver/getBackupByFlowId:getBackupByFlowId', __args__, opts=opts, typ=GetBackupByFlowIdResult).value

    return AwaitableGetBackupByFlowIdResult(
        backup_name=pulumi.get(__ret__, 'backup_name'),
        backup_way=pulumi.get(__ret__, 'backup_way'),
        dbs=pulumi.get(__ret__, 'dbs'),
        end_time=pulumi.get(__ret__, 'end_time'),
        external_addr=pulumi.get(__ret__, 'external_addr'),
        file_name=pulumi.get(__ret__, 'file_name'),
        flow_id=pulumi.get(__ret__, 'flow_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        internal_addr=pulumi.get(__ret__, 'internal_addr'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        strategy=pulumi.get(__ret__, 'strategy'))


@_utilities.lift_output_func(get_backup_by_flow_id)
def get_backup_by_flow_id_output(flow_id: Optional[pulumi.Input[str]] = None,
                                 instance_id: Optional[pulumi.Input[str]] = None,
                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupByFlowIdResult]:
    """
    Use this data source to query detailed information of sqlserver datasource_backup_by_flow_id

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
    vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
    subnet = tencentcloud.subnet.Instance("subnet",
        availability_zone=zones.zones[4].name,
        vpc_id=vpc.id,
        cidr_block="10.0.0.0/16",
        is_multicast=False)
    security_group = tencentcloud.security.Group("securityGroup", description="desc.")
    example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
        availability_zone=zones.zones[4].name,
        charge_type="POSTPAID_BY_HOUR",
        vpc_id=vpc.id,
        subnet_id=subnet.id,
        project_id=0,
        memory=4,
        storage=100,
        cpu=2,
        machine_type="CLOUD_PREMIUM",
        maintenance_week_sets=[
            1,
            2,
            3,
        ],
        maintenance_start_time="09:00",
        maintenance_time_span=3,
        security_groups=[security_group.id],
        tags={
            "test": "test",
        })
    example_db = tencentcloud.sqlserver.Db("exampleDb",
        instance_id=example_basic_instance.id,
        charset="Chinese_PRC_BIN",
        remark="test-remark")
    example_general_backup = tencentcloud.sqlserver.GeneralBackup("exampleGeneralBackup",
        instance_id=example_db.id,
        backup_name="tf_example_backup",
        strategy=0)
    example_backup_by_flow_id = tencentcloud.Sqlserver.get_backup_by_flow_id_output(instance_id=example_general_backup.instance_id,
        flow_id=example_general_backup.flow_id)
    ```
    <!--End PulumiCodeChooser -->


    :param str flow_id: Create a backup process ID, which can be obtained through the [CreateBackup](https://cloud.tencent.com/document/product/238/19946) interface.
    :param str instance_id: Instance ID.
    :param str result_output_file: Used to save results.
    """
    ...
