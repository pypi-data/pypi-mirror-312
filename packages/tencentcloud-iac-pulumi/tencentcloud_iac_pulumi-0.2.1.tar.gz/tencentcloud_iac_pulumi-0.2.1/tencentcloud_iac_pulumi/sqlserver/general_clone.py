# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GeneralCloneArgs', 'GeneralClone']

@pulumi.input_type
class GeneralCloneArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 new_name: pulumi.Input[str],
                 old_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a GeneralClone resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] new_name: New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        :param pulumi.Input[str] old_name: Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "new_name", new_name)
        pulumi.set(__self__, "old_name", old_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> pulumi.Input[str]:
        """
        New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        """
        return pulumi.get(self, "new_name")

    @new_name.setter
    def new_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "new_name", value)

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> pulumi.Input[str]:
        """
        Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        """
        return pulumi.get(self, "old_name")

    @old_name.setter
    def old_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "old_name", value)


@pulumi.input_type
class _GeneralCloneState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 new_name: Optional[pulumi.Input[str]] = None,
                 old_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GeneralClone resources.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] new_name: New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        :param pulumi.Input[str] old_name: Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if new_name is not None:
            pulumi.set(__self__, "new_name", new_name)
        if old_name is not None:
            pulumi.set(__self__, "old_name", old_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> Optional[pulumi.Input[str]]:
        """
        New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        """
        return pulumi.get(self, "new_name")

    @new_name.setter
    def new_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_name", value)

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        """
        return pulumi.get(self, "old_name")

    @old_name.setter
    def old_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "old_name", value)


class GeneralClone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 new_name: Optional[pulumi.Input[str]] = None,
                 old_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver general_communication

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        example_db = tencentcloud.sqlserver.Db("exampleDb",
            instance_id=example_basic_instance.id,
            charset="Chinese_PRC_BIN",
            remark="test-remark")
        example_general_clone = tencentcloud.sqlserver.GeneralClone("exampleGeneralClone",
            instance_id=example_db.instance_id,
            old_name=example_db.name,
            new_name="tf_example_db_clone")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver general_communication can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/generalClone:GeneralClone example mssql-si2823jyl#tf_example_db#tf_example_db_clone
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] new_name: New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        :param pulumi.Input[str] old_name: Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GeneralCloneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver general_communication

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        example_db = tencentcloud.sqlserver.Db("exampleDb",
            instance_id=example_basic_instance.id,
            charset="Chinese_PRC_BIN",
            remark="test-remark")
        example_general_clone = tencentcloud.sqlserver.GeneralClone("exampleGeneralClone",
            instance_id=example_db.instance_id,
            old_name=example_db.name,
            new_name="tf_example_db_clone")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver general_communication can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/generalClone:GeneralClone example mssql-si2823jyl#tf_example_db#tf_example_db_clone
        ```

        :param str resource_name: The name of the resource.
        :param GeneralCloneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GeneralCloneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 new_name: Optional[pulumi.Input[str]] = None,
                 old_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GeneralCloneArgs.__new__(GeneralCloneArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if new_name is None and not opts.urn:
                raise TypeError("Missing required property 'new_name'")
            __props__.__dict__["new_name"] = new_name
            if old_name is None and not opts.urn:
                raise TypeError("Missing required property 'old_name'")
            __props__.__dict__["old_name"] = old_name
        super(GeneralClone, __self__).__init__(
            'tencentcloud:Sqlserver/generalClone:GeneralClone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            new_name: Optional[pulumi.Input[str]] = None,
            old_name: Optional[pulumi.Input[str]] = None) -> 'GeneralClone':
        """
        Get an existing GeneralClone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] new_name: New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        :param pulumi.Input[str] old_name: Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GeneralCloneState.__new__(_GeneralCloneState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["new_name"] = new_name
        __props__.__dict__["old_name"] = old_name
        return GeneralClone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> pulumi.Output[str]:
        """
        New database name. In offline migration, OldName will be used if NewName is left empty (OldName and NewName cannot be both empty). In database cloning, OldName and NewName must be both specified and cannot have the same value.
        """
        return pulumi.get(self, "new_name")

    @property
    @pulumi.getter(name="oldName")
    def old_name(self) -> pulumi.Output[str]:
        """
        Database name. If the OldName database does not exist, a failure will be returned. It can be left empty in offline migration tasks.
        """
        return pulumi.get(self, "old_name")

