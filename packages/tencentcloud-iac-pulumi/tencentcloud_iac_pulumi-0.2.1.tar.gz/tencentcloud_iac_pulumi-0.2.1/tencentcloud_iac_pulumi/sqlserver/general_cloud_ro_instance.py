# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GeneralCloudRoInstanceArgs', 'GeneralCloudRoInstance']

@pulumi.input_type
class GeneralCloudRoInstanceArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input[int],
                 instance_id: pulumi.Input[str],
                 machine_type: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 read_only_group_type: pulumi.Input[int],
                 storage: pulumi.Input[int],
                 zone: pulumi.Input[str],
                 collation: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_is_offline_delay: Optional[pulumi.Input[int]] = None,
                 read_only_group_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_group_min_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 resource_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GeneralCloudRoInstance resource.
        :param pulumi.Input[int] cpu: Number of instance cores.
        :param pulumi.Input[str] instance_id: Primary instance ID, in the format: mssql-3l3fgqn7.
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Instance memory size, in GB.
        :param pulumi.Input[int] read_only_group_type: Read-only group type option, 1- Ship according to one instance and one read-only group, 2 - Ship after creating a read-only group, all instances are under this read-only group, 3 - All instances shipped are in the existing Some read-only groups below.
        :param pulumi.Input[int] storage: Instance disk size, in GB.
        :param pulumi.Input[str] zone: Instance Availability Zone, similar to ap-guangzhou-1 (Guangzhou District 1); the instance sales area can be obtained through the interface DescribeZones.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48.
        :param pulumi.Input[str] read_only_group_id: Required when ReadOnlyGroupType=3, existing read-only group ID.
        :param pulumi.Input[int] read_only_group_is_offline_delay: Required when ReadOnlyGroupType=2, whether to enable the delayed elimination function for the newly created read-only group, 1-on, 0-off. When the delay between the read-only replica and the primary instance is greater than the threshold, it will be automatically removed.
        :param pulumi.Input[int] read_only_group_max_delay_time: Mandatory when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the threshold for delay culling of newly created read-only groups.
        :param pulumi.Input[int] read_only_group_min_in_group: Required when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the newly created read-only group retains at least the number of read-only replicas after delay elimination.
        :param pulumi.Input[str] read_only_group_name: Required when ReadOnlyGroupType=2, the name of the newly created read-only group.
        :param pulumi.Input[Mapping[str, Any]] resource_tags: Tag description list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "read_only_group_type", read_only_group_type)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "zone", zone)
        if collation is not None:
            pulumi.set(__self__, "collation", collation)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if read_only_group_id is not None:
            pulumi.set(__self__, "read_only_group_id", read_only_group_id)
        if read_only_group_is_offline_delay is not None:
            pulumi.set(__self__, "read_only_group_is_offline_delay", read_only_group_is_offline_delay)
        if read_only_group_max_delay_time is not None:
            pulumi.set(__self__, "read_only_group_max_delay_time", read_only_group_max_delay_time)
        if read_only_group_min_in_group is not None:
            pulumi.set(__self__, "read_only_group_min_in_group", read_only_group_min_in_group)
        if read_only_group_name is not None:
            pulumi.set(__self__, "read_only_group_name", read_only_group_name)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_lists is not None:
            pulumi.set(__self__, "security_group_lists", security_group_lists)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[int]:
        """
        Number of instance cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Primary instance ID, in the format: mssql-3l3fgqn7.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        Instance memory size, in GB.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="readOnlyGroupType")
    def read_only_group_type(self) -> pulumi.Input[int]:
        """
        Read-only group type option, 1- Ship according to one instance and one read-only group, 2 - Ship after creating a read-only group, all instances are under this read-only group, 3 - All instances shipped are in the existing Some read-only groups below.
        """
        return pulumi.get(self, "read_only_group_type")

    @read_only_group_type.setter
    def read_only_group_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "read_only_group_type", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[int]:
        """
        Instance disk size, in GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Instance Availability Zone, similar to ap-guangzhou-1 (Guangzhou District 1); the instance sales area can be obtained through the interface DescribeZones.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def collation(self) -> Optional[pulumi.Input[str]]:
        """
        System character set collation, default: Chinese_PRC_CI_AS.
        """
        return pulumi.get(self, "collation")

    @collation.setter
    def collation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collation", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required when ReadOnlyGroupType=3, existing read-only group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_id", value)

    @property
    @pulumi.getter(name="readOnlyGroupIsOfflineDelay")
    def read_only_group_is_offline_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Required when ReadOnlyGroupType=2, whether to enable the delayed elimination function for the newly created read-only group, 1-on, 0-off. When the delay between the read-only replica and the primary instance is greater than the threshold, it will be automatically removed.
        """
        return pulumi.get(self, "read_only_group_is_offline_delay")

    @read_only_group_is_offline_delay.setter
    def read_only_group_is_offline_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_group_is_offline_delay", value)

    @property
    @pulumi.getter(name="readOnlyGroupMaxDelayTime")
    def read_only_group_max_delay_time(self) -> Optional[pulumi.Input[int]]:
        """
        Mandatory when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the threshold for delay culling of newly created read-only groups.
        """
        return pulumi.get(self, "read_only_group_max_delay_time")

    @read_only_group_max_delay_time.setter
    def read_only_group_max_delay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_group_max_delay_time", value)

    @property
    @pulumi.getter(name="readOnlyGroupMinInGroup")
    def read_only_group_min_in_group(self) -> Optional[pulumi.Input[int]]:
        """
        Required when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the newly created read-only group retains at least the number of read-only replicas after delay elimination.
        """
        return pulumi.get(self, "read_only_group_min_in_group")

    @read_only_group_min_in_group.setter
    def read_only_group_min_in_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_group_min_in_group", value)

    @property
    @pulumi.getter(name="readOnlyGroupName")
    def read_only_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required when ReadOnlyGroupType=2, the name of the newly created read-only group.
        """
        return pulumi.get(self, "read_only_group_name")

    @read_only_group_name.setter
    def read_only_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_name", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group list, fill in the security group ID in the form of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @security_group_lists.setter
    def security_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_lists", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        System time zone, default: China Standard Time.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _GeneralCloudRoInstanceState:
    def __init__(__self__, *,
                 collation: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_is_offline_delay: Optional[pulumi.Input[int]] = None,
                 read_only_group_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_group_min_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 read_only_group_type: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 ro_instance_id: Optional[pulumi.Input[str]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GeneralCloudRoInstance resources.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[int] cpu: Number of instance cores.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[str] instance_id: Primary instance ID, in the format: mssql-3l3fgqn7.
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Instance memory size, in GB.
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48.
        :param pulumi.Input[str] read_only_group_id: Required when ReadOnlyGroupType=3, existing read-only group ID.
        :param pulumi.Input[int] read_only_group_is_offline_delay: Required when ReadOnlyGroupType=2, whether to enable the delayed elimination function for the newly created read-only group, 1-on, 0-off. When the delay between the read-only replica and the primary instance is greater than the threshold, it will be automatically removed.
        :param pulumi.Input[int] read_only_group_max_delay_time: Mandatory when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the threshold for delay culling of newly created read-only groups.
        :param pulumi.Input[int] read_only_group_min_in_group: Required when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the newly created read-only group retains at least the number of read-only replicas after delay elimination.
        :param pulumi.Input[str] read_only_group_name: Required when ReadOnlyGroupType=2, the name of the newly created read-only group.
        :param pulumi.Input[int] read_only_group_type: Read-only group type option, 1- Ship according to one instance and one read-only group, 2 - Ship after creating a read-only group, all instances are under this read-only group, 3 - All instances shipped are in the existing Some read-only groups below.
        :param pulumi.Input[Mapping[str, Any]] resource_tags: Tag description list.
        :param pulumi.Input[str] ro_instance_id: Primary read only instance ID, in the format: mssqlro-lbljc5qd.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[int] storage: Instance disk size, in GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] zone: Instance Availability Zone, similar to ap-guangzhou-1 (Guangzhou District 1); the instance sales area can be obtained through the interface DescribeZones.
        """
        if collation is not None:
            pulumi.set(__self__, "collation", collation)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if read_only_group_id is not None:
            pulumi.set(__self__, "read_only_group_id", read_only_group_id)
        if read_only_group_is_offline_delay is not None:
            pulumi.set(__self__, "read_only_group_is_offline_delay", read_only_group_is_offline_delay)
        if read_only_group_max_delay_time is not None:
            pulumi.set(__self__, "read_only_group_max_delay_time", read_only_group_max_delay_time)
        if read_only_group_min_in_group is not None:
            pulumi.set(__self__, "read_only_group_min_in_group", read_only_group_min_in_group)
        if read_only_group_name is not None:
            pulumi.set(__self__, "read_only_group_name", read_only_group_name)
        if read_only_group_type is not None:
            pulumi.set(__self__, "read_only_group_type", read_only_group_type)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if ro_instance_id is not None:
            pulumi.set(__self__, "ro_instance_id", ro_instance_id)
        if security_group_lists is not None:
            pulumi.set(__self__, "security_group_lists", security_group_lists)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def collation(self) -> Optional[pulumi.Input[str]]:
        """
        System character set collation, default: Chinese_PRC_CI_AS.
        """
        return pulumi.get(self, "collation")

    @collation.setter
    def collation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collation", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of instance cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Primary instance ID, in the format: mssql-3l3fgqn7.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Instance memory size, in GB.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Required when ReadOnlyGroupType=3, existing read-only group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_id", value)

    @property
    @pulumi.getter(name="readOnlyGroupIsOfflineDelay")
    def read_only_group_is_offline_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Required when ReadOnlyGroupType=2, whether to enable the delayed elimination function for the newly created read-only group, 1-on, 0-off. When the delay between the read-only replica and the primary instance is greater than the threshold, it will be automatically removed.
        """
        return pulumi.get(self, "read_only_group_is_offline_delay")

    @read_only_group_is_offline_delay.setter
    def read_only_group_is_offline_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_group_is_offline_delay", value)

    @property
    @pulumi.getter(name="readOnlyGroupMaxDelayTime")
    def read_only_group_max_delay_time(self) -> Optional[pulumi.Input[int]]:
        """
        Mandatory when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the threshold for delay culling of newly created read-only groups.
        """
        return pulumi.get(self, "read_only_group_max_delay_time")

    @read_only_group_max_delay_time.setter
    def read_only_group_max_delay_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_group_max_delay_time", value)

    @property
    @pulumi.getter(name="readOnlyGroupMinInGroup")
    def read_only_group_min_in_group(self) -> Optional[pulumi.Input[int]]:
        """
        Required when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the newly created read-only group retains at least the number of read-only replicas after delay elimination.
        """
        return pulumi.get(self, "read_only_group_min_in_group")

    @read_only_group_min_in_group.setter
    def read_only_group_min_in_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_group_min_in_group", value)

    @property
    @pulumi.getter(name="readOnlyGroupName")
    def read_only_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Required when ReadOnlyGroupType=2, the name of the newly created read-only group.
        """
        return pulumi.get(self, "read_only_group_name")

    @read_only_group_name.setter
    def read_only_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_name", value)

    @property
    @pulumi.getter(name="readOnlyGroupType")
    def read_only_group_type(self) -> Optional[pulumi.Input[int]]:
        """
        Read-only group type option, 1- Ship according to one instance and one read-only group, 2 - Ship after creating a read-only group, all instances are under this read-only group, 3 - All instances shipped are in the existing Some read-only groups below.
        """
        return pulumi.get(self, "read_only_group_type")

    @read_only_group_type.setter
    def read_only_group_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_only_group_type", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="roInstanceId")
    def ro_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Primary read only instance ID, in the format: mssqlro-lbljc5qd.
        """
        return pulumi.get(self, "ro_instance_id")

    @ro_instance_id.setter
    def ro_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ro_instance_id", value)

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group list, fill in the security group ID in the form of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @security_group_lists.setter
    def security_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_lists", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        Instance disk size, in GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        System time zone, default: China Standard Time.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Availability Zone, similar to ap-guangzhou-1 (Guangzhou District 1); the instance sales area can be obtained through the interface DescribeZones.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class GeneralCloudRoInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_is_offline_delay: Optional[pulumi.Input[int]] = None,
                 read_only_group_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_group_min_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 read_only_group_type: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver general_cloud_ro_instance

        ## Example Usage

        ### If read_only_group_type value is 1 - Ship according to one instance and one read-only group:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_general_cloud_instance = tencentcloud.sqlserver.GeneralCloudInstance("exampleGeneralCloudInstance",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        example_general_cloud_ro_instance = tencentcloud.sqlserver.GeneralCloudRoInstance("exampleGeneralCloudRoInstance",
            instance_id=example_general_cloud_instance.id,
            zone=zones.zones[4].name,
            read_only_group_type=1,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_BSSD",
            instance_charge_type="POSTPAID",
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            security_group_lists=[security_group.id],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time",
            resource_tags={
                "test-key1": "test-value1",
                "test-key2": "test-value2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### If read_only_group_type value is 2 - Ship after creating a read-only group, all instances are under this read-only group:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.GeneralCloudRoInstance("example",
            instance_id=tencentcloud_sqlserver_general_cloud_instance["example"]["id"],
            zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][4]["name"],
            read_only_group_type=2,
            read_only_group_name="test-ro-group",
            read_only_group_is_offline_delay=1,
            read_only_group_max_delay_time=10,
            read_only_group_min_in_group=1,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_BSSD",
            instance_charge_type="POSTPAID",
            subnet_id=tencentcloud_subnet["subnet"]["id"],
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            security_group_lists=[tencentcloud_security_group["security_group"]["id"]],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time",
            resource_tags={
                "test-key1": "test-value1",
                "test-key2": "test-value2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### If read_only_group_type value is 3 - All instances shipped are in the existing Some read-only groups below:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.GeneralCloudRoInstance("example",
            instance_id=tencentcloud_sqlserver_general_cloud_instance["example"]["id"],
            zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][4]["name"],
            read_only_group_type=3,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_BSSD",
            read_only_group_id="mssqlrg-clboghrj",
            instance_charge_type="POSTPAID",
            subnet_id=tencentcloud_subnet["subnet"]["id"],
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            security_group_lists=[tencentcloud_security_group["security_group"]["id"]],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time",
            resource_tags={
                "test-key1": "test-value1",
                "test-key2": "test-value2",
            })
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[int] cpu: Number of instance cores.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[str] instance_id: Primary instance ID, in the format: mssql-3l3fgqn7.
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Instance memory size, in GB.
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48.
        :param pulumi.Input[str] read_only_group_id: Required when ReadOnlyGroupType=3, existing read-only group ID.
        :param pulumi.Input[int] read_only_group_is_offline_delay: Required when ReadOnlyGroupType=2, whether to enable the delayed elimination function for the newly created read-only group, 1-on, 0-off. When the delay between the read-only replica and the primary instance is greater than the threshold, it will be automatically removed.
        :param pulumi.Input[int] read_only_group_max_delay_time: Mandatory when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the threshold for delay culling of newly created read-only groups.
        :param pulumi.Input[int] read_only_group_min_in_group: Required when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the newly created read-only group retains at least the number of read-only replicas after delay elimination.
        :param pulumi.Input[str] read_only_group_name: Required when ReadOnlyGroupType=2, the name of the newly created read-only group.
        :param pulumi.Input[int] read_only_group_type: Read-only group type option, 1- Ship according to one instance and one read-only group, 2 - Ship after creating a read-only group, all instances are under this read-only group, 3 - All instances shipped are in the existing Some read-only groups below.
        :param pulumi.Input[Mapping[str, Any]] resource_tags: Tag description list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[int] storage: Instance disk size, in GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] zone: Instance Availability Zone, similar to ap-guangzhou-1 (Guangzhou District 1); the instance sales area can be obtained through the interface DescribeZones.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GeneralCloudRoInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver general_cloud_ro_instance

        ## Example Usage

        ### If read_only_group_type value is 1 - Ship according to one instance and one read-only group:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_general_cloud_instance = tencentcloud.sqlserver.GeneralCloudInstance("exampleGeneralCloudInstance",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        example_general_cloud_ro_instance = tencentcloud.sqlserver.GeneralCloudRoInstance("exampleGeneralCloudRoInstance",
            instance_id=example_general_cloud_instance.id,
            zone=zones.zones[4].name,
            read_only_group_type=1,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_BSSD",
            instance_charge_type="POSTPAID",
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            security_group_lists=[security_group.id],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time",
            resource_tags={
                "test-key1": "test-value1",
                "test-key2": "test-value2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### If read_only_group_type value is 2 - Ship after creating a read-only group, all instances are under this read-only group:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.GeneralCloudRoInstance("example",
            instance_id=tencentcloud_sqlserver_general_cloud_instance["example"]["id"],
            zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][4]["name"],
            read_only_group_type=2,
            read_only_group_name="test-ro-group",
            read_only_group_is_offline_delay=1,
            read_only_group_max_delay_time=10,
            read_only_group_min_in_group=1,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_BSSD",
            instance_charge_type="POSTPAID",
            subnet_id=tencentcloud_subnet["subnet"]["id"],
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            security_group_lists=[tencentcloud_security_group["security_group"]["id"]],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time",
            resource_tags={
                "test-key1": "test-value1",
                "test-key2": "test-value2",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### If read_only_group_type value is 3 - All instances shipped are in the existing Some read-only groups below:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.sqlserver.GeneralCloudRoInstance("example",
            instance_id=tencentcloud_sqlserver_general_cloud_instance["example"]["id"],
            zone=data["tencentcloud_availability_zones_by_product"]["zones"]["zones"][4]["name"],
            read_only_group_type=3,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_BSSD",
            read_only_group_id="mssqlrg-clboghrj",
            instance_charge_type="POSTPAID",
            subnet_id=tencentcloud_subnet["subnet"]["id"],
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            security_group_lists=[tencentcloud_security_group["security_group"]["id"]],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time",
            resource_tags={
                "test-key1": "test-value1",
                "test-key2": "test-value2",
            })
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param GeneralCloudRoInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GeneralCloudRoInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_is_offline_delay: Optional[pulumi.Input[int]] = None,
                 read_only_group_max_delay_time: Optional[pulumi.Input[int]] = None,
                 read_only_group_min_in_group: Optional[pulumi.Input[int]] = None,
                 read_only_group_name: Optional[pulumi.Input[str]] = None,
                 read_only_group_type: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GeneralCloudRoInstanceArgs.__new__(GeneralCloudRoInstanceArgs)

            __props__.__dict__["collation"] = collation
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["instance_charge_type"] = instance_charge_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["period"] = period
            __props__.__dict__["read_only_group_id"] = read_only_group_id
            __props__.__dict__["read_only_group_is_offline_delay"] = read_only_group_is_offline_delay
            __props__.__dict__["read_only_group_max_delay_time"] = read_only_group_max_delay_time
            __props__.__dict__["read_only_group_min_in_group"] = read_only_group_min_in_group
            __props__.__dict__["read_only_group_name"] = read_only_group_name
            if read_only_group_type is None and not opts.urn:
                raise TypeError("Missing required property 'read_only_group_type'")
            __props__.__dict__["read_only_group_type"] = read_only_group_type
            __props__.__dict__["resource_tags"] = resource_tags
            __props__.__dict__["security_group_lists"] = security_group_lists
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["vpc_id"] = vpc_id
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["ro_instance_id"] = None
        super(GeneralCloudRoInstance, __self__).__init__(
            'tencentcloud:Sqlserver/generalCloudRoInstance:GeneralCloudRoInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            collation: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            instance_charge_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            machine_type: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            read_only_group_id: Optional[pulumi.Input[str]] = None,
            read_only_group_is_offline_delay: Optional[pulumi.Input[int]] = None,
            read_only_group_max_delay_time: Optional[pulumi.Input[int]] = None,
            read_only_group_min_in_group: Optional[pulumi.Input[int]] = None,
            read_only_group_name: Optional[pulumi.Input[str]] = None,
            read_only_group_type: Optional[pulumi.Input[int]] = None,
            resource_tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            ro_instance_id: Optional[pulumi.Input[str]] = None,
            security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            time_zone: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'GeneralCloudRoInstance':
        """
        Get an existing GeneralCloudRoInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[int] cpu: Number of instance cores.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[str] instance_id: Primary instance ID, in the format: mssql-3l3fgqn7.
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Instance memory size, in GB.
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48.
        :param pulumi.Input[str] read_only_group_id: Required when ReadOnlyGroupType=3, existing read-only group ID.
        :param pulumi.Input[int] read_only_group_is_offline_delay: Required when ReadOnlyGroupType=2, whether to enable the delayed elimination function for the newly created read-only group, 1-on, 0-off. When the delay between the read-only replica and the primary instance is greater than the threshold, it will be automatically removed.
        :param pulumi.Input[int] read_only_group_max_delay_time: Mandatory when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the threshold for delay culling of newly created read-only groups.
        :param pulumi.Input[int] read_only_group_min_in_group: Required when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the newly created read-only group retains at least the number of read-only replicas after delay elimination.
        :param pulumi.Input[str] read_only_group_name: Required when ReadOnlyGroupType=2, the name of the newly created read-only group.
        :param pulumi.Input[int] read_only_group_type: Read-only group type option, 1- Ship according to one instance and one read-only group, 2 - Ship after creating a read-only group, all instances are under this read-only group, 3 - All instances shipped are in the existing Some read-only groups below.
        :param pulumi.Input[Mapping[str, Any]] resource_tags: Tag description list.
        :param pulumi.Input[str] ro_instance_id: Primary read only instance ID, in the format: mssqlro-lbljc5qd.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[int] storage: Instance disk size, in GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] zone: Instance Availability Zone, similar to ap-guangzhou-1 (Guangzhou District 1); the instance sales area can be obtained through the interface DescribeZones.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GeneralCloudRoInstanceState.__new__(_GeneralCloudRoInstanceState)

        __props__.__dict__["collation"] = collation
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["instance_charge_type"] = instance_charge_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["memory"] = memory
        __props__.__dict__["period"] = period
        __props__.__dict__["read_only_group_id"] = read_only_group_id
        __props__.__dict__["read_only_group_is_offline_delay"] = read_only_group_is_offline_delay
        __props__.__dict__["read_only_group_max_delay_time"] = read_only_group_max_delay_time
        __props__.__dict__["read_only_group_min_in_group"] = read_only_group_min_in_group
        __props__.__dict__["read_only_group_name"] = read_only_group_name
        __props__.__dict__["read_only_group_type"] = read_only_group_type
        __props__.__dict__["resource_tags"] = resource_tags
        __props__.__dict__["ro_instance_id"] = ro_instance_id
        __props__.__dict__["security_group_lists"] = security_group_lists
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone"] = zone
        return GeneralCloudRoInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def collation(self) -> pulumi.Output[Optional[str]]:
        """
        System character set collation, default: Chinese_PRC_CI_AS.
        """
        return pulumi.get(self, "collation")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        Number of instance cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Primary instance ID, in the format: mssql-3l3fgqn7.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[str]:
        """
        The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        Instance memory size, in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> pulumi.Output[str]:
        """
        Required when ReadOnlyGroupType=3, existing read-only group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @property
    @pulumi.getter(name="readOnlyGroupIsOfflineDelay")
    def read_only_group_is_offline_delay(self) -> pulumi.Output[int]:
        """
        Required when ReadOnlyGroupType=2, whether to enable the delayed elimination function for the newly created read-only group, 1-on, 0-off. When the delay between the read-only replica and the primary instance is greater than the threshold, it will be automatically removed.
        """
        return pulumi.get(self, "read_only_group_is_offline_delay")

    @property
    @pulumi.getter(name="readOnlyGroupMaxDelayTime")
    def read_only_group_max_delay_time(self) -> pulumi.Output[int]:
        """
        Mandatory when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the threshold for delay culling of newly created read-only groups.
        """
        return pulumi.get(self, "read_only_group_max_delay_time")

    @property
    @pulumi.getter(name="readOnlyGroupMinInGroup")
    def read_only_group_min_in_group(self) -> pulumi.Output[int]:
        """
        Required when ReadOnlyGroupType=2 and ReadOnlyGroupIsOfflineDelay=1, the newly created read-only group retains at least the number of read-only replicas after delay elimination.
        """
        return pulumi.get(self, "read_only_group_min_in_group")

    @property
    @pulumi.getter(name="readOnlyGroupName")
    def read_only_group_name(self) -> pulumi.Output[str]:
        """
        Required when ReadOnlyGroupType=2, the name of the newly created read-only group.
        """
        return pulumi.get(self, "read_only_group_name")

    @property
    @pulumi.getter(name="readOnlyGroupType")
    def read_only_group_type(self) -> pulumi.Output[int]:
        """
        Read-only group type option, 1- Ship according to one instance and one read-only group, 2 - Ship after creating a read-only group, all instances are under this read-only group, 3 - All instances shipped are in the existing Some read-only groups below.
        """
        return pulumi.get(self, "read_only_group_type")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="roInstanceId")
    def ro_instance_id(self) -> pulumi.Output[str]:
        """
        Primary read only instance ID, in the format: mssqlro-lbljc5qd.
        """
        return pulumi.get(self, "ro_instance_id")

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security group list, fill in the security group ID in the form of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        Instance disk size, in GB.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[Optional[str]]:
        """
        System time zone, default: China Standard Time.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Instance Availability Zone, similar to ap-guangzhou-1 (Guangzhou District 1); the instance sales area can be obtained through the interface DescribeZones.
        """
        return pulumi.get(self, "zone")

