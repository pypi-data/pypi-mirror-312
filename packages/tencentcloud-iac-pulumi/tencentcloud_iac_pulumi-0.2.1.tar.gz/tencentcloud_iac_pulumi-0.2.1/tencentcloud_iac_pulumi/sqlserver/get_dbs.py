# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDbsResult',
    'AwaitableGetDbsResult',
    'get_dbs',
    'get_dbs_output',
]

@pulumi.output_type
class GetDbsResult:
    """
    A collection of values returned by getDbs.
    """
    def __init__(__self__, db_lists=None, id=None, instance_id=None, result_output_file=None):
        if db_lists and not isinstance(db_lists, list):
            raise TypeError("Expected argument 'db_lists' to be a list")
        pulumi.set(__self__, "db_lists", db_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="dbLists")
    def db_lists(self) -> Sequence['outputs.GetDbsDbListResult']:
        """
        A list of dbs belong to the specific instance. Each element contains the following attributes:
        """
        return pulumi.get(self, "db_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        SQL Server instance ID which DB belongs to.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDbsResult(GetDbsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbsResult(
            db_lists=self.db_lists,
            id=self.id,
            instance_id=self.instance_id,
            result_output_file=self.result_output_file)


def get_dbs(instance_id: Optional[str] = None,
            result_output_file: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbsResult:
    """
    Use this data source to query DB resources for the specific SQL Server instance.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
    vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
    subnet = tencentcloud.subnet.Instance("subnet",
        availability_zone=zones.zones[4].name,
        vpc_id=vpc.id,
        cidr_block="10.0.0.0/16",
        is_multicast=False)
    security_group = tencentcloud.security.Group("securityGroup", description="desc.")
    example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
        availability_zone=zones.zones[4].name,
        charge_type="POSTPAID_BY_HOUR",
        vpc_id=vpc.id,
        subnet_id=subnet.id,
        project_id=0,
        memory=4,
        storage=100,
        cpu=2,
        machine_type="CLOUD_PREMIUM",
        maintenance_week_sets=[
            1,
            2,
            3,
        ],
        maintenance_start_time="09:00",
        maintenance_time_span=3,
        security_groups=[security_group.id],
        tags={
            "test": "test",
        })
    example_db = tencentcloud.sqlserver.Db("exampleDb",
        instance_id=example_basic_instance.id,
        charset="Chinese_PRC_BIN",
        remark="test-remark")
    example_dbs = tencentcloud.Sqlserver.get_dbs_output(instance_id=example_db.instance_id)
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: SQL Server instance ID which DB belongs to.
    :param str result_output_file: Used to store results.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Sqlserver/getDbs:getDbs', __args__, opts=opts, typ=GetDbsResult).value

    return AwaitableGetDbsResult(
        db_lists=pulumi.get(__ret__, 'db_lists'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_dbs)
def get_dbs_output(instance_id: Optional[pulumi.Input[str]] = None,
                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbsResult]:
    """
    Use this data source to query DB resources for the specific SQL Server instance.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
    vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
    subnet = tencentcloud.subnet.Instance("subnet",
        availability_zone=zones.zones[4].name,
        vpc_id=vpc.id,
        cidr_block="10.0.0.0/16",
        is_multicast=False)
    security_group = tencentcloud.security.Group("securityGroup", description="desc.")
    example_basic_instance = tencentcloud.sqlserver.BasicInstance("exampleBasicInstance",
        availability_zone=zones.zones[4].name,
        charge_type="POSTPAID_BY_HOUR",
        vpc_id=vpc.id,
        subnet_id=subnet.id,
        project_id=0,
        memory=4,
        storage=100,
        cpu=2,
        machine_type="CLOUD_PREMIUM",
        maintenance_week_sets=[
            1,
            2,
            3,
        ],
        maintenance_start_time="09:00",
        maintenance_time_span=3,
        security_groups=[security_group.id],
        tags={
            "test": "test",
        })
    example_db = tencentcloud.sqlserver.Db("exampleDb",
        instance_id=example_basic_instance.id,
        charset="Chinese_PRC_BIN",
        remark="test-remark")
    example_dbs = tencentcloud.Sqlserver.get_dbs_output(instance_id=example_db.instance_id)
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: SQL Server instance ID which DB belongs to.
    :param str result_output_file: Used to store results.
    """
    ...
