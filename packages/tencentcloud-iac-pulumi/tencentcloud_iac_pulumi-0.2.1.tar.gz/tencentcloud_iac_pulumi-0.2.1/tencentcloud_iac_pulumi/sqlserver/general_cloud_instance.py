# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GeneralCloudInstanceArgs', 'GeneralCloudInstance']

@pulumi.input_type
class GeneralCloudInstanceArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input[int],
                 machine_type: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 storage: pulumi.Input[int],
                 zone: pulumi.Input[str],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a GeneralCloudInstance resource.
        :param pulumi.Input[int] cpu: Cpu, unit: CORE.
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Memory, unit: GB.
        :param pulumi.Input[int] storage: instance disk storage, unit: GB.
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the DescribeZones API.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[str] db_version: sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014 Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise), 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region supports different versions for sale, and the version information that can be sold in each region can be pulled through the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.2. Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster disaster recovery, only support 2017 and above and support always on high-availability instances, do not support downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the high-availability architecture will not be modified.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[int] project_id: project ID.
        :param pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]] resource_tags: A collection of tags bound to the new instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[int] span: Maintainable time window configuration, duration, unit: hour.
        :param pulumi.Input[str] start_time: Maintainable time window configuration, daily maintainable start time.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent Monday to weekend respectively.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "zone", zone)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if collation is not None:
            pulumi.set(__self__, "collation", collation)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if ha_type is not None:
            warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
            pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.2.""")
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_lists is not None:
            pulumi.set(__self__, "security_group_lists", security_group_lists)
        if span is not None:
            pulumi.set(__self__, "span", span)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if weeklies is not None:
            pulumi.set(__self__, "weeklies", weeklies)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[int]:
        """
        Cpu, unit: CORE.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Input[str]:
        """
        The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        Memory, unit: GB.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[int]:
        """
        instance disk storage, unit: GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the DescribeZones API.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter
    def collation(self) -> Optional[pulumi.Input[str]]:
        """
        System character set collation, default: Chinese_PRC_CI_AS.
        """
        return pulumi.get(self, "collation")

    @collation.setter
    def collation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collation", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014 Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise), 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region supports different versions for sale, and the version information that can be sold in each region can be pulled through the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.81.2. Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster disaster recovery, only support 2017 and above and support always on high-availability instances, do not support downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the high-availability architecture will not be modified.
        """
        warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
        pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.2.""")

        return pulumi.get(self, "ha_type")

    @ha_type.setter
    def ha_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_type", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SQL Server instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]]]:
        """
        A collection of tags bound to the new instance.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group list, fill in the security group ID in the form of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @security_group_lists.setter
    def security_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_lists", value)

    @property
    @pulumi.getter
    def span(self) -> Optional[pulumi.Input[int]]:
        """
        Maintainable time window configuration, duration, unit: hour.
        """
        return pulumi.get(self, "span")

    @span.setter
    def span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "span", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Maintainable time window configuration, daily maintainable start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        System time zone, default: China Standard Time.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def weeklies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent Monday to weekend respectively.
        """
        return pulumi.get(self, "weeklies")

    @weeklies.setter
    def weeklies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "weeklies", value)


@pulumi.input_type
class _GeneralCloudInstanceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GeneralCloudInstance resources.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[int] cpu: Cpu, unit: CORE.
        :param pulumi.Input[str] db_version: sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014 Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise), 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region supports different versions for sale, and the version information that can be sold in each region can be pulled through the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.2. Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster disaster recovery, only support 2017 and above and support always on high-availability instances, do not support downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the high-availability architecture will not be modified.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Memory, unit: GB.
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[int] project_id: project ID.
        :param pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]] resource_tags: A collection of tags bound to the new instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[int] span: Maintainable time window configuration, duration, unit: hour.
        :param pulumi.Input[str] start_time: Maintainable time window configuration, daily maintainable start time.
        :param pulumi.Input[int] storage: instance disk storage, unit: GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent Monday to weekend respectively.
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the DescribeZones API.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if collation is not None:
            pulumi.set(__self__, "collation", collation)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if ha_type is not None:
            warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
            pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.2.""")
        if ha_type is not None:
            pulumi.set(__self__, "ha_type", ha_type)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_lists is not None:
            pulumi.set(__self__, "security_group_lists", security_group_lists)
        if span is not None:
            pulumi.set(__self__, "span", span)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if weeklies is not None:
            pulumi.set(__self__, "weeklies", weeklies)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter
    def collation(self) -> Optional[pulumi.Input[str]]:
        """
        System character set collation, default: Chinese_PRC_CI_AS.
        """
        return pulumi.get(self, "collation")

    @collation.setter
    def collation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collation", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Cpu, unit: CORE.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014 Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise), 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region supports different versions for sale, and the version information that can be sold in each region can be pulled through the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.81.2. Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster disaster recovery, only support 2017 and above and support always on high-availability instances, do not support downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the high-availability architecture will not be modified.
        """
        warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
        pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.2.""")

        return pulumi.get(self, "ha_type")

    @ha_type.setter
    def ha_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ha_type", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[str]]:
        """
        The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        """
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine_type", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Memory, unit: GB.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the SQL Server instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]]]:
        """
        A collection of tags bound to the new instance.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GeneralCloudInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group list, fill in the security group ID in the form of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @security_group_lists.setter
    def security_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_lists", value)

    @property
    @pulumi.getter
    def span(self) -> Optional[pulumi.Input[int]]:
        """
        Maintainable time window configuration, duration, unit: hour.
        """
        return pulumi.get(self, "span")

    @span.setter
    def span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "span", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Maintainable time window configuration, daily maintainable start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        instance disk storage, unit: GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        System time zone, default: China Standard Time.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def weeklies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent Monday to weekend respectively.
        """
        return pulumi.get(self, "weeklies")

    @weeklies.setter
    def weeklies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "weeklies", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the DescribeZones API.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class GeneralCloudInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GeneralCloudInstanceResourceTagArgs']]]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver general_cloud_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example = tencentcloud.sqlserver.GeneralCloudInstance("example",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver general_cloud_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/generalCloudInstance:GeneralCloudInstance example mssql-i9ma6oy7
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[int] cpu: Cpu, unit: CORE.
        :param pulumi.Input[str] db_version: sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014 Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise), 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region supports different versions for sale, and the version information that can be sold in each region can be pulled through the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.2. Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster disaster recovery, only support 2017 and above and support always on high-availability instances, do not support downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the high-availability architecture will not be modified.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Memory, unit: GB.
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[int] project_id: project ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GeneralCloudInstanceResourceTagArgs']]]] resource_tags: A collection of tags bound to the new instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[int] span: Maintainable time window configuration, duration, unit: hour.
        :param pulumi.Input[str] start_time: Maintainable time window configuration, daily maintainable start time.
        :param pulumi.Input[int] storage: instance disk storage, unit: GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent Monday to weekend respectively.
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the DescribeZones API.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GeneralCloudInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver general_cloud_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example = tencentcloud.sqlserver.GeneralCloudInstance("example",
            zone=zones.zones[4].name,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_HSSD",
            instance_charge_type="POSTPAID",
            project_id=0,
            subnet_id=subnet.id,
            vpc_id=vpc.id,
            db_version="2008R2",
            security_group_lists=[security_group.id],
            weeklies=[
                1,
                2,
                3,
                5,
                6,
                7,
            ],
            start_time="00:00",
            span=6,
            resource_tags=[tencentcloud.sqlserver.GeneralCloudInstanceResourceTagArgs(
                tag_key="test",
                tag_value="test",
            )],
            collation="Chinese_PRC_CI_AS",
            time_zone="China Standard Time")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver general_cloud_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/generalCloudInstance:GeneralCloudInstance example mssql-i9ma6oy7
        ```

        :param str resource_name: The name of the resource.
        :param GeneralCloudInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GeneralCloudInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 collation: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 ha_type: Optional[pulumi.Input[str]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 machine_type: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GeneralCloudInstanceResourceTagArgs']]]]] = None,
                 security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 span: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GeneralCloudInstanceArgs.__new__(GeneralCloudInstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["collation"] = collation
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["db_version"] = db_version
            __props__.__dict__["ha_type"] = ha_type
            __props__.__dict__["instance_charge_type"] = instance_charge_type
            if machine_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_type'")
            __props__.__dict__["machine_type"] = machine_type
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["name"] = name
            __props__.__dict__["period"] = period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["resource_tags"] = resource_tags
            __props__.__dict__["security_group_lists"] = security_group_lists
            __props__.__dict__["span"] = span
            __props__.__dict__["start_time"] = start_time
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["time_zone"] = time_zone
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["weeklies"] = weeklies
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        super(GeneralCloudInstance, __self__).__init__(
            'tencentcloud:Sqlserver/generalCloudInstance:GeneralCloudInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            collation: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            db_version: Optional[pulumi.Input[str]] = None,
            ha_type: Optional[pulumi.Input[str]] = None,
            instance_charge_type: Optional[pulumi.Input[str]] = None,
            machine_type: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GeneralCloudInstanceResourceTagArgs']]]]] = None,
            security_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            span: Optional[pulumi.Input[int]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            time_zone: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'GeneralCloudInstance':
        """
        Get an existing GeneralCloudInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[str] collation: System character set collation, default: Chinese_PRC_CI_AS.
        :param pulumi.Input[int] cpu: Cpu, unit: CORE.
        :param pulumi.Input[str] db_version: sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014 Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise), 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region supports different versions for sale, and the version information that can be sold in each region can be pulled through the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        :param pulumi.Input[str] ha_type: It has been deprecated from version 1.81.2. Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster disaster recovery, only support 2017 and above and support always on high-availability instances, do not support downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the high-availability architecture will not be modified.
        :param pulumi.Input[str] instance_charge_type: Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        :param pulumi.Input[str] machine_type: The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        :param pulumi.Input[int] memory: Memory, unit: GB.
        :param pulumi.Input[str] name: Name of the SQL Server instance.
        :param pulumi.Input[int] period: Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        :param pulumi.Input[int] project_id: project ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GeneralCloudInstanceResourceTagArgs']]]] resource_tags: A collection of tags bound to the new instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_lists: Security group list, fill in the security group ID in the form of sg-xxx.
        :param pulumi.Input[int] span: Maintainable time window configuration, duration, unit: hour.
        :param pulumi.Input[str] start_time: Maintainable time window configuration, daily maintainable start time.
        :param pulumi.Input[int] storage: instance disk storage, unit: GB.
        :param pulumi.Input[str] subnet_id: VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[str] time_zone: System time zone, default: China Standard Time.
        :param pulumi.Input[str] vpc_id: VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weeklies: Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent Monday to weekend respectively.
        :param pulumi.Input[str] zone: Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the DescribeZones API.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GeneralCloudInstanceState.__new__(_GeneralCloudInstanceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["collation"] = collation
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["db_version"] = db_version
        __props__.__dict__["ha_type"] = ha_type
        __props__.__dict__["instance_charge_type"] = instance_charge_type
        __props__.__dict__["machine_type"] = machine_type
        __props__.__dict__["memory"] = memory
        __props__.__dict__["name"] = name
        __props__.__dict__["period"] = period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_tags"] = resource_tags
        __props__.__dict__["security_group_lists"] = security_group_lists
        __props__.__dict__["span"] = span
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["weeklies"] = weeklies
        __props__.__dict__["zone"] = zone
        return GeneralCloudInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Automatic renewal flag: 0-normal renewal 1-automatic renewal, the default is 1 automatic renewal. Valid only when purchasing a prepaid instance. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter
    def collation(self) -> pulumi.Output[Optional[str]]:
        """
        System character set collation, default: Chinese_PRC_CI_AS.
        """
        return pulumi.get(self, "collation")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        Cpu, unit: CORE.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> pulumi.Output[Optional[str]]:
        """
        sqlserver version, currently all supported versions are: 2008R2 (SQL Server 2008 R2 Enterprise), 2012SP3 (SQL Server 2012 Enterprise), 201202 (SQL Server 2012 Standard), 2014SP2 (SQL Server 2014 Enterprise), 201402 (SQL Server 2014 Standard), 2016SP1 (SQL Server 2016 Enterprise), 201602 (SQL Server 2016 Standard), 2017 (SQL Server 2017 Enterprise), 201702 (SQL Server 2017 Standard), 2019 (SQL Server 2019 Enterprise), 201902 (SQL Server 2019 Standard). Each region supports different versions for sale, and the version information that can be sold in each region can be pulled through the DescribeProductConfig interface. If left blank, the default version is 2008R2.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="haType")
    def ha_type(self) -> pulumi.Output[Optional[str]]:
        """
        It has been deprecated from version 1.81.2. Upgrade the high-availability architecture of sqlserver, upgrade from mirror disaster recovery to always on cluster disaster recovery, only support 2017 and above and support always on high-availability instances, do not support downgrading to mirror disaster recovery, CLUSTER-upgrade to always on capacity Disaster, if not filled, the high-availability architecture will not be modified.
        """
        warnings.warn("""It has been deprecated from version 1.81.2.""", DeprecationWarning)
        pulumi.log.warn("""ha_type is deprecated: It has been deprecated from version 1.81.2.""")

        return pulumi.get(self, "ha_type")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Payment mode, the value supports PREPAID (prepaid), POSTPAID (postpaid).
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> pulumi.Output[str]:
        """
        The host disk type of the purchased instance, CLOUD_HSSD-enhanced SSD cloud disk for virtual machines, CLOUD_TSSD-extremely fast SSD cloud disk for virtual machines, CLOUD_BSSD-universal SSD cloud disk for virtual machines.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        Memory, unit: GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the SQL Server instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        Purchase instance period, the default value is 1, which means one month. The value cannot exceed 48. Valid only when the 'instance_charge_type' parameter value is 'PREPAID'.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> pulumi.Output[Optional[Sequence['outputs.GeneralCloudInstanceResourceTag']]]:
        """
        A collection of tags bound to the new instance.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="securityGroupLists")
    def security_group_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security group list, fill in the security group ID in the form of sg-xxx.
        """
        return pulumi.get(self, "security_group_lists")

    @property
    @pulumi.getter
    def span(self) -> pulumi.Output[Optional[int]]:
        """
        Maintainable time window configuration, duration, unit: hour.
        """
        return pulumi.get(self, "span")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[str]]:
        """
        Maintainable time window configuration, daily maintainable start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        instance disk storage, unit: GB.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC subnet ID, in the form of subnet-bdoe83fa; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[Optional[str]]:
        """
        System time zone, default: China Standard Time.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC network ID, in the form of vpc-dsp338hz; SubnetId and VpcId need to be set at the same time or not set at the same time.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def weeklies(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Maintainable time window configuration, in weeks, indicates the days of the week that allow maintenance, 1-7 represent Monday to weekend respectively.
        """
        return pulumi.get(self, "weeklies")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Instance AZ, such as ap-guangzhou-1 (Guangzhou Zone 1). Purchasable AZs for an instance can be obtained through the DescribeZones API.
        """
        return pulumi.get(self, "zone")

