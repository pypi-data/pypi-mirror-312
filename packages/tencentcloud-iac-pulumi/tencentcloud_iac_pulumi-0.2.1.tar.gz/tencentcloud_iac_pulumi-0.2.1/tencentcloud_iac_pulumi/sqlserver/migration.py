# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MigrationArgs', 'Migration']

@pulumi.input_type
class MigrationArgs:
    def __init__(__self__, *,
                 migrate_name: pulumi.Input[str],
                 migrate_type: pulumi.Input[int],
                 source: pulumi.Input['MigrationSourceArgs'],
                 source_type: pulumi.Input[int],
                 target: pulumi.Input['MigrationTargetArgs'],
                 migrate_db_sets: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]]] = None):
        """
        The set of arguments for constructing a Migration resource.
        :param pulumi.Input[str] migrate_name: Name of the migration task.
        :param pulumi.Input[int] migrate_type: Migration type (1 structure migration 2 data migration 3 incremental synchronization).
        :param pulumi.Input['MigrationSourceArgs'] source: Migration source.
        :param pulumi.Input[int] source_type: Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and restore 5 SQLServer backup and restore (COS mode).
        :param pulumi.Input['MigrationTargetArgs'] target: Migration target.
        :param pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]] migrate_db_sets: Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
        :param pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]] rename_restores: Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by default and all databases will be restored. Valid if SourceType=5.
        """
        pulumi.set(__self__, "migrate_name", migrate_name)
        pulumi.set(__self__, "migrate_type", migrate_type)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "target", target)
        if migrate_db_sets is not None:
            pulumi.set(__self__, "migrate_db_sets", migrate_db_sets)
        if rename_restores is not None:
            pulumi.set(__self__, "rename_restores", rename_restores)

    @property
    @pulumi.getter(name="migrateName")
    def migrate_name(self) -> pulumi.Input[str]:
        """
        Name of the migration task.
        """
        return pulumi.get(self, "migrate_name")

    @migrate_name.setter
    def migrate_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "migrate_name", value)

    @property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> pulumi.Input[int]:
        """
        Migration type (1 structure migration 2 data migration 3 incremental synchronization).
        """
        return pulumi.get(self, "migrate_type")

    @migrate_type.setter
    def migrate_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "migrate_type", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['MigrationSourceArgs']:
        """
        Migration source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['MigrationSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[int]:
        """
        Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and restore 5 SQLServer backup and restore (COS mode).
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['MigrationTargetArgs']:
        """
        Migration target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['MigrationTargetArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="migrateDbSets")
    def migrate_db_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]]]:
        """
        Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
        """
        return pulumi.get(self, "migrate_db_sets")

    @migrate_db_sets.setter
    def migrate_db_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]]]):
        pulumi.set(self, "migrate_db_sets", value)

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]]]:
        """
        Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by default and all databases will be restored. Valid if SourceType=5.
        """
        return pulumi.get(self, "rename_restores")

    @rename_restores.setter
    def rename_restores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]]]):
        pulumi.set(self, "rename_restores", value)


@pulumi.input_type
class _MigrationState:
    def __init__(__self__, *,
                 migrate_db_sets: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]]] = None,
                 migrate_name: Optional[pulumi.Input[str]] = None,
                 migrate_type: Optional[pulumi.Input[int]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]]] = None,
                 source: Optional[pulumi.Input['MigrationSourceArgs']] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 target: Optional[pulumi.Input['MigrationTargetArgs']] = None):
        """
        Input properties used for looking up and filtering Migration resources.
        :param pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]] migrate_db_sets: Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
        :param pulumi.Input[str] migrate_name: Name of the migration task.
        :param pulumi.Input[int] migrate_type: Migration type (1 structure migration 2 data migration 3 incremental synchronization).
        :param pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]] rename_restores: Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by default and all databases will be restored. Valid if SourceType=5.
        :param pulumi.Input['MigrationSourceArgs'] source: Migration source.
        :param pulumi.Input[int] source_type: Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and restore 5 SQLServer backup and restore (COS mode).
        :param pulumi.Input['MigrationTargetArgs'] target: Migration target.
        """
        if migrate_db_sets is not None:
            pulumi.set(__self__, "migrate_db_sets", migrate_db_sets)
        if migrate_name is not None:
            pulumi.set(__self__, "migrate_name", migrate_name)
        if migrate_type is not None:
            pulumi.set(__self__, "migrate_type", migrate_type)
        if rename_restores is not None:
            pulumi.set(__self__, "rename_restores", rename_restores)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="migrateDbSets")
    def migrate_db_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]]]:
        """
        Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
        """
        return pulumi.get(self, "migrate_db_sets")

    @migrate_db_sets.setter
    def migrate_db_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationMigrateDbSetArgs']]]]):
        pulumi.set(self, "migrate_db_sets", value)

    @property
    @pulumi.getter(name="migrateName")
    def migrate_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the migration task.
        """
        return pulumi.get(self, "migrate_name")

    @migrate_name.setter
    def migrate_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "migrate_name", value)

    @property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> Optional[pulumi.Input[int]]:
        """
        Migration type (1 structure migration 2 data migration 3 incremental synchronization).
        """
        return pulumi.get(self, "migrate_type")

    @migrate_type.setter
    def migrate_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "migrate_type", value)

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]]]:
        """
        Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by default and all databases will be restored. Valid if SourceType=5.
        """
        return pulumi.get(self, "rename_restores")

    @rename_restores.setter
    def rename_restores(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MigrationRenameRestoreArgs']]]]):
        pulumi.set(self, "rename_restores", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input['MigrationSourceArgs']]:
        """
        Migration source.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input['MigrationSourceArgs']]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[int]]:
        """
        Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and restore 5 SQLServer backup and restore (COS mode).
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['MigrationTargetArgs']]:
        """
        Migration target.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['MigrationTargetArgs']]):
        pulumi.set(self, "target", value)


class Migration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 migrate_db_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationMigrateDbSetArgs']]]]] = None,
                 migrate_name: Optional[pulumi.Input[str]] = None,
                 migrate_type: Optional[pulumi.Input[int]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationRenameRestoreArgs']]]]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['MigrationSourceArgs']]] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 target: Optional[pulumi.Input[pulumi.InputType['MigrationTargetArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a sqlserver migration

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        src_example = tencentcloud.sqlserver.BasicInstance("srcExample",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        dst_example = tencentcloud.sqlserver.BasicInstance("dstExample",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        src_db = tencentcloud.sqlserver.Db("srcDb",
            instance_id=src_example.id,
            charset="Chinese_PRC_BIN",
            remark="testACC-remark")
        dst_db = tencentcloud.sqlserver.Db("dstDb",
            instance_id=dst_example.id,
            charset="Chinese_PRC_BIN",
            remark="testACC-remark")
        src_account = tencentcloud.sqlserver.Account("srcAccount",
            instance_id=src_example.id,
            password="Qwer@234",
            is_admin=True)
        dst_account = tencentcloud.sqlserver.Account("dstAccount",
            instance_id=dst_example.id,
            password="Qwer@234",
            is_admin=True)
        src_account_db_attachment = tencentcloud.sqlserver.AccountDbAttachment("srcAccountDbAttachment",
            instance_id=src_example.id,
            account_name=src_account.name,
            db_name=src_db.name,
            privilege="ReadWrite")
        dst_account_db_attachment = tencentcloud.sqlserver.AccountDbAttachment("dstAccountDbAttachment",
            instance_id=dst_example.id,
            account_name=dst_account.name,
            db_name=dst_db.name,
            privilege="ReadWrite")
        migration = tencentcloud.sqlserver.Migration("migration",
            migrate_name="tf_test_migration",
            migrate_type=1,
            source_type=1,
            source=tencentcloud.sqlserver.MigrationSourceArgs(
                instance_id=src_example.id,
                user_name=src_account.name,
                password=src_account.password,
            ),
            target=tencentcloud.sqlserver.MigrationTargetArgs(
                instance_id=dst_example.id,
                user_name=dst_account.name,
                password=dst_account.password,
            ),
            migrate_db_sets=[tencentcloud.sqlserver.MigrationMigrateDbSetArgs(
                db_name=src_db.name,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver migration can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/migration:Migration migration migration_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationMigrateDbSetArgs']]]] migrate_db_sets: Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
        :param pulumi.Input[str] migrate_name: Name of the migration task.
        :param pulumi.Input[int] migrate_type: Migration type (1 structure migration 2 data migration 3 incremental synchronization).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationRenameRestoreArgs']]]] rename_restores: Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by default and all databases will be restored. Valid if SourceType=5.
        :param pulumi.Input[pulumi.InputType['MigrationSourceArgs']] source: Migration source.
        :param pulumi.Input[int] source_type: Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and restore 5 SQLServer backup and restore (COS mode).
        :param pulumi.Input[pulumi.InputType['MigrationTargetArgs']] target: Migration target.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MigrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a sqlserver migration

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="sqlserver")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[4].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        src_example = tencentcloud.sqlserver.BasicInstance("srcExample",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        dst_example = tencentcloud.sqlserver.BasicInstance("dstExample",
            availability_zone=zones.zones[4].name,
            charge_type="POSTPAID_BY_HOUR",
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            project_id=0,
            memory=4,
            storage=100,
            cpu=2,
            machine_type="CLOUD_PREMIUM",
            maintenance_week_sets=[
                1,
                2,
                3,
            ],
            maintenance_start_time="09:00",
            maintenance_time_span=3,
            security_groups=[security_group.id],
            tags={
                "test": "test",
            })
        src_db = tencentcloud.sqlserver.Db("srcDb",
            instance_id=src_example.id,
            charset="Chinese_PRC_BIN",
            remark="testACC-remark")
        dst_db = tencentcloud.sqlserver.Db("dstDb",
            instance_id=dst_example.id,
            charset="Chinese_PRC_BIN",
            remark="testACC-remark")
        src_account = tencentcloud.sqlserver.Account("srcAccount",
            instance_id=src_example.id,
            password="Qwer@234",
            is_admin=True)
        dst_account = tencentcloud.sqlserver.Account("dstAccount",
            instance_id=dst_example.id,
            password="Qwer@234",
            is_admin=True)
        src_account_db_attachment = tencentcloud.sqlserver.AccountDbAttachment("srcAccountDbAttachment",
            instance_id=src_example.id,
            account_name=src_account.name,
            db_name=src_db.name,
            privilege="ReadWrite")
        dst_account_db_attachment = tencentcloud.sqlserver.AccountDbAttachment("dstAccountDbAttachment",
            instance_id=dst_example.id,
            account_name=dst_account.name,
            db_name=dst_db.name,
            privilege="ReadWrite")
        migration = tencentcloud.sqlserver.Migration("migration",
            migrate_name="tf_test_migration",
            migrate_type=1,
            source_type=1,
            source=tencentcloud.sqlserver.MigrationSourceArgs(
                instance_id=src_example.id,
                user_name=src_account.name,
                password=src_account.password,
            ),
            target=tencentcloud.sqlserver.MigrationTargetArgs(
                instance_id=dst_example.id,
                user_name=dst_account.name,
                password=dst_account.password,
            ),
            migrate_db_sets=[tencentcloud.sqlserver.MigrationMigrateDbSetArgs(
                db_name=src_db.name,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        sqlserver migration can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Sqlserver/migration:Migration migration migration_id
        ```

        :param str resource_name: The name of the resource.
        :param MigrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MigrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 migrate_db_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationMigrateDbSetArgs']]]]] = None,
                 migrate_name: Optional[pulumi.Input[str]] = None,
                 migrate_type: Optional[pulumi.Input[int]] = None,
                 rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationRenameRestoreArgs']]]]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['MigrationSourceArgs']]] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 target: Optional[pulumi.Input[pulumi.InputType['MigrationTargetArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MigrationArgs.__new__(MigrationArgs)

            __props__.__dict__["migrate_db_sets"] = migrate_db_sets
            if migrate_name is None and not opts.urn:
                raise TypeError("Missing required property 'migrate_name'")
            __props__.__dict__["migrate_name"] = migrate_name
            if migrate_type is None and not opts.urn:
                raise TypeError("Missing required property 'migrate_type'")
            __props__.__dict__["migrate_type"] = migrate_type
            __props__.__dict__["rename_restores"] = rename_restores
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            if target is None and not opts.urn:
                raise TypeError("Missing required property 'target'")
            __props__.__dict__["target"] = target
        super(Migration, __self__).__init__(
            'tencentcloud:Sqlserver/migration:Migration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            migrate_db_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationMigrateDbSetArgs']]]]] = None,
            migrate_name: Optional[pulumi.Input[str]] = None,
            migrate_type: Optional[pulumi.Input[int]] = None,
            rename_restores: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationRenameRestoreArgs']]]]] = None,
            source: Optional[pulumi.Input[pulumi.InputType['MigrationSourceArgs']]] = None,
            source_type: Optional[pulumi.Input[int]] = None,
            target: Optional[pulumi.Input[pulumi.InputType['MigrationTargetArgs']]] = None) -> 'Migration':
        """
        Get an existing Migration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationMigrateDbSetArgs']]]] migrate_db_sets: Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
        :param pulumi.Input[str] migrate_name: Name of the migration task.
        :param pulumi.Input[int] migrate_type: Migration type (1 structure migration 2 data migration 3 incremental synchronization).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MigrationRenameRestoreArgs']]]] rename_restores: Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by default and all databases will be restored. Valid if SourceType=5.
        :param pulumi.Input[pulumi.InputType['MigrationSourceArgs']] source: Migration source.
        :param pulumi.Input[int] source_type: Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and restore 5 SQLServer backup and restore (COS mode).
        :param pulumi.Input[pulumi.InputType['MigrationTargetArgs']] target: Migration target.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MigrationState.__new__(_MigrationState)

        __props__.__dict__["migrate_db_sets"] = migrate_db_sets
        __props__.__dict__["migrate_name"] = migrate_name
        __props__.__dict__["migrate_type"] = migrate_type
        __props__.__dict__["rename_restores"] = rename_restores
        __props__.__dict__["source"] = source
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["target"] = target
        return Migration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="migrateDbSets")
    def migrate_db_sets(self) -> pulumi.Output[Optional[Sequence['outputs.MigrationMigrateDbSet']]]:
        """
        Migrate DB objects. Offline migration is not used (SourceType=4 or SourceType=5).
        """
        return pulumi.get(self, "migrate_db_sets")

    @property
    @pulumi.getter(name="migrateName")
    def migrate_name(self) -> pulumi.Output[str]:
        """
        Name of the migration task.
        """
        return pulumi.get(self, "migrate_name")

    @property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> pulumi.Output[int]:
        """
        Migration type (1 structure migration 2 data migration 3 incremental synchronization).
        """
        return pulumi.get(self, "migrate_type")

    @property
    @pulumi.getter(name="renameRestores")
    def rename_restores(self) -> pulumi.Output[Optional[Sequence['outputs.MigrationRenameRestore']]]:
        """
        Restore and rename the database in ReNameRestoreDatabase. If it is not filled in, the restored database will be named by default and all databases will be restored. Valid if SourceType=5.
        """
        return pulumi.get(self, "rename_restores")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.MigrationSource']:
        """
        Migration source.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[int]:
        """
        Type of migration source 1 TencentDB for SQLServer 2 Cloud server self-built SQLServer database 4 SQLServer backup and restore 5 SQLServer backup and restore (COS mode).
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def target(self) -> pulumi.Output['outputs.MigrationTarget']:
        """
        Migration target.
        """
        return pulumi.get(self, "target")

