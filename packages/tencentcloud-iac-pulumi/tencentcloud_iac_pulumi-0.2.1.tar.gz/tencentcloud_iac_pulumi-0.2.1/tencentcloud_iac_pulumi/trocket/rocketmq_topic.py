# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RocketmqTopicArgs', 'RocketmqTopic']

@pulumi.input_type
class RocketmqTopicArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 queue_num: pulumi.Input[int],
                 topic: pulumi.Input[str],
                 topic_type: pulumi.Input[str],
                 remark: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RocketmqTopic resource.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[int] queue_num: Number of queue. Must be greater than or equal to 3.
        :param pulumi.Input[str] topic: topic.
        :param pulumi.Input[str] topic_type: Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
        :param pulumi.Input[str] remark: remark.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "queue_num", queue_num)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "topic_type", topic_type)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="queueNum")
    def queue_num(self) -> pulumi.Input[int]:
        """
        Number of queue. Must be greater than or equal to 3.
        """
        return pulumi.get(self, "queue_num")

    @queue_num.setter
    def queue_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "queue_num", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        topic.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicType")
    def topic_type(self) -> pulumi.Input[str]:
        """
        Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
        """
        return pulumi.get(self, "topic_type")

    @topic_type.setter
    def topic_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_type", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _RocketmqTopicState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 queue_num: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RocketmqTopic resources.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[int] queue_num: Number of queue. Must be greater than or equal to 3.
        :param pulumi.Input[str] remark: remark.
        :param pulumi.Input[str] topic: topic.
        :param pulumi.Input[str] topic_type: Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if queue_num is not None:
            pulumi.set(__self__, "queue_num", queue_num)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_type is not None:
            pulumi.set(__self__, "topic_type", topic_type)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="queueNum")
    def queue_num(self) -> Optional[pulumi.Input[int]]:
        """
        Number of queue. Must be greater than or equal to 3.
        """
        return pulumi.get(self, "queue_num")

    @queue_num.setter
    def queue_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_num", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        """
        topic.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicType")
    def topic_type(self) -> Optional[pulumi.Input[str]]:
        """
        Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
        """
        return pulumi.get(self, "topic_type")

    @topic_type.setter
    def topic_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_type", value)


class RocketmqTopic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 queue_num: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a trocket rocketmq_topic

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        rocketmq_instance = tencentcloud.trocket.RocketmqInstance("rocketmqInstance",
            instance_type="EXPERIMENT",
            sku_code="experiment_500",
            remark="test",
            vpc_id="vpc-xxxxx",
            subnet_id="subnet-xxxxx",
            tags={
                "tag_key": "rocketmq",
                "tag_value": "5.x",
            })
        rocketmq_topic = tencentcloud.trocket.RocketmqTopic("rocketmqTopic",
            instance_id=rocketmq_instance.id,
            topic="test_topic",
            topic_type="NORMAL",
            queue_num=4,
            remark="test for terraform")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        trocket rocketmq_topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Trocket/rocketmqTopic:RocketmqTopic rocketmq_topic instanceId#topic
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[int] queue_num: Number of queue. Must be greater than or equal to 3.
        :param pulumi.Input[str] remark: remark.
        :param pulumi.Input[str] topic: topic.
        :param pulumi.Input[str] topic_type: Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocketmqTopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a trocket rocketmq_topic

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        rocketmq_instance = tencentcloud.trocket.RocketmqInstance("rocketmqInstance",
            instance_type="EXPERIMENT",
            sku_code="experiment_500",
            remark="test",
            vpc_id="vpc-xxxxx",
            subnet_id="subnet-xxxxx",
            tags={
                "tag_key": "rocketmq",
                "tag_value": "5.x",
            })
        rocketmq_topic = tencentcloud.trocket.RocketmqTopic("rocketmqTopic",
            instance_id=rocketmq_instance.id,
            topic="test_topic",
            topic_type="NORMAL",
            queue_num=4,
            remark="test for terraform")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        trocket rocketmq_topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Trocket/rocketmqTopic:RocketmqTopic rocketmq_topic instanceId#topic
        ```

        :param str resource_name: The name of the resource.
        :param RocketmqTopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocketmqTopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 queue_num: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocketmqTopicArgs.__new__(RocketmqTopicArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if queue_num is None and not opts.urn:
                raise TypeError("Missing required property 'queue_num'")
            __props__.__dict__["queue_num"] = queue_num
            __props__.__dict__["remark"] = remark
            if topic is None and not opts.urn:
                raise TypeError("Missing required property 'topic'")
            __props__.__dict__["topic"] = topic
            if topic_type is None and not opts.urn:
                raise TypeError("Missing required property 'topic_type'")
            __props__.__dict__["topic_type"] = topic_type
        super(RocketmqTopic, __self__).__init__(
            'tencentcloud:Trocket/rocketmqTopic:RocketmqTopic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            queue_num: Optional[pulumi.Input[int]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            topic: Optional[pulumi.Input[str]] = None,
            topic_type: Optional[pulumi.Input[str]] = None) -> 'RocketmqTopic':
        """
        Get an existing RocketmqTopic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[int] queue_num: Number of queue. Must be greater than or equal to 3.
        :param pulumi.Input[str] remark: remark.
        :param pulumi.Input[str] topic: topic.
        :param pulumi.Input[str] topic_type: Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocketmqTopicState.__new__(_RocketmqTopicState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["queue_num"] = queue_num
        __props__.__dict__["remark"] = remark
        __props__.__dict__["topic"] = topic
        __props__.__dict__["topic_type"] = topic_type
        return RocketmqTopic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="queueNum")
    def queue_num(self) -> pulumi.Output[int]:
        """
        Number of queue. Must be greater than or equal to 3.
        """
        return pulumi.get(self, "queue_num")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        remark.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Output[str]:
        """
        topic.
        """
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter(name="topicType")
    def topic_type(self) -> pulumi.Output[str]:
        """
        Topic type. `UNSPECIFIED`: not specified, `NORMAL`: normal message, `FIFO`: sequential message, `DELAY`: delayed message.
        """
        return pulumi.get(self, "topic_type")

