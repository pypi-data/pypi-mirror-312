# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RocketmqConsumerGroupArgs', 'RocketmqConsumerGroup']

@pulumi.input_type
class RocketmqConsumerGroupArgs:
    def __init__(__self__, *,
                 consume_enable: pulumi.Input[bool],
                 consume_message_orderly: pulumi.Input[bool],
                 consumer_group: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 max_retry_times: pulumi.Input[int],
                 remark: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RocketmqConsumerGroup resource.
        :param pulumi.Input[bool] consume_enable: Whether to enable consumption.
        :param pulumi.Input[bool] consume_message_orderly: `true`: Sequential delivery, `false`: Concurrent delivery.
        :param pulumi.Input[str] consumer_group: Name of consumer group.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] max_retry_times: Max retry times.
        :param pulumi.Input[str] remark: remark.
        """
        pulumi.set(__self__, "consume_enable", consume_enable)
        pulumi.set(__self__, "consume_message_orderly", consume_message_orderly)
        pulumi.set(__self__, "consumer_group", consumer_group)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "max_retry_times", max_retry_times)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="consumeEnable")
    def consume_enable(self) -> pulumi.Input[bool]:
        """
        Whether to enable consumption.
        """
        return pulumi.get(self, "consume_enable")

    @consume_enable.setter
    def consume_enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "consume_enable", value)

    @property
    @pulumi.getter(name="consumeMessageOrderly")
    def consume_message_orderly(self) -> pulumi.Input[bool]:
        """
        `true`: Sequential delivery, `false`: Concurrent delivery.
        """
        return pulumi.get(self, "consume_message_orderly")

    @consume_message_orderly.setter
    def consume_message_orderly(self, value: pulumi.Input[bool]):
        pulumi.set(self, "consume_message_orderly", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> pulumi.Input[str]:
        """
        Name of consumer group.
        """
        return pulumi.get(self, "consumer_group")

    @consumer_group.setter
    def consumer_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_group", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="maxRetryTimes")
    def max_retry_times(self) -> pulumi.Input[int]:
        """
        Max retry times.
        """
        return pulumi.get(self, "max_retry_times")

    @max_retry_times.setter
    def max_retry_times(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_retry_times", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _RocketmqConsumerGroupState:
    def __init__(__self__, *,
                 consume_enable: Optional[pulumi.Input[bool]] = None,
                 consume_message_orderly: Optional[pulumi.Input[bool]] = None,
                 consumer_group: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 max_retry_times: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RocketmqConsumerGroup resources.
        :param pulumi.Input[bool] consume_enable: Whether to enable consumption.
        :param pulumi.Input[bool] consume_message_orderly: `true`: Sequential delivery, `false`: Concurrent delivery.
        :param pulumi.Input[str] consumer_group: Name of consumer group.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] max_retry_times: Max retry times.
        :param pulumi.Input[str] remark: remark.
        """
        if consume_enable is not None:
            pulumi.set(__self__, "consume_enable", consume_enable)
        if consume_message_orderly is not None:
            pulumi.set(__self__, "consume_message_orderly", consume_message_orderly)
        if consumer_group is not None:
            pulumi.set(__self__, "consumer_group", consumer_group)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if max_retry_times is not None:
            pulumi.set(__self__, "max_retry_times", max_retry_times)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="consumeEnable")
    def consume_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable consumption.
        """
        return pulumi.get(self, "consume_enable")

    @consume_enable.setter
    def consume_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consume_enable", value)

    @property
    @pulumi.getter(name="consumeMessageOrderly")
    def consume_message_orderly(self) -> Optional[pulumi.Input[bool]]:
        """
        `true`: Sequential delivery, `false`: Concurrent delivery.
        """
        return pulumi.get(self, "consume_message_orderly")

    @consume_message_orderly.setter
    def consume_message_orderly(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consume_message_orderly", value)

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> Optional[pulumi.Input[str]]:
        """
        Name of consumer group.
        """
        return pulumi.get(self, "consumer_group")

    @consumer_group.setter
    def consumer_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="maxRetryTimes")
    def max_retry_times(self) -> Optional[pulumi.Input[int]]:
        """
        Max retry times.
        """
        return pulumi.get(self, "max_retry_times")

    @max_retry_times.setter
    def max_retry_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retry_times", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


class RocketmqConsumerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consume_enable: Optional[pulumi.Input[bool]] = None,
                 consume_message_orderly: Optional[pulumi.Input[bool]] = None,
                 consumer_group: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 max_retry_times: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a trocket rocketmq_consumer_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        rocketmq_instance = tencentcloud.trocket.RocketmqInstance("rocketmqInstance",
            instance_type="EXPERIMENT",
            sku_code="experiment_500",
            remark="test",
            vpc_id="vpc-xxxxxx",
            subnet_id="subnet-xxxxx",
            tags={
                "tag_key": "rocketmq",
                "tag_value": "5.x",
            })
        rocketmq_consumer_group = tencentcloud.trocket.RocketmqConsumerGroup("rocketmqConsumerGroup",
            instance_id=rocketmq_instance.id,
            consumer_group="test_consumer_group",
            max_retry_times=20,
            consume_enable=False,
            consume_message_orderly=True,
            remark="test for terraform")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        trocket rocketmq_consumer_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Trocket/rocketmqConsumerGroup:RocketmqConsumerGroup rocketmq_consumer_group instanceId#consumerGroup
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] consume_enable: Whether to enable consumption.
        :param pulumi.Input[bool] consume_message_orderly: `true`: Sequential delivery, `false`: Concurrent delivery.
        :param pulumi.Input[str] consumer_group: Name of consumer group.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] max_retry_times: Max retry times.
        :param pulumi.Input[str] remark: remark.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocketmqConsumerGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a trocket rocketmq_consumer_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        rocketmq_instance = tencentcloud.trocket.RocketmqInstance("rocketmqInstance",
            instance_type="EXPERIMENT",
            sku_code="experiment_500",
            remark="test",
            vpc_id="vpc-xxxxxx",
            subnet_id="subnet-xxxxx",
            tags={
                "tag_key": "rocketmq",
                "tag_value": "5.x",
            })
        rocketmq_consumer_group = tencentcloud.trocket.RocketmqConsumerGroup("rocketmqConsumerGroup",
            instance_id=rocketmq_instance.id,
            consumer_group="test_consumer_group",
            max_retry_times=20,
            consume_enable=False,
            consume_message_orderly=True,
            remark="test for terraform")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        trocket rocketmq_consumer_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Trocket/rocketmqConsumerGroup:RocketmqConsumerGroup rocketmq_consumer_group instanceId#consumerGroup
        ```

        :param str resource_name: The name of the resource.
        :param RocketmqConsumerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocketmqConsumerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 consume_enable: Optional[pulumi.Input[bool]] = None,
                 consume_message_orderly: Optional[pulumi.Input[bool]] = None,
                 consumer_group: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 max_retry_times: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocketmqConsumerGroupArgs.__new__(RocketmqConsumerGroupArgs)

            if consume_enable is None and not opts.urn:
                raise TypeError("Missing required property 'consume_enable'")
            __props__.__dict__["consume_enable"] = consume_enable
            if consume_message_orderly is None and not opts.urn:
                raise TypeError("Missing required property 'consume_message_orderly'")
            __props__.__dict__["consume_message_orderly"] = consume_message_orderly
            if consumer_group is None and not opts.urn:
                raise TypeError("Missing required property 'consumer_group'")
            __props__.__dict__["consumer_group"] = consumer_group
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if max_retry_times is None and not opts.urn:
                raise TypeError("Missing required property 'max_retry_times'")
            __props__.__dict__["max_retry_times"] = max_retry_times
            __props__.__dict__["remark"] = remark
        super(RocketmqConsumerGroup, __self__).__init__(
            'tencentcloud:Trocket/rocketmqConsumerGroup:RocketmqConsumerGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            consume_enable: Optional[pulumi.Input[bool]] = None,
            consume_message_orderly: Optional[pulumi.Input[bool]] = None,
            consumer_group: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            max_retry_times: Optional[pulumi.Input[int]] = None,
            remark: Optional[pulumi.Input[str]] = None) -> 'RocketmqConsumerGroup':
        """
        Get an existing RocketmqConsumerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] consume_enable: Whether to enable consumption.
        :param pulumi.Input[bool] consume_message_orderly: `true`: Sequential delivery, `false`: Concurrent delivery.
        :param pulumi.Input[str] consumer_group: Name of consumer group.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[int] max_retry_times: Max retry times.
        :param pulumi.Input[str] remark: remark.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocketmqConsumerGroupState.__new__(_RocketmqConsumerGroupState)

        __props__.__dict__["consume_enable"] = consume_enable
        __props__.__dict__["consume_message_orderly"] = consume_message_orderly
        __props__.__dict__["consumer_group"] = consumer_group
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["max_retry_times"] = max_retry_times
        __props__.__dict__["remark"] = remark
        return RocketmqConsumerGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="consumeEnable")
    def consume_enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable consumption.
        """
        return pulumi.get(self, "consume_enable")

    @property
    @pulumi.getter(name="consumeMessageOrderly")
    def consume_message_orderly(self) -> pulumi.Output[bool]:
        """
        `true`: Sequential delivery, `false`: Concurrent delivery.
        """
        return pulumi.get(self, "consume_message_orderly")

    @property
    @pulumi.getter(name="consumerGroup")
    def consumer_group(self) -> pulumi.Output[str]:
        """
        Name of consumer group.
        """
        return pulumi.get(self, "consumer_group")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="maxRetryTimes")
    def max_retry_times(self) -> pulumi.Output[int]:
        """
        Max retry times.
        """
        return pulumi.get(self, "max_retry_times")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        remark.
        """
        return pulumi.get(self, "remark")

