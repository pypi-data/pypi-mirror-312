# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RefreshNatDcRouteArgs', 'RefreshNatDcRoute']

@pulumi.input_type
class RefreshNatDcRouteArgs:
    def __init__(__self__, *,
                 dry_run: pulumi.Input[bool],
                 nat_gateway_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a RefreshNatDcRoute resource.
        :param pulumi.Input[bool] dry_run: Whether to pre-refresh, valid values: True:yes, False:no.
        :param pulumi.Input[str] nat_gateway_id: Unique identifier of Nat Gateway.
        :param pulumi.Input[str] vpc_id: Unique identifier of Vpc.
        """
        pulumi.set(__self__, "dry_run", dry_run)
        pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Input[bool]:
        """
        Whether to pre-refresh, valid values: True:yes, False:no.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: pulumi.Input[bool]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> pulumi.Input[str]:
        """
        Unique identifier of Nat Gateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @nat_gateway_id.setter
    def nat_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nat_gateway_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Unique identifier of Vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _RefreshNatDcRouteState:
    def __init__(__self__, *,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RefreshNatDcRoute resources.
        :param pulumi.Input[bool] dry_run: Whether to pre-refresh, valid values: True:yes, False:no.
        :param pulumi.Input[str] nat_gateway_id: Unique identifier of Nat Gateway.
        :param pulumi.Input[str] vpc_id: Unique identifier of Vpc.
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if nat_gateway_id is not None:
            pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to pre-refresh, valid values: True:yes, False:no.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of Nat Gateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @nat_gateway_id.setter
    def nat_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_gateway_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of Vpc.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class RefreshNatDcRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc refresh_nat_dc_route

        ## Example Usage

        ### is True

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example = tencentcloud.eip.Instance("eipExample")
        nat = tencentcloud.nat.Gateway("nat",
            vpc_id=vpc.id,
            max_concurrent=3000000,
            bandwidth=500,
            assigned_eip_sets=[eip_example.public_ip])
        refresh_nat_dc_route = tencentcloud.nat.RefreshNatDcRoute("refreshNatDcRoute",
            nat_gateway_id=nat.id,
            vpc_id=vpc.id,
            dry_run=True)
        ```
        <!--End PulumiCodeChooser -->

        ### is False

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        refresh_nat_dc_route = tencentcloud.nat.RefreshNatDcRoute("refreshNatDcRoute",
            nat_gateway_id=tencentcloud_nat_gateway["nat"]["id"],
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            dry_run=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc refresh_nat_dc_route can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Nat/refreshNatDcRoute:RefreshNatDcRoute refresh_nat_dc_route vpc_id#nat_gateway_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dry_run: Whether to pre-refresh, valid values: True:yes, False:no.
        :param pulumi.Input[str] nat_gateway_id: Unique identifier of Nat Gateway.
        :param pulumi.Input[str] vpc_id: Unique identifier of Vpc.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RefreshNatDcRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc refresh_nat_dc_route

        ## Example Usage

        ### is True

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        eip_example = tencentcloud.eip.Instance("eipExample")
        nat = tencentcloud.nat.Gateway("nat",
            vpc_id=vpc.id,
            max_concurrent=3000000,
            bandwidth=500,
            assigned_eip_sets=[eip_example.public_ip])
        refresh_nat_dc_route = tencentcloud.nat.RefreshNatDcRoute("refreshNatDcRoute",
            nat_gateway_id=nat.id,
            vpc_id=vpc.id,
            dry_run=True)
        ```
        <!--End PulumiCodeChooser -->

        ### is False

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        refresh_nat_dc_route = tencentcloud.nat.RefreshNatDcRoute("refreshNatDcRoute",
            nat_gateway_id=tencentcloud_nat_gateway["nat"]["id"],
            vpc_id=tencentcloud_vpc["vpc"]["id"],
            dry_run=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc refresh_nat_dc_route can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Nat/refreshNatDcRoute:RefreshNatDcRoute refresh_nat_dc_route vpc_id#nat_gateway_id
        ```

        :param str resource_name: The name of the resource.
        :param RefreshNatDcRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RefreshNatDcRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RefreshNatDcRouteArgs.__new__(RefreshNatDcRouteArgs)

            if dry_run is None and not opts.urn:
                raise TypeError("Missing required property 'dry_run'")
            __props__.__dict__["dry_run"] = dry_run
            if nat_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'nat_gateway_id'")
            __props__.__dict__["nat_gateway_id"] = nat_gateway_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(RefreshNatDcRoute, __self__).__init__(
            'tencentcloud:Nat/refreshNatDcRoute:RefreshNatDcRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dry_run: Optional[pulumi.Input[bool]] = None,
            nat_gateway_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'RefreshNatDcRoute':
        """
        Get an existing RefreshNatDcRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] dry_run: Whether to pre-refresh, valid values: True:yes, False:no.
        :param pulumi.Input[str] nat_gateway_id: Unique identifier of Nat Gateway.
        :param pulumi.Input[str] vpc_id: Unique identifier of Vpc.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RefreshNatDcRouteState.__new__(_RefreshNatDcRouteState)

        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["nat_gateway_id"] = nat_gateway_id
        __props__.__dict__["vpc_id"] = vpc_id
        return RefreshNatDcRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[bool]:
        """
        Whether to pre-refresh, valid values: True:yes, False:no.
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> pulumi.Output[str]:
        """
        Unique identifier of Nat Gateway.
        """
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Unique identifier of Vpc.
        """
        return pulumi.get(self, "vpc_id")

