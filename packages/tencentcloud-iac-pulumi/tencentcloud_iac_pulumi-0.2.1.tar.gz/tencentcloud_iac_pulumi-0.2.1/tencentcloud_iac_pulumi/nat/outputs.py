# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDcRouteNatDirectConnectGatewayRouteSetResult',
    'GetGatewaySnatsSnatListResult',
    'GetGatewaysNatResult',
]

@pulumi.output_type
class GetDcRouteNatDirectConnectGatewayRouteSetResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 destination_cidr_block: str,
                 gateway_id: str,
                 gateway_type: str,
                 update_time: str):
        """
        :param str create_time: Create time of route.
        :param str destination_cidr_block: IPv4 CIDR of subnet.
        :param str gateway_id: Id of next-hop gateway.
        :param str gateway_type: Type of next-hop gateway, valid values: DIRECTCONNECT.
        :param str update_time: Update time of route.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "gateway_type", gateway_type)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of route.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> str:
        """
        IPv4 CIDR of subnet.
        """
        return pulumi.get(self, "destination_cidr_block")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        Id of next-hop gateway.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="gatewayType")
    def gateway_type(self) -> str:
        """
        Type of next-hop gateway, valid values: DIRECTCONNECT.
        """
        return pulumi.get(self, "gateway_type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time of route.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetGatewaySnatsSnatListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 description: str,
                 nat_gateway_id: str,
                 public_ip_addrs: Sequence[str],
                 resource_type: str,
                 snat_id: str,
                 instance_id: Optional[str] = None,
                 instance_private_ip_addr: Optional[str] = None,
                 subnet_cidr_block: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str create_time: Create time.
        :param str description: Description.
        :param str nat_gateway_id: NAT gateway ID.
        :param Sequence[str] public_ip_addrs: Elastic IP address pool.
        :param str resource_type: Resource type. Valid values: SUBNET, NETWORKINTERFACE.
        :param str snat_id: SNAT rule ID.
        :param str instance_id: Instance ID.
        :param str instance_private_ip_addr: Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
        :param str subnet_cidr_block: The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
        :param str subnet_id: Subnet instance ID.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        pulumi.set(__self__, "public_ip_addrs", public_ip_addrs)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "snat_id", snat_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_private_ip_addr is not None:
            pulumi.set(__self__, "instance_private_ip_addr", instance_private_ip_addr)
        if subnet_cidr_block is not None:
            pulumi.set(__self__, "subnet_cidr_block", subnet_cidr_block)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> str:
        """
        NAT gateway ID.
        """
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter(name="publicIpAddrs")
    def public_ip_addrs(self) -> Sequence[str]:
        """
        Elastic IP address pool.
        """
        return pulumi.get(self, "public_ip_addrs")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type. Valid values: SUBNET, NETWORKINTERFACE.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="snatId")
    def snat_id(self) -> str:
        """
        SNAT rule ID.
        """
        return pulumi.get(self, "snat_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instancePrivateIpAddr")
    def instance_private_ip_addr(self) -> Optional[str]:
        """
        Private IPs of the instance's primary ENI, required when `resource_type` is NETWORKINTERFACE.
        """
        return pulumi.get(self, "instance_private_ip_addr")

    @property
    @pulumi.getter(name="subnetCidrBlock")
    def subnet_cidr_block(self) -> Optional[str]:
        """
        The IPv4 CIDR of the subnet, required when `resource_type` is SUBNET.
        """
        return pulumi.get(self, "subnet_cidr_block")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet instance ID.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetGatewaysNatResult(dict):
    def __init__(__self__, *,
                 assigned_eip_sets: Sequence[str],
                 bandwidth: int,
                 create_time: str,
                 id: str,
                 max_concurrent: int,
                 name: str,
                 state: str,
                 tags: Mapping[str, Any],
                 vpc_id: str):
        """
        :param Sequence[str] assigned_eip_sets: EIP IP address set bound to the gateway. The value of at least 1.
        :param int bandwidth: The maximum public network output bandwidth of NAT gateway (unit: Mbps), the available values include: 20,50,100,200,500,1000,2000,5000. Default is 100.
        :param str create_time: Create time of the NAT gateway.
        :param str id: ID of the NAT gateway.
        :param int max_concurrent: The upper limit of concurrent connection of NAT gateway, the available values include: 1000000,3000000,10000000. Default is 1000000.
        :param str name: Name of the NAT gateway.
        :param str state: State of the NAT gateway.
        :param Mapping[str, Any] tags: The available tags within this NAT gateway.
        :param str vpc_id: ID of the VPC.
        """
        pulumi.set(__self__, "assigned_eip_sets", assigned_eip_sets)
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_concurrent", max_concurrent)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="assignedEipSets")
    def assigned_eip_sets(self) -> Sequence[str]:
        """
        EIP IP address set bound to the gateway. The value of at least 1.
        """
        return pulumi.get(self, "assigned_eip_sets")

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The maximum public network output bandwidth of NAT gateway (unit: Mbps), the available values include: 20,50,100,200,500,1000,2000,5000. Default is 100.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time of the NAT gateway.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        ID of the NAT gateway.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> int:
        """
        The upper limit of concurrent connection of NAT gateway, the available values include: 1000000,3000000,10000000. Default is 1000000.
        """
        return pulumi.get(self, "max_concurrent")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the NAT gateway.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        State of the NAT gateway.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        The available tags within this NAT gateway.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")


