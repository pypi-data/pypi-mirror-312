# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDcRouteResult',
    'AwaitableGetDcRouteResult',
    'get_dc_route',
    'get_dc_route_output',
]

@pulumi.output_type
class GetDcRouteResult:
    """
    A collection of values returned by getDcRoute.
    """
    def __init__(__self__, id=None, nat_direct_connect_gateway_route_sets=None, nat_gateway_id=None, result_output_file=None, vpc_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nat_direct_connect_gateway_route_sets and not isinstance(nat_direct_connect_gateway_route_sets, list):
            raise TypeError("Expected argument 'nat_direct_connect_gateway_route_sets' to be a list")
        pulumi.set(__self__, "nat_direct_connect_gateway_route_sets", nat_direct_connect_gateway_route_sets)
        if nat_gateway_id and not isinstance(nat_gateway_id, str):
            raise TypeError("Expected argument 'nat_gateway_id' to be a str")
        pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="natDirectConnectGatewayRouteSets")
    def nat_direct_connect_gateway_route_sets(self) -> Sequence['outputs.GetDcRouteNatDirectConnectGatewayRouteSetResult']:
        """
        Data of route.
        """
        return pulumi.get(self, "nat_direct_connect_gateway_route_sets")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> str:
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        return pulumi.get(self, "vpc_id")


class AwaitableGetDcRouteResult(GetDcRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDcRouteResult(
            id=self.id,
            nat_direct_connect_gateway_route_sets=self.nat_direct_connect_gateway_route_sets,
            nat_gateway_id=self.nat_gateway_id,
            result_output_file=self.result_output_file,
            vpc_id=self.vpc_id)


def get_dc_route(nat_gateway_id: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 vpc_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDcRouteResult:
    """
    Use this data source to query detailed information of vpc nat_dc_route

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    nat_dc_route = tencentcloud.Nat.get_dc_route(nat_gateway_id="nat-gnxkey2e",
        vpc_id="vpc-pyyv5k3v")
    ```
    <!--End PulumiCodeChooser -->


    :param str nat_gateway_id: Unique identifier of Nat Gateway.
    :param str result_output_file: Used to save results.
    :param str vpc_id: Unique identifier of Vpc.
    """
    __args__ = dict()
    __args__['natGatewayId'] = nat_gateway_id
    __args__['resultOutputFile'] = result_output_file
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Nat/getDcRoute:getDcRoute', __args__, opts=opts, typ=GetDcRouteResult).value

    return AwaitableGetDcRouteResult(
        id=pulumi.get(__ret__, 'id'),
        nat_direct_connect_gateway_route_sets=pulumi.get(__ret__, 'nat_direct_connect_gateway_route_sets'),
        nat_gateway_id=pulumi.get(__ret__, 'nat_gateway_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_dc_route)
def get_dc_route_output(nat_gateway_id: Optional[pulumi.Input[str]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        vpc_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDcRouteResult]:
    """
    Use this data source to query detailed information of vpc nat_dc_route

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    nat_dc_route = tencentcloud.Nat.get_dc_route(nat_gateway_id="nat-gnxkey2e",
        vpc_id="vpc-pyyv5k3v")
    ```
    <!--End PulumiCodeChooser -->


    :param str nat_gateway_id: Unique identifier of Nat Gateway.
    :param str result_output_file: Used to save results.
    :param str vpc_id: Unique identifier of Vpc.
    """
    ...
