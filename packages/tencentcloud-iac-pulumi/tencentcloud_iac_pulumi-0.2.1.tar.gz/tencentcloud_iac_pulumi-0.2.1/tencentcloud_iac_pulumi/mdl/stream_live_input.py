# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamLiveInputArgs', 'StreamLiveInput']

@pulumi.input_type
class StreamLiveInputArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 input_settings: Optional[pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a StreamLiveInput resource.
        :param pulumi.Input[str] type: Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
        :param pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]] input_settings: Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding type can be configured.
        :param pulumi.Input[str] name: Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region level.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: ID of the input security group to attachYou can attach only one security group to an input.
        """
        pulumi.set(__self__, "type", type)
        if input_settings is not None:
            pulumi.set(__self__, "input_settings", input_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="inputSettings")
    def input_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]]]:
        """
        Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding type can be configured.
        """
        return pulumi.get(self, "input_settings")

    @input_settings.setter
    def input_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]]]):
        pulumi.set(self, "input_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of the input security group to attachYou can attach only one security group to an input.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class _StreamLiveInputState:
    def __init__(__self__, *,
                 input_settings: Optional[pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StreamLiveInput resources.
        :param pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]] input_settings: Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding type can be configured.
        :param pulumi.Input[str] name: Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region level.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: ID of the input security group to attachYou can attach only one security group to an input.
        :param pulumi.Input[str] type: Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
        """
        if input_settings is not None:
            pulumi.set(__self__, "input_settings", input_settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="inputSettings")
    def input_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]]]:
        """
        Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding type can be configured.
        """
        return pulumi.get(self, "input_settings")

    @input_settings.setter
    def input_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StreamLiveInputInputSettingArgs']]]]):
        pulumi.set(self, "input_settings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of the input security group to attachYou can attach only one security group to an input.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class StreamLiveInput(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 input_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamLiveInputInputSettingArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a mdl streamlive_input

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        stream_live_input = tencentcloud.mdl.StreamLiveInput("streamLiveInput",
            security_group_ids=["6405DF9D000007DFB4EC"],
            type="RTP_PUSH")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mdl stream_live_input can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mdl/streamLiveInput:StreamLiveInput stream_live_input id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamLiveInputInputSettingArgs']]]] input_settings: Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding type can be configured.
        :param pulumi.Input[str] name: Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region level.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: ID of the input security group to attachYou can attach only one security group to an input.
        :param pulumi.Input[str] type: Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamLiveInputArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mdl streamlive_input

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        stream_live_input = tencentcloud.mdl.StreamLiveInput("streamLiveInput",
            security_group_ids=["6405DF9D000007DFB4EC"],
            type="RTP_PUSH")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mdl stream_live_input can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mdl/streamLiveInput:StreamLiveInput stream_live_input id
        ```

        :param str resource_name: The name of the resource.
        :param StreamLiveInputArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamLiveInputArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 input_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamLiveInputInputSettingArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamLiveInputArgs.__new__(StreamLiveInputArgs)

            __props__.__dict__["input_settings"] = input_settings
            __props__.__dict__["name"] = name
            __props__.__dict__["security_group_ids"] = security_group_ids
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(StreamLiveInput, __self__).__init__(
            'tencentcloud:Mdl/streamLiveInput:StreamLiveInput',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            input_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamLiveInputInputSettingArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'StreamLiveInput':
        """
        Get an existing StreamLiveInput resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamLiveInputInputSettingArgs']]]] input_settings: Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding type can be configured.
        :param pulumi.Input[str] name: Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region level.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: ID of the input security group to attachYou can attach only one security group to an input.
        :param pulumi.Input[str] type: Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamLiveInputState.__new__(_StreamLiveInputState)

        __props__.__dict__["input_settings"] = input_settings
        __props__.__dict__["name"] = name
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["type"] = type
        return StreamLiveInput(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="inputSettings")
    def input_settings(self) -> pulumi.Output[Sequence['outputs.StreamLiveInputInputSetting']]:
        """
        Input settings. For the type `RTMP_PUSH`, `RTMP_PULL`, `HLS_PULL`, or `MP4_PULL`, 1 or 2 inputs of the corresponding type can be configured.
        """
        return pulumi.get(self, "input_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Input name, which can contain 1-32 case-sensitive letters, digits, and underscores and must be unique at the region level.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ID of the input security group to attachYou can attach only one security group to an input.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Input typeValid values: `RTMP_PUSH`, `RTP_PUSH`, `UDP_PUSH`, `RTMP_PULL`, `HLS_PULL`, `MP4_PULL`.
        """
        return pulumi.get(self, "type")

