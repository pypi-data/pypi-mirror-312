# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EncryptionProtectionArgs', 'EncryptionProtection']

@pulumi.input_type
class EncryptionProtectionArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 kms_configuration: pulumi.Input['EncryptionProtectionKmsConfigurationArgs']):
        """
        The set of arguments for constructing a EncryptionProtection resource.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input['EncryptionProtectionKmsConfigurationArgs'] kms_configuration: kms encryption configuration.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "kms_configuration", kms_configuration)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="kmsConfiguration")
    def kms_configuration(self) -> pulumi.Input['EncryptionProtectionKmsConfigurationArgs']:
        """
        kms encryption configuration.
        """
        return pulumi.get(self, "kms_configuration")

    @kms_configuration.setter
    def kms_configuration(self, value: pulumi.Input['EncryptionProtectionKmsConfigurationArgs']):
        pulumi.set(self, "kms_configuration", value)


@pulumi.input_type
class _EncryptionProtectionState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 kms_configuration: Optional[pulumi.Input['EncryptionProtectionKmsConfigurationArgs']] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EncryptionProtection resources.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input['EncryptionProtectionKmsConfigurationArgs'] kms_configuration: kms encryption configuration.
        :param pulumi.Input[str] status: kms encryption status.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if kms_configuration is not None:
            pulumi.set(__self__, "kms_configuration", kms_configuration)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="kmsConfiguration")
    def kms_configuration(self) -> Optional[pulumi.Input['EncryptionProtectionKmsConfigurationArgs']]:
        """
        kms encryption configuration.
        """
        return pulumi.get(self, "kms_configuration")

    @kms_configuration.setter
    def kms_configuration(self, value: Optional[pulumi.Input['EncryptionProtectionKmsConfigurationArgs']]):
        pulumi.set(self, "kms_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        kms encryption status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class EncryptionProtection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 kms_configuration: Optional[pulumi.Input[pulumi.InputType['EncryptionProtectionKmsConfigurationArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tke encryption_protection

        ## Example Usage

        ### Enable tke encryption protection

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        example_region = config.get("exampleRegion")
        if example_region is None:
            example_region = "ap-guangzhou"
        example_cluster_cidr = config.get("exampleClusterCidr")
        if example_cluster_cidr is None:
            example_cluster_cidr = "10.32.0.0/16"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        example_cluster = tencentcloud.kubernetes.Cluster("exampleCluster",
            vpc_id=vpc.instance_lists[0].vpc_id,
            cluster_cidr=example_cluster_cidr,
            cluster_max_pod_num=32,
            cluster_name="tf_example_cluster",
            cluster_desc="a tf example cluster for the kms test",
            cluster_max_service_num=32,
            cluster_deploy_type="MANAGED_CLUSTER")
        example_key = tencentcloud.kms.Key("exampleKey",
            alias="tf-example-kms-key",
            description="example of kms key instance",
            key_usage="ENCRYPT_DECRYPT",
            is_enabled=True)
        example_encryption_protection = tencentcloud.kubernetes.EncryptionProtection("exampleEncryptionProtection",
            cluster_id=example_cluster.id,
            kms_configuration=tencentcloud.kubernetes.EncryptionProtectionKmsConfigurationArgs(
                key_id=example_key.id,
                kms_region=example_region,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input[pulumi.InputType['EncryptionProtectionKmsConfigurationArgs']] kms_configuration: kms encryption configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EncryptionProtectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tke encryption_protection

        ## Example Usage

        ### Enable tke encryption protection

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        example_region = config.get("exampleRegion")
        if example_region is None:
            example_region = "ap-guangzhou"
        example_cluster_cidr = config.get("exampleClusterCidr")
        if example_cluster_cidr is None:
            example_cluster_cidr = "10.32.0.0/16"
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        example_cluster = tencentcloud.kubernetes.Cluster("exampleCluster",
            vpc_id=vpc.instance_lists[0].vpc_id,
            cluster_cidr=example_cluster_cidr,
            cluster_max_pod_num=32,
            cluster_name="tf_example_cluster",
            cluster_desc="a tf example cluster for the kms test",
            cluster_max_service_num=32,
            cluster_deploy_type="MANAGED_CLUSTER")
        example_key = tencentcloud.kms.Key("exampleKey",
            alias="tf-example-kms-key",
            description="example of kms key instance",
            key_usage="ENCRYPT_DECRYPT",
            is_enabled=True)
        example_encryption_protection = tencentcloud.kubernetes.EncryptionProtection("exampleEncryptionProtection",
            cluster_id=example_cluster.id,
            kms_configuration=tencentcloud.kubernetes.EncryptionProtectionKmsConfigurationArgs(
                key_id=example_key.id,
                kms_region=example_region,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param EncryptionProtectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EncryptionProtectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 kms_configuration: Optional[pulumi.Input[pulumi.InputType['EncryptionProtectionKmsConfigurationArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EncryptionProtectionArgs.__new__(EncryptionProtectionArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if kms_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'kms_configuration'")
            __props__.__dict__["kms_configuration"] = kms_configuration
            __props__.__dict__["status"] = None
        super(EncryptionProtection, __self__).__init__(
            'tencentcloud:Kubernetes/encryptionProtection:EncryptionProtection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            kms_configuration: Optional[pulumi.Input[pulumi.InputType['EncryptionProtectionKmsConfigurationArgs']]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'EncryptionProtection':
        """
        Get an existing EncryptionProtection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input[pulumi.InputType['EncryptionProtectionKmsConfigurationArgs']] kms_configuration: kms encryption configuration.
        :param pulumi.Input[str] status: kms encryption status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EncryptionProtectionState.__new__(_EncryptionProtectionState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["kms_configuration"] = kms_configuration
        __props__.__dict__["status"] = status
        return EncryptionProtection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="kmsConfiguration")
    def kms_configuration(self) -> pulumi.Output['outputs.EncryptionProtectionKmsConfiguration']:
        """
        kms encryption configuration.
        """
        return pulumi.get(self, "kms_configuration")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        kms encryption status.
        """
        return pulumi.get(self, "status")

