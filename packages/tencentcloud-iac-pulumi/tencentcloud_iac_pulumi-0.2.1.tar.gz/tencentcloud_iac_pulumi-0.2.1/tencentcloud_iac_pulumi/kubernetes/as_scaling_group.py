# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AsScalingGroupArgs', 'AsScalingGroup']

@pulumi.input_type
class AsScalingGroupArgs:
    def __init__(__self__, *,
                 auto_scaling_config: pulumi.Input['AsScalingGroupAutoScalingConfigArgs'],
                 auto_scaling_group: pulumi.Input['AsScalingGroupAutoScalingGroupArgs'],
                 cluster_id: pulumi.Input[str],
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a AsScalingGroup resource.
        :param pulumi.Input['AsScalingGroupAutoScalingConfigArgs'] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input['AsScalingGroupAutoScalingGroupArgs'] auto_scaling_group: Auto scaling group parameters.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes AS Group created nodes.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        pulumi.set(__self__, "auto_scaling_config", auto_scaling_config)
        pulumi.set(__self__, "auto_scaling_group", auto_scaling_group)
        pulumi.set(__self__, "cluster_id", cluster_id)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)

    @property
    @pulumi.getter(name="autoScalingConfig")
    def auto_scaling_config(self) -> pulumi.Input['AsScalingGroupAutoScalingConfigArgs']:
        """
        Auto scaling config parameters.
        """
        return pulumi.get(self, "auto_scaling_config")

    @auto_scaling_config.setter
    def auto_scaling_config(self, value: pulumi.Input['AsScalingGroupAutoScalingConfigArgs']):
        pulumi.set(self, "auto_scaling_config", value)

    @property
    @pulumi.getter(name="autoScalingGroup")
    def auto_scaling_group(self) -> pulumi.Input['AsScalingGroupAutoScalingGroupArgs']:
        """
        Auto scaling group parameters.
        """
        return pulumi.get(self, "auto_scaling_group")

    @auto_scaling_group.setter
    def auto_scaling_group(self, value: pulumi.Input['AsScalingGroupAutoScalingGroupArgs']):
        pulumi.set(self, "auto_scaling_group", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of kubernetes AS Group created nodes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)


@pulumi.input_type
class _AsScalingGroupState:
    def __init__(__self__, *,
                 auto_scaling_config: Optional[pulumi.Input['AsScalingGroupAutoScalingConfigArgs']] = None,
                 auto_scaling_group: Optional[pulumi.Input['AsScalingGroupAutoScalingGroupArgs']] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AsScalingGroup resources.
        :param pulumi.Input['AsScalingGroupAutoScalingConfigArgs'] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input['AsScalingGroupAutoScalingGroupArgs'] auto_scaling_group: Auto scaling group parameters.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes AS Group created nodes.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        if auto_scaling_config is not None:
            pulumi.set(__self__, "auto_scaling_config", auto_scaling_config)
        if auto_scaling_group is not None:
            pulumi.set(__self__, "auto_scaling_group", auto_scaling_group)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if extra_args is not None:
            pulumi.set(__self__, "extra_args", extra_args)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)

    @property
    @pulumi.getter(name="autoScalingConfig")
    def auto_scaling_config(self) -> Optional[pulumi.Input['AsScalingGroupAutoScalingConfigArgs']]:
        """
        Auto scaling config parameters.
        """
        return pulumi.get(self, "auto_scaling_config")

    @auto_scaling_config.setter
    def auto_scaling_config(self, value: Optional[pulumi.Input['AsScalingGroupAutoScalingConfigArgs']]):
        pulumi.set(self, "auto_scaling_config", value)

    @property
    @pulumi.getter(name="autoScalingGroup")
    def auto_scaling_group(self) -> Optional[pulumi.Input['AsScalingGroupAutoScalingGroupArgs']]:
        """
        Auto scaling group parameters.
        """
        return pulumi.get(self, "auto_scaling_group")

    @auto_scaling_group.setter
    def auto_scaling_group(self, value: Optional[pulumi.Input['AsScalingGroupAutoScalingGroupArgs']]):
        pulumi.set(self, "auto_scaling_group", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @extra_args.setter
    def extra_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_args", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Labels of kubernetes AS Group created nodes.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[pulumi.Input[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unschedulable", value)


class AsScalingGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_config: Optional[pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingConfigArgs']]] = None,
                 auto_scaling_group: Optional[pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingGroupArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Auto scaling group for kubernetes cluster (offlined).

        > **NOTE:**  This resource was offline no longer suppored.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingConfigArgs']] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingGroupArgs']] auto_scaling_group: Auto scaling group parameters.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes AS Group created nodes.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AsScalingGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Auto scaling group for kubernetes cluster (offlined).

        > **NOTE:**  This resource was offline no longer suppored.

        :param str resource_name: The name of the resource.
        :param AsScalingGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AsScalingGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_config: Optional[pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingConfigArgs']]] = None,
                 auto_scaling_group: Optional[pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingGroupArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 unschedulable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AsScalingGroupArgs.__new__(AsScalingGroupArgs)

            if auto_scaling_config is None and not opts.urn:
                raise TypeError("Missing required property 'auto_scaling_config'")
            __props__.__dict__["auto_scaling_config"] = auto_scaling_config
            if auto_scaling_group is None and not opts.urn:
                raise TypeError("Missing required property 'auto_scaling_group'")
            __props__.__dict__["auto_scaling_group"] = auto_scaling_group
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["extra_args"] = extra_args
            __props__.__dict__["labels"] = labels
            __props__.__dict__["unschedulable"] = unschedulable
        super(AsScalingGroup, __self__).__init__(
            'tencentcloud:Kubernetes/asScalingGroup:AsScalingGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_scaling_config: Optional[pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingConfigArgs']]] = None,
            auto_scaling_group: Optional[pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingGroupArgs']]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            extra_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            unschedulable: Optional[pulumi.Input[int]] = None) -> 'AsScalingGroup':
        """
        Get an existing AsScalingGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingConfigArgs']] auto_scaling_config: Auto scaling config parameters.
        :param pulumi.Input[pulumi.InputType['AsScalingGroupAutoScalingGroupArgs']] auto_scaling_group: Auto scaling group parameters.
        :param pulumi.Input[str] cluster_id: ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_args: Custom parameter information related to the node.
        :param pulumi.Input[Mapping[str, Any]] labels: Labels of kubernetes AS Group created nodes.
        :param pulumi.Input[int] unschedulable: Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AsScalingGroupState.__new__(_AsScalingGroupState)

        __props__.__dict__["auto_scaling_config"] = auto_scaling_config
        __props__.__dict__["auto_scaling_group"] = auto_scaling_group
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["extra_args"] = extra_args
        __props__.__dict__["labels"] = labels
        __props__.__dict__["unschedulable"] = unschedulable
        return AsScalingGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoScalingConfig")
    def auto_scaling_config(self) -> pulumi.Output['outputs.AsScalingGroupAutoScalingConfig']:
        """
        Auto scaling config parameters.
        """
        return pulumi.get(self, "auto_scaling_config")

    @property
    @pulumi.getter(name="autoScalingGroup")
    def auto_scaling_group(self) -> pulumi.Output['outputs.AsScalingGroupAutoScalingGroup']:
        """
        Auto scaling group parameters.
        """
        return pulumi.get(self, "auto_scaling_group")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="extraArgs")
    def extra_args(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Custom parameter information related to the node.
        """
        return pulumi.get(self, "extra_args")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Labels of kubernetes AS Group created nodes.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def unschedulable(self) -> pulumi.Output[Optional[int]]:
        """
        Sets whether the joining node participates in the schedule. Default is '0'. Participate in scheduling.
        """
        return pulumi.get(self, "unschedulable")

