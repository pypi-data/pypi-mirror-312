# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BackupStorageLocationArgs', 'BackupStorageLocation']

@pulumi.input_type
class BackupStorageLocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 storage_region: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BackupStorageLocation resource.
        :param pulumi.Input[str] bucket: Name of the bucket.
        :param pulumi.Input[str] storage_region: Region of the storage.
        :param pulumi.Input[str] name: Name of the backup storage location.
        :param pulumi.Input[str] path: Prefix of the bucket.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "storage_region", storage_region)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Name of the bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="storageRegion")
    def storage_region(self) -> pulumi.Input[str]:
        """
        Region of the storage.
        """
        return pulumi.get(self, "storage_region")

    @storage_region.setter
    def storage_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_region", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup storage location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of the bucket.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class _BackupStorageLocationState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storage_region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BackupStorageLocation resources.
        :param pulumi.Input[str] bucket: Name of the bucket.
        :param pulumi.Input[str] message: Message of the backup storage location.
        :param pulumi.Input[str] name: Name of the backup storage location.
        :param pulumi.Input[str] path: Prefix of the bucket.
        :param pulumi.Input[str] state: State of the backup storage location.
        :param pulumi.Input[str] storage_region: Region of the storage.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storage_region is not None:
            pulumi.set(__self__, "storage_region", storage_region)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message of the backup storage location.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the backup storage location.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of the bucket.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the backup storage location.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="storageRegion")
    def storage_region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the storage.
        """
        return pulumi.get(self, "storage_region")

    @storage_region.setter
    def storage_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_region", value)


class BackupStorageLocation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 storage_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create tke backup storage location.

        > **NOTE:** To create this resource, you need to create a cos bucket with prefix "tke-backup" in advance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_backup = tencentcloud.kubernetes.BackupStorageLocation("exampleBackup",
            bucket="tke-backup-example-1",
            storage_region="ap-guangzhou")
        # region of you pre-created COS bucket
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke backup storage location can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/backupStorageLocation:BackupStorageLocation test xxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Name of the bucket.
        :param pulumi.Input[str] name: Name of the backup storage location.
        :param pulumi.Input[str] path: Prefix of the bucket.
        :param pulumi.Input[str] storage_region: Region of the storage.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupStorageLocationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create tke backup storage location.

        > **NOTE:** To create this resource, you need to create a cos bucket with prefix "tke-backup" in advance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_backup = tencentcloud.kubernetes.BackupStorageLocation("exampleBackup",
            bucket="tke-backup-example-1",
            storage_region="ap-guangzhou")
        # region of you pre-created COS bucket
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tke backup storage location can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Kubernetes/backupStorageLocation:BackupStorageLocation test xxx
        ```

        :param str resource_name: The name of the resource.
        :param BackupStorageLocationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupStorageLocationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 storage_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupStorageLocationArgs.__new__(BackupStorageLocationArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["name"] = name
            __props__.__dict__["path"] = path
            if storage_region is None and not opts.urn:
                raise TypeError("Missing required property 'storage_region'")
            __props__.__dict__["storage_region"] = storage_region
            __props__.__dict__["message"] = None
            __props__.__dict__["state"] = None
        super(BackupStorageLocation, __self__).__init__(
            'tencentcloud:Kubernetes/backupStorageLocation:BackupStorageLocation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            message: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            storage_region: Optional[pulumi.Input[str]] = None) -> 'BackupStorageLocation':
        """
        Get an existing BackupStorageLocation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Name of the bucket.
        :param pulumi.Input[str] message: Message of the backup storage location.
        :param pulumi.Input[str] name: Name of the backup storage location.
        :param pulumi.Input[str] path: Prefix of the bucket.
        :param pulumi.Input[str] state: State of the backup storage location.
        :param pulumi.Input[str] storage_region: Region of the storage.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupStorageLocationState.__new__(_BackupStorageLocationState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["message"] = message
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["state"] = state
        __props__.__dict__["storage_region"] = storage_region
        return BackupStorageLocation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        Name of the bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        Message of the backup storage location.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the backup storage location.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[str]]:
        """
        Prefix of the bucket.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the backup storage location.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="storageRegion")
    def storage_region(self) -> pulumi.Output[str]:
        """
        Region of the storage.
        """
        return pulumi.get(self, "storage_region")

