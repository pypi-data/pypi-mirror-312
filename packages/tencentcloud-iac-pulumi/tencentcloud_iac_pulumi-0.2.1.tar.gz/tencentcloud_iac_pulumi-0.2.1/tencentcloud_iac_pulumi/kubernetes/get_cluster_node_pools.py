# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetClusterNodePoolsResult',
    'AwaitableGetClusterNodePoolsResult',
    'get_cluster_node_pools',
    'get_cluster_node_pools_output',
]

@pulumi.output_type
class GetClusterNodePoolsResult:
    """
    A collection of values returned by getClusterNodePools.
    """
    def __init__(__self__, cluster_id=None, filters=None, id=None, node_pool_sets=None, result_output_file=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if node_pool_sets and not isinstance(node_pool_sets, list):
            raise TypeError("Expected argument 'node_pool_sets' to be a list")
        pulumi.set(__self__, "node_pool_sets", node_pool_sets)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetClusterNodePoolsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nodePoolSets")
    def node_pool_sets(self) -> Sequence['outputs.GetClusterNodePoolsNodePoolSetResult']:
        """
        Node Pool List.
        """
        return pulumi.get(self, "node_pool_sets")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetClusterNodePoolsResult(GetClusterNodePoolsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterNodePoolsResult(
            cluster_id=self.cluster_id,
            filters=self.filters,
            id=self.id,
            node_pool_sets=self.node_pool_sets,
            result_output_file=self.result_output_file)


def get_cluster_node_pools(cluster_id: Optional[str] = None,
                           filters: Optional[Sequence[pulumi.InputType['GetClusterNodePoolsFilterArgs']]] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterNodePoolsResult:
    """
    Use this data source to query detailed information of kubernetes cluster_node_pools

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster_node_pools = tencentcloud.Kubernetes.get_cluster_node_pools(cluster_id="cls-kzilgv5m",
        filters=[
            tencentcloud.kubernetes.GetClusterNodePoolsFilterArgs(
                name="NodePoolsName",
                values=["mynodepool_xxxx"],
            ),
            tencentcloud.kubernetes.GetClusterNodePoolsFilterArgs(
                name="NodePoolsId",
                values=["np-ngjwhdv4"],
            ),
        ])
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: ID of the cluster.
    :param Sequence[pulumi.InputType['GetClusterNodePoolsFilterArgs']] filters: NodePoolsName, Filter according to the node pool name, type: String, required: no. NodePoolsId, Filter according to the node pool ID, type: String, required: no. tags, Filter according to the label key value pairs, type: String, required: no. tag:tag-key, Filter according to the label key value pairs, type: String, required: no.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Kubernetes/getClusterNodePools:getClusterNodePools', __args__, opts=opts, typ=GetClusterNodePoolsResult).value

    return AwaitableGetClusterNodePoolsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        node_pool_sets=pulumi.get(__ret__, 'node_pool_sets'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_cluster_node_pools)
def get_cluster_node_pools_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                  filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetClusterNodePoolsFilterArgs']]]]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterNodePoolsResult]:
    """
    Use this data source to query detailed information of kubernetes cluster_node_pools

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster_node_pools = tencentcloud.Kubernetes.get_cluster_node_pools(cluster_id="cls-kzilgv5m",
        filters=[
            tencentcloud.kubernetes.GetClusterNodePoolsFilterArgs(
                name="NodePoolsName",
                values=["mynodepool_xxxx"],
            ),
            tencentcloud.kubernetes.GetClusterNodePoolsFilterArgs(
                name="NodePoolsId",
                values=["np-ngjwhdv4"],
            ),
        ])
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: ID of the cluster.
    :param Sequence[pulumi.InputType['GetClusterNodePoolsFilterArgs']] filters: NodePoolsName, Filter according to the node pool name, type: String, required: no. NodePoolsId, Filter according to the node pool ID, type: String, required: no. tags, Filter according to the label key value pairs, type: String, required: no. tag:tag-key, Filter according to the label key value pairs, type: String, required: no.
    :param str result_output_file: Used to save results.
    """
    ...
