# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetReceiversResult',
    'AwaitableGetReceiversResult',
    'get_receivers',
    'get_receivers_output',
]

@pulumi.output_type
class GetReceiversResult:
    """
    A collection of values returned by getReceivers.
    """
    def __init__(__self__, datas=None, id=None, key_word=None, result_output_file=None, status=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_word and not isinstance(key_word, str):
            raise TypeError("Expected argument 'key_word' to be a str")
        pulumi.set(__self__, "key_word", key_word)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetReceiversDataResult']:
        """
        Data record.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyWord")
    def key_word(self) -> Optional[str]:
        return pulumi.get(self, "key_word")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")


class AwaitableGetReceiversResult(GetReceiversResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReceiversResult(
            datas=self.datas,
            id=self.id,
            key_word=self.key_word,
            result_output_file=self.result_output_file,
            status=self.status)


def get_receivers(key_word: Optional[str] = None,
                  result_output_file: Optional[str] = None,
                  status: Optional[int] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReceiversResult:
    """
    Use this data source to query detailed information of ses receivers

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    receivers = tencentcloud.Ses.get_receivers(key_word="keep",
        status=3)
    ```
    <!--End PulumiCodeChooser -->


    :param str key_word: Group name keyword for fuzzy query.
    :param str result_output_file: Used to save results.
    :param int status: Group status (`1`: to be uploaded; `2`: uploading; `3`: uploaded). To query groups in all states, do not pass in this parameter.
    """
    __args__ = dict()
    __args__['keyWord'] = key_word
    __args__['resultOutputFile'] = result_output_file
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ses/getReceivers:getReceivers', __args__, opts=opts, typ=GetReceiversResult).value

    return AwaitableGetReceiversResult(
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        key_word=pulumi.get(__ret__, 'key_word'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_receivers)
def get_receivers_output(key_word: Optional[pulumi.Input[Optional[str]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         status: Optional[pulumi.Input[Optional[int]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReceiversResult]:
    """
    Use this data source to query detailed information of ses receivers

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    receivers = tencentcloud.Ses.get_receivers(key_word="keep",
        status=3)
    ```
    <!--End PulumiCodeChooser -->


    :param str key_word: Group name keyword for fuzzy query.
    :param str result_output_file: Used to save results.
    :param int status: Group status (`1`: to be uploaded; `2`: uploading; `3`: uploaded). To query groups in all states, do not pass in this parameter.
    """
    ...
