# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReceiverArgs', 'Receiver']

@pulumi.input_type
class ReceiverArgs:
    def __init__(__self__, *,
                 datas: pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]],
                 receivers_name: pulumi.Input[str],
                 desc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Receiver resource.
        :param pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]] datas: Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `template_data`, then other objects are also required.
        :param pulumi.Input[str] receivers_name: Recipient group name.
        :param pulumi.Input[str] desc: Recipient group description.
        """
        pulumi.set(__self__, "datas", datas)
        pulumi.set(__self__, "receivers_name", receivers_name)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)

    @property
    @pulumi.getter
    def datas(self) -> pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]]:
        """
        Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `template_data`, then other objects are also required.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]]):
        pulumi.set(self, "datas", value)

    @property
    @pulumi.getter(name="receiversName")
    def receivers_name(self) -> pulumi.Input[str]:
        """
        Recipient group name.
        """
        return pulumi.get(self, "receivers_name")

    @receivers_name.setter
    def receivers_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "receivers_name", value)

    @property
    @pulumi.getter
    def desc(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient group description.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desc", value)


@pulumi.input_type
class _ReceiverState:
    def __init__(__self__, *,
                 datas: Optional[pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 receivers_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Receiver resources.
        :param pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]] datas: Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `template_data`, then other objects are also required.
        :param pulumi.Input[str] desc: Recipient group description.
        :param pulumi.Input[str] receivers_name: Recipient group name.
        """
        if datas is not None:
            pulumi.set(__self__, "datas", datas)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if receivers_name is not None:
            pulumi.set(__self__, "receivers_name", receivers_name)

    @property
    @pulumi.getter
    def datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]]]:
        """
        Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `template_data`, then other objects are also required.
        """
        return pulumi.get(self, "datas")

    @datas.setter
    def datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReceiverDataArgs']]]]):
        pulumi.set(self, "datas", value)

    @property
    @pulumi.getter
    def desc(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient group description.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desc", value)

    @property
    @pulumi.getter(name="receiversName")
    def receivers_name(self) -> Optional[pulumi.Input[str]]:
        """
        Recipient group name.
        """
        return pulumi.get(self, "receivers_name")

    @receivers_name.setter
    def receivers_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "receivers_name", value)


class Receiver(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReceiverDataArgs']]]]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 receivers_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ses receiver

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        receiver = tencentcloud.ses.Receiver("receiver",
            datas=[
                tencentcloud.ses.ReceiverDataArgs(
                    email="abc@abc.com",
                ),
                tencentcloud.ses.ReceiverDataArgs(
                    email="abcd@abcd.com",
                ),
            ],
            desc="description",
            receivers_name="terraform_test")
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        receiver = tencentcloud.ses.Receiver("receiver",
            datas=[
                tencentcloud.ses.ReceiverDataArgs(
                    email="abc@abc.com",
                    template_data="{\\"name\\":\\"xxx\\",\\"age\\":\\"xx\\"}",
                ),
                tencentcloud.ses.ReceiverDataArgs(
                    email="abcd@abcd.com",
                    template_data="{\\"name\\":\\"xxx\\",\\"age\\":\\"xx\\"}",
                ),
            ],
            desc="description",
            receivers_name="terraform_test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ses email_address can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ses/receiver:Receiver receiver receiverId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReceiverDataArgs']]]] datas: Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `template_data`, then other objects are also required.
        :param pulumi.Input[str] desc: Recipient group description.
        :param pulumi.Input[str] receivers_name: Recipient group name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReceiverArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ses receiver

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        receiver = tencentcloud.ses.Receiver("receiver",
            datas=[
                tencentcloud.ses.ReceiverDataArgs(
                    email="abc@abc.com",
                ),
                tencentcloud.ses.ReceiverDataArgs(
                    email="abcd@abcd.com",
                ),
            ],
            desc="description",
            receivers_name="terraform_test")
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        receiver = tencentcloud.ses.Receiver("receiver",
            datas=[
                tencentcloud.ses.ReceiverDataArgs(
                    email="abc@abc.com",
                    template_data="{\\"name\\":\\"xxx\\",\\"age\\":\\"xx\\"}",
                ),
                tencentcloud.ses.ReceiverDataArgs(
                    email="abcd@abcd.com",
                    template_data="{\\"name\\":\\"xxx\\",\\"age\\":\\"xx\\"}",
                ),
            ],
            desc="description",
            receivers_name="terraform_test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ses email_address can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ses/receiver:Receiver receiver receiverId
        ```

        :param str resource_name: The name of the resource.
        :param ReceiverArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReceiverArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReceiverDataArgs']]]]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 receivers_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReceiverArgs.__new__(ReceiverArgs)

            if datas is None and not opts.urn:
                raise TypeError("Missing required property 'datas'")
            __props__.__dict__["datas"] = datas
            __props__.__dict__["desc"] = desc
            if receivers_name is None and not opts.urn:
                raise TypeError("Missing required property 'receivers_name'")
            __props__.__dict__["receivers_name"] = receivers_name
        super(Receiver, __self__).__init__(
            'tencentcloud:Ses/receiver:Receiver',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReceiverDataArgs']]]]] = None,
            desc: Optional[pulumi.Input[str]] = None,
            receivers_name: Optional[pulumi.Input[str]] = None) -> 'Receiver':
        """
        Get an existing Receiver resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ReceiverDataArgs']]]] datas: Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `template_data`, then other objects are also required.
        :param pulumi.Input[str] desc: Recipient group description.
        :param pulumi.Input[str] receivers_name: Recipient group name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReceiverState.__new__(_ReceiverState)

        __props__.__dict__["datas"] = datas
        __props__.__dict__["desc"] = desc
        __props__.__dict__["receivers_name"] = receivers_name
        return Receiver(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def datas(self) -> pulumi.Output[Sequence['outputs.ReceiverData']]:
        """
        Recipient email and template parameters in array format. The number of recipients is limited to within 20,000. If there is an object in the `data` list that inputs `template_data`, then other objects are also required.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def desc(self) -> pulumi.Output[Optional[str]]:
        """
        Recipient group description.
        """
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="receiversName")
    def receivers_name(self) -> pulumi.Output[str]:
        """
        Recipient group name.
        """
        return pulumi.get(self, "receivers_name")

