# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBlackEmailAddressResult',
    'AwaitableGetBlackEmailAddressResult',
    'get_black_email_address',
    'get_black_email_address_output',
]

@pulumi.output_type
class GetBlackEmailAddressResult:
    """
    A collection of values returned by getBlackEmailAddress.
    """
    def __init__(__self__, black_lists=None, email_address=None, end_date=None, id=None, result_output_file=None, start_date=None, task_id=None):
        if black_lists and not isinstance(black_lists, list):
            raise TypeError("Expected argument 'black_lists' to be a list")
        pulumi.set(__self__, "black_lists", black_lists)
        if email_address and not isinstance(email_address, str):
            raise TypeError("Expected argument 'email_address' to be a str")
        pulumi.set(__self__, "email_address", email_address)
        if end_date and not isinstance(end_date, str):
            raise TypeError("Expected argument 'end_date' to be a str")
        pulumi.set(__self__, "end_date", end_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_date and not isinstance(start_date, str):
            raise TypeError("Expected argument 'start_date' to be a str")
        pulumi.set(__self__, "start_date", start_date)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter(name="blackLists")
    def black_lists(self) -> Sequence['outputs.GetBlackEmailAddressBlackListResult']:
        """
        List of blocklisted addresses.
        """
        return pulumi.get(self, "black_lists")

    @property
    @pulumi.getter(name="emailAddress")
    def email_address(self) -> Optional[str]:
        """
        Blocklisted email address.
        """
        return pulumi.get(self, "email_address")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        return pulumi.get(self, "task_id")


class AwaitableGetBlackEmailAddressResult(GetBlackEmailAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBlackEmailAddressResult(
            black_lists=self.black_lists,
            email_address=self.email_address,
            end_date=self.end_date,
            id=self.id,
            result_output_file=self.result_output_file,
            start_date=self.start_date,
            task_id=self.task_id)


def get_black_email_address(email_address: Optional[str] = None,
                            end_date: Optional[str] = None,
                            result_output_file: Optional[str] = None,
                            start_date: Optional[str] = None,
                            task_id: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBlackEmailAddressResult:
    """
    Use this data source to query detailed information of ses black_email_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    black_email_address = tencentcloud.Ses.get_black_email_address(email_address="xxx@mail.qcloud.com",
        end_date="2020-09-23",
        start_date="2020-09-22",
        task_id="7000")
    ```
    <!--End PulumiCodeChooser -->


    :param str email_address: You can specify an email address to query.
    :param str end_date: End date in the format of `YYYY-MM-DD`.
    :param str result_output_file: Used to save results.
    :param str start_date: Start date in the format of `YYYY-MM-DD`.
    :param str task_id: You can specify a task ID to query.
    """
    __args__ = dict()
    __args__['emailAddress'] = email_address
    __args__['endDate'] = end_date
    __args__['resultOutputFile'] = result_output_file
    __args__['startDate'] = start_date
    __args__['taskId'] = task_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ses/getBlackEmailAddress:getBlackEmailAddress', __args__, opts=opts, typ=GetBlackEmailAddressResult).value

    return AwaitableGetBlackEmailAddressResult(
        black_lists=pulumi.get(__ret__, 'black_lists'),
        email_address=pulumi.get(__ret__, 'email_address'),
        end_date=pulumi.get(__ret__, 'end_date'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_date=pulumi.get(__ret__, 'start_date'),
        task_id=pulumi.get(__ret__, 'task_id'))


@_utilities.lift_output_func(get_black_email_address)
def get_black_email_address_output(email_address: Optional[pulumi.Input[Optional[str]]] = None,
                                   end_date: Optional[pulumi.Input[str]] = None,
                                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                   start_date: Optional[pulumi.Input[str]] = None,
                                   task_id: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBlackEmailAddressResult]:
    """
    Use this data source to query detailed information of ses black_email_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    black_email_address = tencentcloud.Ses.get_black_email_address(email_address="xxx@mail.qcloud.com",
        end_date="2020-09-23",
        start_date="2020-09-22",
        task_id="7000")
    ```
    <!--End PulumiCodeChooser -->


    :param str email_address: You can specify an email address to query.
    :param str end_date: End date in the format of `YYYY-MM-DD`.
    :param str result_output_file: Used to save results.
    :param str start_date: Start date in the format of `YYYY-MM-DD`.
    :param str task_id: You can specify a task ID to query.
    """
    ...
