# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TemplateArgs', 'Template']

@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 template_content: pulumi.Input['TemplateTemplateContentArgs'],
                 template_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a Template resource.
        :param pulumi.Input['TemplateTemplateContentArgs'] template_content: Sms Template Content.
        :param pulumi.Input[str] template_name: smsTemplateName, which must be required.
        """
        pulumi.set(__self__, "template_content", template_content)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="templateContent")
    def template_content(self) -> pulumi.Input['TemplateTemplateContentArgs']:
        """
        Sms Template Content.
        """
        return pulumi.get(self, "template_content")

    @template_content.setter
    def template_content(self, value: pulumi.Input['TemplateTemplateContentArgs']):
        pulumi.set(self, "template_content", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        smsTemplateName, which must be required.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class _TemplateState:
    def __init__(__self__, *,
                 template_content: Optional[pulumi.Input['TemplateTemplateContentArgs']] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Template resources.
        :param pulumi.Input['TemplateTemplateContentArgs'] template_content: Sms Template Content.
        :param pulumi.Input[str] template_name: smsTemplateName, which must be required.
        """
        if template_content is not None:
            pulumi.set(__self__, "template_content", template_content)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="templateContent")
    def template_content(self) -> Optional[pulumi.Input['TemplateTemplateContentArgs']]:
        """
        Sms Template Content.
        """
        return pulumi.get(self, "template_content")

    @template_content.setter
    def template_content(self, value: Optional[pulumi.Input['TemplateTemplateContentArgs']]):
        pulumi.set(self, "template_content", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        smsTemplateName, which must be required.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class Template(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 template_content: Optional[pulumi.Input[pulumi.InputType['TemplateTemplateContentArgs']]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ses template.

        ## Example Usage

        ### Create a ses html template

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ses.Template("example",
            template_content=tencentcloud.ses.TemplateTemplateContentArgs(
                html=\"\"\"<!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>mail title</title>
        </head>
        <body>
        <div class="container">
          <h1>Welcome to our service! </h1>
          <p>Dear user,</p>
          <p>Thank you for using Tencent Cloud:</p>
          <p><a href="https://cloud.tencent.com/document/product/1653">https://cloud.tencent.com/document/product/1653</a></p>
          <p>If you did not request this email, please ignore it. </p>
          <p><strong>from the iac team</strong></p>
        </div>
        </body>
        </html>

        \"\"\",
            ),
            template_name="tf_example_ses_temp")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ses template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ses/template:Template example template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TemplateTemplateContentArgs']] template_content: Sms Template Content.
        :param pulumi.Input[str] template_name: smsTemplateName, which must be required.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ses template.

        ## Example Usage

        ### Create a ses html template

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ses.Template("example",
            template_content=tencentcloud.ses.TemplateTemplateContentArgs(
                html=\"\"\"<!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>mail title</title>
        </head>
        <body>
        <div class="container">
          <h1>Welcome to our service! </h1>
          <p>Dear user,</p>
          <p>Thank you for using Tencent Cloud:</p>
          <p><a href="https://cloud.tencent.com/document/product/1653">https://cloud.tencent.com/document/product/1653</a></p>
          <p>If you did not request this email, please ignore it. </p>
          <p><strong>from the iac team</strong></p>
        </div>
        </body>
        </html>

        \"\"\",
            ),
            template_name="tf_example_ses_temp")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ses template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ses/template:Template example template_id
        ```

        :param str resource_name: The name of the resource.
        :param TemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 template_content: Optional[pulumi.Input[pulumi.InputType['TemplateTemplateContentArgs']]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateArgs.__new__(TemplateArgs)

            if template_content is None and not opts.urn:
                raise TypeError("Missing required property 'template_content'")
            __props__.__dict__["template_content"] = template_content
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
        super(Template, __self__).__init__(
            'tencentcloud:Ses/template:Template',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            template_content: Optional[pulumi.Input[pulumi.InputType['TemplateTemplateContentArgs']]] = None,
            template_name: Optional[pulumi.Input[str]] = None) -> 'Template':
        """
        Get an existing Template resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TemplateTemplateContentArgs']] template_content: Sms Template Content.
        :param pulumi.Input[str] template_name: smsTemplateName, which must be required.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TemplateState.__new__(_TemplateState)

        __props__.__dict__["template_content"] = template_content
        __props__.__dict__["template_name"] = template_name
        return Template(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="templateContent")
    def template_content(self) -> pulumi.Output['outputs.TemplateTemplateContent']:
        """
        Sms Template Content.
        """
        return pulumi.get(self, "template_content")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        smsTemplateName, which must be required.
        """
        return pulumi.get(self, "template_name")

