# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSendTasksResult',
    'AwaitableGetSendTasksResult',
    'get_send_tasks',
    'get_send_tasks_output',
]

@pulumi.output_type
class GetSendTasksResult:
    """
    A collection of values returned by getSendTasks.
    """
    def __init__(__self__, datas=None, id=None, receiver_id=None, result_output_file=None, status=None, task_type=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if receiver_id and not isinstance(receiver_id, int):
            raise TypeError("Expected argument 'receiver_id' to be a int")
        pulumi.set(__self__, "receiver_id", receiver_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if status and not isinstance(status, int):
            raise TypeError("Expected argument 'status' to be a int")
        pulumi.set(__self__, "status", status)
        if task_type and not isinstance(task_type, int):
            raise TypeError("Expected argument 'task_type' to be a int")
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetSendTasksDataResult']:
        """
        Data record.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="receiverId")
    def receiver_id(self) -> Optional[int]:
        """
        Recipient group ID.
        """
        return pulumi.get(self, "receiver_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[int]:
        """
        Task type. `1`: immediate; `2`: scheduled; `3`: recurring.
        """
        return pulumi.get(self, "task_type")


class AwaitableGetSendTasksResult(GetSendTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSendTasksResult(
            datas=self.datas,
            id=self.id,
            receiver_id=self.receiver_id,
            result_output_file=self.result_output_file,
            status=self.status,
            task_type=self.task_type)


def get_send_tasks(receiver_id: Optional[int] = None,
                   result_output_file: Optional[str] = None,
                   status: Optional[int] = None,
                   task_type: Optional[int] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSendTasksResult:
    """
    Use this data source to query detailed information of ses send_tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    send_tasks = tencentcloud.Ses.get_send_tasks(receiver_id=1063742,
        status=10,
        task_type=1)
    ```
    <!--End PulumiCodeChooser -->


    :param int receiver_id: Recipient group ID.
    :param str result_output_file: Used to save results.
    :param int status: Task status. `1`: to start; `5`: sending; `6`: sending suspended today; `7`: sending error; `10`: sent. To query tasks in all states, do not pass in this parameter.
    :param int task_type: Task type. `1`: immediate; `2`: scheduled; `3`: recurring. To query tasks of all types, do not pass in this parameter.
    """
    __args__ = dict()
    __args__['receiverId'] = receiver_id
    __args__['resultOutputFile'] = result_output_file
    __args__['status'] = status
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ses/getSendTasks:getSendTasks', __args__, opts=opts, typ=GetSendTasksResult).value

    return AwaitableGetSendTasksResult(
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        receiver_id=pulumi.get(__ret__, 'receiver_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        status=pulumi.get(__ret__, 'status'),
        task_type=pulumi.get(__ret__, 'task_type'))


@_utilities.lift_output_func(get_send_tasks)
def get_send_tasks_output(receiver_id: Optional[pulumi.Input[Optional[int]]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          status: Optional[pulumi.Input[Optional[int]]] = None,
                          task_type: Optional[pulumi.Input[Optional[int]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSendTasksResult]:
    """
    Use this data source to query detailed information of ses send_tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    send_tasks = tencentcloud.Ses.get_send_tasks(receiver_id=1063742,
        status=10,
        task_type=1)
    ```
    <!--End PulumiCodeChooser -->


    :param int receiver_id: Recipient group ID.
    :param str result_output_file: Used to save results.
    :param int status: Task status. `1`: to start; `5`: sending; `6`: sending suspended today; `7`: sending error; `10`: sent. To query tasks in all states, do not pass in this parameter.
    :param int task_type: Task type. `1`: immediate; `2`: scheduled; `3`: recurring. To query tasks of all types, do not pass in this parameter.
    """
    ...
