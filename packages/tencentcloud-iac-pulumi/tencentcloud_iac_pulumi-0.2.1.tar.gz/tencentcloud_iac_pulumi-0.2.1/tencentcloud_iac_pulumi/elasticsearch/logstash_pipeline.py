# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogstashPipelineArgs', 'LogstashPipeline']

@pulumi.input_type
class LogstashPipelineArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 op_type: pulumi.Input[int],
                 pipeline: pulumi.Input['LogstashPipelinePipelineArgs']):
        """
        The set of arguments for constructing a LogstashPipeline resource.
        :param pulumi.Input[str] instance_id: Logstash instance id.
        :param pulumi.Input[int] op_type: Operation type. 1: save only; 2: save and deploy.
        :param pulumi.Input['LogstashPipelinePipelineArgs'] pipeline: Pipeline information.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "op_type", op_type)
        pulumi.set(__self__, "pipeline", pipeline)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Logstash instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="opType")
    def op_type(self) -> pulumi.Input[int]:
        """
        Operation type. 1: save only; 2: save and deploy.
        """
        return pulumi.get(self, "op_type")

    @op_type.setter
    def op_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "op_type", value)

    @property
    @pulumi.getter
    def pipeline(self) -> pulumi.Input['LogstashPipelinePipelineArgs']:
        """
        Pipeline information.
        """
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: pulumi.Input['LogstashPipelinePipelineArgs']):
        pulumi.set(self, "pipeline", value)


@pulumi.input_type
class _LogstashPipelineState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 op_type: Optional[pulumi.Input[int]] = None,
                 pipeline: Optional[pulumi.Input['LogstashPipelinePipelineArgs']] = None):
        """
        Input properties used for looking up and filtering LogstashPipeline resources.
        :param pulumi.Input[str] instance_id: Logstash instance id.
        :param pulumi.Input[int] op_type: Operation type. 1: save only; 2: save and deploy.
        :param pulumi.Input['LogstashPipelinePipelineArgs'] pipeline: Pipeline information.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if op_type is not None:
            pulumi.set(__self__, "op_type", op_type)
        if pipeline is not None:
            pulumi.set(__self__, "pipeline", pipeline)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Logstash instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="opType")
    def op_type(self) -> Optional[pulumi.Input[int]]:
        """
        Operation type. 1: save only; 2: save and deploy.
        """
        return pulumi.get(self, "op_type")

    @op_type.setter
    def op_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "op_type", value)

    @property
    @pulumi.getter
    def pipeline(self) -> Optional[pulumi.Input['LogstashPipelinePipelineArgs']]:
        """
        Pipeline information.
        """
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: Optional[pulumi.Input['LogstashPipelinePipelineArgs']]):
        pulumi.set(self, "pipeline", value)


class LogstashPipeline(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 op_type: Optional[pulumi.Input[int]] = None,
                 pipeline: Optional[pulumi.Input[pulumi.InputType['LogstashPipelinePipelineArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a elasticsearch logstash pipeline

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logstash_pipeline = tencentcloud.elasticsearch.LogstashPipeline("logstashPipeline",
            instance_id="ls-xxxxxx",
            op_type=2,
            pipeline=tencentcloud.elasticsearch.LogstashPipelinePipelineArgs(
                batch_delay=50,
                batch_size=125,
                config=\"\"\"input{

        }
        filter{

        }
        output{

        }

        \"\"\",
                pipeline_desc="",
                pipeline_id="logstash-pipeline-test",
                queue_check_point_writes=0,
                queue_max_bytes="",
                queue_type="memory",
                workers=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        elasticsearch logstash_pipeline can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/logstashPipeline:LogstashPipeline logstash_pipeline ${instance_id}#${pipeline_id}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Logstash instance id.
        :param pulumi.Input[int] op_type: Operation type. 1: save only; 2: save and deploy.
        :param pulumi.Input[pulumi.InputType['LogstashPipelinePipelineArgs']] pipeline: Pipeline information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogstashPipelineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a elasticsearch logstash pipeline

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logstash_pipeline = tencentcloud.elasticsearch.LogstashPipeline("logstashPipeline",
            instance_id="ls-xxxxxx",
            op_type=2,
            pipeline=tencentcloud.elasticsearch.LogstashPipelinePipelineArgs(
                batch_delay=50,
                batch_size=125,
                config=\"\"\"input{

        }
        filter{

        }
        output{

        }

        \"\"\",
                pipeline_desc="",
                pipeline_id="logstash-pipeline-test",
                queue_check_point_writes=0,
                queue_max_bytes="",
                queue_type="memory",
                workers=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        elasticsearch logstash_pipeline can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/logstashPipeline:LogstashPipeline logstash_pipeline ${instance_id}#${pipeline_id}
        ```

        :param str resource_name: The name of the resource.
        :param LogstashPipelineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogstashPipelineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 op_type: Optional[pulumi.Input[int]] = None,
                 pipeline: Optional[pulumi.Input[pulumi.InputType['LogstashPipelinePipelineArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogstashPipelineArgs.__new__(LogstashPipelineArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if op_type is None and not opts.urn:
                raise TypeError("Missing required property 'op_type'")
            __props__.__dict__["op_type"] = op_type
            if pipeline is None and not opts.urn:
                raise TypeError("Missing required property 'pipeline'")
            __props__.__dict__["pipeline"] = pipeline
        super(LogstashPipeline, __self__).__init__(
            'tencentcloud:Elasticsearch/logstashPipeline:LogstashPipeline',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            op_type: Optional[pulumi.Input[int]] = None,
            pipeline: Optional[pulumi.Input[pulumi.InputType['LogstashPipelinePipelineArgs']]] = None) -> 'LogstashPipeline':
        """
        Get an existing LogstashPipeline resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Logstash instance id.
        :param pulumi.Input[int] op_type: Operation type. 1: save only; 2: save and deploy.
        :param pulumi.Input[pulumi.InputType['LogstashPipelinePipelineArgs']] pipeline: Pipeline information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogstashPipelineState.__new__(_LogstashPipelineState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["op_type"] = op_type
        __props__.__dict__["pipeline"] = pipeline
        return LogstashPipeline(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Logstash instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="opType")
    def op_type(self) -> pulumi.Output[int]:
        """
        Operation type. 1: save only; 2: save and deploy.
        """
        return pulumi.get(self, "op_type")

    @property
    @pulumi.getter
    def pipeline(self) -> pulumi.Output['outputs.LogstashPipelinePipeline']:
        """
        Pipeline information.
        """
        return pulumi.get(self, "pipeline")

