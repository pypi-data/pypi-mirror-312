# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['IndexArgs', 'Index']

@pulumi.input_type
class IndexArgs:
    def __init__(__self__, *,
                 index_name: pulumi.Input[str],
                 index_type: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 index_meta_json: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Index resource.
        :param pulumi.Input[str] index_name: index name to create.
        :param pulumi.Input[str] index_type: type of the index to be created. auto: autonomous index. normal: indicates a common index.
        :param pulumi.Input[str] instance_id: es instance id.
        :param pulumi.Input[str] index_meta_json: Create index metadata JSON, such as mappings, settings.
        """
        pulumi.set(__self__, "index_name", index_name)
        pulumi.set(__self__, "index_type", index_type)
        pulumi.set(__self__, "instance_id", instance_id)
        if index_meta_json is not None:
            pulumi.set(__self__, "index_meta_json", index_meta_json)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        """
        index name to create.
        """
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> pulumi.Input[str]:
        """
        type of the index to be created. auto: autonomous index. normal: indicates a common index.
        """
        return pulumi.get(self, "index_type")

    @index_type.setter
    def index_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        es instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="indexMetaJson")
    def index_meta_json(self) -> Optional[pulumi.Input[str]]:
        """
        Create index metadata JSON, such as mappings, settings.
        """
        return pulumi.get(self, "index_meta_json")

    @index_meta_json.setter
    def index_meta_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_meta_json", value)


@pulumi.input_type
class _IndexState:
    def __init__(__self__, *,
                 index_meta_json: Optional[pulumi.Input[str]] = None,
                 index_name: Optional[pulumi.Input[str]] = None,
                 index_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Index resources.
        :param pulumi.Input[str] index_meta_json: Create index metadata JSON, such as mappings, settings.
        :param pulumi.Input[str] index_name: index name to create.
        :param pulumi.Input[str] index_type: type of the index to be created. auto: autonomous index. normal: indicates a common index.
        :param pulumi.Input[str] instance_id: es instance id.
        """
        if index_meta_json is not None:
            pulumi.set(__self__, "index_meta_json", index_meta_json)
        if index_name is not None:
            pulumi.set(__self__, "index_name", index_name)
        if index_type is not None:
            pulumi.set(__self__, "index_type", index_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="indexMetaJson")
    def index_meta_json(self) -> Optional[pulumi.Input[str]]:
        """
        Create index metadata JSON, such as mappings, settings.
        """
        return pulumi.get(self, "index_meta_json")

    @index_meta_json.setter
    def index_meta_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_meta_json", value)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> Optional[pulumi.Input[str]]:
        """
        index name to create.
        """
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the index to be created. auto: autonomous index. normal: indicates a common index.
        """
        return pulumi.get(self, "index_type")

    @index_type.setter
    def index_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        es instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class Index(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 index_meta_json: Optional[pulumi.Input[str]] = None,
                 index_name: Optional[pulumi.Input[str]] = None,
                 index_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a elasticsearch index

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        index = tencentcloud.elasticsearch.Index("index",
            index_meta_json="{\\"mappings\\":{},\\"settings\\":{\\"index.number_of_replicas\\":1,\\"index.number_of_shards\\":1,\\"index.refresh_interval\\":\\"30s\\"}}",
            index_name="test-es-index",
            index_type="normal",
            instance_id="es-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        elasticsearch index can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/index:Index index index_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] index_meta_json: Create index metadata JSON, such as mappings, settings.
        :param pulumi.Input[str] index_name: index name to create.
        :param pulumi.Input[str] index_type: type of the index to be created. auto: autonomous index. normal: indicates a common index.
        :param pulumi.Input[str] instance_id: es instance id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IndexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a elasticsearch index

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        index = tencentcloud.elasticsearch.Index("index",
            index_meta_json="{\\"mappings\\":{},\\"settings\\":{\\"index.number_of_replicas\\":1,\\"index.number_of_shards\\":1,\\"index.refresh_interval\\":\\"30s\\"}}",
            index_name="test-es-index",
            index_type="normal",
            instance_id="es-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        elasticsearch index can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/index:Index index index_id
        ```

        :param str resource_name: The name of the resource.
        :param IndexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IndexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 index_meta_json: Optional[pulumi.Input[str]] = None,
                 index_name: Optional[pulumi.Input[str]] = None,
                 index_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IndexArgs.__new__(IndexArgs)

            __props__.__dict__["index_meta_json"] = index_meta_json
            if index_name is None and not opts.urn:
                raise TypeError("Missing required property 'index_name'")
            __props__.__dict__["index_name"] = index_name
            if index_type is None and not opts.urn:
                raise TypeError("Missing required property 'index_type'")
            __props__.__dict__["index_type"] = index_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
        super(Index, __self__).__init__(
            'tencentcloud:Elasticsearch/index:Index',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            index_meta_json: Optional[pulumi.Input[str]] = None,
            index_name: Optional[pulumi.Input[str]] = None,
            index_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'Index':
        """
        Get an existing Index resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] index_meta_json: Create index metadata JSON, such as mappings, settings.
        :param pulumi.Input[str] index_name: index name to create.
        :param pulumi.Input[str] index_type: type of the index to be created. auto: autonomous index. normal: indicates a common index.
        :param pulumi.Input[str] instance_id: es instance id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IndexState.__new__(_IndexState)

        __props__.__dict__["index_meta_json"] = index_meta_json
        __props__.__dict__["index_name"] = index_name
        __props__.__dict__["index_type"] = index_type
        __props__.__dict__["instance_id"] = instance_id
        return Index(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="indexMetaJson")
    def index_meta_json(self) -> pulumi.Output[Optional[str]]:
        """
        Create index metadata JSON, such as mappings, settings.
        """
        return pulumi.get(self, "index_meta_json")

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Output[str]:
        """
        index name to create.
        """
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="indexType")
    def index_type(self) -> pulumi.Output[str]:
        """
        type of the index to be created. auto: autonomous index. normal: indicates a common index.
        """
        return pulumi.get(self, "index_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        es instance id.
        """
        return pulumi.get(self, "instance_id")

