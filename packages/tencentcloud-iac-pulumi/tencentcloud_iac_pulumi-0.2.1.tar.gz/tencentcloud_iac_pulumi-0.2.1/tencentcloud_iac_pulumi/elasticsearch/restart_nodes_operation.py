# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RestartNodesOperationArgs', 'RestartNodesOperation']

@pulumi.input_type
class RestartNodesOperationArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 node_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 is_offline: Optional[pulumi.Input[bool]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RestartNodesOperation resource.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_names: List of node names.
        :param pulumi.Input[bool] force_restart: Whether to force a restart.
        :param pulumi.Input[bool] is_offline: Node status, used in blue-green mode; off-line node blue-green is risky.
        :param pulumi.Input[str] restart_mode: Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "node_names", node_names)
        if force_restart is not None:
            pulumi.set(__self__, "force_restart", force_restart)
        if is_offline is not None:
            pulumi.set(__self__, "is_offline", is_offline)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="nodeNames")
    def node_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of node names.
        """
        return pulumi.get(self, "node_names")

    @node_names.setter
    def node_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "node_names", value)

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force a restart.
        """
        return pulumi.get(self, "force_restart")

    @force_restart.setter
    def force_restart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_restart", value)

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> Optional[pulumi.Input[bool]]:
        """
        Node status, used in blue-green mode; off-line node blue-green is risky.
        """
        return pulumi.get(self, "is_offline")

    @is_offline.setter
    def is_offline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_offline", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
        """
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)


@pulumi.input_type
class _RestartNodesOperationState:
    def __init__(__self__, *,
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_offline: Optional[pulumi.Input[bool]] = None,
                 node_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RestartNodesOperation resources.
        :param pulumi.Input[bool] force_restart: Whether to force a restart.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[bool] is_offline: Node status, used in blue-green mode; off-line node blue-green is risky.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_names: List of node names.
        :param pulumi.Input[str] restart_mode: Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
        """
        if force_restart is not None:
            pulumi.set(__self__, "force_restart", force_restart)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_offline is not None:
            pulumi.set(__self__, "is_offline", is_offline)
        if node_names is not None:
            pulumi.set(__self__, "node_names", node_names)
        if restart_mode is not None:
            pulumi.set(__self__, "restart_mode", restart_mode)

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force a restart.
        """
        return pulumi.get(self, "force_restart")

    @force_restart.setter
    def force_restart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_restart", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> Optional[pulumi.Input[bool]]:
        """
        Node status, used in blue-green mode; off-line node blue-green is risky.
        """
        return pulumi.get(self, "is_offline")

    @is_offline.setter
    def is_offline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_offline", value)

    @property
    @pulumi.getter(name="nodeNames")
    def node_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of node names.
        """
        return pulumi.get(self, "node_names")

    @node_names.setter
    def node_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "node_names", value)

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
        """
        return pulumi.get(self, "restart_mode")

    @restart_mode.setter
    def restart_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_mode", value)


class RestartNodesOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_offline: Optional[pulumi.Input[bool]] = None,
                 node_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to restart elasticsearch nodes

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        restart_nodes_operation = tencentcloud.elasticsearch.RestartNodesOperation("restartNodesOperation",
            instance_id="es-xxxxxx",
            node_names=["1648026612002990732"])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_restart: Whether to force a restart.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[bool] is_offline: Node status, used in blue-green mode; off-line node blue-green is risky.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_names: List of node names.
        :param pulumi.Input[str] restart_mode: Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestartNodesOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to restart elasticsearch nodes

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        restart_nodes_operation = tencentcloud.elasticsearch.RestartNodesOperation("restartNodesOperation",
            instance_id="es-xxxxxx",
            node_names=["1648026612002990732"])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param RestartNodesOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestartNodesOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_offline: Optional[pulumi.Input[bool]] = None,
                 node_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 restart_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestartNodesOperationArgs.__new__(RestartNodesOperationArgs)

            __props__.__dict__["force_restart"] = force_restart
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_offline"] = is_offline
            if node_names is None and not opts.urn:
                raise TypeError("Missing required property 'node_names'")
            __props__.__dict__["node_names"] = node_names
            __props__.__dict__["restart_mode"] = restart_mode
        super(RestartNodesOperation, __self__).__init__(
            'tencentcloud:Elasticsearch/restartNodesOperation:RestartNodesOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            force_restart: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            is_offline: Optional[pulumi.Input[bool]] = None,
            node_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            restart_mode: Optional[pulumi.Input[str]] = None) -> 'RestartNodesOperation':
        """
        Get an existing RestartNodesOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_restart: Whether to force a restart.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[bool] is_offline: Node status, used in blue-green mode; off-line node blue-green is risky.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] node_names: List of node names.
        :param pulumi.Input[str] restart_mode: Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestartNodesOperationState.__new__(_RestartNodesOperationState)

        __props__.__dict__["force_restart"] = force_restart
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_offline"] = is_offline
        __props__.__dict__["node_names"] = node_names
        __props__.__dict__["restart_mode"] = restart_mode
        return RestartNodesOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to force a restart.
        """
        return pulumi.get(self, "force_restart")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isOffline")
    def is_offline(self) -> pulumi.Output[Optional[bool]]:
        """
        Node status, used in blue-green mode; off-line node blue-green is risky.
        """
        return pulumi.get(self, "is_offline")

    @property
    @pulumi.getter(name="nodeNames")
    def node_names(self) -> pulumi.Output[Sequence[str]]:
        """
        List of node names.
        """
        return pulumi.get(self, "node_names")

    @property
    @pulumi.getter(name="restartMode")
    def restart_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Optional restart mode in-place,blue-green, which means restart and blue-green restart, respectively. The default is in-place.
        """
        return pulumi.get(self, "restart_mode")

