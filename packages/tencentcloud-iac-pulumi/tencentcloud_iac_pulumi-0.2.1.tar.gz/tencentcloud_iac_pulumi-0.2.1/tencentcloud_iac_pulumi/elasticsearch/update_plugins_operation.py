# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UpdatePluginsOperationArgs', 'UpdatePluginsOperation']

@pulumi.input_type
class UpdatePluginsOperationArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 force_update: Optional[pulumi.Input[bool]] = None,
                 install_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 plugin_type: Optional[pulumi.Input[int]] = None,
                 remove_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a UpdatePluginsOperation resource.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[bool] force_restart: Whether to force a restart. Default is false.
        :param pulumi.Input[bool] force_update: Whether to reinstall, default value false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] install_plugin_lists: List of plugins that need to be installed.
        :param pulumi.Input[int] plugin_type: Plugin type. 0: system plugin.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove_plugin_lists: List of plugins that need to be uninstalled.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if force_restart is not None:
            pulumi.set(__self__, "force_restart", force_restart)
        if force_update is not None:
            pulumi.set(__self__, "force_update", force_update)
        if install_plugin_lists is not None:
            pulumi.set(__self__, "install_plugin_lists", install_plugin_lists)
        if plugin_type is not None:
            pulumi.set(__self__, "plugin_type", plugin_type)
        if remove_plugin_lists is not None:
            pulumi.set(__self__, "remove_plugin_lists", remove_plugin_lists)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force a restart. Default is false.
        """
        return pulumi.get(self, "force_restart")

    @force_restart.setter
    def force_restart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_restart", value)

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to reinstall, default value false.
        """
        return pulumi.get(self, "force_update")

    @force_update.setter
    def force_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_update", value)

    @property
    @pulumi.getter(name="installPluginLists")
    def install_plugin_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of plugins that need to be installed.
        """
        return pulumi.get(self, "install_plugin_lists")

    @install_plugin_lists.setter
    def install_plugin_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "install_plugin_lists", value)

    @property
    @pulumi.getter(name="pluginType")
    def plugin_type(self) -> Optional[pulumi.Input[int]]:
        """
        Plugin type. 0: system plugin.
        """
        return pulumi.get(self, "plugin_type")

    @plugin_type.setter
    def plugin_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "plugin_type", value)

    @property
    @pulumi.getter(name="removePluginLists")
    def remove_plugin_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of plugins that need to be uninstalled.
        """
        return pulumi.get(self, "remove_plugin_lists")

    @remove_plugin_lists.setter
    def remove_plugin_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove_plugin_lists", value)


@pulumi.input_type
class _UpdatePluginsOperationState:
    def __init__(__self__, *,
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 force_update: Optional[pulumi.Input[bool]] = None,
                 install_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 plugin_type: Optional[pulumi.Input[int]] = None,
                 remove_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering UpdatePluginsOperation resources.
        :param pulumi.Input[bool] force_restart: Whether to force a restart. Default is false.
        :param pulumi.Input[bool] force_update: Whether to reinstall, default value false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] install_plugin_lists: List of plugins that need to be installed.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[int] plugin_type: Plugin type. 0: system plugin.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove_plugin_lists: List of plugins that need to be uninstalled.
        """
        if force_restart is not None:
            pulumi.set(__self__, "force_restart", force_restart)
        if force_update is not None:
            pulumi.set(__self__, "force_update", force_update)
        if install_plugin_lists is not None:
            pulumi.set(__self__, "install_plugin_lists", install_plugin_lists)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if plugin_type is not None:
            pulumi.set(__self__, "plugin_type", plugin_type)
        if remove_plugin_lists is not None:
            pulumi.set(__self__, "remove_plugin_lists", remove_plugin_lists)

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force a restart. Default is false.
        """
        return pulumi.get(self, "force_restart")

    @force_restart.setter
    def force_restart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_restart", value)

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to reinstall, default value false.
        """
        return pulumi.get(self, "force_update")

    @force_update.setter
    def force_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_update", value)

    @property
    @pulumi.getter(name="installPluginLists")
    def install_plugin_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of plugins that need to be installed.
        """
        return pulumi.get(self, "install_plugin_lists")

    @install_plugin_lists.setter
    def install_plugin_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "install_plugin_lists", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="pluginType")
    def plugin_type(self) -> Optional[pulumi.Input[int]]:
        """
        Plugin type. 0: system plugin.
        """
        return pulumi.get(self, "plugin_type")

    @plugin_type.setter
    def plugin_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "plugin_type", value)

    @property
    @pulumi.getter(name="removePluginLists")
    def remove_plugin_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of plugins that need to be uninstalled.
        """
        return pulumi.get(self, "remove_plugin_lists")

    @remove_plugin_lists.setter
    def remove_plugin_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove_plugin_lists", value)


class UpdatePluginsOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 force_update: Optional[pulumi.Input[bool]] = None,
                 install_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 plugin_type: Optional[pulumi.Input[int]] = None,
                 remove_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to update elasticsearch plugins

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        update_plugins_operation = tencentcloud.elasticsearch.UpdatePluginsOperation("updatePluginsOperation",
            force_restart=False,
            force_update=True,
            install_plugin_lists=["analysis-pinyin"],
            instance_id="es-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_restart: Whether to force a restart. Default is false.
        :param pulumi.Input[bool] force_update: Whether to reinstall, default value false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] install_plugin_lists: List of plugins that need to be installed.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[int] plugin_type: Plugin type. 0: system plugin.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove_plugin_lists: List of plugins that need to be uninstalled.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpdatePluginsOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to update elasticsearch plugins

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        update_plugins_operation = tencentcloud.elasticsearch.UpdatePluginsOperation("updatePluginsOperation",
            force_restart=False,
            force_update=True,
            install_plugin_lists=["analysis-pinyin"],
            instance_id="es-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param UpdatePluginsOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpdatePluginsOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_restart: Optional[pulumi.Input[bool]] = None,
                 force_update: Optional[pulumi.Input[bool]] = None,
                 install_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 plugin_type: Optional[pulumi.Input[int]] = None,
                 remove_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpdatePluginsOperationArgs.__new__(UpdatePluginsOperationArgs)

            __props__.__dict__["force_restart"] = force_restart
            __props__.__dict__["force_update"] = force_update
            __props__.__dict__["install_plugin_lists"] = install_plugin_lists
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["plugin_type"] = plugin_type
            __props__.__dict__["remove_plugin_lists"] = remove_plugin_lists
        super(UpdatePluginsOperation, __self__).__init__(
            'tencentcloud:Elasticsearch/updatePluginsOperation:UpdatePluginsOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            force_restart: Optional[pulumi.Input[bool]] = None,
            force_update: Optional[pulumi.Input[bool]] = None,
            install_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            plugin_type: Optional[pulumi.Input[int]] = None,
            remove_plugin_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'UpdatePluginsOperation':
        """
        Get an existing UpdatePluginsOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_restart: Whether to force a restart. Default is false.
        :param pulumi.Input[bool] force_update: Whether to reinstall, default value false.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] install_plugin_lists: List of plugins that need to be installed.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[int] plugin_type: Plugin type. 0: system plugin.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove_plugin_lists: List of plugins that need to be uninstalled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UpdatePluginsOperationState.__new__(_UpdatePluginsOperationState)

        __props__.__dict__["force_restart"] = force_restart
        __props__.__dict__["force_update"] = force_update
        __props__.__dict__["install_plugin_lists"] = install_plugin_lists
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["plugin_type"] = plugin_type
        __props__.__dict__["remove_plugin_lists"] = remove_plugin_lists
        return UpdatePluginsOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forceRestart")
    def force_restart(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to force a restart. Default is false.
        """
        return pulumi.get(self, "force_restart")

    @property
    @pulumi.getter(name="forceUpdate")
    def force_update(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to reinstall, default value false.
        """
        return pulumi.get(self, "force_update")

    @property
    @pulumi.getter(name="installPluginLists")
    def install_plugin_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of plugins that need to be installed.
        """
        return pulumi.get(self, "install_plugin_lists")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="pluginType")
    def plugin_type(self) -> pulumi.Output[Optional[int]]:
        """
        Plugin type. 0: system plugin.
        """
        return pulumi.get(self, "plugin_type")

    @property
    @pulumi.getter(name="removePluginLists")
    def remove_plugin_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of plugins that need to be uninstalled.
        """
        return pulumi.get(self, "remove_plugin_lists")

