# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LogstashArgs', 'Logstash']

@pulumi.input_type
class LogstashArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 logstash_version: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 operation_duration: Optional[pulumi.Input['LogstashOperationDurationArgs']] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Logstash resource.
        :param pulumi.Input[str] instance_name: Instance name (compose of 1-50 letter, number, - or _).
        :param pulumi.Input[str] logstash_version: Instance version(6.8.13, 7.10.1).
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[str] vpc_id: VPC id.
        :param pulumi.Input[str] zone: Available zone.
        :param pulumi.Input[int] auto_voucher: whether to use voucher auto, 1 when use, else 0.
        :param pulumi.Input[int] charge_period: Period when charged by months or years(unit depends on TimeUnit).
        :param pulumi.Input[str] charge_type: Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] disk_size: node disk size (unit GB).
        :param pulumi.Input[str] disk_type: Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        :param pulumi.Input[str] license_type: License type. oss: open source version; xpack:xpack version; default: xpack.
        :param pulumi.Input[int] node_num: Node num(range 2-50).
        :param pulumi.Input[str] node_type: Node type. Valid values:
               - LOGSTASH.S1.SMALL2: 1 core 2G;
               - LOGSTASH.S1.MEDIUM4:2 core 4G;
               - LOGSTASH.S1.MEDIUM8:2 core 8G;
               - LOGSTASH.S1.LARGE16:4 core 16G;
               - LOGSTASH.S1.2XLARGE32:8 core 32G;
               - LOGSTASH.S1.4XLARGE32:16 core 32G;
               - LOGSTASH.S1.4XLARGE64:16 core 64G.
        :param pulumi.Input['LogstashOperationDurationArgs'] operation_duration: operation time by tencent clound.
        :param pulumi.Input[str] renew_flag: Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] time_unit: charge time unit(set when ChargeType is PREPAID, default value: ms).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher list(only can use one voucher by now).
        """
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "logstash_version", logstash_version)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if charge_period is not None:
            pulumi.set(__self__, "charge_period", charge_period)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if operation_duration is not None:
            pulumi.set(__self__, "operation_duration", operation_duration)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Instance name (compose of 1-50 letter, number, - or _).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="logstashVersion")
    def logstash_version(self) -> pulumi.Input[str]:
        """
        Instance version(6.8.13, 7.10.1).
        """
        return pulumi.get(self, "logstash_version")

    @logstash_version.setter
    def logstash_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "logstash_version", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        VPC id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Available zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        whether to use voucher auto, 1 when use, else 0.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="chargePeriod")
    def charge_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period when charged by months or years(unit depends on TimeUnit).
        """
        return pulumi.get(self, "charge_period")

    @charge_period.setter
    def charge_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "charge_period", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        node disk size (unit GB).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        License type. oss: open source version; xpack:xpack version; default: xpack.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[int]]:
        """
        Node num(range 2-50).
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_num", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node type. Valid values:
        - LOGSTASH.S1.SMALL2: 1 core 2G;
        - LOGSTASH.S1.MEDIUM4:2 core 4G;
        - LOGSTASH.S1.MEDIUM8:2 core 8G;
        - LOGSTASH.S1.LARGE16:4 core 16G;
        - LOGSTASH.S1.2XLARGE32:8 core 32G;
        - LOGSTASH.S1.4XLARGE32:16 core 32G;
        - LOGSTASH.S1.4XLARGE64:16 core 64G.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="operationDuration")
    def operation_duration(self) -> Optional[pulumi.Input['LogstashOperationDurationArgs']]:
        """
        operation time by tencent clound.
        """
        return pulumi.get(self, "operation_duration")

    @operation_duration.setter
    def operation_duration(self, value: Optional[pulumi.Input['LogstashOperationDurationArgs']]):
        pulumi.set(self, "operation_duration", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        charge time unit(set when ChargeType is PREPAID, default value: ms).
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Voucher list(only can use one voucher by now).
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)


@pulumi.input_type
class _LogstashState:
    def __init__(__self__, *,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logstash_version: Optional[pulumi.Input[str]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 operation_duration: Optional[pulumi.Input['LogstashOperationDurationArgs']] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Logstash resources.
        :param pulumi.Input[int] auto_voucher: whether to use voucher auto, 1 when use, else 0.
        :param pulumi.Input[int] charge_period: Period when charged by months or years(unit depends on TimeUnit).
        :param pulumi.Input[str] charge_type: Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] disk_size: node disk size (unit GB).
        :param pulumi.Input[str] disk_type: Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        :param pulumi.Input[str] instance_name: Instance name (compose of 1-50 letter, number, - or _).
        :param pulumi.Input[str] license_type: License type. oss: open source version; xpack:xpack version; default: xpack.
        :param pulumi.Input[str] logstash_version: Instance version(6.8.13, 7.10.1).
        :param pulumi.Input[int] node_num: Node num(range 2-50).
        :param pulumi.Input[str] node_type: Node type. Valid values:
               - LOGSTASH.S1.SMALL2: 1 core 2G;
               - LOGSTASH.S1.MEDIUM4:2 core 4G;
               - LOGSTASH.S1.MEDIUM8:2 core 8G;
               - LOGSTASH.S1.LARGE16:4 core 16G;
               - LOGSTASH.S1.2XLARGE32:8 core 32G;
               - LOGSTASH.S1.4XLARGE32:16 core 32G;
               - LOGSTASH.S1.4XLARGE64:16 core 64G.
        :param pulumi.Input['LogstashOperationDurationArgs'] operation_duration: operation time by tencent clound.
        :param pulumi.Input[str] renew_flag: Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] time_unit: charge time unit(set when ChargeType is PREPAID, default value: ms).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher list(only can use one voucher by now).
        :param pulumi.Input[str] vpc_id: VPC id.
        :param pulumi.Input[str] zone: Available zone.
        """
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if charge_period is not None:
            pulumi.set(__self__, "charge_period", charge_period)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if logstash_version is not None:
            pulumi.set(__self__, "logstash_version", logstash_version)
        if node_num is not None:
            pulumi.set(__self__, "node_num", node_num)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if operation_duration is not None:
            pulumi.set(__self__, "operation_duration", operation_duration)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        whether to use voucher auto, 1 when use, else 0.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="chargePeriod")
    def charge_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period when charged by months or years(unit depends on TimeUnit).
        """
        return pulumi.get(self, "charge_period")

    @charge_period.setter
    def charge_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "charge_period", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        node disk size (unit GB).
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name (compose of 1-50 letter, number, - or _).
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        License type. oss: open source version; xpack:xpack version; default: xpack.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="logstashVersion")
    def logstash_version(self) -> Optional[pulumi.Input[str]]:
        """
        Instance version(6.8.13, 7.10.1).
        """
        return pulumi.get(self, "logstash_version")

    @logstash_version.setter
    def logstash_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logstash_version", value)

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> Optional[pulumi.Input[int]]:
        """
        Node num(range 2-50).
        """
        return pulumi.get(self, "node_num")

    @node_num.setter
    def node_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_num", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node type. Valid values:
        - LOGSTASH.S1.SMALL2: 1 core 2G;
        - LOGSTASH.S1.MEDIUM4:2 core 4G;
        - LOGSTASH.S1.MEDIUM8:2 core 8G;
        - LOGSTASH.S1.LARGE16:4 core 16G;
        - LOGSTASH.S1.2XLARGE32:8 core 32G;
        - LOGSTASH.S1.4XLARGE32:16 core 32G;
        - LOGSTASH.S1.4XLARGE64:16 core 64G.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="operationDuration")
    def operation_duration(self) -> Optional[pulumi.Input['LogstashOperationDurationArgs']]:
        """
        operation time by tencent clound.
        """
        return pulumi.get(self, "operation_duration")

    @operation_duration.setter
    def operation_duration(self, value: Optional[pulumi.Input['LogstashOperationDurationArgs']]):
        pulumi.set(self, "operation_duration", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        charge time unit(set when ChargeType is PREPAID, default value: ms).
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Voucher list(only can use one voucher by now).
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Available zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Logstash(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logstash_version: Optional[pulumi.Input[str]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 operation_duration: Optional[pulumi.Input[pulumi.InputType['LogstashOperationDurationArgs']]] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a elasticsearch logstash

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logstash = tencentcloud.elasticsearch.Logstash("logstash",
            charge_type="POSTPAID_BY_HOUR",
            disk_size=20,
            disk_type="CLOUD_SSD",
            instance_name="logstash-test",
            license_type="xpack",
            logstash_version="7.14.2",
            node_num=1,
            node_type="LOGSTASH.SA2.MEDIUM4",
            operation_duration=tencentcloud.elasticsearch.LogstashOperationDurationArgs(
                periods=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                ],
                time_end="06:00",
                time_start="02:00",
                time_zone="UTC+8",
            ),
            subnet_id="subnet-4o0zd840",
            tags={
                "tagKey": "tagValue",
            },
            vpc_id="vpc-4owdpnwr",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        elasticsearch logstash can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/logstash:Logstash logstash logstash_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_voucher: whether to use voucher auto, 1 when use, else 0.
        :param pulumi.Input[int] charge_period: Period when charged by months or years(unit depends on TimeUnit).
        :param pulumi.Input[str] charge_type: Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] disk_size: node disk size (unit GB).
        :param pulumi.Input[str] disk_type: Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        :param pulumi.Input[str] instance_name: Instance name (compose of 1-50 letter, number, - or _).
        :param pulumi.Input[str] license_type: License type. oss: open source version; xpack:xpack version; default: xpack.
        :param pulumi.Input[str] logstash_version: Instance version(6.8.13, 7.10.1).
        :param pulumi.Input[int] node_num: Node num(range 2-50).
        :param pulumi.Input[str] node_type: Node type. Valid values:
               - LOGSTASH.S1.SMALL2: 1 core 2G;
               - LOGSTASH.S1.MEDIUM4:2 core 4G;
               - LOGSTASH.S1.MEDIUM8:2 core 8G;
               - LOGSTASH.S1.LARGE16:4 core 16G;
               - LOGSTASH.S1.2XLARGE32:8 core 32G;
               - LOGSTASH.S1.4XLARGE32:16 core 32G;
               - LOGSTASH.S1.4XLARGE64:16 core 64G.
        :param pulumi.Input[pulumi.InputType['LogstashOperationDurationArgs']] operation_duration: operation time by tencent clound.
        :param pulumi.Input[str] renew_flag: Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] time_unit: charge time unit(set when ChargeType is PREPAID, default value: ms).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher list(only can use one voucher by now).
        :param pulumi.Input[str] vpc_id: VPC id.
        :param pulumi.Input[str] zone: Available zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LogstashArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a elasticsearch logstash

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logstash = tencentcloud.elasticsearch.Logstash("logstash",
            charge_type="POSTPAID_BY_HOUR",
            disk_size=20,
            disk_type="CLOUD_SSD",
            instance_name="logstash-test",
            license_type="xpack",
            logstash_version="7.14.2",
            node_num=1,
            node_type="LOGSTASH.SA2.MEDIUM4",
            operation_duration=tencentcloud.elasticsearch.LogstashOperationDurationArgs(
                periods=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    0,
                ],
                time_end="06:00",
                time_start="02:00",
                time_zone="UTC+8",
            ),
            subnet_id="subnet-4o0zd840",
            tags={
                "tagKey": "tagValue",
            },
            vpc_id="vpc-4owdpnwr",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        elasticsearch logstash can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Elasticsearch/logstash:Logstash logstash logstash_id
        ```

        :param str resource_name: The name of the resource.
        :param LogstashArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LogstashArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 charge_period: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 logstash_version: Optional[pulumi.Input[str]] = None,
                 node_num: Optional[pulumi.Input[int]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 operation_duration: Optional[pulumi.Input[pulumi.InputType['LogstashOperationDurationArgs']]] = None,
                 renew_flag: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LogstashArgs.__new__(LogstashArgs)

            __props__.__dict__["auto_voucher"] = auto_voucher
            __props__.__dict__["charge_period"] = charge_period
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["disk_type"] = disk_type
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["license_type"] = license_type
            if logstash_version is None and not opts.urn:
                raise TypeError("Missing required property 'logstash_version'")
            __props__.__dict__["logstash_version"] = logstash_version
            __props__.__dict__["node_num"] = node_num
            __props__.__dict__["node_type"] = node_type
            __props__.__dict__["operation_duration"] = operation_duration
            __props__.__dict__["renew_flag"] = renew_flag
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_unit"] = time_unit
            __props__.__dict__["voucher_ids"] = voucher_ids
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        super(Logstash, __self__).__init__(
            'tencentcloud:Elasticsearch/logstash:Logstash',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_voucher: Optional[pulumi.Input[int]] = None,
            charge_period: Optional[pulumi.Input[int]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            disk_size: Optional[pulumi.Input[int]] = None,
            disk_type: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            license_type: Optional[pulumi.Input[str]] = None,
            logstash_version: Optional[pulumi.Input[str]] = None,
            node_num: Optional[pulumi.Input[int]] = None,
            node_type: Optional[pulumi.Input[str]] = None,
            operation_duration: Optional[pulumi.Input[pulumi.InputType['LogstashOperationDurationArgs']]] = None,
            renew_flag: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_unit: Optional[pulumi.Input[str]] = None,
            voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Logstash':
        """
        Get an existing Logstash resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_voucher: whether to use voucher auto, 1 when use, else 0.
        :param pulumi.Input[int] charge_period: Period when charged by months or years(unit depends on TimeUnit).
        :param pulumi.Input[str] charge_type: Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] disk_size: node disk size (unit GB).
        :param pulumi.Input[str] disk_type: Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        :param pulumi.Input[str] instance_name: Instance name (compose of 1-50 letter, number, - or _).
        :param pulumi.Input[str] license_type: License type. oss: open source version; xpack:xpack version; default: xpack.
        :param pulumi.Input[str] logstash_version: Instance version(6.8.13, 7.10.1).
        :param pulumi.Input[int] node_num: Node num(range 2-50).
        :param pulumi.Input[str] node_type: Node type. Valid values:
               - LOGSTASH.S1.SMALL2: 1 core 2G;
               - LOGSTASH.S1.MEDIUM4:2 core 4G;
               - LOGSTASH.S1.MEDIUM8:2 core 8G;
               - LOGSTASH.S1.LARGE16:4 core 16G;
               - LOGSTASH.S1.2XLARGE32:8 core 32G;
               - LOGSTASH.S1.4XLARGE32:16 core 32G;
               - LOGSTASH.S1.4XLARGE64:16 core 64G.
        :param pulumi.Input[pulumi.InputType['LogstashOperationDurationArgs']] operation_duration: operation time by tencent clound.
        :param pulumi.Input[str] renew_flag: Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] time_unit: charge time unit(set when ChargeType is PREPAID, default value: ms).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher list(only can use one voucher by now).
        :param pulumi.Input[str] vpc_id: VPC id.
        :param pulumi.Input[str] zone: Available zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LogstashState.__new__(_LogstashState)

        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["charge_period"] = charge_period
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["disk_type"] = disk_type
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["license_type"] = license_type
        __props__.__dict__["logstash_version"] = logstash_version
        __props__.__dict__["node_num"] = node_num
        __props__.__dict__["node_type"] = node_type
        __props__.__dict__["operation_duration"] = operation_duration
        __props__.__dict__["renew_flag"] = renew_flag
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["time_unit"] = time_unit
        __props__.__dict__["voucher_ids"] = voucher_ids
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone"] = zone
        return Logstash(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[Optional[int]]:
        """
        whether to use voucher auto, 1 when use, else 0.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter(name="chargePeriod")
    def charge_period(self) -> pulumi.Output[Optional[int]]:
        """
        Period when charged by months or years(unit depends on TimeUnit).
        """
        return pulumi.get(self, "charge_period")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Charge type. PREPAID: charged by months or years; POSTPAID_BY_HOUR: charged by hours; default vaule: POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[Optional[int]]:
        """
        node disk size (unit GB).
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Output[Optional[str]]:
        """
        Disk type. CLOUD_SSD: SSD cloud disk; CLOUD_PREMIUM: high hard energy cloud disk; default: CLOUD_SSD.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name (compose of 1-50 letter, number, - or _).
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Output[Optional[str]]:
        """
        License type. oss: open source version; xpack:xpack version; default: xpack.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="logstashVersion")
    def logstash_version(self) -> pulumi.Output[str]:
        """
        Instance version(6.8.13, 7.10.1).
        """
        return pulumi.get(self, "logstash_version")

    @property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> pulumi.Output[Optional[int]]:
        """
        Node num(range 2-50).
        """
        return pulumi.get(self, "node_num")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> pulumi.Output[Optional[str]]:
        """
        Node type. Valid values:
        - LOGSTASH.S1.SMALL2: 1 core 2G;
        - LOGSTASH.S1.MEDIUM4:2 core 4G;
        - LOGSTASH.S1.MEDIUM8:2 core 8G;
        - LOGSTASH.S1.LARGE16:4 core 16G;
        - LOGSTASH.S1.2XLARGE32:8 core 32G;
        - LOGSTASH.S1.4XLARGE32:16 core 32G;
        - LOGSTASH.S1.4XLARGE64:16 core 64G.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="operationDuration")
    def operation_duration(self) -> pulumi.Output[Optional['outputs.LogstashOperationDuration']]:
        """
        operation time by tencent clound.
        """
        return pulumi.get(self, "operation_duration")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> pulumi.Output[Optional[str]]:
        """
        Automatic renewal flag. RENEW_FLAG_AUTO: auto renewal; RENEW_FLAG_MANUAL: do not renew automatically, users renew manually. It needs to be set when ChargeType is PREPAID. If this parameter is not passed, ordinary users will not renew automatically by default, and SVIP users will renew automatically.
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> pulumi.Output[Optional[str]]:
        """
        charge time unit(set when ChargeType is PREPAID, default value: ms).
        """
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Voucher list(only can use one voucher by now).
        """
        return pulumi.get(self, "voucher_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        VPC id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Available zone.
        """
        return pulumi.get(self, "zone")

