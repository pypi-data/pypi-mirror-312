# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetLogBackupsResult',
    'AwaitableGetLogBackupsResult',
    'get_log_backups',
    'get_log_backups_output',
]

@pulumi.output_type
class GetLogBackupsResult:
    """
    A collection of values returned by getLogBackups.
    """
    def __init__(__self__, filters=None, id=None, log_backup_sets=None, max_finish_time=None, min_finish_time=None, order_by=None, order_by_type=None, result_output_file=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_backup_sets and not isinstance(log_backup_sets, list):
            raise TypeError("Expected argument 'log_backup_sets' to be a list")
        pulumi.set(__self__, "log_backup_sets", log_backup_sets)
        if max_finish_time and not isinstance(max_finish_time, str):
            raise TypeError("Expected argument 'max_finish_time' to be a str")
        pulumi.set(__self__, "max_finish_time", max_finish_time)
        if min_finish_time and not isinstance(min_finish_time, str):
            raise TypeError("Expected argument 'min_finish_time' to be a str")
        pulumi.set(__self__, "min_finish_time", min_finish_time)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_by_type and not isinstance(order_by_type, str):
            raise TypeError("Expected argument 'order_by_type' to be a str")
        pulumi.set(__self__, "order_by_type", order_by_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetLogBackupsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logBackupSets")
    def log_backup_sets(self) -> Sequence['outputs.GetLogBackupsLogBackupSetResult']:
        """
        List of log backup details.
        """
        return pulumi.get(self, "log_backup_sets")

    @property
    @pulumi.getter(name="maxFinishTime")
    def max_finish_time(self) -> Optional[str]:
        return pulumi.get(self, "max_finish_time")

    @property
    @pulumi.getter(name="minFinishTime")
    def min_finish_time(self) -> Optional[str]:
        return pulumi.get(self, "min_finish_time")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderByType")
    def order_by_type(self) -> Optional[str]:
        return pulumi.get(self, "order_by_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetLogBackupsResult(GetLogBackupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogBackupsResult(
            filters=self.filters,
            id=self.id,
            log_backup_sets=self.log_backup_sets,
            max_finish_time=self.max_finish_time,
            min_finish_time=self.min_finish_time,
            order_by=self.order_by,
            order_by_type=self.order_by_type,
            result_output_file=self.result_output_file)


def get_log_backups(filters: Optional[Sequence[pulumi.InputType['GetLogBackupsFilterArgs']]] = None,
                    max_finish_time: Optional[str] = None,
                    min_finish_time: Optional[str] = None,
                    order_by: Optional[str] = None,
                    order_by_type: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogBackupsResult:
    """
    Use this data source to query detailed information of postgresql log_backups

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    log_backups = tencentcloud.Postgresql.get_log_backups(min_finish_time="%s",
        max_finish_time="%s",
        filters=[tencentcloud.postgresql.GetLogBackupsFilterArgs(
            name="db-instance-id",
            values=[local["pgsql_id"]],
        )],
        order_by="StartTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetLogBackupsFilterArgs']] filters: Filter instances using one or more criteria. Valid filter names:db-instance-id: Filter by instance ID (in string format).db-instance-name: Filter by instance name (in string format).db-instance-ip: Filter by instance VPC IP (in string format).
    :param str max_finish_time: Maximum end time of a backup in the format of `2018-01-01 00:00:00`. It is the current time by default.
    :param str min_finish_time: Minimum end time of a backup in the format of `2018-01-01 00:00:00`. It is 7 days ago by default.
    :param str order_by: Sorting field. Valid values: `StartTime`, `FinishTime`, `Size`.
    :param str order_by_type: Sorting order. Valid values: `asc` (ascending), `desc` (descending).
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['maxFinishTime'] = max_finish_time
    __args__['minFinishTime'] = min_finish_time
    __args__['orderBy'] = order_by
    __args__['orderByType'] = order_by_type
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Postgresql/getLogBackups:getLogBackups', __args__, opts=opts, typ=GetLogBackupsResult).value

    return AwaitableGetLogBackupsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        log_backup_sets=pulumi.get(__ret__, 'log_backup_sets'),
        max_finish_time=pulumi.get(__ret__, 'max_finish_time'),
        min_finish_time=pulumi.get(__ret__, 'min_finish_time'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_by_type=pulumi.get(__ret__, 'order_by_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_log_backups)
def get_log_backups_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetLogBackupsFilterArgs']]]]] = None,
                           max_finish_time: Optional[pulumi.Input[Optional[str]]] = None,
                           min_finish_time: Optional[pulumi.Input[Optional[str]]] = None,
                           order_by: Optional[pulumi.Input[Optional[str]]] = None,
                           order_by_type: Optional[pulumi.Input[Optional[str]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLogBackupsResult]:
    """
    Use this data source to query detailed information of postgresql log_backups

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    log_backups = tencentcloud.Postgresql.get_log_backups(min_finish_time="%s",
        max_finish_time="%s",
        filters=[tencentcloud.postgresql.GetLogBackupsFilterArgs(
            name="db-instance-id",
            values=[local["pgsql_id"]],
        )],
        order_by="StartTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetLogBackupsFilterArgs']] filters: Filter instances using one or more criteria. Valid filter names:db-instance-id: Filter by instance ID (in string format).db-instance-name: Filter by instance name (in string format).db-instance-ip: Filter by instance VPC IP (in string format).
    :param str max_finish_time: Maximum end time of a backup in the format of `2018-01-01 00:00:00`. It is the current time by default.
    :param str min_finish_time: Minimum end time of a backup in the format of `2018-01-01 00:00:00`. It is 7 days ago by default.
    :param str order_by: Sorting field. Valid values: `StartTime`, `FinishTime`, `Size`.
    :param str order_by_type: Sorting order. Valid values: `asc` (ascending), `desc` (descending).
    :param str result_output_file: Used to save results.
    """
    ...
