# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RebalanceReadonlyGroupOperationArgs', 'RebalanceReadonlyGroupOperation']

@pulumi.input_type
class RebalanceReadonlyGroupOperationArgs:
    def __init__(__self__, *,
                 read_only_group_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a RebalanceReadonlyGroupOperation resource.
        :param pulumi.Input[str] read_only_group_id: readonly Group ID.
        """
        pulumi.set(__self__, "read_only_group_id", read_only_group_id)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> pulumi.Input[str]:
        """
        readonly Group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "read_only_group_id", value)


@pulumi.input_type
class _RebalanceReadonlyGroupOperationState:
    def __init__(__self__, *,
                 read_only_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RebalanceReadonlyGroupOperation resources.
        :param pulumi.Input[str] read_only_group_id: readonly Group ID.
        """
        if read_only_group_id is not None:
            pulumi.set(__self__, "read_only_group_id", read_only_group_id)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        readonly Group ID.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_id", value)


class RebalanceReadonlyGroupOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a postgresql rebalance_readonly_group_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group_rebalance = tencentcloud.postgresql.ReadonlyGroup("groupRebalance",
            master_db_instance_id=local["pgsql_id"],
            project_id=0,
            vpc_id="vpc-86v957zb",
            subnet_id="subnet-enm92y0m",
            replay_lag_eliminate=1,
            replay_latency_eliminate=1,
            max_replay_lag=100,
            max_replay_latency=512,
            min_delay_eliminate_reserve=1)
        rebalance_readonly_group_operation = tencentcloud.postgresql.RebalanceReadonlyGroupOperation("rebalanceReadonlyGroupOperation", read_only_group_id=group_rebalance.id)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] read_only_group_id: readonly Group ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RebalanceReadonlyGroupOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a postgresql rebalance_readonly_group_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group_rebalance = tencentcloud.postgresql.ReadonlyGroup("groupRebalance",
            master_db_instance_id=local["pgsql_id"],
            project_id=0,
            vpc_id="vpc-86v957zb",
            subnet_id="subnet-enm92y0m",
            replay_lag_eliminate=1,
            replay_latency_eliminate=1,
            max_replay_lag=100,
            max_replay_latency=512,
            min_delay_eliminate_reserve=1)
        rebalance_readonly_group_operation = tencentcloud.postgresql.RebalanceReadonlyGroupOperation("rebalanceReadonlyGroupOperation", read_only_group_id=group_rebalance.id)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param RebalanceReadonlyGroupOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RebalanceReadonlyGroupOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RebalanceReadonlyGroupOperationArgs.__new__(RebalanceReadonlyGroupOperationArgs)

            if read_only_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'read_only_group_id'")
            __props__.__dict__["read_only_group_id"] = read_only_group_id
        super(RebalanceReadonlyGroupOperation, __self__).__init__(
            'tencentcloud:Postgresql/rebalanceReadonlyGroupOperation:RebalanceReadonlyGroupOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            read_only_group_id: Optional[pulumi.Input[str]] = None) -> 'RebalanceReadonlyGroupOperation':
        """
        Get an existing RebalanceReadonlyGroupOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] read_only_group_id: readonly Group ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RebalanceReadonlyGroupOperationState.__new__(_RebalanceReadonlyGroupOperationState)

        __props__.__dict__["read_only_group_id"] = read_only_group_id
        return RebalanceReadonlyGroupOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> pulumi.Output[str]:
        """
        readonly Group ID.
        """
        return pulumi.get(self, "read_only_group_id")

