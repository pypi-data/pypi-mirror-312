# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ModifyAccountRemarkOperationArgs', 'ModifyAccountRemarkOperation']

@pulumi.input_type
class ModifyAccountRemarkOperationArgs:
    def __init__(__self__, *,
                 db_instance_id: pulumi.Input[str],
                 remark: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a ModifyAccountRemarkOperation resource.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[str] remark: New remarks corresponding to user `UserName`.
        :param pulumi.Input[str] user_name: Instance username.
        """
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID in the format of postgres-4wdeb0zv.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Input[str]:
        """
        New remarks corresponding to user `UserName`.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: pulumi.Input[str]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        Instance username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class _ModifyAccountRemarkOperationState:
    def __init__(__self__, *,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ModifyAccountRemarkOperation resources.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[str] remark: New remarks corresponding to user `UserName`.
        :param pulumi.Input[str] user_name: Instance username.
        """
        if db_instance_id is not None:
            pulumi.set(__self__, "db_instance_id", db_instance_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID in the format of postgres-4wdeb0zv.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        New remarks corresponding to user `UserName`.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


class ModifyAccountRemarkOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a postgresql modify_account_remark_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        modify_account_remark_operation = tencentcloud.postgresql.ModifyAccountRemarkOperation("modifyAccountRemarkOperation",
            db_instance_id=local["pgsql_id"],
            user_name="root",
            remark="hello_world")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[str] remark: New remarks corresponding to user `UserName`.
        :param pulumi.Input[str] user_name: Instance username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModifyAccountRemarkOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a postgresql modify_account_remark_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        modify_account_remark_operation = tencentcloud.postgresql.ModifyAccountRemarkOperation("modifyAccountRemarkOperation",
            db_instance_id=local["pgsql_id"],
            user_name="root",
            remark="hello_world")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ModifyAccountRemarkOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModifyAccountRemarkOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModifyAccountRemarkOperationArgs.__new__(ModifyAccountRemarkOperationArgs)

            if db_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'db_instance_id'")
            __props__.__dict__["db_instance_id"] = db_instance_id
            if remark is None and not opts.urn:
                raise TypeError("Missing required property 'remark'")
            __props__.__dict__["remark"] = remark
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
        super(ModifyAccountRemarkOperation, __self__).__init__(
            'tencentcloud:Postgresql/modifyAccountRemarkOperation:ModifyAccountRemarkOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_instance_id: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None) -> 'ModifyAccountRemarkOperation':
        """
        Get an existing ModifyAccountRemarkOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_instance_id: Instance ID in the format of postgres-4wdeb0zv.
        :param pulumi.Input[str] remark: New remarks corresponding to user `UserName`.
        :param pulumi.Input[str] user_name: Instance username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModifyAccountRemarkOperationState.__new__(_ModifyAccountRemarkOperationState)

        __props__.__dict__["db_instance_id"] = db_instance_id
        __props__.__dict__["remark"] = remark
        __props__.__dict__["user_name"] = user_name
        return ModifyAccountRemarkOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID in the format of postgres-4wdeb0zv.
        """
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        New remarks corresponding to user `UserName`.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        Instance username.
        """
        return pulumi.get(self, "user_name")

