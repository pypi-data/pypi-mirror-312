# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SecurityGroupConfigArgs', 'SecurityGroupConfig']

@pulumi.input_type
class SecurityGroupConfigArgs:
    def __init__(__self__, *,
                 security_group_id_sets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SecurityGroupConfig resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_id_sets: Information of security groups in array.
        :param pulumi.Input[str] db_instance_id: Instance ID. Either this parameter or ReadOnlyGroupId must be passed in. If both parameters are passed in, ReadOnlyGroupId will be ignored.
        :param pulumi.Input[str] read_only_group_id: RO group ID. Either this parameter or DBInstanceId must be passed in. To query the security groups associated with the RO groups, only pass in ReadOnlyGroupId.
        """
        pulumi.set(__self__, "security_group_id_sets", security_group_id_sets)
        if db_instance_id is not None:
            pulumi.set(__self__, "db_instance_id", db_instance_id)
        if read_only_group_id is not None:
            pulumi.set(__self__, "read_only_group_id", read_only_group_id)

    @property
    @pulumi.getter(name="securityGroupIdSets")
    def security_group_id_sets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Information of security groups in array.
        """
        return pulumi.get(self, "security_group_id_sets")

    @security_group_id_sets.setter
    def security_group_id_sets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_id_sets", value)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID. Either this parameter or ReadOnlyGroupId must be passed in. If both parameters are passed in, ReadOnlyGroupId will be ignored.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        RO group ID. Either this parameter or DBInstanceId must be passed in. To query the security groups associated with the RO groups, only pass in ReadOnlyGroupId.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_id", value)


@pulumi.input_type
class _SecurityGroupConfigState:
    def __init__(__self__, *,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering SecurityGroupConfig resources.
        :param pulumi.Input[str] db_instance_id: Instance ID. Either this parameter or ReadOnlyGroupId must be passed in. If both parameters are passed in, ReadOnlyGroupId will be ignored.
        :param pulumi.Input[str] read_only_group_id: RO group ID. Either this parameter or DBInstanceId must be passed in. To query the security groups associated with the RO groups, only pass in ReadOnlyGroupId.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_id_sets: Information of security groups in array.
        """
        if db_instance_id is not None:
            pulumi.set(__self__, "db_instance_id", db_instance_id)
        if read_only_group_id is not None:
            pulumi.set(__self__, "read_only_group_id", read_only_group_id)
        if security_group_id_sets is not None:
            pulumi.set(__self__, "security_group_id_sets", security_group_id_sets)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID. Either this parameter or ReadOnlyGroupId must be passed in. If both parameters are passed in, ReadOnlyGroupId will be ignored.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        RO group ID. Either this parameter or DBInstanceId must be passed in. To query the security groups associated with the RO groups, only pass in ReadOnlyGroupId.
        """
        return pulumi.get(self, "read_only_group_id")

    @read_only_group_id.setter
    def read_only_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_only_group_id", value)

    @property
    @pulumi.getter(name="securityGroupIdSets")
    def security_group_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Information of security groups in array.
        """
        return pulumi.get(self, "security_group_id_sets")

    @security_group_id_sets.setter
    def security_group_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_id_sets", value)


class SecurityGroupConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a postgresql security_group_config

        ## Example Usage

        ### Set security group for the sepcified postgres instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        security_group_config = tencentcloud.postgresql.SecurityGroupConfig("securityGroupConfig",
            security_group_id_sets=[
                local["sg_id"],
                local["sg_id2"],
            ],
            db_instance_id=local["pgsql_id"])
        ```
        <!--End PulumiCodeChooser -->

        ### Set security group for the specified readonly group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.postgresql.ReadonlyGroup("group",
            master_db_instance_id=local["pgsql_id"],
            project_id=0,
            subnet_id=local["subnet_id"],
            vpc_id=local["vpc_id"],
            replay_lag_eliminate=1,
            replay_latency_eliminate=1,
            max_replay_lag=100,
            max_replay_latency=512,
            min_delay_eliminate_reserve=1)
        security_group_config = tencentcloud.postgresql.SecurityGroupConfig("securityGroupConfig",
            security_group_id_sets=[
                local["sg_id"],
                local["sg_id2"],
            ],
            read_only_group_id=group.id)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_instance_id: Instance ID. Either this parameter or ReadOnlyGroupId must be passed in. If both parameters are passed in, ReadOnlyGroupId will be ignored.
        :param pulumi.Input[str] read_only_group_id: RO group ID. Either this parameter or DBInstanceId must be passed in. To query the security groups associated with the RO groups, only pass in ReadOnlyGroupId.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_id_sets: Information of security groups in array.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityGroupConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a postgresql security_group_config

        ## Example Usage

        ### Set security group for the sepcified postgres instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        security_group_config = tencentcloud.postgresql.SecurityGroupConfig("securityGroupConfig",
            security_group_id_sets=[
                local["sg_id"],
                local["sg_id2"],
            ],
            db_instance_id=local["pgsql_id"])
        ```
        <!--End PulumiCodeChooser -->

        ### Set security group for the specified readonly group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.postgresql.ReadonlyGroup("group",
            master_db_instance_id=local["pgsql_id"],
            project_id=0,
            subnet_id=local["subnet_id"],
            vpc_id=local["vpc_id"],
            replay_lag_eliminate=1,
            replay_latency_eliminate=1,
            max_replay_lag=100,
            max_replay_latency=512,
            min_delay_eliminate_reserve=1)
        security_group_config = tencentcloud.postgresql.SecurityGroupConfig("securityGroupConfig",
            security_group_id_sets=[
                local["sg_id"],
                local["sg_id2"],
            ],
            read_only_group_id=group.id)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SecurityGroupConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityGroupConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 read_only_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityGroupConfigArgs.__new__(SecurityGroupConfigArgs)

            __props__.__dict__["db_instance_id"] = db_instance_id
            __props__.__dict__["read_only_group_id"] = read_only_group_id
            if security_group_id_sets is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id_sets'")
            __props__.__dict__["security_group_id_sets"] = security_group_id_sets
        super(SecurityGroupConfig, __self__).__init__(
            'tencentcloud:Postgresql/securityGroupConfig:SecurityGroupConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_instance_id: Optional[pulumi.Input[str]] = None,
            read_only_group_id: Optional[pulumi.Input[str]] = None,
            security_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'SecurityGroupConfig':
        """
        Get an existing SecurityGroupConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_instance_id: Instance ID. Either this parameter or ReadOnlyGroupId must be passed in. If both parameters are passed in, ReadOnlyGroupId will be ignored.
        :param pulumi.Input[str] read_only_group_id: RO group ID. Either this parameter or DBInstanceId must be passed in. To query the security groups associated with the RO groups, only pass in ReadOnlyGroupId.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_id_sets: Information of security groups in array.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityGroupConfigState.__new__(_SecurityGroupConfigState)

        __props__.__dict__["db_instance_id"] = db_instance_id
        __props__.__dict__["read_only_group_id"] = read_only_group_id
        __props__.__dict__["security_group_id_sets"] = security_group_id_sets
        return SecurityGroupConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        Instance ID. Either this parameter or ReadOnlyGroupId must be passed in. If both parameters are passed in, ReadOnlyGroupId will be ignored.
        """
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="readOnlyGroupId")
    def read_only_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        RO group ID. Either this parameter or DBInstanceId must be passed in. To query the security groups associated with the RO groups, only pass in ReadOnlyGroupId.
        """
        return pulumi.get(self, "read_only_group_id")

    @property
    @pulumi.getter(name="securityGroupIdSets")
    def security_group_id_sets(self) -> pulumi.Output[Sequence[str]]:
        """
        Information of security groups in array.
        """
        return pulumi.get(self, "security_group_id_sets")

