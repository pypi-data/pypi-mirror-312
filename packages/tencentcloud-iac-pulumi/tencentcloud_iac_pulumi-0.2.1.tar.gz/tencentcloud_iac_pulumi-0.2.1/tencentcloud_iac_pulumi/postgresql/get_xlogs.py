# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetXlogsResult',
    'AwaitableGetXlogsResult',
    'get_xlogs',
    'get_xlogs_output',
]

@pulumi.output_type
class GetXlogsResult:
    """
    A collection of values returned by getXlogs.
    """
    def __init__(__self__, end_time=None, id=None, instance_id=None, lists=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        """
        Xlog file created end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetXlogsListResult']:
        """
        List of Xlog query result.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Xlog file created start time.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetXlogsResult(GetXlogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetXlogsResult(
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            lists=self.lists,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_xlogs(end_time: Optional[str] = None,
              instance_id: Optional[str] = None,
              result_output_file: Optional[str] = None,
              start_time: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetXlogsResult:
    """
    Provide a datasource to query PostgreSQL Xlogs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Postgresql.get_xlogs(end_time="2022-01-07 01:02:03",
        instance_id="postgres-xxxxxxxx",
        start_time="2022-01-01 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: Xlog end time, format `yyyy-MM-dd hh:mm:ss`.
    :param str instance_id: PostgreSQL instance id.
    :param str result_output_file: Used for save results.
    :param str start_time: Xlog start time, format `yyyy-MM-dd hh:mm:ss`, start time cannot before 7 days ago.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Postgresql/getXlogs:getXlogs', __args__, opts=opts, typ=GetXlogsResult).value

    return AwaitableGetXlogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        lists=pulumi.get(__ret__, 'lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_xlogs)
def get_xlogs_output(end_time: Optional[pulumi.Input[Optional[str]]] = None,
                     instance_id: Optional[pulumi.Input[str]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     start_time: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetXlogsResult]:
    """
    Provide a datasource to query PostgreSQL Xlogs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Postgresql.get_xlogs(end_time="2022-01-07 01:02:03",
        instance_id="postgres-xxxxxxxx",
        start_time="2022-01-01 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: Xlog end time, format `yyyy-MM-dd hh:mm:ss`.
    :param str instance_id: PostgreSQL instance id.
    :param str result_output_file: Used for save results.
    :param str start_time: Xlog start time, format `yyyy-MM-dd hh:mm:ss`, start time cannot before 7 days ago.
    """
    ...
