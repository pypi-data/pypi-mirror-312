# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BackupPlanConfigArgs', 'BackupPlanConfig']

@pulumi.input_type
class BackupPlanConfigArgs:
    def __init__(__self__, *,
                 db_instance_id: pulumi.Input[str],
                 backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 base_backup_retention_period: Optional[pulumi.Input[int]] = None,
                 max_backup_start_time: Optional[pulumi.Input[str]] = None,
                 min_backup_start_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BackupPlanConfig resource.
        :param pulumi.Input[str] db_instance_id: instance id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_periods: Backup cycle, which means on which days each week the instance will be backed up. The parameter value should be the lowercase names of the days of the week.
        :param pulumi.Input[int] base_backup_retention_period: Backup retention period in days. Value range:3-7.
        :param pulumi.Input[str] max_backup_start_time: The latest time to start a backup.
        :param pulumi.Input[str] min_backup_start_time: The earliest time to start a backup.
        """
        pulumi.set(__self__, "db_instance_id", db_instance_id)
        if backup_periods is not None:
            pulumi.set(__self__, "backup_periods", backup_periods)
        if base_backup_retention_period is not None:
            pulumi.set(__self__, "base_backup_retention_period", base_backup_retention_period)
        if max_backup_start_time is not None:
            pulumi.set(__self__, "max_backup_start_time", max_backup_start_time)
        if min_backup_start_time is not None:
            pulumi.set(__self__, "min_backup_start_time", min_backup_start_time)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> pulumi.Input[str]:
        """
        instance id.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter(name="backupPeriods")
    def backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Backup cycle, which means on which days each week the instance will be backed up. The parameter value should be the lowercase names of the days of the week.
        """
        return pulumi.get(self, "backup_periods")

    @backup_periods.setter
    def backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_periods", value)

    @property
    @pulumi.getter(name="baseBackupRetentionPeriod")
    def base_backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Backup retention period in days. Value range:3-7.
        """
        return pulumi.get(self, "base_backup_retention_period")

    @base_backup_retention_period.setter
    def base_backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_backup_retention_period", value)

    @property
    @pulumi.getter(name="maxBackupStartTime")
    def max_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The latest time to start a backup.
        """
        return pulumi.get(self, "max_backup_start_time")

    @max_backup_start_time.setter
    def max_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_backup_start_time", value)

    @property
    @pulumi.getter(name="minBackupStartTime")
    def min_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The earliest time to start a backup.
        """
        return pulumi.get(self, "min_backup_start_time")

    @min_backup_start_time.setter
    def min_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_backup_start_time", value)


@pulumi.input_type
class _BackupPlanConfigState:
    def __init__(__self__, *,
                 backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 base_backup_retention_period: Optional[pulumi.Input[int]] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 max_backup_start_time: Optional[pulumi.Input[str]] = None,
                 min_backup_start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BackupPlanConfig resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_periods: Backup cycle, which means on which days each week the instance will be backed up. The parameter value should be the lowercase names of the days of the week.
        :param pulumi.Input[int] base_backup_retention_period: Backup retention period in days. Value range:3-7.
        :param pulumi.Input[str] db_instance_id: instance id.
        :param pulumi.Input[str] max_backup_start_time: The latest time to start a backup.
        :param pulumi.Input[str] min_backup_start_time: The earliest time to start a backup.
        """
        if backup_periods is not None:
            pulumi.set(__self__, "backup_periods", backup_periods)
        if base_backup_retention_period is not None:
            pulumi.set(__self__, "base_backup_retention_period", base_backup_retention_period)
        if db_instance_id is not None:
            pulumi.set(__self__, "db_instance_id", db_instance_id)
        if max_backup_start_time is not None:
            pulumi.set(__self__, "max_backup_start_time", max_backup_start_time)
        if min_backup_start_time is not None:
            pulumi.set(__self__, "min_backup_start_time", min_backup_start_time)

    @property
    @pulumi.getter(name="backupPeriods")
    def backup_periods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Backup cycle, which means on which days each week the instance will be backed up. The parameter value should be the lowercase names of the days of the week.
        """
        return pulumi.get(self, "backup_periods")

    @backup_periods.setter
    def backup_periods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backup_periods", value)

    @property
    @pulumi.getter(name="baseBackupRetentionPeriod")
    def base_backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Backup retention period in days. Value range:3-7.
        """
        return pulumi.get(self, "base_backup_retention_period")

    @base_backup_retention_period.setter
    def base_backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_backup_retention_period", value)

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        instance id.
        """
        return pulumi.get(self, "db_instance_id")

    @db_instance_id.setter
    def db_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_instance_id", value)

    @property
    @pulumi.getter(name="maxBackupStartTime")
    def max_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The latest time to start a backup.
        """
        return pulumi.get(self, "max_backup_start_time")

    @max_backup_start_time.setter
    def max_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_backup_start_time", value)

    @property
    @pulumi.getter(name="minBackupStartTime")
    def min_backup_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The earliest time to start a backup.
        """
        return pulumi.get(self, "min_backup_start_time")

    @min_backup_start_time.setter
    def min_backup_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_backup_start_time", value)


class BackupPlanConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 base_backup_retention_period: Optional[pulumi.Input[int]] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 max_backup_start_time: Optional[pulumi.Input[str]] = None,
                 min_backup_start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a postgres backup_plan_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        backup_plan_config = tencentcloud.postgresql.BackupPlanConfig("backupPlanConfig",
            db_instance_id=local["pgsql_id"],
            min_backup_start_time="01:00:00",
            max_backup_start_time="02:00:00",
            base_backup_retention_period=7,
            backup_periods=[
                "monday",
                "wednesday",
                "friday",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        postgres backup_plan_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Postgresql/backupPlanConfig:BackupPlanConfig backup_plan_config backup_plan_config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_periods: Backup cycle, which means on which days each week the instance will be backed up. The parameter value should be the lowercase names of the days of the week.
        :param pulumi.Input[int] base_backup_retention_period: Backup retention period in days. Value range:3-7.
        :param pulumi.Input[str] db_instance_id: instance id.
        :param pulumi.Input[str] max_backup_start_time: The latest time to start a backup.
        :param pulumi.Input[str] min_backup_start_time: The earliest time to start a backup.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BackupPlanConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a postgres backup_plan_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        backup_plan_config = tencentcloud.postgresql.BackupPlanConfig("backupPlanConfig",
            db_instance_id=local["pgsql_id"],
            min_backup_start_time="01:00:00",
            max_backup_start_time="02:00:00",
            base_backup_retention_period=7,
            backup_periods=[
                "monday",
                "wednesday",
                "friday",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        postgres backup_plan_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Postgresql/backupPlanConfig:BackupPlanConfig backup_plan_config backup_plan_config_id
        ```

        :param str resource_name: The name of the resource.
        :param BackupPlanConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BackupPlanConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 base_backup_retention_period: Optional[pulumi.Input[int]] = None,
                 db_instance_id: Optional[pulumi.Input[str]] = None,
                 max_backup_start_time: Optional[pulumi.Input[str]] = None,
                 min_backup_start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BackupPlanConfigArgs.__new__(BackupPlanConfigArgs)

            __props__.__dict__["backup_periods"] = backup_periods
            __props__.__dict__["base_backup_retention_period"] = base_backup_retention_period
            if db_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'db_instance_id'")
            __props__.__dict__["db_instance_id"] = db_instance_id
            __props__.__dict__["max_backup_start_time"] = max_backup_start_time
            __props__.__dict__["min_backup_start_time"] = min_backup_start_time
        super(BackupPlanConfig, __self__).__init__(
            'tencentcloud:Postgresql/backupPlanConfig:BackupPlanConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_periods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            base_backup_retention_period: Optional[pulumi.Input[int]] = None,
            db_instance_id: Optional[pulumi.Input[str]] = None,
            max_backup_start_time: Optional[pulumi.Input[str]] = None,
            min_backup_start_time: Optional[pulumi.Input[str]] = None) -> 'BackupPlanConfig':
        """
        Get an existing BackupPlanConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backup_periods: Backup cycle, which means on which days each week the instance will be backed up. The parameter value should be the lowercase names of the days of the week.
        :param pulumi.Input[int] base_backup_retention_period: Backup retention period in days. Value range:3-7.
        :param pulumi.Input[str] db_instance_id: instance id.
        :param pulumi.Input[str] max_backup_start_time: The latest time to start a backup.
        :param pulumi.Input[str] min_backup_start_time: The earliest time to start a backup.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BackupPlanConfigState.__new__(_BackupPlanConfigState)

        __props__.__dict__["backup_periods"] = backup_periods
        __props__.__dict__["base_backup_retention_period"] = base_backup_retention_period
        __props__.__dict__["db_instance_id"] = db_instance_id
        __props__.__dict__["max_backup_start_time"] = max_backup_start_time
        __props__.__dict__["min_backup_start_time"] = min_backup_start_time
        return BackupPlanConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupPeriods")
    def backup_periods(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Backup cycle, which means on which days each week the instance will be backed up. The parameter value should be the lowercase names of the days of the week.
        """
        return pulumi.get(self, "backup_periods")

    @property
    @pulumi.getter(name="baseBackupRetentionPeriod")
    def base_backup_retention_period(self) -> pulumi.Output[Optional[int]]:
        """
        Backup retention period in days. Value range:3-7.
        """
        return pulumi.get(self, "base_backup_retention_period")

    @property
    @pulumi.getter(name="dbInstanceId")
    def db_instance_id(self) -> pulumi.Output[str]:
        """
        instance id.
        """
        return pulumi.get(self, "db_instance_id")

    @property
    @pulumi.getter(name="maxBackupStartTime")
    def max_backup_start_time(self) -> pulumi.Output[Optional[str]]:
        """
        The latest time to start a backup.
        """
        return pulumi.get(self, "max_backup_start_time")

    @property
    @pulumi.getter(name="minBackupStartTime")
    def min_backup_start_time(self) -> pulumi.Output[Optional[str]]:
        """
        The earliest time to start a backup.
        """
        return pulumi.get(self, "min_backup_start_time")

