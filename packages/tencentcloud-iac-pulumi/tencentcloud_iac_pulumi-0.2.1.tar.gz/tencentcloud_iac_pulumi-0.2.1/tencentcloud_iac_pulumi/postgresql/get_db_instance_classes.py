# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDbInstanceClassesResult',
    'AwaitableGetDbInstanceClassesResult',
    'get_db_instance_classes',
    'get_db_instance_classes_output',
]

@pulumi.output_type
class GetDbInstanceClassesResult:
    """
    A collection of values returned by getDbInstanceClasses.
    """
    def __init__(__self__, class_info_sets=None, db_engine=None, db_major_version=None, id=None, result_output_file=None, zone=None):
        if class_info_sets and not isinstance(class_info_sets, list):
            raise TypeError("Expected argument 'class_info_sets' to be a list")
        pulumi.set(__self__, "class_info_sets", class_info_sets)
        if db_engine and not isinstance(db_engine, str):
            raise TypeError("Expected argument 'db_engine' to be a str")
        pulumi.set(__self__, "db_engine", db_engine)
        if db_major_version and not isinstance(db_major_version, str):
            raise TypeError("Expected argument 'db_major_version' to be a str")
        pulumi.set(__self__, "db_major_version", db_major_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="classInfoSets")
    def class_info_sets(self) -> Sequence['outputs.GetDbInstanceClassesClassInfoSetResult']:
        """
        List of database specifications.
        """
        return pulumi.get(self, "class_info_sets")

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> str:
        return pulumi.get(self, "db_engine")

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> str:
        return pulumi.get(self, "db_major_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


class AwaitableGetDbInstanceClassesResult(GetDbInstanceClassesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbInstanceClassesResult(
            class_info_sets=self.class_info_sets,
            db_engine=self.db_engine,
            db_major_version=self.db_major_version,
            id=self.id,
            result_output_file=self.result_output_file,
            zone=self.zone)


def get_db_instance_classes(db_engine: Optional[str] = None,
                            db_major_version: Optional[str] = None,
                            result_output_file: Optional[str] = None,
                            zone: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbInstanceClassesResult:
    """
    Use this data source to query detailed information of postgresql db_instance_classes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_instance_classes = tencentcloud.Postgresql.get_db_instance_classes(db_engine="postgresql",
        db_major_version="13",
        zone="ap-guangzhou-7")
    ```
    <!--End PulumiCodeChooser -->


    :param str db_engine: Database engines. Valid values: 1. `postgresql` (TencentDB for PostgreSQL) 2. `mssql_compatible` (MSSQL compatible-TencentDB for PostgreSQL).
    :param str db_major_version: Major version of a database, such as 12 or 13, which can be obtained through the `DescribeDBVersions` API.
    :param str result_output_file: Used to save results.
    :param str zone: AZ ID, which can be obtained through the `DescribeZones` API.
    """
    __args__ = dict()
    __args__['dbEngine'] = db_engine
    __args__['dbMajorVersion'] = db_major_version
    __args__['resultOutputFile'] = result_output_file
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Postgresql/getDbInstanceClasses:getDbInstanceClasses', __args__, opts=opts, typ=GetDbInstanceClassesResult).value

    return AwaitableGetDbInstanceClassesResult(
        class_info_sets=pulumi.get(__ret__, 'class_info_sets'),
        db_engine=pulumi.get(__ret__, 'db_engine'),
        db_major_version=pulumi.get(__ret__, 'db_major_version'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        zone=pulumi.get(__ret__, 'zone'))


@_utilities.lift_output_func(get_db_instance_classes)
def get_db_instance_classes_output(db_engine: Optional[pulumi.Input[str]] = None,
                                   db_major_version: Optional[pulumi.Input[str]] = None,
                                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                   zone: Optional[pulumi.Input[str]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbInstanceClassesResult]:
    """
    Use this data source to query detailed information of postgresql db_instance_classes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_instance_classes = tencentcloud.Postgresql.get_db_instance_classes(db_engine="postgresql",
        db_major_version="13",
        zone="ap-guangzhou-7")
    ```
    <!--End PulumiCodeChooser -->


    :param str db_engine: Database engines. Valid values: 1. `postgresql` (TencentDB for PostgreSQL) 2. `mssql_compatible` (MSSQL compatible-TencentDB for PostgreSQL).
    :param str db_major_version: Major version of a database, such as 12 or 13, which can be obtained through the `DescribeDBVersions` API.
    :param str result_output_file: Used to save results.
    :param str zone: AZ ID, which can be obtained through the `DescribeZones` API.
    """
    ...
