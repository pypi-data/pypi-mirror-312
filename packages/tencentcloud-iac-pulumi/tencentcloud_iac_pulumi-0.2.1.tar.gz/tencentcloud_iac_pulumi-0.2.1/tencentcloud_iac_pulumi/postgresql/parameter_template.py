# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ParameterTemplateArgs', 'ParameterTemplate']

@pulumi.input_type
class ParameterTemplateArgs:
    def __init__(__self__, *,
                 db_engine: pulumi.Input[str],
                 db_major_version: pulumi.Input[str],
                 template_name: pulumi.Input[str],
                 delete_param_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 modify_param_entry_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ParameterTemplate resource.
        :param pulumi.Input[str] db_engine: Database engine, such as postgresql, mssql_compatible.
        :param pulumi.Input[str] db_major_version: The major database version number, such as 11, 12, 13.
        :param pulumi.Input[str] template_name: Template name, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delete_param_sets: The set of parameters that need to be deleted.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]] modify_param_entry_sets: The set of parameters that need to be modified or added. Note: the same parameter cannot appear in the set of modifying and adding and deleting at the same time.
        :param pulumi.Input[str] template_description: Parameter template description, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        pulumi.set(__self__, "db_engine", db_engine)
        pulumi.set(__self__, "db_major_version", db_major_version)
        pulumi.set(__self__, "template_name", template_name)
        if delete_param_sets is not None:
            pulumi.set(__self__, "delete_param_sets", delete_param_sets)
        if modify_param_entry_sets is not None:
            pulumi.set(__self__, "modify_param_entry_sets", modify_param_entry_sets)
        if template_description is not None:
            pulumi.set(__self__, "template_description", template_description)

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> pulumi.Input[str]:
        """
        Database engine, such as postgresql, mssql_compatible.
        """
        return pulumi.get(self, "db_engine")

    @db_engine.setter
    def db_engine(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_engine", value)

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> pulumi.Input[str]:
        """
        The major database version number, such as 11, 12, 13.
        """
        return pulumi.get(self, "db_major_version")

    @db_major_version.setter
    def db_major_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_major_version", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Template name, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="deleteParamSets")
    def delete_param_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of parameters that need to be deleted.
        """
        return pulumi.get(self, "delete_param_sets")

    @delete_param_sets.setter
    def delete_param_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "delete_param_sets", value)

    @property
    @pulumi.getter(name="modifyParamEntrySets")
    def modify_param_entry_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]]]:
        """
        The set of parameters that need to be modified or added. Note: the same parameter cannot appear in the set of modifying and adding and deleting at the same time.
        """
        return pulumi.get(self, "modify_param_entry_sets")

    @modify_param_entry_sets.setter
    def modify_param_entry_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]]]):
        pulumi.set(self, "modify_param_entry_sets", value)

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter template description, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        return pulumi.get(self, "template_description")

    @template_description.setter
    def template_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_description", value)


@pulumi.input_type
class _ParameterTemplateState:
    def __init__(__self__, *,
                 db_engine: Optional[pulumi.Input[str]] = None,
                 db_major_version: Optional[pulumi.Input[str]] = None,
                 delete_param_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 modify_param_entry_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ParameterTemplate resources.
        :param pulumi.Input[str] db_engine: Database engine, such as postgresql, mssql_compatible.
        :param pulumi.Input[str] db_major_version: The major database version number, such as 11, 12, 13.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delete_param_sets: The set of parameters that need to be deleted.
        :param pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]] modify_param_entry_sets: The set of parameters that need to be modified or added. Note: the same parameter cannot appear in the set of modifying and adding and deleting at the same time.
        :param pulumi.Input[str] template_description: Parameter template description, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        :param pulumi.Input[str] template_name: Template name, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        if db_engine is not None:
            pulumi.set(__self__, "db_engine", db_engine)
        if db_major_version is not None:
            pulumi.set(__self__, "db_major_version", db_major_version)
        if delete_param_sets is not None:
            pulumi.set(__self__, "delete_param_sets", delete_param_sets)
        if modify_param_entry_sets is not None:
            pulumi.set(__self__, "modify_param_entry_sets", modify_param_entry_sets)
        if template_description is not None:
            pulumi.set(__self__, "template_description", template_description)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Database engine, such as postgresql, mssql_compatible.
        """
        return pulumi.get(self, "db_engine")

    @db_engine.setter
    def db_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_engine", value)

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> Optional[pulumi.Input[str]]:
        """
        The major database version number, such as 11, 12, 13.
        """
        return pulumi.get(self, "db_major_version")

    @db_major_version.setter
    def db_major_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_major_version", value)

    @property
    @pulumi.getter(name="deleteParamSets")
    def delete_param_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The set of parameters that need to be deleted.
        """
        return pulumi.get(self, "delete_param_sets")

    @delete_param_sets.setter
    def delete_param_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "delete_param_sets", value)

    @property
    @pulumi.getter(name="modifyParamEntrySets")
    def modify_param_entry_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]]]:
        """
        The set of parameters that need to be modified or added. Note: the same parameter cannot appear in the set of modifying and adding and deleting at the same time.
        """
        return pulumi.get(self, "modify_param_entry_sets")

    @modify_param_entry_sets.setter
    def modify_param_entry_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParameterTemplateModifyParamEntrySetArgs']]]]):
        pulumi.set(self, "modify_param_entry_sets", value)

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[pulumi.Input[str]]:
        """
        Parameter template description, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        return pulumi.get(self, "template_description")

    @template_description.setter
    def template_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_description", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class ParameterTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_engine: Optional[pulumi.Input[str]] = None,
                 db_major_version: Optional[pulumi.Input[str]] = None,
                 delete_param_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 modify_param_entry_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParameterTemplateModifyParamEntrySetArgs']]]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a postgresql parameter_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        parameter_template = tencentcloud.postgresql.ParameterTemplate("parameterTemplate",
            db_engine="postgresql",
            db_major_version="13",
            delete_param_sets=["lc_time"],
            modify_param_entry_sets=[
                tencentcloud.postgresql.ParameterTemplateModifyParamEntrySetArgs(
                    expected_value="UTC",
                    name="timezone",
                ),
                tencentcloud.postgresql.ParameterTemplateModifyParamEntrySetArgs(
                    expected_value="123",
                    name="lock_timeout",
                ),
            ],
            template_description="For_tf_test",
            template_name="your_temp_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        postgresql parameter_template can be imported using the id, e.g.

        Notice: `modify_param_entry_set` and `delete_param_set` do not support import.

        ```sh
        $ pulumi import tencentcloud:Postgresql/parameterTemplate:ParameterTemplate parameter_template parameter_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_engine: Database engine, such as postgresql, mssql_compatible.
        :param pulumi.Input[str] db_major_version: The major database version number, such as 11, 12, 13.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delete_param_sets: The set of parameters that need to be deleted.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParameterTemplateModifyParamEntrySetArgs']]]] modify_param_entry_sets: The set of parameters that need to be modified or added. Note: the same parameter cannot appear in the set of modifying and adding and deleting at the same time.
        :param pulumi.Input[str] template_description: Parameter template description, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        :param pulumi.Input[str] template_name: Template name, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ParameterTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a postgresql parameter_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        parameter_template = tencentcloud.postgresql.ParameterTemplate("parameterTemplate",
            db_engine="postgresql",
            db_major_version="13",
            delete_param_sets=["lc_time"],
            modify_param_entry_sets=[
                tencentcloud.postgresql.ParameterTemplateModifyParamEntrySetArgs(
                    expected_value="UTC",
                    name="timezone",
                ),
                tencentcloud.postgresql.ParameterTemplateModifyParamEntrySetArgs(
                    expected_value="123",
                    name="lock_timeout",
                ),
            ],
            template_description="For_tf_test",
            template_name="your_temp_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        postgresql parameter_template can be imported using the id, e.g.

        Notice: `modify_param_entry_set` and `delete_param_set` do not support import.

        ```sh
        $ pulumi import tencentcloud:Postgresql/parameterTemplate:ParameterTemplate parameter_template parameter_template_id
        ```

        :param str resource_name: The name of the resource.
        :param ParameterTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ParameterTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_engine: Optional[pulumi.Input[str]] = None,
                 db_major_version: Optional[pulumi.Input[str]] = None,
                 delete_param_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 modify_param_entry_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParameterTemplateModifyParamEntrySetArgs']]]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ParameterTemplateArgs.__new__(ParameterTemplateArgs)

            if db_engine is None and not opts.urn:
                raise TypeError("Missing required property 'db_engine'")
            __props__.__dict__["db_engine"] = db_engine
            if db_major_version is None and not opts.urn:
                raise TypeError("Missing required property 'db_major_version'")
            __props__.__dict__["db_major_version"] = db_major_version
            __props__.__dict__["delete_param_sets"] = delete_param_sets
            __props__.__dict__["modify_param_entry_sets"] = modify_param_entry_sets
            __props__.__dict__["template_description"] = template_description
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
        super(ParameterTemplate, __self__).__init__(
            'tencentcloud:Postgresql/parameterTemplate:ParameterTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_engine: Optional[pulumi.Input[str]] = None,
            db_major_version: Optional[pulumi.Input[str]] = None,
            delete_param_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            modify_param_entry_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParameterTemplateModifyParamEntrySetArgs']]]]] = None,
            template_description: Optional[pulumi.Input[str]] = None,
            template_name: Optional[pulumi.Input[str]] = None) -> 'ParameterTemplate':
        """
        Get an existing ParameterTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_engine: Database engine, such as postgresql, mssql_compatible.
        :param pulumi.Input[str] db_major_version: The major database version number, such as 11, 12, 13.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] delete_param_sets: The set of parameters that need to be deleted.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParameterTemplateModifyParamEntrySetArgs']]]] modify_param_entry_sets: The set of parameters that need to be modified or added. Note: the same parameter cannot appear in the set of modifying and adding and deleting at the same time.
        :param pulumi.Input[str] template_description: Parameter template description, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        :param pulumi.Input[str] template_name: Template name, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ParameterTemplateState.__new__(_ParameterTemplateState)

        __props__.__dict__["db_engine"] = db_engine
        __props__.__dict__["db_major_version"] = db_major_version
        __props__.__dict__["delete_param_sets"] = delete_param_sets
        __props__.__dict__["modify_param_entry_sets"] = modify_param_entry_sets
        __props__.__dict__["template_description"] = template_description
        __props__.__dict__["template_name"] = template_name
        return ParameterTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> pulumi.Output[str]:
        """
        Database engine, such as postgresql, mssql_compatible.
        """
        return pulumi.get(self, "db_engine")

    @property
    @pulumi.getter(name="dbMajorVersion")
    def db_major_version(self) -> pulumi.Output[str]:
        """
        The major database version number, such as 11, 12, 13.
        """
        return pulumi.get(self, "db_major_version")

    @property
    @pulumi.getter(name="deleteParamSets")
    def delete_param_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The set of parameters that need to be deleted.
        """
        return pulumi.get(self, "delete_param_sets")

    @property
    @pulumi.getter(name="modifyParamEntrySets")
    def modify_param_entry_sets(self) -> pulumi.Output[Optional[Sequence['outputs.ParameterTemplateModifyParamEntrySet']]]:
        """
        The set of parameters that need to be modified or added. Note: the same parameter cannot appear in the set of modifying and adding and deleting at the same time.
        """
        return pulumi.get(self, "modify_param_entry_sets")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> pulumi.Output[Optional[str]]:
        """
        Parameter template description, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        return pulumi.get(self, "template_description")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Template name, which can contain 1-60 letters, digits, and symbols (-_./()+=:@).
        """
        return pulumi.get(self, "template_name")

