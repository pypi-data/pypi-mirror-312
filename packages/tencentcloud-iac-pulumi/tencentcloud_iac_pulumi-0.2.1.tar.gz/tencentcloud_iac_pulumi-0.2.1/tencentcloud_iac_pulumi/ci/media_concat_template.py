# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaConcatTemplateArgs', 'MediaConcatTemplate']

@pulumi.input_type
class MediaConcatTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 concat_template: pulumi.Input['MediaConcatTemplateConcatTemplateArgs'],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaConcatTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaConcatTemplateConcatTemplateArgs'] concat_template: stitching template.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "concat_template", concat_template)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="concatTemplate")
    def concat_template(self) -> pulumi.Input['MediaConcatTemplateConcatTemplateArgs']:
        """
        stitching template.
        """
        return pulumi.get(self, "concat_template")

    @concat_template.setter
    def concat_template(self, value: pulumi.Input['MediaConcatTemplateConcatTemplateArgs']):
        pulumi.set(self, "concat_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MediaConcatTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 concat_template: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MediaConcatTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaConcatTemplateConcatTemplateArgs'] concat_template: stitching template.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if concat_template is not None:
            pulumi.set(__self__, "concat_template", concat_template)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="concatTemplate")
    def concat_template(self) -> Optional[pulumi.Input['MediaConcatTemplateConcatTemplateArgs']]:
        """
        stitching template.
        """
        return pulumi.get(self, "concat_template")

    @concat_template.setter
    def concat_template(self, value: Optional[pulumi.Input['MediaConcatTemplateConcatTemplateArgs']]):
        pulumi.set(self, "concat_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class MediaConcatTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 concat_template: Optional[pulumi.Input[pulumi.InputType['MediaConcatTemplateConcatTemplateArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_concat_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_concat_template = tencentcloud.ci.MediaConcatTemplate("mediaConcatTemplate",
            bucket="terraform-ci-xxxxxx",
            concat_template=tencentcloud.ci.MediaConcatTemplateConcatTemplateArgs(
                audio=tencentcloud.ci.MediaConcatTemplateConcatTemplateAudioArgs(
                    bitrate="",
                    channels="",
                    codec="mp3",
                    samplerate="",
                ),
                audio_mixes=[tencentcloud.ci.MediaConcatTemplateConcatTemplateAudioMixArgs(
                    audio_source="https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp3%2Fnizhan-test.mp3",
                    effect_config=tencentcloud.ci.MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs(
                        bgm_fade_time="1.7",
                        enable_bgm_fade="true",
                        enable_end_fadeout="false",
                        enable_start_fadein="true",
                        end_fadeout_time="0.1",
                        start_fadein_time="3",
                    ),
                    mix_mode="Once",
                    replace="true",
                )],
                concat_fragments=[
                    tencentcloud.ci.MediaConcatTemplateConcatTemplateConcatFragmentArgs(
                        mode="Start",
                        url="https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp4%2Fmp4-test.mp4",
                    ),
                    tencentcloud.ci.MediaConcatTemplateConcatTemplateConcatFragmentArgs(
                        mode="End",
                        url="https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp4%2Fmp4-test.mp4",
                    ),
                ],
                container=tencentcloud.ci.MediaConcatTemplateConcatTemplateContainerArgs(
                    format="mp4",
                ),
                video=tencentcloud.ci.MediaConcatTemplateConcatTemplateVideoArgs(
                    bitrate="1000",
                    codec="H.264",
                    crf="",
                    fps="25",
                    height="",
                    remove="",
                    rotate="",
                    width="1280",
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_concat_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaConcatTemplate:MediaConcatTemplate media_concat_template id=terraform-ci-xxxxxx#t1cb115dfa1fcc414284f83b7c69bcedcf
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaConcatTemplateConcatTemplateArgs']] concat_template: stitching template.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaConcatTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_concat_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_concat_template = tencentcloud.ci.MediaConcatTemplate("mediaConcatTemplate",
            bucket="terraform-ci-xxxxxx",
            concat_template=tencentcloud.ci.MediaConcatTemplateConcatTemplateArgs(
                audio=tencentcloud.ci.MediaConcatTemplateConcatTemplateAudioArgs(
                    bitrate="",
                    channels="",
                    codec="mp3",
                    samplerate="",
                ),
                audio_mixes=[tencentcloud.ci.MediaConcatTemplateConcatTemplateAudioMixArgs(
                    audio_source="https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp3%2Fnizhan-test.mp3",
                    effect_config=tencentcloud.ci.MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs(
                        bgm_fade_time="1.7",
                        enable_bgm_fade="true",
                        enable_end_fadeout="false",
                        enable_start_fadein="true",
                        end_fadeout_time="0.1",
                        start_fadein_time="3",
                    ),
                    mix_mode="Once",
                    replace="true",
                )],
                concat_fragments=[
                    tencentcloud.ci.MediaConcatTemplateConcatTemplateConcatFragmentArgs(
                        mode="Start",
                        url="https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp4%2Fmp4-test.mp4",
                    ),
                    tencentcloud.ci.MediaConcatTemplateConcatTemplateConcatFragmentArgs(
                        mode="End",
                        url="https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp4%2Fmp4-test.mp4",
                    ),
                ],
                container=tencentcloud.ci.MediaConcatTemplateConcatTemplateContainerArgs(
                    format="mp4",
                ),
                video=tencentcloud.ci.MediaConcatTemplateConcatTemplateVideoArgs(
                    bitrate="1000",
                    codec="H.264",
                    crf="",
                    fps="25",
                    height="",
                    remove="",
                    rotate="",
                    width="1280",
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_concat_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaConcatTemplate:MediaConcatTemplate media_concat_template id=terraform-ci-xxxxxx#t1cb115dfa1fcc414284f83b7c69bcedcf
        ```

        :param str resource_name: The name of the resource.
        :param MediaConcatTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaConcatTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 concat_template: Optional[pulumi.Input[pulumi.InputType['MediaConcatTemplateConcatTemplateArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaConcatTemplateArgs.__new__(MediaConcatTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if concat_template is None and not opts.urn:
                raise TypeError("Missing required property 'concat_template'")
            __props__.__dict__["concat_template"] = concat_template
            __props__.__dict__["name"] = name
        super(MediaConcatTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaConcatTemplate:MediaConcatTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            concat_template: Optional[pulumi.Input[pulumi.InputType['MediaConcatTemplateConcatTemplateArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'MediaConcatTemplate':
        """
        Get an existing MediaConcatTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaConcatTemplateConcatTemplateArgs']] concat_template: stitching template.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaConcatTemplateState.__new__(_MediaConcatTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["concat_template"] = concat_template
        __props__.__dict__["name"] = name
        return MediaConcatTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="concatTemplate")
    def concat_template(self) -> pulumi.Output['outputs.MediaConcatTemplateConcatTemplate']:
        """
        stitching template.
        """
        return pulumi.get(self, "concat_template")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

