# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaVoiceSeparateTemplateArgs', 'MediaVoiceSeparateTemplate']

@pulumi.input_type
class MediaVoiceSeparateTemplateArgs:
    def __init__(__self__, *,
                 audio_config: pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs'],
                 audio_mode: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaVoiceSeparateTemplate resource.
        :param pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs'] audio_config: audio configuration.
        :param pulumi.Input[str] audio_mode: Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        pulumi.set(__self__, "audio_config", audio_config)
        pulumi.set(__self__, "audio_mode", audio_mode)
        pulumi.set(__self__, "bucket", bucket)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="audioConfig")
    def audio_config(self) -> pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs']:
        """
        audio configuration.
        """
        return pulumi.get(self, "audio_config")

    @audio_config.setter
    def audio_config(self, value: pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs']):
        pulumi.set(self, "audio_config", value)

    @property
    @pulumi.getter(name="audioMode")
    def audio_mode(self) -> pulumi.Input[str]:
        """
        Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
        """
        return pulumi.get(self, "audio_mode")

    @audio_mode.setter
    def audio_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "audio_mode", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MediaVoiceSeparateTemplateState:
    def __init__(__self__, *,
                 audio_config: Optional[pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs']] = None,
                 audio_mode: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MediaVoiceSeparateTemplate resources.
        :param pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs'] audio_config: audio configuration.
        :param pulumi.Input[str] audio_mode: Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        if audio_config is not None:
            pulumi.set(__self__, "audio_config", audio_config)
        if audio_mode is not None:
            pulumi.set(__self__, "audio_mode", audio_mode)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="audioConfig")
    def audio_config(self) -> Optional[pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs']]:
        """
        audio configuration.
        """
        return pulumi.get(self, "audio_config")

    @audio_config.setter
    def audio_config(self, value: Optional[pulumi.Input['MediaVoiceSeparateTemplateAudioConfigArgs']]):
        pulumi.set(self, "audio_config", value)

    @property
    @pulumi.getter(name="audioMode")
    def audio_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
        """
        return pulumi.get(self, "audio_mode")

    @audio_mode.setter
    def audio_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audio_mode", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class MediaVoiceSeparateTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio_config: Optional[pulumi.Input[pulumi.InputType['MediaVoiceSeparateTemplateAudioConfigArgs']]] = None,
                 audio_mode: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_voice_separate_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_voice_separate_template = tencentcloud.ci.MediaVoiceSeparateTemplate("mediaVoiceSeparateTemplate",
            audio_config=tencentcloud.ci.MediaVoiceSeparateTemplateAudioConfigArgs(
                bitrate="128",
                channels="4",
                codec="aac",
                samplerate="44100",
            ),
            audio_mode="IsAudio",
            bucket="terraform-ci-xxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_voice_separate_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaVoiceSeparateTemplate:MediaVoiceSeparateTemplate media_voice_separate_template terraform-ci-xxxxxx#t1c95566664530460d9bc2b6265feb7c32
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MediaVoiceSeparateTemplateAudioConfigArgs']] audio_config: audio configuration.
        :param pulumi.Input[str] audio_mode: Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaVoiceSeparateTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_voice_separate_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_voice_separate_template = tencentcloud.ci.MediaVoiceSeparateTemplate("mediaVoiceSeparateTemplate",
            audio_config=tencentcloud.ci.MediaVoiceSeparateTemplateAudioConfigArgs(
                bitrate="128",
                channels="4",
                codec="aac",
                samplerate="44100",
            ),
            audio_mode="IsAudio",
            bucket="terraform-ci-xxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_voice_separate_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaVoiceSeparateTemplate:MediaVoiceSeparateTemplate media_voice_separate_template terraform-ci-xxxxxx#t1c95566664530460d9bc2b6265feb7c32
        ```

        :param str resource_name: The name of the resource.
        :param MediaVoiceSeparateTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaVoiceSeparateTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio_config: Optional[pulumi.Input[pulumi.InputType['MediaVoiceSeparateTemplateAudioConfigArgs']]] = None,
                 audio_mode: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaVoiceSeparateTemplateArgs.__new__(MediaVoiceSeparateTemplateArgs)

            if audio_config is None and not opts.urn:
                raise TypeError("Missing required property 'audio_config'")
            __props__.__dict__["audio_config"] = audio_config
            if audio_mode is None and not opts.urn:
                raise TypeError("Missing required property 'audio_mode'")
            __props__.__dict__["audio_mode"] = audio_mode
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["name"] = name
        super(MediaVoiceSeparateTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaVoiceSeparateTemplate:MediaVoiceSeparateTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audio_config: Optional[pulumi.Input[pulumi.InputType['MediaVoiceSeparateTemplateAudioConfigArgs']]] = None,
            audio_mode: Optional[pulumi.Input[str]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'MediaVoiceSeparateTemplate':
        """
        Get an existing MediaVoiceSeparateTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MediaVoiceSeparateTemplateAudioConfigArgs']] audio_config: audio configuration.
        :param pulumi.Input[str] audio_mode: Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaVoiceSeparateTemplateState.__new__(_MediaVoiceSeparateTemplateState)

        __props__.__dict__["audio_config"] = audio_config
        __props__.__dict__["audio_mode"] = audio_mode
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["name"] = name
        return MediaVoiceSeparateTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="audioConfig")
    def audio_config(self) -> pulumi.Output['outputs.MediaVoiceSeparateTemplateAudioConfig']:
        """
        audio configuration.
        """
        return pulumi.get(self, "audio_config")

    @property
    @pulumi.getter(name="audioMode")
    def audio_mode(self) -> pulumi.Output[str]:
        """
        Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
        """
        return pulumi.get(self, "audio_mode")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

