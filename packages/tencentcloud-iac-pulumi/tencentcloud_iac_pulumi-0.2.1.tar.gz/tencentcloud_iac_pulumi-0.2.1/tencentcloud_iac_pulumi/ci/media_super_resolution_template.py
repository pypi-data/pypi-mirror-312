# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['MediaSuperResolutionTemplateArgs', 'MediaSuperResolutionTemplate']

@pulumi.input_type
class MediaSuperResolutionTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 resolution: pulumi.Input[str],
                 enable_scale_up: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaSuperResolutionTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] resolution: Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
        :param pulumi.Input[str] enable_scale_up: Auto scaling switch, off by default.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] version: version, default value Base, Base: basic version, Enhance: enhanced version.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "resolution", resolution)
        if enable_scale_up is not None:
            pulumi.set(__self__, "enable_scale_up", enable_scale_up)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def resolution(self) -> pulumi.Input[str]:
        """
        Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
        """
        return pulumi.get(self, "resolution")

    @resolution.setter
    def resolution(self, value: pulumi.Input[str]):
        pulumi.set(self, "resolution", value)

    @property
    @pulumi.getter(name="enableScaleUp")
    def enable_scale_up(self) -> Optional[pulumi.Input[str]]:
        """
        Auto scaling switch, off by default.
        """
        return pulumi.get(self, "enable_scale_up")

    @enable_scale_up.setter
    def enable_scale_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_scale_up", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        version, default value Base, Base: basic version, Enhance: enhanced version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _MediaSuperResolutionTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 enable_scale_up: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MediaSuperResolutionTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] enable_scale_up: Auto scaling switch, off by default.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] resolution: Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
        :param pulumi.Input[str] version: version, default value Base, Base: basic version, Enhance: enhanced version.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if enable_scale_up is not None:
            pulumi.set(__self__, "enable_scale_up", enable_scale_up)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resolution is not None:
            pulumi.set(__self__, "resolution", resolution)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="enableScaleUp")
    def enable_scale_up(self) -> Optional[pulumi.Input[str]]:
        """
        Auto scaling switch, off by default.
        """
        return pulumi.get(self, "enable_scale_up")

    @enable_scale_up.setter
    def enable_scale_up(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_scale_up", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resolution(self) -> Optional[pulumi.Input[str]]:
        """
        Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
        """
        return pulumi.get(self, "resolution")

    @resolution.setter
    def resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        version, default value Base, Base: basic version, Enhance: enhanced version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class MediaSuperResolutionTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 enable_scale_up: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_super_resolution_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_super_resolution_template = tencentcloud.ci.MediaSuperResolutionTemplate("mediaSuperResolutionTemplate",
            bucket="terraform-ci-1308919341",
            enable_scale_up="true",
            resolution="sdtohd",
            version="Enhance")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_super_resolution_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaSuperResolutionTemplate:MediaSuperResolutionTemplate media_super_resolution_template terraform-ci-xxxxxx#t1d707eb2be3294e22b47123894f85cb8f
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] enable_scale_up: Auto scaling switch, off by default.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] resolution: Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
        :param pulumi.Input[str] version: version, default value Base, Base: basic version, Enhance: enhanced version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaSuperResolutionTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_super_resolution_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_super_resolution_template = tencentcloud.ci.MediaSuperResolutionTemplate("mediaSuperResolutionTemplate",
            bucket="terraform-ci-1308919341",
            enable_scale_up="true",
            resolution="sdtohd",
            version="Enhance")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_super_resolution_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaSuperResolutionTemplate:MediaSuperResolutionTemplate media_super_resolution_template terraform-ci-xxxxxx#t1d707eb2be3294e22b47123894f85cb8f
        ```

        :param str resource_name: The name of the resource.
        :param MediaSuperResolutionTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaSuperResolutionTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 enable_scale_up: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaSuperResolutionTemplateArgs.__new__(MediaSuperResolutionTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["enable_scale_up"] = enable_scale_up
            __props__.__dict__["name"] = name
            if resolution is None and not opts.urn:
                raise TypeError("Missing required property 'resolution'")
            __props__.__dict__["resolution"] = resolution
            __props__.__dict__["version"] = version
        super(MediaSuperResolutionTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaSuperResolutionTemplate:MediaSuperResolutionTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            enable_scale_up: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resolution: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'MediaSuperResolutionTemplate':
        """
        Get an existing MediaSuperResolutionTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] enable_scale_up: Auto scaling switch, off by default.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] resolution: Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
        :param pulumi.Input[str] version: version, default value Base, Base: basic version, Enhance: enhanced version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaSuperResolutionTemplateState.__new__(_MediaSuperResolutionTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["enable_scale_up"] = enable_scale_up
        __props__.__dict__["name"] = name
        __props__.__dict__["resolution"] = resolution
        __props__.__dict__["version"] = version
        return MediaSuperResolutionTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="enableScaleUp")
    def enable_scale_up(self) -> pulumi.Output[Optional[str]]:
        """
        Auto scaling switch, off by default.
        """
        return pulumi.get(self, "enable_scale_up")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resolution(self) -> pulumi.Output[str]:
        """
        Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
        """
        return pulumi.get(self, "resolution")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[str]]:
        """
        version, default value Base, Base: basic version, Enhance: enhanced version.
        """
        return pulumi.get(self, "version")

