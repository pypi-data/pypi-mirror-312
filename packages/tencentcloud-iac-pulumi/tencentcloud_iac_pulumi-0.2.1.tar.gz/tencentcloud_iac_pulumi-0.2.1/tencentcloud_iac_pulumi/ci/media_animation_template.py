# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaAnimationTemplateArgs', 'MediaAnimationTemplate']

@pulumi.input_type
class MediaAnimationTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 container: pulumi.Input['MediaAnimationTemplateContainerArgs'],
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input['MediaAnimationTemplateTimeIntervalArgs']] = None,
                 video: Optional[pulumi.Input['MediaAnimationTemplateVideoArgs']] = None):
        """
        The set of arguments for constructing a MediaAnimationTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaAnimationTemplateContainerArgs'] container: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaAnimationTemplateTimeIntervalArgs'] time_interval: time interval.
        :param pulumi.Input['MediaAnimationTemplateVideoArgs'] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "container", container)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input['MediaAnimationTemplateContainerArgs']:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input['MediaAnimationTemplateContainerArgs']):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[pulumi.Input['MediaAnimationTemplateTimeIntervalArgs']]:
        """
        time interval.
        """
        return pulumi.get(self, "time_interval")

    @time_interval.setter
    def time_interval(self, value: Optional[pulumi.Input['MediaAnimationTemplateTimeIntervalArgs']]):
        pulumi.set(self, "time_interval", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MediaAnimationTemplateVideoArgs']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MediaAnimationTemplateVideoArgs']]):
        pulumi.set(self, "video", value)


@pulumi.input_type
class _MediaAnimationTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input['MediaAnimationTemplateContainerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input['MediaAnimationTemplateTimeIntervalArgs']] = None,
                 video: Optional[pulumi.Input['MediaAnimationTemplateVideoArgs']] = None):
        """
        Input properties used for looking up and filtering MediaAnimationTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaAnimationTemplateContainerArgs'] container: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaAnimationTemplateTimeIntervalArgs'] time_interval: time interval.
        :param pulumi.Input['MediaAnimationTemplateVideoArgs'] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['MediaAnimationTemplateContainerArgs']]:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['MediaAnimationTemplateContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[pulumi.Input['MediaAnimationTemplateTimeIntervalArgs']]:
        """
        time interval.
        """
        return pulumi.get(self, "time_interval")

    @time_interval.setter
    def time_interval(self, value: Optional[pulumi.Input['MediaAnimationTemplateTimeIntervalArgs']]):
        pulumi.set(self, "time_interval", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MediaAnimationTemplateVideoArgs']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MediaAnimationTemplateVideoArgs']]):
        pulumi.set(self, "video", value)


class MediaAnimationTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateContainerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateTimeIntervalArgs']]] = None,
                 video: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateVideoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_animation_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_animation_template = tencentcloud.ci.MediaAnimationTemplate("mediaAnimationTemplate",
            bucket="terraform-ci-1308919341",
            container=tencentcloud.ci.MediaAnimationTemplateContainerArgs(
                format="gif",
            ),
            time_interval=tencentcloud.ci.MediaAnimationTemplateTimeIntervalArgs(
                duration="60",
                start="0",
            ),
            video=tencentcloud.ci.MediaAnimationTemplateVideoArgs(
                animate_frames_per_second="",
                animate_only_keep_key_frame="true",
                animate_time_interval_of_frame="",
                codec="gif",
                fps="20",
                height="",
                quality="",
                width="1280",
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaAnimationTemplateContainerArgs']] container: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaAnimationTemplateTimeIntervalArgs']] time_interval: time interval.
        :param pulumi.Input[pulumi.InputType['MediaAnimationTemplateVideoArgs']] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaAnimationTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_animation_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_animation_template = tencentcloud.ci.MediaAnimationTemplate("mediaAnimationTemplate",
            bucket="terraform-ci-1308919341",
            container=tencentcloud.ci.MediaAnimationTemplateContainerArgs(
                format="gif",
            ),
            time_interval=tencentcloud.ci.MediaAnimationTemplateTimeIntervalArgs(
                duration="60",
                start="0",
            ),
            video=tencentcloud.ci.MediaAnimationTemplateVideoArgs(
                animate_frames_per_second="",
                animate_only_keep_key_frame="true",
                animate_time_interval_of_frame="",
                codec="gif",
                fps="20",
                height="",
                quality="",
                width="1280",
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param MediaAnimationTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaAnimationTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateContainerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateTimeIntervalArgs']]] = None,
                 video: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateVideoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaAnimationTemplateArgs.__new__(MediaAnimationTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if container is None and not opts.urn:
                raise TypeError("Missing required property 'container'")
            __props__.__dict__["container"] = container
            __props__.__dict__["name"] = name
            __props__.__dict__["time_interval"] = time_interval
            __props__.__dict__["video"] = video
        super(MediaAnimationTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaAnimationTemplate:MediaAnimationTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            container: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateContainerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            time_interval: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateTimeIntervalArgs']]] = None,
            video: Optional[pulumi.Input[pulumi.InputType['MediaAnimationTemplateVideoArgs']]] = None) -> 'MediaAnimationTemplate':
        """
        Get an existing MediaAnimationTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaAnimationTemplateContainerArgs']] container: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaAnimationTemplateTimeIntervalArgs']] time_interval: time interval.
        :param pulumi.Input[pulumi.InputType['MediaAnimationTemplateVideoArgs']] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaAnimationTemplateState.__new__(_MediaAnimationTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["container"] = container
        __props__.__dict__["name"] = name
        __props__.__dict__["time_interval"] = time_interval
        __props__.__dict__["video"] = video
        return MediaAnimationTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def container(self) -> pulumi.Output['outputs.MediaAnimationTemplateContainer']:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> pulumi.Output[Optional['outputs.MediaAnimationTemplateTimeInterval']]:
        """
        time interval.
        """
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter
    def video(self) -> pulumi.Output[Optional['outputs.MediaAnimationTemplateVideo']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

