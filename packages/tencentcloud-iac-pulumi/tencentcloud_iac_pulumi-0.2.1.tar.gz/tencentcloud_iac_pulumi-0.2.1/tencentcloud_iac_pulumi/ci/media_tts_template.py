# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['MediaTtsTemplateArgs', 'MediaTtsTemplate']

@pulumi.input_type
class MediaTtsTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 codec: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 voice_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaTtsTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] codec: Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
        :param pulumi.Input[str] mode: Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is selected, the codec only supports pcm.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] speed: Speech rate, the default value is 100, [50,200].
        :param pulumi.Input[str] voice_type: Timbre, the default value is ruxue.
        :param pulumi.Input[str] volume: Volume, default value 0, [-10,10].
        """
        pulumi.set(__self__, "bucket", bucket)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if voice_type is not None:
            pulumi.set(__self__, "voice_type", voice_type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        """
        Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
        """
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is selected, the codec only supports pcm.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Speech rate, the default value is 100, [50,200].
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="voiceType")
    def voice_type(self) -> Optional[pulumi.Input[str]]:
        """
        Timbre, the default value is ruxue.
        """
        return pulumi.get(self, "voice_type")

    @voice_type.setter
    def voice_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voice_type", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[str]]:
        """
        Volume, default value 0, [-10,10].
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume", value)


@pulumi.input_type
class _MediaTtsTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 voice_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MediaTtsTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] codec: Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
        :param pulumi.Input[str] mode: Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is selected, the codec only supports pcm.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] speed: Speech rate, the default value is 100, [50,200].
        :param pulumi.Input[str] voice_type: Timbre, the default value is ruxue.
        :param pulumi.Input[str] volume: Volume, default value 0, [-10,10].
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if codec is not None:
            pulumi.set(__self__, "codec", codec)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if speed is not None:
            pulumi.set(__self__, "speed", speed)
        if voice_type is not None:
            pulumi.set(__self__, "voice_type", voice_type)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def codec(self) -> Optional[pulumi.Input[str]]:
        """
        Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
        """
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is selected, the codec only supports pcm.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def speed(self) -> Optional[pulumi.Input[str]]:
        """
        Speech rate, the default value is 100, [50,200].
        """
        return pulumi.get(self, "speed")

    @speed.setter
    def speed(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "speed", value)

    @property
    @pulumi.getter(name="voiceType")
    def voice_type(self) -> Optional[pulumi.Input[str]]:
        """
        Timbre, the default value is ruxue.
        """
        return pulumi.get(self, "voice_type")

    @voice_type.setter
    def voice_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "voice_type", value)

    @property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input[str]]:
        """
        Volume, default value 0, [-10,10].
        """
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume", value)


class MediaTtsTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 voice_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_tts_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_tts_template = tencentcloud.ci.MediaTtsTemplate("mediaTtsTemplate",
            bucket="terraform-ci-xxxxxx",
            codec="pcm",
            mode="Asyc",
            speed="100",
            voice_type="ruxue",
            volume="0")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_tts_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaTtsTemplate:MediaTtsTemplate media_tts_template terraform-ci-xxxxxx#t1ed421df8bd2140b6b73474f70f99b0f8
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] codec: Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
        :param pulumi.Input[str] mode: Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is selected, the codec only supports pcm.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] speed: Speech rate, the default value is 100, [50,200].
        :param pulumi.Input[str] voice_type: Timbre, the default value is ruxue.
        :param pulumi.Input[str] volume: Volume, default value 0, [-10,10].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaTtsTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_tts_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_tts_template = tencentcloud.ci.MediaTtsTemplate("mediaTtsTemplate",
            bucket="terraform-ci-xxxxxx",
            codec="pcm",
            mode="Asyc",
            speed="100",
            voice_type="ruxue",
            volume="0")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_tts_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaTtsTemplate:MediaTtsTemplate media_tts_template terraform-ci-xxxxxx#t1ed421df8bd2140b6b73474f70f99b0f8
        ```

        :param str resource_name: The name of the resource.
        :param MediaTtsTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaTtsTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 codec: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 speed: Optional[pulumi.Input[str]] = None,
                 voice_type: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaTtsTemplateArgs.__new__(MediaTtsTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["codec"] = codec
            __props__.__dict__["mode"] = mode
            __props__.__dict__["name"] = name
            __props__.__dict__["speed"] = speed
            __props__.__dict__["voice_type"] = voice_type
            __props__.__dict__["volume"] = volume
        super(MediaTtsTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaTtsTemplate:MediaTtsTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            codec: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            speed: Optional[pulumi.Input[str]] = None,
            voice_type: Optional[pulumi.Input[str]] = None,
            volume: Optional[pulumi.Input[str]] = None) -> 'MediaTtsTemplate':
        """
        Get an existing MediaTtsTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] codec: Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
        :param pulumi.Input[str] mode: Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is selected, the codec only supports pcm.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[str] speed: Speech rate, the default value is 100, [50,200].
        :param pulumi.Input[str] voice_type: Timbre, the default value is ruxue.
        :param pulumi.Input[str] volume: Volume, default value 0, [-10,10].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaTtsTemplateState.__new__(_MediaTtsTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["codec"] = codec
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["speed"] = speed
        __props__.__dict__["voice_type"] = voice_type
        __props__.__dict__["volume"] = volume
        return MediaTtsTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Output[Optional[str]]:
        """
        Audio format, default wav (synchronous)/pcm (asynchronous, wav, mp3, pcm.
        """
        return pulumi.get(self, "codec")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[Optional[str]]:
        """
        Processing mode, default value Asyc, Asyc (asynchronous composition), Sync (synchronous composition), When Asyc is selected, the codec only supports pcm.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def speed(self) -> pulumi.Output[Optional[str]]:
        """
        Speech rate, the default value is 100, [50,200].
        """
        return pulumi.get(self, "speed")

    @property
    @pulumi.getter(name="voiceType")
    def voice_type(self) -> pulumi.Output[Optional[str]]:
        """
        Timbre, the default value is ruxue.
        """
        return pulumi.get(self, "voice_type")

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Output[Optional[str]]:
        """
        Volume, default value 0, [-10,10].
        """
        return pulumi.get(self, "volume")

