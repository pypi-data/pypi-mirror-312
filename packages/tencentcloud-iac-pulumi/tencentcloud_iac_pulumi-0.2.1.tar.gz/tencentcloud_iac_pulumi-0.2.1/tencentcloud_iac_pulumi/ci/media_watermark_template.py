# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaWatermarkTemplateArgs', 'MediaWatermarkTemplate']

@pulumi.input_type
class MediaWatermarkTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 watermark: pulumi.Input['MediaWatermarkTemplateWatermarkArgs'],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaWatermarkTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaWatermarkTemplateWatermarkArgs'] watermark: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "watermark", watermark)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def watermark(self) -> pulumi.Input['MediaWatermarkTemplateWatermarkArgs']:
        """
        container format.
        """
        return pulumi.get(self, "watermark")

    @watermark.setter
    def watermark(self, value: pulumi.Input['MediaWatermarkTemplateWatermarkArgs']):
        pulumi.set(self, "watermark", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MediaWatermarkTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 watermark: Optional[pulumi.Input['MediaWatermarkTemplateWatermarkArgs']] = None):
        """
        Input properties used for looking up and filtering MediaWatermarkTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaWatermarkTemplateWatermarkArgs'] watermark: container format.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if watermark is not None:
            pulumi.set(__self__, "watermark", watermark)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def watermark(self) -> Optional[pulumi.Input['MediaWatermarkTemplateWatermarkArgs']]:
        """
        container format.
        """
        return pulumi.get(self, "watermark")

    @watermark.setter
    def watermark(self, value: Optional[pulumi.Input['MediaWatermarkTemplateWatermarkArgs']]):
        pulumi.set(self, "watermark", value)


class MediaWatermarkTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 watermark: Optional[pulumi.Input[pulumi.InputType['MediaWatermarkTemplateWatermarkArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_watermark_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_watermark_template = tencentcloud.ci.MediaWatermarkTemplate("mediaWatermarkTemplate",
            bucket="terraform-ci-1308919341",
            watermark=tencentcloud.ci.MediaWatermarkTemplateWatermarkArgs(
                dx="128",
                dy="128",
                end_time="100.5",
                loc_mode="Absolute",
                pos="TopRight",
                start_time="0",
                text=tencentcloud.ci.MediaWatermarkTemplateWatermarkTextArgs(
                    font_color="0xF0F8F0",
                    font_size="30",
                    font_type="simfang.ttf",
                    text="watermark-content",
                    transparency="30",
                ),
                type="Text",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_watermark_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaWatermarkTemplate:MediaWatermarkTemplate media_watermark_template media_watermark_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaWatermarkTemplateWatermarkArgs']] watermark: container format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaWatermarkTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_watermark_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_watermark_template = tencentcloud.ci.MediaWatermarkTemplate("mediaWatermarkTemplate",
            bucket="terraform-ci-1308919341",
            watermark=tencentcloud.ci.MediaWatermarkTemplateWatermarkArgs(
                dx="128",
                dy="128",
                end_time="100.5",
                loc_mode="Absolute",
                pos="TopRight",
                start_time="0",
                text=tencentcloud.ci.MediaWatermarkTemplateWatermarkTextArgs(
                    font_color="0xF0F8F0",
                    font_size="30",
                    font_type="simfang.ttf",
                    text="watermark-content",
                    transparency="30",
                ),
                type="Text",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_watermark_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaWatermarkTemplate:MediaWatermarkTemplate media_watermark_template media_watermark_template_id
        ```

        :param str resource_name: The name of the resource.
        :param MediaWatermarkTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaWatermarkTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 watermark: Optional[pulumi.Input[pulumi.InputType['MediaWatermarkTemplateWatermarkArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaWatermarkTemplateArgs.__new__(MediaWatermarkTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["name"] = name
            if watermark is None and not opts.urn:
                raise TypeError("Missing required property 'watermark'")
            __props__.__dict__["watermark"] = watermark
        super(MediaWatermarkTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaWatermarkTemplate:MediaWatermarkTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            watermark: Optional[pulumi.Input[pulumi.InputType['MediaWatermarkTemplateWatermarkArgs']]] = None) -> 'MediaWatermarkTemplate':
        """
        Get an existing MediaWatermarkTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaWatermarkTemplateWatermarkArgs']] watermark: container format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaWatermarkTemplateState.__new__(_MediaWatermarkTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["name"] = name
        __props__.__dict__["watermark"] = watermark
        return MediaWatermarkTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def watermark(self) -> pulumi.Output['outputs.MediaWatermarkTemplateWatermark']:
        """
        container format.
        """
        return pulumi.get(self, "watermark")

