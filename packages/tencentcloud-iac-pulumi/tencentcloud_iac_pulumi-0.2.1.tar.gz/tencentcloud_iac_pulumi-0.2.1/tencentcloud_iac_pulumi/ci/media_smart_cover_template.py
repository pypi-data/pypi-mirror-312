# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaSmartCoverTemplateArgs', 'MediaSmartCoverTemplate']

@pulumi.input_type
class MediaSmartCoverTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 smart_cover: pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs'],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaSmartCoverTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs'] smart_cover: Smart Cover Parameters.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "smart_cover", smart_cover)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="smartCover")
    def smart_cover(self) -> pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs']:
        """
        Smart Cover Parameters.
        """
        return pulumi.get(self, "smart_cover")

    @smart_cover.setter
    def smart_cover(self, value: pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs']):
        pulumi.set(self, "smart_cover", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MediaSmartCoverTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 smart_cover: Optional[pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs']] = None):
        """
        Input properties used for looking up and filtering MediaSmartCoverTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs'] smart_cover: Smart Cover Parameters.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if smart_cover is not None:
            pulumi.set(__self__, "smart_cover", smart_cover)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="smartCover")
    def smart_cover(self) -> Optional[pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs']]:
        """
        Smart Cover Parameters.
        """
        return pulumi.get(self, "smart_cover")

    @smart_cover.setter
    def smart_cover(self, value: Optional[pulumi.Input['MediaSmartCoverTemplateSmartCoverArgs']]):
        pulumi.set(self, "smart_cover", value)


class MediaSmartCoverTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 smart_cover: Optional[pulumi.Input[pulumi.InputType['MediaSmartCoverTemplateSmartCoverArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_smart_cover_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_smart_cover_template = tencentcloud.ci.MediaSmartCoverTemplate("mediaSmartCoverTemplate",
            bucket="terraform-ci-xxxxxx",
            smart_cover=tencentcloud.ci.MediaSmartCoverTemplateSmartCoverArgs(
                count="10",
                delete_duplicates="true",
                format="jpg",
                height="960",
                width="1280",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_smart_cover_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaSmartCoverTemplate:MediaSmartCoverTemplate media_smart_cover_template terraform-ci-xxxxxx#t1ede83acc305e423799d638044d859fb7
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaSmartCoverTemplateSmartCoverArgs']] smart_cover: Smart Cover Parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaSmartCoverTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_smart_cover_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_smart_cover_template = tencentcloud.ci.MediaSmartCoverTemplate("mediaSmartCoverTemplate",
            bucket="terraform-ci-xxxxxx",
            smart_cover=tencentcloud.ci.MediaSmartCoverTemplateSmartCoverArgs(
                count="10",
                delete_duplicates="true",
                format="jpg",
                height="960",
                width="1280",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_smart_cover_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaSmartCoverTemplate:MediaSmartCoverTemplate media_smart_cover_template terraform-ci-xxxxxx#t1ede83acc305e423799d638044d859fb7
        ```

        :param str resource_name: The name of the resource.
        :param MediaSmartCoverTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaSmartCoverTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 smart_cover: Optional[pulumi.Input[pulumi.InputType['MediaSmartCoverTemplateSmartCoverArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaSmartCoverTemplateArgs.__new__(MediaSmartCoverTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["name"] = name
            if smart_cover is None and not opts.urn:
                raise TypeError("Missing required property 'smart_cover'")
            __props__.__dict__["smart_cover"] = smart_cover
        super(MediaSmartCoverTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaSmartCoverTemplate:MediaSmartCoverTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            smart_cover: Optional[pulumi.Input[pulumi.InputType['MediaSmartCoverTemplateSmartCoverArgs']]] = None) -> 'MediaSmartCoverTemplate':
        """
        Get an existing MediaSmartCoverTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaSmartCoverTemplateSmartCoverArgs']] smart_cover: Smart Cover Parameters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaSmartCoverTemplateState.__new__(_MediaSmartCoverTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["name"] = name
        __props__.__dict__["smart_cover"] = smart_cover
        return MediaSmartCoverTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="smartCover")
    def smart_cover(self) -> pulumi.Output['outputs.MediaSmartCoverTemplateSmartCover']:
        """
        Smart Cover Parameters.
        """
        return pulumi.get(self, "smart_cover")

