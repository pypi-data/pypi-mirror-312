# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaTranscodeProTemplateArgs', 'MediaTranscodeProTemplate']

@pulumi.input_type
class MediaTranscodeProTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 container: pulumi.Input['MediaTranscodeProTemplateContainerArgs'],
                 audio: Optional[pulumi.Input['MediaTranscodeProTemplateAudioArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs']] = None,
                 trans_config: Optional[pulumi.Input['MediaTranscodeProTemplateTransConfigArgs']] = None,
                 video: Optional[pulumi.Input['MediaTranscodeProTemplateVideoArgs']] = None):
        """
        The set of arguments for constructing a MediaTranscodeProTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaTranscodeProTemplateContainerArgs'] container: container format.
        :param pulumi.Input['MediaTranscodeProTemplateAudioArgs'] audio: Audio information, do not transmit Audio, which is equivalent to deleting audio information.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs'] time_interval: time interval.
        :param pulumi.Input['MediaTranscodeProTemplateTransConfigArgs'] trans_config: transcoding configuration.
        :param pulumi.Input['MediaTranscodeProTemplateVideoArgs'] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "container", container)
        if audio is not None:
            pulumi.set(__self__, "audio", audio)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if trans_config is not None:
            pulumi.set(__self__, "trans_config", trans_config)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input['MediaTranscodeProTemplateContainerArgs']:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input['MediaTranscodeProTemplateContainerArgs']):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def audio(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateAudioArgs']]:
        """
        Audio information, do not transmit Audio, which is equivalent to deleting audio information.
        """
        return pulumi.get(self, "audio")

    @audio.setter
    def audio(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateAudioArgs']]):
        pulumi.set(self, "audio", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs']]:
        """
        time interval.
        """
        return pulumi.get(self, "time_interval")

    @time_interval.setter
    def time_interval(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs']]):
        pulumi.set(self, "time_interval", value)

    @property
    @pulumi.getter(name="transConfig")
    def trans_config(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateTransConfigArgs']]:
        """
        transcoding configuration.
        """
        return pulumi.get(self, "trans_config")

    @trans_config.setter
    def trans_config(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateTransConfigArgs']]):
        pulumi.set(self, "trans_config", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateVideoArgs']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateVideoArgs']]):
        pulumi.set(self, "video", value)


@pulumi.input_type
class _MediaTranscodeProTemplateState:
    def __init__(__self__, *,
                 audio: Optional[pulumi.Input['MediaTranscodeProTemplateAudioArgs']] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input['MediaTranscodeProTemplateContainerArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs']] = None,
                 trans_config: Optional[pulumi.Input['MediaTranscodeProTemplateTransConfigArgs']] = None,
                 video: Optional[pulumi.Input['MediaTranscodeProTemplateVideoArgs']] = None):
        """
        Input properties used for looking up and filtering MediaTranscodeProTemplate resources.
        :param pulumi.Input['MediaTranscodeProTemplateAudioArgs'] audio: Audio information, do not transmit Audio, which is equivalent to deleting audio information.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaTranscodeProTemplateContainerArgs'] container: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs'] time_interval: time interval.
        :param pulumi.Input['MediaTranscodeProTemplateTransConfigArgs'] trans_config: transcoding configuration.
        :param pulumi.Input['MediaTranscodeProTemplateVideoArgs'] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        if audio is not None:
            pulumi.set(__self__, "audio", audio)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if time_interval is not None:
            pulumi.set(__self__, "time_interval", time_interval)
        if trans_config is not None:
            pulumi.set(__self__, "trans_config", trans_config)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def audio(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateAudioArgs']]:
        """
        Audio information, do not transmit Audio, which is equivalent to deleting audio information.
        """
        return pulumi.get(self, "audio")

    @audio.setter
    def audio(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateAudioArgs']]):
        pulumi.set(self, "audio", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateContainerArgs']]:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs']]:
        """
        time interval.
        """
        return pulumi.get(self, "time_interval")

    @time_interval.setter
    def time_interval(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateTimeIntervalArgs']]):
        pulumi.set(self, "time_interval", value)

    @property
    @pulumi.getter(name="transConfig")
    def trans_config(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateTransConfigArgs']]:
        """
        transcoding configuration.
        """
        return pulumi.get(self, "trans_config")

    @trans_config.setter
    def trans_config(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateTransConfigArgs']]):
        pulumi.set(self, "trans_config", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MediaTranscodeProTemplateVideoArgs']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MediaTranscodeProTemplateVideoArgs']]):
        pulumi.set(self, "video", value)


class MediaTranscodeProTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateAudioArgs']]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateContainerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTimeIntervalArgs']]] = None,
                 trans_config: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTransConfigArgs']]] = None,
                 video: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateVideoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_transcode_pro_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_transcode_pro_template = tencentcloud.ci.MediaTranscodeProTemplate("mediaTranscodeProTemplate",
            audio=tencentcloud.ci.MediaTranscodeProTemplateAudioArgs(
                codec="pcm_s24le",
                remove="true",
            ),
            bucket="terraform-ci-xxxxxx",
            container=tencentcloud.ci.MediaTranscodeProTemplateContainerArgs(
                format="mxf",
            ),
            time_interval=tencentcloud.ci.MediaTranscodeProTemplateTimeIntervalArgs(
                duration="",
                start="",
            ),
            trans_config=tencentcloud.ci.MediaTranscodeProTemplateTransConfigArgs(
                adj_dar_method="scale",
                audio_bitrate_adj_method="0",
                delete_metadata="false",
                is_check_audio_bitrate="false",
                is_check_reso="false",
                is_check_video_bitrate="false",
                is_hdr2_sdr="false",
                reso_adj_method="1",
                video_bitrate_adj_method="0",
            ),
            video=tencentcloud.ci.MediaTranscodeProTemplateVideoArgs(
                bitrate="50000",
                codec="xavc",
                fps="30000/1001",
                height="1080",
                interlaced="true",
                profile="XAVC-HD_422_10bit",
                width="1920",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_transcode_pro_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaTranscodeProTemplate:MediaTranscodeProTemplate media_transcode_pro_template terraform-ci-xxxxxx#t13ed9af009da0414e9c7c63456ec8f4d2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateAudioArgs']] audio: Audio information, do not transmit Audio, which is equivalent to deleting audio information.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateContainerArgs']] container: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTimeIntervalArgs']] time_interval: time interval.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTransConfigArgs']] trans_config: transcoding configuration.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateVideoArgs']] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaTranscodeProTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_transcode_pro_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_transcode_pro_template = tencentcloud.ci.MediaTranscodeProTemplate("mediaTranscodeProTemplate",
            audio=tencentcloud.ci.MediaTranscodeProTemplateAudioArgs(
                codec="pcm_s24le",
                remove="true",
            ),
            bucket="terraform-ci-xxxxxx",
            container=tencentcloud.ci.MediaTranscodeProTemplateContainerArgs(
                format="mxf",
            ),
            time_interval=tencentcloud.ci.MediaTranscodeProTemplateTimeIntervalArgs(
                duration="",
                start="",
            ),
            trans_config=tencentcloud.ci.MediaTranscodeProTemplateTransConfigArgs(
                adj_dar_method="scale",
                audio_bitrate_adj_method="0",
                delete_metadata="false",
                is_check_audio_bitrate="false",
                is_check_reso="false",
                is_check_video_bitrate="false",
                is_hdr2_sdr="false",
                reso_adj_method="1",
                video_bitrate_adj_method="0",
            ),
            video=tencentcloud.ci.MediaTranscodeProTemplateVideoArgs(
                bitrate="50000",
                codec="xavc",
                fps="30000/1001",
                height="1080",
                interlaced="true",
                profile="XAVC-HD_422_10bit",
                width="1920",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_transcode_pro_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaTranscodeProTemplate:MediaTranscodeProTemplate media_transcode_pro_template terraform-ci-xxxxxx#t13ed9af009da0414e9c7c63456ec8f4d2
        ```

        :param str resource_name: The name of the resource.
        :param MediaTranscodeProTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaTranscodeProTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateAudioArgs']]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateContainerArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 time_interval: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTimeIntervalArgs']]] = None,
                 trans_config: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTransConfigArgs']]] = None,
                 video: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateVideoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaTranscodeProTemplateArgs.__new__(MediaTranscodeProTemplateArgs)

            __props__.__dict__["audio"] = audio
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if container is None and not opts.urn:
                raise TypeError("Missing required property 'container'")
            __props__.__dict__["container"] = container
            __props__.__dict__["name"] = name
            __props__.__dict__["time_interval"] = time_interval
            __props__.__dict__["trans_config"] = trans_config
            __props__.__dict__["video"] = video
        super(MediaTranscodeProTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaTranscodeProTemplate:MediaTranscodeProTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audio: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateAudioArgs']]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            container: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateContainerArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            time_interval: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTimeIntervalArgs']]] = None,
            trans_config: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTransConfigArgs']]] = None,
            video: Optional[pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateVideoArgs']]] = None) -> 'MediaTranscodeProTemplate':
        """
        Get an existing MediaTranscodeProTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateAudioArgs']] audio: Audio information, do not transmit Audio, which is equivalent to deleting audio information.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateContainerArgs']] container: container format.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTimeIntervalArgs']] time_interval: time interval.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateTransConfigArgs']] trans_config: transcoding configuration.
        :param pulumi.Input[pulumi.InputType['MediaTranscodeProTemplateVideoArgs']] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaTranscodeProTemplateState.__new__(_MediaTranscodeProTemplateState)

        __props__.__dict__["audio"] = audio
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["container"] = container
        __props__.__dict__["name"] = name
        __props__.__dict__["time_interval"] = time_interval
        __props__.__dict__["trans_config"] = trans_config
        __props__.__dict__["video"] = video
        return MediaTranscodeProTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def audio(self) -> pulumi.Output[Optional['outputs.MediaTranscodeProTemplateAudio']]:
        """
        Audio information, do not transmit Audio, which is equivalent to deleting audio information.
        """
        return pulumi.get(self, "audio")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def container(self) -> pulumi.Output['outputs.MediaTranscodeProTemplateContainer']:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> pulumi.Output[Optional['outputs.MediaTranscodeProTemplateTimeInterval']]:
        """
        time interval.
        """
        return pulumi.get(self, "time_interval")

    @property
    @pulumi.getter(name="transConfig")
    def trans_config(self) -> pulumi.Output[Optional['outputs.MediaTranscodeProTemplateTransConfig']]:
        """
        transcoding configuration.
        """
        return pulumi.get(self, "trans_config")

    @property
    @pulumi.getter
    def video(self) -> pulumi.Output[Optional['outputs.MediaTranscodeProTemplateVideo']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

