# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaVideoProcessTemplateArgs', 'MediaVideoProcessTemplate']

@pulumi.input_type
class MediaVideoProcessTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 color_enhance: Optional[pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs']] = None,
                 ms_sharpen: Optional[pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaVideoProcessTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs'] color_enhance: color enhancement.
        :param pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs'] ms_sharpen: detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        pulumi.set(__self__, "bucket", bucket)
        if color_enhance is not None:
            pulumi.set(__self__, "color_enhance", color_enhance)
        if ms_sharpen is not None:
            pulumi.set(__self__, "ms_sharpen", ms_sharpen)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> Optional[pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs']]:
        """
        color enhancement.
        """
        return pulumi.get(self, "color_enhance")

    @color_enhance.setter
    def color_enhance(self, value: Optional[pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs']]):
        pulumi.set(self, "color_enhance", value)

    @property
    @pulumi.getter(name="msSharpen")
    def ms_sharpen(self) -> Optional[pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs']]:
        """
        detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
        """
        return pulumi.get(self, "ms_sharpen")

    @ms_sharpen.setter
    def ms_sharpen(self, value: Optional[pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs']]):
        pulumi.set(self, "ms_sharpen", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MediaVideoProcessTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 color_enhance: Optional[pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs']] = None,
                 ms_sharpen: Optional[pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MediaVideoProcessTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs'] color_enhance: color enhancement.
        :param pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs'] ms_sharpen: detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if color_enhance is not None:
            pulumi.set(__self__, "color_enhance", color_enhance)
        if ms_sharpen is not None:
            pulumi.set(__self__, "ms_sharpen", ms_sharpen)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> Optional[pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs']]:
        """
        color enhancement.
        """
        return pulumi.get(self, "color_enhance")

    @color_enhance.setter
    def color_enhance(self, value: Optional[pulumi.Input['MediaVideoProcessTemplateColorEnhanceArgs']]):
        pulumi.set(self, "color_enhance", value)

    @property
    @pulumi.getter(name="msSharpen")
    def ms_sharpen(self) -> Optional[pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs']]:
        """
        detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
        """
        return pulumi.get(self, "ms_sharpen")

    @ms_sharpen.setter
    def ms_sharpen(self, value: Optional[pulumi.Input['MediaVideoProcessTemplateMsSharpenArgs']]):
        pulumi.set(self, "ms_sharpen", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class MediaVideoProcessTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 color_enhance: Optional[pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateColorEnhanceArgs']]] = None,
                 ms_sharpen: Optional[pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateMsSharpenArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_video_process_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_video_process_template = tencentcloud.ci.MediaVideoProcessTemplate("mediaVideoProcessTemplate",
            bucket="terraform-ci-xxxxxx",
            color_enhance=tencentcloud.ci.MediaVideoProcessTemplateColorEnhanceArgs(
                contrast="",
                correction="",
                enable="true",
                saturation="",
            ),
            ms_sharpen=tencentcloud.ci.MediaVideoProcessTemplateMsSharpenArgs(
                enable="false",
                sharpen_level="",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_video_process_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaVideoProcessTemplate:MediaVideoProcessTemplate media_video_process_template terraform-ci-xxxxxx#t1d5694d87639a4593a9fd7e9025d26f52
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateColorEnhanceArgs']] color_enhance: color enhancement.
        :param pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateMsSharpenArgs']] ms_sharpen: detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaVideoProcessTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_video_process_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_video_process_template = tencentcloud.ci.MediaVideoProcessTemplate("mediaVideoProcessTemplate",
            bucket="terraform-ci-xxxxxx",
            color_enhance=tencentcloud.ci.MediaVideoProcessTemplateColorEnhanceArgs(
                contrast="",
                correction="",
                enable="true",
                saturation="",
            ),
            ms_sharpen=tencentcloud.ci.MediaVideoProcessTemplateMsSharpenArgs(
                enable="false",
                sharpen_level="",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_video_process_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaVideoProcessTemplate:MediaVideoProcessTemplate media_video_process_template terraform-ci-xxxxxx#t1d5694d87639a4593a9fd7e9025d26f52
        ```

        :param str resource_name: The name of the resource.
        :param MediaVideoProcessTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaVideoProcessTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 color_enhance: Optional[pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateColorEnhanceArgs']]] = None,
                 ms_sharpen: Optional[pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateMsSharpenArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaVideoProcessTemplateArgs.__new__(MediaVideoProcessTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["color_enhance"] = color_enhance
            __props__.__dict__["ms_sharpen"] = ms_sharpen
            __props__.__dict__["name"] = name
        super(MediaVideoProcessTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaVideoProcessTemplate:MediaVideoProcessTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            color_enhance: Optional[pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateColorEnhanceArgs']]] = None,
            ms_sharpen: Optional[pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateMsSharpenArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'MediaVideoProcessTemplate':
        """
        Get an existing MediaVideoProcessTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateColorEnhanceArgs']] color_enhance: color enhancement.
        :param pulumi.Input[pulumi.InputType['MediaVideoProcessTemplateMsSharpenArgs']] ms_sharpen: detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaVideoProcessTemplateState.__new__(_MediaVideoProcessTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["color_enhance"] = color_enhance
        __props__.__dict__["ms_sharpen"] = ms_sharpen
        __props__.__dict__["name"] = name
        return MediaVideoProcessTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="colorEnhance")
    def color_enhance(self) -> pulumi.Output[Optional['outputs.MediaVideoProcessTemplateColorEnhance']]:
        """
        color enhancement.
        """
        return pulumi.get(self, "color_enhance")

    @property
    @pulumi.getter(name="msSharpen")
    def ms_sharpen(self) -> pulumi.Output[Optional['outputs.MediaVideoProcessTemplateMsSharpen']]:
        """
        detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
        """
        return pulumi.get(self, "ms_sharpen")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

