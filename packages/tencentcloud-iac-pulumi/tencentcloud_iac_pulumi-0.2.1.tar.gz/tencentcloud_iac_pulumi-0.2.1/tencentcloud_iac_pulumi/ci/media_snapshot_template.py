# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaSnapshotTemplateArgs', 'MediaSnapshotTemplate']

@pulumi.input_type
class MediaSnapshotTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 snapshot: pulumi.Input['MediaSnapshotTemplateSnapshotArgs'],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MediaSnapshotTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaSnapshotTemplateSnapshotArgs'] snapshot: screenshot.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "snapshot", snapshot)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def snapshot(self) -> pulumi.Input['MediaSnapshotTemplateSnapshotArgs']:
        """
        screenshot.
        """
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: pulumi.Input['MediaSnapshotTemplateSnapshotArgs']):
        pulumi.set(self, "snapshot", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MediaSnapshotTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 snapshot: Optional[pulumi.Input['MediaSnapshotTemplateSnapshotArgs']] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MediaSnapshotTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaSnapshotTemplateSnapshotArgs'] snapshot: screenshot.
        :param pulumi.Input[str] template_id: Template ID.
        :param pulumi.Input[str] update_time: update time.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if snapshot is not None:
            pulumi.set(__self__, "snapshot", snapshot)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def snapshot(self) -> Optional[pulumi.Input['MediaSnapshotTemplateSnapshotArgs']]:
        """
        screenshot.
        """
        return pulumi.get(self, "snapshot")

    @snapshot.setter
    def snapshot(self, value: Optional[pulumi.Input['MediaSnapshotTemplateSnapshotArgs']]):
        pulumi.set(self, "snapshot", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Template ID.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class MediaSnapshotTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 snapshot: Optional[pulumi.Input[pulumi.InputType['MediaSnapshotTemplateSnapshotArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_snapshot_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_snapshot_template = tencentcloud.ci.MediaSnapshotTemplate("mediaSnapshotTemplate",
            bucket="terraform-ci-xxxxxx",
            snapshot=tencentcloud.ci.MediaSnapshotTemplateSnapshotArgs(
                count="10",
                snapshot_out_mode="SnapshotAndSprite",
                sprite_snapshot_config=tencentcloud.ci.MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs(
                    color="White",
                    columns="10",
                    lines="10",
                    margin="10",
                    padding="10",
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_snapshot_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaSnapshotTemplate:MediaSnapshotTemplate media_snapshot_template terraform-ci-xxxxxx#t18210645f96564eaf80e86b1f58c20152
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaSnapshotTemplateSnapshotArgs']] snapshot: screenshot.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaSnapshotTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_snapshot_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_snapshot_template = tencentcloud.ci.MediaSnapshotTemplate("mediaSnapshotTemplate",
            bucket="terraform-ci-xxxxxx",
            snapshot=tencentcloud.ci.MediaSnapshotTemplateSnapshotArgs(
                count="10",
                snapshot_out_mode="SnapshotAndSprite",
                sprite_snapshot_config=tencentcloud.ci.MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs(
                    color="White",
                    columns="10",
                    lines="10",
                    margin="10",
                    padding="10",
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_snapshot_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaSnapshotTemplate:MediaSnapshotTemplate media_snapshot_template terraform-ci-xxxxxx#t18210645f96564eaf80e86b1f58c20152
        ```

        :param str resource_name: The name of the resource.
        :param MediaSnapshotTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaSnapshotTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 snapshot: Optional[pulumi.Input[pulumi.InputType['MediaSnapshotTemplateSnapshotArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaSnapshotTemplateArgs.__new__(MediaSnapshotTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["name"] = name
            if snapshot is None and not opts.urn:
                raise TypeError("Missing required property 'snapshot'")
            __props__.__dict__["snapshot"] = snapshot
            __props__.__dict__["create_time"] = None
            __props__.__dict__["template_id"] = None
            __props__.__dict__["update_time"] = None
        super(MediaSnapshotTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaSnapshotTemplate:MediaSnapshotTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            snapshot: Optional[pulumi.Input[pulumi.InputType['MediaSnapshotTemplateSnapshotArgs']]] = None,
            template_id: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'MediaSnapshotTemplate':
        """
        Get an existing MediaSnapshotTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaSnapshotTemplateSnapshotArgs']] snapshot: screenshot.
        :param pulumi.Input[str] template_id: Template ID.
        :param pulumi.Input[str] update_time: update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaSnapshotTemplateState.__new__(_MediaSnapshotTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["name"] = name
        __props__.__dict__["snapshot"] = snapshot
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["update_time"] = update_time
        return MediaSnapshotTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def snapshot(self) -> pulumi.Output['outputs.MediaSnapshotTemplateSnapshot']:
        """
        screenshot.
        """
        return pulumi.get(self, "snapshot")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[str]:
        """
        Template ID.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

