# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaPicProcessTemplateArgs', 'MediaPicProcessTemplate']

@pulumi.input_type
class MediaPicProcessTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 pic_process: Optional[pulumi.Input['MediaPicProcessTemplatePicProcessArgs']] = None):
        """
        The set of arguments for constructing a MediaPicProcessTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaPicProcessTemplatePicProcessArgs'] pic_process: container format.
        """
        pulumi.set(__self__, "bucket", bucket)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pic_process is not None:
            pulumi.set(__self__, "pic_process", pic_process)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="picProcess")
    def pic_process(self) -> Optional[pulumi.Input['MediaPicProcessTemplatePicProcessArgs']]:
        """
        container format.
        """
        return pulumi.get(self, "pic_process")

    @pic_process.setter
    def pic_process(self, value: Optional[pulumi.Input['MediaPicProcessTemplatePicProcessArgs']]):
        pulumi.set(self, "pic_process", value)


@pulumi.input_type
class _MediaPicProcessTemplateState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pic_process: Optional[pulumi.Input['MediaPicProcessTemplatePicProcessArgs']] = None):
        """
        Input properties used for looking up and filtering MediaPicProcessTemplate resources.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaPicProcessTemplatePicProcessArgs'] pic_process: container format.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pic_process is not None:
            pulumi.set(__self__, "pic_process", pic_process)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="picProcess")
    def pic_process(self) -> Optional[pulumi.Input['MediaPicProcessTemplatePicProcessArgs']]:
        """
        container format.
        """
        return pulumi.get(self, "pic_process")

    @pic_process.setter
    def pic_process(self, value: Optional[pulumi.Input['MediaPicProcessTemplatePicProcessArgs']]):
        pulumi.set(self, "pic_process", value)


class MediaPicProcessTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pic_process: Optional[pulumi.Input[pulumi.InputType['MediaPicProcessTemplatePicProcessArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_pic_process_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_pic_process_template = tencentcloud.ci.MediaPicProcessTemplate("mediaPicProcessTemplate",
            bucket="terraform-ci-xxxxxx",
            pic_process=tencentcloud.ci.MediaPicProcessTemplatePicProcessArgs(
                is_pic_info="true",
                process_rule="imageMogr2/rotate/90",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_pic_process_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaPicProcessTemplate:MediaPicProcessTemplate media_pic_process_template terraform-ci-xxxxx#t184a8a26da4674c80bf260c1e34131a65
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaPicProcessTemplatePicProcessArgs']] pic_process: container format.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaPicProcessTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_pic_process_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_pic_process_template = tencentcloud.ci.MediaPicProcessTemplate("mediaPicProcessTemplate",
            bucket="terraform-ci-xxxxxx",
            pic_process=tencentcloud.ci.MediaPicProcessTemplatePicProcessArgs(
                is_pic_info="true",
                process_rule="imageMogr2/rotate/90",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_pic_process_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaPicProcessTemplate:MediaPicProcessTemplate media_pic_process_template terraform-ci-xxxxx#t184a8a26da4674c80bf260c1e34131a65
        ```

        :param str resource_name: The name of the resource.
        :param MediaPicProcessTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaPicProcessTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pic_process: Optional[pulumi.Input[pulumi.InputType['MediaPicProcessTemplatePicProcessArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaPicProcessTemplateArgs.__new__(MediaPicProcessTemplateArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["name"] = name
            __props__.__dict__["pic_process"] = pic_process
        super(MediaPicProcessTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaPicProcessTemplate:MediaPicProcessTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pic_process: Optional[pulumi.Input[pulumi.InputType['MediaPicProcessTemplatePicProcessArgs']]] = None) -> 'MediaPicProcessTemplate':
        """
        Get an existing MediaPicProcessTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaPicProcessTemplatePicProcessArgs']] pic_process: container format.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaPicProcessTemplateState.__new__(_MediaPicProcessTemplateState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["name"] = name
        __props__.__dict__["pic_process"] = pic_process
        return MediaPicProcessTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="picProcess")
    def pic_process(self) -> pulumi.Output[Optional['outputs.MediaPicProcessTemplatePicProcess']]:
        """
        container format.
        """
        return pulumi.get(self, "pic_process")

