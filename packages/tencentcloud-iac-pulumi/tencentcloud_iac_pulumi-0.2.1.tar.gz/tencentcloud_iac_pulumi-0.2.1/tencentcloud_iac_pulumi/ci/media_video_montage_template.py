# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MediaVideoMontageTemplateArgs', 'MediaVideoMontageTemplate']

@pulumi.input_type
class MediaVideoMontageTemplateArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 container: pulumi.Input['MediaVideoMontageTemplateContainerArgs'],
                 audio: Optional[pulumi.Input['MediaVideoMontageTemplateAudioArgs']] = None,
                 audio_mixes: Optional[pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 video: Optional[pulumi.Input['MediaVideoMontageTemplateVideoArgs']] = None):
        """
        The set of arguments for constructing a MediaVideoMontageTemplate resource.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaVideoMontageTemplateContainerArgs'] container: container format.
        :param pulumi.Input['MediaVideoMontageTemplateAudioArgs'] audio: audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        :param pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]] audio_mixes: mixing parameters.
        :param pulumi.Input[str] duration: Collection duration 1: Default automatic analysis duration, 2: The unit is seconds, 3: Support float format, execution accuracy is accurate to milliseconds.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaVideoMontageTemplateVideoArgs'] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "container", container)
        if audio is not None:
            pulumi.set(__self__, "audio", audio)
        if audio_mixes is not None:
            pulumi.set(__self__, "audio_mixes", audio_mixes)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input['MediaVideoMontageTemplateContainerArgs']:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input['MediaVideoMontageTemplateContainerArgs']):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def audio(self) -> Optional[pulumi.Input['MediaVideoMontageTemplateAudioArgs']]:
        """
        audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        """
        return pulumi.get(self, "audio")

    @audio.setter
    def audio(self, value: Optional[pulumi.Input['MediaVideoMontageTemplateAudioArgs']]):
        pulumi.set(self, "audio", value)

    @property
    @pulumi.getter(name="audioMixes")
    def audio_mixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]]]:
        """
        mixing parameters.
        """
        return pulumi.get(self, "audio_mixes")

    @audio_mixes.setter
    def audio_mixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]]]):
        pulumi.set(self, "audio_mixes", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Collection duration 1: Default automatic analysis duration, 2: The unit is seconds, 3: Support float format, execution accuracy is accurate to milliseconds.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MediaVideoMontageTemplateVideoArgs']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MediaVideoMontageTemplateVideoArgs']]):
        pulumi.set(self, "video", value)


@pulumi.input_type
class _MediaVideoMontageTemplateState:
    def __init__(__self__, *,
                 audio: Optional[pulumi.Input['MediaVideoMontageTemplateAudioArgs']] = None,
                 audio_mixes: Optional[pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input['MediaVideoMontageTemplateContainerArgs']] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 video: Optional[pulumi.Input['MediaVideoMontageTemplateVideoArgs']] = None):
        """
        Input properties used for looking up and filtering MediaVideoMontageTemplate resources.
        :param pulumi.Input['MediaVideoMontageTemplateAudioArgs'] audio: audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        :param pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]] audio_mixes: mixing parameters.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input['MediaVideoMontageTemplateContainerArgs'] container: container format.
        :param pulumi.Input[str] duration: Collection duration 1: Default automatic analysis duration, 2: The unit is seconds, 3: Support float format, execution accuracy is accurate to milliseconds.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input['MediaVideoMontageTemplateVideoArgs'] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        if audio is not None:
            pulumi.set(__self__, "audio", audio)
        if audio_mixes is not None:
            pulumi.set(__self__, "audio_mixes", audio_mixes)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if container is not None:
            pulumi.set(__self__, "container", container)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if video is not None:
            pulumi.set(__self__, "video", video)

    @property
    @pulumi.getter
    def audio(self) -> Optional[pulumi.Input['MediaVideoMontageTemplateAudioArgs']]:
        """
        audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        """
        return pulumi.get(self, "audio")

    @audio.setter
    def audio(self, value: Optional[pulumi.Input['MediaVideoMontageTemplateAudioArgs']]):
        pulumi.set(self, "audio", value)

    @property
    @pulumi.getter(name="audioMixes")
    def audio_mixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]]]:
        """
        mixing parameters.
        """
        return pulumi.get(self, "audio_mixes")

    @audio_mixes.setter
    def audio_mixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MediaVideoMontageTemplateAudioMixArgs']]]]):
        pulumi.set(self, "audio_mixes", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def container(self) -> Optional[pulumi.Input['MediaVideoMontageTemplateContainerArgs']]:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: Optional[pulumi.Input['MediaVideoMontageTemplateContainerArgs']]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        Collection duration 1: Default automatic analysis duration, 2: The unit is seconds, 3: Support float format, execution accuracy is accurate to milliseconds.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def video(self) -> Optional[pulumi.Input['MediaVideoMontageTemplateVideoArgs']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

    @video.setter
    def video(self, value: Optional[pulumi.Input['MediaVideoMontageTemplateVideoArgs']]):
        pulumi.set(self, "video", value)


class MediaVideoMontageTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioArgs']]] = None,
                 audio_mixes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioMixArgs']]]]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateContainerArgs']]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 video: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateVideoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ci media_video_montage_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_video_montage_template = tencentcloud.ci.MediaVideoMontageTemplate("mediaVideoMontageTemplate",
            audio=tencentcloud.ci.MediaVideoMontageTemplateAudioArgs(
                bitrate="128",
                channels="4",
                codec="aac",
                remove="false",
                samplerate="44100",
            ),
            audio_mixes=[tencentcloud.ci.MediaVideoMontageTemplateAudioMixArgs(
                audio_source="https://terraform-ci-xxxxx.cos.ap-guangzhou.myqcloud.com/mp3%2Fnizhan-test.mp3",
                mix_mode="Once",
                replace="true",
            )],
            bucket="terraform-ci-xxxxx",
            container=tencentcloud.ci.MediaVideoMontageTemplateContainerArgs(
                format="mp4",
            ),
            duration="10.5",
            video=tencentcloud.ci.MediaVideoMontageTemplateVideoArgs(
                bitrate="1000",
                codec="H.264",
                crf="",
                fps="25",
                height="",
                remove="",
                width="1280",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_video_montage_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaVideoMontageTemplate:MediaVideoMontageTemplate media_video_montage_template terraform-ci-xxxxxx#t193e5ecc1b8154e57a8376b4405ad9c63
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioArgs']] audio: audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioMixArgs']]]] audio_mixes: mixing parameters.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateContainerArgs']] container: container format.
        :param pulumi.Input[str] duration: Collection duration 1: Default automatic analysis duration, 2: The unit is seconds, 3: Support float format, execution accuracy is accurate to milliseconds.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateVideoArgs']] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MediaVideoMontageTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ci media_video_montage_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        media_video_montage_template = tencentcloud.ci.MediaVideoMontageTemplate("mediaVideoMontageTemplate",
            audio=tencentcloud.ci.MediaVideoMontageTemplateAudioArgs(
                bitrate="128",
                channels="4",
                codec="aac",
                remove="false",
                samplerate="44100",
            ),
            audio_mixes=[tencentcloud.ci.MediaVideoMontageTemplateAudioMixArgs(
                audio_source="https://terraform-ci-xxxxx.cos.ap-guangzhou.myqcloud.com/mp3%2Fnizhan-test.mp3",
                mix_mode="Once",
                replace="true",
            )],
            bucket="terraform-ci-xxxxx",
            container=tencentcloud.ci.MediaVideoMontageTemplateContainerArgs(
                format="mp4",
            ),
            duration="10.5",
            video=tencentcloud.ci.MediaVideoMontageTemplateVideoArgs(
                bitrate="1000",
                codec="H.264",
                crf="",
                fps="25",
                height="",
                remove="",
                width="1280",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ci media_video_montage_template can be imported using the bucket#templateId, e.g.

        ```sh
        $ pulumi import tencentcloud:Ci/mediaVideoMontageTemplate:MediaVideoMontageTemplate media_video_montage_template terraform-ci-xxxxxx#t193e5ecc1b8154e57a8376b4405ad9c63
        ```

        :param str resource_name: The name of the resource.
        :param MediaVideoMontageTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MediaVideoMontageTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audio: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioArgs']]] = None,
                 audio_mixes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioMixArgs']]]]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 container: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateContainerArgs']]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 video: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateVideoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MediaVideoMontageTemplateArgs.__new__(MediaVideoMontageTemplateArgs)

            __props__.__dict__["audio"] = audio
            __props__.__dict__["audio_mixes"] = audio_mixes
            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if container is None and not opts.urn:
                raise TypeError("Missing required property 'container'")
            __props__.__dict__["container"] = container
            __props__.__dict__["duration"] = duration
            __props__.__dict__["name"] = name
            __props__.__dict__["video"] = video
        super(MediaVideoMontageTemplate, __self__).__init__(
            'tencentcloud:Ci/mediaVideoMontageTemplate:MediaVideoMontageTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audio: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioArgs']]] = None,
            audio_mixes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioMixArgs']]]]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            container: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateContainerArgs']]] = None,
            duration: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            video: Optional[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateVideoArgs']]] = None) -> 'MediaVideoMontageTemplate':
        """
        Get an existing MediaVideoMontageTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioArgs']] audio: audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateAudioMixArgs']]]] audio_mixes: mixing parameters.
        :param pulumi.Input[str] bucket: bucket name.
        :param pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateContainerArgs']] container: container format.
        :param pulumi.Input[str] duration: Collection duration 1: Default automatic analysis duration, 2: The unit is seconds, 3: Support float format, execution accuracy is accurate to milliseconds.
        :param pulumi.Input[str] name: The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        :param pulumi.Input[pulumi.InputType['MediaVideoMontageTemplateVideoArgs']] video: video information, do not upload Video, which is equivalent to deleting video information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MediaVideoMontageTemplateState.__new__(_MediaVideoMontageTemplateState)

        __props__.__dict__["audio"] = audio
        __props__.__dict__["audio_mixes"] = audio_mixes
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["container"] = container
        __props__.__dict__["duration"] = duration
        __props__.__dict__["name"] = name
        __props__.__dict__["video"] = video
        return MediaVideoMontageTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def audio(self) -> pulumi.Output[Optional['outputs.MediaVideoMontageTemplateAudio']]:
        """
        audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
        """
        return pulumi.get(self, "audio")

    @property
    @pulumi.getter(name="audioMixes")
    def audio_mixes(self) -> pulumi.Output[Optional[Sequence['outputs.MediaVideoMontageTemplateAudioMix']]]:
        """
        mixing parameters.
        """
        return pulumi.get(self, "audio_mixes")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        bucket name.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def container(self) -> pulumi.Output['outputs.MediaVideoMontageTemplateContainer']:
        """
        container format.
        """
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[Optional[str]]:
        """
        Collection duration 1: Default automatic analysis duration, 2: The unit is seconds, 3: Support float format, execution accuracy is accurate to milliseconds.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def video(self) -> pulumi.Output[Optional['outputs.MediaVideoMontageTemplateVideo']]:
        """
        video information, do not upload Video, which is equivalent to deleting video information.
        """
        return pulumi.get(self, "video")

