# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 zone_id: pulumi.Input[int],
                 band_width: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input['InstanceConfigArgs']] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 dynamic_retention_config: Optional[pulumi.Input['InstanceDynamicRetentionConfigArgs']] = None,
                 instance_type: Optional[pulumi.Input[int]] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 max_message_byte: Optional[pulumi.Input[int]] = None,
                 msg_retention_time: Optional[pulumi.Input[int]] = None,
                 multi_zone_flag: Optional[pulumi.Input[bool]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 public_network: Optional[pulumi.Input[int]] = None,
                 rebalance_time: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 specifications_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag_set: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 upgrade_strategy: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] zone_id: Available zone id.
        :param pulumi.Input[int] band_width: Instance bandwidth in MBps.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `PREPAID`.
        :param pulumi.Input['InstanceConfigArgs'] config: Instance configuration.
        :param pulumi.Input[int] disk_size: Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[str] disk_type: Type of disk.
        :param pulumi.Input['InstanceDynamicRetentionConfigArgs'] dynamic_retention_config: Dynamic message retention policy configuration.
        :param pulumi.Input[int] instance_type: Description of instance type. `profession`: 1, `standard`:  1(general), 2(standard), 3(advanced), 4(capacity), 5(specialized-1), 6(specialized-2), 7(specialized-3), 8(specialized-4), 9(exclusive).
        :param pulumi.Input[str] kafka_version: Kafka version (0.10.2/1.1.1/2.4.1).
        :param pulumi.Input[int] max_message_byte: The size of a single message in bytes at the instance level. Value range: `1024 - 12*1024*1024 bytes (i.e., 1KB-12MB).
        :param pulumi.Input[int] msg_retention_time: The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the default 0 is not filled, which means that the log retention time recovery policy is not enabled.
        :param pulumi.Input[bool] multi_zone_flag: Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
        :param pulumi.Input[int] partition: Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[int] period: Prepaid purchase time, such as 1, is one month.
        :param pulumi.Input[int] public_network: Bandwidth of the public network.
        :param pulumi.Input[int] rebalance_time: Modification of the rebalancing time after upgrade.
        :param pulumi.Input[int] renew_flag: Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear no automatic renewal (user setting).
        :param pulumi.Input[str] specifications_type: Specifications type of instance. Allowed values are `standard`, `profession`. Default is `profession`.
        :param pulumi.Input[str] subnet_id: Subnet id, it will be basic network if not set.
        :param pulumi.Input[Mapping[str, Any]] tag_set: Tag set of instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead. Tags of instance. Partition size, the professional version does not need tag.
        :param pulumi.Input[int] upgrade_strategy: POSTPAID_BY_HOUR scale-down mode
               - 1: stable transformation;
               - 2: High-speed transformer.
        :param pulumi.Input[str] vpc_id: Vpc id, it will be basic network if not set.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
        """
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "zone_id", zone_id)
        if band_width is not None:
            pulumi.set(__self__, "band_width", band_width)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if dynamic_retention_config is not None:
            pulumi.set(__self__, "dynamic_retention_config", dynamic_retention_config)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if max_message_byte is not None:
            pulumi.set(__self__, "max_message_byte", max_message_byte)
        if msg_retention_time is not None:
            pulumi.set(__self__, "msg_retention_time", msg_retention_time)
        if multi_zone_flag is not None:
            pulumi.set(__self__, "multi_zone_flag", multi_zone_flag)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if public_network is not None:
            pulumi.set(__self__, "public_network", public_network)
        if rebalance_time is not None:
            pulumi.set(__self__, "rebalance_time", rebalance_time)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if specifications_type is not None:
            pulumi.set(__self__, "specifications_type", specifications_type)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tag_set is not None:
            pulumi.set(__self__, "tag_set", tag_set)
        if tags is not None:
            warnings.warn("""It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags is deprecated: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""")
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if upgrade_strategy is not None:
            pulumi.set(__self__, "upgrade_strategy", upgrade_strategy)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_ids is not None:
            pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[int]:
        """
        Available zone id.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="bandWidth")
    def band_width(self) -> Optional[pulumi.Input[int]]:
        """
        Instance bandwidth in MBps.
        """
        return pulumi.get(self, "band_width")

    @band_width.setter
    def band_width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "band_width", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `PREPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['InstanceConfigArgs']]:
        """
        Instance configuration.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['InstanceConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of disk.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="dynamicRetentionConfig")
    def dynamic_retention_config(self) -> Optional[pulumi.Input['InstanceDynamicRetentionConfigArgs']]:
        """
        Dynamic message retention policy configuration.
        """
        return pulumi.get(self, "dynamic_retention_config")

    @dynamic_retention_config.setter
    def dynamic_retention_config(self, value: Optional[pulumi.Input['InstanceDynamicRetentionConfigArgs']]):
        pulumi.set(self, "dynamic_retention_config", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[int]]:
        """
        Description of instance type. `profession`: 1, `standard`:  1(general), 2(standard), 3(advanced), 4(capacity), 5(specialized-1), 6(specialized-2), 7(specialized-3), 8(specialized-4), 9(exclusive).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kafka version (0.10.2/1.1.1/2.4.1).
        """
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="maxMessageByte")
    def max_message_byte(self) -> Optional[pulumi.Input[int]]:
        """
        The size of a single message in bytes at the instance level. Value range: `1024 - 12*1024*1024 bytes (i.e., 1KB-12MB).
        """
        return pulumi.get(self, "max_message_byte")

    @max_message_byte.setter
    def max_message_byte(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_message_byte", value)

    @property
    @pulumi.getter(name="msgRetentionTime")
    def msg_retention_time(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the default 0 is not filled, which means that the log retention time recovery policy is not enabled.
        """
        return pulumi.get(self, "msg_retention_time")

    @msg_retention_time.setter
    def msg_retention_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_retention_time", value)

    @property
    @pulumi.getter(name="multiZoneFlag")
    def multi_zone_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
        """
        return pulumi.get(self, "multi_zone_flag")

    @multi_zone_flag.setter
    def multi_zone_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_zone_flag", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid purchase time, such as 1, is one month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="publicNetwork")
    def public_network(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth of the public network.
        """
        return pulumi.get(self, "public_network")

    @public_network.setter
    def public_network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_network", value)

    @property
    @pulumi.getter(name="rebalanceTime")
    def rebalance_time(self) -> Optional[pulumi.Input[int]]:
        """
        Modification of the rebalancing time after upgrade.
        """
        return pulumi.get(self, "rebalance_time")

    @rebalance_time.setter
    def rebalance_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rebalance_time", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear no automatic renewal (user setting).
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="specificationsType")
    def specifications_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifications type of instance. Allowed values are `standard`, `profession`. Default is `profession`.
        """
        return pulumi.get(self, "specifications_type")

    @specifications_type.setter
    def specifications_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "specifications_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id, it will be basic network if not set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="tagSet")
    def tag_set(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag set of instance.
        """
        return pulumi.get(self, "tag_set")

    @tag_set.setter
    def tag_set(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tag_set", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead. Tags of instance. Partition size, the professional version does not need tag.
        """
        warnings.warn("""It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags is deprecated: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""")

        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input[int]]:
        """
        POSTPAID_BY_HOUR scale-down mode
        - 1: stable transformation;
        - 2: High-speed transformer.
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upgrade_strategy", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc id, it will be basic network if not set.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "zone_ids", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 band_width: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input['InstanceConfigArgs']] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 dynamic_retention_config: Optional[pulumi.Input['InstanceDynamicRetentionConfigArgs']] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[int]] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 max_message_byte: Optional[pulumi.Input[int]] = None,
                 msg_retention_time: Optional[pulumi.Input[int]] = None,
                 multi_zone_flag: Optional[pulumi.Input[bool]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 public_network: Optional[pulumi.Input[int]] = None,
                 rebalance_time: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 specifications_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag_set: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 upgrade_strategy: Optional[pulumi.Input[int]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] band_width: Instance bandwidth in MBps.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `PREPAID`.
        :param pulumi.Input['InstanceConfigArgs'] config: Instance configuration.
        :param pulumi.Input[int] disk_size: Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[str] disk_type: Type of disk.
        :param pulumi.Input['InstanceDynamicRetentionConfigArgs'] dynamic_retention_config: Dynamic message retention policy configuration.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] instance_type: Description of instance type. `profession`: 1, `standard`:  1(general), 2(standard), 3(advanced), 4(capacity), 5(specialized-1), 6(specialized-2), 7(specialized-3), 8(specialized-4), 9(exclusive).
        :param pulumi.Input[str] kafka_version: Kafka version (0.10.2/1.1.1/2.4.1).
        :param pulumi.Input[int] max_message_byte: The size of a single message in bytes at the instance level. Value range: `1024 - 12*1024*1024 bytes (i.e., 1KB-12MB).
        :param pulumi.Input[int] msg_retention_time: The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the default 0 is not filled, which means that the log retention time recovery policy is not enabled.
        :param pulumi.Input[bool] multi_zone_flag: Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
        :param pulumi.Input[int] partition: Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[int] period: Prepaid purchase time, such as 1, is one month.
        :param pulumi.Input[int] public_network: Bandwidth of the public network.
        :param pulumi.Input[int] rebalance_time: Modification of the rebalancing time after upgrade.
        :param pulumi.Input[int] renew_flag: Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear no automatic renewal (user setting).
        :param pulumi.Input[str] specifications_type: Specifications type of instance. Allowed values are `standard`, `profession`. Default is `profession`.
        :param pulumi.Input[str] subnet_id: Subnet id, it will be basic network if not set.
        :param pulumi.Input[Mapping[str, Any]] tag_set: Tag set of instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]] tags: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead. Tags of instance. Partition size, the professional version does not need tag.
        :param pulumi.Input[int] upgrade_strategy: POSTPAID_BY_HOUR scale-down mode
               - 1: stable transformation;
               - 2: High-speed transformer.
        :param pulumi.Input[str] vip: Vip of instance.
        :param pulumi.Input[str] vpc_id: Vpc id, it will be basic network if not set.
        :param pulumi.Input[str] vport: Type of instance.
        :param pulumi.Input[int] zone_id: Available zone id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
        """
        if band_width is not None:
            pulumi.set(__self__, "band_width", band_width)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if dynamic_retention_config is not None:
            pulumi.set(__self__, "dynamic_retention_config", dynamic_retention_config)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if kafka_version is not None:
            pulumi.set(__self__, "kafka_version", kafka_version)
        if max_message_byte is not None:
            pulumi.set(__self__, "max_message_byte", max_message_byte)
        if msg_retention_time is not None:
            pulumi.set(__self__, "msg_retention_time", msg_retention_time)
        if multi_zone_flag is not None:
            pulumi.set(__self__, "multi_zone_flag", multi_zone_flag)
        if partition is not None:
            pulumi.set(__self__, "partition", partition)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if public_network is not None:
            pulumi.set(__self__, "public_network", public_network)
        if rebalance_time is not None:
            pulumi.set(__self__, "rebalance_time", rebalance_time)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if specifications_type is not None:
            pulumi.set(__self__, "specifications_type", specifications_type)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tag_set is not None:
            pulumi.set(__self__, "tag_set", tag_set)
        if tags is not None:
            warnings.warn("""It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""", DeprecationWarning)
            pulumi.log.warn("""tags is deprecated: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""")
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if upgrade_strategy is not None:
            pulumi.set(__self__, "upgrade_strategy", upgrade_strategy)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)
        if zone_ids is not None:
            pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="bandWidth")
    def band_width(self) -> Optional[pulumi.Input[int]]:
        """
        Instance bandwidth in MBps.
        """
        return pulumi.get(self, "band_width")

    @band_width.setter
    def band_width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "band_width", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `PREPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['InstanceConfigArgs']]:
        """
        Instance configuration.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['InstanceConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of disk.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter(name="dynamicRetentionConfig")
    def dynamic_retention_config(self) -> Optional[pulumi.Input['InstanceDynamicRetentionConfigArgs']]:
        """
        Dynamic message retention policy configuration.
        """
        return pulumi.get(self, "dynamic_retention_config")

    @dynamic_retention_config.setter
    def dynamic_retention_config(self, value: Optional[pulumi.Input['InstanceDynamicRetentionConfigArgs']]):
        pulumi.set(self, "dynamic_retention_config", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[int]]:
        """
        Description of instance type. `profession`: 1, `standard`:  1(general), 2(standard), 3(advanced), 4(capacity), 5(specialized-1), 6(specialized-2), 7(specialized-3), 8(specialized-4), 9(exclusive).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kafka version (0.10.2/1.1.1/2.4.1).
        """
        return pulumi.get(self, "kafka_version")

    @kafka_version.setter
    def kafka_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_version", value)

    @property
    @pulumi.getter(name="maxMessageByte")
    def max_message_byte(self) -> Optional[pulumi.Input[int]]:
        """
        The size of a single message in bytes at the instance level. Value range: `1024 - 12*1024*1024 bytes (i.e., 1KB-12MB).
        """
        return pulumi.get(self, "max_message_byte")

    @max_message_byte.setter
    def max_message_byte(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_message_byte", value)

    @property
    @pulumi.getter(name="msgRetentionTime")
    def msg_retention_time(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the default 0 is not filled, which means that the log retention time recovery policy is not enabled.
        """
        return pulumi.get(self, "msg_retention_time")

    @msg_retention_time.setter
    def msg_retention_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_retention_time", value)

    @property
    @pulumi.getter(name="multiZoneFlag")
    def multi_zone_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
        """
        return pulumi.get(self, "multi_zone_flag")

    @multi_zone_flag.setter
    def multi_zone_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_zone_flag", value)

    @property
    @pulumi.getter
    def partition(self) -> Optional[pulumi.Input[int]]:
        """
        Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        """
        return pulumi.get(self, "partition")

    @partition.setter
    def partition(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid purchase time, such as 1, is one month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="publicNetwork")
    def public_network(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth of the public network.
        """
        return pulumi.get(self, "public_network")

    @public_network.setter
    def public_network(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "public_network", value)

    @property
    @pulumi.getter(name="rebalanceTime")
    def rebalance_time(self) -> Optional[pulumi.Input[int]]:
        """
        Modification of the rebalancing time after upgrade.
        """
        return pulumi.get(self, "rebalance_time")

    @rebalance_time.setter
    def rebalance_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rebalance_time", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear no automatic renewal (user setting).
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="specificationsType")
    def specifications_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifications type of instance. Allowed values are `standard`, `profession`. Default is `profession`.
        """
        return pulumi.get(self, "specifications_type")

    @specifications_type.setter
    def specifications_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "specifications_type", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id, it will be basic network if not set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="tagSet")
    def tag_set(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag set of instance.
        """
        return pulumi.get(self, "tag_set")

    @tag_set.setter
    def tag_set(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tag_set", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        """
        It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead. Tags of instance. Partition size, the professional version does not need tag.
        """
        warnings.warn("""It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags is deprecated: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""")

        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> Optional[pulumi.Input[int]]:
        """
        POSTPAID_BY_HOUR scale-down mode
        - 1: stable transformation;
        - 2: High-speed transformer.
        """
        return pulumi.get(self, "upgrade_strategy")

    @upgrade_strategy.setter
    def upgrade_strategy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upgrade_strategy", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        Vip of instance.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc id, it will be basic network if not set.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[str]]:
        """
        Type of instance.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vport", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[int]]:
        """
        Available zone id.
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "zone_ids", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 band_width: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['InstanceConfigArgs']]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 dynamic_retention_config: Optional[pulumi.Input[pulumi.InputType['InstanceDynamicRetentionConfigArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[int]] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 max_message_byte: Optional[pulumi.Input[int]] = None,
                 msg_retention_time: Optional[pulumi.Input[int]] = None,
                 multi_zone_flag: Optional[pulumi.Input[bool]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 public_network: Optional[pulumi.Input[int]] = None,
                 rebalance_time: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 specifications_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag_set: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 upgrade_strategy: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Use this resource to create ckafka instance.

        ## Example Usage

        ### Basic Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        vpc_id = config.get("vpcId")
        if vpc_id is None:
            vpc_id = "vpc-68vi2d3h"
        subnet_id = config.get("subnetId")
        if subnet_id is None:
            subnet_id = "subnet-ob6clqwk"
        gz = tencentcloud.Availability.get_zones_by_product(name="ap-guangzhou-3",
            product="ckafka")
        kafka_instance_prepaid = tencentcloud.ckafka.Instance("kafkaInstancePrepaid",
            instance_name="ckafka-instance-prepaid",
            zone_id=gz.zones[0].id,
            period=1,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            msg_retention_time=1300,
            renew_flag=0,
            kafka_version="2.4.1",
            disk_size=200,
            disk_type="CLOUD_BASIC",
            band_width=20,
            partition=400,
            specifications_type="standard",
            instance_type=2,
            config=tencentcloud.ckafka.InstanceConfigArgs(
                auto_create_topic_enable=True,
                default_num_partitions=3,
                default_replication_factor=3,
            ),
            dynamic_retention_config=tencentcloud.ckafka.InstanceDynamicRetentionConfigArgs(
                enable=1,
            ))
        kafka_instance_postpaid = tencentcloud.ckafka.Instance("kafkaInstancePostpaid",
            instance_name="ckafka-instance-postpaid",
            zone_id=gz.zones[0].id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            msg_retention_time=1300,
            kafka_version="1.1.1",
            disk_size=200,
            band_width=20,
            disk_type="CLOUD_BASIC",
            partition=400,
            charge_type="POSTPAID_BY_HOUR",
            config=tencentcloud.ckafka.InstanceConfigArgs(
                auto_create_topic_enable=True,
                default_num_partitions=3,
                default_replication_factor=3,
            ),
            dynamic_retention_config=tencentcloud.ckafka.InstanceDynamicRetentionConfigArgs(
                enable=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Multi zone Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        vpc_id = config.get("vpcId")
        if vpc_id is None:
            vpc_id = "vpc-68vi2d3h"
        subnet_id = config.get("subnetId")
        if subnet_id is None:
            subnet_id = "subnet-ob6clqwk"
        gz3 = tencentcloud.Availability.get_zones_by_product(name="ap-guangzhou-3",
            product="ckafka")
        gz6 = tencentcloud.Availability.get_zones_by_product(name="ap-guangzhou-6",
            product="ckafka")
        kafka_instance = tencentcloud.ckafka.Instance("kafkaInstance",
            instance_name="ckafka-instance-maz-tf-test",
            zone_id=gz3.zones[0].id,
            multi_zone_flag=True,
            zone_ids=[
                gz3.zones[0].id,
                gz6.zones[0].id,
            ],
            period=1,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            msg_retention_time=1300,
            renew_flag=0,
            kafka_version="1.1.1",
            disk_size=500,
            disk_type="CLOUD_BASIC",
            config=tencentcloud.ckafka.InstanceConfigArgs(
                auto_create_topic_enable=True,
                default_num_partitions=3,
                default_replication_factor=3,
            ),
            dynamic_retention_config=tencentcloud.ckafka.InstanceDynamicRetentionConfigArgs(
                enable=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka instance can be imported using the instance_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/instance:Instance foo ckafka-f9ife4zz
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] band_width: Instance bandwidth in MBps.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `PREPAID`.
        :param pulumi.Input[pulumi.InputType['InstanceConfigArgs']] config: Instance configuration.
        :param pulumi.Input[int] disk_size: Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[str] disk_type: Type of disk.
        :param pulumi.Input[pulumi.InputType['InstanceDynamicRetentionConfigArgs']] dynamic_retention_config: Dynamic message retention policy configuration.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] instance_type: Description of instance type. `profession`: 1, `standard`:  1(general), 2(standard), 3(advanced), 4(capacity), 5(specialized-1), 6(specialized-2), 7(specialized-3), 8(specialized-4), 9(exclusive).
        :param pulumi.Input[str] kafka_version: Kafka version (0.10.2/1.1.1/2.4.1).
        :param pulumi.Input[int] max_message_byte: The size of a single message in bytes at the instance level. Value range: `1024 - 12*1024*1024 bytes (i.e., 1KB-12MB).
        :param pulumi.Input[int] msg_retention_time: The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the default 0 is not filled, which means that the log retention time recovery policy is not enabled.
        :param pulumi.Input[bool] multi_zone_flag: Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
        :param pulumi.Input[int] partition: Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[int] period: Prepaid purchase time, such as 1, is one month.
        :param pulumi.Input[int] public_network: Bandwidth of the public network.
        :param pulumi.Input[int] rebalance_time: Modification of the rebalancing time after upgrade.
        :param pulumi.Input[int] renew_flag: Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear no automatic renewal (user setting).
        :param pulumi.Input[str] specifications_type: Specifications type of instance. Allowed values are `standard`, `profession`. Default is `profession`.
        :param pulumi.Input[str] subnet_id: Subnet id, it will be basic network if not set.
        :param pulumi.Input[Mapping[str, Any]] tag_set: Tag set of instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead. Tags of instance. Partition size, the professional version does not need tag.
        :param pulumi.Input[int] upgrade_strategy: POSTPAID_BY_HOUR scale-down mode
               - 1: stable transformation;
               - 2: High-speed transformer.
        :param pulumi.Input[str] vpc_id: Vpc id, it will be basic network if not set.
        :param pulumi.Input[int] zone_id: Available zone id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create ckafka instance.

        ## Example Usage

        ### Basic Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        vpc_id = config.get("vpcId")
        if vpc_id is None:
            vpc_id = "vpc-68vi2d3h"
        subnet_id = config.get("subnetId")
        if subnet_id is None:
            subnet_id = "subnet-ob6clqwk"
        gz = tencentcloud.Availability.get_zones_by_product(name="ap-guangzhou-3",
            product="ckafka")
        kafka_instance_prepaid = tencentcloud.ckafka.Instance("kafkaInstancePrepaid",
            instance_name="ckafka-instance-prepaid",
            zone_id=gz.zones[0].id,
            period=1,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            msg_retention_time=1300,
            renew_flag=0,
            kafka_version="2.4.1",
            disk_size=200,
            disk_type="CLOUD_BASIC",
            band_width=20,
            partition=400,
            specifications_type="standard",
            instance_type=2,
            config=tencentcloud.ckafka.InstanceConfigArgs(
                auto_create_topic_enable=True,
                default_num_partitions=3,
                default_replication_factor=3,
            ),
            dynamic_retention_config=tencentcloud.ckafka.InstanceDynamicRetentionConfigArgs(
                enable=1,
            ))
        kafka_instance_postpaid = tencentcloud.ckafka.Instance("kafkaInstancePostpaid",
            instance_name="ckafka-instance-postpaid",
            zone_id=gz.zones[0].id,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            msg_retention_time=1300,
            kafka_version="1.1.1",
            disk_size=200,
            band_width=20,
            disk_type="CLOUD_BASIC",
            partition=400,
            charge_type="POSTPAID_BY_HOUR",
            config=tencentcloud.ckafka.InstanceConfigArgs(
                auto_create_topic_enable=True,
                default_num_partitions=3,
                default_replication_factor=3,
            ),
            dynamic_retention_config=tencentcloud.ckafka.InstanceDynamicRetentionConfigArgs(
                enable=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Multi zone Instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        vpc_id = config.get("vpcId")
        if vpc_id is None:
            vpc_id = "vpc-68vi2d3h"
        subnet_id = config.get("subnetId")
        if subnet_id is None:
            subnet_id = "subnet-ob6clqwk"
        gz3 = tencentcloud.Availability.get_zones_by_product(name="ap-guangzhou-3",
            product="ckafka")
        gz6 = tencentcloud.Availability.get_zones_by_product(name="ap-guangzhou-6",
            product="ckafka")
        kafka_instance = tencentcloud.ckafka.Instance("kafkaInstance",
            instance_name="ckafka-instance-maz-tf-test",
            zone_id=gz3.zones[0].id,
            multi_zone_flag=True,
            zone_ids=[
                gz3.zones[0].id,
                gz6.zones[0].id,
            ],
            period=1,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            msg_retention_time=1300,
            renew_flag=0,
            kafka_version="1.1.1",
            disk_size=500,
            disk_type="CLOUD_BASIC",
            config=tencentcloud.ckafka.InstanceConfigArgs(
                auto_create_topic_enable=True,
                default_num_partitions=3,
                default_replication_factor=3,
            ),
            dynamic_retention_config=tencentcloud.ckafka.InstanceDynamicRetentionConfigArgs(
                enable=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka instance can be imported using the instance_id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/instance:Instance foo ckafka-f9ife4zz
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 band_width: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['InstanceConfigArgs']]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 dynamic_retention_config: Optional[pulumi.Input[pulumi.InputType['InstanceDynamicRetentionConfigArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[int]] = None,
                 kafka_version: Optional[pulumi.Input[str]] = None,
                 max_message_byte: Optional[pulumi.Input[int]] = None,
                 msg_retention_time: Optional[pulumi.Input[int]] = None,
                 multi_zone_flag: Optional[pulumi.Input[bool]] = None,
                 partition: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 public_network: Optional[pulumi.Input[int]] = None,
                 rebalance_time: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 specifications_type: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag_set: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
                 upgrade_strategy: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone_id: Optional[pulumi.Input[int]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["band_width"] = band_width
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["config"] = config
            __props__.__dict__["disk_size"] = disk_size
            __props__.__dict__["disk_type"] = disk_type
            __props__.__dict__["dynamic_retention_config"] = dynamic_retention_config
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["kafka_version"] = kafka_version
            __props__.__dict__["max_message_byte"] = max_message_byte
            __props__.__dict__["msg_retention_time"] = msg_retention_time
            __props__.__dict__["multi_zone_flag"] = multi_zone_flag
            __props__.__dict__["partition"] = partition
            __props__.__dict__["period"] = period
            __props__.__dict__["public_network"] = public_network
            __props__.__dict__["rebalance_time"] = rebalance_time
            __props__.__dict__["renew_flag"] = renew_flag
            __props__.__dict__["specifications_type"] = specifications_type
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tag_set"] = tag_set
            __props__.__dict__["tags"] = tags
            __props__.__dict__["upgrade_strategy"] = upgrade_strategy
            __props__.__dict__["vpc_id"] = vpc_id
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["zone_ids"] = zone_ids
            __props__.__dict__["vip"] = None
            __props__.__dict__["vport"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Ckafka/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            band_width: Optional[pulumi.Input[int]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            config: Optional[pulumi.Input[pulumi.InputType['InstanceConfigArgs']]] = None,
            disk_size: Optional[pulumi.Input[int]] = None,
            disk_type: Optional[pulumi.Input[str]] = None,
            dynamic_retention_config: Optional[pulumi.Input[pulumi.InputType['InstanceDynamicRetentionConfigArgs']]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_type: Optional[pulumi.Input[int]] = None,
            kafka_version: Optional[pulumi.Input[str]] = None,
            max_message_byte: Optional[pulumi.Input[int]] = None,
            msg_retention_time: Optional[pulumi.Input[int]] = None,
            multi_zone_flag: Optional[pulumi.Input[bool]] = None,
            partition: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            public_network: Optional[pulumi.Input[int]] = None,
            rebalance_time: Optional[pulumi.Input[int]] = None,
            renew_flag: Optional[pulumi.Input[int]] = None,
            specifications_type: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tag_set: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]]] = None,
            upgrade_strategy: Optional[pulumi.Input[int]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[str]] = None,
            zone_id: Optional[pulumi.Input[int]] = None,
            zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] band_width: Instance bandwidth in MBps.
        :param pulumi.Input[str] charge_type: The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `PREPAID`.
        :param pulumi.Input[pulumi.InputType['InstanceConfigArgs']] config: Instance configuration.
        :param pulumi.Input[int] disk_size: Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[str] disk_type: Type of disk.
        :param pulumi.Input[pulumi.InputType['InstanceDynamicRetentionConfigArgs']] dynamic_retention_config: Dynamic message retention policy configuration.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] instance_type: Description of instance type. `profession`: 1, `standard`:  1(general), 2(standard), 3(advanced), 4(capacity), 5(specialized-1), 6(specialized-2), 7(specialized-3), 8(specialized-4), 9(exclusive).
        :param pulumi.Input[str] kafka_version: Kafka version (0.10.2/1.1.1/2.4.1).
        :param pulumi.Input[int] max_message_byte: The size of a single message in bytes at the instance level. Value range: `1024 - 12*1024*1024 bytes (i.e., 1KB-12MB).
        :param pulumi.Input[int] msg_retention_time: The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the default 0 is not filled, which means that the log retention time recovery policy is not enabled.
        :param pulumi.Input[bool] multi_zone_flag: Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
        :param pulumi.Input[int] partition: Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        :param pulumi.Input[int] period: Prepaid purchase time, such as 1, is one month.
        :param pulumi.Input[int] public_network: Bandwidth of the public network.
        :param pulumi.Input[int] rebalance_time: Modification of the rebalancing time after upgrade.
        :param pulumi.Input[int] renew_flag: Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear no automatic renewal (user setting).
        :param pulumi.Input[str] specifications_type: Specifications type of instance. Allowed values are `standard`, `profession`. Default is `profession`.
        :param pulumi.Input[str] subnet_id: Subnet id, it will be basic network if not set.
        :param pulumi.Input[Mapping[str, Any]] tag_set: Tag set of instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTagArgs']]]] tags: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead. Tags of instance. Partition size, the professional version does not need tag.
        :param pulumi.Input[int] upgrade_strategy: POSTPAID_BY_HOUR scale-down mode
               - 1: stable transformation;
               - 2: High-speed transformer.
        :param pulumi.Input[str] vip: Vip of instance.
        :param pulumi.Input[str] vpc_id: Vpc id, it will be basic network if not set.
        :param pulumi.Input[str] vport: Type of instance.
        :param pulumi.Input[int] zone_id: Available zone id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["band_width"] = band_width
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["config"] = config
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["disk_type"] = disk_type
        __props__.__dict__["dynamic_retention_config"] = dynamic_retention_config
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["kafka_version"] = kafka_version
        __props__.__dict__["max_message_byte"] = max_message_byte
        __props__.__dict__["msg_retention_time"] = msg_retention_time
        __props__.__dict__["multi_zone_flag"] = multi_zone_flag
        __props__.__dict__["partition"] = partition
        __props__.__dict__["period"] = period
        __props__.__dict__["public_network"] = public_network
        __props__.__dict__["rebalance_time"] = rebalance_time
        __props__.__dict__["renew_flag"] = renew_flag
        __props__.__dict__["specifications_type"] = specifications_type
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tag_set"] = tag_set
        __props__.__dict__["tags"] = tags
        __props__.__dict__["upgrade_strategy"] = upgrade_strategy
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vport"] = vport
        __props__.__dict__["zone_id"] = zone_id
        __props__.__dict__["zone_ids"] = zone_ids
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bandWidth")
    def band_width(self) -> pulumi.Output[int]:
        """
        Instance bandwidth in MBps.
        """
        return pulumi.get(self, "band_width")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `PREPAID`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.InstanceConfig']]:
        """
        Instance configuration.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[int]:
        """
        Disk Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Output[str]:
        """
        Type of disk.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter(name="dynamicRetentionConfig")
    def dynamic_retention_config(self) -> pulumi.Output['outputs.InstanceDynamicRetentionConfig']:
        """
        Dynamic message retention policy configuration.
        """
        return pulumi.get(self, "dynamic_retention_config")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[int]:
        """
        Description of instance type. `profession`: 1, `standard`:  1(general), 2(standard), 3(advanced), 4(capacity), 5(specialized-1), 6(specialized-2), 7(specialized-3), 8(specialized-4), 9(exclusive).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="kafkaVersion")
    def kafka_version(self) -> pulumi.Output[str]:
        """
        Kafka version (0.10.2/1.1.1/2.4.1).
        """
        return pulumi.get(self, "kafka_version")

    @property
    @pulumi.getter(name="maxMessageByte")
    def max_message_byte(self) -> pulumi.Output[int]:
        """
        The size of a single message in bytes at the instance level. Value range: `1024 - 12*1024*1024 bytes (i.e., 1KB-12MB).
        """
        return pulumi.get(self, "max_message_byte")

    @property
    @pulumi.getter(name="msgRetentionTime")
    def msg_retention_time(self) -> pulumi.Output[int]:
        """
        The maximum retention time of instance logs, in minutes. the default is 10080 (7 days), the maximum is 30 days, and the default 0 is not filled, which means that the log retention time recovery policy is not enabled.
        """
        return pulumi.get(self, "msg_retention_time")

    @property
    @pulumi.getter(name="multiZoneFlag")
    def multi_zone_flag(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the instance is multi zones. NOTE: if set to `true`, `zone_ids` must set together.
        """
        return pulumi.get(self, "multi_zone_flag")

    @property
    @pulumi.getter
    def partition(self) -> pulumi.Output[int]:
        """
        Partition Size. Its interval varies with bandwidth, and the input must be within the interval, which can be viewed through the control. If it is not within the interval, the plan will cause a change when first created.
        """
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        Prepaid purchase time, such as 1, is one month.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="publicNetwork")
    def public_network(self) -> pulumi.Output[int]:
        """
        Bandwidth of the public network.
        """
        return pulumi.get(self, "public_network")

    @property
    @pulumi.getter(name="rebalanceTime")
    def rebalance_time(self) -> pulumi.Output[Optional[int]]:
        """
        Modification of the rebalancing time after upgrade.
        """
        return pulumi.get(self, "rebalance_time")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> pulumi.Output[int]:
        """
        Prepaid automatic renewal mark, 0 means the default state, the initial state, 1 means automatic renewal, 2 means clear no automatic renewal (user setting).
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="specificationsType")
    def specifications_type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifications type of instance. Allowed values are `standard`, `profession`. Default is `profession`.
        """
        return pulumi.get(self, "specifications_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        Subnet id, it will be basic network if not set.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tagSet")
    def tag_set(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Tag set of instance.
        """
        return pulumi.get(self, "tag_set")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.InstanceTag']]:
        """
        It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead. Tags of instance. Partition size, the professional version does not need tag.
        """
        warnings.warn("""It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""", DeprecationWarning)
        pulumi.log.warn("""tags is deprecated: It has been deprecated from version 1.78.5, because it do not support change. Use `tag_set` instead.""")

        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="upgradeStrategy")
    def upgrade_strategy(self) -> pulumi.Output[Optional[int]]:
        """
        POSTPAID_BY_HOUR scale-down mode
        - 1: stable transformation;
        - 2: High-speed transformer.
        """
        return pulumi.get(self, "upgrade_strategy")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        Vip of instance.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Vpc id, it will be basic network if not set.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[str]:
        """
        Type of instance.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[int]:
        """
        Available zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of available zone id. NOTE: this argument must set together with `multi_zone_flag`.
        """
        return pulumi.get(self, "zone_ids")

