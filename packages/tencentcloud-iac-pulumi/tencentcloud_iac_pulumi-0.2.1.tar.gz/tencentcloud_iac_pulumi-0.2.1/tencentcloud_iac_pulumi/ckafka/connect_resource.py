# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConnectResourceArgs', 'ConnectResource']

@pulumi.input_type
class ConnectResourceArgs:
    def __init__(__self__, *,
                 resource_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 clickhouse_connect_param: Optional[pulumi.Input['ConnectResourceClickhouseConnectParamArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 doris_connect_param: Optional[pulumi.Input['ConnectResourceDorisConnectParamArgs']] = None,
                 dts_connect_param: Optional[pulumi.Input['ConnectResourceDtsConnectParamArgs']] = None,
                 es_connect_param: Optional[pulumi.Input['ConnectResourceEsConnectParamArgs']] = None,
                 kafka_connect_param: Optional[pulumi.Input['ConnectResourceKafkaConnectParamArgs']] = None,
                 mariadb_connect_param: Optional[pulumi.Input['ConnectResourceMariadbConnectParamArgs']] = None,
                 mongodb_connect_param: Optional[pulumi.Input['ConnectResourceMongodbConnectParamArgs']] = None,
                 mysql_connect_param: Optional[pulumi.Input['ConnectResourceMysqlConnectParamArgs']] = None,
                 postgresql_connect_param: Optional[pulumi.Input['ConnectResourcePostgresqlConnectParamArgs']] = None,
                 sqlserver_connect_param: Optional[pulumi.Input['ConnectResourceSqlserverConnectParamArgs']] = None):
        """
        The set of arguments for constructing a ConnectResource resource.
        :param pulumi.Input[str] resource_name: connection source name.
        :param pulumi.Input[str] type: connection source type.
        :param pulumi.Input['ConnectResourceClickhouseConnectParamArgs'] clickhouse_connect_param: ClickHouse configuration, required when Type is CLICKHOUSE.
        :param pulumi.Input[str] description: Connection source description.
        :param pulumi.Input['ConnectResourceDorisConnectParamArgs'] doris_connect_param: Doris configuration, required when Type is DORIS.
        :param pulumi.Input['ConnectResourceDtsConnectParamArgs'] dts_connect_param: Dts configuration, required when Type is DTS.
        :param pulumi.Input['ConnectResourceEsConnectParamArgs'] es_connect_param: Es configuration, required when Type is ES.
        :param pulumi.Input['ConnectResourceKafkaConnectParamArgs'] kafka_connect_param: Kafka configuration, required when Type is KAFKA.
        :param pulumi.Input['ConnectResourceMariadbConnectParamArgs'] mariadb_connect_param: Maria DB configuration, required when Type is MARIADB.
        :param pulumi.Input['ConnectResourceMongodbConnectParamArgs'] mongodb_connect_param: Mongo DB configuration, required when Type is MONGODB.
        :param pulumi.Input['ConnectResourceMysqlConnectParamArgs'] mysql_connect_param: MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
        :param pulumi.Input['ConnectResourcePostgresqlConnectParamArgs'] postgresql_connect_param: Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
        :param pulumi.Input['ConnectResourceSqlserverConnectParamArgs'] sqlserver_connect_param: SQLServer configuration, required when Type is SQLSERVER.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "type", type)
        if clickhouse_connect_param is not None:
            pulumi.set(__self__, "clickhouse_connect_param", clickhouse_connect_param)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if doris_connect_param is not None:
            pulumi.set(__self__, "doris_connect_param", doris_connect_param)
        if dts_connect_param is not None:
            pulumi.set(__self__, "dts_connect_param", dts_connect_param)
        if es_connect_param is not None:
            pulumi.set(__self__, "es_connect_param", es_connect_param)
        if kafka_connect_param is not None:
            pulumi.set(__self__, "kafka_connect_param", kafka_connect_param)
        if mariadb_connect_param is not None:
            pulumi.set(__self__, "mariadb_connect_param", mariadb_connect_param)
        if mongodb_connect_param is not None:
            pulumi.set(__self__, "mongodb_connect_param", mongodb_connect_param)
        if mysql_connect_param is not None:
            pulumi.set(__self__, "mysql_connect_param", mysql_connect_param)
        if postgresql_connect_param is not None:
            pulumi.set(__self__, "postgresql_connect_param", postgresql_connect_param)
        if sqlserver_connect_param is not None:
            pulumi.set(__self__, "sqlserver_connect_param", sqlserver_connect_param)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        connection source name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        connection source type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="clickhouseConnectParam")
    def clickhouse_connect_param(self) -> Optional[pulumi.Input['ConnectResourceClickhouseConnectParamArgs']]:
        """
        ClickHouse configuration, required when Type is CLICKHOUSE.
        """
        return pulumi.get(self, "clickhouse_connect_param")

    @clickhouse_connect_param.setter
    def clickhouse_connect_param(self, value: Optional[pulumi.Input['ConnectResourceClickhouseConnectParamArgs']]):
        pulumi.set(self, "clickhouse_connect_param", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Connection source description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dorisConnectParam")
    def doris_connect_param(self) -> Optional[pulumi.Input['ConnectResourceDorisConnectParamArgs']]:
        """
        Doris configuration, required when Type is DORIS.
        """
        return pulumi.get(self, "doris_connect_param")

    @doris_connect_param.setter
    def doris_connect_param(self, value: Optional[pulumi.Input['ConnectResourceDorisConnectParamArgs']]):
        pulumi.set(self, "doris_connect_param", value)

    @property
    @pulumi.getter(name="dtsConnectParam")
    def dts_connect_param(self) -> Optional[pulumi.Input['ConnectResourceDtsConnectParamArgs']]:
        """
        Dts configuration, required when Type is DTS.
        """
        return pulumi.get(self, "dts_connect_param")

    @dts_connect_param.setter
    def dts_connect_param(self, value: Optional[pulumi.Input['ConnectResourceDtsConnectParamArgs']]):
        pulumi.set(self, "dts_connect_param", value)

    @property
    @pulumi.getter(name="esConnectParam")
    def es_connect_param(self) -> Optional[pulumi.Input['ConnectResourceEsConnectParamArgs']]:
        """
        Es configuration, required when Type is ES.
        """
        return pulumi.get(self, "es_connect_param")

    @es_connect_param.setter
    def es_connect_param(self, value: Optional[pulumi.Input['ConnectResourceEsConnectParamArgs']]):
        pulumi.set(self, "es_connect_param", value)

    @property
    @pulumi.getter(name="kafkaConnectParam")
    def kafka_connect_param(self) -> Optional[pulumi.Input['ConnectResourceKafkaConnectParamArgs']]:
        """
        Kafka configuration, required when Type is KAFKA.
        """
        return pulumi.get(self, "kafka_connect_param")

    @kafka_connect_param.setter
    def kafka_connect_param(self, value: Optional[pulumi.Input['ConnectResourceKafkaConnectParamArgs']]):
        pulumi.set(self, "kafka_connect_param", value)

    @property
    @pulumi.getter(name="mariadbConnectParam")
    def mariadb_connect_param(self) -> Optional[pulumi.Input['ConnectResourceMariadbConnectParamArgs']]:
        """
        Maria DB configuration, required when Type is MARIADB.
        """
        return pulumi.get(self, "mariadb_connect_param")

    @mariadb_connect_param.setter
    def mariadb_connect_param(self, value: Optional[pulumi.Input['ConnectResourceMariadbConnectParamArgs']]):
        pulumi.set(self, "mariadb_connect_param", value)

    @property
    @pulumi.getter(name="mongodbConnectParam")
    def mongodb_connect_param(self) -> Optional[pulumi.Input['ConnectResourceMongodbConnectParamArgs']]:
        """
        Mongo DB configuration, required when Type is MONGODB.
        """
        return pulumi.get(self, "mongodb_connect_param")

    @mongodb_connect_param.setter
    def mongodb_connect_param(self, value: Optional[pulumi.Input['ConnectResourceMongodbConnectParamArgs']]):
        pulumi.set(self, "mongodb_connect_param", value)

    @property
    @pulumi.getter(name="mysqlConnectParam")
    def mysql_connect_param(self) -> Optional[pulumi.Input['ConnectResourceMysqlConnectParamArgs']]:
        """
        MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
        """
        return pulumi.get(self, "mysql_connect_param")

    @mysql_connect_param.setter
    def mysql_connect_param(self, value: Optional[pulumi.Input['ConnectResourceMysqlConnectParamArgs']]):
        pulumi.set(self, "mysql_connect_param", value)

    @property
    @pulumi.getter(name="postgresqlConnectParam")
    def postgresql_connect_param(self) -> Optional[pulumi.Input['ConnectResourcePostgresqlConnectParamArgs']]:
        """
        Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
        """
        return pulumi.get(self, "postgresql_connect_param")

    @postgresql_connect_param.setter
    def postgresql_connect_param(self, value: Optional[pulumi.Input['ConnectResourcePostgresqlConnectParamArgs']]):
        pulumi.set(self, "postgresql_connect_param", value)

    @property
    @pulumi.getter(name="sqlserverConnectParam")
    def sqlserver_connect_param(self) -> Optional[pulumi.Input['ConnectResourceSqlserverConnectParamArgs']]:
        """
        SQLServer configuration, required when Type is SQLSERVER.
        """
        return pulumi.get(self, "sqlserver_connect_param")

    @sqlserver_connect_param.setter
    def sqlserver_connect_param(self, value: Optional[pulumi.Input['ConnectResourceSqlserverConnectParamArgs']]):
        pulumi.set(self, "sqlserver_connect_param", value)


@pulumi.input_type
class _ConnectResourceState:
    def __init__(__self__, *,
                 clickhouse_connect_param: Optional[pulumi.Input['ConnectResourceClickhouseConnectParamArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 doris_connect_param: Optional[pulumi.Input['ConnectResourceDorisConnectParamArgs']] = None,
                 dts_connect_param: Optional[pulumi.Input['ConnectResourceDtsConnectParamArgs']] = None,
                 es_connect_param: Optional[pulumi.Input['ConnectResourceEsConnectParamArgs']] = None,
                 kafka_connect_param: Optional[pulumi.Input['ConnectResourceKafkaConnectParamArgs']] = None,
                 mariadb_connect_param: Optional[pulumi.Input['ConnectResourceMariadbConnectParamArgs']] = None,
                 mongodb_connect_param: Optional[pulumi.Input['ConnectResourceMongodbConnectParamArgs']] = None,
                 mysql_connect_param: Optional[pulumi.Input['ConnectResourceMysqlConnectParamArgs']] = None,
                 postgresql_connect_param: Optional[pulumi.Input['ConnectResourcePostgresqlConnectParamArgs']] = None,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 sqlserver_connect_param: Optional[pulumi.Input['ConnectResourceSqlserverConnectParamArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConnectResource resources.
        :param pulumi.Input['ConnectResourceClickhouseConnectParamArgs'] clickhouse_connect_param: ClickHouse configuration, required when Type is CLICKHOUSE.
        :param pulumi.Input[str] description: Connection source description.
        :param pulumi.Input['ConnectResourceDorisConnectParamArgs'] doris_connect_param: Doris configuration, required when Type is DORIS.
        :param pulumi.Input['ConnectResourceDtsConnectParamArgs'] dts_connect_param: Dts configuration, required when Type is DTS.
        :param pulumi.Input['ConnectResourceEsConnectParamArgs'] es_connect_param: Es configuration, required when Type is ES.
        :param pulumi.Input['ConnectResourceKafkaConnectParamArgs'] kafka_connect_param: Kafka configuration, required when Type is KAFKA.
        :param pulumi.Input['ConnectResourceMariadbConnectParamArgs'] mariadb_connect_param: Maria DB configuration, required when Type is MARIADB.
        :param pulumi.Input['ConnectResourceMongodbConnectParamArgs'] mongodb_connect_param: Mongo DB configuration, required when Type is MONGODB.
        :param pulumi.Input['ConnectResourceMysqlConnectParamArgs'] mysql_connect_param: MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
        :param pulumi.Input['ConnectResourcePostgresqlConnectParamArgs'] postgresql_connect_param: Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
        :param pulumi.Input[str] resource_name: connection source name.
        :param pulumi.Input['ConnectResourceSqlserverConnectParamArgs'] sqlserver_connect_param: SQLServer configuration, required when Type is SQLSERVER.
        :param pulumi.Input[str] type: connection source type.
        """
        if clickhouse_connect_param is not None:
            pulumi.set(__self__, "clickhouse_connect_param", clickhouse_connect_param)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if doris_connect_param is not None:
            pulumi.set(__self__, "doris_connect_param", doris_connect_param)
        if dts_connect_param is not None:
            pulumi.set(__self__, "dts_connect_param", dts_connect_param)
        if es_connect_param is not None:
            pulumi.set(__self__, "es_connect_param", es_connect_param)
        if kafka_connect_param is not None:
            pulumi.set(__self__, "kafka_connect_param", kafka_connect_param)
        if mariadb_connect_param is not None:
            pulumi.set(__self__, "mariadb_connect_param", mariadb_connect_param)
        if mongodb_connect_param is not None:
            pulumi.set(__self__, "mongodb_connect_param", mongodb_connect_param)
        if mysql_connect_param is not None:
            pulumi.set(__self__, "mysql_connect_param", mysql_connect_param)
        if postgresql_connect_param is not None:
            pulumi.set(__self__, "postgresql_connect_param", postgresql_connect_param)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if sqlserver_connect_param is not None:
            pulumi.set(__self__, "sqlserver_connect_param", sqlserver_connect_param)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="clickhouseConnectParam")
    def clickhouse_connect_param(self) -> Optional[pulumi.Input['ConnectResourceClickhouseConnectParamArgs']]:
        """
        ClickHouse configuration, required when Type is CLICKHOUSE.
        """
        return pulumi.get(self, "clickhouse_connect_param")

    @clickhouse_connect_param.setter
    def clickhouse_connect_param(self, value: Optional[pulumi.Input['ConnectResourceClickhouseConnectParamArgs']]):
        pulumi.set(self, "clickhouse_connect_param", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Connection source description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dorisConnectParam")
    def doris_connect_param(self) -> Optional[pulumi.Input['ConnectResourceDorisConnectParamArgs']]:
        """
        Doris configuration, required when Type is DORIS.
        """
        return pulumi.get(self, "doris_connect_param")

    @doris_connect_param.setter
    def doris_connect_param(self, value: Optional[pulumi.Input['ConnectResourceDorisConnectParamArgs']]):
        pulumi.set(self, "doris_connect_param", value)

    @property
    @pulumi.getter(name="dtsConnectParam")
    def dts_connect_param(self) -> Optional[pulumi.Input['ConnectResourceDtsConnectParamArgs']]:
        """
        Dts configuration, required when Type is DTS.
        """
        return pulumi.get(self, "dts_connect_param")

    @dts_connect_param.setter
    def dts_connect_param(self, value: Optional[pulumi.Input['ConnectResourceDtsConnectParamArgs']]):
        pulumi.set(self, "dts_connect_param", value)

    @property
    @pulumi.getter(name="esConnectParam")
    def es_connect_param(self) -> Optional[pulumi.Input['ConnectResourceEsConnectParamArgs']]:
        """
        Es configuration, required when Type is ES.
        """
        return pulumi.get(self, "es_connect_param")

    @es_connect_param.setter
    def es_connect_param(self, value: Optional[pulumi.Input['ConnectResourceEsConnectParamArgs']]):
        pulumi.set(self, "es_connect_param", value)

    @property
    @pulumi.getter(name="kafkaConnectParam")
    def kafka_connect_param(self) -> Optional[pulumi.Input['ConnectResourceKafkaConnectParamArgs']]:
        """
        Kafka configuration, required when Type is KAFKA.
        """
        return pulumi.get(self, "kafka_connect_param")

    @kafka_connect_param.setter
    def kafka_connect_param(self, value: Optional[pulumi.Input['ConnectResourceKafkaConnectParamArgs']]):
        pulumi.set(self, "kafka_connect_param", value)

    @property
    @pulumi.getter(name="mariadbConnectParam")
    def mariadb_connect_param(self) -> Optional[pulumi.Input['ConnectResourceMariadbConnectParamArgs']]:
        """
        Maria DB configuration, required when Type is MARIADB.
        """
        return pulumi.get(self, "mariadb_connect_param")

    @mariadb_connect_param.setter
    def mariadb_connect_param(self, value: Optional[pulumi.Input['ConnectResourceMariadbConnectParamArgs']]):
        pulumi.set(self, "mariadb_connect_param", value)

    @property
    @pulumi.getter(name="mongodbConnectParam")
    def mongodb_connect_param(self) -> Optional[pulumi.Input['ConnectResourceMongodbConnectParamArgs']]:
        """
        Mongo DB configuration, required when Type is MONGODB.
        """
        return pulumi.get(self, "mongodb_connect_param")

    @mongodb_connect_param.setter
    def mongodb_connect_param(self, value: Optional[pulumi.Input['ConnectResourceMongodbConnectParamArgs']]):
        pulumi.set(self, "mongodb_connect_param", value)

    @property
    @pulumi.getter(name="mysqlConnectParam")
    def mysql_connect_param(self) -> Optional[pulumi.Input['ConnectResourceMysqlConnectParamArgs']]:
        """
        MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
        """
        return pulumi.get(self, "mysql_connect_param")

    @mysql_connect_param.setter
    def mysql_connect_param(self, value: Optional[pulumi.Input['ConnectResourceMysqlConnectParamArgs']]):
        pulumi.set(self, "mysql_connect_param", value)

    @property
    @pulumi.getter(name="postgresqlConnectParam")
    def postgresql_connect_param(self) -> Optional[pulumi.Input['ConnectResourcePostgresqlConnectParamArgs']]:
        """
        Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
        """
        return pulumi.get(self, "postgresql_connect_param")

    @postgresql_connect_param.setter
    def postgresql_connect_param(self, value: Optional[pulumi.Input['ConnectResourcePostgresqlConnectParamArgs']]):
        pulumi.set(self, "postgresql_connect_param", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        connection source name.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="sqlserverConnectParam")
    def sqlserver_connect_param(self) -> Optional[pulumi.Input['ConnectResourceSqlserverConnectParamArgs']]:
        """
        SQLServer configuration, required when Type is SQLSERVER.
        """
        return pulumi.get(self, "sqlserver_connect_param")

    @sqlserver_connect_param.setter
    def sqlserver_connect_param(self, value: Optional[pulumi.Input['ConnectResourceSqlserverConnectParamArgs']]):
        pulumi.set(self, "sqlserver_connect_param", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        connection source type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class ConnectResource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clickhouse_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceClickhouseConnectParamArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 doris_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceDorisConnectParamArgs']]] = None,
                 dts_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceDtsConnectParamArgs']]] = None,
                 es_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceEsConnectParamArgs']]] = None,
                 kafka_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceKafkaConnectParamArgs']]] = None,
                 mariadb_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMariadbConnectParamArgs']]] = None,
                 mongodb_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMongodbConnectParamArgs']]] = None,
                 mysql_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMysqlConnectParamArgs']]] = None,
                 postgresql_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourcePostgresqlConnectParamArgs']]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 sqlserver_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceSqlserverConnectParamArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ckafka connect_resource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        connect_resource = tencentcloud.ckafka.ConnectResource("connectResource",
            description="for terraform test",
            mysql_connect_param=tencentcloud.ckafka.ConnectResourceMysqlConnectParamArgs(
                password="xxxxxxxxx",
                port=3306,
                resource="cdb-fitq5t9h",
                self_built=False,
                service_vip="172.16.80.59",
                uniq_vpc_id="vpc-4owdpnwr",
                user_name="root",
            ),
            resource_name_="terraform-test",
            type="MYSQL")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka connect_resource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/connectResource:ConnectResource connect_resource connect_resource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectResourceClickhouseConnectParamArgs']] clickhouse_connect_param: ClickHouse configuration, required when Type is CLICKHOUSE.
        :param pulumi.Input[str] description: Connection source description.
        :param pulumi.Input[pulumi.InputType['ConnectResourceDorisConnectParamArgs']] doris_connect_param: Doris configuration, required when Type is DORIS.
        :param pulumi.Input[pulumi.InputType['ConnectResourceDtsConnectParamArgs']] dts_connect_param: Dts configuration, required when Type is DTS.
        :param pulumi.Input[pulumi.InputType['ConnectResourceEsConnectParamArgs']] es_connect_param: Es configuration, required when Type is ES.
        :param pulumi.Input[pulumi.InputType['ConnectResourceKafkaConnectParamArgs']] kafka_connect_param: Kafka configuration, required when Type is KAFKA.
        :param pulumi.Input[pulumi.InputType['ConnectResourceMariadbConnectParamArgs']] mariadb_connect_param: Maria DB configuration, required when Type is MARIADB.
        :param pulumi.Input[pulumi.InputType['ConnectResourceMongodbConnectParamArgs']] mongodb_connect_param: Mongo DB configuration, required when Type is MONGODB.
        :param pulumi.Input[pulumi.InputType['ConnectResourceMysqlConnectParamArgs']] mysql_connect_param: MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
        :param pulumi.Input[pulumi.InputType['ConnectResourcePostgresqlConnectParamArgs']] postgresql_connect_param: Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
        :param pulumi.Input[str] resource_name_: connection source name.
        :param pulumi.Input[pulumi.InputType['ConnectResourceSqlserverConnectParamArgs']] sqlserver_connect_param: SQLServer configuration, required when Type is SQLSERVER.
        :param pulumi.Input[str] type: connection source type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConnectResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ckafka connect_resource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        connect_resource = tencentcloud.ckafka.ConnectResource("connectResource",
            description="for terraform test",
            mysql_connect_param=tencentcloud.ckafka.ConnectResourceMysqlConnectParamArgs(
                password="xxxxxxxxx",
                port=3306,
                resource="cdb-fitq5t9h",
                self_built=False,
                service_vip="172.16.80.59",
                uniq_vpc_id="vpc-4owdpnwr",
                user_name="root",
            ),
            resource_name_="terraform-test",
            type="MYSQL")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka connect_resource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/connectResource:ConnectResource connect_resource connect_resource_id
        ```

        :param str resource_name: The name of the resource.
        :param ConnectResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConnectResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clickhouse_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceClickhouseConnectParamArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 doris_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceDorisConnectParamArgs']]] = None,
                 dts_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceDtsConnectParamArgs']]] = None,
                 es_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceEsConnectParamArgs']]] = None,
                 kafka_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceKafkaConnectParamArgs']]] = None,
                 mariadb_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMariadbConnectParamArgs']]] = None,
                 mongodb_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMongodbConnectParamArgs']]] = None,
                 mysql_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMysqlConnectParamArgs']]] = None,
                 postgresql_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourcePostgresqlConnectParamArgs']]] = None,
                 resource_name_: Optional[pulumi.Input[str]] = None,
                 sqlserver_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceSqlserverConnectParamArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConnectResourceArgs.__new__(ConnectResourceArgs)

            __props__.__dict__["clickhouse_connect_param"] = clickhouse_connect_param
            __props__.__dict__["description"] = description
            __props__.__dict__["doris_connect_param"] = doris_connect_param
            __props__.__dict__["dts_connect_param"] = dts_connect_param
            __props__.__dict__["es_connect_param"] = es_connect_param
            __props__.__dict__["kafka_connect_param"] = kafka_connect_param
            __props__.__dict__["mariadb_connect_param"] = mariadb_connect_param
            __props__.__dict__["mongodb_connect_param"] = mongodb_connect_param
            __props__.__dict__["mysql_connect_param"] = mysql_connect_param
            __props__.__dict__["postgresql_connect_param"] = postgresql_connect_param
            if resource_name_ is None and not opts.urn:
                raise TypeError("Missing required property 'resource_name_'")
            __props__.__dict__["resource_name"] = resource_name_
            __props__.__dict__["sqlserver_connect_param"] = sqlserver_connect_param
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(ConnectResource, __self__).__init__(
            'tencentcloud:Ckafka/connectResource:ConnectResource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clickhouse_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceClickhouseConnectParamArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            doris_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceDorisConnectParamArgs']]] = None,
            dts_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceDtsConnectParamArgs']]] = None,
            es_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceEsConnectParamArgs']]] = None,
            kafka_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceKafkaConnectParamArgs']]] = None,
            mariadb_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMariadbConnectParamArgs']]] = None,
            mongodb_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMongodbConnectParamArgs']]] = None,
            mysql_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceMysqlConnectParamArgs']]] = None,
            postgresql_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourcePostgresqlConnectParamArgs']]] = None,
            resource_name_: Optional[pulumi.Input[str]] = None,
            sqlserver_connect_param: Optional[pulumi.Input[pulumi.InputType['ConnectResourceSqlserverConnectParamArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ConnectResource':
        """
        Get an existing ConnectResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ConnectResourceClickhouseConnectParamArgs']] clickhouse_connect_param: ClickHouse configuration, required when Type is CLICKHOUSE.
        :param pulumi.Input[str] description: Connection source description.
        :param pulumi.Input[pulumi.InputType['ConnectResourceDorisConnectParamArgs']] doris_connect_param: Doris configuration, required when Type is DORIS.
        :param pulumi.Input[pulumi.InputType['ConnectResourceDtsConnectParamArgs']] dts_connect_param: Dts configuration, required when Type is DTS.
        :param pulumi.Input[pulumi.InputType['ConnectResourceEsConnectParamArgs']] es_connect_param: Es configuration, required when Type is ES.
        :param pulumi.Input[pulumi.InputType['ConnectResourceKafkaConnectParamArgs']] kafka_connect_param: Kafka configuration, required when Type is KAFKA.
        :param pulumi.Input[pulumi.InputType['ConnectResourceMariadbConnectParamArgs']] mariadb_connect_param: Maria DB configuration, required when Type is MARIADB.
        :param pulumi.Input[pulumi.InputType['ConnectResourceMongodbConnectParamArgs']] mongodb_connect_param: Mongo DB configuration, required when Type is MONGODB.
        :param pulumi.Input[pulumi.InputType['ConnectResourceMysqlConnectParamArgs']] mysql_connect_param: MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
        :param pulumi.Input[pulumi.InputType['ConnectResourcePostgresqlConnectParamArgs']] postgresql_connect_param: Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
        :param pulumi.Input[str] resource_name_: connection source name.
        :param pulumi.Input[pulumi.InputType['ConnectResourceSqlserverConnectParamArgs']] sqlserver_connect_param: SQLServer configuration, required when Type is SQLSERVER.
        :param pulumi.Input[str] type: connection source type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConnectResourceState.__new__(_ConnectResourceState)

        __props__.__dict__["clickhouse_connect_param"] = clickhouse_connect_param
        __props__.__dict__["description"] = description
        __props__.__dict__["doris_connect_param"] = doris_connect_param
        __props__.__dict__["dts_connect_param"] = dts_connect_param
        __props__.__dict__["es_connect_param"] = es_connect_param
        __props__.__dict__["kafka_connect_param"] = kafka_connect_param
        __props__.__dict__["mariadb_connect_param"] = mariadb_connect_param
        __props__.__dict__["mongodb_connect_param"] = mongodb_connect_param
        __props__.__dict__["mysql_connect_param"] = mysql_connect_param
        __props__.__dict__["postgresql_connect_param"] = postgresql_connect_param
        __props__.__dict__["resource_name"] = resource_name_
        __props__.__dict__["sqlserver_connect_param"] = sqlserver_connect_param
        __props__.__dict__["type"] = type
        return ConnectResource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clickhouseConnectParam")
    def clickhouse_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceClickhouseConnectParam']]:
        """
        ClickHouse configuration, required when Type is CLICKHOUSE.
        """
        return pulumi.get(self, "clickhouse_connect_param")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Connection source description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dorisConnectParam")
    def doris_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceDorisConnectParam']]:
        """
        Doris configuration, required when Type is DORIS.
        """
        return pulumi.get(self, "doris_connect_param")

    @property
    @pulumi.getter(name="dtsConnectParam")
    def dts_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceDtsConnectParam']]:
        """
        Dts configuration, required when Type is DTS.
        """
        return pulumi.get(self, "dts_connect_param")

    @property
    @pulumi.getter(name="esConnectParam")
    def es_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceEsConnectParam']]:
        """
        Es configuration, required when Type is ES.
        """
        return pulumi.get(self, "es_connect_param")

    @property
    @pulumi.getter(name="kafkaConnectParam")
    def kafka_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceKafkaConnectParam']]:
        """
        Kafka configuration, required when Type is KAFKA.
        """
        return pulumi.get(self, "kafka_connect_param")

    @property
    @pulumi.getter(name="mariadbConnectParam")
    def mariadb_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceMariadbConnectParam']]:
        """
        Maria DB configuration, required when Type is MARIADB.
        """
        return pulumi.get(self, "mariadb_connect_param")

    @property
    @pulumi.getter(name="mongodbConnectParam")
    def mongodb_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceMongodbConnectParam']]:
        """
        Mongo DB configuration, required when Type is MONGODB.
        """
        return pulumi.get(self, "mongodb_connect_param")

    @property
    @pulumi.getter(name="mysqlConnectParam")
    def mysql_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceMysqlConnectParam']]:
        """
        MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
        """
        return pulumi.get(self, "mysql_connect_param")

    @property
    @pulumi.getter(name="postgresqlConnectParam")
    def postgresql_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourcePostgresqlConnectParam']]:
        """
        Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
        """
        return pulumi.get(self, "postgresql_connect_param")

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Output[str]:
        """
        connection source name.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="sqlserverConnectParam")
    def sqlserver_connect_param(self) -> pulumi.Output[Optional['outputs.ConnectResourceSqlserverConnectParam']]:
        """
        SQLServer configuration, required when Type is SQLSERVER.
        """
        return pulumi.get(self, "sqlserver_connect_param")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        connection source type.
        """
        return pulumi.get(self, "type")

