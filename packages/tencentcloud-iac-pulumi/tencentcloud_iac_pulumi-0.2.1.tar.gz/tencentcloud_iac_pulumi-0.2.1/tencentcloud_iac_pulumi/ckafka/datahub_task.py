# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatahubTaskArgs', 'DatahubTask']

@pulumi.input_type
class DatahubTaskArgs:
    def __init__(__self__, *,
                 task_name: pulumi.Input[str],
                 task_type: pulumi.Input[str],
                 schema_id: Optional[pulumi.Input[str]] = None,
                 source_resource: Optional[pulumi.Input['DatahubTaskSourceResourceArgs']] = None,
                 target_resource: Optional[pulumi.Input['DatahubTaskTargetResourceArgs']] = None,
                 transform_param: Optional[pulumi.Input['DatahubTaskTransformParamArgs']] = None,
                 transforms_param: Optional[pulumi.Input['DatahubTaskTransformsParamArgs']] = None):
        """
        The set of arguments for constructing a DatahubTask resource.
        :param pulumi.Input[str] task_name: name of the task.
        :param pulumi.Input[str] task_type: type of the task, SOURCE(data input), SINK(data output).
        :param pulumi.Input[str] schema_id: SchemaId.
        :param pulumi.Input['DatahubTaskSourceResourceArgs'] source_resource: data resource.
        :param pulumi.Input['DatahubTaskTargetResourceArgs'] target_resource: Target Resource.
        :param pulumi.Input['DatahubTaskTransformParamArgs'] transform_param: Data Processing Rules.
        :param pulumi.Input['DatahubTaskTransformsParamArgs'] transforms_param: Data processing rules.
        """
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_type", task_type)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if source_resource is not None:
            pulumi.set(__self__, "source_resource", source_resource)
        if target_resource is not None:
            pulumi.set(__self__, "target_resource", target_resource)
        if transform_param is not None:
            pulumi.set(__self__, "transform_param", transform_param)
        if transforms_param is not None:
            pulumi.set(__self__, "transforms_param", transforms_param)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[str]:
        """
        name of the task.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        type of the task, SOURCE(data input), SINK(data output).
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[str]]:
        """
        SchemaId.
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_id", value)

    @property
    @pulumi.getter(name="sourceResource")
    def source_resource(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceArgs']]:
        """
        data resource.
        """
        return pulumi.get(self, "source_resource")

    @source_resource.setter
    def source_resource(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceArgs']]):
        pulumi.set(self, "source_resource", value)

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceArgs']]:
        """
        Target Resource.
        """
        return pulumi.get(self, "target_resource")

    @target_resource.setter
    def target_resource(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceArgs']]):
        pulumi.set(self, "target_resource", value)

    @property
    @pulumi.getter(name="transformParam")
    def transform_param(self) -> Optional[pulumi.Input['DatahubTaskTransformParamArgs']]:
        """
        Data Processing Rules.
        """
        return pulumi.get(self, "transform_param")

    @transform_param.setter
    def transform_param(self, value: Optional[pulumi.Input['DatahubTaskTransformParamArgs']]):
        pulumi.set(self, "transform_param", value)

    @property
    @pulumi.getter(name="transformsParam")
    def transforms_param(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamArgs']]:
        """
        Data processing rules.
        """
        return pulumi.get(self, "transforms_param")

    @transforms_param.setter
    def transforms_param(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamArgs']]):
        pulumi.set(self, "transforms_param", value)


@pulumi.input_type
class _DatahubTaskState:
    def __init__(__self__, *,
                 schema_id: Optional[pulumi.Input[str]] = None,
                 source_resource: Optional[pulumi.Input['DatahubTaskSourceResourceArgs']] = None,
                 target_resource: Optional[pulumi.Input['DatahubTaskTargetResourceArgs']] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 transform_param: Optional[pulumi.Input['DatahubTaskTransformParamArgs']] = None,
                 transforms_param: Optional[pulumi.Input['DatahubTaskTransformsParamArgs']] = None):
        """
        Input properties used for looking up and filtering DatahubTask resources.
        :param pulumi.Input[str] schema_id: SchemaId.
        :param pulumi.Input['DatahubTaskSourceResourceArgs'] source_resource: data resource.
        :param pulumi.Input['DatahubTaskTargetResourceArgs'] target_resource: Target Resource.
        :param pulumi.Input[str] task_name: name of the task.
        :param pulumi.Input[str] task_type: type of the task, SOURCE(data input), SINK(data output).
        :param pulumi.Input['DatahubTaskTransformParamArgs'] transform_param: Data Processing Rules.
        :param pulumi.Input['DatahubTaskTransformsParamArgs'] transforms_param: Data processing rules.
        """
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if source_resource is not None:
            pulumi.set(__self__, "source_resource", source_resource)
        if target_resource is not None:
            pulumi.set(__self__, "target_resource", target_resource)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if transform_param is not None:
            pulumi.set(__self__, "transform_param", transform_param)
        if transforms_param is not None:
            pulumi.set(__self__, "transforms_param", transforms_param)

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[str]]:
        """
        SchemaId.
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_id", value)

    @property
    @pulumi.getter(name="sourceResource")
    def source_resource(self) -> Optional[pulumi.Input['DatahubTaskSourceResourceArgs']]:
        """
        data resource.
        """
        return pulumi.get(self, "source_resource")

    @source_resource.setter
    def source_resource(self, value: Optional[pulumi.Input['DatahubTaskSourceResourceArgs']]):
        pulumi.set(self, "source_resource", value)

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> Optional[pulumi.Input['DatahubTaskTargetResourceArgs']]:
        """
        Target Resource.
        """
        return pulumi.get(self, "target_resource")

    @target_resource.setter
    def target_resource(self, value: Optional[pulumi.Input['DatahubTaskTargetResourceArgs']]):
        pulumi.set(self, "target_resource", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the task.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the task, SOURCE(data input), SINK(data output).
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="transformParam")
    def transform_param(self) -> Optional[pulumi.Input['DatahubTaskTransformParamArgs']]:
        """
        Data Processing Rules.
        """
        return pulumi.get(self, "transform_param")

    @transform_param.setter
    def transform_param(self, value: Optional[pulumi.Input['DatahubTaskTransformParamArgs']]):
        pulumi.set(self, "transform_param", value)

    @property
    @pulumi.getter(name="transformsParam")
    def transforms_param(self) -> Optional[pulumi.Input['DatahubTaskTransformsParamArgs']]:
        """
        Data processing rules.
        """
        return pulumi.get(self, "transforms_param")

    @transforms_param.setter
    def transforms_param(self, value: Optional[pulumi.Input['DatahubTaskTransformsParamArgs']]):
        pulumi.set(self, "transforms_param", value)


class DatahubTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 schema_id: Optional[pulumi.Input[str]] = None,
                 source_resource: Optional[pulumi.Input[pulumi.InputType['DatahubTaskSourceResourceArgs']]] = None,
                 target_resource: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTargetResourceArgs']]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 transform_param: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTransformParamArgs']]] = None,
                 transforms_param: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTransformsParamArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a ckafka datahub_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        datahub_task = tencentcloud.ckafka.DatahubTask("datahubTask",
            source_resource=tencentcloud.ckafka.DatahubTaskSourceResourceArgs(
                postgre_sql_param=tencentcloud.ckafka.DatahubTaskSourceResourcePostgreSqlParamArgs(
                    database="postgres",
                    is_table_regular=False,
                    key_columns="",
                    plugin_name="decoderbufs",
                    record_with_schema=False,
                    resource="resource-y9nxnw46",
                    snapshot_mode="never",
                    table="*",
                ),
                type="POSTGRESQL",
            ),
            target_resource=tencentcloud.ckafka.DatahubTaskTargetResourceArgs(
                topic_param=tencentcloud.ckafka.DatahubTaskTargetResourceTopicParamArgs(
                    compression_type="none",
                    resource="1308726196-keep-topic",
                    use_auto_create_topic=False,
                ),
                type="TOPIC",
            ),
            task_name="test-task123321",
            task_type="SOURCE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka datahub_task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/datahubTask:DatahubTask datahub_task datahub_task_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] schema_id: SchemaId.
        :param pulumi.Input[pulumi.InputType['DatahubTaskSourceResourceArgs']] source_resource: data resource.
        :param pulumi.Input[pulumi.InputType['DatahubTaskTargetResourceArgs']] target_resource: Target Resource.
        :param pulumi.Input[str] task_name: name of the task.
        :param pulumi.Input[str] task_type: type of the task, SOURCE(data input), SINK(data output).
        :param pulumi.Input[pulumi.InputType['DatahubTaskTransformParamArgs']] transform_param: Data Processing Rules.
        :param pulumi.Input[pulumi.InputType['DatahubTaskTransformsParamArgs']] transforms_param: Data processing rules.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatahubTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ckafka datahub_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        datahub_task = tencentcloud.ckafka.DatahubTask("datahubTask",
            source_resource=tencentcloud.ckafka.DatahubTaskSourceResourceArgs(
                postgre_sql_param=tencentcloud.ckafka.DatahubTaskSourceResourcePostgreSqlParamArgs(
                    database="postgres",
                    is_table_regular=False,
                    key_columns="",
                    plugin_name="decoderbufs",
                    record_with_schema=False,
                    resource="resource-y9nxnw46",
                    snapshot_mode="never",
                    table="*",
                ),
                type="POSTGRESQL",
            ),
            target_resource=tencentcloud.ckafka.DatahubTaskTargetResourceArgs(
                topic_param=tencentcloud.ckafka.DatahubTaskTargetResourceTopicParamArgs(
                    compression_type="none",
                    resource="1308726196-keep-topic",
                    use_auto_create_topic=False,
                ),
                type="TOPIC",
            ),
            task_name="test-task123321",
            task_type="SOURCE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka datahub_task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/datahubTask:DatahubTask datahub_task datahub_task_id
        ```

        :param str resource_name: The name of the resource.
        :param DatahubTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatahubTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 schema_id: Optional[pulumi.Input[str]] = None,
                 source_resource: Optional[pulumi.Input[pulumi.InputType['DatahubTaskSourceResourceArgs']]] = None,
                 target_resource: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTargetResourceArgs']]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 transform_param: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTransformParamArgs']]] = None,
                 transforms_param: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTransformsParamArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatahubTaskArgs.__new__(DatahubTaskArgs)

            __props__.__dict__["schema_id"] = schema_id
            __props__.__dict__["source_resource"] = source_resource
            __props__.__dict__["target_resource"] = target_resource
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            if task_type is None and not opts.urn:
                raise TypeError("Missing required property 'task_type'")
            __props__.__dict__["task_type"] = task_type
            __props__.__dict__["transform_param"] = transform_param
            __props__.__dict__["transforms_param"] = transforms_param
        super(DatahubTask, __self__).__init__(
            'tencentcloud:Ckafka/datahubTask:DatahubTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            schema_id: Optional[pulumi.Input[str]] = None,
            source_resource: Optional[pulumi.Input[pulumi.InputType['DatahubTaskSourceResourceArgs']]] = None,
            target_resource: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTargetResourceArgs']]] = None,
            task_name: Optional[pulumi.Input[str]] = None,
            task_type: Optional[pulumi.Input[str]] = None,
            transform_param: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTransformParamArgs']]] = None,
            transforms_param: Optional[pulumi.Input[pulumi.InputType['DatahubTaskTransformsParamArgs']]] = None) -> 'DatahubTask':
        """
        Get an existing DatahubTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] schema_id: SchemaId.
        :param pulumi.Input[pulumi.InputType['DatahubTaskSourceResourceArgs']] source_resource: data resource.
        :param pulumi.Input[pulumi.InputType['DatahubTaskTargetResourceArgs']] target_resource: Target Resource.
        :param pulumi.Input[str] task_name: name of the task.
        :param pulumi.Input[str] task_type: type of the task, SOURCE(data input), SINK(data output).
        :param pulumi.Input[pulumi.InputType['DatahubTaskTransformParamArgs']] transform_param: Data Processing Rules.
        :param pulumi.Input[pulumi.InputType['DatahubTaskTransformsParamArgs']] transforms_param: Data processing rules.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatahubTaskState.__new__(_DatahubTaskState)

        __props__.__dict__["schema_id"] = schema_id
        __props__.__dict__["source_resource"] = source_resource
        __props__.__dict__["target_resource"] = target_resource
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_type"] = task_type
        __props__.__dict__["transform_param"] = transform_param
        __props__.__dict__["transforms_param"] = transforms_param
        return DatahubTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> pulumi.Output[Optional[str]]:
        """
        SchemaId.
        """
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="sourceResource")
    def source_resource(self) -> pulumi.Output[Optional['outputs.DatahubTaskSourceResource']]:
        """
        data resource.
        """
        return pulumi.get(self, "source_resource")

    @property
    @pulumi.getter(name="targetResource")
    def target_resource(self) -> pulumi.Output[Optional['outputs.DatahubTaskTargetResource']]:
        """
        Target Resource.
        """
        return pulumi.get(self, "target_resource")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[str]:
        """
        name of the task.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[str]:
        """
        type of the task, SOURCE(data input), SINK(data output).
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="transformParam")
    def transform_param(self) -> pulumi.Output[Optional['outputs.DatahubTaskTransformParam']]:
        """
        Data Processing Rules.
        """
        return pulumi.get(self, "transform_param")

    @property
    @pulumi.getter(name="transformsParam")
    def transforms_param(self) -> pulumi.Output[Optional['outputs.DatahubTaskTransformsParam']]:
        """
        Data processing rules.
        """
        return pulumi.get(self, "transforms_param")

