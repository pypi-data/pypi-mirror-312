# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDatahubTaskResult',
    'AwaitableGetDatahubTaskResult',
    'get_datahub_task',
    'get_datahub_task_output',
]

@pulumi.output_type
class GetDatahubTaskResult:
    """
    A collection of values returned by getDatahubTask.
    """
    def __init__(__self__, id=None, resource=None, result_output_file=None, search_word=None, source_type=None, target_type=None, task_lists=None, task_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource and not isinstance(resource, str):
            raise TypeError("Expected argument 'resource' to be a str")
        pulumi.set(__self__, "resource", resource)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if search_word and not isinstance(search_word, str):
            raise TypeError("Expected argument 'search_word' to be a str")
        pulumi.set(__self__, "search_word", search_word)
        if source_type and not isinstance(source_type, str):
            raise TypeError("Expected argument 'source_type' to be a str")
        pulumi.set(__self__, "source_type", source_type)
        if target_type and not isinstance(target_type, str):
            raise TypeError("Expected argument 'target_type' to be a str")
        pulumi.set(__self__, "target_type", target_type)
        if task_lists and not isinstance(task_lists, list):
            raise TypeError("Expected argument 'task_lists' to be a list")
        pulumi.set(__self__, "task_lists", task_lists)
        if task_type and not isinstance(task_type, str):
            raise TypeError("Expected argument 'task_type' to be a str")
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def resource(self) -> Optional[str]:
        """
        The topic name of the topic sold separately.
        """
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="searchWord")
    def search_word(self) -> Optional[str]:
        return pulumi.get(self, "search_word")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[str]:
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="taskLists")
    def task_lists(self) -> Sequence['outputs.GetDatahubTaskTaskListResult']:
        """
        Datahub task information list.
        """
        return pulumi.get(self, "task_lists")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[str]:
        """
        TaskType, SOURCE|SINK.
        """
        return pulumi.get(self, "task_type")


class AwaitableGetDatahubTaskResult(GetDatahubTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatahubTaskResult(
            id=self.id,
            resource=self.resource,
            result_output_file=self.result_output_file,
            search_word=self.search_word,
            source_type=self.source_type,
            target_type=self.target_type,
            task_lists=self.task_lists,
            task_type=self.task_type)


def get_datahub_task(resource: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     search_word: Optional[str] = None,
                     source_type: Optional[str] = None,
                     target_type: Optional[str] = None,
                     task_type: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatahubTaskResult:
    """
    Use this data source to query detailed information of ckafka datahub_task

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    datahub_task = tencentcloud.Ckafka.get_datahub_task()
    ```
    <!--End PulumiCodeChooser -->


    :param str resource: Resource.
    :param str result_output_file: Used to save results.
    :param str search_word: search key.
    :param str source_type: The source type.
    :param str target_type: Destination type of dump.
    :param str task_type: Task type, SOURCE|SINK.
    """
    __args__ = dict()
    __args__['resource'] = resource
    __args__['resultOutputFile'] = result_output_file
    __args__['searchWord'] = search_word
    __args__['sourceType'] = source_type
    __args__['targetType'] = target_type
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ckafka/getDatahubTask:getDatahubTask', __args__, opts=opts, typ=GetDatahubTaskResult).value

    return AwaitableGetDatahubTaskResult(
        id=pulumi.get(__ret__, 'id'),
        resource=pulumi.get(__ret__, 'resource'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        search_word=pulumi.get(__ret__, 'search_word'),
        source_type=pulumi.get(__ret__, 'source_type'),
        target_type=pulumi.get(__ret__, 'target_type'),
        task_lists=pulumi.get(__ret__, 'task_lists'),
        task_type=pulumi.get(__ret__, 'task_type'))


@_utilities.lift_output_func(get_datahub_task)
def get_datahub_task_output(resource: Optional[pulumi.Input[Optional[str]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            search_word: Optional[pulumi.Input[Optional[str]]] = None,
                            source_type: Optional[pulumi.Input[Optional[str]]] = None,
                            target_type: Optional[pulumi.Input[Optional[str]]] = None,
                            task_type: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatahubTaskResult]:
    """
    Use this data source to query detailed information of ckafka datahub_task

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    datahub_task = tencentcloud.Ckafka.get_datahub_task()
    ```
    <!--End PulumiCodeChooser -->


    :param str resource: Resource.
    :param str result_output_file: Used to save results.
    :param str search_word: search key.
    :param str source_type: The source type.
    :param str target_type: Destination type of dump.
    :param str task_type: Task type, SOURCE|SINK.
    """
    ...
