# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DatahubTopicArgs', 'DatahubTopic']

@pulumi.input_type
class DatahubTopicArgs:
    def __init__(__self__, *,
                 partition_num: pulumi.Input[int],
                 retention_ms: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a DatahubTopic resource.
        :param pulumi.Input[int] partition_num: Number of Partitions, greater than 0.
        :param pulumi.Input[int] retention_ms: Message retention time, in ms, the current minimum value is 60000 ms.
        :param pulumi.Input[str] name: Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
        :param pulumi.Input[str] note: Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of dataHub topic.
        """
        pulumi.set(__self__, "partition_num", partition_num)
        pulumi.set(__self__, "retention_ms", retention_ms)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> pulumi.Input[int]:
        """
        Number of Partitions, greater than 0.
        """
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> pulumi.Input[int]:
        """
        Message retention time, in ms, the current minimum value is 60000 ms.
        """
        return pulumi.get(self, "retention_ms")

    @retention_ms.setter
    def retention_ms(self, value: pulumi.Input[int]):
        pulumi.set(self, "retention_ms", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of dataHub topic.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _DatahubTopicState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 retention_ms: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering DatahubTopic resources.
        :param pulumi.Input[str] name: Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
        :param pulumi.Input[str] note: Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
        :param pulumi.Input[int] partition_num: Number of Partitions, greater than 0.
        :param pulumi.Input[int] retention_ms: Message retention time, in ms, the current minimum value is 60000 ms.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of dataHub topic.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if retention_ms is not None:
            pulumi.set(__self__, "retention_ms", retention_ms)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Partitions, greater than 0.
        """
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> Optional[pulumi.Input[int]]:
        """
        Message retention time, in ms, the current minimum value is 60000 ms.
        """
        return pulumi.get(self, "retention_ms")

    @retention_ms.setter
    def retention_ms(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_ms", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of dataHub topic.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


class DatahubTopic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 retention_ms: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provides a resource to create a ckafka datahub_topic

        ## Import

        ckafka datahub_topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/datahubTopic:DatahubTopic datahub_topic datahub_topic_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
        :param pulumi.Input[str] note: Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
        :param pulumi.Input[int] partition_num: Number of Partitions, greater than 0.
        :param pulumi.Input[int] retention_ms: Message retention time, in ms, the current minimum value is 60000 ms.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of dataHub topic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatahubTopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ckafka datahub_topic

        ## Import

        ckafka datahub_topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/datahubTopic:DatahubTopic datahub_topic datahub_topic_name
        ```

        :param str resource_name: The name of the resource.
        :param DatahubTopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatahubTopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 retention_ms: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatahubTopicArgs.__new__(DatahubTopicArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["note"] = note
            if partition_num is None and not opts.urn:
                raise TypeError("Missing required property 'partition_num'")
            __props__.__dict__["partition_num"] = partition_num
            if retention_ms is None and not opts.urn:
                raise TypeError("Missing required property 'retention_ms'")
            __props__.__dict__["retention_ms"] = retention_ms
            __props__.__dict__["tags"] = tags
        super(DatahubTopic, __self__).__init__(
            'tencentcloud:Ckafka/datahubTopic:DatahubTopic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            note: Optional[pulumi.Input[str]] = None,
            partition_num: Optional[pulumi.Input[int]] = None,
            retention_ms: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'DatahubTopic':
        """
        Get an existing DatahubTopic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
        :param pulumi.Input[str] note: Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
        :param pulumi.Input[int] partition_num: Number of Partitions, greater than 0.
        :param pulumi.Input[int] retention_ms: Message retention time, in ms, the current minimum value is 60000 ms.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of dataHub topic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatahubTopicState.__new__(_DatahubTopicState)

        __props__.__dict__["name"] = name
        __props__.__dict__["note"] = note
        __props__.__dict__["partition_num"] = partition_num
        __props__.__dict__["retention_ms"] = retention_ms
        __props__.__dict__["tags"] = tags
        return DatahubTopic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[str]]:
        """
        Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> pulumi.Output[int]:
        """
        Number of Partitions, greater than 0.
        """
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> pulumi.Output[int]:
        """
        Message retention time, in ms, the current minimum value is 60000 ms.
        """
        return pulumi.get(self, "retention_ms")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of dataHub topic.
        """
        return pulumi.get(self, "tags")

