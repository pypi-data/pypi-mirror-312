# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectResourceResult',
    'AwaitableGetConnectResourceResult',
    'get_connect_resource',
    'get_connect_resource_output',
]

@pulumi.output_type
class GetConnectResourceResult:
    """
    A collection of values returned by getConnectResource.
    """
    def __init__(__self__, id=None, limit=None, offset=None, resource_region=None, result_output_file=None, results=None, search_word=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if resource_region and not isinstance(resource_region, str):
            raise TypeError("Expected argument 'resource_region' to be a str")
        pulumi.set(__self__, "resource_region", resource_region)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if search_word and not isinstance(search_word, str):
            raise TypeError("Expected argument 'search_word' to be a str")
        pulumi.set(__self__, "search_word", search_word)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[str]:
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetConnectResourceResultResult']:
        """
        Connection source list.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="searchWord")
    def search_word(self) -> Optional[str]:
        return pulumi.get(self, "search_word")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")


class AwaitableGetConnectResourceResult(GetConnectResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectResourceResult(
            id=self.id,
            limit=self.limit,
            offset=self.offset,
            resource_region=self.resource_region,
            result_output_file=self.result_output_file,
            results=self.results,
            search_word=self.search_word,
            type=self.type)


def get_connect_resource(limit: Optional[int] = None,
                         offset: Optional[int] = None,
                         resource_region: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         search_word: Optional[str] = None,
                         type: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectResourceResult:
    """
    Use this data source to query detailed information of ckafka connect_resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    connect_resource = tencentcloud.Ckafka.get_connect_resource()
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Return the number, the default is 20, the maximum is 100.
    :param int offset: Page offset, default is 0.
    :param str resource_region: Keyword query of the connection source, query the connection in the connection management list in the local region according to the region (only support the connection source containing the region input).
    :param str result_output_file: Used to save results.
    :param str search_word: Keyword for search.
    :param str type: connection source type.
    """
    __args__ = dict()
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['resourceRegion'] = resource_region
    __args__['resultOutputFile'] = result_output_file
    __args__['searchWord'] = search_word
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ckafka/getConnectResource:getConnectResource', __args__, opts=opts, typ=GetConnectResourceResult).value

    return AwaitableGetConnectResourceResult(
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        resource_region=pulumi.get(__ret__, 'resource_region'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        search_word=pulumi.get(__ret__, 'search_word'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_connect_resource)
def get_connect_resource_output(limit: Optional[pulumi.Input[Optional[int]]] = None,
                                offset: Optional[pulumi.Input[Optional[int]]] = None,
                                resource_region: Optional[pulumi.Input[Optional[str]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                search_word: Optional[pulumi.Input[Optional[str]]] = None,
                                type: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectResourceResult]:
    """
    Use this data source to query detailed information of ckafka connect_resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    connect_resource = tencentcloud.Ckafka.get_connect_resource()
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Return the number, the default is 20, the maximum is 100.
    :param int offset: Page offset, default is 0.
    :param str resource_region: Keyword query of the connection source, query the connection in the connection management list in the local region according to the region (only support the connection source containing the region input).
    :param str result_output_file: Used to save results.
    :param str search_word: Keyword for search.
    :param str type: connection source type.
    """
    ...
