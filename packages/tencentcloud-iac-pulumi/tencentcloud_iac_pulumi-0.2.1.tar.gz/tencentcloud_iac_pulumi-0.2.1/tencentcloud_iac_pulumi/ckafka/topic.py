# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TopicArgs', 'Topic']

@pulumi.input_type
class TopicArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 partition_num: pulumi.Input[int],
                 replica_num: pulumi.Input[int],
                 topic_name: pulumi.Input[str],
                 clean_up_policy: Optional[pulumi.Input[str]] = None,
                 enable_white_list: Optional[pulumi.Input[bool]] = None,
                 ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_message_bytes: Optional[pulumi.Input[int]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 retention: Optional[pulumi.Input[int]] = None,
                 segment: Optional[pulumi.Input[int]] = None,
                 sync_replica_min_num: Optional[pulumi.Input[int]] = None,
                 unclean_leader_election_enable: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Topic resource.
        :param pulumi.Input[str] instance_id: Ckafka instance ID.
        :param pulumi.Input[int] partition_num: The number of partition.
        :param pulumi.Input[int] replica_num: The number of replica.
        :param pulumi.Input[str] topic_name: Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-).
        :param pulumi.Input[str] clean_up_policy: Clear log policy, log clear mode, default is `delete`. `delete`: logs are deleted according to the storage time. `compact`: logs are compressed according to the key. `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
        :param pulumi.Input[bool] enable_white_list: Whether to open the ip whitelist, `true`: open, `false`: close.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_white_lists: Ip whitelist, quota limit, required when enableWhileList=true.
        :param pulumi.Input[int] max_message_bytes: Max message bytes. min: 1024 Byte(1KB), max: 8388608 Byte(8MB).
        :param pulumi.Input[str] note: The subject note. It must start with a letter, and the remaining part can contain letters, numbers and dashes (-).
        :param pulumi.Input[int] retention: Message can be selected. Retention time, unit is ms, the current minimum value is 60000ms.
        :param pulumi.Input[int] segment: Segment scrolling time, in ms, the current minimum is 3600000ms.
        :param pulumi.Input[int] sync_replica_min_num: Min number of sync replicas, Default is `1`.
        :param pulumi.Input[bool] unclean_leader_election_enable: Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "partition_num", partition_num)
        pulumi.set(__self__, "replica_num", replica_num)
        pulumi.set(__self__, "topic_name", topic_name)
        if clean_up_policy is not None:
            pulumi.set(__self__, "clean_up_policy", clean_up_policy)
        if enable_white_list is not None:
            pulumi.set(__self__, "enable_white_list", enable_white_list)
        if ip_white_lists is not None:
            pulumi.set(__self__, "ip_white_lists", ip_white_lists)
        if max_message_bytes is not None:
            pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if retention is not None:
            pulumi.set(__self__, "retention", retention)
        if segment is not None:
            pulumi.set(__self__, "segment", segment)
        if sync_replica_min_num is not None:
            pulumi.set(__self__, "sync_replica_min_num", sync_replica_min_num)
        if unclean_leader_election_enable is not None:
            pulumi.set(__self__, "unclean_leader_election_enable", unclean_leader_election_enable)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Ckafka instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> pulumi.Input[int]:
        """
        The number of partition.
        """
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="replicaNum")
    def replica_num(self) -> pulumi.Input[int]:
        """
        The number of replica.
        """
        return pulumi.get(self, "replica_num")

    @replica_num.setter
    def replica_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "replica_num", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-).
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="cleanUpPolicy")
    def clean_up_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Clear log policy, log clear mode, default is `delete`. `delete`: logs are deleted according to the storage time. `compact`: logs are compressed according to the key. `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
        """
        return pulumi.get(self, "clean_up_policy")

    @clean_up_policy.setter
    def clean_up_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clean_up_policy", value)

    @property
    @pulumi.getter(name="enableWhiteList")
    def enable_white_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to open the ip whitelist, `true`: open, `false`: close.
        """
        return pulumi.get(self, "enable_white_list")

    @enable_white_list.setter
    def enable_white_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_white_list", value)

    @property
    @pulumi.getter(name="ipWhiteLists")
    def ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ip whitelist, quota limit, required when enableWhileList=true.
        """
        return pulumi.get(self, "ip_white_lists")

    @ip_white_lists.setter
    def ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_white_lists", value)

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Max message bytes. min: 1024 Byte(1KB), max: 8388608 Byte(8MB).
        """
        return pulumi.get(self, "max_message_bytes")

    @max_message_bytes.setter
    def max_message_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_message_bytes", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        The subject note. It must start with a letter, and the remaining part can contain letters, numbers and dashes (-).
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[int]]:
        """
        Message can be selected. Retention time, unit is ms, the current minimum value is 60000ms.
        """
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter
    def segment(self) -> Optional[pulumi.Input[int]]:
        """
        Segment scrolling time, in ms, the current minimum is 3600000ms.
        """
        return pulumi.get(self, "segment")

    @segment.setter
    def segment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment", value)

    @property
    @pulumi.getter(name="syncReplicaMinNum")
    def sync_replica_min_num(self) -> Optional[pulumi.Input[int]]:
        """
        Min number of sync replicas, Default is `1`.
        """
        return pulumi.get(self, "sync_replica_min_num")

    @sync_replica_min_num.setter
    def sync_replica_min_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_replica_min_num", value)

    @property
    @pulumi.getter(name="uncleanLeaderElectionEnable")
    def unclean_leader_election_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
        """
        return pulumi.get(self, "unclean_leader_election_enable")

    @unclean_leader_election_enable.setter
    def unclean_leader_election_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unclean_leader_election_enable", value)


@pulumi.input_type
class _TopicState:
    def __init__(__self__, *,
                 clean_up_policy: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 enable_white_list: Optional[pulumi.Input[bool]] = None,
                 forward_cos_bucket: Optional[pulumi.Input[str]] = None,
                 forward_interval: Optional[pulumi.Input[int]] = None,
                 forward_status: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_message_bytes: Optional[pulumi.Input[int]] = None,
                 message_storage_location: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 replica_num: Optional[pulumi.Input[int]] = None,
                 retention: Optional[pulumi.Input[int]] = None,
                 segment: Optional[pulumi.Input[int]] = None,
                 segment_bytes: Optional[pulumi.Input[int]] = None,
                 sync_replica_min_num: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 unclean_leader_election_enable: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Topic resources.
        :param pulumi.Input[str] clean_up_policy: Clear log policy, log clear mode, default is `delete`. `delete`: logs are deleted according to the storage time. `compact`: logs are compressed according to the key. `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
        :param pulumi.Input[str] create_time: Create time of the CKafka topic.
        :param pulumi.Input[bool] enable_white_list: Whether to open the ip whitelist, `true`: open, `false`: close.
        :param pulumi.Input[str] forward_cos_bucket: Data backup cos bucket: the bucket address that is dumped to cos.
        :param pulumi.Input[int] forward_interval: Periodic frequency of data backup to cos.
        :param pulumi.Input[int] forward_status: Data backup cos status. Valid values: `0`, `1`. `1`: do not open data backup, `0`: open data backup.
        :param pulumi.Input[str] instance_id: Ckafka instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_white_lists: Ip whitelist, quota limit, required when enableWhileList=true.
        :param pulumi.Input[int] max_message_bytes: Max message bytes. min: 1024 Byte(1KB), max: 8388608 Byte(8MB).
        :param pulumi.Input[str] message_storage_location: Message storage location.
        :param pulumi.Input[str] note: The subject note. It must start with a letter, and the remaining part can contain letters, numbers and dashes (-).
        :param pulumi.Input[int] partition_num: The number of partition.
        :param pulumi.Input[int] replica_num: The number of replica.
        :param pulumi.Input[int] retention: Message can be selected. Retention time, unit is ms, the current minimum value is 60000ms.
        :param pulumi.Input[int] segment: Segment scrolling time, in ms, the current minimum is 3600000ms.
        :param pulumi.Input[int] segment_bytes: Number of bytes rolled by shard.
        :param pulumi.Input[int] sync_replica_min_num: Min number of sync replicas, Default is `1`.
        :param pulumi.Input[str] topic_name: Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-).
        :param pulumi.Input[bool] unclean_leader_election_enable: Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
        """
        if clean_up_policy is not None:
            pulumi.set(__self__, "clean_up_policy", clean_up_policy)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_white_list is not None:
            pulumi.set(__self__, "enable_white_list", enable_white_list)
        if forward_cos_bucket is not None:
            pulumi.set(__self__, "forward_cos_bucket", forward_cos_bucket)
        if forward_interval is not None:
            pulumi.set(__self__, "forward_interval", forward_interval)
        if forward_status is not None:
            pulumi.set(__self__, "forward_status", forward_status)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_white_lists is not None:
            pulumi.set(__self__, "ip_white_lists", ip_white_lists)
        if max_message_bytes is not None:
            pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        if message_storage_location is not None:
            pulumi.set(__self__, "message_storage_location", message_storage_location)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if partition_num is not None:
            pulumi.set(__self__, "partition_num", partition_num)
        if replica_num is not None:
            pulumi.set(__self__, "replica_num", replica_num)
        if retention is not None:
            pulumi.set(__self__, "retention", retention)
        if segment is not None:
            pulumi.set(__self__, "segment", segment)
        if segment_bytes is not None:
            pulumi.set(__self__, "segment_bytes", segment_bytes)
        if sync_replica_min_num is not None:
            pulumi.set(__self__, "sync_replica_min_num", sync_replica_min_num)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)
        if unclean_leader_election_enable is not None:
            pulumi.set(__self__, "unclean_leader_election_enable", unclean_leader_election_enable)

    @property
    @pulumi.getter(name="cleanUpPolicy")
    def clean_up_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Clear log policy, log clear mode, default is `delete`. `delete`: logs are deleted according to the storage time. `compact`: logs are compressed according to the key. `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
        """
        return pulumi.get(self, "clean_up_policy")

    @clean_up_policy.setter
    def clean_up_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clean_up_policy", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the CKafka topic.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="enableWhiteList")
    def enable_white_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to open the ip whitelist, `true`: open, `false`: close.
        """
        return pulumi.get(self, "enable_white_list")

    @enable_white_list.setter
    def enable_white_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_white_list", value)

    @property
    @pulumi.getter(name="forwardCosBucket")
    def forward_cos_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Data backup cos bucket: the bucket address that is dumped to cos.
        """
        return pulumi.get(self, "forward_cos_bucket")

    @forward_cos_bucket.setter
    def forward_cos_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_cos_bucket", value)

    @property
    @pulumi.getter(name="forwardInterval")
    def forward_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Periodic frequency of data backup to cos.
        """
        return pulumi.get(self, "forward_interval")

    @forward_interval.setter
    def forward_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_interval", value)

    @property
    @pulumi.getter(name="forwardStatus")
    def forward_status(self) -> Optional[pulumi.Input[int]]:
        """
        Data backup cos status. Valid values: `0`, `1`. `1`: do not open data backup, `0`: open data backup.
        """
        return pulumi.get(self, "forward_status")

    @forward_status.setter
    def forward_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "forward_status", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Ckafka instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="ipWhiteLists")
    def ip_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Ip whitelist, quota limit, required when enableWhileList=true.
        """
        return pulumi.get(self, "ip_white_lists")

    @ip_white_lists.setter
    def ip_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_white_lists", value)

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Max message bytes. min: 1024 Byte(1KB), max: 8388608 Byte(8MB).
        """
        return pulumi.get(self, "max_message_bytes")

    @max_message_bytes.setter
    def max_message_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_message_bytes", value)

    @property
    @pulumi.getter(name="messageStorageLocation")
    def message_storage_location(self) -> Optional[pulumi.Input[str]]:
        """
        Message storage location.
        """
        return pulumi.get(self, "message_storage_location")

    @message_storage_location.setter
    def message_storage_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_storage_location", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        The subject note. It must start with a letter, and the remaining part can contain letters, numbers and dashes (-).
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of partition.
        """
        return pulumi.get(self, "partition_num")

    @partition_num.setter
    def partition_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partition_num", value)

    @property
    @pulumi.getter(name="replicaNum")
    def replica_num(self) -> Optional[pulumi.Input[int]]:
        """
        The number of replica.
        """
        return pulumi.get(self, "replica_num")

    @replica_num.setter
    def replica_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replica_num", value)

    @property
    @pulumi.getter
    def retention(self) -> Optional[pulumi.Input[int]]:
        """
        Message can be selected. Retention time, unit is ms, the current minimum value is 60000ms.
        """
        return pulumi.get(self, "retention")

    @retention.setter
    def retention(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention", value)

    @property
    @pulumi.getter
    def segment(self) -> Optional[pulumi.Input[int]]:
        """
        Segment scrolling time, in ms, the current minimum is 3600000ms.
        """
        return pulumi.get(self, "segment")

    @segment.setter
    def segment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment", value)

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bytes rolled by shard.
        """
        return pulumi.get(self, "segment_bytes")

    @segment_bytes.setter
    def segment_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "segment_bytes", value)

    @property
    @pulumi.getter(name="syncReplicaMinNum")
    def sync_replica_min_num(self) -> Optional[pulumi.Input[int]]:
        """
        Min number of sync replicas, Default is `1`.
        """
        return pulumi.get(self, "sync_replica_min_num")

    @sync_replica_min_num.setter
    def sync_replica_min_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_replica_min_num", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-).
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="uncleanLeaderElectionEnable")
    def unclean_leader_election_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
        """
        return pulumi.get(self, "unclean_leader_election_enable")

    @unclean_leader_election_enable.setter
    def unclean_leader_election_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unclean_leader_election_enable", value)


class Topic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clean_up_policy: Optional[pulumi.Input[str]] = None,
                 enable_white_list: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_message_bytes: Optional[pulumi.Input[int]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 replica_num: Optional[pulumi.Input[int]] = None,
                 retention: Optional[pulumi.Input[int]] = None,
                 segment: Optional[pulumi.Input[int]] = None,
                 sync_replica_min_num: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 unclean_leader_election_enable: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Use this resource to create ckafka topic.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.ckafka.Topic("foo",
            clean_up_policy="delete",
            enable_white_list=True,
            instance_id="ckafka-f9ife4zz",
            ip_white_lists=[
                "ip1",
                "ip2",
            ],
            max_message_bytes=0,
            note="topic note",
            partition_num=1,
            replica_num=2,
            retention=60000,
            segment=3600000,
            sync_replica_min_num=1,
            topic_name="example",
            unclean_leader_election_enable=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka topic can be imported using the instance_id#topic_name, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/topic:Topic foo ckafka-f9ife4zz#example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clean_up_policy: Clear log policy, log clear mode, default is `delete`. `delete`: logs are deleted according to the storage time. `compact`: logs are compressed according to the key. `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
        :param pulumi.Input[bool] enable_white_list: Whether to open the ip whitelist, `true`: open, `false`: close.
        :param pulumi.Input[str] instance_id: Ckafka instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_white_lists: Ip whitelist, quota limit, required when enableWhileList=true.
        :param pulumi.Input[int] max_message_bytes: Max message bytes. min: 1024 Byte(1KB), max: 8388608 Byte(8MB).
        :param pulumi.Input[str] note: The subject note. It must start with a letter, and the remaining part can contain letters, numbers and dashes (-).
        :param pulumi.Input[int] partition_num: The number of partition.
        :param pulumi.Input[int] replica_num: The number of replica.
        :param pulumi.Input[int] retention: Message can be selected. Retention time, unit is ms, the current minimum value is 60000ms.
        :param pulumi.Input[int] segment: Segment scrolling time, in ms, the current minimum is 3600000ms.
        :param pulumi.Input[int] sync_replica_min_num: Min number of sync replicas, Default is `1`.
        :param pulumi.Input[str] topic_name: Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-).
        :param pulumi.Input[bool] unclean_leader_election_enable: Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create ckafka topic.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.ckafka.Topic("foo",
            clean_up_policy="delete",
            enable_white_list=True,
            instance_id="ckafka-f9ife4zz",
            ip_white_lists=[
                "ip1",
                "ip2",
            ],
            max_message_bytes=0,
            note="topic note",
            partition_num=1,
            replica_num=2,
            retention=60000,
            segment=3600000,
            sync_replica_min_num=1,
            topic_name="example",
            unclean_leader_election_enable=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ckafka topic can be imported using the instance_id#topic_name, e.g.

        ```sh
        $ pulumi import tencentcloud:Ckafka/topic:Topic foo ckafka-f9ife4zz#example
        ```

        :param str resource_name: The name of the resource.
        :param TopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 clean_up_policy: Optional[pulumi.Input[str]] = None,
                 enable_white_list: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_message_bytes: Optional[pulumi.Input[int]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 partition_num: Optional[pulumi.Input[int]] = None,
                 replica_num: Optional[pulumi.Input[int]] = None,
                 retention: Optional[pulumi.Input[int]] = None,
                 segment: Optional[pulumi.Input[int]] = None,
                 sync_replica_min_num: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 unclean_leader_election_enable: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicArgs.__new__(TopicArgs)

            __props__.__dict__["clean_up_policy"] = clean_up_policy
            __props__.__dict__["enable_white_list"] = enable_white_list
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["ip_white_lists"] = ip_white_lists
            __props__.__dict__["max_message_bytes"] = max_message_bytes
            __props__.__dict__["note"] = note
            if partition_num is None and not opts.urn:
                raise TypeError("Missing required property 'partition_num'")
            __props__.__dict__["partition_num"] = partition_num
            if replica_num is None and not opts.urn:
                raise TypeError("Missing required property 'replica_num'")
            __props__.__dict__["replica_num"] = replica_num
            __props__.__dict__["retention"] = retention
            __props__.__dict__["segment"] = segment
            __props__.__dict__["sync_replica_min_num"] = sync_replica_min_num
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["unclean_leader_election_enable"] = unclean_leader_election_enable
            __props__.__dict__["create_time"] = None
            __props__.__dict__["forward_cos_bucket"] = None
            __props__.__dict__["forward_interval"] = None
            __props__.__dict__["forward_status"] = None
            __props__.__dict__["message_storage_location"] = None
            __props__.__dict__["segment_bytes"] = None
        super(Topic, __self__).__init__(
            'tencentcloud:Ckafka/topic:Topic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            clean_up_policy: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            enable_white_list: Optional[pulumi.Input[bool]] = None,
            forward_cos_bucket: Optional[pulumi.Input[str]] = None,
            forward_interval: Optional[pulumi.Input[int]] = None,
            forward_status: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            ip_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            max_message_bytes: Optional[pulumi.Input[int]] = None,
            message_storage_location: Optional[pulumi.Input[str]] = None,
            note: Optional[pulumi.Input[str]] = None,
            partition_num: Optional[pulumi.Input[int]] = None,
            replica_num: Optional[pulumi.Input[int]] = None,
            retention: Optional[pulumi.Input[int]] = None,
            segment: Optional[pulumi.Input[int]] = None,
            segment_bytes: Optional[pulumi.Input[int]] = None,
            sync_replica_min_num: Optional[pulumi.Input[int]] = None,
            topic_name: Optional[pulumi.Input[str]] = None,
            unclean_leader_election_enable: Optional[pulumi.Input[bool]] = None) -> 'Topic':
        """
        Get an existing Topic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] clean_up_policy: Clear log policy, log clear mode, default is `delete`. `delete`: logs are deleted according to the storage time. `compact`: logs are compressed according to the key. `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
        :param pulumi.Input[str] create_time: Create time of the CKafka topic.
        :param pulumi.Input[bool] enable_white_list: Whether to open the ip whitelist, `true`: open, `false`: close.
        :param pulumi.Input[str] forward_cos_bucket: Data backup cos bucket: the bucket address that is dumped to cos.
        :param pulumi.Input[int] forward_interval: Periodic frequency of data backup to cos.
        :param pulumi.Input[int] forward_status: Data backup cos status. Valid values: `0`, `1`. `1`: do not open data backup, `0`: open data backup.
        :param pulumi.Input[str] instance_id: Ckafka instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_white_lists: Ip whitelist, quota limit, required when enableWhileList=true.
        :param pulumi.Input[int] max_message_bytes: Max message bytes. min: 1024 Byte(1KB), max: 8388608 Byte(8MB).
        :param pulumi.Input[str] message_storage_location: Message storage location.
        :param pulumi.Input[str] note: The subject note. It must start with a letter, and the remaining part can contain letters, numbers and dashes (-).
        :param pulumi.Input[int] partition_num: The number of partition.
        :param pulumi.Input[int] replica_num: The number of replica.
        :param pulumi.Input[int] retention: Message can be selected. Retention time, unit is ms, the current minimum value is 60000ms.
        :param pulumi.Input[int] segment: Segment scrolling time, in ms, the current minimum is 3600000ms.
        :param pulumi.Input[int] segment_bytes: Number of bytes rolled by shard.
        :param pulumi.Input[int] sync_replica_min_num: Min number of sync replicas, Default is `1`.
        :param pulumi.Input[str] topic_name: Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-).
        :param pulumi.Input[bool] unclean_leader_election_enable: Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicState.__new__(_TopicState)

        __props__.__dict__["clean_up_policy"] = clean_up_policy
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable_white_list"] = enable_white_list
        __props__.__dict__["forward_cos_bucket"] = forward_cos_bucket
        __props__.__dict__["forward_interval"] = forward_interval
        __props__.__dict__["forward_status"] = forward_status
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip_white_lists"] = ip_white_lists
        __props__.__dict__["max_message_bytes"] = max_message_bytes
        __props__.__dict__["message_storage_location"] = message_storage_location
        __props__.__dict__["note"] = note
        __props__.__dict__["partition_num"] = partition_num
        __props__.__dict__["replica_num"] = replica_num
        __props__.__dict__["retention"] = retention
        __props__.__dict__["segment"] = segment
        __props__.__dict__["segment_bytes"] = segment_bytes
        __props__.__dict__["sync_replica_min_num"] = sync_replica_min_num
        __props__.__dict__["topic_name"] = topic_name
        __props__.__dict__["unclean_leader_election_enable"] = unclean_leader_election_enable
        return Topic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cleanUpPolicy")
    def clean_up_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Clear log policy, log clear mode, default is `delete`. `delete`: logs are deleted according to the storage time. `compact`: logs are compressed according to the key. `compact, delete`: logs are compressed according to the key and will be deleted according to the storage time.
        """
        return pulumi.get(self, "clean_up_policy")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the CKafka topic.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="enableWhiteList")
    def enable_white_list(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to open the ip whitelist, `true`: open, `false`: close.
        """
        return pulumi.get(self, "enable_white_list")

    @property
    @pulumi.getter(name="forwardCosBucket")
    def forward_cos_bucket(self) -> pulumi.Output[str]:
        """
        Data backup cos bucket: the bucket address that is dumped to cos.
        """
        return pulumi.get(self, "forward_cos_bucket")

    @property
    @pulumi.getter(name="forwardInterval")
    def forward_interval(self) -> pulumi.Output[int]:
        """
        Periodic frequency of data backup to cos.
        """
        return pulumi.get(self, "forward_interval")

    @property
    @pulumi.getter(name="forwardStatus")
    def forward_status(self) -> pulumi.Output[int]:
        """
        Data backup cos status. Valid values: `0`, `1`. `1`: do not open data backup, `0`: open data backup.
        """
        return pulumi.get(self, "forward_status")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Ckafka instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipWhiteLists")
    def ip_white_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Ip whitelist, quota limit, required when enableWhileList=true.
        """
        return pulumi.get(self, "ip_white_lists")

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> pulumi.Output[int]:
        """
        Max message bytes. min: 1024 Byte(1KB), max: 8388608 Byte(8MB).
        """
        return pulumi.get(self, "max_message_bytes")

    @property
    @pulumi.getter(name="messageStorageLocation")
    def message_storage_location(self) -> pulumi.Output[str]:
        """
        Message storage location.
        """
        return pulumi.get(self, "message_storage_location")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[str]]:
        """
        The subject note. It must start with a letter, and the remaining part can contain letters, numbers and dashes (-).
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> pulumi.Output[int]:
        """
        The number of partition.
        """
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter(name="replicaNum")
    def replica_num(self) -> pulumi.Output[int]:
        """
        The number of replica.
        """
        return pulumi.get(self, "replica_num")

    @property
    @pulumi.getter
    def retention(self) -> pulumi.Output[Optional[int]]:
        """
        Message can be selected. Retention time, unit is ms, the current minimum value is 60000ms.
        """
        return pulumi.get(self, "retention")

    @property
    @pulumi.getter
    def segment(self) -> pulumi.Output[Optional[int]]:
        """
        Segment scrolling time, in ms, the current minimum is 3600000ms.
        """
        return pulumi.get(self, "segment")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> pulumi.Output[int]:
        """
        Number of bytes rolled by shard.
        """
        return pulumi.get(self, "segment_bytes")

    @property
    @pulumi.getter(name="syncReplicaMinNum")
    def sync_replica_min_num(self) -> pulumi.Output[Optional[int]]:
        """
        Min number of sync replicas, Default is `1`.
        """
        return pulumi.get(self, "sync_replica_min_num")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-).
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="uncleanLeaderElectionEnable")
    def unclean_leader_election_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to allow unsynchronized replicas to be selected as leader, default is `false`, `true: `allowed, `false`: not allowed.
        """
        return pulumi.get(self, "unclean_leader_election_enable")

