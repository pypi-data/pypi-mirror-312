# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTopicSubscribeGroupResult',
    'AwaitableGetTopicSubscribeGroupResult',
    'get_topic_subscribe_group',
    'get_topic_subscribe_group_output',
]

@pulumi.output_type
class GetTopicSubscribeGroupResult:
    """
    A collection of values returned by getTopicSubscribeGroup.
    """
    def __init__(__self__, groups_infos=None, id=None, instance_id=None, result_output_file=None, topic_name=None):
        if groups_infos and not isinstance(groups_infos, list):
            raise TypeError("Expected argument 'groups_infos' to be a list")
        pulumi.set(__self__, "groups_infos", groups_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if topic_name and not isinstance(topic_name, str):
            raise TypeError("Expected argument 'topic_name' to be a str")
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="groupsInfos")
    def groups_infos(self) -> Sequence['outputs.GetTopicSubscribeGroupGroupsInfoResult']:
        """
        Consumer group information.
        """
        return pulumi.get(self, "groups_infos")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")


class AwaitableGetTopicSubscribeGroupResult(GetTopicSubscribeGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTopicSubscribeGroupResult(
            groups_infos=self.groups_infos,
            id=self.id,
            instance_id=self.instance_id,
            result_output_file=self.result_output_file,
            topic_name=self.topic_name)


def get_topic_subscribe_group(instance_id: Optional[str] = None,
                              result_output_file: Optional[str] = None,
                              topic_name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTopicSubscribeGroupResult:
    """
    Use this data source to query detailed information of ckafka topic_subscribe_group

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    topic_subscribe_group = tencentcloud.Ckafka.get_topic_subscribe_group(instance_id="ckafka-xxxxxx",
        topic_name="xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: InstanceId.
    :param str result_output_file: Used to save results.
    :param str topic_name: TopicName.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ckafka/getTopicSubscribeGroup:getTopicSubscribeGroup', __args__, opts=opts, typ=GetTopicSubscribeGroupResult).value

    return AwaitableGetTopicSubscribeGroupResult(
        groups_infos=pulumi.get(__ret__, 'groups_infos'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        topic_name=pulumi.get(__ret__, 'topic_name'))


@_utilities.lift_output_func(get_topic_subscribe_group)
def get_topic_subscribe_group_output(instance_id: Optional[pulumi.Input[str]] = None,
                                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                     topic_name: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTopicSubscribeGroupResult]:
    """
    Use this data source to query detailed information of ckafka topic_subscribe_group

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    topic_subscribe_group = tencentcloud.Ckafka.get_topic_subscribe_group(instance_id="ckafka-xxxxxx",
        topic_name="xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: InstanceId.
    :param str result_output_file: Used to save results.
    :param str topic_name: TopicName.
    """
    ...
