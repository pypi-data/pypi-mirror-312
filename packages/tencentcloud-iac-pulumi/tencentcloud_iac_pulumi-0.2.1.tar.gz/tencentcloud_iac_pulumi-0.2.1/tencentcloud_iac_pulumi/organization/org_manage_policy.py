# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['OrgManagePolicyArgs', 'OrgManagePolicy']

@pulumi.input_type
class OrgManagePolicyArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgManagePolicy resource.
        :param pulumi.Input[str] content: Policy content. Refer to the CAM policy syntax.
        :param pulumi.Input[str] description: Policy description.
        :param pulumi.Input[str] name: Policy name.
               The length is 1~128 characters, which can include Chinese characters, English letters, numbers, and underscores.
        :param pulumi.Input[str] type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Policy content. Refer to the CAM policy syntax.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Policy description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        The length is 1~128 characters, which can include Chinese characters, English letters, numbers, and underscores.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _OrgManagePolicyState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 policy_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgManagePolicy resources.
        :param pulumi.Input[str] content: Policy content. Refer to the CAM policy syntax.
        :param pulumi.Input[str] description: Policy description.
        :param pulumi.Input[str] name: Policy name.
               The length is 1~128 characters, which can include Chinese characters, English letters, numbers, and underscores.
        :param pulumi.Input[str] policy_id: Policy Id.
        :param pulumi.Input[str] type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Policy content. Refer to the CAM policy syntax.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Policy description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Policy name.
        The length is 1~128 characters, which can include Chinese characters, English letters, numbers, and underscores.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class OrgManagePolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization org_manage_policy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_manage_policy = tencentcloud.organization.OrgManagePolicy("orgManagePolicy",
            content="{\\"version\\":\\"2.0\\",\\"statement\\":[{\\"effect\\":\\"allow\\",\\"action\\":\\"*\\",\\"resource\\":\\"*\\"}]}",
            description="Full access policy",
            type="SERVICE_CONTROL_POLICY")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_manage_policy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgManagePolicy:OrgManagePolicy org_manage_policy policy_id#type
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Policy content. Refer to the CAM policy syntax.
        :param pulumi.Input[str] description: Policy description.
        :param pulumi.Input[str] name: Policy name.
               The length is 1~128 characters, which can include Chinese characters, English letters, numbers, and underscores.
        :param pulumi.Input[str] type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgManagePolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization org_manage_policy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_manage_policy = tencentcloud.organization.OrgManagePolicy("orgManagePolicy",
            content="{\\"version\\":\\"2.0\\",\\"statement\\":[{\\"effect\\":\\"allow\\",\\"action\\":\\"*\\",\\"resource\\":\\"*\\"}]}",
            description="Full access policy",
            type="SERVICE_CONTROL_POLICY")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_manage_policy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgManagePolicy:OrgManagePolicy org_manage_policy policy_id#type
        ```

        :param str resource_name: The name of the resource.
        :param OrgManagePolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgManagePolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgManagePolicyArgs.__new__(OrgManagePolicyArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
            __props__.__dict__["policy_id"] = None
        super(OrgManagePolicy, __self__).__init__(
            'tencentcloud:Organization/orgManagePolicy:OrgManagePolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            policy_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'OrgManagePolicy':
        """
        Get an existing OrgManagePolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: Policy content. Refer to the CAM policy syntax.
        :param pulumi.Input[str] description: Policy description.
        :param pulumi.Input[str] name: Policy name.
               The length is 1~128 characters, which can include Chinese characters, English letters, numbers, and underscores.
        :param pulumi.Input[str] policy_id: Policy Id.
        :param pulumi.Input[str] type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgManagePolicyState.__new__(_OrgManagePolicyState)

        __props__.__dict__["content"] = content
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["type"] = type
        return OrgManagePolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Policy content. Refer to the CAM policy syntax.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Policy description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Policy name.
        The length is 1~128 characters, which can include Chinese characters, English letters, numbers, and underscores.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[str]:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "type")

