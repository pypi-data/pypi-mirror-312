# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['OrgManagePolicyTargetArgs', 'OrgManagePolicyTarget']

@pulumi.input_type
class OrgManagePolicyTargetArgs:
    def __init__(__self__, *,
                 policy_id: pulumi.Input[int],
                 target_id: pulumi.Input[int],
                 target_type: pulumi.Input[str],
                 policy_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgManagePolicyTarget resource.
        :param pulumi.Input[int] policy_id: Policy Id.
        :param pulumi.Input[int] target_id: Binding target ID of the policy. Member Uin or Department ID.
        :param pulumi.Input[str] target_type: Target type.
               Valid values:
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "target_id", target_id)
        pulumi.set(__self__, "target_type", target_type)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[int]:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Input[int]:
        """
        Binding target ID of the policy. Member Uin or Department ID.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        """
        Target type.
        Valid values:
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)


@pulumi.input_type
class _OrgManagePolicyTargetState:
    def __init__(__self__, *,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[int]] = None,
                 target_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgManagePolicyTarget resources.
        :param pulumi.Input[int] policy_id: Policy Id.
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        :param pulumi.Input[int] target_id: Binding target ID of the policy. Member Uin or Department ID.
        :param pulumi.Input[str] target_type: Target type.
               Valid values:
        """
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[int]]:
        """
        Binding target ID of the policy. Member Uin or Department ID.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Target type.
        Valid values:
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)


class OrgManagePolicyTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[int]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization org_manage_policy_target

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_manage_policy_target = tencentcloud.organization.OrgManagePolicyTarget("orgManagePolicyTarget",
            policy_id=100001,
            policy_type="SERVICE_CONTROL_POLICY",
            target_id=10001,
            target_type="NODE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_manage_policy_target can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgManagePolicyTarget:OrgManagePolicyTarget org_manage_policy_target policy_type#policy_id#target_type#target_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] policy_id: Policy Id.
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        :param pulumi.Input[int] target_id: Binding target ID of the policy. Member Uin or Department ID.
        :param pulumi.Input[str] target_type: Target type.
               Valid values:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgManagePolicyTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization org_manage_policy_target

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_manage_policy_target = tencentcloud.organization.OrgManagePolicyTarget("orgManagePolicyTarget",
            policy_id=100001,
            policy_type="SERVICE_CONTROL_POLICY",
            target_id=10001,
            target_type="NODE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_manage_policy_target can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgManagePolicyTarget:OrgManagePolicyTarget org_manage_policy_target policy_type#policy_id#target_type#target_id
        ```

        :param str resource_name: The name of the resource.
        :param OrgManagePolicyTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgManagePolicyTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[int]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgManagePolicyTargetArgs.__new__(OrgManagePolicyTargetArgs)

            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
            __props__.__dict__["policy_type"] = policy_type
            if target_id is None and not opts.urn:
                raise TypeError("Missing required property 'target_id'")
            __props__.__dict__["target_id"] = target_id
            if target_type is None and not opts.urn:
                raise TypeError("Missing required property 'target_type'")
            __props__.__dict__["target_type"] = target_type
        super(OrgManagePolicyTarget, __self__).__init__(
            'tencentcloud:Organization/orgManagePolicyTarget:OrgManagePolicyTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policy_id: Optional[pulumi.Input[int]] = None,
            policy_type: Optional[pulumi.Input[str]] = None,
            target_id: Optional[pulumi.Input[int]] = None,
            target_type: Optional[pulumi.Input[str]] = None) -> 'OrgManagePolicyTarget':
        """
        Get an existing OrgManagePolicyTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] policy_id: Policy Id.
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        :param pulumi.Input[int] target_id: Binding target ID of the policy. Member Uin or Department ID.
        :param pulumi.Input[str] target_type: Target type.
               Valid values:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgManagePolicyTargetState.__new__(_OrgManagePolicyTargetState)

        __props__.__dict__["policy_id"] = policy_id
        __props__.__dict__["policy_type"] = policy_type
        __props__.__dict__["target_id"] = target_id
        __props__.__dict__["target_type"] = target_type
        return OrgManagePolicyTarget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[int]:
        """
        Policy Id.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Output[Optional[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[int]:
        """
        Binding target ID of the policy. Member Uin or Department ID.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Output[str]:
        """
        Target type.
        Valid values:
        """
        return pulumi.get(self, "target_type")

