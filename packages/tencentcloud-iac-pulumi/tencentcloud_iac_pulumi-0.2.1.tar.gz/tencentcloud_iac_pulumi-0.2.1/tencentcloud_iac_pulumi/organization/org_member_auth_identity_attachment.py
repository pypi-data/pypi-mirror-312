# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['OrgMemberAuthIdentityAttachmentArgs', 'OrgMemberAuthIdentityAttachment']

@pulumi.input_type
class OrgMemberAuthIdentityAttachmentArgs:
    def __init__(__self__, *,
                 identity_ids: pulumi.Input[Sequence[pulumi.Input[int]]],
                 member_uin: pulumi.Input[int]):
        """
        The set of arguments for constructing a OrgMemberAuthIdentityAttachment resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] identity_ids: Identity Id list. Up to 5.
        :param pulumi.Input[int] member_uin: Member Uin.
        """
        pulumi.set(__self__, "identity_ids", identity_ids)
        pulumi.set(__self__, "member_uin", member_uin)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Identity Id list. Up to 5.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> pulumi.Input[int]:
        """
        Member Uin.
        """
        return pulumi.get(self, "member_uin")

    @member_uin.setter
    def member_uin(self, value: pulumi.Input[int]):
        pulumi.set(self, "member_uin", value)


@pulumi.input_type
class _OrgMemberAuthIdentityAttachmentState:
    def __init__(__self__, *,
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 member_uin: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering OrgMemberAuthIdentityAttachment resources.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] identity_ids: Identity Id list. Up to 5.
        :param pulumi.Input[int] member_uin: Member Uin.
        """
        if identity_ids is not None:
            pulumi.set(__self__, "identity_ids", identity_ids)
        if member_uin is not None:
            pulumi.set(__self__, "member_uin", member_uin)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Identity Id list. Up to 5.
        """
        return pulumi.get(self, "identity_ids")

    @identity_ids.setter
    def identity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "identity_ids", value)

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> Optional[pulumi.Input[int]]:
        """
        Member Uin.
        """
        return pulumi.get(self, "member_uin")

    @member_uin.setter
    def member_uin(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "member_uin", value)


class OrgMemberAuthIdentityAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 member_uin: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization org_member_auth_identity

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_member_auth_identity = tencentcloud.organization.OrgMemberAuthIdentityAttachment("orgMemberAuthIdentity",
            identity_ids=[1657],
            member_uin=100033704327)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_member_auth_identity can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgMemberAuthIdentityAttachment:OrgMemberAuthIdentityAttachment org_member_auth_identity org_member_auth_identity_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] identity_ids: Identity Id list. Up to 5.
        :param pulumi.Input[int] member_uin: Member Uin.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgMemberAuthIdentityAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization org_member_auth_identity

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_member_auth_identity = tencentcloud.organization.OrgMemberAuthIdentityAttachment("orgMemberAuthIdentity",
            identity_ids=[1657],
            member_uin=100033704327)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_member_auth_identity can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgMemberAuthIdentityAttachment:OrgMemberAuthIdentityAttachment org_member_auth_identity org_member_auth_identity_id
        ```

        :param str resource_name: The name of the resource.
        :param OrgMemberAuthIdentityAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgMemberAuthIdentityAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 member_uin: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgMemberAuthIdentityAttachmentArgs.__new__(OrgMemberAuthIdentityAttachmentArgs)

            if identity_ids is None and not opts.urn:
                raise TypeError("Missing required property 'identity_ids'")
            __props__.__dict__["identity_ids"] = identity_ids
            if member_uin is None and not opts.urn:
                raise TypeError("Missing required property 'member_uin'")
            __props__.__dict__["member_uin"] = member_uin
        super(OrgMemberAuthIdentityAttachment, __self__).__init__(
            'tencentcloud:Organization/orgMemberAuthIdentityAttachment:OrgMemberAuthIdentityAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            identity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            member_uin: Optional[pulumi.Input[int]] = None) -> 'OrgMemberAuthIdentityAttachment':
        """
        Get an existing OrgMemberAuthIdentityAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] identity_ids: Identity Id list. Up to 5.
        :param pulumi.Input[int] member_uin: Member Uin.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgMemberAuthIdentityAttachmentState.__new__(_OrgMemberAuthIdentityAttachmentState)

        __props__.__dict__["identity_ids"] = identity_ids
        __props__.__dict__["member_uin"] = member_uin
        return OrgMemberAuthIdentityAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="identityIds")
    def identity_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        Identity Id list. Up to 5.
        """
        return pulumi.get(self, "identity_ids")

    @property
    @pulumi.getter(name="memberUin")
    def member_uin(self) -> pulumi.Output[int]:
        """
        Member Uin.
        """
        return pulumi.get(self, "member_uin")

