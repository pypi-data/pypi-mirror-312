# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['OrgIdentityArgs', 'OrgIdentity']

@pulumi.input_type
class OrgIdentityArgs:
    def __init__(__self__, *,
                 identity_alias_name: pulumi.Input[str],
                 identity_policies: pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgIdentity resource.
        :param pulumi.Input[str] identity_alias_name: Identity name.Supports English letters and numbers, the length cannot exceed 40 characters.
        :param pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]] identity_policies: Identity policy list.
        :param pulumi.Input[str] description: Identity description.
        """
        pulumi.set(__self__, "identity_alias_name", identity_alias_name)
        pulumi.set(__self__, "identity_policies", identity_policies)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="identityAliasName")
    def identity_alias_name(self) -> pulumi.Input[str]:
        """
        Identity name.Supports English letters and numbers, the length cannot exceed 40 characters.
        """
        return pulumi.get(self, "identity_alias_name")

    @identity_alias_name.setter
    def identity_alias_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_alias_name", value)

    @property
    @pulumi.getter(name="identityPolicies")
    def identity_policies(self) -> pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]]:
        """
        Identity policy list.
        """
        return pulumi.get(self, "identity_policies")

    @identity_policies.setter
    def identity_policies(self, value: pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]]):
        pulumi.set(self, "identity_policies", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Identity description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _OrgIdentityState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 identity_alias_name: Optional[pulumi.Input[str]] = None,
                 identity_policies: Optional[pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]]] = None):
        """
        Input properties used for looking up and filtering OrgIdentity resources.
        :param pulumi.Input[str] description: Identity description.
        :param pulumi.Input[str] identity_alias_name: Identity name.Supports English letters and numbers, the length cannot exceed 40 characters.
        :param pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]] identity_policies: Identity policy list.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if identity_alias_name is not None:
            pulumi.set(__self__, "identity_alias_name", identity_alias_name)
        if identity_policies is not None:
            pulumi.set(__self__, "identity_policies", identity_policies)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Identity description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="identityAliasName")
    def identity_alias_name(self) -> Optional[pulumi.Input[str]]:
        """
        Identity name.Supports English letters and numbers, the length cannot exceed 40 characters.
        """
        return pulumi.get(self, "identity_alias_name")

    @identity_alias_name.setter
    def identity_alias_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_alias_name", value)

    @property
    @pulumi.getter(name="identityPolicies")
    def identity_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]]]:
        """
        Identity policy list.
        """
        return pulumi.get(self, "identity_policies")

    @identity_policies.setter
    def identity_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OrgIdentityIdentityPolicyArgs']]]]):
        pulumi.set(self, "identity_policies", value)


class OrgIdentity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 identity_alias_name: Optional[pulumi.Input[str]] = None,
                 identity_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgIdentityIdentityPolicyArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization org_identity

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_identity = tencentcloud.organization.OrgIdentity("orgIdentity",
            description="iac-test",
            identity_alias_name="example-iac-test",
            identity_policies=[tencentcloud.organization.OrgIdentityIdentityPolicyArgs(
                policy_id=1,
                policy_name="AdministratorAccess",
                policy_type=2,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_identity can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgIdentity:OrgIdentity org_identity org_identity_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Identity description.
        :param pulumi.Input[str] identity_alias_name: Identity name.Supports English letters and numbers, the length cannot exceed 40 characters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgIdentityIdentityPolicyArgs']]]] identity_policies: Identity policy list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgIdentityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization org_identity

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_identity = tencentcloud.organization.OrgIdentity("orgIdentity",
            description="iac-test",
            identity_alias_name="example-iac-test",
            identity_policies=[tencentcloud.organization.OrgIdentityIdentityPolicyArgs(
                policy_id=1,
                policy_name="AdministratorAccess",
                policy_type=2,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_identity can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgIdentity:OrgIdentity org_identity org_identity_id
        ```

        :param str resource_name: The name of the resource.
        :param OrgIdentityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgIdentityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 identity_alias_name: Optional[pulumi.Input[str]] = None,
                 identity_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgIdentityIdentityPolicyArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgIdentityArgs.__new__(OrgIdentityArgs)

            __props__.__dict__["description"] = description
            if identity_alias_name is None and not opts.urn:
                raise TypeError("Missing required property 'identity_alias_name'")
            __props__.__dict__["identity_alias_name"] = identity_alias_name
            if identity_policies is None and not opts.urn:
                raise TypeError("Missing required property 'identity_policies'")
            __props__.__dict__["identity_policies"] = identity_policies
        super(OrgIdentity, __self__).__init__(
            'tencentcloud:Organization/orgIdentity:OrgIdentity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            identity_alias_name: Optional[pulumi.Input[str]] = None,
            identity_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgIdentityIdentityPolicyArgs']]]]] = None) -> 'OrgIdentity':
        """
        Get an existing OrgIdentity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Identity description.
        :param pulumi.Input[str] identity_alias_name: Identity name.Supports English letters and numbers, the length cannot exceed 40 characters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['OrgIdentityIdentityPolicyArgs']]]] identity_policies: Identity policy list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgIdentityState.__new__(_OrgIdentityState)

        __props__.__dict__["description"] = description
        __props__.__dict__["identity_alias_name"] = identity_alias_name
        __props__.__dict__["identity_policies"] = identity_policies
        return OrgIdentity(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Identity description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="identityAliasName")
    def identity_alias_name(self) -> pulumi.Output[str]:
        """
        Identity name.Supports English letters and numbers, the length cannot exceed 40 characters.
        """
        return pulumi.get(self, "identity_alias_name")

    @property
    @pulumi.getter(name="identityPolicies")
    def identity_policies(self) -> pulumi.Output[Sequence['outputs.OrgIdentityIdentityPolicy']]:
        """
        Identity policy list.
        """
        return pulumi.get(self, "identity_policies")

