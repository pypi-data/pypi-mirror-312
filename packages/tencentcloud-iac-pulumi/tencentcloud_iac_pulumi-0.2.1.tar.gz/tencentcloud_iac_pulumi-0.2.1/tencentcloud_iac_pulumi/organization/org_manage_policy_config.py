# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['OrgManagePolicyConfigArgs', 'OrgManagePolicyConfig']

@pulumi.input_type
class OrgManagePolicyConfigArgs:
    def __init__(__self__, *,
                 organization_id: pulumi.Input[int],
                 policy_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OrgManagePolicyConfig resource.
        :param pulumi.Input[int] organization_id: Organization ID.
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        pulumi.set(__self__, "organization_id", organization_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Input[int]:
        """
        Organization ID.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)


@pulumi.input_type
class _OrgManagePolicyConfigState:
    def __init__(__self__, *,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OrgManagePolicyConfig resources.
        :param pulumi.Input[int] organization_id: Organization ID.
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[int]]:
        """
        Organization ID.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)


class OrgManagePolicyConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a organization org_manage_policy_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_manage_policy_config = tencentcloud.organization.OrgManagePolicyConfig("orgManagePolicyConfig",
            organization_id=80001,
            policy_type="SERVICE_CONTROL_POLICY")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_manage_policy_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgManagePolicyConfig:OrgManagePolicyConfig org_manage_policy_config organization_id#policy_type
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] organization_id: Organization ID.
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OrgManagePolicyConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a organization org_manage_policy_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        org_manage_policy_config = tencentcloud.organization.OrgManagePolicyConfig("orgManagePolicyConfig",
            organization_id=80001,
            policy_type="SERVICE_CONTROL_POLICY")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        organization org_manage_policy_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Organization/orgManagePolicyConfig:OrgManagePolicyConfig org_manage_policy_config organization_id#policy_type
        ```

        :param str resource_name: The name of the resource.
        :param OrgManagePolicyConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OrgManagePolicyConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 organization_id: Optional[pulumi.Input[int]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OrgManagePolicyConfigArgs.__new__(OrgManagePolicyConfigArgs)

            if organization_id is None and not opts.urn:
                raise TypeError("Missing required property 'organization_id'")
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["policy_type"] = policy_type
        super(OrgManagePolicyConfig, __self__).__init__(
            'tencentcloud:Organization/orgManagePolicyConfig:OrgManagePolicyConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            organization_id: Optional[pulumi.Input[int]] = None,
            policy_type: Optional[pulumi.Input[str]] = None) -> 'OrgManagePolicyConfig':
        """
        Get an existing OrgManagePolicyConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] organization_id: Organization ID.
        :param pulumi.Input[str] policy_type: Policy type. Default value is SERVICE_CONTROL_POLICY.
               Valid values:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OrgManagePolicyConfigState.__new__(_OrgManagePolicyConfigState)

        __props__.__dict__["organization_id"] = organization_id
        __props__.__dict__["policy_type"] = policy_type
        return OrgManagePolicyConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[int]:
        """
        Organization ID.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Output[Optional[str]]:
        """
        Policy type. Default value is SERVICE_CONTROL_POLICY.
        Valid values:
        """
        return pulumi.get(self, "policy_type")

