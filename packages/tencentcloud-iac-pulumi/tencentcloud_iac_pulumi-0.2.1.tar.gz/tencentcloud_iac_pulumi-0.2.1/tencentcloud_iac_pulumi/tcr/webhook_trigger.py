# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebhookTriggerArgs', 'WebhookTrigger']

@pulumi.input_type
class WebhookTriggerArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[str],
                 registry_id: pulumi.Input[str],
                 trigger: pulumi.Input['WebhookTriggerTriggerArgs'],
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a WebhookTrigger resource.
        :param pulumi.Input[str] namespace: namespace name.
        :param pulumi.Input[str] registry_id: instance Id.
        :param pulumi.Input['WebhookTriggerTriggerArgs'] trigger: trigger parameters.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "registry_id", registry_id)
        pulumi.set(__self__, "trigger", trigger)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> pulumi.Input[str]:
        """
        instance Id.
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input['WebhookTriggerTriggerArgs']:
        """
        trigger parameters.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input['WebhookTriggerTriggerArgs']):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _WebhookTriggerState:
    def __init__(__self__, *,
                 namespace: Optional[pulumi.Input[str]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trigger: Optional[pulumi.Input['WebhookTriggerTriggerArgs']] = None):
        """
        Input properties used for looking up and filtering WebhookTrigger resources.
        :param pulumi.Input[str] namespace: namespace name.
        :param pulumi.Input[str] registry_id: instance Id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input['WebhookTriggerTriggerArgs'] trigger: trigger parameters.
        """
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if registry_id is not None:
            pulumi.set(__self__, "registry_id", registry_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> Optional[pulumi.Input[str]]:
        """
        instance Id.
        """
        return pulumi.get(self, "registry_id")

    @registry_id.setter
    def registry_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "registry_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input['WebhookTriggerTriggerArgs']]:
        """
        trigger parameters.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input['WebhookTriggerTriggerArgs']]):
        pulumi.set(self, "trigger", value)


class WebhookTrigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trigger: Optional[pulumi.Input[pulumi.InputType['WebhookTriggerTriggerArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcr webhook trigger

        ## Example Usage

        ### Create a tcr webhook trigger instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.tcr.Instance("exampleInstance",
            instance_type="basic",
            delete_bucket=True,
            tags={
                "test": "test",
            })
        example_namespace = tencentcloud.tcr.Namespace("exampleNamespace",
            instance_id=example_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        example_namespaces = tencentcloud.Tcr.get_namespaces_output(instance_id=example_namespace.instance_id)
        ns_id = example_namespaces.namespace_lists[0].id
        example_webhook_trigger = tencentcloud.tcr.WebhookTrigger("exampleWebhookTrigger",
            registry_id=example_instance.id,
            namespace=example_namespace.name,
            trigger=tencentcloud.tcr.WebhookTriggerTriggerArgs(
                name="trigger-example",
                targets=[tencentcloud.tcr.WebhookTriggerTriggerTargetArgs(
                    address="http://example.org/post",
                    headers=[tencentcloud.tcr.WebhookTriggerTriggerTargetHeaderArgs(
                        key="X-Custom-Header",
                        values=["a"],
                    )],
                )],
                event_types=["pushImage"],
                condition=".*",
                enabled=True,
                description="example for trigger description",
                namespace_id=ns_id,
            ),
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcr webhook_trigger can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcr/webhookTrigger:WebhookTrigger example webhook_trigger_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] namespace: namespace name.
        :param pulumi.Input[str] registry_id: instance Id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[pulumi.InputType['WebhookTriggerTriggerArgs']] trigger: trigger parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebhookTriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcr webhook trigger

        ## Example Usage

        ### Create a tcr webhook trigger instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.tcr.Instance("exampleInstance",
            instance_type="basic",
            delete_bucket=True,
            tags={
                "test": "test",
            })
        example_namespace = tencentcloud.tcr.Namespace("exampleNamespace",
            instance_id=example_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        example_namespaces = tencentcloud.Tcr.get_namespaces_output(instance_id=example_namespace.instance_id)
        ns_id = example_namespaces.namespace_lists[0].id
        example_webhook_trigger = tencentcloud.tcr.WebhookTrigger("exampleWebhookTrigger",
            registry_id=example_instance.id,
            namespace=example_namespace.name,
            trigger=tencentcloud.tcr.WebhookTriggerTriggerArgs(
                name="trigger-example",
                targets=[tencentcloud.tcr.WebhookTriggerTriggerTargetArgs(
                    address="http://example.org/post",
                    headers=[tencentcloud.tcr.WebhookTriggerTriggerTargetHeaderArgs(
                        key="X-Custom-Header",
                        values=["a"],
                    )],
                )],
                event_types=["pushImage"],
                condition=".*",
                enabled=True,
                description="example for trigger description",
                namespace_id=ns_id,
            ),
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcr webhook_trigger can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcr/webhookTrigger:WebhookTrigger example webhook_trigger_id
        ```

        :param str resource_name: The name of the resource.
        :param WebhookTriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebhookTriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 registry_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trigger: Optional[pulumi.Input[pulumi.InputType['WebhookTriggerTriggerArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebhookTriggerArgs.__new__(WebhookTriggerArgs)

            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if registry_id is None and not opts.urn:
                raise TypeError("Missing required property 'registry_id'")
            __props__.__dict__["registry_id"] = registry_id
            __props__.__dict__["tags"] = tags
            if trigger is None and not opts.urn:
                raise TypeError("Missing required property 'trigger'")
            __props__.__dict__["trigger"] = trigger
        super(WebhookTrigger, __self__).__init__(
            'tencentcloud:Tcr/webhookTrigger:WebhookTrigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            registry_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            trigger: Optional[pulumi.Input[pulumi.InputType['WebhookTriggerTriggerArgs']]] = None) -> 'WebhookTrigger':
        """
        Get an existing WebhookTrigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] namespace: namespace name.
        :param pulumi.Input[str] registry_id: instance Id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[pulumi.InputType['WebhookTriggerTriggerArgs']] trigger: trigger parameters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebhookTriggerState.__new__(_WebhookTriggerState)

        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["registry_id"] = registry_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trigger"] = trigger
        return WebhookTrigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> pulumi.Output[str]:
        """
        instance Id.
        """
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Output['outputs.WebhookTriggerTrigger']:
        """
        trigger parameters.
        """
        return pulumi.get(self, "trigger")

