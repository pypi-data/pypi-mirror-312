# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetWebhookTriggerLogsResult',
    'AwaitableGetWebhookTriggerLogsResult',
    'get_webhook_trigger_logs',
    'get_webhook_trigger_logs_output',
]

@pulumi.output_type
class GetWebhookTriggerLogsResult:
    """
    A collection of values returned by getWebhookTriggerLogs.
    """
    def __init__(__self__, id=None, logs=None, namespace=None, registry_id=None, result_output_file=None, tags=None, trigger_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if trigger_id and not isinstance(trigger_id, int):
            raise TypeError("Expected argument 'trigger_id' to be a int")
        pulumi.set(__self__, "trigger_id", trigger_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetWebhookTriggerLogsLogResult']:
        """
        log list.
        """
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> int:
        """
        trigger Id.
        """
        return pulumi.get(self, "trigger_id")


class AwaitableGetWebhookTriggerLogsResult(GetWebhookTriggerLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebhookTriggerLogsResult(
            id=self.id,
            logs=self.logs,
            namespace=self.namespace,
            registry_id=self.registry_id,
            result_output_file=self.result_output_file,
            tags=self.tags,
            trigger_id=self.trigger_id)


def get_webhook_trigger_logs(namespace: Optional[str] = None,
                             registry_id: Optional[str] = None,
                             result_output_file: Optional[str] = None,
                             tags: Optional[Mapping[str, Any]] = None,
                             trigger_id: Optional[int] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebhookTriggerLogsResult:
    """
    Use this data source to query detailed information of tcr_get_webhook_trigger_logs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    my_logs = tencentcloud.Tcr.get_webhook_trigger_logs(registry_id=local["tcr_id"],
        namespace=var["tcr_namespace"],
        trigger_id=var["trigger_id"],
        tags={
            "createdBy": "terraform",
        })
    ```
    <!--End PulumiCodeChooser -->


    :param str namespace: namespace.
    :param str registry_id: instance Id.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: Tag description list.
    :param int trigger_id: trigger id.
    """
    __args__ = dict()
    __args__['namespace'] = namespace
    __args__['registryId'] = registry_id
    __args__['resultOutputFile'] = result_output_file
    __args__['tags'] = tags
    __args__['triggerId'] = trigger_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tcr/getWebhookTriggerLogs:getWebhookTriggerLogs', __args__, opts=opts, typ=GetWebhookTriggerLogsResult).value

    return AwaitableGetWebhookTriggerLogsResult(
        id=pulumi.get(__ret__, 'id'),
        logs=pulumi.get(__ret__, 'logs'),
        namespace=pulumi.get(__ret__, 'namespace'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tags=pulumi.get(__ret__, 'tags'),
        trigger_id=pulumi.get(__ret__, 'trigger_id'))


@_utilities.lift_output_func(get_webhook_trigger_logs)
def get_webhook_trigger_logs_output(namespace: Optional[pulumi.Input[str]] = None,
                                    registry_id: Optional[pulumi.Input[str]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                                    trigger_id: Optional[pulumi.Input[int]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWebhookTriggerLogsResult]:
    """
    Use this data source to query detailed information of tcr_get_webhook_trigger_logs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    my_logs = tencentcloud.Tcr.get_webhook_trigger_logs(registry_id=local["tcr_id"],
        namespace=var["tcr_namespace"],
        trigger_id=var["trigger_id"],
        tags={
            "createdBy": "terraform",
        })
    ```
    <!--End PulumiCodeChooser -->


    :param str namespace: namespace.
    :param str registry_id: instance Id.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: Tag description list.
    :param int trigger_id: trigger id.
    """
    ...
