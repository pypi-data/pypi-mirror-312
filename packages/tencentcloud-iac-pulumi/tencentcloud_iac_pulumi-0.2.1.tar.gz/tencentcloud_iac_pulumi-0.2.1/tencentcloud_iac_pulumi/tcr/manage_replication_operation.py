# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ManageReplicationOperationArgs', 'ManageReplicationOperation']

@pulumi.input_type
class ManageReplicationOperationArgs:
    def __init__(__self__, *,
                 destination_registry_id: pulumi.Input[str],
                 rule: pulumi.Input['ManageReplicationOperationRuleArgs'],
                 source_registry_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 destination_region_id: Optional[pulumi.Input[int]] = None,
                 peer_replication_option: Optional[pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs']] = None):
        """
        The set of arguments for constructing a ManageReplicationOperation resource.
        :param pulumi.Input[str] destination_registry_id: copy destination instance Id.
        :param pulumi.Input['ManageReplicationOperationRuleArgs'] rule: synchronization rules.
        :param pulumi.Input[str] source_registry_id: copy source instance Id.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[int] destination_region_id: the region ID of the target instance, such as Guangzhou is 1.
        :param pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs'] peer_replication_option: enable synchronization of configuration items across master account instances.
        """
        pulumi.set(__self__, "destination_registry_id", destination_registry_id)
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "source_registry_id", source_registry_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_region_id is not None:
            pulumi.set(__self__, "destination_region_id", destination_region_id)
        if peer_replication_option is not None:
            pulumi.set(__self__, "peer_replication_option", peer_replication_option)

    @property
    @pulumi.getter(name="destinationRegistryId")
    def destination_registry_id(self) -> pulumi.Input[str]:
        """
        copy destination instance Id.
        """
        return pulumi.get(self, "destination_registry_id")

    @destination_registry_id.setter
    def destination_registry_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_registry_id", value)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input['ManageReplicationOperationRuleArgs']:
        """
        synchronization rules.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input['ManageReplicationOperationRuleArgs']):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="sourceRegistryId")
    def source_registry_id(self) -> pulumi.Input[str]:
        """
        copy source instance Id.
        """
        return pulumi.get(self, "source_registry_id")

    @source_registry_id.setter
    def source_registry_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_registry_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationRegionId")
    def destination_region_id(self) -> Optional[pulumi.Input[int]]:
        """
        the region ID of the target instance, such as Guangzhou is 1.
        """
        return pulumi.get(self, "destination_region_id")

    @destination_region_id.setter
    def destination_region_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "destination_region_id", value)

    @property
    @pulumi.getter(name="peerReplicationOption")
    def peer_replication_option(self) -> Optional[pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs']]:
        """
        enable synchronization of configuration items across master account instances.
        """
        return pulumi.get(self, "peer_replication_option")

    @peer_replication_option.setter
    def peer_replication_option(self, value: Optional[pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs']]):
        pulumi.set(self, "peer_replication_option", value)


@pulumi.input_type
class _ManageReplicationOperationState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_region_id: Optional[pulumi.Input[int]] = None,
                 destination_registry_id: Optional[pulumi.Input[str]] = None,
                 peer_replication_option: Optional[pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs']] = None,
                 rule: Optional[pulumi.Input['ManageReplicationOperationRuleArgs']] = None,
                 source_registry_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ManageReplicationOperation resources.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[int] destination_region_id: the region ID of the target instance, such as Guangzhou is 1.
        :param pulumi.Input[str] destination_registry_id: copy destination instance Id.
        :param pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs'] peer_replication_option: enable synchronization of configuration items across master account instances.
        :param pulumi.Input['ManageReplicationOperationRuleArgs'] rule: synchronization rules.
        :param pulumi.Input[str] source_registry_id: copy source instance Id.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if destination_region_id is not None:
            pulumi.set(__self__, "destination_region_id", destination_region_id)
        if destination_registry_id is not None:
            pulumi.set(__self__, "destination_registry_id", destination_registry_id)
        if peer_replication_option is not None:
            pulumi.set(__self__, "peer_replication_option", peer_replication_option)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if source_registry_id is not None:
            pulumi.set(__self__, "source_registry_id", source_registry_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destinationRegionId")
    def destination_region_id(self) -> Optional[pulumi.Input[int]]:
        """
        the region ID of the target instance, such as Guangzhou is 1.
        """
        return pulumi.get(self, "destination_region_id")

    @destination_region_id.setter
    def destination_region_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "destination_region_id", value)

    @property
    @pulumi.getter(name="destinationRegistryId")
    def destination_registry_id(self) -> Optional[pulumi.Input[str]]:
        """
        copy destination instance Id.
        """
        return pulumi.get(self, "destination_registry_id")

    @destination_registry_id.setter
    def destination_registry_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_registry_id", value)

    @property
    @pulumi.getter(name="peerReplicationOption")
    def peer_replication_option(self) -> Optional[pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs']]:
        """
        enable synchronization of configuration items across master account instances.
        """
        return pulumi.get(self, "peer_replication_option")

    @peer_replication_option.setter
    def peer_replication_option(self, value: Optional[pulumi.Input['ManageReplicationOperationPeerReplicationOptionArgs']]):
        pulumi.set(self, "peer_replication_option", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['ManageReplicationOperationRuleArgs']]:
        """
        synchronization rules.
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['ManageReplicationOperationRuleArgs']]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="sourceRegistryId")
    def source_registry_id(self) -> Optional[pulumi.Input[str]]:
        """
        copy source instance Id.
        """
        return pulumi.get(self, "source_registry_id")

    @source_registry_id.setter
    def source_registry_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_registry_id", value)


class ManageReplicationOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_region_id: Optional[pulumi.Input[int]] = None,
                 destination_registry_id: Optional[pulumi.Input[str]] = None,
                 peer_replication_option: Optional[pulumi.Input[pulumi.InputType['ManageReplicationOperationPeerReplicationOptionArgs']]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['ManageReplicationOperationRuleArgs']]] = None,
                 source_registry_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to start a tcr instance replication operation

        ## Example Usage

        ### Sync source tcr instance to target instance

        Synchronize an existing tcr instance to the destination instance. This operation is often used in the cross-multiple region scenario.
        Assume you have had two TCR instances before this operation. This example shows how to sync a tcr instance from ap-guangzhou(gz) to ap-shanghai(sh).

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # tcr instance on ap-guangzhou
        example_gz_instance = tencentcloud.tcr.Instance("exampleGzInstance",
            instance_type="premium",
            tags={
                "createdBy": "terraform",
            })
        example_gz_namespace = tencentcloud.tcr.Namespace("exampleGzNamespace",
            instance_id=example_gz_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        # tcr instance on ap-shanghai
        example_sh_instance = tencentcloud.tcr.Instance("exampleShInstance",
            instance_type="premium",
            delete_bucket=True)
        example_sh_namespace = tencentcloud.tcr.Namespace("exampleShNamespace",
            instance_id=example_sh_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[int] destination_region_id: the region ID of the target instance, such as Guangzhou is 1.
        :param pulumi.Input[str] destination_registry_id: copy destination instance Id.
        :param pulumi.Input[pulumi.InputType['ManageReplicationOperationPeerReplicationOptionArgs']] peer_replication_option: enable synchronization of configuration items across master account instances.
        :param pulumi.Input[pulumi.InputType['ManageReplicationOperationRuleArgs']] rule: synchronization rules.
        :param pulumi.Input[str] source_registry_id: copy source instance Id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManageReplicationOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to start a tcr instance replication operation

        ## Example Usage

        ### Sync source tcr instance to target instance

        Synchronize an existing tcr instance to the destination instance. This operation is often used in the cross-multiple region scenario.
        Assume you have had two TCR instances before this operation. This example shows how to sync a tcr instance from ap-guangzhou(gz) to ap-shanghai(sh).

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        # tcr instance on ap-guangzhou
        example_gz_instance = tencentcloud.tcr.Instance("exampleGzInstance",
            instance_type="premium",
            tags={
                "createdBy": "terraform",
            })
        example_gz_namespace = tencentcloud.tcr.Namespace("exampleGzNamespace",
            instance_id=example_gz_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        # tcr instance on ap-shanghai
        example_sh_instance = tencentcloud.tcr.Instance("exampleShInstance",
            instance_type="premium",
            delete_bucket=True)
        example_sh_namespace = tencentcloud.tcr.Namespace("exampleShNamespace",
            instance_id=example_sh_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ManageReplicationOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManageReplicationOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 destination_region_id: Optional[pulumi.Input[int]] = None,
                 destination_registry_id: Optional[pulumi.Input[str]] = None,
                 peer_replication_option: Optional[pulumi.Input[pulumi.InputType['ManageReplicationOperationPeerReplicationOptionArgs']]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['ManageReplicationOperationRuleArgs']]] = None,
                 source_registry_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManageReplicationOperationArgs.__new__(ManageReplicationOperationArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["destination_region_id"] = destination_region_id
            if destination_registry_id is None and not opts.urn:
                raise TypeError("Missing required property 'destination_registry_id'")
            __props__.__dict__["destination_registry_id"] = destination_registry_id
            __props__.__dict__["peer_replication_option"] = peer_replication_option
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
            if source_registry_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_registry_id'")
            __props__.__dict__["source_registry_id"] = source_registry_id
        super(ManageReplicationOperation, __self__).__init__(
            'tencentcloud:Tcr/manageReplicationOperation:ManageReplicationOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            destination_region_id: Optional[pulumi.Input[int]] = None,
            destination_registry_id: Optional[pulumi.Input[str]] = None,
            peer_replication_option: Optional[pulumi.Input[pulumi.InputType['ManageReplicationOperationPeerReplicationOptionArgs']]] = None,
            rule: Optional[pulumi.Input[pulumi.InputType['ManageReplicationOperationRuleArgs']]] = None,
            source_registry_id: Optional[pulumi.Input[str]] = None) -> 'ManageReplicationOperation':
        """
        Get an existing ManageReplicationOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[int] destination_region_id: the region ID of the target instance, such as Guangzhou is 1.
        :param pulumi.Input[str] destination_registry_id: copy destination instance Id.
        :param pulumi.Input[pulumi.InputType['ManageReplicationOperationPeerReplicationOptionArgs']] peer_replication_option: enable synchronization of configuration items across master account instances.
        :param pulumi.Input[pulumi.InputType['ManageReplicationOperationRuleArgs']] rule: synchronization rules.
        :param pulumi.Input[str] source_registry_id: copy source instance Id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManageReplicationOperationState.__new__(_ManageReplicationOperationState)

        __props__.__dict__["description"] = description
        __props__.__dict__["destination_region_id"] = destination_region_id
        __props__.__dict__["destination_registry_id"] = destination_registry_id
        __props__.__dict__["peer_replication_option"] = peer_replication_option
        __props__.__dict__["rule"] = rule
        __props__.__dict__["source_registry_id"] = source_registry_id
        return ManageReplicationOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationRegionId")
    def destination_region_id(self) -> pulumi.Output[Optional[int]]:
        """
        the region ID of the target instance, such as Guangzhou is 1.
        """
        return pulumi.get(self, "destination_region_id")

    @property
    @pulumi.getter(name="destinationRegistryId")
    def destination_registry_id(self) -> pulumi.Output[str]:
        """
        copy destination instance Id.
        """
        return pulumi.get(self, "destination_registry_id")

    @property
    @pulumi.getter(name="peerReplicationOption")
    def peer_replication_option(self) -> pulumi.Output[Optional['outputs.ManageReplicationOperationPeerReplicationOption']]:
        """
        enable synchronization of configuration items across master account instances.
        """
        return pulumi.get(self, "peer_replication_option")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output['outputs.ManageReplicationOperationRule']:
        """
        synchronization rules.
        """
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="sourceRegistryId")
    def source_registry_id(self) -> pulumi.Output[str]:
        """
        copy source instance Id.
        """
        return pulumi.get(self, "source_registry_id")

