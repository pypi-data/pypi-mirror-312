# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NamespaceArgs', 'Namespace']

@pulumi.input_type
class NamespaceArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 cve_whitelist_items: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]]] = None,
                 is_auto_scan: Optional[pulumi.Input[bool]] = None,
                 is_prevent_vul: Optional[pulumi.Input[bool]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Namespace resource.
        :param pulumi.Input[str] instance_id: ID of the TCR instance.
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]] cve_whitelist_items: Vulnerability Whitelist.
        :param pulumi.Input[bool] is_auto_scan: Scanning level, `True` is automatic, `False` is manual. Default is `false`.
        :param pulumi.Input[bool] is_prevent_vul: Blocking switch, `True` is open, `False` is closed. Default is `false`.
        :param pulumi.Input[bool] is_public: Indicate that the namespace is public or not. Default is `false`.
        :param pulumi.Input[str] name: Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
        :param pulumi.Input[str] severity: Block vulnerability level, currently only supports `low`, `medium`, `high`.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if cve_whitelist_items is not None:
            pulumi.set(__self__, "cve_whitelist_items", cve_whitelist_items)
        if is_auto_scan is not None:
            pulumi.set(__self__, "is_auto_scan", is_auto_scan)
        if is_prevent_vul is not None:
            pulumi.set(__self__, "is_prevent_vul", is_prevent_vul)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        ID of the TCR instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="cveWhitelistItems")
    def cve_whitelist_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]]]:
        """
        Vulnerability Whitelist.
        """
        return pulumi.get(self, "cve_whitelist_items")

    @cve_whitelist_items.setter
    def cve_whitelist_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]]]):
        pulumi.set(self, "cve_whitelist_items", value)

    @property
    @pulumi.getter(name="isAutoScan")
    def is_auto_scan(self) -> Optional[pulumi.Input[bool]]:
        """
        Scanning level, `True` is automatic, `False` is manual. Default is `false`.
        """
        return pulumi.get(self, "is_auto_scan")

    @is_auto_scan.setter
    def is_auto_scan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auto_scan", value)

    @property
    @pulumi.getter(name="isPreventVul")
    def is_prevent_vul(self) -> Optional[pulumi.Input[bool]]:
        """
        Blocking switch, `True` is open, `False` is closed. Default is `false`.
        """
        return pulumi.get(self, "is_prevent_vul")

    @is_prevent_vul.setter
    def is_prevent_vul(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_prevent_vul", value)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate that the namespace is public or not. Default is `false`.
        """
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_public", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Block vulnerability level, currently only supports `low`, `medium`, `high`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


@pulumi.input_type
class _NamespaceState:
    def __init__(__self__, *,
                 cve_whitelist_items: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_auto_scan: Optional[pulumi.Input[bool]] = None,
                 is_prevent_vul: Optional[pulumi.Input[bool]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Namespace resources.
        :param pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]] cve_whitelist_items: Vulnerability Whitelist.
        :param pulumi.Input[str] instance_id: ID of the TCR instance.
        :param pulumi.Input[bool] is_auto_scan: Scanning level, `True` is automatic, `False` is manual. Default is `false`.
        :param pulumi.Input[bool] is_prevent_vul: Blocking switch, `True` is open, `False` is closed. Default is `false`.
        :param pulumi.Input[bool] is_public: Indicate that the namespace is public or not. Default is `false`.
        :param pulumi.Input[str] name: Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
        :param pulumi.Input[str] severity: Block vulnerability level, currently only supports `low`, `medium`, `high`.
        """
        if cve_whitelist_items is not None:
            pulumi.set(__self__, "cve_whitelist_items", cve_whitelist_items)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_auto_scan is not None:
            pulumi.set(__self__, "is_auto_scan", is_auto_scan)
        if is_prevent_vul is not None:
            pulumi.set(__self__, "is_prevent_vul", is_prevent_vul)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)

    @property
    @pulumi.getter(name="cveWhitelistItems")
    def cve_whitelist_items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]]]:
        """
        Vulnerability Whitelist.
        """
        return pulumi.get(self, "cve_whitelist_items")

    @cve_whitelist_items.setter
    def cve_whitelist_items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NamespaceCveWhitelistItemArgs']]]]):
        pulumi.set(self, "cve_whitelist_items", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the TCR instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isAutoScan")
    def is_auto_scan(self) -> Optional[pulumi.Input[bool]]:
        """
        Scanning level, `True` is automatic, `False` is manual. Default is `false`.
        """
        return pulumi.get(self, "is_auto_scan")

    @is_auto_scan.setter
    def is_auto_scan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auto_scan", value)

    @property
    @pulumi.getter(name="isPreventVul")
    def is_prevent_vul(self) -> Optional[pulumi.Input[bool]]:
        """
        Blocking switch, `True` is open, `False` is closed. Default is `false`.
        """
        return pulumi.get(self, "is_prevent_vul")

    @is_prevent_vul.setter
    def is_prevent_vul(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_prevent_vul", value)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate that the namespace is public or not. Default is `false`.
        """
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_public", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Block vulnerability level, currently only supports `low`, `medium`, `high`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)


class Namespace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cve_whitelist_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NamespaceCveWhitelistItemArgs']]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_auto_scan: Optional[pulumi.Input[bool]] = None,
                 is_prevent_vul: Optional[pulumi.Input[bool]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create tcr namespace.

        ## Example Usage

        ### Create a tcr namespace instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.tcr.Instance("exampleInstance",
            instance_type="premium",
            tags={
                "createdBy": "terraform",
            })
        example_namespace = tencentcloud.tcr.Namespace("exampleNamespace",
            instance_id=example_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcr namespace can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcr/namespace:Namespace example tcr_instance_id#namespace_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NamespaceCveWhitelistItemArgs']]]] cve_whitelist_items: Vulnerability Whitelist.
        :param pulumi.Input[str] instance_id: ID of the TCR instance.
        :param pulumi.Input[bool] is_auto_scan: Scanning level, `True` is automatic, `False` is manual. Default is `false`.
        :param pulumi.Input[bool] is_prevent_vul: Blocking switch, `True` is open, `False` is closed. Default is `false`.
        :param pulumi.Input[bool] is_public: Indicate that the namespace is public or not. Default is `false`.
        :param pulumi.Input[str] name: Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
        :param pulumi.Input[str] severity: Block vulnerability level, currently only supports `low`, `medium`, `high`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create tcr namespace.

        ## Example Usage

        ### Create a tcr namespace instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.tcr.Instance("exampleInstance",
            instance_type="premium",
            tags={
                "createdBy": "terraform",
            })
        example_namespace = tencentcloud.tcr.Namespace("exampleNamespace",
            instance_id=example_instance.id,
            is_public=True,
            is_auto_scan=True,
            is_prevent_vul=True,
            severity="medium",
            cve_whitelist_items=[tencentcloud.tcr.NamespaceCveWhitelistItemArgs(
                cve_id="cve-xxxxx",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcr namespace can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcr/namespace:Namespace example tcr_instance_id#namespace_name
        ```

        :param str resource_name: The name of the resource.
        :param NamespaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cve_whitelist_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NamespaceCveWhitelistItemArgs']]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 is_auto_scan: Optional[pulumi.Input[bool]] = None,
                 is_prevent_vul: Optional[pulumi.Input[bool]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceArgs.__new__(NamespaceArgs)

            __props__.__dict__["cve_whitelist_items"] = cve_whitelist_items
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["is_auto_scan"] = is_auto_scan
            __props__.__dict__["is_prevent_vul"] = is_prevent_vul
            __props__.__dict__["is_public"] = is_public
            __props__.__dict__["name"] = name
            __props__.__dict__["severity"] = severity
        super(Namespace, __self__).__init__(
            'tencentcloud:Tcr/namespace:Namespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cve_whitelist_items: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NamespaceCveWhitelistItemArgs']]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            is_auto_scan: Optional[pulumi.Input[bool]] = None,
            is_prevent_vul: Optional[pulumi.Input[bool]] = None,
            is_public: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            severity: Optional[pulumi.Input[str]] = None) -> 'Namespace':
        """
        Get an existing Namespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NamespaceCveWhitelistItemArgs']]]] cve_whitelist_items: Vulnerability Whitelist.
        :param pulumi.Input[str] instance_id: ID of the TCR instance.
        :param pulumi.Input[bool] is_auto_scan: Scanning level, `True` is automatic, `False` is manual. Default is `false`.
        :param pulumi.Input[bool] is_prevent_vul: Blocking switch, `True` is open, `False` is closed. Default is `false`.
        :param pulumi.Input[bool] is_public: Indicate that the namespace is public or not. Default is `false`.
        :param pulumi.Input[str] name: Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
        :param pulumi.Input[str] severity: Block vulnerability level, currently only supports `low`, `medium`, `high`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceState.__new__(_NamespaceState)

        __props__.__dict__["cve_whitelist_items"] = cve_whitelist_items
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_auto_scan"] = is_auto_scan
        __props__.__dict__["is_prevent_vul"] = is_prevent_vul
        __props__.__dict__["is_public"] = is_public
        __props__.__dict__["name"] = name
        __props__.__dict__["severity"] = severity
        return Namespace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cveWhitelistItems")
    def cve_whitelist_items(self) -> pulumi.Output[Optional[Sequence['outputs.NamespaceCveWhitelistItem']]]:
        """
        Vulnerability Whitelist.
        """
        return pulumi.get(self, "cve_whitelist_items")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        ID of the TCR instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isAutoScan")
    def is_auto_scan(self) -> pulumi.Output[Optional[bool]]:
        """
        Scanning level, `True` is automatic, `False` is manual. Default is `false`.
        """
        return pulumi.get(self, "is_auto_scan")

    @property
    @pulumi.getter(name="isPreventVul")
    def is_prevent_vul(self) -> pulumi.Output[Optional[bool]]:
        """
        Blocking switch, `True` is open, `False` is closed. Default is `false`.
        """
        return pulumi.get(self, "is_prevent_vul")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate that the namespace is public or not. Default is `false`.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the TCR namespace. Valid length is [2~30]. It can only contain lowercase letters, numbers and separators (`.`, `_`, `-`), and cannot start, end or continue with separators.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[Optional[str]]:
        """
        Block vulnerability level, currently only supports `low`, `medium`, `high`.
        """
        return pulumi.get(self, "severity")

