# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTagRetentionExecutionsResult',
    'AwaitableGetTagRetentionExecutionsResult',
    'get_tag_retention_executions',
    'get_tag_retention_executions_output',
]

@pulumi.output_type
class GetTagRetentionExecutionsResult:
    """
    A collection of values returned by getTagRetentionExecutions.
    """
    def __init__(__self__, id=None, registry_id=None, result_output_file=None, retention_execution_lists=None, retention_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if retention_execution_lists and not isinstance(retention_execution_lists, list):
            raise TypeError("Expected argument 'retention_execution_lists' to be a list")
        pulumi.set(__self__, "retention_execution_lists", retention_execution_lists)
        if retention_id and not isinstance(retention_id, int):
            raise TypeError("Expected argument 'retention_id' to be a int")
        pulumi.set(__self__, "retention_id", retention_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="retentionExecutionLists")
    def retention_execution_lists(self) -> Sequence['outputs.GetTagRetentionExecutionsRetentionExecutionListResult']:
        """
        list of version retention execution records.
        """
        return pulumi.get(self, "retention_execution_lists")

    @property
    @pulumi.getter(name="retentionId")
    def retention_id(self) -> int:
        """
        retention id.
        """
        return pulumi.get(self, "retention_id")


class AwaitableGetTagRetentionExecutionsResult(GetTagRetentionExecutionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTagRetentionExecutionsResult(
            id=self.id,
            registry_id=self.registry_id,
            result_output_file=self.result_output_file,
            retention_execution_lists=self.retention_execution_lists,
            retention_id=self.retention_id)


def get_tag_retention_executions(registry_id: Optional[str] = None,
                                 result_output_file: Optional[str] = None,
                                 retention_id: Optional[int] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTagRetentionExecutionsResult:
    """
    Use this data source to query detailed information of tcr tag_retention_executions

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tag_retention_executions = tencentcloud.Tcr.get_tag_retention_executions(registry_id="tcr_ins_id",
        retention_id=1)
    ```
    <!--End PulumiCodeChooser -->


    :param str registry_id: instance id.
    :param str result_output_file: Used to save results.
    :param int retention_id: retention id.
    """
    __args__ = dict()
    __args__['registryId'] = registry_id
    __args__['resultOutputFile'] = result_output_file
    __args__['retentionId'] = retention_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tcr/getTagRetentionExecutions:getTagRetentionExecutions', __args__, opts=opts, typ=GetTagRetentionExecutionsResult).value

    return AwaitableGetTagRetentionExecutionsResult(
        id=pulumi.get(__ret__, 'id'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        retention_execution_lists=pulumi.get(__ret__, 'retention_execution_lists'),
        retention_id=pulumi.get(__ret__, 'retention_id'))


@_utilities.lift_output_func(get_tag_retention_executions)
def get_tag_retention_executions_output(registry_id: Optional[pulumi.Input[str]] = None,
                                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        retention_id: Optional[pulumi.Input[int]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTagRetentionExecutionsResult]:
    """
    Use this data source to query detailed information of tcr tag_retention_executions

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tag_retention_executions = tencentcloud.Tcr.get_tag_retention_executions(registry_id="tcr_ins_id",
        retention_id=1)
    ```
    <!--End PulumiCodeChooser -->


    :param str registry_id: instance id.
    :param str result_output_file: Used to save results.
    :param int retention_id: retention id.
    """
    ...
