# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetReplicationInstanceCreateTasksResult',
    'AwaitableGetReplicationInstanceCreateTasksResult',
    'get_replication_instance_create_tasks',
    'get_replication_instance_create_tasks_output',
]

@pulumi.output_type
class GetReplicationInstanceCreateTasksResult:
    """
    A collection of values returned by getReplicationInstanceCreateTasks.
    """
    def __init__(__self__, id=None, replication_region_id=None, replication_registry_id=None, result_output_file=None, status=None, task_details=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if replication_region_id and not isinstance(replication_region_id, int):
            raise TypeError("Expected argument 'replication_region_id' to be a int")
        pulumi.set(__self__, "replication_region_id", replication_region_id)
        if replication_registry_id and not isinstance(replication_registry_id, str):
            raise TypeError("Expected argument 'replication_registry_id' to be a str")
        pulumi.set(__self__, "replication_registry_id", replication_registry_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_details and not isinstance(task_details, list):
            raise TypeError("Expected argument 'task_details' to be a list")
        pulumi.set(__self__, "task_details", task_details)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="replicationRegionId")
    def replication_region_id(self) -> int:
        return pulumi.get(self, "replication_region_id")

    @property
    @pulumi.getter(name="replicationRegistryId")
    def replication_registry_id(self) -> str:
        return pulumi.get(self, "replication_registry_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        overall task status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskDetails")
    def task_details(self) -> Sequence['outputs.GetReplicationInstanceCreateTasksTaskDetailResult']:
        """
        task details.
        """
        return pulumi.get(self, "task_details")


class AwaitableGetReplicationInstanceCreateTasksResult(GetReplicationInstanceCreateTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReplicationInstanceCreateTasksResult(
            id=self.id,
            replication_region_id=self.replication_region_id,
            replication_registry_id=self.replication_registry_id,
            result_output_file=self.result_output_file,
            status=self.status,
            task_details=self.task_details)


def get_replication_instance_create_tasks(replication_region_id: Optional[int] = None,
                                          replication_registry_id: Optional[str] = None,
                                          result_output_file: Optional[str] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReplicationInstanceCreateTasksResult:
    """
    Use this data source to query detailed information of tcr replication_instance_create_tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    create_tasks = tencentcloud.Tcr.get_replication_instance_create_tasks(replication_registry_id=local["dst_registry_id"],
        replication_region_id=local["dst_region_id"])
    ```
    <!--End PulumiCodeChooser -->


    :param int replication_region_id: synchronization instance region Id, see ReplicationRegionId in DescribeReplicationInstances.
    :param str replication_registry_id: synchronization instance Id, see RegistryId in DescribeReplicationInstances.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['replicationRegionId'] = replication_region_id
    __args__['replicationRegistryId'] = replication_registry_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tcr/getReplicationInstanceCreateTasks:getReplicationInstanceCreateTasks', __args__, opts=opts, typ=GetReplicationInstanceCreateTasksResult).value

    return AwaitableGetReplicationInstanceCreateTasksResult(
        id=pulumi.get(__ret__, 'id'),
        replication_region_id=pulumi.get(__ret__, 'replication_region_id'),
        replication_registry_id=pulumi.get(__ret__, 'replication_registry_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        status=pulumi.get(__ret__, 'status'),
        task_details=pulumi.get(__ret__, 'task_details'))


@_utilities.lift_output_func(get_replication_instance_create_tasks)
def get_replication_instance_create_tasks_output(replication_region_id: Optional[pulumi.Input[int]] = None,
                                                 replication_registry_id: Optional[pulumi.Input[str]] = None,
                                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReplicationInstanceCreateTasksResult]:
    """
    Use this data source to query detailed information of tcr replication_instance_create_tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    create_tasks = tencentcloud.Tcr.get_replication_instance_create_tasks(replication_registry_id=local["dst_registry_id"],
        replication_region_id=local["dst_region_id"])
    ```
    <!--End PulumiCodeChooser -->


    :param int replication_region_id: synchronization instance region Id, see ReplicationRegionId in DescribeReplicationInstances.
    :param str replication_registry_id: synchronization instance Id, see RegistryId in DescribeReplicationInstances.
    :param str result_output_file: Used to save results.
    """
    ...
