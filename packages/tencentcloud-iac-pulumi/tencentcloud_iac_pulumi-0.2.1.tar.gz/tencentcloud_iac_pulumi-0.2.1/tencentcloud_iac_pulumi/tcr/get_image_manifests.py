# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetImageManifestsResult',
    'AwaitableGetImageManifestsResult',
    'get_image_manifests',
    'get_image_manifests_output',
]

@pulumi.output_type
class GetImageManifestsResult:
    """
    A collection of values returned by getImageManifests.
    """
    def __init__(__self__, config=None, id=None, image_version=None, manifest=None, namespace_name=None, registry_id=None, repository_name=None, result_output_file=None):
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_version and not isinstance(image_version, str):
            raise TypeError("Expected argument 'image_version' to be a str")
        pulumi.set(__self__, "image_version", image_version)
        if manifest and not isinstance(manifest, str):
            raise TypeError("Expected argument 'manifest' to be a str")
        pulumi.set(__self__, "manifest", manifest)
        if namespace_name and not isinstance(namespace_name, str):
            raise TypeError("Expected argument 'namespace_name' to be a str")
        pulumi.set(__self__, "namespace_name", namespace_name)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if repository_name and not isinstance(repository_name, str):
            raise TypeError("Expected argument 'repository_name' to be a str")
        pulumi.set(__self__, "repository_name", repository_name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def config(self) -> str:
        """
        configuration information of the image.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageVersion")
    def image_version(self) -> str:
        return pulumi.get(self, "image_version")

    @property
    @pulumi.getter
    def manifest(self) -> str:
        """
        Manifest information of the image.
        """
        return pulumi.get(self, "manifest")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="repositoryName")
    def repository_name(self) -> str:
        return pulumi.get(self, "repository_name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetImageManifestsResult(GetImageManifestsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageManifestsResult(
            config=self.config,
            id=self.id,
            image_version=self.image_version,
            manifest=self.manifest,
            namespace_name=self.namespace_name,
            registry_id=self.registry_id,
            repository_name=self.repository_name,
            result_output_file=self.result_output_file)


def get_image_manifests(image_version: Optional[str] = None,
                        namespace_name: Optional[str] = None,
                        registry_id: Optional[str] = None,
                        repository_name: Optional[str] = None,
                        result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageManifestsResult:
    """
    Use this data source to query detailed information of tcr image_manifests

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    image_manifests = tencentcloud.Tcr.get_image_manifests(image_version="v1",
        namespace_name="%s",
        registry_id="%s",
        repository_name="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str image_version: mirror version.
    :param str namespace_name: namespace name.
    :param str registry_id: instance ID.
    :param str repository_name: mirror warehouse name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['imageVersion'] = image_version
    __args__['namespaceName'] = namespace_name
    __args__['registryId'] = registry_id
    __args__['repositoryName'] = repository_name
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tcr/getImageManifests:getImageManifests', __args__, opts=opts, typ=GetImageManifestsResult).value

    return AwaitableGetImageManifestsResult(
        config=pulumi.get(__ret__, 'config'),
        id=pulumi.get(__ret__, 'id'),
        image_version=pulumi.get(__ret__, 'image_version'),
        manifest=pulumi.get(__ret__, 'manifest'),
        namespace_name=pulumi.get(__ret__, 'namespace_name'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        repository_name=pulumi.get(__ret__, 'repository_name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_image_manifests)
def get_image_manifests_output(image_version: Optional[pulumi.Input[str]] = None,
                               namespace_name: Optional[pulumi.Input[str]] = None,
                               registry_id: Optional[pulumi.Input[str]] = None,
                               repository_name: Optional[pulumi.Input[str]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImageManifestsResult]:
    """
    Use this data source to query detailed information of tcr image_manifests

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    image_manifests = tencentcloud.Tcr.get_image_manifests(image_version="v1",
        namespace_name="%s",
        registry_id="%s",
        repository_name="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str image_version: mirror version.
    :param str namespace_name: namespace name.
    :param str registry_id: instance ID.
    :param str repository_name: mirror warehouse name.
    :param str result_output_file: Used to save results.
    """
    ...
