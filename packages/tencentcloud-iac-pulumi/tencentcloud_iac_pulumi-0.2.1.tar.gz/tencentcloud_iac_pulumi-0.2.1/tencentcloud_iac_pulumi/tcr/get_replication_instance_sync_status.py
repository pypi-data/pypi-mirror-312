# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetReplicationInstanceSyncStatusResult',
    'AwaitableGetReplicationInstanceSyncStatusResult',
    'get_replication_instance_sync_status',
    'get_replication_instance_sync_status_output',
]

@pulumi.output_type
class GetReplicationInstanceSyncStatusResult:
    """
    A collection of values returned by getReplicationInstanceSyncStatus.
    """
    def __init__(__self__, id=None, registry_id=None, replication_logs=None, replication_region_id=None, replication_registry_id=None, replication_status=None, replication_time=None, result_output_file=None, show_replication_log=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if replication_logs and not isinstance(replication_logs, list):
            raise TypeError("Expected argument 'replication_logs' to be a list")
        pulumi.set(__self__, "replication_logs", replication_logs)
        if replication_region_id and not isinstance(replication_region_id, int):
            raise TypeError("Expected argument 'replication_region_id' to be a int")
        pulumi.set(__self__, "replication_region_id", replication_region_id)
        if replication_registry_id and not isinstance(replication_registry_id, str):
            raise TypeError("Expected argument 'replication_registry_id' to be a str")
        pulumi.set(__self__, "replication_registry_id", replication_registry_id)
        if replication_status and not isinstance(replication_status, str):
            raise TypeError("Expected argument 'replication_status' to be a str")
        pulumi.set(__self__, "replication_status", replication_status)
        if replication_time and not isinstance(replication_time, str):
            raise TypeError("Expected argument 'replication_time' to be a str")
        pulumi.set(__self__, "replication_time", replication_time)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if show_replication_log and not isinstance(show_replication_log, bool):
            raise TypeError("Expected argument 'show_replication_log' to be a bool")
        pulumi.set(__self__, "show_replication_log", show_replication_log)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="replicationLogs")
    def replication_logs(self) -> Sequence['outputs.GetReplicationInstanceSyncStatusReplicationLogResult']:
        """
        sync log. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "replication_logs")

    @property
    @pulumi.getter(name="replicationRegionId")
    def replication_region_id(self) -> Optional[int]:
        return pulumi.get(self, "replication_region_id")

    @property
    @pulumi.getter(name="replicationRegistryId")
    def replication_registry_id(self) -> str:
        return pulumi.get(self, "replication_registry_id")

    @property
    @pulumi.getter(name="replicationStatus")
    def replication_status(self) -> str:
        """
        sync status.
        """
        return pulumi.get(self, "replication_status")

    @property
    @pulumi.getter(name="replicationTime")
    def replication_time(self) -> str:
        """
        sync complete time.
        """
        return pulumi.get(self, "replication_time")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="showReplicationLog")
    def show_replication_log(self) -> Optional[bool]:
        return pulumi.get(self, "show_replication_log")


class AwaitableGetReplicationInstanceSyncStatusResult(GetReplicationInstanceSyncStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReplicationInstanceSyncStatusResult(
            id=self.id,
            registry_id=self.registry_id,
            replication_logs=self.replication_logs,
            replication_region_id=self.replication_region_id,
            replication_registry_id=self.replication_registry_id,
            replication_status=self.replication_status,
            replication_time=self.replication_time,
            result_output_file=self.result_output_file,
            show_replication_log=self.show_replication_log)


def get_replication_instance_sync_status(registry_id: Optional[str] = None,
                                         replication_region_id: Optional[int] = None,
                                         replication_registry_id: Optional[str] = None,
                                         result_output_file: Optional[str] = None,
                                         show_replication_log: Optional[bool] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReplicationInstanceSyncStatusResult:
    """
    Use this data source to query detailed information of tcr replication_instance_sync_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    sync_status = tencentcloud.Tcr.get_replication_instance_sync_status(registry_id=local["src_registry_id"],
        replication_registry_id=local["dst_registry_id"],
        replication_region_id=local["dst_region_id"],
        show_replication_log=False)
    ```
    <!--End PulumiCodeChooser -->


    :param str registry_id: master registry id.
    :param int replication_region_id: synchronization instance region id.
    :param str replication_registry_id: synchronization instance id.
    :param str result_output_file: Used to save results.
    :param bool show_replication_log: whether to display the synchronization log.
    """
    __args__ = dict()
    __args__['registryId'] = registry_id
    __args__['replicationRegionId'] = replication_region_id
    __args__['replicationRegistryId'] = replication_registry_id
    __args__['resultOutputFile'] = result_output_file
    __args__['showReplicationLog'] = show_replication_log
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tcr/getReplicationInstanceSyncStatus:getReplicationInstanceSyncStatus', __args__, opts=opts, typ=GetReplicationInstanceSyncStatusResult).value

    return AwaitableGetReplicationInstanceSyncStatusResult(
        id=pulumi.get(__ret__, 'id'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        replication_logs=pulumi.get(__ret__, 'replication_logs'),
        replication_region_id=pulumi.get(__ret__, 'replication_region_id'),
        replication_registry_id=pulumi.get(__ret__, 'replication_registry_id'),
        replication_status=pulumi.get(__ret__, 'replication_status'),
        replication_time=pulumi.get(__ret__, 'replication_time'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        show_replication_log=pulumi.get(__ret__, 'show_replication_log'))


@_utilities.lift_output_func(get_replication_instance_sync_status)
def get_replication_instance_sync_status_output(registry_id: Optional[pulumi.Input[str]] = None,
                                                replication_region_id: Optional[pulumi.Input[Optional[int]]] = None,
                                                replication_registry_id: Optional[pulumi.Input[str]] = None,
                                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                show_replication_log: Optional[pulumi.Input[Optional[bool]]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReplicationInstanceSyncStatusResult]:
    """
    Use this data source to query detailed information of tcr replication_instance_sync_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    sync_status = tencentcloud.Tcr.get_replication_instance_sync_status(registry_id=local["src_registry_id"],
        replication_registry_id=local["dst_registry_id"],
        replication_region_id=local["dst_region_id"],
        show_replication_log=False)
    ```
    <!--End PulumiCodeChooser -->


    :param str registry_id: master registry id.
    :param int replication_region_id: synchronization instance region id.
    :param str replication_registry_id: synchronization instance id.
    :param str result_output_file: Used to save results.
    :param bool show_replication_log: whether to display the synchronization log.
    """
    ...
