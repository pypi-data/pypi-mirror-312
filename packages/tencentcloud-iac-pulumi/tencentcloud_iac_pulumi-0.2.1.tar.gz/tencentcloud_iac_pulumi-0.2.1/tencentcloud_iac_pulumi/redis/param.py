# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ParamArgs', 'Param']

@pulumi.input_type
class ParamArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 instance_params: pulumi.Input[Mapping[str, Any]]):
        """
        The set of arguments for constructing a Param resource.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[Mapping[str, Any]] instance_params: A list of parameters modified by the instance.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_params", instance_params)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceParams")
    def instance_params(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        A list of parameters modified by the instance.
        """
        return pulumi.get(self, "instance_params")

    @instance_params.setter
    def instance_params(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "instance_params", value)


@pulumi.input_type
class _ParamState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_params: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering Param resources.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[Mapping[str, Any]] instance_params: A list of parameters modified by the instance.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_params is not None:
            pulumi.set(__self__, "instance_params", instance_params)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceParams")
    def instance_params(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of parameters modified by the instance.
        """
        return pulumi.get(self, "instance_params")

    @instance_params.setter
    def instance_params(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "instance_params", value)


class Param(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provides a resource to create a redis param

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        param = tencentcloud.redis.Param("param",
            instance_id="crs-c1nl9rpv",
            instance_params={
                "cluster-node-timeout": "15000",
                "disable-command-list": "\\"\\"",
                "hash-max-ziplist-entries": "512",
                "hash-max-ziplist-value": "64",
                "hz": "10",
                "lazyfree-lazy-eviction": "yes",
                "lazyfree-lazy-expire": "yes",
                "lazyfree-lazy-server-del": "yes",
                "maxmemory-policy": "noeviction",
                "notify-keyspace-events": "\\"\\"",
                "proxy-slowlog-log-slower-than": "500",
                "replica-lazy-flush": "yes",
                "sentineauth": "no",
                "set-max-intset-entries": "512",
                "slowlog-log-slower-than": "10",
                "timeout": "31536000",
                "zset-max-ziplist-entries": "128",
                "zset-max-ziplist-value": "64",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        redis param can be imported using the instanceId, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/param:Param param crs-c1nl9rpv
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[Mapping[str, Any]] instance_params: A list of parameters modified by the instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ParamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a redis param

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        param = tencentcloud.redis.Param("param",
            instance_id="crs-c1nl9rpv",
            instance_params={
                "cluster-node-timeout": "15000",
                "disable-command-list": "\\"\\"",
                "hash-max-ziplist-entries": "512",
                "hash-max-ziplist-value": "64",
                "hz": "10",
                "lazyfree-lazy-eviction": "yes",
                "lazyfree-lazy-expire": "yes",
                "lazyfree-lazy-server-del": "yes",
                "maxmemory-policy": "noeviction",
                "notify-keyspace-events": "\\"\\"",
                "proxy-slowlog-log-slower-than": "500",
                "replica-lazy-flush": "yes",
                "sentineauth": "no",
                "set-max-intset-entries": "512",
                "slowlog-log-slower-than": "10",
                "timeout": "31536000",
                "zset-max-ziplist-entries": "128",
                "zset-max-ziplist-value": "64",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        redis param can be imported using the instanceId, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/param:Param param crs-c1nl9rpv
        ```

        :param str resource_name: The name of the resource.
        :param ParamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ParamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_params: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ParamArgs.__new__(ParamArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if instance_params is None and not opts.urn:
                raise TypeError("Missing required property 'instance_params'")
            __props__.__dict__["instance_params"] = instance_params
        super(Param, __self__).__init__(
            'tencentcloud:Redis/param:Param',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_params: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'Param':
        """
        Get an existing Param resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[Mapping[str, Any]] instance_params: A list of parameters modified by the instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ParamState.__new__(_ParamState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_params"] = instance_params
        return Param(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceParams")
    def instance_params(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        A list of parameters modified by the instance.
        """
        return pulumi.get(self, "instance_params")

