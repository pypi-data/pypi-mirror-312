# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstancesResult',
    'AwaitableGetInstancesResult',
    'get_instances',
    'get_instances_output',
]

@pulumi.output_type
class GetInstancesResult:
    """
    A collection of values returned by getInstances.
    """
    def __init__(__self__, id=None, instance_lists=None, limit=None, project_id=None, result_output_file=None, search_key=None, tags=None, zone=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_lists and not isinstance(instance_lists, list):
            raise TypeError("Expected argument 'instance_lists' to be a list")
        pulumi.set(__self__, "instance_lists", instance_lists)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if search_key and not isinstance(search_key, str):
            raise TypeError("Expected argument 'search_key' to be a str")
        pulumi.set(__self__, "search_key", search_key)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceLists")
    def instance_lists(self) -> Sequence['outputs.GetInstancesInstanceListResult']:
        """
        A list of redis instance. Each element contains the following attributes:
        """
        return pulumi.get(self, "instance_lists")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        ID of the project to which a redis instance belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="searchKey")
    def search_key(self) -> Optional[str]:
        return pulumi.get(self, "search_key")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        Tags of an instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        Available zone to which a redis instance belongs.
        """
        return pulumi.get(self, "zone")


class AwaitableGetInstancesResult(GetInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesResult(
            id=self.id,
            instance_lists=self.instance_lists,
            limit=self.limit,
            project_id=self.project_id,
            result_output_file=self.result_output_file,
            search_key=self.search_key,
            tags=self.tags,
            zone=self.zone)


def get_instances(limit: Optional[int] = None,
                  project_id: Optional[int] = None,
                  result_output_file: Optional[str] = None,
                  search_key: Optional[str] = None,
                  tags: Optional[Mapping[str, Any]] = None,
                  zone: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesResult:
    """
    Use this data source to query the detail information of redis instance.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    redislab = tencentcloud.Redis.get_instances(limit=20,
        project_id=0,
        result_output_file="/tmp/redis_instances",
        search_key="myredis",
        zone="ap-hongkong-1")
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: The number limitation of results for a query.
    :param int project_id: ID of the project to which redis instance belongs.
    :param str result_output_file: Used to save results.
    :param str search_key: Key words used to match the results, and the key words can be: instance ID, instance name and IP address.
    :param Mapping[str, Any] tags: Tags of redis instance.
    :param str zone: ID of an available zone.
    """
    __args__ = dict()
    __args__['limit'] = limit
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['searchKey'] = search_key
    __args__['tags'] = tags
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Redis/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult).value

    return AwaitableGetInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_lists=pulumi.get(__ret__, 'instance_lists'),
        limit=pulumi.get(__ret__, 'limit'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        search_key=pulumi.get(__ret__, 'search_key'),
        tags=pulumi.get(__ret__, 'tags'),
        zone=pulumi.get(__ret__, 'zone'))


@_utilities.lift_output_func(get_instances)
def get_instances_output(limit: Optional[pulumi.Input[Optional[int]]] = None,
                         project_id: Optional[pulumi.Input[Optional[int]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         search_key: Optional[pulumi.Input[Optional[str]]] = None,
                         tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                         zone: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstancesResult]:
    """
    Use this data source to query the detail information of redis instance.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    redislab = tencentcloud.Redis.get_instances(limit=20,
        project_id=0,
        result_output_file="/tmp/redis_instances",
        search_key="myredis",
        zone="ap-hongkong-1")
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: The number limitation of results for a query.
    :param int project_id: ID of the project to which redis instance belongs.
    :param str result_output_file: Used to save results.
    :param str search_key: Key words used to match the results, and the key words can be: instance ID, instance name and IP address.
    :param Mapping[str, Any] tags: Tags of redis instance.
    :param str zone: ID of an available zone.
    """
    ...
