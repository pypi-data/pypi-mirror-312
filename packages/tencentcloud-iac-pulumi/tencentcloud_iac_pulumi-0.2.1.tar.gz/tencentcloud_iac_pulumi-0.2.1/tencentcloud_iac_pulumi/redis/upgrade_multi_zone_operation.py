# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UpgradeMultiZoneOperationArgs', 'UpgradeMultiZoneOperation']

@pulumi.input_type
class UpgradeMultiZoneOperationArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 upgrade_proxy_and_redis_server: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a UpgradeMultiZoneOperation resource.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[bool] upgrade_proxy_and_redis_server: After you upgrade Multi-AZ, whether the nearby access feature is supported.true: Supports nearby access.The upgrade process, which requires upgrading both the proxy version and the Redis kernel minor version, involves data migration and can take several hours.false: No need to support nearby access.Upgrading Multi-AZ only involves managing metadata migration, with no service impact, and the upgrade process typically completes within 3 minutes.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if upgrade_proxy_and_redis_server is not None:
            pulumi.set(__self__, "upgrade_proxy_and_redis_server", upgrade_proxy_and_redis_server)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="upgradeProxyAndRedisServer")
    def upgrade_proxy_and_redis_server(self) -> Optional[pulumi.Input[bool]]:
        """
        After you upgrade Multi-AZ, whether the nearby access feature is supported.true: Supports nearby access.The upgrade process, which requires upgrading both the proxy version and the Redis kernel minor version, involves data migration and can take several hours.false: No need to support nearby access.Upgrading Multi-AZ only involves managing metadata migration, with no service impact, and the upgrade process typically completes within 3 minutes.
        """
        return pulumi.get(self, "upgrade_proxy_and_redis_server")

    @upgrade_proxy_and_redis_server.setter
    def upgrade_proxy_and_redis_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_proxy_and_redis_server", value)


@pulumi.input_type
class _UpgradeMultiZoneOperationState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 upgrade_proxy_and_redis_server: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering UpgradeMultiZoneOperation resources.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[bool] upgrade_proxy_and_redis_server: After you upgrade Multi-AZ, whether the nearby access feature is supported.true: Supports nearby access.The upgrade process, which requires upgrading both the proxy version and the Redis kernel minor version, involves data migration and can take several hours.false: No need to support nearby access.Upgrading Multi-AZ only involves managing metadata migration, with no service impact, and the upgrade process typically completes within 3 minutes.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if upgrade_proxy_and_redis_server is not None:
            pulumi.set(__self__, "upgrade_proxy_and_redis_server", upgrade_proxy_and_redis_server)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="upgradeProxyAndRedisServer")
    def upgrade_proxy_and_redis_server(self) -> Optional[pulumi.Input[bool]]:
        """
        After you upgrade Multi-AZ, whether the nearby access feature is supported.true: Supports nearby access.The upgrade process, which requires upgrading both the proxy version and the Redis kernel minor version, involves data migration and can take several hours.false: No need to support nearby access.Upgrading Multi-AZ only involves managing metadata migration, with no service impact, and the upgrade process typically completes within 3 minutes.
        """
        return pulumi.get(self, "upgrade_proxy_and_redis_server")

    @upgrade_proxy_and_redis_server.setter
    def upgrade_proxy_and_redis_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upgrade_proxy_and_redis_server", value)


class UpgradeMultiZoneOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 upgrade_proxy_and_redis_server: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a redis upgrade_multi_zone_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        upgrade_multi_zone_operation = tencentcloud.redis.UpgradeMultiZoneOperation("upgradeMultiZoneOperation",
            instance_id="crs-c1nl9rpv",
            upgrade_proxy_and_redis_server=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[bool] upgrade_proxy_and_redis_server: After you upgrade Multi-AZ, whether the nearby access feature is supported.true: Supports nearby access.The upgrade process, which requires upgrading both the proxy version and the Redis kernel minor version, involves data migration and can take several hours.false: No need to support nearby access.Upgrading Multi-AZ only involves managing metadata migration, with no service impact, and the upgrade process typically completes within 3 minutes.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpgradeMultiZoneOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a redis upgrade_multi_zone_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        upgrade_multi_zone_operation = tencentcloud.redis.UpgradeMultiZoneOperation("upgradeMultiZoneOperation",
            instance_id="crs-c1nl9rpv",
            upgrade_proxy_and_redis_server=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param UpgradeMultiZoneOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpgradeMultiZoneOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 upgrade_proxy_and_redis_server: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpgradeMultiZoneOperationArgs.__new__(UpgradeMultiZoneOperationArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["upgrade_proxy_and_redis_server"] = upgrade_proxy_and_redis_server
        super(UpgradeMultiZoneOperation, __self__).__init__(
            'tencentcloud:Redis/upgradeMultiZoneOperation:UpgradeMultiZoneOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            upgrade_proxy_and_redis_server: Optional[pulumi.Input[bool]] = None) -> 'UpgradeMultiZoneOperation':
        """
        Get an existing UpgradeMultiZoneOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[bool] upgrade_proxy_and_redis_server: After you upgrade Multi-AZ, whether the nearby access feature is supported.true: Supports nearby access.The upgrade process, which requires upgrading both the proxy version and the Redis kernel minor version, involves data migration and can take several hours.false: No need to support nearby access.Upgrading Multi-AZ only involves managing metadata migration, with no service impact, and the upgrade process typically completes within 3 minutes.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UpgradeMultiZoneOperationState.__new__(_UpgradeMultiZoneOperationState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["upgrade_proxy_and_redis_server"] = upgrade_proxy_and_redis_server
        return UpgradeMultiZoneOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="upgradeProxyAndRedisServer")
    def upgrade_proxy_and_redis_server(self) -> pulumi.Output[Optional[bool]]:
        """
        After you upgrade Multi-AZ, whether the nearby access feature is supported.true: Supports nearby access.The upgrade process, which requires upgrading both the proxy version and the Redis kernel minor version, involves data migration and can take several hours.false: No need to support nearby access.Upgrading Multi-AZ only involves managing metadata migration, with no service impact, and the upgrade process typically completes within 3 minutes.
        """
        return pulumi.get(self, "upgrade_proxy_and_redis_server")

