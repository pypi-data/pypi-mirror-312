# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 account_password: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 privilege: pulumi.Input[str],
                 readonly_policies: pulumi.Input[Sequence[pulumi.Input[str]]],
                 remark: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input[str] account_name: The account name.
        :param pulumi.Input[str] account_password: 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;  d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] privilege: Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] readonly_policies: Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when modifying operations.
        :param pulumi.Input[str] remark: Remark.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_password", account_password)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "privilege", privilege)
        pulumi.set(__self__, "readonly_policies", readonly_policies)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        The account name.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> pulumi.Input[str]:
        """
        1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;  d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_password", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def privilege(self) -> pulumi.Input[str]:
        """
        Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
        """
        return pulumi.get(self, "privilege")

    @privilege.setter
    def privilege(self, value: pulumi.Input[str]):
        pulumi.set(self, "privilege", value)

    @property
    @pulumi.getter(name="readonlyPolicies")
    def readonly_policies(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when modifying operations.
        """
        return pulumi.get(self, "readonly_policies")

    @readonly_policies.setter
    def readonly_policies(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "readonly_policies", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 privilege: Optional[pulumi.Input[str]] = None,
                 readonly_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input[str] account_name: The account name.
        :param pulumi.Input[str] account_password: 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;  d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] privilege: Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] readonly_policies: Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when modifying operations.
        :param pulumi.Input[str] remark: Remark.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if account_password is not None:
            pulumi.set(__self__, "account_password", account_password)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if privilege is not None:
            pulumi.set(__self__, "privilege", privilege)
        if readonly_policies is not None:
            pulumi.set(__self__, "readonly_policies", readonly_policies)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The account name.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> Optional[pulumi.Input[str]]:
        """
        1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;  d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
        """
        return pulumi.get(self, "account_password")

    @account_password.setter
    def account_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_password", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def privilege(self) -> Optional[pulumi.Input[str]]:
        """
        Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
        """
        return pulumi.get(self, "privilege")

    @privilege.setter
    def privilege(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "privilege", value)

    @property
    @pulumi.getter(name="readonlyPolicies")
    def readonly_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when modifying operations.
        """
        return pulumi.get(self, "readonly_policies")

    @readonly_policies.setter
    def readonly_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "readonly_policies", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 privilege: Optional[pulumi.Input[str]] = None,
                 readonly_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a redis account

        ## Example Usage

        ### Create an account with read and write permissions

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.Redis.get_zone_config(type_id=7)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=zone.lists[1].zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.redis.Instance("foo",
            availability_zone=zone.lists[1].zone,
            type_id=zone.lists[1].type_id,
            password="test12345789",
            mem_size=8192,
            redis_shard_num=zone.lists[1].redis_shard_nums[0],
            redis_replicas_num=zone.lists[1].redis_replicas_nums[0],
            port=6379,
            vpc_id=vpc.id,
            subnet_id=subnet.id)
        account = tencentcloud.redis.Account("account",
            instance_id=foo.id,
            account_name="account_test",
            account_password="test1234",
            remark="master",
            readonly_policies=["master"],
            privilege="rw")
        ```
        <!--End PulumiCodeChooser -->

        ### Create an account with read-only permissions

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.Redis.get_zone_config(type_id=7)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=zone.lists[1].zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.redis.Instance("foo",
            availability_zone=zone.lists[1].zone,
            type_id=zone.lists[1].type_id,
            password="test12345789",
            mem_size=8192,
            redis_shard_num=zone.lists[1].redis_shard_nums[0],
            redis_replicas_num=zone.lists[1].redis_replicas_nums[0],
            port=6379,
            vpc_id=vpc.id,
            subnet_id=subnet.id)
        account = tencentcloud.redis.Account("account",
            instance_id=foo.id,
            account_name="account_test",
            account_password="test1234",
            remark="master",
            readonly_policies=["master"],
            privilege="r")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        redis account can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/account:Account account crs-xxxxxx#account_test
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The account name.
        :param pulumi.Input[str] account_password: 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;  d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] privilege: Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] readonly_policies: Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when modifying operations.
        :param pulumi.Input[str] remark: Remark.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a redis account

        ## Example Usage

        ### Create an account with read and write permissions

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.Redis.get_zone_config(type_id=7)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=zone.lists[1].zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.redis.Instance("foo",
            availability_zone=zone.lists[1].zone,
            type_id=zone.lists[1].type_id,
            password="test12345789",
            mem_size=8192,
            redis_shard_num=zone.lists[1].redis_shard_nums[0],
            redis_replicas_num=zone.lists[1].redis_replicas_nums[0],
            port=6379,
            vpc_id=vpc.id,
            subnet_id=subnet.id)
        account = tencentcloud.redis.Account("account",
            instance_id=foo.id,
            account_name="account_test",
            account_password="test1234",
            remark="master",
            readonly_policies=["master"],
            privilege="rw")
        ```
        <!--End PulumiCodeChooser -->

        ### Create an account with read-only permissions

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zone = tencentcloud.Redis.get_zone_config(type_id=7)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=zone.lists[1].zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.redis.Instance("foo",
            availability_zone=zone.lists[1].zone,
            type_id=zone.lists[1].type_id,
            password="test12345789",
            mem_size=8192,
            redis_shard_num=zone.lists[1].redis_shard_nums[0],
            redis_replicas_num=zone.lists[1].redis_replicas_nums[0],
            port=6379,
            vpc_id=vpc.id,
            subnet_id=subnet.id)
        account = tencentcloud.redis.Account("account",
            instance_id=foo.id,
            account_name="account_test",
            account_password="test1234",
            remark="master",
            readonly_policies=["master"],
            privilege="r")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        redis account can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Redis/account:Account account crs-xxxxxx#account_test
        ```

        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 account_password: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 privilege: Optional[pulumi.Input[str]] = None,
                 readonly_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            if account_password is None and not opts.urn:
                raise TypeError("Missing required property 'account_password'")
            __props__.__dict__["account_password"] = None if account_password is None else pulumi.Output.secret(account_password)
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if privilege is None and not opts.urn:
                raise TypeError("Missing required property 'privilege'")
            __props__.__dict__["privilege"] = privilege
            if readonly_policies is None and not opts.urn:
                raise TypeError("Missing required property 'readonly_policies'")
            __props__.__dict__["readonly_policies"] = readonly_policies
            __props__.__dict__["remark"] = remark
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accountPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Account, __self__).__init__(
            'tencentcloud:Redis/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[str]] = None,
            account_password: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            privilege: Optional[pulumi.Input[str]] = None,
            readonly_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            remark: Optional[pulumi.Input[str]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: The account name.
        :param pulumi.Input[str] account_password: 1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;  d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] privilege: Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] readonly_policies: Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when modifying operations.
        :param pulumi.Input[str] remark: Remark.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["account_password"] = account_password
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["privilege"] = privilege
        __props__.__dict__["readonly_policies"] = readonly_policies
        __props__.__dict__["remark"] = remark
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        The account name.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="accountPassword")
    def account_password(self) -> pulumi.Output[str]:
        """
        1: Length 8-30 digits, it is recommended to use a password of more than 12 digits; 2: Cannot start with `/`; 3: Include at least two items: a.Lowercase letters `a-z`; b.Uppercase letters `A-Z` c.Numbers `0-9`;  d.`()`~!@#$%^&*-+=_|{}[]:;<>,.?/`.
        """
        return pulumi.get(self, "account_password")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def privilege(self) -> pulumi.Output[str]:
        """
        Read and write policy: Enter R and RW to indicate read-only, read-write, cannot be empty when modifying operations.
        """
        return pulumi.get(self, "privilege")

    @property
    @pulumi.getter(name="readonlyPolicies")
    def readonly_policies(self) -> pulumi.Output[Sequence[str]]:
        """
        Routing policy: Enter master or replication, which indicates the master node or slave node, cannot be empty when modifying operations.
        """
        return pulumi.get(self, "readonly_policies")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

