# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBackupDownloadInfoResult',
    'AwaitableGetBackupDownloadInfoResult',
    'get_backup_download_info',
    'get_backup_download_info_output',
]

@pulumi.output_type
class GetBackupDownloadInfoResult:
    """
    A collection of values returned by getBackupDownloadInfo.
    """
    def __init__(__self__, backup_id=None, backup_infos=None, id=None, instance_id=None, ip_comparison_symbol=None, limit_ips=None, limit_type=None, limit_vpcs=None, result_output_file=None, vpc_comparison_symbol=None):
        if backup_id and not isinstance(backup_id, str):
            raise TypeError("Expected argument 'backup_id' to be a str")
        pulumi.set(__self__, "backup_id", backup_id)
        if backup_infos and not isinstance(backup_infos, list):
            raise TypeError("Expected argument 'backup_infos' to be a list")
        pulumi.set(__self__, "backup_infos", backup_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if ip_comparison_symbol and not isinstance(ip_comparison_symbol, str):
            raise TypeError("Expected argument 'ip_comparison_symbol' to be a str")
        pulumi.set(__self__, "ip_comparison_symbol", ip_comparison_symbol)
        if limit_ips and not isinstance(limit_ips, list):
            raise TypeError("Expected argument 'limit_ips' to be a list")
        pulumi.set(__self__, "limit_ips", limit_ips)
        if limit_type and not isinstance(limit_type, str):
            raise TypeError("Expected argument 'limit_type' to be a str")
        pulumi.set(__self__, "limit_type", limit_type)
        if limit_vpcs and not isinstance(limit_vpcs, list):
            raise TypeError("Expected argument 'limit_vpcs' to be a list")
        pulumi.set(__self__, "limit_vpcs", limit_vpcs)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if vpc_comparison_symbol and not isinstance(vpc_comparison_symbol, str):
            raise TypeError("Expected argument 'vpc_comparison_symbol' to be a str")
        pulumi.set(__self__, "vpc_comparison_symbol", vpc_comparison_symbol)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupInfos")
    def backup_infos(self) -> Sequence['outputs.GetBackupDownloadInfoBackupInfoResult']:
        """
        A list of backup file information.
        """
        return pulumi.get(self, "backup_infos")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipComparisonSymbol")
    def ip_comparison_symbol(self) -> Optional[str]:
        return pulumi.get(self, "ip_comparison_symbol")

    @property
    @pulumi.getter(name="limitIps")
    def limit_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "limit_ips")

    @property
    @pulumi.getter(name="limitType")
    def limit_type(self) -> Optional[str]:
        return pulumi.get(self, "limit_type")

    @property
    @pulumi.getter(name="limitVpcs")
    def limit_vpcs(self) -> Optional[Sequence['outputs.GetBackupDownloadInfoLimitVpcResult']]:
        return pulumi.get(self, "limit_vpcs")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="vpcComparisonSymbol")
    def vpc_comparison_symbol(self) -> Optional[str]:
        return pulumi.get(self, "vpc_comparison_symbol")


class AwaitableGetBackupDownloadInfoResult(GetBackupDownloadInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupDownloadInfoResult(
            backup_id=self.backup_id,
            backup_infos=self.backup_infos,
            id=self.id,
            instance_id=self.instance_id,
            ip_comparison_symbol=self.ip_comparison_symbol,
            limit_ips=self.limit_ips,
            limit_type=self.limit_type,
            limit_vpcs=self.limit_vpcs,
            result_output_file=self.result_output_file,
            vpc_comparison_symbol=self.vpc_comparison_symbol)


def get_backup_download_info(backup_id: Optional[str] = None,
                             instance_id: Optional[str] = None,
                             ip_comparison_symbol: Optional[str] = None,
                             limit_ips: Optional[Sequence[str]] = None,
                             limit_type: Optional[str] = None,
                             limit_vpcs: Optional[Sequence[pulumi.InputType['GetBackupDownloadInfoLimitVpcArgs']]] = None,
                             result_output_file: Optional[str] = None,
                             vpc_comparison_symbol: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupDownloadInfoResult:
    """
    Use this data source to query detailed information of redis backup_download_info

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    backup_download_info = tencentcloud.Redis.get_backup_download_info(backup_id="641186639-8362913-1516672770",
        instance_id="crs-iw7d9wdd")
    ```
    <!--End PulumiCodeChooser -->


    :param str backup_id: The backup ID, which can be accessed via [DescribeInstanceBackups](https://cloud.tencent.com/document/product/239/20011) interface returns the parameter RedisBackupSet to get.
    :param str instance_id: The ID of instance.
    :param str ip_comparison_symbol: Identifies whether the customized LimitIP address can download the backup file.- In: Custom IP addresses are available for download.- NotIn: Custom IPs are not available for download.
    :param Sequence[str] limit_ips: A custom VPC IP address for downloadable backup files.If the parameter LimitType is **Customize**, you need to configure this parameter.
    :param str limit_type: Types of network restrictions for downloading backup files:- NoLimit: There is no limit, and backup files can be downloaded from both Tencent Cloud and internal and external networks.- LimitOnlyIntranet: Only intranet addresses automatically assigned by Tencent Cloud can download backup files.- Customize: refers to a user-defined private network downloadable backup file.
    :param Sequence[pulumi.InputType['GetBackupDownloadInfoLimitVpcArgs']] limit_vpcs: A custom VPC ID for a downloadable backup file.If the parameter LimitType is **Customize**, you need to configure this parameter.
    :param str result_output_file: Used to save results.
    :param str vpc_comparison_symbol: This parameter only supports entering In, which means that the custom LimitVpc can download the backup file.
    """
    __args__ = dict()
    __args__['backupId'] = backup_id
    __args__['instanceId'] = instance_id
    __args__['ipComparisonSymbol'] = ip_comparison_symbol
    __args__['limitIps'] = limit_ips
    __args__['limitType'] = limit_type
    __args__['limitVpcs'] = limit_vpcs
    __args__['resultOutputFile'] = result_output_file
    __args__['vpcComparisonSymbol'] = vpc_comparison_symbol
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Redis/getBackupDownloadInfo:getBackupDownloadInfo', __args__, opts=opts, typ=GetBackupDownloadInfoResult).value

    return AwaitableGetBackupDownloadInfoResult(
        backup_id=pulumi.get(__ret__, 'backup_id'),
        backup_infos=pulumi.get(__ret__, 'backup_infos'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        ip_comparison_symbol=pulumi.get(__ret__, 'ip_comparison_symbol'),
        limit_ips=pulumi.get(__ret__, 'limit_ips'),
        limit_type=pulumi.get(__ret__, 'limit_type'),
        limit_vpcs=pulumi.get(__ret__, 'limit_vpcs'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        vpc_comparison_symbol=pulumi.get(__ret__, 'vpc_comparison_symbol'))


@_utilities.lift_output_func(get_backup_download_info)
def get_backup_download_info_output(backup_id: Optional[pulumi.Input[str]] = None,
                                    instance_id: Optional[pulumi.Input[str]] = None,
                                    ip_comparison_symbol: Optional[pulumi.Input[Optional[str]]] = None,
                                    limit_ips: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    limit_type: Optional[pulumi.Input[Optional[str]]] = None,
                                    limit_vpcs: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetBackupDownloadInfoLimitVpcArgs']]]]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    vpc_comparison_symbol: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupDownloadInfoResult]:
    """
    Use this data source to query detailed information of redis backup_download_info

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    backup_download_info = tencentcloud.Redis.get_backup_download_info(backup_id="641186639-8362913-1516672770",
        instance_id="crs-iw7d9wdd")
    ```
    <!--End PulumiCodeChooser -->


    :param str backup_id: The backup ID, which can be accessed via [DescribeInstanceBackups](https://cloud.tencent.com/document/product/239/20011) interface returns the parameter RedisBackupSet to get.
    :param str instance_id: The ID of instance.
    :param str ip_comparison_symbol: Identifies whether the customized LimitIP address can download the backup file.- In: Custom IP addresses are available for download.- NotIn: Custom IPs are not available for download.
    :param Sequence[str] limit_ips: A custom VPC IP address for downloadable backup files.If the parameter LimitType is **Customize**, you need to configure this parameter.
    :param str limit_type: Types of network restrictions for downloading backup files:- NoLimit: There is no limit, and backup files can be downloaded from both Tencent Cloud and internal and external networks.- LimitOnlyIntranet: Only intranet addresses automatically assigned by Tencent Cloud can download backup files.- Customize: refers to a user-defined private network downloadable backup file.
    :param Sequence[pulumi.InputType['GetBackupDownloadInfoLimitVpcArgs']] limit_vpcs: A custom VPC ID for a downloadable backup file.If the parameter LimitType is **Customize**, you need to configure this parameter.
    :param str result_output_file: Used to save results.
    :param str vpc_comparison_symbol: This parameter only supports entering In, which means that the custom LimitVpc can download the backup file.
    """
    ...
