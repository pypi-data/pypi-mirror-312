# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstancesResult',
    'AwaitableGetInstancesResult',
    'get_instances',
    'get_instances_output',
]

@pulumi.output_type
class GetInstancesResult:
    """
    A collection of values returned by getInstances.
    """
    def __init__(__self__, excluster_type=None, id=None, instance_ids=None, is_filter_excluster=None, is_filter_vpc=None, lists=None, project_ids=None, result_output_file=None, search_key=None, search_name=None, subnet_id=None, vpc_id=None):
        if excluster_type and not isinstance(excluster_type, int):
            raise TypeError("Expected argument 'excluster_type' to be a int")
        pulumi.set(__self__, "excluster_type", excluster_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if is_filter_excluster and not isinstance(is_filter_excluster, bool):
            raise TypeError("Expected argument 'is_filter_excluster' to be a bool")
        pulumi.set(__self__, "is_filter_excluster", is_filter_excluster)
        if is_filter_vpc and not isinstance(is_filter_vpc, bool):
            raise TypeError("Expected argument 'is_filter_vpc' to be a bool")
        pulumi.set(__self__, "is_filter_vpc", is_filter_vpc)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if search_key and not isinstance(search_key, str):
            raise TypeError("Expected argument 'search_key' to be a str")
        pulumi.set(__self__, "search_key", search_key)
        if search_name and not isinstance(search_name, str):
            raise TypeError("Expected argument 'search_name' to be a str")
        pulumi.set(__self__, "search_name", search_name)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="exclusterType")
    def excluster_type(self) -> Optional[int]:
        return pulumi.get(self, "excluster_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="isFilterExcluster")
    def is_filter_excluster(self) -> Optional[bool]:
        return pulumi.get(self, "is_filter_excluster")

    @property
    @pulumi.getter(name="isFilterVpc")
    def is_filter_vpc(self) -> Optional[bool]:
        return pulumi.get(self, "is_filter_vpc")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetInstancesListResult']:
        """
        instance list.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="searchKey")
    def search_key(self) -> Optional[str]:
        return pulumi.get(self, "search_key")

    @property
    @pulumi.getter(name="searchName")
    def search_name(self) -> Optional[str]:
        return pulumi.get(self, "search_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetInstancesResult(GetInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstancesResult(
            excluster_type=self.excluster_type,
            id=self.id,
            instance_ids=self.instance_ids,
            is_filter_excluster=self.is_filter_excluster,
            is_filter_vpc=self.is_filter_vpc,
            lists=self.lists,
            project_ids=self.project_ids,
            result_output_file=self.result_output_file,
            search_key=self.search_key,
            search_name=self.search_name,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_instances(excluster_type: Optional[int] = None,
                  instance_ids: Optional[Sequence[str]] = None,
                  is_filter_excluster: Optional[bool] = None,
                  is_filter_vpc: Optional[bool] = None,
                  project_ids: Optional[Sequence[int]] = None,
                  result_output_file: Optional[str] = None,
                  search_key: Optional[str] = None,
                  search_name: Optional[str] = None,
                  subnet_id: Optional[str] = None,
                  vpc_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstancesResult:
    """
    Use this data source to query detailed information of dcdb instances


    :param int excluster_type: cluster excluster type.
    :param Sequence[str] instance_ids: instance ids.
    :param bool is_filter_excluster: search according to the cluster excluter type.
    :param bool is_filter_vpc: search according to the vpc.
    :param Sequence[int] project_ids: project ids.
    :param str result_output_file: Used to save results.
    :param str search_key: search key, support fuzzy query.
    :param str search_name: search name, support instancename, vip, all.
    :param str subnet_id: subnet id, valid when IsFilterVpc is true.
    :param str vpc_id: vpc id, valid when IsFilterVpc is true.
    """
    __args__ = dict()
    __args__['exclusterType'] = excluster_type
    __args__['instanceIds'] = instance_ids
    __args__['isFilterExcluster'] = is_filter_excluster
    __args__['isFilterVpc'] = is_filter_vpc
    __args__['projectIds'] = project_ids
    __args__['resultOutputFile'] = result_output_file
    __args__['searchKey'] = search_key
    __args__['searchName'] = search_name
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dcdb/getInstances:getInstances', __args__, opts=opts, typ=GetInstancesResult).value

    return AwaitableGetInstancesResult(
        excluster_type=pulumi.get(__ret__, 'excluster_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        is_filter_excluster=pulumi.get(__ret__, 'is_filter_excluster'),
        is_filter_vpc=pulumi.get(__ret__, 'is_filter_vpc'),
        lists=pulumi.get(__ret__, 'lists'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        search_key=pulumi.get(__ret__, 'search_key'),
        search_name=pulumi.get(__ret__, 'search_name'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_instances)
def get_instances_output(excluster_type: Optional[pulumi.Input[Optional[int]]] = None,
                         instance_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         is_filter_excluster: Optional[pulumi.Input[Optional[bool]]] = None,
                         is_filter_vpc: Optional[pulumi.Input[Optional[bool]]] = None,
                         project_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         search_key: Optional[pulumi.Input[Optional[str]]] = None,
                         search_name: Optional[pulumi.Input[Optional[str]]] = None,
                         subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                         vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstancesResult]:
    """
    Use this data source to query detailed information of dcdb instances


    :param int excluster_type: cluster excluster type.
    :param Sequence[str] instance_ids: instance ids.
    :param bool is_filter_excluster: search according to the cluster excluter type.
    :param bool is_filter_vpc: search according to the vpc.
    :param Sequence[int] project_ids: project ids.
    :param str result_output_file: Used to save results.
    :param str search_key: search key, support fuzzy query.
    :param str search_name: search name, support instancename, vip, all.
    :param str subnet_id: subnet id, valid when IsFilterVpc is true.
    :param str vpc_id: vpc id, valid when IsFilterVpc is true.
    """
    ...
