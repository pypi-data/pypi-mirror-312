# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPriceResult',
    'AwaitableGetPriceResult',
    'get_price',
    'get_price_output',
]

@pulumi.output_type
class GetPriceResult:
    """
    A collection of values returned by getPrice.
    """
    def __init__(__self__, amount_unit=None, id=None, instance_count=None, original_price=None, paymode=None, period=None, price=None, result_output_file=None, shard_count=None, shard_memory=None, shard_node_count=None, shard_storage=None, zone=None):
        if amount_unit and not isinstance(amount_unit, str):
            raise TypeError("Expected argument 'amount_unit' to be a str")
        pulumi.set(__self__, "amount_unit", amount_unit)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_count and not isinstance(instance_count, int):
            raise TypeError("Expected argument 'instance_count' to be a int")
        pulumi.set(__self__, "instance_count", instance_count)
        if original_price and not isinstance(original_price, int):
            raise TypeError("Expected argument 'original_price' to be a int")
        pulumi.set(__self__, "original_price", original_price)
        if paymode and not isinstance(paymode, str):
            raise TypeError("Expected argument 'paymode' to be a str")
        pulumi.set(__self__, "paymode", paymode)
        if period and not isinstance(period, int):
            raise TypeError("Expected argument 'period' to be a int")
        pulumi.set(__self__, "period", period)
        if price and not isinstance(price, int):
            raise TypeError("Expected argument 'price' to be a int")
        pulumi.set(__self__, "price", price)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if shard_count and not isinstance(shard_count, int):
            raise TypeError("Expected argument 'shard_count' to be a int")
        pulumi.set(__self__, "shard_count", shard_count)
        if shard_memory and not isinstance(shard_memory, int):
            raise TypeError("Expected argument 'shard_memory' to be a int")
        pulumi.set(__self__, "shard_memory", shard_memory)
        if shard_node_count and not isinstance(shard_node_count, int):
            raise TypeError("Expected argument 'shard_node_count' to be a int")
        pulumi.set(__self__, "shard_node_count", shard_node_count)
        if shard_storage and not isinstance(shard_storage, int):
            raise TypeError("Expected argument 'shard_storage' to be a int")
        pulumi.set(__self__, "shard_storage", shard_storage)
        if zone and not isinstance(zone, str):
            raise TypeError("Expected argument 'zone' to be a str")
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="amountUnit")
    def amount_unit(self) -> Optional[str]:
        return pulumi.get(self, "amount_unit")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> int:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> int:
        """
        Original price. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "original_price")

    @property
    @pulumi.getter
    def paymode(self) -> Optional[str]:
        return pulumi.get(self, "paymode")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def price(self) -> int:
        """
        The actual price may be different from the original price due to discounts. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> int:
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> int:
        return pulumi.get(self, "shard_memory")

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> int:
        return pulumi.get(self, "shard_node_count")

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> int:
        return pulumi.get(self, "shard_storage")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


class AwaitableGetPriceResult(GetPriceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPriceResult(
            amount_unit=self.amount_unit,
            id=self.id,
            instance_count=self.instance_count,
            original_price=self.original_price,
            paymode=self.paymode,
            period=self.period,
            price=self.price,
            result_output_file=self.result_output_file,
            shard_count=self.shard_count,
            shard_memory=self.shard_memory,
            shard_node_count=self.shard_node_count,
            shard_storage=self.shard_storage,
            zone=self.zone)


def get_price(amount_unit: Optional[str] = None,
              instance_count: Optional[int] = None,
              paymode: Optional[str] = None,
              period: Optional[int] = None,
              result_output_file: Optional[str] = None,
              shard_count: Optional[int] = None,
              shard_memory: Optional[int] = None,
              shard_node_count: Optional[int] = None,
              shard_storage: Optional[int] = None,
              zone: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPriceResult:
    """
    Use this data source to query detailed information of dcdb price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    price = tencentcloud.Dcdb.get_price(instance_count=1,
        zone=var["default_az"],
        period=1,
        shard_node_count=2,
        shard_memory=2,
        shard_storage=10,
        shard_count=2,
        paymode="postpaid",
        amount_unit="pent")
    ```
    <!--End PulumiCodeChooser -->


    :param str amount_unit: Price unit. Valid values: `pent` (cent), `microPent` (microcent).
    :param int instance_count: The count of instances wants to buy.
    :param str paymode: Billing type. Valid values: `postpaid` (pay-as-you-go), `prepaid` (monthly subscription).
    :param int period: Purchase period in months.
    :param str result_output_file: Used to save results.
    :param int shard_count: Number of instance shards.
    :param int shard_memory: Shard memory size in GB.
    :param int shard_node_count: Number of instance shard nodes.
    :param int shard_storage: Shard storage capacity in GB.
    :param str zone: AZ ID of the purchased instance.
    """
    __args__ = dict()
    __args__['amountUnit'] = amount_unit
    __args__['instanceCount'] = instance_count
    __args__['paymode'] = paymode
    __args__['period'] = period
    __args__['resultOutputFile'] = result_output_file
    __args__['shardCount'] = shard_count
    __args__['shardMemory'] = shard_memory
    __args__['shardNodeCount'] = shard_node_count
    __args__['shardStorage'] = shard_storage
    __args__['zone'] = zone
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dcdb/getPrice:getPrice', __args__, opts=opts, typ=GetPriceResult).value

    return AwaitableGetPriceResult(
        amount_unit=pulumi.get(__ret__, 'amount_unit'),
        id=pulumi.get(__ret__, 'id'),
        instance_count=pulumi.get(__ret__, 'instance_count'),
        original_price=pulumi.get(__ret__, 'original_price'),
        paymode=pulumi.get(__ret__, 'paymode'),
        period=pulumi.get(__ret__, 'period'),
        price=pulumi.get(__ret__, 'price'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        shard_count=pulumi.get(__ret__, 'shard_count'),
        shard_memory=pulumi.get(__ret__, 'shard_memory'),
        shard_node_count=pulumi.get(__ret__, 'shard_node_count'),
        shard_storage=pulumi.get(__ret__, 'shard_storage'),
        zone=pulumi.get(__ret__, 'zone'))


@_utilities.lift_output_func(get_price)
def get_price_output(amount_unit: Optional[pulumi.Input[Optional[str]]] = None,
                     instance_count: Optional[pulumi.Input[int]] = None,
                     paymode: Optional[pulumi.Input[Optional[str]]] = None,
                     period: Optional[pulumi.Input[int]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     shard_count: Optional[pulumi.Input[int]] = None,
                     shard_memory: Optional[pulumi.Input[int]] = None,
                     shard_node_count: Optional[pulumi.Input[int]] = None,
                     shard_storage: Optional[pulumi.Input[int]] = None,
                     zone: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPriceResult]:
    """
    Use this data source to query detailed information of dcdb price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    price = tencentcloud.Dcdb.get_price(instance_count=1,
        zone=var["default_az"],
        period=1,
        shard_node_count=2,
        shard_memory=2,
        shard_storage=10,
        shard_count=2,
        paymode="postpaid",
        amount_unit="pent")
    ```
    <!--End PulumiCodeChooser -->


    :param str amount_unit: Price unit. Valid values: `pent` (cent), `microPent` (microcent).
    :param int instance_count: The count of instances wants to buy.
    :param str paymode: Billing type. Valid values: `postpaid` (pay-as-you-go), `prepaid` (monthly subscription).
    :param int period: Purchase period in months.
    :param str result_output_file: Used to save results.
    :param int shard_count: Number of instance shards.
    :param int shard_memory: Shard memory size in GB.
    :param int shard_node_count: Number of instance shard nodes.
    :param int shard_storage: Shard storage capacity in GB.
    :param str zone: AZ ID of the purchased instance.
    """
    ...
