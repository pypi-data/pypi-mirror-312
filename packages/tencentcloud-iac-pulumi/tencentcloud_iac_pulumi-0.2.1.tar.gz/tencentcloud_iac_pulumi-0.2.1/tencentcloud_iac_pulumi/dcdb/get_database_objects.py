# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDatabaseObjectsResult',
    'AwaitableGetDatabaseObjectsResult',
    'get_database_objects',
    'get_database_objects_output',
]

@pulumi.output_type
class GetDatabaseObjectsResult:
    """
    A collection of values returned by getDatabaseObjects.
    """
    def __init__(__self__, db_name=None, funcs=None, id=None, instance_id=None, procs=None, result_output_file=None, tables=None, views=None):
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if funcs and not isinstance(funcs, list):
            raise TypeError("Expected argument 'funcs' to be a list")
        pulumi.set(__self__, "funcs", funcs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if procs and not isinstance(procs, list):
            raise TypeError("Expected argument 'procs' to be a list")
        pulumi.set(__self__, "procs", procs)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tables and not isinstance(tables, list):
            raise TypeError("Expected argument 'tables' to be a list")
        pulumi.set(__self__, "tables", tables)
        if views and not isinstance(views, list):
            raise TypeError("Expected argument 'views' to be a list")
        pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def funcs(self) -> Sequence['outputs.GetDatabaseObjectsFuncResult']:
        """
        Function list.
        """
        return pulumi.get(self, "funcs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def procs(self) -> Sequence['outputs.GetDatabaseObjectsProcResult']:
        """
        Procedure list.
        """
        return pulumi.get(self, "procs")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetDatabaseObjectsTableResult']:
        """
        Table list.
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter
    def views(self) -> Sequence['outputs.GetDatabaseObjectsViewResult']:
        """
        View list.
        """
        return pulumi.get(self, "views")


class AwaitableGetDatabaseObjectsResult(GetDatabaseObjectsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseObjectsResult(
            db_name=self.db_name,
            funcs=self.funcs,
            id=self.id,
            instance_id=self.instance_id,
            procs=self.procs,
            result_output_file=self.result_output_file,
            tables=self.tables,
            views=self.views)


def get_database_objects(db_name: Optional[str] = None,
                         instance_id: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseObjectsResult:
    """
    Use this data source to query detailed information of dcdb database_objects


    :param str db_name: Database name, obtained through the DescribeDatabases api.
    :param str instance_id: The ID of instance.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dcdb/getDatabaseObjects:getDatabaseObjects', __args__, opts=opts, typ=GetDatabaseObjectsResult).value

    return AwaitableGetDatabaseObjectsResult(
        db_name=pulumi.get(__ret__, 'db_name'),
        funcs=pulumi.get(__ret__, 'funcs'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        procs=pulumi.get(__ret__, 'procs'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tables=pulumi.get(__ret__, 'tables'),
        views=pulumi.get(__ret__, 'views'))


@_utilities.lift_output_func(get_database_objects)
def get_database_objects_output(db_name: Optional[pulumi.Input[str]] = None,
                                instance_id: Optional[pulumi.Input[str]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseObjectsResult]:
    """
    Use this data source to query detailed information of dcdb database_objects


    :param str db_name: Database name, obtained through the DescribeDatabases api.
    :param str instance_id: The ID of instance.
    :param str result_output_file: Used to save results.
    """
    ...
