# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DbInstanceArgs', 'DbInstance']

@pulumi.input_type
class DbInstanceArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[int],
                 shard_count: pulumi.Input[int],
                 shard_memory: pulumi.Input[int],
                 shard_node_count: pulumi.Input[int],
                 shard_storage: pulumi.Input[int],
                 zones: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DbInstance resource.
        :param pulumi.Input[int] period: The length of time you want to buy, unit: month.
        :param pulumi.Input[int] shard_count: The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments by upgrading the instance.
        :param pulumi.Input[int] shard_memory: &amp;quot;Shard memory size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_node_count: &amp;quot;Number of single shard nodes, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_storage: &amp;quot;Shard storage size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: &amp;quot;The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.&amp;quot;&amp;quot;Note that the current availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.&amp;quot;.
        :param pulumi.Input[int] auto_renew_flag: &amp;quot;Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal).&amp;quot;&amp;quot;1 means automatic renewal, 2 means no automatic renewal (user setting).&amp;quot;&amp;quot;if the business has no concept of renewal or automatic renewal is not required, it needs to be set to 0.&amp;quot;.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers for payment, not used by default.
        :param pulumi.Input[str] db_version_id: &amp;quot;Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17.&amp;quot;&amp;quot;8.0.18 - MySQL 8.0.18;&amp;quot;&amp;quot;10.1.9 - Mariadb 10.1.9;&amp;quot;&amp;quot;5.7.17 - Percona 5.7.17&amp;quot;&amp;quot;If not filled, the default is 5.7.17, which means Percona 5.7.17.&amp;quot;.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]] init_params: &amp;quot;parameter list. The optional values of this interface are:&amp;quot;&amp;quot;character_set_server (character set, must be passed),&amp;quot;&amp;quot;lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive),&amp;quot;&amp;quot;innodb_page_size (innodb data page, default 16K),&amp;quot;&amp;quot;sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous degenerate. The default is strong synchronous degenerate)&amp;quot;.
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]] resource_tags: Array of tag key-value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ids, the security group can be passed in the form of an array, compatible with the previous SecurityGroupId parameter.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher ID list, currently only supports specifying one voucher.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        """
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "shard_count", shard_count)
        pulumi.set(__self__, "shard_memory", shard_memory)
        pulumi.set(__self__, "shard_node_count", shard_node_count)
        pulumi.set(__self__, "shard_storage", shard_storage)
        pulumi.set(__self__, "zones", zones)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if dcn_instance_id is not None:
            pulumi.set(__self__, "dcn_instance_id", dcn_instance_id)
        if dcn_region is not None:
            pulumi.set(__self__, "dcn_region", dcn_region)
        if extranet_access is not None:
            pulumi.set(__self__, "extranet_access", extranet_access)
        if init_params is not None:
            pulumi.set(__self__, "init_params", init_params)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if ipv6_flag is not None:
            pulumi.set(__self__, "ipv6_flag", ipv6_flag)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vipv6 is not None:
            pulumi.set(__self__, "vipv6", vipv6)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        """
        The length of time you want to buy, unit: month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> pulumi.Input[int]:
        """
        The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments by upgrading the instance.
        """
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> pulumi.Input[int]:
        """
        &amp;quot;Shard memory size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_memory")

    @shard_memory.setter
    def shard_memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_memory", value)

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> pulumi.Input[int]:
        """
        &amp;quot;Number of single shard nodes, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_node_count")

    @shard_node_count.setter
    def shard_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_node_count", value)

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> pulumi.Input[int]:
        """
        &amp;quot;Shard storage size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_storage")

    @shard_storage.setter
    def shard_storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_storage", value)

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        &amp;quot;The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.&amp;quot;&amp;quot;Note that the current availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.&amp;quot;.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "zones", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        &amp;quot;Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal).&amp;quot;&amp;quot;1 means automatic renewal, 2 means no automatic renewal (user setting).&amp;quot;&amp;quot;if the business has no concept of renewal or automatic renewal is not required, it needs to be set to 0.&amp;quot;.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use vouchers for payment, not used by default.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        &amp;quot;Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17.&amp;quot;&amp;quot;8.0.18 - MySQL 8.0.18;&amp;quot;&amp;quot;10.1.9 - Mariadb 10.1.9;&amp;quot;&amp;quot;5.7.17 - Percona 5.7.17&amp;quot;&amp;quot;If not filled, the default is 5.7.17, which means Percona 5.7.17.&amp;quot;.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @dcn_instance_id.setter
    def dcn_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_instance_id", value)

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @dcn_region.setter
    def dcn_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_region", value)

    @property
    @pulumi.getter(name="extranetAccess")
    def extranet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to open the extranet access.
        """
        return pulumi.get(self, "extranet_access")

    @extranet_access.setter
    def extranet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extranet_access", value)

    @property
    @pulumi.getter(name="initParams")
    def init_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]]]:
        """
        &amp;quot;parameter list. The optional values of this interface are:&amp;quot;&amp;quot;character_set_server (character set, must be passed),&amp;quot;&amp;quot;lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive),&amp;quot;&amp;quot;innodb_page_size (innodb data page, default 16K),&amp;quot;&amp;quot;sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous degenerate. The default is strong synchronous degenerate)&amp;quot;.
        """
        return pulumi.get(self, "init_params")

    @init_params.setter
    def init_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]]]):
        pulumi.set(self, "init_params", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name, you can set the name of the instance independently through this field.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to support IPv6.
        """
        return pulumi.get(self, "ipv6_flag")

    @ipv6_flag.setter
    def ipv6_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_flag", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]]]:
        """
        Array of tag key-value pairs.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group ids, the security group can be passed in the form of an array, compatible with the previous SecurityGroupId parameter.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network subnet ID, required when VpcId is not empty.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIP.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vipv6(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIPv6.
        """
        return pulumi.get(self, "vipv6")

    @vipv6.setter
    def vipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vipv6", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Voucher ID list, currently only supports specifying one voucher.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _DbInstanceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 shard_memory: Optional[pulumi.Input[int]] = None,
                 shard_node_count: Optional[pulumi.Input[int]] = None,
                 shard_storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering DbInstance resources.
        :param pulumi.Input[int] auto_renew_flag: &amp;quot;Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal).&amp;quot;&amp;quot;1 means automatic renewal, 2 means no automatic renewal (user setting).&amp;quot;&amp;quot;if the business has no concept of renewal or automatic renewal is not required, it needs to be set to 0.&amp;quot;.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers for payment, not used by default.
        :param pulumi.Input[str] db_version_id: &amp;quot;Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17.&amp;quot;&amp;quot;8.0.18 - MySQL 8.0.18;&amp;quot;&amp;quot;10.1.9 - Mariadb 10.1.9;&amp;quot;&amp;quot;5.7.17 - Percona 5.7.17&amp;quot;&amp;quot;If not filled, the default is 5.7.17, which means Percona 5.7.17.&amp;quot;.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]] init_params: &amp;quot;parameter list. The optional values of this interface are:&amp;quot;&amp;quot;character_set_server (character set, must be passed),&amp;quot;&amp;quot;lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive),&amp;quot;&amp;quot;innodb_page_size (innodb data page, default 16K),&amp;quot;&amp;quot;sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous degenerate. The default is strong synchronous degenerate)&amp;quot;.
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] period: The length of time you want to buy, unit: month.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]] resource_tags: Array of tag key-value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ids, the security group can be passed in the form of an array, compatible with the previous SecurityGroupId parameter.
        :param pulumi.Input[int] shard_count: The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments by upgrading the instance.
        :param pulumi.Input[int] shard_memory: &amp;quot;Shard memory size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_node_count: &amp;quot;Number of single shard nodes, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_storage: &amp;quot;Shard storage size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher ID list, currently only supports specifying one voucher.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        :param pulumi.Input[int] vport: Intranet port.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: &amp;quot;The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.&amp;quot;&amp;quot;Note that the current availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.&amp;quot;.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if dcn_instance_id is not None:
            pulumi.set(__self__, "dcn_instance_id", dcn_instance_id)
        if dcn_region is not None:
            pulumi.set(__self__, "dcn_region", dcn_region)
        if extranet_access is not None:
            pulumi.set(__self__, "extranet_access", extranet_access)
        if init_params is not None:
            pulumi.set(__self__, "init_params", init_params)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if ipv6_flag is not None:
            pulumi.set(__self__, "ipv6_flag", ipv6_flag)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if shard_memory is not None:
            pulumi.set(__self__, "shard_memory", shard_memory)
        if shard_node_count is not None:
            pulumi.set(__self__, "shard_node_count", shard_node_count)
        if shard_storage is not None:
            pulumi.set(__self__, "shard_storage", shard_storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vipv6 is not None:
            pulumi.set(__self__, "vipv6", vipv6)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        &amp;quot;Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal).&amp;quot;&amp;quot;1 means automatic renewal, 2 means no automatic renewal (user setting).&amp;quot;&amp;quot;if the business has no concept of renewal or automatic renewal is not required, it needs to be set to 0.&amp;quot;.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use vouchers for payment, not used by default.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        &amp;quot;Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17.&amp;quot;&amp;quot;8.0.18 - MySQL 8.0.18;&amp;quot;&amp;quot;10.1.9 - Mariadb 10.1.9;&amp;quot;&amp;quot;5.7.17 - Percona 5.7.17&amp;quot;&amp;quot;If not filled, the default is 5.7.17, which means Percona 5.7.17.&amp;quot;.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @dcn_instance_id.setter
    def dcn_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_instance_id", value)

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @dcn_region.setter
    def dcn_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_region", value)

    @property
    @pulumi.getter(name="extranetAccess")
    def extranet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to open the extranet access.
        """
        return pulumi.get(self, "extranet_access")

    @extranet_access.setter
    def extranet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extranet_access", value)

    @property
    @pulumi.getter(name="initParams")
    def init_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]]]:
        """
        &amp;quot;parameter list. The optional values of this interface are:&amp;quot;&amp;quot;character_set_server (character set, must be passed),&amp;quot;&amp;quot;lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive),&amp;quot;&amp;quot;innodb_page_size (innodb data page, default 16K),&amp;quot;&amp;quot;sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous degenerate. The default is strong synchronous degenerate)&amp;quot;.
        """
        return pulumi.get(self, "init_params")

    @init_params.setter
    def init_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceInitParamArgs']]]]):
        pulumi.set(self, "init_params", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name, you can set the name of the instance independently through this field.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to support IPv6.
        """
        return pulumi.get(self, "ipv6_flag")

    @ipv6_flag.setter
    def ipv6_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_flag", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The length of time you want to buy, unit: month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]]]:
        """
        Array of tag key-value pairs.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group ids, the security group can be passed in the form of an array, compatible with the previous SecurityGroupId parameter.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments by upgrading the instance.
        """
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> Optional[pulumi.Input[int]]:
        """
        &amp;quot;Shard memory size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_memory")

    @shard_memory.setter
    def shard_memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_memory", value)

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        &amp;quot;Number of single shard nodes, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_node_count")

    @shard_node_count.setter
    def shard_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_node_count", value)

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> Optional[pulumi.Input[int]]:
        """
        &amp;quot;Shard storage size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_storage")

    @shard_storage.setter
    def shard_storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network subnet ID, required when VpcId is not empty.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIP.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vipv6(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIPv6.
        """
        return pulumi.get(self, "vipv6")

    @vipv6.setter
    def vipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vipv6", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Voucher ID list, currently only supports specifying one voucher.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Intranet port.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        &amp;quot;The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.&amp;quot;&amp;quot;Note that the current availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.&amp;quot;.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class DbInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceInitParamArgs']]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceResourceTagArgs']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 shard_memory: Optional[pulumi.Input[int]] = None,
                 shard_node_count: Optional[pulumi.Input[int]] = None,
                 shard_storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a dcdb db_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        db_instance = tencentcloud.dcdb.DbInstance("dbInstance",
            instance_name="test_dcdb_db_instance",
            zones=["ap-guangzhou-5"],
            period=1,
            shard_memory=2,
            shard_storage=10,
            shard_node_count=2,
            shard_count=2,
            vpc_id=local["vpc_id"],
            subnet_id=local["subnet_id"],
            db_version_id="8.0",
            resource_tags=[tencentcloud.dcdb.DbInstanceResourceTagArgs(
                tag_key="aaa",
                tag_value="bbb",
            )],
            init_params=[
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="character_set_server",
                    value="utf8mb4",
                ),
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="lower_case_table_names",
                    value="1",
                ),
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="sync_mode",
                    value="2",
                ),
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="innodb_page_size",
                    value="16384",
                ),
            ],
            security_group_ids=[local["sg_id"]])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dcdb db_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcdb/dbInstance:DbInstance db_instance db_instance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: &amp;quot;Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal).&amp;quot;&amp;quot;1 means automatic renewal, 2 means no automatic renewal (user setting).&amp;quot;&amp;quot;if the business has no concept of renewal or automatic renewal is not required, it needs to be set to 0.&amp;quot;.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers for payment, not used by default.
        :param pulumi.Input[str] db_version_id: &amp;quot;Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17.&amp;quot;&amp;quot;8.0.18 - MySQL 8.0.18;&amp;quot;&amp;quot;10.1.9 - Mariadb 10.1.9;&amp;quot;&amp;quot;5.7.17 - Percona 5.7.17&amp;quot;&amp;quot;If not filled, the default is 5.7.17, which means Percona 5.7.17.&amp;quot;.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceInitParamArgs']]]] init_params: &amp;quot;parameter list. The optional values of this interface are:&amp;quot;&amp;quot;character_set_server (character set, must be passed),&amp;quot;&amp;quot;lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive),&amp;quot;&amp;quot;innodb_page_size (innodb data page, default 16K),&amp;quot;&amp;quot;sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous degenerate. The default is strong synchronous degenerate)&amp;quot;.
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] period: The length of time you want to buy, unit: month.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceResourceTagArgs']]]] resource_tags: Array of tag key-value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ids, the security group can be passed in the form of an array, compatible with the previous SecurityGroupId parameter.
        :param pulumi.Input[int] shard_count: The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments by upgrading the instance.
        :param pulumi.Input[int] shard_memory: &amp;quot;Shard memory size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_node_count: &amp;quot;Number of single shard nodes, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_storage: &amp;quot;Shard storage size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher ID list, currently only supports specifying one voucher.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: &amp;quot;The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.&amp;quot;&amp;quot;Note that the current availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.&amp;quot;.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dcdb db_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        db_instance = tencentcloud.dcdb.DbInstance("dbInstance",
            instance_name="test_dcdb_db_instance",
            zones=["ap-guangzhou-5"],
            period=1,
            shard_memory=2,
            shard_storage=10,
            shard_node_count=2,
            shard_count=2,
            vpc_id=local["vpc_id"],
            subnet_id=local["subnet_id"],
            db_version_id="8.0",
            resource_tags=[tencentcloud.dcdb.DbInstanceResourceTagArgs(
                tag_key="aaa",
                tag_value="bbb",
            )],
            init_params=[
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="character_set_server",
                    value="utf8mb4",
                ),
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="lower_case_table_names",
                    value="1",
                ),
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="sync_mode",
                    value="2",
                ),
                tencentcloud.dcdb.DbInstanceInitParamArgs(
                    param="innodb_page_size",
                    value="16384",
                ),
            ],
            security_group_ids=[local["sg_id"]])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dcdb db_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcdb/dbInstance:DbInstance db_instance db_instance_id
        ```

        :param str resource_name: The name of the resource.
        :param DbInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceInitParamArgs']]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceResourceTagArgs']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 shard_memory: Optional[pulumi.Input[int]] = None,
                 shard_node_count: Optional[pulumi.Input[int]] = None,
                 shard_storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbInstanceArgs.__new__(DbInstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["auto_voucher"] = auto_voucher
            __props__.__dict__["db_version_id"] = db_version_id
            __props__.__dict__["dcn_instance_id"] = dcn_instance_id
            __props__.__dict__["dcn_region"] = dcn_region
            __props__.__dict__["extranet_access"] = extranet_access
            __props__.__dict__["init_params"] = init_params
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["ipv6_flag"] = ipv6_flag
            if period is None and not opts.urn:
                raise TypeError("Missing required property 'period'")
            __props__.__dict__["period"] = period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["resource_tags"] = resource_tags
            __props__.__dict__["security_group_ids"] = security_group_ids
            if shard_count is None and not opts.urn:
                raise TypeError("Missing required property 'shard_count'")
            __props__.__dict__["shard_count"] = shard_count
            if shard_memory is None and not opts.urn:
                raise TypeError("Missing required property 'shard_memory'")
            __props__.__dict__["shard_memory"] = shard_memory
            if shard_node_count is None and not opts.urn:
                raise TypeError("Missing required property 'shard_node_count'")
            __props__.__dict__["shard_node_count"] = shard_node_count
            if shard_storage is None and not opts.urn:
                raise TypeError("Missing required property 'shard_storage'")
            __props__.__dict__["shard_storage"] = shard_storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["vip"] = vip
            __props__.__dict__["vipv6"] = vipv6
            __props__.__dict__["voucher_ids"] = voucher_ids
            __props__.__dict__["vpc_id"] = vpc_id
            if zones is None and not opts.urn:
                raise TypeError("Missing required property 'zones'")
            __props__.__dict__["zones"] = zones
            __props__.__dict__["vport"] = None
        super(DbInstance, __self__).__init__(
            'tencentcloud:Dcdb/dbInstance:DbInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            auto_voucher: Optional[pulumi.Input[bool]] = None,
            db_version_id: Optional[pulumi.Input[str]] = None,
            dcn_instance_id: Optional[pulumi.Input[str]] = None,
            dcn_region: Optional[pulumi.Input[str]] = None,
            extranet_access: Optional[pulumi.Input[bool]] = None,
            init_params: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceInitParamArgs']]]]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            ipv6_flag: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceResourceTagArgs']]]]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            shard_count: Optional[pulumi.Input[int]] = None,
            shard_memory: Optional[pulumi.Input[int]] = None,
            shard_node_count: Optional[pulumi.Input[int]] = None,
            shard_storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vipv6: Optional[pulumi.Input[str]] = None,
            voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[int]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'DbInstance':
        """
        Get an existing DbInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: &amp;quot;Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal).&amp;quot;&amp;quot;1 means automatic renewal, 2 means no automatic renewal (user setting).&amp;quot;&amp;quot;if the business has no concept of renewal or automatic renewal is not required, it needs to be set to 0.&amp;quot;.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use vouchers for payment, not used by default.
        :param pulumi.Input[str] db_version_id: &amp;quot;Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17.&amp;quot;&amp;quot;8.0.18 - MySQL 8.0.18;&amp;quot;&amp;quot;10.1.9 - Mariadb 10.1.9;&amp;quot;&amp;quot;5.7.17 - Percona 5.7.17&amp;quot;&amp;quot;If not filled, the default is 5.7.17, which means Percona 5.7.17.&amp;quot;.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceInitParamArgs']]]] init_params: &amp;quot;parameter list. The optional values of this interface are:&amp;quot;&amp;quot;character_set_server (character set, must be passed),&amp;quot;&amp;quot;lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive),&amp;quot;&amp;quot;innodb_page_size (innodb data page, default 16K),&amp;quot;&amp;quot;sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous degenerate. The default is strong synchronous degenerate)&amp;quot;.
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] period: The length of time you want to buy, unit: month.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceResourceTagArgs']]]] resource_tags: Array of tag key-value pairs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ids, the security group can be passed in the form of an array, compatible with the previous SecurityGroupId parameter.
        :param pulumi.Input[int] shard_count: The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments by upgrading the instance.
        :param pulumi.Input[int] shard_memory: &amp;quot;Shard memory size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_node_count: &amp;quot;Number of single shard nodes, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[int] shard_storage: &amp;quot;Shard storage size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: Voucher ID list, currently only supports specifying one voucher.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        :param pulumi.Input[int] vport: Intranet port.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: &amp;quot;The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.&amp;quot;&amp;quot;Note that the current availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.&amp;quot;.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbInstanceState.__new__(_DbInstanceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["db_version_id"] = db_version_id
        __props__.__dict__["dcn_instance_id"] = dcn_instance_id
        __props__.__dict__["dcn_region"] = dcn_region
        __props__.__dict__["extranet_access"] = extranet_access
        __props__.__dict__["init_params"] = init_params
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["ipv6_flag"] = ipv6_flag
        __props__.__dict__["period"] = period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_tags"] = resource_tags
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["shard_count"] = shard_count
        __props__.__dict__["shard_memory"] = shard_memory
        __props__.__dict__["shard_node_count"] = shard_node_count
        __props__.__dict__["shard_storage"] = shard_storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vipv6"] = vipv6
        __props__.__dict__["voucher_ids"] = voucher_ids
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vport"] = vport
        __props__.__dict__["zones"] = zones
        return DbInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        &amp;quot;Automatic renewal flag, 0 means the default state (the user has not set it, that is, the initial state is manual renewal, and the user has activated the prepaid non-stop privilege and will also perform automatic renewal).&amp;quot;&amp;quot;1 means automatic renewal, 2 means no automatic renewal (user setting).&amp;quot;&amp;quot;if the business has no concept of renewal or automatic renewal is not required, it needs to be set to 0.&amp;quot;.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically use vouchers for payment, not used by default.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> pulumi.Output[Optional[str]]:
        """
        &amp;quot;Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17.&amp;quot;&amp;quot;8.0.18 - MySQL 8.0.18;&amp;quot;&amp;quot;10.1.9 - Mariadb 10.1.9;&amp;quot;&amp;quot;5.7.17 - Percona 5.7.17&amp;quot;&amp;quot;If not filled, the default is 5.7.17, which means Percona 5.7.17.&amp;quot;.
        """
        return pulumi.get(self, "db_version_id")

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> pulumi.Output[Optional[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @property
    @pulumi.getter(name="extranetAccess")
    def extranet_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to open the extranet access.
        """
        return pulumi.get(self, "extranet_access")

    @property
    @pulumi.getter(name="initParams")
    def init_params(self) -> pulumi.Output[Optional[Sequence['outputs.DbInstanceInitParam']]]:
        """
        &amp;quot;parameter list. The optional values of this interface are:&amp;quot;&amp;quot;character_set_server (character set, must be passed),&amp;quot;&amp;quot;lower_case_table_names (table name is case sensitive, must be passed, 0 - sensitive; 1 - insensitive),&amp;quot;&amp;quot;innodb_page_size (innodb data page, default 16K),&amp;quot;&amp;quot;sync_mode ( Synchronous mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous degenerate. The default is strong synchronous degenerate)&amp;quot;.
        """
        return pulumi.get(self, "init_params")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        Instance name, you can set the name of the instance independently through this field.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to support IPv6.
        """
        return pulumi.get(self, "ipv6_flag")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[int]:
        """
        The length of time you want to buy, unit: month.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> pulumi.Output[Optional[Sequence['outputs.DbInstanceResourceTag']]]:
        """
        Array of tag key-value pairs.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security group ids, the security group can be passed in the form of an array, compatible with the previous SecurityGroupId parameter.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> pulumi.Output[int]:
        """
        The number of instance fragments, the optional range is 2-8, and new fragments can be added to a maximum of 64 fragments by upgrading the instance.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> pulumi.Output[int]:
        """
        &amp;quot;Shard memory size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_memory")

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> pulumi.Output[int]:
        """
        &amp;quot;Number of single shard nodes, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_node_count")

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> pulumi.Output[int]:
        """
        &amp;quot;Shard storage size, unit: GB, can pass DescribeShardSpec&amp;quot;&amp;quot;Query the instance specification to obtain.&amp;quot;.
        """
        return pulumi.get(self, "shard_storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        Virtual private network subnet ID, required when VpcId is not empty.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        The field is required to specify VIP.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vipv6(self) -> pulumi.Output[str]:
        """
        The field is required to specify VIPv6.
        """
        return pulumi.get(self, "vipv6")

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Voucher ID list, currently only supports specifying one voucher.
        """
        return pulumi.get(self, "voucher_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Virtual private network ID, if not passed or passed empty, it means that it is created as a basic network.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[int]:
        """
        Intranet port.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence[str]]:
        """
        &amp;quot;The availability zone distribution of shard nodes can be filled with up to two availability zones. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.&amp;quot;&amp;quot;Note that the current availability zone that can be sold needs to be pulled through the DescribeDCDBSaleInfo interface.&amp;quot;.
        """
        return pulumi.get(self, "zones")

