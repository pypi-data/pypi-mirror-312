# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRenewalPriceResult',
    'AwaitableGetRenewalPriceResult',
    'get_renewal_price',
    'get_renewal_price_output',
]

@pulumi.output_type
class GetRenewalPriceResult:
    """
    A collection of values returned by getRenewalPrice.
    """
    def __init__(__self__, amount_unit=None, id=None, instance_id=None, original_price=None, period=None, price=None, result_output_file=None):
        if amount_unit and not isinstance(amount_unit, str):
            raise TypeError("Expected argument 'amount_unit' to be a str")
        pulumi.set(__self__, "amount_unit", amount_unit)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if original_price and not isinstance(original_price, int):
            raise TypeError("Expected argument 'original_price' to be a int")
        pulumi.set(__self__, "original_price", original_price)
        if period and not isinstance(period, int):
            raise TypeError("Expected argument 'period' to be a int")
        pulumi.set(__self__, "period", period)
        if price and not isinstance(price, int):
            raise TypeError("Expected argument 'price' to be a int")
        pulumi.set(__self__, "price", price)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="amountUnit")
    def amount_unit(self) -> Optional[str]:
        return pulumi.get(self, "amount_unit")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> int:
        """
        Original price. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "original_price")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def price(self) -> int:
        """
        The actual price may be different from the original price due to discounts. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetRenewalPriceResult(GetRenewalPriceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRenewalPriceResult(
            amount_unit=self.amount_unit,
            id=self.id,
            instance_id=self.instance_id,
            original_price=self.original_price,
            period=self.period,
            price=self.price,
            result_output_file=self.result_output_file)


def get_renewal_price(amount_unit: Optional[str] = None,
                      instance_id: Optional[str] = None,
                      period: Optional[int] = None,
                      result_output_file: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRenewalPriceResult:
    """
    Use this data source to query detailed information of dcdb renewal_price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    renewal_price = tencentcloud.Dcdb.get_renewal_price(instance_id=local["dcdb_id"],
        period=1,
        amount_unit="pent")
    ```
    <!--End PulumiCodeChooser -->


    :param str amount_unit: Price unit. Valid values: `pent` (cent), `microPent` (microcent).
    :param str instance_id: Instance ID.
    :param int period: Renewal duration, default: 1 month.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['amountUnit'] = amount_unit
    __args__['instanceId'] = instance_id
    __args__['period'] = period
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dcdb/getRenewalPrice:getRenewalPrice', __args__, opts=opts, typ=GetRenewalPriceResult).value

    return AwaitableGetRenewalPriceResult(
        amount_unit=pulumi.get(__ret__, 'amount_unit'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        original_price=pulumi.get(__ret__, 'original_price'),
        period=pulumi.get(__ret__, 'period'),
        price=pulumi.get(__ret__, 'price'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_renewal_price)
def get_renewal_price_output(amount_unit: Optional[pulumi.Input[Optional[str]]] = None,
                             instance_id: Optional[pulumi.Input[str]] = None,
                             period: Optional[pulumi.Input[Optional[int]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRenewalPriceResult]:
    """
    Use this data source to query detailed information of dcdb renewal_price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    renewal_price = tencentcloud.Dcdb.get_renewal_price(instance_id=local["dcdb_id"],
        period=1,
        amount_unit="pent")
    ```
    <!--End PulumiCodeChooser -->


    :param str amount_unit: Price unit. Valid values: `pent` (cent), `microPent` (microcent).
    :param str instance_id: Instance ID.
    :param int period: Renewal duration, default: 1 month.
    :param str result_output_file: Used to save results.
    """
    ...
