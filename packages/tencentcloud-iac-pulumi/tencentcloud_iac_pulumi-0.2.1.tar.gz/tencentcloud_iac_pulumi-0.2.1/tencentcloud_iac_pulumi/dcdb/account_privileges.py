# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountPrivilegesArgs', 'AccountPrivileges']

@pulumi.input_type
class AccountPrivilegesArgs:
    def __init__(__self__, *,
                 account: pulumi.Input['AccountPrivilegesAccountArgs'],
                 instance_id: pulumi.Input[str],
                 column_privileges: Optional[pulumi.Input['AccountPrivilegesColumnPrivilegesArgs']] = None,
                 database_privileges: Optional[pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs']] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 table_privileges: Optional[pulumi.Input['AccountPrivilegesTablePrivilegesArgs']] = None,
                 view_privileges: Optional[pulumi.Input['AccountPrivilegesViewPrivilegesArgs']] = None):
        """
        The set of arguments for constructing a AccountPrivileges resource.
        :param pulumi.Input['AccountPrivilegesAccountArgs'] account: The account of the database, including username and host.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input['AccountPrivilegesColumnPrivilegesArgs'] column_privileges: Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs'] database_privileges: Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
        :param pulumi.Input['AccountPrivilegesTablePrivilegesArgs'] table_privileges: Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input['AccountPrivilegesViewPrivilegesArgs'] view_privileges: Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "instance_id", instance_id)
        if column_privileges is not None:
            pulumi.set(__self__, "column_privileges", column_privileges)
        if database_privileges is not None:
            pulumi.set(__self__, "database_privileges", database_privileges)
        if global_privileges is not None:
            pulumi.set(__self__, "global_privileges", global_privileges)
        if table_privileges is not None:
            pulumi.set(__self__, "table_privileges", table_privileges)
        if view_privileges is not None:
            pulumi.set(__self__, "view_privileges", view_privileges)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input['AccountPrivilegesAccountArgs']:
        """
        The account of the database, including username and host.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input['AccountPrivilegesAccountArgs']):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="columnPrivileges")
    def column_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesColumnPrivilegesArgs']]:
        """
        Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "column_privileges")

    @column_privileges.setter
    def column_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesColumnPrivilegesArgs']]):
        pulumi.set(self, "column_privileges", value)

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs']]:
        """
        Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "database_privileges")

    @database_privileges.setter
    def database_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs']]):
        pulumi.set(self, "database_privileges", value)

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
        """
        return pulumi.get(self, "global_privileges")

    @global_privileges.setter
    def global_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "global_privileges", value)

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesTablePrivilegesArgs']]:
        """
        Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "table_privileges")

    @table_privileges.setter
    def table_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesTablePrivilegesArgs']]):
        pulumi.set(self, "table_privileges", value)

    @property
    @pulumi.getter(name="viewPrivileges")
    def view_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesViewPrivilegesArgs']]:
        """
        Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "view_privileges")

    @view_privileges.setter
    def view_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesViewPrivilegesArgs']]):
        pulumi.set(self, "view_privileges", value)


@pulumi.input_type
class _AccountPrivilegesState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input['AccountPrivilegesAccountArgs']] = None,
                 column_privileges: Optional[pulumi.Input['AccountPrivilegesColumnPrivilegesArgs']] = None,
                 database_privileges: Optional[pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs']] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 table_privileges: Optional[pulumi.Input['AccountPrivilegesTablePrivilegesArgs']] = None,
                 view_privileges: Optional[pulumi.Input['AccountPrivilegesViewPrivilegesArgs']] = None):
        """
        Input properties used for looking up and filtering AccountPrivileges resources.
        :param pulumi.Input['AccountPrivilegesAccountArgs'] account: The account of the database, including username and host.
        :param pulumi.Input['AccountPrivilegesColumnPrivilegesArgs'] column_privileges: Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs'] database_privileges: Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input['AccountPrivilegesTablePrivilegesArgs'] table_privileges: Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input['AccountPrivilegesViewPrivilegesArgs'] view_privileges: Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if column_privileges is not None:
            pulumi.set(__self__, "column_privileges", column_privileges)
        if database_privileges is not None:
            pulumi.set(__self__, "database_privileges", database_privileges)
        if global_privileges is not None:
            pulumi.set(__self__, "global_privileges", global_privileges)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if table_privileges is not None:
            pulumi.set(__self__, "table_privileges", table_privileges)
        if view_privileges is not None:
            pulumi.set(__self__, "view_privileges", view_privileges)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input['AccountPrivilegesAccountArgs']]:
        """
        The account of the database, including username and host.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input['AccountPrivilegesAccountArgs']]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="columnPrivileges")
    def column_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesColumnPrivilegesArgs']]:
        """
        Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "column_privileges")

    @column_privileges.setter
    def column_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesColumnPrivilegesArgs']]):
        pulumi.set(self, "column_privileges", value)

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs']]:
        """
        Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "database_privileges")

    @database_privileges.setter
    def database_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesDatabasePrivilegesArgs']]):
        pulumi.set(self, "database_privileges", value)

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
        """
        return pulumi.get(self, "global_privileges")

    @global_privileges.setter
    def global_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "global_privileges", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesTablePrivilegesArgs']]:
        """
        Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "table_privileges")

    @table_privileges.setter
    def table_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesTablePrivilegesArgs']]):
        pulumi.set(self, "table_privileges", value)

    @property
    @pulumi.getter(name="viewPrivileges")
    def view_privileges(self) -> Optional[pulumi.Input['AccountPrivilegesViewPrivilegesArgs']]:
        """
        Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "view_privileges")

    @view_privileges.setter
    def view_privileges(self, value: Optional[pulumi.Input['AccountPrivilegesViewPrivilegesArgs']]):
        pulumi.set(self, "view_privileges", value)


class AccountPrivileges(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesAccountArgs']]] = None,
                 column_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegesArgs']]] = None,
                 database_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegesArgs']]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 table_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegesArgs']]] = None,
                 view_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegesArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a dcdb account_privileges

        ## Import

        dcdb account_privileges can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcdb/accountPrivileges:AccountPrivileges account_privileges instanceId#userName#host#dbName#tabName#viewName#colName
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesAccountArgs']] account: The account of the database, including username and host.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegesArgs']] column_privileges: Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegesArgs']] database_privileges: Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegesArgs']] table_privileges: Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegesArgs']] view_privileges: Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountPrivilegesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dcdb account_privileges

        ## Import

        dcdb account_privileges can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcdb/accountPrivileges:AccountPrivileges account_privileges instanceId#userName#host#dbName#tabName#viewName#colName
        ```

        :param str resource_name: The name of the resource.
        :param AccountPrivilegesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountPrivilegesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesAccountArgs']]] = None,
                 column_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegesArgs']]] = None,
                 database_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegesArgs']]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 table_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegesArgs']]] = None,
                 view_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegesArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountPrivilegesArgs.__new__(AccountPrivilegesArgs)

            if account is None and not opts.urn:
                raise TypeError("Missing required property 'account'")
            __props__.__dict__["account"] = account
            __props__.__dict__["column_privileges"] = column_privileges
            __props__.__dict__["database_privileges"] = database_privileges
            __props__.__dict__["global_privileges"] = global_privileges
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["table_privileges"] = table_privileges
            __props__.__dict__["view_privileges"] = view_privileges
        super(AccountPrivileges, __self__).__init__(
            'tencentcloud:Dcdb/accountPrivileges:AccountPrivileges',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesAccountArgs']]] = None,
            column_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegesArgs']]] = None,
            database_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegesArgs']]] = None,
            global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            table_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegesArgs']]] = None,
            view_privileges: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegesArgs']]] = None) -> 'AccountPrivileges':
        """
        Get an existing AccountPrivileges resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesAccountArgs']] account: The account of the database, including username and host.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegesArgs']] column_privileges: Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegesArgs']] database_privileges: Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegesArgs']] table_privileges: Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegesArgs']] view_privileges: Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountPrivilegesState.__new__(_AccountPrivilegesState)

        __props__.__dict__["account"] = account
        __props__.__dict__["column_privileges"] = column_privileges
        __props__.__dict__["database_privileges"] = database_privileges
        __props__.__dict__["global_privileges"] = global_privileges
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["table_privileges"] = table_privileges
        __props__.__dict__["view_privileges"] = view_privileges
        return AccountPrivileges(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output['outputs.AccountPrivilegesAccount']:
        """
        The account of the database, including username and host.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="columnPrivileges")
    def column_privileges(self) -> pulumi.Output[Optional['outputs.AccountPrivilegesColumnPrivileges']]:
        """
        Permissions for columns in database tables. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, REFERENCES.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "column_privileges")

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> pulumi.Output[Optional['outputs.AccountPrivilegesDatabasePrivileges']]:
        """
        Database permissions. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES,  LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "database_privileges")

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global permissions. Among them, the optional value of the permission in GlobalPrivileges is: SELECT, INSERT, UPDATE, DELETE, CREATE, PROCESS, DROP, REFERENCES, INDEX, ALTER, SHOW DATABASES,  CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER.  Note that if this parameter is not passed, it means that the existing permissions are reserved. If it needs to be cleared, pass an empty array in this field.
        """
        return pulumi.get(self, "global_privileges")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> pulumi.Output[Optional['outputs.AccountPrivilegesTablePrivileges']]:
        """
        Permissions for tables in the database. Optional values for the Privileges permission are: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER. Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "table_privileges")

    @property
    @pulumi.getter(name="viewPrivileges")
    def view_privileges(self) -> pulumi.Output[Optional['outputs.AccountPrivilegesViewPrivileges']]:
        """
        Permissions for database views. Optional values for the Privileges permission are:  SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE VIEW, SHOW VIEW, TRIGGER.  Note that if this parameter is not passed, the existing privileges are reserved. If you need to clear them, please pass an empty array in the complex type Privileges field.
        """
        return pulumi.get(self, "view_privileges")

