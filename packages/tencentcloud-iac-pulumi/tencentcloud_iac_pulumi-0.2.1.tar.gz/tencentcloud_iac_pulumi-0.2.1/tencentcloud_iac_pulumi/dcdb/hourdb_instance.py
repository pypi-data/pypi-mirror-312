# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['HourdbInstanceArgs', 'HourdbInstance']

@pulumi.input_type
class HourdbInstanceArgs:
    def __init__(__self__, *,
                 shard_count: pulumi.Input[int],
                 shard_memory: pulumi.Input[int],
                 shard_node_count: pulumi.Input[int],
                 shard_storage: pulumi.Input[int],
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a HourdbInstance resource.
        :param pulumi.Input[int] shard_count: instance shard count.
        :param pulumi.Input[int] shard_memory: memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_node_count: node count for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_storage: storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[str] db_version_id: db engine version, default to Percona 5.7.17.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]] resource_tags: resource tags.
        :param pulumi.Input[str] security_group_id: security group id.
        :param pulumi.Input[str] subnet_id: subnet id, its required when vpcId is set.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone.
        """
        pulumi.set(__self__, "shard_count", shard_count)
        pulumi.set(__self__, "shard_memory", shard_memory)
        pulumi.set(__self__, "shard_node_count", shard_node_count)
        pulumi.set(__self__, "shard_storage", shard_storage)
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if dcn_instance_id is not None:
            pulumi.set(__self__, "dcn_instance_id", dcn_instance_id)
        if dcn_region is not None:
            pulumi.set(__self__, "dcn_region", dcn_region)
        if extranet_access is not None:
            pulumi.set(__self__, "extranet_access", extranet_access)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if ipv6_flag is not None:
            pulumi.set(__self__, "ipv6_flag", ipv6_flag)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vipv6 is not None:
            pulumi.set(__self__, "vipv6", vipv6)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> pulumi.Input[int]:
        """
        instance shard count.
        """
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> pulumi.Input[int]:
        """
        memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_memory")

    @shard_memory.setter
    def shard_memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_memory", value)

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> pulumi.Input[int]:
        """
        node count for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_node_count")

    @shard_node_count.setter
    def shard_node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_node_count", value)

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> pulumi.Input[int]:
        """
        storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_storage")

    @shard_storage.setter
    def shard_storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_storage", value)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        db engine version, default to Percona 5.7.17.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @dcn_instance_id.setter
    def dcn_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_instance_id", value)

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @dcn_region.setter
    def dcn_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_region", value)

    @property
    @pulumi.getter(name="extranetAccess")
    def extranet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to open the extranet access.
        """
        return pulumi.get(self, "extranet_access")

    @extranet_access.setter
    def extranet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extranet_access", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of this instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to support IPv6.
        """
        return pulumi.get(self, "ipv6_flag")

    @ipv6_flag.setter
    def ipv6_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_flag", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]]]:
        """
        resource tags.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        security group id.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet id, its required when vpcId is set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIP.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vipv6(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIPv6.
        """
        return pulumi.get(self, "vipv6")

    @vipv6.setter
    def vipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vipv6", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        available zone.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


@pulumi.input_type
class _HourdbInstanceState:
    def __init__(__self__, *,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 shard_memory: Optional[pulumi.Input[int]] = None,
                 shard_node_count: Optional[pulumi.Input[int]] = None,
                 shard_storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering HourdbInstance resources.
        :param pulumi.Input[str] db_version_id: db engine version, default to Percona 5.7.17.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]] resource_tags: resource tags.
        :param pulumi.Input[str] security_group_id: security group id.
        :param pulumi.Input[int] shard_count: instance shard count.
        :param pulumi.Input[int] shard_memory: memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_node_count: node count for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_storage: storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[str] subnet_id: subnet id, its required when vpcId is set.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[int] vport: Intranet port.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone.
        """
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if dcn_instance_id is not None:
            pulumi.set(__self__, "dcn_instance_id", dcn_instance_id)
        if dcn_region is not None:
            pulumi.set(__self__, "dcn_region", dcn_region)
        if extranet_access is not None:
            pulumi.set(__self__, "extranet_access", extranet_access)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if ipv6_flag is not None:
            pulumi.set(__self__, "ipv6_flag", ipv6_flag)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if shard_memory is not None:
            pulumi.set(__self__, "shard_memory", shard_memory)
        if shard_node_count is not None:
            pulumi.set(__self__, "shard_node_count", shard_node_count)
        if shard_storage is not None:
            pulumi.set(__self__, "shard_storage", shard_storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vipv6 is not None:
            pulumi.set(__self__, "vipv6", vipv6)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        db engine version, default to Percona 5.7.17.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @dcn_instance_id.setter
    def dcn_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_instance_id", value)

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @dcn_region.setter
    def dcn_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_region", value)

    @property
    @pulumi.getter(name="extranetAccess")
    def extranet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to open the extranet access.
        """
        return pulumi.get(self, "extranet_access")

    @extranet_access.setter
    def extranet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extranet_access", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of this instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to support IPv6.
        """
        return pulumi.get(self, "ipv6_flag")

    @ipv6_flag.setter
    def ipv6_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_flag", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]]]:
        """
        resource tags.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['HourdbInstanceResourceTagArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        security group id.
        """
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[pulumi.Input[int]]:
        """
        instance shard count.
        """
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> Optional[pulumi.Input[int]]:
        """
        memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_memory")

    @shard_memory.setter
    def shard_memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_memory", value)

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> Optional[pulumi.Input[int]]:
        """
        node count for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_node_count")

    @shard_node_count.setter
    def shard_node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_node_count", value)

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> Optional[pulumi.Input[int]]:
        """
        storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_storage")

    @shard_storage.setter
    def shard_storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet id, its required when vpcId is set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIP.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vipv6(self) -> Optional[pulumi.Input[str]]:
        """
        The field is required to specify VIPv6.
        """
        return pulumi.get(self, "vipv6")

    @vipv6.setter
    def vipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vipv6", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Intranet port.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        available zone.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class HourdbInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HourdbInstanceResourceTagArgs']]]]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 shard_memory: Optional[pulumi.Input[int]] = None,
                 shard_node_count: Optional[pulumi.Input[int]] = None,
                 shard_storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a dcdb hourdb_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        hourdb_instance = tencentcloud.dcdb.HourdbInstance("hourdbInstance",
            instance_name="test_dcdc_dc_instance",
            zones=[
                "ap-guangzhou-5",
                "ap-guangzhou-6",
            ],
            shard_memory=2,
            shard_storage=10,
            shard_node_count=2,
            shard_count=2,
            vpc_id=local["vpc_id"],
            subnet_id=local["subnet_id"],
            security_group_id=local["sg_id"],
            db_version_id="8.0",
            resource_tags=[tencentcloud.dcdb.HourdbInstanceResourceTagArgs(
                tag_key="aaa",
                tag_value="bbb",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dcdb hourdb_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcdb/hourdbInstance:HourdbInstance hourdb_instance hourdbInstance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_version_id: db engine version, default to Percona 5.7.17.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HourdbInstanceResourceTagArgs']]]] resource_tags: resource tags.
        :param pulumi.Input[str] security_group_id: security group id.
        :param pulumi.Input[int] shard_count: instance shard count.
        :param pulumi.Input[int] shard_memory: memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_node_count: node count for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_storage: storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[str] subnet_id: subnet id, its required when vpcId is set.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HourdbInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dcdb hourdb_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        hourdb_instance = tencentcloud.dcdb.HourdbInstance("hourdbInstance",
            instance_name="test_dcdc_dc_instance",
            zones=[
                "ap-guangzhou-5",
                "ap-guangzhou-6",
            ],
            shard_memory=2,
            shard_storage=10,
            shard_node_count=2,
            shard_count=2,
            vpc_id=local["vpc_id"],
            subnet_id=local["subnet_id"],
            security_group_id=local["sg_id"],
            db_version_id="8.0",
            resource_tags=[tencentcloud.dcdb.HourdbInstanceResourceTagArgs(
                tag_key="aaa",
                tag_value="bbb",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dcdb hourdb_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dcdb/hourdbInstance:HourdbInstance hourdb_instance hourdbInstance_id
        ```

        :param str resource_name: The name of the resource.
        :param HourdbInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HourdbInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 extranet_access: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HourdbInstanceResourceTagArgs']]]]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 shard_memory: Optional[pulumi.Input[int]] = None,
                 shard_node_count: Optional[pulumi.Input[int]] = None,
                 shard_storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HourdbInstanceArgs.__new__(HourdbInstanceArgs)

            __props__.__dict__["db_version_id"] = db_version_id
            __props__.__dict__["dcn_instance_id"] = dcn_instance_id
            __props__.__dict__["dcn_region"] = dcn_region
            __props__.__dict__["extranet_access"] = extranet_access
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["ipv6_flag"] = ipv6_flag
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["resource_tags"] = resource_tags
            __props__.__dict__["security_group_id"] = security_group_id
            if shard_count is None and not opts.urn:
                raise TypeError("Missing required property 'shard_count'")
            __props__.__dict__["shard_count"] = shard_count
            if shard_memory is None and not opts.urn:
                raise TypeError("Missing required property 'shard_memory'")
            __props__.__dict__["shard_memory"] = shard_memory
            if shard_node_count is None and not opts.urn:
                raise TypeError("Missing required property 'shard_node_count'")
            __props__.__dict__["shard_node_count"] = shard_node_count
            if shard_storage is None and not opts.urn:
                raise TypeError("Missing required property 'shard_storage'")
            __props__.__dict__["shard_storage"] = shard_storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["vip"] = vip
            __props__.__dict__["vipv6"] = vipv6
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["zones"] = zones
            __props__.__dict__["vport"] = None
        super(HourdbInstance, __self__).__init__(
            'tencentcloud:Dcdb/hourdbInstance:HourdbInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_version_id: Optional[pulumi.Input[str]] = None,
            dcn_instance_id: Optional[pulumi.Input[str]] = None,
            dcn_region: Optional[pulumi.Input[str]] = None,
            extranet_access: Optional[pulumi.Input[bool]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            ipv6_flag: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HourdbInstanceResourceTagArgs']]]]] = None,
            security_group_id: Optional[pulumi.Input[str]] = None,
            shard_count: Optional[pulumi.Input[int]] = None,
            shard_memory: Optional[pulumi.Input[int]] = None,
            shard_node_count: Optional[pulumi.Input[int]] = None,
            shard_storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vipv6: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[int]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'HourdbInstance':
        """
        Get an existing HourdbInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_version_id: db engine version, default to Percona 5.7.17.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[bool] extranet_access: Whether to open the extranet access.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] ipv6_flag: Whether to support IPv6.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HourdbInstanceResourceTagArgs']]]] resource_tags: resource tags.
        :param pulumi.Input[str] security_group_id: security group id.
        :param pulumi.Input[int] shard_count: instance shard count.
        :param pulumi.Input[int] shard_memory: memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_node_count: node count for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[int] shard_storage: storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        :param pulumi.Input[str] subnet_id: subnet id, its required when vpcId is set.
        :param pulumi.Input[str] vip: The field is required to specify VIP.
        :param pulumi.Input[str] vipv6: The field is required to specify VIPv6.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[int] vport: Intranet port.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HourdbInstanceState.__new__(_HourdbInstanceState)

        __props__.__dict__["db_version_id"] = db_version_id
        __props__.__dict__["dcn_instance_id"] = dcn_instance_id
        __props__.__dict__["dcn_region"] = dcn_region
        __props__.__dict__["extranet_access"] = extranet_access
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["ipv6_flag"] = ipv6_flag
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_tags"] = resource_tags
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["shard_count"] = shard_count
        __props__.__dict__["shard_memory"] = shard_memory
        __props__.__dict__["shard_node_count"] = shard_node_count
        __props__.__dict__["shard_storage"] = shard_storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vipv6"] = vipv6
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vport"] = vport
        __props__.__dict__["zones"] = zones
        return HourdbInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> pulumi.Output[Optional[str]]:
        """
        db engine version, default to Percona 5.7.17.
        """
        return pulumi.get(self, "db_version_id")

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> pulumi.Output[Optional[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @property
    @pulumi.getter(name="extranetAccess")
    def extranet_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to open the extranet access.
        """
        return pulumi.get(self, "extranet_access")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        name of this instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to support IPv6.
        """
        return pulumi.get(self, "ipv6_flag")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> pulumi.Output[Optional[Sequence['outputs.HourdbInstanceResourceTag']]]:
        """
        resource tags.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[Optional[str]]:
        """
        security group id.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> pulumi.Output[int]:
        """
        instance shard count.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> pulumi.Output[int]:
        """
        memory(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_memory")

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> pulumi.Output[int]:
        """
        node count for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_node_count")

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> pulumi.Output[int]:
        """
        storage(GB) for each shard. It can be obtained by querying api DescribeShardSpec.
        """
        return pulumi.get(self, "shard_storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        subnet id, its required when vpcId is set.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        The field is required to specify VIP.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vipv6(self) -> pulumi.Output[str]:
        """
        The field is required to specify VIPv6.
        """
        return pulumi.get(self, "vipv6")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[int]:
        """
        Intranet port.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        available zone.
        """
        return pulumi.get(self, "zones")

