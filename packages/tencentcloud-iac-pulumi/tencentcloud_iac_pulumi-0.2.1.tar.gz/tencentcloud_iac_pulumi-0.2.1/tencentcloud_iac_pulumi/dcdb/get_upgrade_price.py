# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUpgradePriceResult',
    'AwaitableGetUpgradePriceResult',
    'get_upgrade_price',
    'get_upgrade_price_output',
]

@pulumi.output_type
class GetUpgradePriceResult:
    """
    A collection of values returned by getUpgradePrice.
    """
    def __init__(__self__, add_shard_config=None, amount_unit=None, expand_shard_config=None, formula=None, id=None, instance_id=None, original_price=None, price=None, result_output_file=None, split_shard_config=None, upgrade_type=None):
        if add_shard_config and not isinstance(add_shard_config, dict):
            raise TypeError("Expected argument 'add_shard_config' to be a dict")
        pulumi.set(__self__, "add_shard_config", add_shard_config)
        if amount_unit and not isinstance(amount_unit, str):
            raise TypeError("Expected argument 'amount_unit' to be a str")
        pulumi.set(__self__, "amount_unit", amount_unit)
        if expand_shard_config and not isinstance(expand_shard_config, dict):
            raise TypeError("Expected argument 'expand_shard_config' to be a dict")
        pulumi.set(__self__, "expand_shard_config", expand_shard_config)
        if formula and not isinstance(formula, str):
            raise TypeError("Expected argument 'formula' to be a str")
        pulumi.set(__self__, "formula", formula)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if original_price and not isinstance(original_price, int):
            raise TypeError("Expected argument 'original_price' to be a int")
        pulumi.set(__self__, "original_price", original_price)
        if price and not isinstance(price, int):
            raise TypeError("Expected argument 'price' to be a int")
        pulumi.set(__self__, "price", price)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if split_shard_config and not isinstance(split_shard_config, dict):
            raise TypeError("Expected argument 'split_shard_config' to be a dict")
        pulumi.set(__self__, "split_shard_config", split_shard_config)
        if upgrade_type and not isinstance(upgrade_type, str):
            raise TypeError("Expected argument 'upgrade_type' to be a str")
        pulumi.set(__self__, "upgrade_type", upgrade_type)

    @property
    @pulumi.getter(name="addShardConfig")
    def add_shard_config(self) -> Optional['outputs.GetUpgradePriceAddShardConfigResult']:
        return pulumi.get(self, "add_shard_config")

    @property
    @pulumi.getter(name="amountUnit")
    def amount_unit(self) -> Optional[str]:
        return pulumi.get(self, "amount_unit")

    @property
    @pulumi.getter(name="expandShardConfig")
    def expand_shard_config(self) -> Optional['outputs.GetUpgradePriceExpandShardConfigResult']:
        return pulumi.get(self, "expand_shard_config")

    @property
    @pulumi.getter
    def formula(self) -> str:
        """
        Price calculation formula.
        """
        return pulumi.get(self, "formula")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> int:
        """
        Original price. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "original_price")

    @property
    @pulumi.getter
    def price(self) -> int:
        """
        The actual price may be different from the original price due to discounts. Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="splitShardConfig")
    def split_shard_config(self) -> Optional['outputs.GetUpgradePriceSplitShardConfigResult']:
        return pulumi.get(self, "split_shard_config")

    @property
    @pulumi.getter(name="upgradeType")
    def upgrade_type(self) -> str:
        return pulumi.get(self, "upgrade_type")


class AwaitableGetUpgradePriceResult(GetUpgradePriceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUpgradePriceResult(
            add_shard_config=self.add_shard_config,
            amount_unit=self.amount_unit,
            expand_shard_config=self.expand_shard_config,
            formula=self.formula,
            id=self.id,
            instance_id=self.instance_id,
            original_price=self.original_price,
            price=self.price,
            result_output_file=self.result_output_file,
            split_shard_config=self.split_shard_config,
            upgrade_type=self.upgrade_type)


def get_upgrade_price(add_shard_config: Optional[pulumi.InputType['GetUpgradePriceAddShardConfigArgs']] = None,
                      amount_unit: Optional[str] = None,
                      expand_shard_config: Optional[pulumi.InputType['GetUpgradePriceExpandShardConfigArgs']] = None,
                      instance_id: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      split_shard_config: Optional[pulumi.InputType['GetUpgradePriceSplitShardConfigArgs']] = None,
                      upgrade_type: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUpgradePriceResult:
    """
    Use this data source to query detailed information of dcdb upgrade_price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    add_upgrade_price = tencentcloud.Dcdb.get_upgrade_price(instance_id=local["dcdb_id"],
        upgrade_type="ADD",
        add_shard_config=tencentcloud.dcdb.GetUpgradePriceAddShardConfigArgs(
            shard_count=2,
            shard_memory=2,
            shard_storage=100,
        ),
        amount_unit="pent")
    expand_upgrade_price = tencentcloud.Dcdb.get_upgrade_price(instance_id=local["dcdb_id"],
        upgrade_type="EXPAND",
        expand_shard_config=tencentcloud.dcdb.GetUpgradePriceExpandShardConfigArgs(
            shard_instance_ids=["shard-1b5r04az"],
            shard_memory=2,
            shard_storage=40,
            shard_node_count=2,
        ),
        amount_unit="pent")
    split_upgrade_price = tencentcloud.Dcdb.get_upgrade_price(instance_id=local["dcdb_id"],
        upgrade_type="SPLIT",
        split_shard_config=tencentcloud.dcdb.GetUpgradePriceSplitShardConfigArgs(
            shard_instance_ids=["shard-1b5r04az"],
            split_rate=50,
            shard_memory=2,
            shard_storage=100,
        ),
        amount_unit="pent")
    ```
    <!--End PulumiCodeChooser -->


    :param pulumi.InputType['GetUpgradePriceAddShardConfigArgs'] add_shard_config: Config for adding new shard.
    :param str amount_unit: Price unit. Valid values: `pent` (cent), `microPent` (microcent).
    :param pulumi.InputType['GetUpgradePriceExpandShardConfigArgs'] expand_shard_config: Config for expanding existing shard.
    :param str instance_id: Instance ID.
    :param str result_output_file: Used to save results.
    :param pulumi.InputType['GetUpgradePriceSplitShardConfigArgs'] split_shard_config: Config for splitting existing shard.
    :param str upgrade_type: Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
    """
    __args__ = dict()
    __args__['addShardConfig'] = add_shard_config
    __args__['amountUnit'] = amount_unit
    __args__['expandShardConfig'] = expand_shard_config
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    __args__['splitShardConfig'] = split_shard_config
    __args__['upgradeType'] = upgrade_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dcdb/getUpgradePrice:getUpgradePrice', __args__, opts=opts, typ=GetUpgradePriceResult).value

    return AwaitableGetUpgradePriceResult(
        add_shard_config=pulumi.get(__ret__, 'add_shard_config'),
        amount_unit=pulumi.get(__ret__, 'amount_unit'),
        expand_shard_config=pulumi.get(__ret__, 'expand_shard_config'),
        formula=pulumi.get(__ret__, 'formula'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        original_price=pulumi.get(__ret__, 'original_price'),
        price=pulumi.get(__ret__, 'price'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        split_shard_config=pulumi.get(__ret__, 'split_shard_config'),
        upgrade_type=pulumi.get(__ret__, 'upgrade_type'))


@_utilities.lift_output_func(get_upgrade_price)
def get_upgrade_price_output(add_shard_config: Optional[pulumi.Input[Optional[pulumi.InputType['GetUpgradePriceAddShardConfigArgs']]]] = None,
                             amount_unit: Optional[pulumi.Input[Optional[str]]] = None,
                             expand_shard_config: Optional[pulumi.Input[Optional[pulumi.InputType['GetUpgradePriceExpandShardConfigArgs']]]] = None,
                             instance_id: Optional[pulumi.Input[str]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             split_shard_config: Optional[pulumi.Input[Optional[pulumi.InputType['GetUpgradePriceSplitShardConfigArgs']]]] = None,
                             upgrade_type: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUpgradePriceResult]:
    """
    Use this data source to query detailed information of dcdb upgrade_price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    add_upgrade_price = tencentcloud.Dcdb.get_upgrade_price(instance_id=local["dcdb_id"],
        upgrade_type="ADD",
        add_shard_config=tencentcloud.dcdb.GetUpgradePriceAddShardConfigArgs(
            shard_count=2,
            shard_memory=2,
            shard_storage=100,
        ),
        amount_unit="pent")
    expand_upgrade_price = tencentcloud.Dcdb.get_upgrade_price(instance_id=local["dcdb_id"],
        upgrade_type="EXPAND",
        expand_shard_config=tencentcloud.dcdb.GetUpgradePriceExpandShardConfigArgs(
            shard_instance_ids=["shard-1b5r04az"],
            shard_memory=2,
            shard_storage=40,
            shard_node_count=2,
        ),
        amount_unit="pent")
    split_upgrade_price = tencentcloud.Dcdb.get_upgrade_price(instance_id=local["dcdb_id"],
        upgrade_type="SPLIT",
        split_shard_config=tencentcloud.dcdb.GetUpgradePriceSplitShardConfigArgs(
            shard_instance_ids=["shard-1b5r04az"],
            split_rate=50,
            shard_memory=2,
            shard_storage=100,
        ),
        amount_unit="pent")
    ```
    <!--End PulumiCodeChooser -->


    :param pulumi.InputType['GetUpgradePriceAddShardConfigArgs'] add_shard_config: Config for adding new shard.
    :param str amount_unit: Price unit. Valid values: `pent` (cent), `microPent` (microcent).
    :param pulumi.InputType['GetUpgradePriceExpandShardConfigArgs'] expand_shard_config: Config for expanding existing shard.
    :param str instance_id: Instance ID.
    :param str result_output_file: Used to save results.
    :param pulumi.InputType['GetUpgradePriceSplitShardConfigArgs'] split_shard_config: Config for splitting existing shard.
    :param str upgrade_type: Upgrade type, ADD: add new shard, EXPAND: upgrade the existing shard, SPLIT: split existing shard.
    """
    ...
