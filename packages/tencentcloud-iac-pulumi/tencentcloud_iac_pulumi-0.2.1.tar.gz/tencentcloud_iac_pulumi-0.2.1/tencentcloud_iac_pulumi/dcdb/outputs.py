# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccountPrivilegesAccount',
    'AccountPrivilegesColumnPrivileges',
    'AccountPrivilegesDatabasePrivileges',
    'AccountPrivilegesTablePrivileges',
    'AccountPrivilegesViewPrivileges',
    'DbInstanceInitParam',
    'DbInstanceResourceTag',
    'DbParametersParams',
    'HourdbInstanceResourceTag',
    'GetAccountsListResult',
    'GetDatabaseObjectsFuncResult',
    'GetDatabaseObjectsProcResult',
    'GetDatabaseObjectsTableResult',
    'GetDatabaseObjectsViewResult',
    'GetDatabaseTablesColResult',
    'GetDatabasesListResult',
    'GetInstanceNodeInfoNodesInfoResult',
    'GetInstancesListResult',
    'GetInstancesListResourceTagResult',
    'GetInstancesListShardDetailResult',
    'GetLogFilesFileResult',
    'GetOrdersDealResult',
    'GetParametersListResult',
    'GetParametersListConstraintResult',
    'GetParametersListConstraintRangeResult',
    'GetProjectSecurityGroupsGroupResult',
    'GetProjectSecurityGroupsGroupInboundResult',
    'GetProjectSecurityGroupsGroupOutboundResult',
    'GetProjectsProjectResult',
    'GetSaleInfoRegionListResult',
    'GetSaleInfoRegionListAvailableChoiceResult',
    'GetSaleInfoRegionListAvailableChoiceMasterZoneResult',
    'GetSaleInfoRegionListAvailableChoiceSlaveZoneResult',
    'GetSaleInfoRegionListZoneListResult',
    'GetSecurityGroupsListResult',
    'GetSecurityGroupsListInboundResult',
    'GetSecurityGroupsListOutboundResult',
    'GetShardSpecSpecConfigResult',
    'GetShardSpecSpecConfigSpecConfigInfoResult',
    'GetShardsListResult',
    'GetSlowLogsDataResult',
    'GetUpgradePriceAddShardConfigResult',
    'GetUpgradePriceExpandShardConfigResult',
    'GetUpgradePriceSplitShardConfigResult',
]

@pulumi.output_type
class AccountPrivilegesAccount(dict):
    def __init__(__self__, *,
                 host: str,
                 user: str):
        """
        :param str host: account host.
        :param str user: account name.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        account host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        account name.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class AccountPrivilegesColumnPrivileges(dict):
    def __init__(__self__, *,
                 column: str,
                 database: str,
                 privileges: Sequence[str],
                 table: str):
        """
        :param str column: Database column name.
        :param str database: The name of database.
        :param Sequence[str] privileges: Permission information.
        :param str table: Database table name.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def column(self) -> str:
        """
        Database column name.
        """
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        Database table name.
        """
        return pulumi.get(self, "table")


@pulumi.output_type
class AccountPrivilegesDatabasePrivileges(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str]):
        """
        :param str database: The name of database.
        :param Sequence[str] privileges: Permission information.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")


@pulumi.output_type
class AccountPrivilegesTablePrivileges(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 table: str):
        """
        :param str database: The name of database.
        :param Sequence[str] privileges: Permission information.
        :param str table: Database table name.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        Database table name.
        """
        return pulumi.get(self, "table")


@pulumi.output_type
class AccountPrivilegesViewPrivileges(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 view: str):
        """
        :param str database: The name of database.
        :param Sequence[str] privileges: Permission information.
        :param str view: Database view name.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        The name of database.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def view(self) -> str:
        """
        Database view name.
        """
        return pulumi.get(self, "view")


@pulumi.output_type
class DbInstanceInitParam(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        """
        :param str param: The name of parameter.
        :param str value: The value of parameter.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DbInstanceResourceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DbInstanceResourceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DbInstanceResourceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DbInstanceResourceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: The key of tag.
        :param str tag_value: The value of tag.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        The key of tag.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        The value of tag.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class DbParametersParams(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        """
        :param str param: The name of parameter.
        :param str value: The value of parameter.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HourdbInstanceResourceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HourdbInstanceResourceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HourdbInstanceResourceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HourdbInstanceResourceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetAccountsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 delay_thresh: int,
                 description: str,
                 host: str,
                 read_only: int,
                 slave_const: int,
                 update_time: str,
                 user_name: str):
        """
        :param str create_time: Creation time.
        :param int delay_thresh: If the standby machine delay exceeds the setting value of this parameter, the system will consider that the standby machine is faulty and recommend that the parameter value be greater than 10. This parameter takes effect when ReadOnly selects 1 and 2.
        :param str description: User remarks info.
        :param str host: From which host the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
        :param int read_only: Read-only flag, 0: No, 1: The SQL request of this account is preferentially executed on the standby machine, and the host is selected for execution when the standby machine is unavailable. 2: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
        :param int slave_const: For read-only accounts, set the policy whether to fix the standby machine, 0: not fix the standby machine, that is, the standby machine will not disconnect from the client if it does not meet the conditions, the Proxy selects other available standby machines, 1: the standby machine will be disconnected if the conditions are not met, Make sure a connection is secured to the standby machine.
        :param str update_time: Last update time.
        :param str user_name: User Name.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delay_thresh", delay_thresh)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "slave_const", slave_const)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="delayThresh")
    def delay_thresh(self) -> int:
        """
        If the standby machine delay exceeds the setting value of this parameter, the system will consider that the standby machine is faulty and recommend that the parameter value be greater than 10. This parameter takes effect when ReadOnly selects 1 and 2.
        """
        return pulumi.get(self, "delay_thresh")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User remarks info.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        From which host the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> int:
        """
        Read-only flag, 0: No, 1: The SQL request of this account is preferentially executed on the standby machine, and the host is selected for execution when the standby machine is unavailable. 2: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="slaveConst")
    def slave_const(self) -> int:
        """
        For read-only accounts, set the policy whether to fix the standby machine, 0: not fix the standby machine, that is, the standby machine will not disconnect from the client if it does not meet the conditions, the Proxy selects other available standby machines, 1: the standby machine will be disconnected if the conditions are not met, Make sure a connection is secured to the standby machine.
        """
        return pulumi.get(self, "slave_const")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Last update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        User Name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseObjectsFuncResult(dict):
    def __init__(__self__, *,
                 func: str):
        """
        :param str func: The name of function.
        """
        pulumi.set(__self__, "func", func)

    @property
    @pulumi.getter
    def func(self) -> str:
        """
        The name of function.
        """
        return pulumi.get(self, "func")


@pulumi.output_type
class GetDatabaseObjectsProcResult(dict):
    def __init__(__self__, *,
                 proc: str):
        """
        :param str proc: The name of procedure.
        """
        pulumi.set(__self__, "proc", proc)

    @property
    @pulumi.getter
    def proc(self) -> str:
        """
        The name of procedure.
        """
        return pulumi.get(self, "proc")


@pulumi.output_type
class GetDatabaseObjectsTableResult(dict):
    def __init__(__self__, *,
                 table: str):
        """
        :param str table: The name of table.
        """
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        The name of table.
        """
        return pulumi.get(self, "table")


@pulumi.output_type
class GetDatabaseObjectsViewResult(dict):
    def __init__(__self__, *,
                 view: str):
        """
        :param str view: The name of view.
        """
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def view(self) -> str:
        """
        The name of view.
        """
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDatabaseTablesColResult(dict):
    def __init__(__self__, *,
                 col: str,
                 type: str):
        """
        :param str col: The name of column.
        :param str type: Column type.
        """
        pulumi.set(__self__, "col", col)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def col(self) -> str:
        """
        The name of column.
        """
        return pulumi.get(self, "col")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabasesListResult(dict):
    def __init__(__self__, *,
                 db_name: str):
        """
        :param str db_name: Database Name.
        """
        pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Database Name.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetInstanceNodeInfoNodesInfoResult(dict):
    def __init__(__self__, *,
                 node_id: str,
                 role: str,
                 shard_id: str):
        """
        :param str node_id: Node ID.
        :param str role: Node role. Valid values: `master`, `slave`.
        :param str shard_id: Instance shard ID.
        """
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "shard_id", shard_id)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Node role. Valid values: `master`, `slave`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="shardId")
    def shard_id(self) -> str:
        """
        Instance shard ID.
        """
        return pulumi.get(self, "shard_id")


@pulumi.output_type
class GetInstancesListResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 auto_renew_flag: int,
                 create_time: str,
                 db_engine: str,
                 db_version: str,
                 instance_id: str,
                 instance_name: str,
                 instance_type: int,
                 is_audit_supported: int,
                 is_tmp: int,
                 isolated_timestamp: str,
                 memory: int,
                 node_count: int,
                 paymode: str,
                 period_end_time: str,
                 project_id: int,
                 region: str,
                 resource_tags: Sequence['outputs.GetInstancesListResourceTagResult'],
                 shard_count: int,
                 shard_details: Sequence['outputs.GetInstancesListShardDetailResult'],
                 status: int,
                 status_desc: str,
                 storage: int,
                 subnet_id: int,
                 uin: str,
                 update_time: str,
                 vip: str,
                 vpc_id: int,
                 vport: int,
                 wan_domain: str,
                 wan_port: int,
                 wan_status: int,
                 wan_vip: str):
        """
        :param int app_id: app id.
        :param int auto_renew_flag: auto renew flag.
        :param str create_time: create time.
        :param str db_engine: db engine.
        :param str db_version: db engine version.
        :param str instance_id: instance id.
        :param str instance_name: instance name.
        :param int instance_type: instance type.
        :param int is_audit_supported: aduit support, 0:support, 1:unsupport.
        :param int is_tmp: tmp instance mark.
        :param str isolated_timestamp: isolated time.
        :param int memory: memory.
        :param int node_count: node count.
        :param str paymode: pay mode.
        :param str period_end_time: expired time.
        :param int project_id: project id.
        :param str region: region.
        :param Sequence['GetInstancesListResourceTagArgs'] resource_tags: resource tags.
        :param int shard_count: shard count.
        :param Sequence['GetInstancesListShardDetailArgs'] shard_details: shard detail.
        :param int status: status.
        :param str status_desc: status description.
        :param int storage: memory, the unit is GB.
        :param int subnet_id: subnet id, valid when IsFilterVpc is true.
        :param str uin: account uin.
        :param str update_time: update time.
        :param str vip: vip.
        :param int vpc_id: vpc id, valid when IsFilterVpc is true.
        :param int vport: vport.
        :param str wan_domain: wan domain.
        :param int wan_port: wan port.
        :param int wan_status: wan status, 0:nonactivated, 1:activated, 2:closed, 3:activating.
        :param str wan_vip: wan vip.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "db_engine", db_engine)
        pulumi.set(__self__, "db_version", db_version)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "is_audit_supported", is_audit_supported)
        pulumi.set(__self__, "is_tmp", is_tmp)
        pulumi.set(__self__, "isolated_timestamp", isolated_timestamp)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "paymode", paymode)
        pulumi.set(__self__, "period_end_time", period_end_time)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_tags", resource_tags)
        pulumi.set(__self__, "shard_count", shard_count)
        pulumi.set(__self__, "shard_details", shard_details)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "uin", uin)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)
        pulumi.set(__self__, "wan_domain", wan_domain)
        pulumi.set(__self__, "wan_port", wan_port)
        pulumi.set(__self__, "wan_status", wan_status)
        pulumi.set(__self__, "wan_vip", wan_vip)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        """
        app id.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        auto renew flag.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> str:
        """
        db engine.
        """
        return pulumi.get(self, "db_engine")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> str:
        """
        db engine version.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> int:
        """
        instance type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="isAuditSupported")
    def is_audit_supported(self) -> int:
        """
        aduit support, 0:support, 1:unsupport.
        """
        return pulumi.get(self, "is_audit_supported")

    @property
    @pulumi.getter(name="isTmp")
    def is_tmp(self) -> int:
        """
        tmp instance mark.
        """
        return pulumi.get(self, "is_tmp")

    @property
    @pulumi.getter(name="isolatedTimestamp")
    def isolated_timestamp(self) -> str:
        """
        isolated time.
        """
        return pulumi.get(self, "isolated_timestamp")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        memory.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        node count.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def paymode(self) -> str:
        """
        pay mode.
        """
        return pulumi.get(self, "paymode")

    @property
    @pulumi.getter(name="periodEndTime")
    def period_end_time(self) -> str:
        """
        expired time.
        """
        return pulumi.get(self, "period_end_time")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Sequence['outputs.GetInstancesListResourceTagResult']:
        """
        resource tags.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> int:
        """
        shard count.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="shardDetails")
    def shard_details(self) -> Sequence['outputs.GetInstancesListShardDetailResult']:
        """
        shard detail.
        """
        return pulumi.get(self, "shard_details")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        """
        status description.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        memory, the unit is GB.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> int:
        """
        subnet id, valid when IsFilterVpc is true.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def uin(self) -> str:
        """
        account uin.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        vip.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> int:
        """
        vpc id, valid when IsFilterVpc is true.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        """
        vport.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter(name="wanDomain")
    def wan_domain(self) -> str:
        """
        wan domain.
        """
        return pulumi.get(self, "wan_domain")

    @property
    @pulumi.getter(name="wanPort")
    def wan_port(self) -> int:
        """
        wan port.
        """
        return pulumi.get(self, "wan_port")

    @property
    @pulumi.getter(name="wanStatus")
    def wan_status(self) -> int:
        """
        wan status, 0:nonactivated, 1:activated, 2:closed, 3:activating.
        """
        return pulumi.get(self, "wan_status")

    @property
    @pulumi.getter(name="wanVip")
    def wan_vip(self) -> str:
        """
        wan vip.
        """
        return pulumi.get(self, "wan_vip")


@pulumi.output_type
class GetInstancesListResourceTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetInstancesListShardDetailResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 createtime: str,
                 memory: int,
                 node_count: int,
                 shard_id: int,
                 shard_instance_id: str,
                 shard_serial_id: str,
                 status: int,
                 storage: int):
        """
        :param int cpu: cpu cores.
        :param str createtime: shard create time.
        :param int memory: memory.
        :param int node_count: node count.
        :param int shard_id: shard id.
        :param str shard_instance_id: shard instance id.
        :param str shard_serial_id: shard serial id.
        :param int status: status.
        :param int storage: memory, the unit is GB.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "createtime", createtime)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "shard_id", shard_id)
        pulumi.set(__self__, "shard_instance_id", shard_instance_id)
        pulumi.set(__self__, "shard_serial_id", shard_serial_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def createtime(self) -> str:
        """
        shard create time.
        """
        return pulumi.get(self, "createtime")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        memory.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        node count.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="shardId")
    def shard_id(self) -> int:
        """
        shard id.
        """
        return pulumi.get(self, "shard_id")

    @property
    @pulumi.getter(name="shardInstanceId")
    def shard_instance_id(self) -> str:
        """
        shard instance id.
        """
        return pulumi.get(self, "shard_instance_id")

    @property
    @pulumi.getter(name="shardSerialId")
    def shard_serial_id(self) -> str:
        """
        shard serial id.
        """
        return pulumi.get(self, "shard_serial_id")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        memory, the unit is GB.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetLogFilesFileResult(dict):
    def __init__(__self__, *,
                 file_name: str,
                 length: int,
                 mtime: int,
                 uri: str):
        """
        :param str file_name: Filename.
        :param int length: File length.
        :param int mtime: Last modified time of log.
        :param str uri: Uniform resource identifier (URI) used during log download.
        """
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "mtime", mtime)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Filename.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        File length.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def mtime(self) -> int:
        """
        Last modified time of log.
        """
        return pulumi.get(self, "mtime")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Uniform resource identifier (URI) used during log download.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetOrdersDealResult(dict):
    def __init__(__self__, *,
                 count: int,
                 deal_name: str,
                 flow_id: int,
                 instance_ids: Sequence[str],
                 owner_uin: str,
                 pay_mode: int):
        """
        :param int count: Number of items.
        :param str deal_name: Order number.
        :param int flow_id: ID of the associated process, which can be used to query the process execution status.
        :param Sequence[str] instance_ids: The ID of the created instance, which is required only for the order that creates an instance.Note: This field may return null, indicating that no valid values can be obtained.
        :param str owner_uin: Account.
        :param int pay_mode: Payment mode. Valid values: 0 (postpaid), 1 (prepaid).
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "deal_name", deal_name)
        pulumi.set(__self__, "flow_id", flow_id)
        pulumi.set(__self__, "instance_ids", instance_ids)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "pay_mode", pay_mode)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Number of items.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dealName")
    def deal_name(self) -> str:
        """
        Order number.
        """
        return pulumi.get(self, "deal_name")

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> int:
        """
        ID of the associated process, which can be used to query the process execution status.
        """
        return pulumi.get(self, "flow_id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        """
        The ID of the created instance, which is required only for the order that creates an instance.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> str:
        """
        Account.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        """
        Payment mode. Valid values: 0 (postpaid), 1 (prepaid).
        """
        return pulumi.get(self, "pay_mode")


@pulumi.output_type
class GetParametersListResult(dict):
    def __init__(__self__, *,
                 constraints: Sequence['outputs.GetParametersListConstraintResult'],
                 default: str,
                 have_set_value: bool,
                 need_restart: bool,
                 param: str,
                 value: str):
        """
        :param Sequence['GetParametersListConstraintArgs'] constraints: params constraint.
        :param str default: default value.
        :param bool have_set_value: have set value.
        :param bool need_restart: need restart.
        :param str param: parameter name.
        :param str value: parameter value.
        """
        pulumi.set(__self__, "constraints", constraints)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "have_set_value", have_set_value)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def constraints(self) -> Sequence['outputs.GetParametersListConstraintResult']:
        """
        params constraint.
        """
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        default value.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="haveSetValue")
    def have_set_value(self) -> bool:
        """
        have set value.
        """
        return pulumi.get(self, "have_set_value")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> bool:
        """
        need restart.
        """
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        parameter name.
        """
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetParametersListConstraintResult(dict):
    def __init__(__self__, *,
                 enum: str,
                 ranges: Sequence['outputs.GetParametersListConstraintRangeResult'],
                 string: str,
                 type: str):
        """
        :param str enum: a list of optional values of type num.
        :param Sequence['GetParametersListConstraintRangeArgs'] ranges: range constraint.
        :param str string: constraint type is string.
        :param str type: type.
        """
        pulumi.set(__self__, "enum", enum)
        pulumi.set(__self__, "ranges", ranges)
        pulumi.set(__self__, "string", string)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def enum(self) -> str:
        """
        a list of optional values of type num.
        """
        return pulumi.get(self, "enum")

    @property
    @pulumi.getter
    def ranges(self) -> Sequence['outputs.GetParametersListConstraintRangeResult']:
        """
        range constraint.
        """
        return pulumi.get(self, "ranges")

    @property
    @pulumi.getter
    def string(self) -> str:
        """
        constraint type is string.
        """
        return pulumi.get(self, "string")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetParametersListConstraintRangeResult(dict):
    def __init__(__self__, *,
                 max: str,
                 min: str):
        """
        :param str max: max value.
        :param str min: min value.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def max(self) -> str:
        """
        max value.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        """
        min value.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class GetProjectSecurityGroupsGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult'],
                 outbounds: Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        """
        :param str create_time: Creation time in the format of yyyy-mm-dd hh:mm:ss.
        :param Sequence['GetProjectSecurityGroupsGroupInboundArgs'] inbounds: Inbound rule.
        :param Sequence['GetProjectSecurityGroupsGroupOutboundArgs'] outbounds: Outbound rule.
        :param int project_id: Project ID.
        :param str security_group_id: Security group ID.
        :param str security_group_name: Security group name.
        :param str security_group_remark: Security group remarks.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time in the format of yyyy-mm-dd hh:mm:ss.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult']:
        """
        Inbound rule.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult']:
        """
        Outbound rule.
        """
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        Security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        """
        Security group name.
        """
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        """
        Security group remarks.
        """
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetProjectSecurityGroupsGroupInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, which can be `ACCEPT` or `DROP`.
        :param str cidr_ip: Source IP or source IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocol. UDP and TCP are supported.
        :param str port_range: Port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, which can be `ACCEPT` or `DROP`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or source IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocol. UDP and TCP are supported.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Port.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProjectSecurityGroupsGroupOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, which can be `ACCEPT` or `DROP`.
        :param str cidr_ip: Source IP or source IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocol. UDP and TCP are supported.
        :param str port_range: Port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, which can be `ACCEPT` or `DROP`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or source IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocol. UDP and TCP are supported.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Port.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 create_time: str,
                 creator_uin: int,
                 info: str,
                 is_default: int,
                 name: str,
                 owner_uin: int,
                 project_id: int,
                 src_app_id: int,
                 src_plat: str,
                 status: int):
        """
        :param int app_id: Application ID.
        :param str create_time: Creation time.
        :param int creator_uin: Creator UIN.
        :param str info: Description.
        :param int is_default: Whether it is the default project. Valid values: `1` (yes), `0` (no).
        :param str name: Project name.
        :param int owner_uin: The UIN of the resource owner (root account).
        :param int project_id: Project ID.
        :param int src_app_id: Source APPID.
        :param str src_plat: Source platform.
        :param int status: Project status. Valid values: `0` (normal), `-1` (disabled), `3` (default project).
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "creator_uin", creator_uin)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "src_app_id", src_app_id)
        pulumi.set(__self__, "src_plat", src_plat)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        """
        Application ID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> int:
        """
        Creator UIN.
        """
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter
    def info(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        """
        Whether it is the default project. Valid values: `1` (yes), `0` (no).
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Project name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> int:
        """
        The UIN of the resource owner (root account).
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="srcAppId")
    def src_app_id(self) -> int:
        """
        Source APPID.
        """
        return pulumi.get(self, "src_app_id")

    @property
    @pulumi.getter(name="srcPlat")
    def src_plat(self) -> str:
        """
        Source platform.
        """
        return pulumi.get(self, "src_plat")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Project status. Valid values: `0` (normal), `-1` (disabled), `3` (default project).
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSaleInfoRegionListResult(dict):
    def __init__(__self__, *,
                 available_choices: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceResult'],
                 region: str,
                 region_id: int,
                 region_name: str,
                 zone_lists: Sequence['outputs.GetSaleInfoRegionListZoneListResult']):
        """
        :param Sequence['GetSaleInfoRegionListAvailableChoiceArgs'] available_choices: available zone choice.
        :param str region: region name(en).
        :param int region_id: region id.
        :param str region_name: region name(zh).
        :param Sequence['GetSaleInfoRegionListZoneListArgs'] zone_lists: list of az zone.
        """
        pulumi.set(__self__, "available_choices", available_choices)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "zone_lists", zone_lists)

    @property
    @pulumi.getter(name="availableChoices")
    def available_choices(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceResult']:
        """
        available zone choice.
        """
        return pulumi.get(self, "available_choices")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region name(en).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        region name(zh).
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="zoneLists")
    def zone_lists(self) -> Sequence['outputs.GetSaleInfoRegionListZoneListResult']:
        """
        list of az zone.
        """
        return pulumi.get(self, "zone_lists")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceResult(dict):
    def __init__(__self__, *,
                 master_zones: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceMasterZoneResult'],
                 slave_zones: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceSlaveZoneResult']):
        """
        :param Sequence['GetSaleInfoRegionListAvailableChoiceMasterZoneArgs'] master_zones: master zone.
        :param Sequence['GetSaleInfoRegionListAvailableChoiceSlaveZoneArgs'] slave_zones: slave zones.
        """
        pulumi.set(__self__, "master_zones", master_zones)
        pulumi.set(__self__, "slave_zones", slave_zones)

    @property
    @pulumi.getter(name="masterZones")
    def master_zones(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceMasterZoneResult']:
        """
        master zone.
        """
        return pulumi.get(self, "master_zones")

    @property
    @pulumi.getter(name="slaveZones")
    def slave_zones(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceSlaveZoneResult']:
        """
        slave zones.
        """
        return pulumi.get(self, "slave_zones")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceMasterZoneResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        """
        :param bool on_sale: is zone on sale.
        :param str zone: zone name(en).
        :param int zone_id: zone id.
        :param str zone_name: zone name(zh).
        """
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        """
        is zone on sale.
        """
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        zone name(en).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        zone name(zh).
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceSlaveZoneResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        """
        :param bool on_sale: is zone on sale.
        :param str zone: zone name(en).
        :param int zone_id: zone id.
        :param str zone_name: zone name(zh).
        """
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        """
        is zone on sale.
        """
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        zone name(en).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        zone name(zh).
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSaleInfoRegionListZoneListResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        """
        :param bool on_sale: is zone on sale.
        :param str zone: zone name(en).
        :param int zone_id: zone id.
        :param str zone_name: zone name(zh).
        """
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        """
        is zone on sale.
        """
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        zone name(en).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        zone name(zh).
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSecurityGroupsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetSecurityGroupsListInboundResult'],
                 outbounds: Sequence['outputs.GetSecurityGroupsListOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str):
        """
        :param str create_time: create time.
        :param Sequence['GetSecurityGroupsListInboundArgs'] inbounds: inbound rules.
        :param Sequence['GetSecurityGroupsListOutboundArgs'] outbounds: outbound rules.
        :param int project_id: project id.
        :param str security_group_id: security group id.
        :param str security_group_name: security group name.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetSecurityGroupsListInboundResult']:
        """
        inbound rules.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetSecurityGroupsListOutboundResult']:
        """
        outbound rules.
        """
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        security group id.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        """
        security group name.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupsListInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: policy action.
        :param str cidr_ip: cidr ip.
        :param str ip_protocol: internet protocol.
        :param str port_range: port range.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        policy action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        cidr ip.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        internet protocol.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port range.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSecurityGroupsListOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: policy action.
        :param str cidr_ip: cidr ip.
        :param str ip_protocol: internet protocol.
        :param str port_range: port range.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        policy action.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        cidr ip.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        internet protocol.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port range.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetShardSpecSpecConfigResult(dict):
    def __init__(__self__, *,
                 machine: str,
                 spec_config_infos: Sequence['outputs.GetShardSpecSpecConfigSpecConfigInfoResult']):
        """
        :param str machine: machine type.
        :param Sequence['GetShardSpecSpecConfigSpecConfigInfoArgs'] spec_config_infos: list of machine specifications.
        """
        pulumi.set(__self__, "machine", machine)
        pulumi.set(__self__, "spec_config_infos", spec_config_infos)

    @property
    @pulumi.getter
    def machine(self) -> str:
        """
        machine type.
        """
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter(name="specConfigInfos")
    def spec_config_infos(self) -> Sequence['outputs.GetShardSpecSpecConfigSpecConfigInfoResult']:
        """
        list of machine specifications.
        """
        return pulumi.get(self, "spec_config_infos")


@pulumi.output_type
class GetShardSpecSpecConfigSpecConfigInfoResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 max_storage: int,
                 memory: int,
                 min_storage: int,
                 node_count: int,
                 pid: int,
                 qps: int,
                 suit_info: str):
        """
        :param int cpu: CPU cores.
        :param int max_storage: maximum storage size, inGB.
        :param int memory: memory, in GB.
        :param int min_storage: minimum storage size, in GB.
        :param int node_count: node count.
        :param int pid: product price id.
        :param int qps: maximum QPS.
        :param str suit_info: recommended usage scenarios.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_storage", min_storage)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "pid", pid)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "suit_info", suit_info)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        """
        maximum storage size, inGB.
        """
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        memory, in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minStorage")
    def min_storage(self) -> int:
        """
        minimum storage size, in GB.
        """
        return pulumi.get(self, "min_storage")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        node count.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def pid(self) -> int:
        """
        product price id.
        """
        return pulumi.get(self, "pid")

    @property
    @pulumi.getter
    def qps(self) -> int:
        """
        maximum QPS.
        """
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="suitInfo")
    def suit_info(self) -> str:
        """
        recommended usage scenarios.
        """
        return pulumi.get(self, "suit_info")


@pulumi.output_type
class GetShardsListResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 create_time: str,
                 instance_id: str,
                 memory: int,
                 memory_usage: int,
                 node_count: int,
                 paymode: str,
                 period_end_time: str,
                 project_id: int,
                 proxy_version: str,
                 range: str,
                 region: str,
                 shard_instance_id: str,
                 shard_master_zone: str,
                 shard_serial_id: str,
                 shard_slave_zones: Sequence[str],
                 status: int,
                 status_desc: str,
                 storage: int,
                 storage_usage: int,
                 subnet_id: str,
                 vpc_id: str,
                 zone: str):
        """
        :param int cpu: cpu cores.
        :param str create_time: create time.
        :param str instance_id: instance id.
        :param int memory: memory, the unit is GB.
        :param int memory_usage: memory usage.
        :param int node_count: node count.
        :param str paymode: pay mode.
        :param str period_end_time: expired time.
        :param int project_id: project id.
        :param str proxy_version: proxy version.
        :param str range: the range of shard key.
        :param str region: region.
        :param str shard_instance_id: shard instance id.
        :param str shard_master_zone: shard master zone.
        :param str shard_serial_id: shard serial id.
        :param Sequence[str] shard_slave_zones: shard slave zones.
        :param int status: status.
        :param str status_desc: status description.
        :param int storage: memory, the unit is GB.
        :param int storage_usage: storage usage.
        :param str subnet_id: subnet id.
        :param str vpc_id: vpc id.
        :param str zone: zone.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "memory_usage", memory_usage)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "paymode", paymode)
        pulumi.set(__self__, "period_end_time", period_end_time)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "proxy_version", proxy_version)
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "shard_instance_id", shard_instance_id)
        pulumi.set(__self__, "shard_master_zone", shard_master_zone)
        pulumi.set(__self__, "shard_serial_id", shard_serial_id)
        pulumi.set(__self__, "shard_slave_zones", shard_slave_zones)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_usage", storage_usage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        memory, the unit is GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="memoryUsage")
    def memory_usage(self) -> int:
        """
        memory usage.
        """
        return pulumi.get(self, "memory_usage")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        node count.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def paymode(self) -> str:
        """
        pay mode.
        """
        return pulumi.get(self, "paymode")

    @property
    @pulumi.getter(name="periodEndTime")
    def period_end_time(self) -> str:
        """
        expired time.
        """
        return pulumi.get(self, "period_end_time")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="proxyVersion")
    def proxy_version(self) -> str:
        """
        proxy version.
        """
        return pulumi.get(self, "proxy_version")

    @property
    @pulumi.getter
    def range(self) -> str:
        """
        the range of shard key.
        """
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="shardInstanceId")
    def shard_instance_id(self) -> str:
        """
        shard instance id.
        """
        return pulumi.get(self, "shard_instance_id")

    @property
    @pulumi.getter(name="shardMasterZone")
    def shard_master_zone(self) -> str:
        """
        shard master zone.
        """
        return pulumi.get(self, "shard_master_zone")

    @property
    @pulumi.getter(name="shardSerialId")
    def shard_serial_id(self) -> str:
        """
        shard serial id.
        """
        return pulumi.get(self, "shard_serial_id")

    @property
    @pulumi.getter(name="shardSlaveZones")
    def shard_slave_zones(self) -> Sequence[str]:
        """
        shard slave zones.
        """
        return pulumi.get(self, "shard_slave_zones")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        """
        status description.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        memory, the unit is GB.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageUsage")
    def storage_usage(self) -> int:
        """
        storage usage.
        """
        return pulumi.get(self, "storage_usage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetSlowLogsDataResult(dict):
    def __init__(__self__, *,
                 check_sum: str,
                 db: str,
                 example_sql: str,
                 finger_print: str,
                 host: str,
                 lock_time_avg: str,
                 lock_time_max: str,
                 lock_time_min: str,
                 lock_time_sum: str,
                 query_count: str,
                 query_time_avg: str,
                 query_time_max: str,
                 query_time_min: str,
                 query_time_sum: str,
                 rows_examined_sum: str,
                 rows_sent_sum: str,
                 ts_max: str,
                 ts_min: str,
                 user: str):
        """
        :param str check_sum: Statement checksum for querying details.
        :param str db: Specific name of the database to be queried.
        :param str example_sql: Sample SQLNote: This field may return null, indicating that no valid values can be obtained.
        :param str finger_print: Abstracted SQL statement.
        :param str host: Host address of account.
        :param str lock_time_avg: Average lock time.
        :param str lock_time_max: Maximum lock time.
        :param str lock_time_min: Minimum lock time.
        :param str lock_time_sum: Total statement lock time.
        :param str query_count: Total number of statement queries.
        :param str query_time_avg: Average query time.
        :param str query_time_max: Maximum query time.
        :param str query_time_min: Minimum query time.
        :param str query_time_sum: Total statement query time.
        :param str rows_examined_sum: Number of scanned rows.
        :param str rows_sent_sum: Number of sent rows.
        :param str ts_max: Last execution time.
        :param str ts_min: First execution time.
        :param str user: Account.
        """
        pulumi.set(__self__, "check_sum", check_sum)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "example_sql", example_sql)
        pulumi.set(__self__, "finger_print", finger_print)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "lock_time_avg", lock_time_avg)
        pulumi.set(__self__, "lock_time_max", lock_time_max)
        pulumi.set(__self__, "lock_time_min", lock_time_min)
        pulumi.set(__self__, "lock_time_sum", lock_time_sum)
        pulumi.set(__self__, "query_count", query_count)
        pulumi.set(__self__, "query_time_avg", query_time_avg)
        pulumi.set(__self__, "query_time_max", query_time_max)
        pulumi.set(__self__, "query_time_min", query_time_min)
        pulumi.set(__self__, "query_time_sum", query_time_sum)
        pulumi.set(__self__, "rows_examined_sum", rows_examined_sum)
        pulumi.set(__self__, "rows_sent_sum", rows_sent_sum)
        pulumi.set(__self__, "ts_max", ts_max)
        pulumi.set(__self__, "ts_min", ts_min)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="checkSum")
    def check_sum(self) -> str:
        """
        Statement checksum for querying details.
        """
        return pulumi.get(self, "check_sum")

    @property
    @pulumi.getter
    def db(self) -> str:
        """
        Specific name of the database to be queried.
        """
        return pulumi.get(self, "db")

    @property
    @pulumi.getter(name="exampleSql")
    def example_sql(self) -> str:
        """
        Sample SQLNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "example_sql")

    @property
    @pulumi.getter(name="fingerPrint")
    def finger_print(self) -> str:
        """
        Abstracted SQL statement.
        """
        return pulumi.get(self, "finger_print")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host address of account.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="lockTimeAvg")
    def lock_time_avg(self) -> str:
        """
        Average lock time.
        """
        return pulumi.get(self, "lock_time_avg")

    @property
    @pulumi.getter(name="lockTimeMax")
    def lock_time_max(self) -> str:
        """
        Maximum lock time.
        """
        return pulumi.get(self, "lock_time_max")

    @property
    @pulumi.getter(name="lockTimeMin")
    def lock_time_min(self) -> str:
        """
        Minimum lock time.
        """
        return pulumi.get(self, "lock_time_min")

    @property
    @pulumi.getter(name="lockTimeSum")
    def lock_time_sum(self) -> str:
        """
        Total statement lock time.
        """
        return pulumi.get(self, "lock_time_sum")

    @property
    @pulumi.getter(name="queryCount")
    def query_count(self) -> str:
        """
        Total number of statement queries.
        """
        return pulumi.get(self, "query_count")

    @property
    @pulumi.getter(name="queryTimeAvg")
    def query_time_avg(self) -> str:
        """
        Average query time.
        """
        return pulumi.get(self, "query_time_avg")

    @property
    @pulumi.getter(name="queryTimeMax")
    def query_time_max(self) -> str:
        """
        Maximum query time.
        """
        return pulumi.get(self, "query_time_max")

    @property
    @pulumi.getter(name="queryTimeMin")
    def query_time_min(self) -> str:
        """
        Minimum query time.
        """
        return pulumi.get(self, "query_time_min")

    @property
    @pulumi.getter(name="queryTimeSum")
    def query_time_sum(self) -> str:
        """
        Total statement query time.
        """
        return pulumi.get(self, "query_time_sum")

    @property
    @pulumi.getter(name="rowsExaminedSum")
    def rows_examined_sum(self) -> str:
        """
        Number of scanned rows.
        """
        return pulumi.get(self, "rows_examined_sum")

    @property
    @pulumi.getter(name="rowsSentSum")
    def rows_sent_sum(self) -> str:
        """
        Number of sent rows.
        """
        return pulumi.get(self, "rows_sent_sum")

    @property
    @pulumi.getter(name="tsMax")
    def ts_max(self) -> str:
        """
        Last execution time.
        """
        return pulumi.get(self, "ts_max")

    @property
    @pulumi.getter(name="tsMin")
    def ts_min(self) -> str:
        """
        First execution time.
        """
        return pulumi.get(self, "ts_min")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Account.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class GetUpgradePriceAddShardConfigResult(dict):
    def __init__(__self__, *,
                 shard_count: int,
                 shard_memory: int,
                 shard_storage: int):
        """
        :param int shard_count: The number of new shards.
        :param int shard_memory: Shard memory size in GB.
        :param int shard_storage: Shard storage capacity in GB.
        """
        pulumi.set(__self__, "shard_count", shard_count)
        pulumi.set(__self__, "shard_memory", shard_memory)
        pulumi.set(__self__, "shard_storage", shard_storage)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> int:
        """
        The number of new shards.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> int:
        """
        Shard memory size in GB.
        """
        return pulumi.get(self, "shard_memory")

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> int:
        """
        Shard storage capacity in GB.
        """
        return pulumi.get(self, "shard_storage")


@pulumi.output_type
class GetUpgradePriceExpandShardConfigResult(dict):
    def __init__(__self__, *,
                 shard_instance_ids: Sequence[str],
                 shard_memory: int,
                 shard_storage: int,
                 shard_node_count: Optional[int] = None):
        """
        :param Sequence[str] shard_instance_ids: List of shard ID.
        :param int shard_memory: Shard memory size in GB.
        :param int shard_storage: Shard storage capacity in GB.
        :param int shard_node_count: Shard node count.
        """
        pulumi.set(__self__, "shard_instance_ids", shard_instance_ids)
        pulumi.set(__self__, "shard_memory", shard_memory)
        pulumi.set(__self__, "shard_storage", shard_storage)
        if shard_node_count is not None:
            pulumi.set(__self__, "shard_node_count", shard_node_count)

    @property
    @pulumi.getter(name="shardInstanceIds")
    def shard_instance_ids(self) -> Sequence[str]:
        """
        List of shard ID.
        """
        return pulumi.get(self, "shard_instance_ids")

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> int:
        """
        Shard memory size in GB.
        """
        return pulumi.get(self, "shard_memory")

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> int:
        """
        Shard storage capacity in GB.
        """
        return pulumi.get(self, "shard_storage")

    @property
    @pulumi.getter(name="shardNodeCount")
    def shard_node_count(self) -> Optional[int]:
        """
        Shard node count.
        """
        return pulumi.get(self, "shard_node_count")


@pulumi.output_type
class GetUpgradePriceSplitShardConfigResult(dict):
    def __init__(__self__, *,
                 shard_instance_ids: Sequence[str],
                 shard_memory: int,
                 shard_storage: int,
                 split_rate: int):
        """
        :param Sequence[str] shard_instance_ids: List of shard ID.
        :param int shard_memory: Shard memory size in GB.
        :param int shard_storage: Shard storage capacity in GB.
        :param int split_rate: Data split ratio, fixed at 50%.
        """
        pulumi.set(__self__, "shard_instance_ids", shard_instance_ids)
        pulumi.set(__self__, "shard_memory", shard_memory)
        pulumi.set(__self__, "shard_storage", shard_storage)
        pulumi.set(__self__, "split_rate", split_rate)

    @property
    @pulumi.getter(name="shardInstanceIds")
    def shard_instance_ids(self) -> Sequence[str]:
        """
        List of shard ID.
        """
        return pulumi.get(self, "shard_instance_ids")

    @property
    @pulumi.getter(name="shardMemory")
    def shard_memory(self) -> int:
        """
        Shard memory size in GB.
        """
        return pulumi.get(self, "shard_memory")

    @property
    @pulumi.getter(name="shardStorage")
    def shard_storage(self) -> int:
        """
        Shard storage capacity in GB.
        """
        return pulumi.get(self, "shard_storage")

    @property
    @pulumi.getter(name="splitRate")
    def split_rate(self) -> int:
        """
        Data split ratio, fixed at 50%.
        """
        return pulumi.get(self, "split_rate")


