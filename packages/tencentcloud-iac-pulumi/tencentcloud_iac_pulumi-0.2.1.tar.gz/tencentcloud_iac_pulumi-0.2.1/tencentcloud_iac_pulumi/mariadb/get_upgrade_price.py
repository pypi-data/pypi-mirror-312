# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetUpgradePriceResult',
    'AwaitableGetUpgradePriceResult',
    'get_upgrade_price',
    'get_upgrade_price_output',
]

@pulumi.output_type
class GetUpgradePriceResult:
    """
    A collection of values returned by getUpgradePrice.
    """
    def __init__(__self__, amount_unit=None, formula=None, id=None, instance_id=None, memory=None, node_count=None, original_price=None, price=None, result_output_file=None, storage=None):
        if amount_unit and not isinstance(amount_unit, str):
            raise TypeError("Expected argument 'amount_unit' to be a str")
        pulumi.set(__self__, "amount_unit", amount_unit)
        if formula and not isinstance(formula, str):
            raise TypeError("Expected argument 'formula' to be a str")
        pulumi.set(__self__, "formula", formula)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if memory and not isinstance(memory, int):
            raise TypeError("Expected argument 'memory' to be a int")
        pulumi.set(__self__, "memory", memory)
        if node_count and not isinstance(node_count, int):
            raise TypeError("Expected argument 'node_count' to be a int")
        pulumi.set(__self__, "node_count", node_count)
        if original_price and not isinstance(original_price, int):
            raise TypeError("Expected argument 'original_price' to be a int")
        pulumi.set(__self__, "original_price", original_price)
        if price and not isinstance(price, int):
            raise TypeError("Expected argument 'price' to be a int")
        pulumi.set(__self__, "price", price)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if storage and not isinstance(storage, int):
            raise TypeError("Expected argument 'storage' to be a int")
        pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="amountUnit")
    def amount_unit(self) -> Optional[str]:
        return pulumi.get(self, "amount_unit")

    @property
    @pulumi.getter
    def formula(self) -> str:
        """
        Price calculation formula.
        """
        return pulumi.get(self, "formula")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def memory(self) -> int:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[int]:
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="originalPrice")
    def original_price(self) -> int:
        """
        Original price * Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. * Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "original_price")

    @property
    @pulumi.getter
    def price(self) -> int:
        """
        The actual price may be different from the original price due to discounts. * Unit: Cent (default). If the request parameter contains `AmountUnit`, see `AmountUnit` description. * Currency: CNY (Chinese site), USD (international site).
        """
        return pulumi.get(self, "price")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def storage(self) -> int:
        return pulumi.get(self, "storage")


class AwaitableGetUpgradePriceResult(GetUpgradePriceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUpgradePriceResult(
            amount_unit=self.amount_unit,
            formula=self.formula,
            id=self.id,
            instance_id=self.instance_id,
            memory=self.memory,
            node_count=self.node_count,
            original_price=self.original_price,
            price=self.price,
            result_output_file=self.result_output_file,
            storage=self.storage)


def get_upgrade_price(amount_unit: Optional[str] = None,
                      instance_id: Optional[str] = None,
                      memory: Optional[int] = None,
                      node_count: Optional[int] = None,
                      result_output_file: Optional[str] = None,
                      storage: Optional[int] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUpgradePriceResult:
    """
    Use this data source to query detailed information of mariadb upgrade_price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    upgrade_price = tencentcloud.Mariadb.get_upgrade_price(instance_id="tdsql-9vqvls95",
        memory=4,
        node_count=2,
        storage=40)
    ```
    <!--End PulumiCodeChooser -->


    :param str amount_unit: Price unit. Valid values: `* pent` (cent), `* microPent` (microcent).
    :param str instance_id: Instance ID.
    :param int memory: Memory size in GB, which can be obtained by querying the instance specification through the `DescribeDBInstanceSpecs` API.
    :param int node_count: New instance nodes, zero means not change.
    :param str result_output_file: Used to save results.
    :param int storage: Storage capacity in GB. The maximum and minimum storage space can be obtained by querying instance specification through the `DescribeDBInstanceSpecs` API.
    """
    __args__ = dict()
    __args__['amountUnit'] = amount_unit
    __args__['instanceId'] = instance_id
    __args__['memory'] = memory
    __args__['nodeCount'] = node_count
    __args__['resultOutputFile'] = result_output_file
    __args__['storage'] = storage
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mariadb/getUpgradePrice:getUpgradePrice', __args__, opts=opts, typ=GetUpgradePriceResult).value

    return AwaitableGetUpgradePriceResult(
        amount_unit=pulumi.get(__ret__, 'amount_unit'),
        formula=pulumi.get(__ret__, 'formula'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        memory=pulumi.get(__ret__, 'memory'),
        node_count=pulumi.get(__ret__, 'node_count'),
        original_price=pulumi.get(__ret__, 'original_price'),
        price=pulumi.get(__ret__, 'price'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        storage=pulumi.get(__ret__, 'storage'))


@_utilities.lift_output_func(get_upgrade_price)
def get_upgrade_price_output(amount_unit: Optional[pulumi.Input[Optional[str]]] = None,
                             instance_id: Optional[pulumi.Input[str]] = None,
                             memory: Optional[pulumi.Input[int]] = None,
                             node_count: Optional[pulumi.Input[Optional[int]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             storage: Optional[pulumi.Input[int]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUpgradePriceResult]:
    """
    Use this data source to query detailed information of mariadb upgrade_price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    upgrade_price = tencentcloud.Mariadb.get_upgrade_price(instance_id="tdsql-9vqvls95",
        memory=4,
        node_count=2,
        storage=40)
    ```
    <!--End PulumiCodeChooser -->


    :param str amount_unit: Price unit. Valid values: `* pent` (cent), `* microPent` (microcent).
    :param str instance_id: Instance ID.
    :param int memory: Memory size in GB, which can be obtained by querying the instance specification through the `DescribeDBInstanceSpecs` API.
    :param int node_count: New instance nodes, zero means not change.
    :param str result_output_file: Used to save results.
    :param int storage: Storage capacity in GB. The maximum and minimum storage space can be obtained by querying instance specification through the `DescribeDBInstanceSpecs` API.
    """
    ...
