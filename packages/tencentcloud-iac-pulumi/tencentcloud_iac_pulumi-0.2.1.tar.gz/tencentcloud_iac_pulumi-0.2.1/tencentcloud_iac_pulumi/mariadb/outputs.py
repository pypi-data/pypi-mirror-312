# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AccountPrivilegesAccounts',
    'AccountPrivilegesColumnPrivilege',
    'AccountPrivilegesDatabasePrivilege',
    'AccountPrivilegesFunctionPrivilege',
    'AccountPrivilegesProcedurePrivilege',
    'AccountPrivilegesTablePrivilege',
    'AccountPrivilegesViewPrivilege',
    'InstanceInitParam',
    'ParametersParam',
    'GetAccountsListResult',
    'GetDatabaseObjectsFuncResult',
    'GetDatabaseObjectsProcResult',
    'GetDatabaseObjectsTableResult',
    'GetDatabaseObjectsViewResult',
    'GetDatabaseTableColResult',
    'GetDatabasesDatabaseResult',
    'GetDbInstancesInstanceResult',
    'GetDbInstancesInstanceResourceTagResult',
    'GetDcnDetailDcnDetailResult',
    'GetDcnDetailDcnDetailReplicaConfigResult',
    'GetDcnDetailDcnDetailReplicaStatusResult',
    'GetInstanceNodeInfoNodesInfoResult',
    'GetInstanceSpecsSpecResult',
    'GetInstanceSpecsSpecSpecInfoResult',
    'GetLogFilesFileResult',
    'GetOrdersDealResult',
    'GetProjectSecurityGroupsGroupResult',
    'GetProjectSecurityGroupsGroupInboundResult',
    'GetProjectSecurityGroupsGroupOutboundResult',
    'GetSaleInfoRegionListResult',
    'GetSaleInfoRegionListAvailableChoiceResult',
    'GetSaleInfoRegionListAvailableChoiceMasterZoneResult',
    'GetSaleInfoRegionListAvailableChoiceSlaveZoneResult',
    'GetSaleInfoRegionListZoneListResult',
    'GetSecurityGroupsListResult',
    'GetSecurityGroupsListInboundResult',
    'GetSecurityGroupsListOutboundResult',
    'GetSlowLogsDataResult',
]

@pulumi.output_type
class AccountPrivilegesAccounts(dict):
    def __init__(__self__, *,
                 host: str,
                 user: str):
        """
        :param str host: user host.
        :param str user: user name.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        user host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        user name.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class AccountPrivilegesColumnPrivilege(dict):
    def __init__(__self__, *,
                 column: str,
                 database: str,
                 privileges: Sequence[str],
                 table: str):
        """
        :param str column: Column name.
        :param str database: Database name.
        :param Sequence[str] privileges: Permission information.
        :param str table: Table name.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def column(self) -> str:
        """
        Column name.
        """
        return pulumi.get(self, "column")

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        Table name.
        """
        return pulumi.get(self, "table")


@pulumi.output_type
class AccountPrivilegesDatabasePrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str]):
        """
        :param str database: Database name.
        :param Sequence[str] privileges: Permission information.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")


@pulumi.output_type
class AccountPrivilegesFunctionPrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionName":
            suggest = "function_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccountPrivilegesFunctionPrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccountPrivilegesFunctionPrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccountPrivilegesFunctionPrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 function_name: str,
                 privileges: Sequence[str]):
        """
        :param str database: Database name.
        :param str function_name: Function name.
        :param Sequence[str] privileges: Permission information.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")


@pulumi.output_type
class AccountPrivilegesProcedurePrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 procedure: str):
        """
        :param str database: Database name.
        :param Sequence[str] privileges: Permission information.
        :param str procedure: Procedure name.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "procedure", procedure)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def procedure(self) -> str:
        """
        Procedure name.
        """
        return pulumi.get(self, "procedure")


@pulumi.output_type
class AccountPrivilegesTablePrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 table: str):
        """
        :param str database: Database name.
        :param Sequence[str] privileges: Permission information.
        :param str table: Table name.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        Table name.
        """
        return pulumi.get(self, "table")


@pulumi.output_type
class AccountPrivilegesViewPrivilege(dict):
    def __init__(__self__, *,
                 database: str,
                 privileges: Sequence[str],
                 view: str):
        """
        :param str database: Database name.
        :param Sequence[str] privileges: Permission information.
        :param str view: View name.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Permission information.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter
    def view(self) -> str:
        """
        View name.
        """
        return pulumi.get(self, "view")


@pulumi.output_type
class InstanceInitParam(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        """
        :param str param: parameter name.
        :param str value: parameter value.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        parameter name.
        """
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ParametersParam(dict):
    def __init__(__self__, *,
                 param: str,
                 value: str):
        """
        :param str param: parameter name.
        :param str value: parameter value.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def param(self) -> str:
        """
        parameter name.
        """
        return pulumi.get(self, "param")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAccountsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 delay_thresh: int,
                 description: str,
                 host: str,
                 read_only: int,
                 slave_const: int,
                 update_time: str,
                 user_name: str):
        """
        :param str create_time: creation time.
        :param int delay_thresh: This field is meaningful for read-only accounts, indicating that the standby machine with the active-standby delay less than this value is selected.
        :param str description: User remarks.
        :param str host: The host from which the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, and the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
        :param int read_only: Read-only flag, `0`: No, `1`: The SQL request of this account is preferentially executed on the standby machine, and the host machine is selected for execution when the standby machine is unavailable, `2`: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
        :param int slave_const: For read-only accounts, set whether the policy is to fix the standby machine, `0`: The standby machine is not fixed, that is, the standby machine does not meet the conditions and will not disconnect from the client, and the Proxy selects other available standby machines, `1`: The standby machine does not meet the conditions Disconnect, make sure one connection secures the standby.
        :param str update_time: Update time.
        :param str user_name: username.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "delay_thresh", delay_thresh)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "slave_const", slave_const)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="delayThresh")
    def delay_thresh(self) -> int:
        """
        This field is meaningful for read-only accounts, indicating that the standby machine with the active-standby delay less than this value is selected.
        """
        return pulumi.get(self, "delay_thresh")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        User remarks.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The host from which the user can log in (corresponding to the host field of MySQL users, UserName + Host uniquely identifies a user, in the form of IP, and the IP segment ends with %; supports filling in %; if it is empty, it defaults to %).
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> int:
        """
        Read-only flag, `0`: No, `1`: The SQL request of this account is preferentially executed on the standby machine, and the host machine is selected for execution when the standby machine is unavailable, `2`: The standby machine is preferentially selected for execution, and the operation fails when the standby machine is unavailable.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="slaveConst")
    def slave_const(self) -> int:
        """
        For read-only accounts, set whether the policy is to fix the standby machine, `0`: The standby machine is not fixed, that is, the standby machine does not meet the conditions and will not disconnect from the client, and the Proxy selects other available standby machines, `1`: The standby machine does not meet the conditions Disconnect, make sure one connection secures the standby.
        """
        return pulumi.get(self, "slave_const")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        username.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetDatabaseObjectsFuncResult(dict):
    def __init__(__self__, *,
                 func: str):
        """
        :param str func: func name.
        """
        pulumi.set(__self__, "func", func)

    @property
    @pulumi.getter
    def func(self) -> str:
        """
        func name.
        """
        return pulumi.get(self, "func")


@pulumi.output_type
class GetDatabaseObjectsProcResult(dict):
    def __init__(__self__, *,
                 proc: str):
        """
        :param str proc: proc name.
        """
        pulumi.set(__self__, "proc", proc)

    @property
    @pulumi.getter
    def proc(self) -> str:
        """
        proc name.
        """
        return pulumi.get(self, "proc")


@pulumi.output_type
class GetDatabaseObjectsTableResult(dict):
    def __init__(__self__, *,
                 table: str):
        """
        :param str table: table name.
        """
        pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def table(self) -> str:
        """
        table name.
        """
        return pulumi.get(self, "table")


@pulumi.output_type
class GetDatabaseObjectsViewResult(dict):
    def __init__(__self__, *,
                 view: str):
        """
        :param str view: view name.
        """
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def view(self) -> str:
        """
        view name.
        """
        return pulumi.get(self, "view")


@pulumi.output_type
class GetDatabaseTableColResult(dict):
    def __init__(__self__, *,
                 col: str,
                 type: str):
        """
        :param str col: column name.
        :param str type: column type.
        """
        pulumi.set(__self__, "col", col)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def col(self) -> str:
        """
        column name.
        """
        return pulumi.get(self, "col")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        column type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDatabasesDatabaseResult(dict):
    def __init__(__self__, *,
                 db_name: str):
        """
        :param str db_name: Database name.
        """
        pulumi.set(__self__, "db_name", db_name)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")


@pulumi.output_type
class GetDbInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 db_version_id: str,
                 instance_id: str,
                 instance_name: str,
                 internet_domain: str,
                 internet_ip: str,
                 internet_port: int,
                 memory: int,
                 project_id: int,
                 region: str,
                 resource_tags: Sequence['outputs.GetDbInstancesInstanceResourceTagResult'],
                 storage: int,
                 subnet_id: str,
                 vip: str,
                 vpc_id: str,
                 vport: int,
                 zone: str):
        """
        :param str db_version_id: db version id.
        :param str instance_id: instance id.
        :param str instance_name: instance name.
        :param str internet_domain: Public network access domain name.
        :param str internet_ip: Public IP address.
        :param int internet_port: Public network port.
        :param int memory: meory of instance.
        :param int project_id: project id.
        :param str region: region.
        :param Sequence['GetDbInstancesInstanceResourceTagArgs'] resource_tags: resource tags.
        :param int storage: storage of instance.
        :param str subnet_id: subnet id.
        :param str vip: Intranet IP address.
        :param str vpc_id: vpc id.
        :param int vport: Intranet port.
        :param str zone: available zone.
        """
        pulumi.set(__self__, "db_version_id", db_version_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "internet_domain", internet_domain)
        pulumi.set(__self__, "internet_ip", internet_ip)
        pulumi.set(__self__, "internet_port", internet_port)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_tags", resource_tags)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> str:
        """
        db version id.
        """
        return pulumi.get(self, "db_version_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="internetDomain")
    def internet_domain(self) -> str:
        """
        Public network access domain name.
        """
        return pulumi.get(self, "internet_domain")

    @property
    @pulumi.getter(name="internetIp")
    def internet_ip(self) -> str:
        """
        Public IP address.
        """
        return pulumi.get(self, "internet_ip")

    @property
    @pulumi.getter(name="internetPort")
    def internet_port(self) -> int:
        """
        Public network port.
        """
        return pulumi.get(self, "internet_port")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        meory of instance.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Sequence['outputs.GetDbInstancesInstanceResourceTagResult']:
        """
        resource tags.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        storage of instance.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        Intranet IP address.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        """
        Intranet port.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        available zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDbInstancesInstanceResourceTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetDcnDetailDcnDetailResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 create_time: str,
                 dcn_flag: int,
                 dcn_status: int,
                 encrypt_status: int,
                 instance_id: str,
                 instance_name: str,
                 instance_type: int,
                 memory: int,
                 pay_mode: int,
                 period_end_time: str,
                 region: str,
                 replica_configs: Sequence['outputs.GetDcnDetailDcnDetailReplicaConfigResult'],
                 replica_statuses: Sequence['outputs.GetDcnDetailDcnDetailReplicaStatusResult'],
                 status: int,
                 status_desc: str,
                 storage: int,
                 vip: str,
                 vipv6: str,
                 vport: int,
                 zone: str):
        """
        :param int cpu: Number of CPU cores of the instance.
        :param str create_time: Creation time of the instance in the format of 2006-01-02 15:04:05.
        :param int dcn_flag: DCN flag. Valid values: `1` (primary), `2` (disaster recovery).
        :param int dcn_status: DCN status. Valid values: `0` (none), `1` (creating), `2` (syncing), `3` (disconnected).
        :param int encrypt_status: Whether KMS is enabled.
        :param str instance_id: Instance ID.
        :param str instance_name: Instance name.
        :param int instance_type: Instance type. Valid values: `1` (dedicated primary instance), `2` (non-dedicated primary instance), `3` (non-dedicated disaster recovery instance), `4` (dedicated disaster recovery instance).
        :param int memory: Instance memory capacity in GB.
        :param int pay_mode: Billing mode.
        :param str period_end_time: Expiration time of the instance in the format of 2006-01-02 15:04:05.
        :param str region: Region where the instance resides.
        :param Sequence['GetDcnDetailDcnDetailReplicaConfigArgs'] replica_configs: Configuration information of DCN replication. This field is null for a primary instance.Note: This field may return null, indicating that no valid values can be obtained.
        :param Sequence['GetDcnDetailDcnDetailReplicaStatusArgs'] replica_statuses: DCN replication status. This field is null for the primary instance.Note: This field may return null, indicating that no valid values can be obtained.
        :param int status: Instance status.
        :param str status_desc: Instance status description.
        :param int storage: Instance storage capacity in GB.
        :param str vip: Instance IP address.
        :param str vipv6: Instance IPv6 address.
        :param int vport: Instance port.
        :param str zone: Availability zone where the instance resides.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dcn_flag", dcn_flag)
        pulumi.set(__self__, "dcn_status", dcn_status)
        pulumi.set(__self__, "encrypt_status", encrypt_status)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "period_end_time", period_end_time)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replica_configs", replica_configs)
        pulumi.set(__self__, "replica_statuses", replica_statuses)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_desc", status_desc)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vipv6", vipv6)
        pulumi.set(__self__, "vport", vport)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Number of CPU cores of the instance.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the instance in the format of 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dcnFlag")
    def dcn_flag(self) -> int:
        """
        DCN flag. Valid values: `1` (primary), `2` (disaster recovery).
        """
        return pulumi.get(self, "dcn_flag")

    @property
    @pulumi.getter(name="dcnStatus")
    def dcn_status(self) -> int:
        """
        DCN status. Valid values: `0` (none), `1` (creating), `2` (syncing), `3` (disconnected).
        """
        return pulumi.get(self, "dcn_status")

    @property
    @pulumi.getter(name="encryptStatus")
    def encrypt_status(self) -> int:
        """
        Whether KMS is enabled.
        """
        return pulumi.get(self, "encrypt_status")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> int:
        """
        Instance type. Valid values: `1` (dedicated primary instance), `2` (non-dedicated primary instance), `3` (non-dedicated disaster recovery instance), `4` (dedicated disaster recovery instance).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Instance memory capacity in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        """
        Billing mode.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="periodEndTime")
    def period_end_time(self) -> str:
        """
        Expiration time of the instance in the format of 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "period_end_time")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region where the instance resides.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicaConfigs")
    def replica_configs(self) -> Sequence['outputs.GetDcnDetailDcnDetailReplicaConfigResult']:
        """
        Configuration information of DCN replication. This field is null for a primary instance.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "replica_configs")

    @property
    @pulumi.getter(name="replicaStatuses")
    def replica_statuses(self) -> Sequence['outputs.GetDcnDetailDcnDetailReplicaStatusResult']:
        """
        DCN replication status. This field is null for the primary instance.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "replica_statuses")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Instance status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> str:
        """
        Instance status description.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter
    def storage(self) -> int:
        """
        Instance storage capacity in GB.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        Instance IP address.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vipv6(self) -> str:
        """
        Instance IPv6 address.
        """
        return pulumi.get(self, "vipv6")

    @property
    @pulumi.getter
    def vport(self) -> int:
        """
        Instance port.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Availability zone where the instance resides.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetDcnDetailDcnDetailReplicaConfigResult(dict):
    def __init__(__self__, *,
                 delay_replication_type: str,
                 due_time: str,
                 replication_delay: int,
                 ro_replication_mode: str):
        """
        :param str delay_replication_type: Delayed replication type. Valid values: `DEFAULT` (no delay), `DUE_TIME` (specified replication time)Note: This field may return null, indicating that no valid values can be obtained.
        :param str due_time: Specified time for delayed replicationNote: This field may return null, indicating that no valid values can be obtained.
        :param int replication_delay: The number of seconds to delay the replicationNote: This field may return null, indicating that no valid values can be obtained.
        :param str ro_replication_mode: DCN running status. Valid values: `START` (running), `STOP` (pause)Note: This field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "delay_replication_type", delay_replication_type)
        pulumi.set(__self__, "due_time", due_time)
        pulumi.set(__self__, "replication_delay", replication_delay)
        pulumi.set(__self__, "ro_replication_mode", ro_replication_mode)

    @property
    @pulumi.getter(name="delayReplicationType")
    def delay_replication_type(self) -> str:
        """
        Delayed replication type. Valid values: `DEFAULT` (no delay), `DUE_TIME` (specified replication time)Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "delay_replication_type")

    @property
    @pulumi.getter(name="dueTime")
    def due_time(self) -> str:
        """
        Specified time for delayed replicationNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "due_time")

    @property
    @pulumi.getter(name="replicationDelay")
    def replication_delay(self) -> int:
        """
        The number of seconds to delay the replicationNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "replication_delay")

    @property
    @pulumi.getter(name="roReplicationMode")
    def ro_replication_mode(self) -> str:
        """
        DCN running status. Valid values: `START` (running), `STOP` (pause)Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "ro_replication_mode")


@pulumi.output_type
class GetDcnDetailDcnDetailReplicaStatusResult(dict):
    def __init__(__self__, *,
                 delay: int,
                 status: str):
        """
        :param int delay: The current delay, which takes the delay value of the replica instance.
        :param str status: Instance status.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def delay(self) -> int:
        """
        The current delay, which takes the delay value of the replica instance.
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Instance status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstanceNodeInfoNodesInfoResult(dict):
    def __init__(__self__, *,
                 node_id: str,
                 role: str):
        """
        :param str node_id: Node ID.
        :param str role: Node role. Valid values: `master`, `slave`.
        """
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        Node ID.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Node role. Valid values: `master`, `slave`.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetInstanceSpecsSpecResult(dict):
    def __init__(__self__, *,
                 machine: str,
                 spec_infos: Sequence['outputs.GetInstanceSpecsSpecSpecInfoResult']):
        """
        :param str machine: machine type.
        :param Sequence['GetInstanceSpecsSpecSpecInfoArgs'] spec_infos: list of machine specifications.
        """
        pulumi.set(__self__, "machine", machine)
        pulumi.set(__self__, "spec_infos", spec_infos)

    @property
    @pulumi.getter
    def machine(self) -> str:
        """
        machine type.
        """
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter(name="specInfos")
    def spec_infos(self) -> Sequence['outputs.GetInstanceSpecsSpecSpecInfoResult']:
        """
        list of machine specifications.
        """
        return pulumi.get(self, "spec_infos")


@pulumi.output_type
class GetInstanceSpecsSpecSpecInfoResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 machine: str,
                 max_storage: int,
                 memory: int,
                 min_storage: int,
                 node_count: int,
                 pid: int,
                 qps: int,
                 suit_info: str):
        """
        :param int cpu: CPU cores.
        :param str machine: machine type.
        :param int max_storage: maximum storage size, in GB.
        :param int memory: memory, in GB.
        :param int min_storage: minimum storage size, in GB.
        :param int node_count: node count.
        :param int pid: product price id.
        :param int qps: maximum QPS.
        :param str suit_info: recommended usage scenarios.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "machine", machine)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_storage", min_storage)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "pid", pid)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "suit_info", suit_info)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def machine(self) -> str:
        """
        machine type.
        """
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        """
        maximum storage size, in GB.
        """
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        memory, in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minStorage")
    def min_storage(self) -> int:
        """
        minimum storage size, in GB.
        """
        return pulumi.get(self, "min_storage")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        node count.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def pid(self) -> int:
        """
        product price id.
        """
        return pulumi.get(self, "pid")

    @property
    @pulumi.getter
    def qps(self) -> int:
        """
        maximum QPS.
        """
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="suitInfo")
    def suit_info(self) -> str:
        """
        recommended usage scenarios.
        """
        return pulumi.get(self, "suit_info")


@pulumi.output_type
class GetLogFilesFileResult(dict):
    def __init__(__self__, *,
                 file_name: str,
                 length: int,
                 mtime: int,
                 uri: str):
        """
        :param str file_name: Filename.
        :param int length: File length.
        :param int mtime: Last modified time of log.
        :param str uri: Uniform resource identifier (URI) used during log download.
        """
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "mtime", mtime)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        """
        Filename.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter
    def length(self) -> int:
        """
        File length.
        """
        return pulumi.get(self, "length")

    @property
    @pulumi.getter
    def mtime(self) -> int:
        """
        Last modified time of log.
        """
        return pulumi.get(self, "mtime")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Uniform resource identifier (URI) used during log download.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetOrdersDealResult(dict):
    def __init__(__self__, *,
                 count: int,
                 deal_name: str,
                 flow_id: int,
                 instance_ids: Sequence[str],
                 owner_uin: str,
                 pay_mode: int):
        """
        :param int count: Number of items.
        :param str deal_name: List of long order numbers to be queried, which are returned for the APIs for creating, renewing, or scaling instances.
        :param int flow_id: ID of the associated process, which can be used to query the process execution status.
        :param Sequence[str] instance_ids: The ID of the created instance, which is required only for the order that creates an instance.Note: This field may return null, indicating that no valid values can be obtained.
        :param str owner_uin: Account.
        :param int pay_mode: Payment mode. Valid values: 0 (postpaid), 1 (prepaid).
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "deal_name", deal_name)
        pulumi.set(__self__, "flow_id", flow_id)
        pulumi.set(__self__, "instance_ids", instance_ids)
        pulumi.set(__self__, "owner_uin", owner_uin)
        pulumi.set(__self__, "pay_mode", pay_mode)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Number of items.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="dealName")
    def deal_name(self) -> str:
        """
        List of long order numbers to be queried, which are returned for the APIs for creating, renewing, or scaling instances.
        """
        return pulumi.get(self, "deal_name")

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> int:
        """
        ID of the associated process, which can be used to query the process execution status.
        """
        return pulumi.get(self, "flow_id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        """
        The ID of the created instance, which is required only for the order that creates an instance.Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> str:
        """
        Account.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        """
        Payment mode. Valid values: 0 (postpaid), 1 (prepaid).
        """
        return pulumi.get(self, "pay_mode")


@pulumi.output_type
class GetProjectSecurityGroupsGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult'],
                 outbounds: Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        """
        :param str create_time: Creation time in the format of yyyy-mm-dd hh:mm:ss.
        :param Sequence['GetProjectSecurityGroupsGroupInboundArgs'] inbounds: Inbound rule.
        :param Sequence['GetProjectSecurityGroupsGroupOutboundArgs'] outbounds: Outbound rule.
        :param int project_id: Project ID.
        :param str security_group_id: Security group ID.
        :param str security_group_name: Security group name.
        :param str security_group_remark: Security group remarks.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time in the format of yyyy-mm-dd hh:mm:ss.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupInboundResult']:
        """
        Inbound rule.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetProjectSecurityGroupsGroupOutboundResult']:
        """
        Outbound rule.
        """
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        Security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        """
        Security group name.
        """
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        """
        Security group remarks.
        """
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetProjectSecurityGroupsGroupInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, which can be `ACCEPT` or `DROP`.
        :param str cidr_ip: Source IP or source IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocol. UDP and TCP are supported.
        :param str port_range: Port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, which can be `ACCEPT` or `DROP`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or source IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocol. UDP and TCP are supported.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Port.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProjectSecurityGroupsGroupOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, which can be `ACCEPT` or `DROP`.
        :param str cidr_ip: Source IP or source IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocol. UDP and TCP are supported.
        :param str port_range: Port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, which can be `ACCEPT` or `DROP`.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or source IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocol. UDP and TCP are supported.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        Port.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSaleInfoRegionListResult(dict):
    def __init__(__self__, *,
                 available_choices: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceResult'],
                 region: str,
                 region_id: int,
                 region_name: str,
                 zone_lists: Sequence['outputs.GetSaleInfoRegionListZoneListResult']):
        """
        :param Sequence['GetSaleInfoRegionListAvailableChoiceArgs'] available_choices: available zone choice.
        :param str region: region name(en).
        :param int region_id: region id.
        :param str region_name: region name(zh).
        :param Sequence['GetSaleInfoRegionListZoneListArgs'] zone_lists: list of az zone.
        """
        pulumi.set(__self__, "available_choices", available_choices)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "zone_lists", zone_lists)

    @property
    @pulumi.getter(name="availableChoices")
    def available_choices(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceResult']:
        """
        available zone choice.
        """
        return pulumi.get(self, "available_choices")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region name(en).
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        region id.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        region name(zh).
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="zoneLists")
    def zone_lists(self) -> Sequence['outputs.GetSaleInfoRegionListZoneListResult']:
        """
        list of az zone.
        """
        return pulumi.get(self, "zone_lists")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceResult(dict):
    def __init__(__self__, *,
                 master_zones: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceMasterZoneResult'],
                 slave_zones: Sequence['outputs.GetSaleInfoRegionListAvailableChoiceSlaveZoneResult']):
        """
        :param Sequence['GetSaleInfoRegionListAvailableChoiceMasterZoneArgs'] master_zones: master zone.
        :param Sequence['GetSaleInfoRegionListAvailableChoiceSlaveZoneArgs'] slave_zones: slave zones.
        """
        pulumi.set(__self__, "master_zones", master_zones)
        pulumi.set(__self__, "slave_zones", slave_zones)

    @property
    @pulumi.getter(name="masterZones")
    def master_zones(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceMasterZoneResult']:
        """
        master zone.
        """
        return pulumi.get(self, "master_zones")

    @property
    @pulumi.getter(name="slaveZones")
    def slave_zones(self) -> Sequence['outputs.GetSaleInfoRegionListAvailableChoiceSlaveZoneResult']:
        """
        slave zones.
        """
        return pulumi.get(self, "slave_zones")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceMasterZoneResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        """
        :param bool on_sale: is zone on sale.
        :param str zone: zone name(en).
        :param int zone_id: zone id.
        :param str zone_name: zone name(zh).
        """
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        """
        is zone on sale.
        """
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        zone name(en).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        zone name(zh).
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSaleInfoRegionListAvailableChoiceSlaveZoneResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        """
        :param bool on_sale: is zone on sale.
        :param str zone: zone name(en).
        :param int zone_id: zone id.
        :param str zone_name: zone name(zh).
        """
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        """
        is zone on sale.
        """
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        zone name(en).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        zone name(zh).
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSaleInfoRegionListZoneListResult(dict):
    def __init__(__self__, *,
                 on_sale: bool,
                 zone: str,
                 zone_id: int,
                 zone_name: str):
        """
        :param bool on_sale: is zone on sale.
        :param str zone: zone name(en).
        :param int zone_id: zone id.
        :param str zone_name: zone name(zh).
        """
        pulumi.set(__self__, "on_sale", on_sale)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="onSale")
    def on_sale(self) -> bool:
        """
        is zone on sale.
        """
        return pulumi.get(self, "on_sale")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        zone name(en).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> int:
        """
        zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        zone name(zh).
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetSecurityGroupsListResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetSecurityGroupsListInboundResult'],
                 outbounds: Sequence['outputs.GetSecurityGroupsListOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        """
        :param str create_time: Creation time, time format: `yyyy-mm-dd hh:mm:ss`.
        :param Sequence['GetSecurityGroupsListInboundArgs'] inbounds: Inbound rules.
        :param Sequence['GetSecurityGroupsListOutboundArgs'] outbounds: Outbound Rules.
        :param int project_id: Project ID.
        :param str security_group_id: Security group ID.
        :param str security_group_name: security group name.
        :param str security_group_remark: Security Group Notes.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time, time format: `yyyy-mm-dd hh:mm:ss`.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetSecurityGroupsListInboundResult']:
        """
        Inbound rules.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetSecurityGroupsListOutboundResult']:
        """
        Outbound Rules.
        """
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        Security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        """
        security group name.
        """
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        """
        Security Group Notes.
        """
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetSecurityGroupsListInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, ACCEPT or DROP.
        :param str cidr_ip: Source IP or IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocols, support `UDP`, `TCP`, etc.
        :param str port_range: port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, ACCEPT or DROP.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocols, support `UDP`, `TCP`, etc.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSecurityGroupsListOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, ACCEPT or DROP.
        :param str cidr_ip: Source IP or IP range, such as 192.168.0.0/16.
        :param str ip_protocol: Network protocols, support `UDP`, `TCP`, etc.
        :param str port_range: port.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, ACCEPT or DROP.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Source IP or IP range, such as 192.168.0.0/16.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocols, support `UDP`, `TCP`, etc.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetSlowLogsDataResult(dict):
    def __init__(__self__, *,
                 check_sum: str,
                 db: str,
                 example_sql: str,
                 finger_print: str,
                 host: str,
                 lock_time_avg: str,
                 lock_time_max: str,
                 lock_time_min: str,
                 lock_time_sum: str,
                 query_count: str,
                 query_time_avg: str,
                 query_time_max: str,
                 query_time_min: str,
                 query_time_sum: str,
                 rows_examined_sum: str,
                 rows_sent_sum: str,
                 ts_max: str,
                 ts_min: str,
                 user: str):
        """
        :param str check_sum: Statement checksum for querying details.
        :param str db: Specific name of the database to be queried.
        :param str example_sql: Sample SQLNote: This field may return null, indicating that no valid values can be obtained.
        :param str finger_print: Abstracted SQL statement.
        :param str host: Host address of account.
        :param str lock_time_avg: Average lock time.
        :param str lock_time_max: Maximum lock time.
        :param str lock_time_min: Minimum lock time.
        :param str lock_time_sum: Total statement lock time.
        :param str query_count: Total number of statement queries.
        :param str query_time_avg: Average query time.
        :param str query_time_max: Maximum query time.
        :param str query_time_min: Minimum query time.
        :param str query_time_sum: Total statement query time.
        :param str rows_examined_sum: Number of scanned rows.
        :param str rows_sent_sum: Number of sent rows.
        :param str ts_max: Last execution time.
        :param str ts_min: First execution time.
        :param str user: Account.
        """
        pulumi.set(__self__, "check_sum", check_sum)
        pulumi.set(__self__, "db", db)
        pulumi.set(__self__, "example_sql", example_sql)
        pulumi.set(__self__, "finger_print", finger_print)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "lock_time_avg", lock_time_avg)
        pulumi.set(__self__, "lock_time_max", lock_time_max)
        pulumi.set(__self__, "lock_time_min", lock_time_min)
        pulumi.set(__self__, "lock_time_sum", lock_time_sum)
        pulumi.set(__self__, "query_count", query_count)
        pulumi.set(__self__, "query_time_avg", query_time_avg)
        pulumi.set(__self__, "query_time_max", query_time_max)
        pulumi.set(__self__, "query_time_min", query_time_min)
        pulumi.set(__self__, "query_time_sum", query_time_sum)
        pulumi.set(__self__, "rows_examined_sum", rows_examined_sum)
        pulumi.set(__self__, "rows_sent_sum", rows_sent_sum)
        pulumi.set(__self__, "ts_max", ts_max)
        pulumi.set(__self__, "ts_min", ts_min)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="checkSum")
    def check_sum(self) -> str:
        """
        Statement checksum for querying details.
        """
        return pulumi.get(self, "check_sum")

    @property
    @pulumi.getter
    def db(self) -> str:
        """
        Specific name of the database to be queried.
        """
        return pulumi.get(self, "db")

    @property
    @pulumi.getter(name="exampleSql")
    def example_sql(self) -> str:
        """
        Sample SQLNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "example_sql")

    @property
    @pulumi.getter(name="fingerPrint")
    def finger_print(self) -> str:
        """
        Abstracted SQL statement.
        """
        return pulumi.get(self, "finger_print")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host address of account.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="lockTimeAvg")
    def lock_time_avg(self) -> str:
        """
        Average lock time.
        """
        return pulumi.get(self, "lock_time_avg")

    @property
    @pulumi.getter(name="lockTimeMax")
    def lock_time_max(self) -> str:
        """
        Maximum lock time.
        """
        return pulumi.get(self, "lock_time_max")

    @property
    @pulumi.getter(name="lockTimeMin")
    def lock_time_min(self) -> str:
        """
        Minimum lock time.
        """
        return pulumi.get(self, "lock_time_min")

    @property
    @pulumi.getter(name="lockTimeSum")
    def lock_time_sum(self) -> str:
        """
        Total statement lock time.
        """
        return pulumi.get(self, "lock_time_sum")

    @property
    @pulumi.getter(name="queryCount")
    def query_count(self) -> str:
        """
        Total number of statement queries.
        """
        return pulumi.get(self, "query_count")

    @property
    @pulumi.getter(name="queryTimeAvg")
    def query_time_avg(self) -> str:
        """
        Average query time.
        """
        return pulumi.get(self, "query_time_avg")

    @property
    @pulumi.getter(name="queryTimeMax")
    def query_time_max(self) -> str:
        """
        Maximum query time.
        """
        return pulumi.get(self, "query_time_max")

    @property
    @pulumi.getter(name="queryTimeMin")
    def query_time_min(self) -> str:
        """
        Minimum query time.
        """
        return pulumi.get(self, "query_time_min")

    @property
    @pulumi.getter(name="queryTimeSum")
    def query_time_sum(self) -> str:
        """
        Total statement query time.
        """
        return pulumi.get(self, "query_time_sum")

    @property
    @pulumi.getter(name="rowsExaminedSum")
    def rows_examined_sum(self) -> str:
        """
        Number of scanned rows.
        """
        return pulumi.get(self, "rows_examined_sum")

    @property
    @pulumi.getter(name="rowsSentSum")
    def rows_sent_sum(self) -> str:
        """
        Number of sent rows.
        """
        return pulumi.get(self, "rows_sent_sum")

    @property
    @pulumi.getter(name="tsMax")
    def ts_max(self) -> str:
        """
        Last execution time.
        """
        return pulumi.get(self, "ts_max")

    @property
    @pulumi.getter(name="tsMin")
    def ts_min(self) -> str:
        """
        First execution time.
        """
        return pulumi.get(self, "ts_min")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        Account.
        """
        return pulumi.get(self, "user")


