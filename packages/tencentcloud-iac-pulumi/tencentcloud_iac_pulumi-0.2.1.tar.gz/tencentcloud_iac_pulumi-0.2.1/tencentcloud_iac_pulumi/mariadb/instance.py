# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 memory: pulumi.Input[int],
                 node_count: pulumi.Input[int],
                 storage: pulumi.Input[int],
                 zones: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[int] memory: Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
        :param pulumi.Input[int] node_count: Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
        :param pulumi.Input[int] storage: Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher for payment, the default is not used.
        :param pulumi.Input[str] db_version_id: Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]] init_params: Parameter list. The optional values of this interface are: character_set_server (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lower_case_table_names (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodb_page_size (innodb data page, Default 16K), sync_mode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] ipv6_flag: Whether IPv6 is supported.
        :param pulumi.Input[int] period: The duration of the purchase, unit: month.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ID list.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[Mapping[str, Any]] tags: tag list.
        :param pulumi.Input[str] vip: Intranet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: A list of voucher IDs. Currently, only one voucher can be specified.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed, it means that it is created as a basic network.
        """
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "zones", zones)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if dcn_instance_id is not None:
            pulumi.set(__self__, "dcn_instance_id", dcn_instance_id)
        if dcn_region is not None:
            pulumi.set(__self__, "dcn_region", dcn_region)
        if init_params is not None:
            pulumi.set(__self__, "init_params", init_params)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if ipv6_flag is not None:
            pulumi.set(__self__, "ipv6_flag", ipv6_flag)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Input[int]:
        """
        Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[int]:
        """
        Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "zones", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use the voucher for payment, the default is not used.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @dcn_instance_id.setter
    def dcn_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_instance_id", value)

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @dcn_region.setter
    def dcn_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_region", value)

    @property
    @pulumi.getter(name="initParams")
    def init_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]]]:
        """
        Parameter list. The optional values of this interface are: character_set_server (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lower_case_table_names (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodb_page_size (innodb data page, Default 16K), sync_mode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
        """
        return pulumi.get(self, "init_params")

    @init_params.setter
    def init_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]]]):
        pulumi.set(self, "init_params", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name, you can set the name of the instance independently through this field.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether IPv6 is supported.
        """
        return pulumi.get(self, "ipv6_flag")

    @ipv6_flag.setter
    def ipv6_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_flag", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The duration of the purchase, unit: month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group ID list.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network subnet ID, required when VpcId is not empty.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        tag list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        Intranet IP address.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of voucher IDs. Currently, only one voucher can be specified.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network ID, if not passed, it means that it is created as a basic network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[int]] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 db_engine: Optional[pulumi.Input[str]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_dst_num: Optional[pulumi.Input[int]] = None,
                 dcn_flag: Optional[pulumi.Input[int]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 dcn_status: Optional[pulumi.Input[int]] = None,
                 excluster_id: Optional[pulumi.Input[str]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[int]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 is_audit_supported: Optional[pulumi.Input[int]] = None,
                 is_encrypt_supported: Optional[pulumi.Input[int]] = None,
                 is_tmp: Optional[pulumi.Input[int]] = None,
                 locker: Optional[pulumi.Input[int]] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 paymode: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 period_end_time: Optional[pulumi.Input[str]] = None,
                 pid: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 qps: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 status_desc: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tdsql_version: Optional[pulumi.Input[str]] = None,
                 uin: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vipv6: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 wan_domain: Optional[pulumi.Input[str]] = None,
                 wan_port: Optional[pulumi.Input[int]] = None,
                 wan_port_ipv6: Optional[pulumi.Input[int]] = None,
                 wan_status: Optional[pulumi.Input[int]] = None,
                 wan_status_ipv6: Optional[pulumi.Input[int]] = None,
                 wan_vip: Optional[pulumi.Input[str]] = None,
                 wan_vipv6: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[int] app_id: ID of the application to which the instance belongs.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher for payment, the default is not used.
        :param pulumi.Input[int] cpu: Number of CPU cores of the instance.
        :param pulumi.Input[str] create_time: Instance creation time, the format is 2006-01-02 15:04:05.
        :param pulumi.Input[str] db_engine: Database Engine.
        :param pulumi.Input[str] db_version_id: Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
        :param pulumi.Input[int] dcn_dst_num: Number of DCN disaster recovery instances.
        :param pulumi.Input[int] dcn_flag: DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[int] dcn_status: DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
        :param pulumi.Input[str] excluster_id: Exclusive cluster ID, if it is empty, it means a normal instance.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]] init_params: Parameter list. The optional values of this interface are: character_set_server (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lower_case_table_names (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodb_page_size (innodb data page, Default 16K), sync_mode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
        :param pulumi.Input[str] instance_id: Instance ID, uniquely identifies a TDSQL instance.
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] instance_type: 1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
        :param pulumi.Input[int] ipv6_flag: Whether IPv6 is supported.
        :param pulumi.Input[int] is_audit_supported: Whether the instance supports auditing. 1-supported; 0-not supported.
        :param pulumi.Input[int] is_encrypt_supported: Whether data encryption is supported. 1-supported; 0-not supported.
        :param pulumi.Input[int] is_tmp: Whether it is a temporary instance, 0 means no, non-zero means yes.
        :param pulumi.Input[int] locker: Asynchronous task process ID when the instance is in an asynchronous task.
        :param pulumi.Input[str] machine: Machine Model.
        :param pulumi.Input[int] memory: Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
        :param pulumi.Input[int] node_count: Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
        :param pulumi.Input[str] paymode: Payment Mode.
        :param pulumi.Input[int] period: The duration of the purchase, unit: month.
        :param pulumi.Input[str] period_end_time: Instance expiration time, the format is 2006-01-02 15:04:05.
        :param pulumi.Input[int] pid: Product Type ID.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[int] qps: Maximum Qps value.
        :param pulumi.Input[str] region: The name of the region where the instance is located, such as ap-shanghai.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ID list.
        :param pulumi.Input[int] status: Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
        :param pulumi.Input[str] status_desc: Description of the current running state of the instance.
        :param pulumi.Input[int] storage: Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[Mapping[str, Any]] tags: tag list.
        :param pulumi.Input[str] tdsql_version: TDSQL version information.
        :param pulumi.Input[str] uin: The account to which the instance belongs.
        :param pulumi.Input[str] update_time: The last update time of the instance in the format of 2006-01-02 15:04:05.
        :param pulumi.Input[str] vip: Intranet IP address.
        :param pulumi.Input[str] vipv6: Intranet IPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: A list of voucher IDs. Currently, only one voucher can be specified.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed, it means that it is created as a basic network.
        :param pulumi.Input[int] vport: Intranet port.
        :param pulumi.Input[str] wan_domain: The domain name accessed from the external network, which can be resolved by the public network.
        :param pulumi.Input[int] wan_port: Internet port.
        :param pulumi.Input[int] wan_port_ipv6: Internet IPv6 port.
        :param pulumi.Input[int] wan_status: External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
        :param pulumi.Input[int] wan_status_ipv6: Internet IPv6 status.
        :param pulumi.Input[str] wan_vip: Extranet IP address, accessible from the public network.
        :param pulumi.Input[str] wan_vipv6: Internet IPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if db_engine is not None:
            pulumi.set(__self__, "db_engine", db_engine)
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if dcn_dst_num is not None:
            pulumi.set(__self__, "dcn_dst_num", dcn_dst_num)
        if dcn_flag is not None:
            pulumi.set(__self__, "dcn_flag", dcn_flag)
        if dcn_instance_id is not None:
            pulumi.set(__self__, "dcn_instance_id", dcn_instance_id)
        if dcn_region is not None:
            pulumi.set(__self__, "dcn_region", dcn_region)
        if dcn_status is not None:
            pulumi.set(__self__, "dcn_status", dcn_status)
        if excluster_id is not None:
            pulumi.set(__self__, "excluster_id", excluster_id)
        if init_params is not None:
            pulumi.set(__self__, "init_params", init_params)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if ipv6_flag is not None:
            pulumi.set(__self__, "ipv6_flag", ipv6_flag)
        if is_audit_supported is not None:
            pulumi.set(__self__, "is_audit_supported", is_audit_supported)
        if is_encrypt_supported is not None:
            pulumi.set(__self__, "is_encrypt_supported", is_encrypt_supported)
        if is_tmp is not None:
            pulumi.set(__self__, "is_tmp", is_tmp)
        if locker is not None:
            pulumi.set(__self__, "locker", locker)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if paymode is not None:
            pulumi.set(__self__, "paymode", paymode)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_end_time is not None:
            pulumi.set(__self__, "period_end_time", period_end_time)
        if pid is not None:
            pulumi.set(__self__, "pid", pid)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_desc is not None:
            pulumi.set(__self__, "status_desc", status_desc)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tdsql_version is not None:
            pulumi.set(__self__, "tdsql_version", tdsql_version)
        if uin is not None:
            pulumi.set(__self__, "uin", uin)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vipv6 is not None:
            pulumi.set(__self__, "vipv6", vipv6)
        if voucher_ids is not None:
            pulumi.set(__self__, "voucher_ids", voucher_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)
        if wan_domain is not None:
            pulumi.set(__self__, "wan_domain", wan_domain)
        if wan_port is not None:
            pulumi.set(__self__, "wan_port", wan_port)
        if wan_port_ipv6 is not None:
            pulumi.set(__self__, "wan_port_ipv6", wan_port_ipv6)
        if wan_status is not None:
            pulumi.set(__self__, "wan_status", wan_status)
        if wan_status_ipv6 is not None:
            pulumi.set(__self__, "wan_status_ipv6", wan_status_ipv6)
        if wan_vip is not None:
            pulumi.set(__self__, "wan_vip", wan_vip)
        if wan_vipv6 is not None:
            pulumi.set(__self__, "wan_vipv6", wan_vipv6)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the application to which the instance belongs.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use the voucher for payment, the default is not used.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores of the instance.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Instance creation time, the format is 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Database Engine.
        """
        return pulumi.get(self, "db_engine")

    @db_engine.setter
    def db_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_engine", value)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="dcnDstNum")
    def dcn_dst_num(self) -> Optional[pulumi.Input[int]]:
        """
        Number of DCN disaster recovery instances.
        """
        return pulumi.get(self, "dcn_dst_num")

    @dcn_dst_num.setter
    def dcn_dst_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dcn_dst_num", value)

    @property
    @pulumi.getter(name="dcnFlag")
    def dcn_flag(self) -> Optional[pulumi.Input[int]]:
        """
        DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
        """
        return pulumi.get(self, "dcn_flag")

    @dcn_flag.setter
    def dcn_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dcn_flag", value)

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @dcn_instance_id.setter
    def dcn_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_instance_id", value)

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> Optional[pulumi.Input[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @dcn_region.setter
    def dcn_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcn_region", value)

    @property
    @pulumi.getter(name="dcnStatus")
    def dcn_status(self) -> Optional[pulumi.Input[int]]:
        """
        DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
        """
        return pulumi.get(self, "dcn_status")

    @dcn_status.setter
    def dcn_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dcn_status", value)

    @property
    @pulumi.getter(name="exclusterId")
    def excluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Exclusive cluster ID, if it is empty, it means a normal instance.
        """
        return pulumi.get(self, "excluster_id")

    @excluster_id.setter
    def excluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "excluster_id", value)

    @property
    @pulumi.getter(name="initParams")
    def init_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]]]:
        """
        Parameter list. The optional values of this interface are: character_set_server (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lower_case_table_names (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodb_page_size (innodb data page, Default 16K), sync_mode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
        """
        return pulumi.get(self, "init_params")

    @init_params.setter
    def init_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInitParamArgs']]]]):
        pulumi.set(self, "init_params", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID, uniquely identifies a TDSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name, you can set the name of the instance independently through this field.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[int]]:
        """
        1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether IPv6 is supported.
        """
        return pulumi.get(self, "ipv6_flag")

    @ipv6_flag.setter
    def ipv6_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_flag", value)

    @property
    @pulumi.getter(name="isAuditSupported")
    def is_audit_supported(self) -> Optional[pulumi.Input[int]]:
        """
        Whether the instance supports auditing. 1-supported; 0-not supported.
        """
        return pulumi.get(self, "is_audit_supported")

    @is_audit_supported.setter
    def is_audit_supported(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_audit_supported", value)

    @property
    @pulumi.getter(name="isEncryptSupported")
    def is_encrypt_supported(self) -> Optional[pulumi.Input[int]]:
        """
        Whether data encryption is supported. 1-supported; 0-not supported.
        """
        return pulumi.get(self, "is_encrypt_supported")

    @is_encrypt_supported.setter
    def is_encrypt_supported(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_encrypt_supported", value)

    @property
    @pulumi.getter(name="isTmp")
    def is_tmp(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is a temporary instance, 0 means no, non-zero means yes.
        """
        return pulumi.get(self, "is_tmp")

    @is_tmp.setter
    def is_tmp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_tmp", value)

    @property
    @pulumi.getter
    def locker(self) -> Optional[pulumi.Input[int]]:
        """
        Asynchronous task process ID when the instance is in an asynchronous task.
        """
        return pulumi.get(self, "locker")

    @locker.setter
    def locker(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "locker", value)

    @property
    @pulumi.getter
    def machine(self) -> Optional[pulumi.Input[str]]:
        """
        Machine Model.
        """
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter
    def paymode(self) -> Optional[pulumi.Input[str]]:
        """
        Payment Mode.
        """
        return pulumi.get(self, "paymode")

    @paymode.setter
    def paymode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "paymode", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        The duration of the purchase, unit: month.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodEndTime")
    def period_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Instance expiration time, the format is 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "period_end_time")

    @period_end_time.setter
    def period_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period_end_time", value)

    @property
    @pulumi.getter
    def pid(self) -> Optional[pulumi.Input[int]]:
        """
        Product Type ID.
        """
        return pulumi.get(self, "pid")

    @pid.setter
    def pid(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pid", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def qps(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum Qps value.
        """
        return pulumi.get(self, "qps")

    @qps.setter
    def qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "qps", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the region where the instance is located, such as ap-shanghai.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group ID list.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the current running state of the instance.
        """
        return pulumi.get(self, "status_desc")

    @status_desc.setter
    def status_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_desc", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network subnet ID, required when VpcId is not empty.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        tag list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tdsqlVersion")
    def tdsql_version(self) -> Optional[pulumi.Input[str]]:
        """
        TDSQL version information.
        """
        return pulumi.get(self, "tdsql_version")

    @tdsql_version.setter
    def tdsql_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tdsql_version", value)

    @property
    @pulumi.getter
    def uin(self) -> Optional[pulumi.Input[str]]:
        """
        The account to which the instance belongs.
        """
        return pulumi.get(self, "uin")

    @uin.setter
    def uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uin", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last update time of the instance in the format of 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        Intranet IP address.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Intranet IPv6.
        """
        return pulumi.get(self, "vipv6")

    @vipv6.setter
    def vipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vipv6", value)

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of voucher IDs. Currently, only one voucher can be specified.
        """
        return pulumi.get(self, "voucher_ids")

    @voucher_ids.setter
    def voucher_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "voucher_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual private network ID, if not passed, it means that it is created as a basic network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Intranet port.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)

    @property
    @pulumi.getter(name="wanDomain")
    def wan_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name accessed from the external network, which can be resolved by the public network.
        """
        return pulumi.get(self, "wan_domain")

    @wan_domain.setter
    def wan_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_domain", value)

    @property
    @pulumi.getter(name="wanPort")
    def wan_port(self) -> Optional[pulumi.Input[int]]:
        """
        Internet port.
        """
        return pulumi.get(self, "wan_port")

    @wan_port.setter
    def wan_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wan_port", value)

    @property
    @pulumi.getter(name="wanPortIpv6")
    def wan_port_ipv6(self) -> Optional[pulumi.Input[int]]:
        """
        Internet IPv6 port.
        """
        return pulumi.get(self, "wan_port_ipv6")

    @wan_port_ipv6.setter
    def wan_port_ipv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wan_port_ipv6", value)

    @property
    @pulumi.getter(name="wanStatus")
    def wan_status(self) -> Optional[pulumi.Input[int]]:
        """
        External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
        """
        return pulumi.get(self, "wan_status")

    @wan_status.setter
    def wan_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wan_status", value)

    @property
    @pulumi.getter(name="wanStatusIpv6")
    def wan_status_ipv6(self) -> Optional[pulumi.Input[int]]:
        """
        Internet IPv6 status.
        """
        return pulumi.get(self, "wan_status_ipv6")

    @wan_status_ipv6.setter
    def wan_status_ipv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wan_status_ipv6", value)

    @property
    @pulumi.getter(name="wanVip")
    def wan_vip(self) -> Optional[pulumi.Input[str]]:
        """
        Extranet IP address, accessible from the public network.
        """
        return pulumi.get(self, "wan_vip")

    @wan_vip.setter
    def wan_vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_vip", value)

    @property
    @pulumi.getter(name="wanVipv6")
    def wan_vipv6(self) -> Optional[pulumi.Input[str]]:
        """
        Internet IPv6.
        """
        return pulumi.get(self, "wan_vipv6")

    @wan_vipv6.setter
    def wan_vipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_vipv6", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceInitParamArgs']]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a mariadb instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance = tencentcloud.mariadb.Instance("instance",
            auto_renew_flag=1,
            db_version_id="8.0",
            dcn_instance_id="",
            dcn_region="",
            init_params=[
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="character_set_server",
                    value="utf8mb4",
                ),
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="lower_case_table_names",
                    value="0",
                ),
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="innodb_page_size",
                    value="16384",
                ),
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="sync_mode",
                    value="1",
                ),
            ],
            instance_name="terraform-test",
            ipv6_flag=0,
            memory=8,
            node_count=2,
            period=1,
            storage=10,
            subnet_id="subnet-3ku415by",
            tags={
                "createby": "terrafrom-2",
            },
            vpc_id="vpc-ii1jfbhl",
            zones=["ap-guangzhou-3"])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mariadb tencentcloud_mariadb_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mariadb/instance:Instance instance tdsql-4pzs5b67
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher for payment, the default is not used.
        :param pulumi.Input[str] db_version_id: Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceInitParamArgs']]]] init_params: Parameter list. The optional values of this interface are: character_set_server (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lower_case_table_names (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodb_page_size (innodb data page, Default 16K), sync_mode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] ipv6_flag: Whether IPv6 is supported.
        :param pulumi.Input[int] memory: Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
        :param pulumi.Input[int] node_count: Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
        :param pulumi.Input[int] period: The duration of the purchase, unit: month.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ID list.
        :param pulumi.Input[int] storage: Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[Mapping[str, Any]] tags: tag list.
        :param pulumi.Input[str] vip: Intranet IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: A list of voucher IDs. Currently, only one voucher can be specified.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed, it means that it is created as a basic network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mariadb instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance = tencentcloud.mariadb.Instance("instance",
            auto_renew_flag=1,
            db_version_id="8.0",
            dcn_instance_id="",
            dcn_region="",
            init_params=[
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="character_set_server",
                    value="utf8mb4",
                ),
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="lower_case_table_names",
                    value="0",
                ),
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="innodb_page_size",
                    value="16384",
                ),
                tencentcloud.mariadb.InstanceInitParamArgs(
                    param="sync_mode",
                    value="1",
                ),
            ],
            instance_name="terraform-test",
            ipv6_flag=0,
            memory=8,
            node_count=2,
            period=1,
            storage=10,
            subnet_id="subnet-3ku415by",
            tags={
                "createby": "terrafrom-2",
            },
            vpc_id="vpc-ii1jfbhl",
            zones=["ap-guangzhou-3"])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mariadb tencentcloud_mariadb_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mariadb/instance:Instance instance tdsql-4pzs5b67
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 dcn_instance_id: Optional[pulumi.Input[str]] = None,
                 dcn_region: Optional[pulumi.Input[str]] = None,
                 init_params: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceInitParamArgs']]]]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 ipv6_flag: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["auto_voucher"] = auto_voucher
            __props__.__dict__["db_version_id"] = db_version_id
            __props__.__dict__["dcn_instance_id"] = dcn_instance_id
            __props__.__dict__["dcn_region"] = dcn_region
            __props__.__dict__["init_params"] = init_params
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["ipv6_flag"] = ipv6_flag
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            if node_count is None and not opts.urn:
                raise TypeError("Missing required property 'node_count'")
            __props__.__dict__["node_count"] = node_count
            __props__.__dict__["period"] = period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["security_group_ids"] = security_group_ids
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vip"] = vip
            __props__.__dict__["voucher_ids"] = voucher_ids
            __props__.__dict__["vpc_id"] = vpc_id
            if zones is None and not opts.urn:
                raise TypeError("Missing required property 'zones'")
            __props__.__dict__["zones"] = zones
            __props__.__dict__["app_id"] = None
            __props__.__dict__["cpu"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["db_engine"] = None
            __props__.__dict__["dcn_dst_num"] = None
            __props__.__dict__["dcn_flag"] = None
            __props__.__dict__["dcn_status"] = None
            __props__.__dict__["excluster_id"] = None
            __props__.__dict__["instance_id"] = None
            __props__.__dict__["instance_type"] = None
            __props__.__dict__["is_audit_supported"] = None
            __props__.__dict__["is_encrypt_supported"] = None
            __props__.__dict__["is_tmp"] = None
            __props__.__dict__["locker"] = None
            __props__.__dict__["machine"] = None
            __props__.__dict__["paymode"] = None
            __props__.__dict__["period_end_time"] = None
            __props__.__dict__["pid"] = None
            __props__.__dict__["qps"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_desc"] = None
            __props__.__dict__["tdsql_version"] = None
            __props__.__dict__["uin"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["vipv6"] = None
            __props__.__dict__["vport"] = None
            __props__.__dict__["wan_domain"] = None
            __props__.__dict__["wan_port"] = None
            __props__.__dict__["wan_port_ipv6"] = None
            __props__.__dict__["wan_status"] = None
            __props__.__dict__["wan_status_ipv6"] = None
            __props__.__dict__["wan_vip"] = None
            __props__.__dict__["wan_vipv6"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Mariadb/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[int]] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            auto_voucher: Optional[pulumi.Input[bool]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            db_engine: Optional[pulumi.Input[str]] = None,
            db_version_id: Optional[pulumi.Input[str]] = None,
            dcn_dst_num: Optional[pulumi.Input[int]] = None,
            dcn_flag: Optional[pulumi.Input[int]] = None,
            dcn_instance_id: Optional[pulumi.Input[str]] = None,
            dcn_region: Optional[pulumi.Input[str]] = None,
            dcn_status: Optional[pulumi.Input[int]] = None,
            excluster_id: Optional[pulumi.Input[str]] = None,
            init_params: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceInitParamArgs']]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_type: Optional[pulumi.Input[int]] = None,
            ipv6_flag: Optional[pulumi.Input[int]] = None,
            is_audit_supported: Optional[pulumi.Input[int]] = None,
            is_encrypt_supported: Optional[pulumi.Input[int]] = None,
            is_tmp: Optional[pulumi.Input[int]] = None,
            locker: Optional[pulumi.Input[int]] = None,
            machine: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            node_count: Optional[pulumi.Input[int]] = None,
            paymode: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            period_end_time: Optional[pulumi.Input[str]] = None,
            pid: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            qps: Optional[pulumi.Input[int]] = None,
            region: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[int]] = None,
            status_desc: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            tdsql_version: Optional[pulumi.Input[str]] = None,
            uin: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vipv6: Optional[pulumi.Input[str]] = None,
            voucher_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[int]] = None,
            wan_domain: Optional[pulumi.Input[str]] = None,
            wan_port: Optional[pulumi.Input[int]] = None,
            wan_port_ipv6: Optional[pulumi.Input[int]] = None,
            wan_status: Optional[pulumi.Input[int]] = None,
            wan_status_ipv6: Optional[pulumi.Input[int]] = None,
            wan_vip: Optional[pulumi.Input[str]] = None,
            wan_vipv6: Optional[pulumi.Input[str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] app_id: ID of the application to which the instance belongs.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher for payment, the default is not used.
        :param pulumi.Input[int] cpu: Number of CPU cores of the instance.
        :param pulumi.Input[str] create_time: Instance creation time, the format is 2006-01-02 15:04:05.
        :param pulumi.Input[str] db_engine: Database Engine.
        :param pulumi.Input[str] db_version_id: Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
        :param pulumi.Input[int] dcn_dst_num: Number of DCN disaster recovery instances.
        :param pulumi.Input[int] dcn_flag: DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
        :param pulumi.Input[str] dcn_instance_id: DCN source instance ID.
        :param pulumi.Input[str] dcn_region: DCN source region.
        :param pulumi.Input[int] dcn_status: DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
        :param pulumi.Input[str] excluster_id: Exclusive cluster ID, if it is empty, it means a normal instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceInitParamArgs']]]] init_params: Parameter list. The optional values of this interface are: character_set_server (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lower_case_table_names (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodb_page_size (innodb data page, Default 16K), sync_mode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
        :param pulumi.Input[str] instance_id: Instance ID, uniquely identifies a TDSQL instance.
        :param pulumi.Input[str] instance_name: Instance name, you can set the name of the instance independently through this field.
        :param pulumi.Input[int] instance_type: 1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
        :param pulumi.Input[int] ipv6_flag: Whether IPv6 is supported.
        :param pulumi.Input[int] is_audit_supported: Whether the instance supports auditing. 1-supported; 0-not supported.
        :param pulumi.Input[int] is_encrypt_supported: Whether data encryption is supported. 1-supported; 0-not supported.
        :param pulumi.Input[int] is_tmp: Whether it is a temporary instance, 0 means no, non-zero means yes.
        :param pulumi.Input[int] locker: Asynchronous task process ID when the instance is in an asynchronous task.
        :param pulumi.Input[str] machine: Machine Model.
        :param pulumi.Input[int] memory: Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
        :param pulumi.Input[int] node_count: Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
        :param pulumi.Input[str] paymode: Payment Mode.
        :param pulumi.Input[int] period: The duration of the purchase, unit: month.
        :param pulumi.Input[str] period_end_time: Instance expiration time, the format is 2006-01-02 15:04:05.
        :param pulumi.Input[int] pid: Product Type ID.
        :param pulumi.Input[int] project_id: Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        :param pulumi.Input[int] qps: Maximum Qps value.
        :param pulumi.Input[str] region: The name of the region where the instance is located, such as ap-shanghai.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group ID list.
        :param pulumi.Input[int] status: Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
        :param pulumi.Input[str] status_desc: Description of the current running state of the instance.
        :param pulumi.Input[int] storage: Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
        :param pulumi.Input[str] subnet_id: Virtual private network subnet ID, required when VpcId is not empty.
        :param pulumi.Input[Mapping[str, Any]] tags: tag list.
        :param pulumi.Input[str] tdsql_version: TDSQL version information.
        :param pulumi.Input[str] uin: The account to which the instance belongs.
        :param pulumi.Input[str] update_time: The last update time of the instance in the format of 2006-01-02 15:04:05.
        :param pulumi.Input[str] vip: Intranet IP address.
        :param pulumi.Input[str] vipv6: Intranet IPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] voucher_ids: A list of voucher IDs. Currently, only one voucher can be specified.
        :param pulumi.Input[str] vpc_id: Virtual private network ID, if not passed, it means that it is created as a basic network.
        :param pulumi.Input[int] vport: Intranet port.
        :param pulumi.Input[str] wan_domain: The domain name accessed from the external network, which can be resolved by the public network.
        :param pulumi.Input[int] wan_port: Internet port.
        :param pulumi.Input[int] wan_port_ipv6: Internet IPv6 port.
        :param pulumi.Input[int] wan_status: External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
        :param pulumi.Input[int] wan_status_ipv6: Internet IPv6 status.
        :param pulumi.Input[str] wan_vip: Extranet IP address, accessible from the public network.
        :param pulumi.Input[str] wan_vipv6: Internet IPv6.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["db_engine"] = db_engine
        __props__.__dict__["db_version_id"] = db_version_id
        __props__.__dict__["dcn_dst_num"] = dcn_dst_num
        __props__.__dict__["dcn_flag"] = dcn_flag
        __props__.__dict__["dcn_instance_id"] = dcn_instance_id
        __props__.__dict__["dcn_region"] = dcn_region
        __props__.__dict__["dcn_status"] = dcn_status
        __props__.__dict__["excluster_id"] = excluster_id
        __props__.__dict__["init_params"] = init_params
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["ipv6_flag"] = ipv6_flag
        __props__.__dict__["is_audit_supported"] = is_audit_supported
        __props__.__dict__["is_encrypt_supported"] = is_encrypt_supported
        __props__.__dict__["is_tmp"] = is_tmp
        __props__.__dict__["locker"] = locker
        __props__.__dict__["machine"] = machine
        __props__.__dict__["memory"] = memory
        __props__.__dict__["node_count"] = node_count
        __props__.__dict__["paymode"] = paymode
        __props__.__dict__["period"] = period
        __props__.__dict__["period_end_time"] = period_end_time
        __props__.__dict__["pid"] = pid
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["qps"] = qps
        __props__.__dict__["region"] = region
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["status_desc"] = status_desc
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tdsql_version"] = tdsql_version
        __props__.__dict__["uin"] = uin
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vipv6"] = vipv6
        __props__.__dict__["voucher_ids"] = voucher_ids
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vport"] = vport
        __props__.__dict__["wan_domain"] = wan_domain
        __props__.__dict__["wan_port"] = wan_port
        __props__.__dict__["wan_port_ipv6"] = wan_port_ipv6
        __props__.__dict__["wan_status"] = wan_status
        __props__.__dict__["wan_status_ipv6"] = wan_status_ipv6
        __props__.__dict__["wan_vip"] = wan_vip
        __props__.__dict__["wan_vipv6"] = wan_vipv6
        __props__.__dict__["zones"] = zones
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[int]:
        """
        ID of the application to which the instance belongs.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[int]:
        """
        Automatic renewal flag, 1: automatic renewal, 2: no automatic renewal.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically use the voucher for payment, the default is not used.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        Number of CPU cores of the instance.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Instance creation time, the format is 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dbEngine")
    def db_engine(self) -> pulumi.Output[str]:
        """
        Database Engine.
        """
        return pulumi.get(self, "db_engine")

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> pulumi.Output[str]:
        """
        Database engine version, currently available: 8.0.18, 10.1.9, 5.7.17. If not passed, the default is Percona 5.7.17.
        """
        return pulumi.get(self, "db_version_id")

    @property
    @pulumi.getter(name="dcnDstNum")
    def dcn_dst_num(self) -> pulumi.Output[int]:
        """
        Number of DCN disaster recovery instances.
        """
        return pulumi.get(self, "dcn_dst_num")

    @property
    @pulumi.getter(name="dcnFlag")
    def dcn_flag(self) -> pulumi.Output[int]:
        """
        DCN flag, 0-none, 1-primary instance, 2-disaster backup instance.
        """
        return pulumi.get(self, "dcn_flag")

    @property
    @pulumi.getter(name="dcnInstanceId")
    def dcn_instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        DCN source instance ID.
        """
        return pulumi.get(self, "dcn_instance_id")

    @property
    @pulumi.getter(name="dcnRegion")
    def dcn_region(self) -> pulumi.Output[Optional[str]]:
        """
        DCN source region.
        """
        return pulumi.get(self, "dcn_region")

    @property
    @pulumi.getter(name="dcnStatus")
    def dcn_status(self) -> pulumi.Output[int]:
        """
        DCN status, 0-none, 1-creating, 2-synchronizing, 3-disconnected.
        """
        return pulumi.get(self, "dcn_status")

    @property
    @pulumi.getter(name="exclusterId")
    def excluster_id(self) -> pulumi.Output[str]:
        """
        Exclusive cluster ID, if it is empty, it means a normal instance.
        """
        return pulumi.get(self, "excluster_id")

    @property
    @pulumi.getter(name="initParams")
    def init_params(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceInitParam']]]:
        """
        Parameter list. The optional values of this interface are: character_set_server (character set, required) enum: utf8,latin1,gbk,utf8mb4,gb18030, lower_case_table_names (table name case sensitive, required, 0 - sensitive; 1 - insensitive), innodb_page_size (innodb data page, Default 16K), sync_mode (sync mode: 0 - asynchronous; 1 - strong synchronous; 2 - strong synchronous can degenerate. The default is strong synchronous can degenerate).
        """
        return pulumi.get(self, "init_params")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID, uniquely identifies a TDSQL instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name, you can set the name of the instance independently through this field.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[int]:
        """
        1: primary instance (exclusive), 2: primary instance, 3: disaster recovery instance, 4: disaster recovery instance (exclusive type).
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="ipv6Flag")
    def ipv6_flag(self) -> pulumi.Output[int]:
        """
        Whether IPv6 is supported.
        """
        return pulumi.get(self, "ipv6_flag")

    @property
    @pulumi.getter(name="isAuditSupported")
    def is_audit_supported(self) -> pulumi.Output[int]:
        """
        Whether the instance supports auditing. 1-supported; 0-not supported.
        """
        return pulumi.get(self, "is_audit_supported")

    @property
    @pulumi.getter(name="isEncryptSupported")
    def is_encrypt_supported(self) -> pulumi.Output[int]:
        """
        Whether data encryption is supported. 1-supported; 0-not supported.
        """
        return pulumi.get(self, "is_encrypt_supported")

    @property
    @pulumi.getter(name="isTmp")
    def is_tmp(self) -> pulumi.Output[int]:
        """
        Whether it is a temporary instance, 0 means no, non-zero means yes.
        """
        return pulumi.get(self, "is_tmp")

    @property
    @pulumi.getter
    def locker(self) -> pulumi.Output[int]:
        """
        Asynchronous task process ID when the instance is in an asynchronous task.
        """
        return pulumi.get(self, "locker")

    @property
    @pulumi.getter
    def machine(self) -> pulumi.Output[str]:
        """
        Machine Model.
        """
        return pulumi.get(self, "machine")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        Memory size, unit: GB, can be obtained by querying instance specifications through DescribeDBInstanceSpecs.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[int]:
        """
        Number of nodes, 2 is one master and one slave, 3 is one master and two slaves.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def paymode(self) -> pulumi.Output[str]:
        """
        Payment Mode.
        """
        return pulumi.get(self, "paymode")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        The duration of the purchase, unit: month.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodEndTime")
    def period_end_time(self) -> pulumi.Output[str]:
        """
        Instance expiration time, the format is 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "period_end_time")

    @property
    @pulumi.getter
    def pid(self) -> pulumi.Output[int]:
        """
        Product Type ID.
        """
        return pulumi.get(self, "pid")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID, which can be obtained by viewing the project list, if not passed, it will be associated with the default project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def qps(self) -> pulumi.Output[int]:
        """
        Maximum Qps value.
        """
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The name of the region where the instance is located, such as ap-shanghai.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security group ID list.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Instance status: 0 creating, 1 process processing, 2 running, 3 instance not initialized, -1 instance isolated, 4 instance initializing, 5 instance deleting, 6 instance restarting, 7 data migration.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDesc")
    def status_desc(self) -> pulumi.Output[str]:
        """
        Description of the current running state of the instance.
        """
        return pulumi.get(self, "status_desc")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        Storage size, unit: GB. You can query instance specifications through DescribeDBInstanceSpecs to obtain the lower and upper limits of disk specifications corresponding to different memory sizes.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Virtual private network subnet ID, required when VpcId is not empty.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        tag list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tdsqlVersion")
    def tdsql_version(self) -> pulumi.Output[str]:
        """
        TDSQL version information.
        """
        return pulumi.get(self, "tdsql_version")

    @property
    @pulumi.getter
    def uin(self) -> pulumi.Output[str]:
        """
        The account to which the instance belongs.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The last update time of the instance in the format of 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        Intranet IP address.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vipv6(self) -> pulumi.Output[str]:
        """
        Intranet IPv6.
        """
        return pulumi.get(self, "vipv6")

    @property
    @pulumi.getter(name="voucherIds")
    def voucher_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of voucher IDs. Currently, only one voucher can be specified.
        """
        return pulumi.get(self, "voucher_ids")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Virtual private network ID, if not passed, it means that it is created as a basic network.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[int]:
        """
        Intranet port.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter(name="wanDomain")
    def wan_domain(self) -> pulumi.Output[str]:
        """
        The domain name accessed from the external network, which can be resolved by the public network.
        """
        return pulumi.get(self, "wan_domain")

    @property
    @pulumi.getter(name="wanPort")
    def wan_port(self) -> pulumi.Output[int]:
        """
        Internet port.
        """
        return pulumi.get(self, "wan_port")

    @property
    @pulumi.getter(name="wanPortIpv6")
    def wan_port_ipv6(self) -> pulumi.Output[int]:
        """
        Internet IPv6 port.
        """
        return pulumi.get(self, "wan_port_ipv6")

    @property
    @pulumi.getter(name="wanStatus")
    def wan_status(self) -> pulumi.Output[int]:
        """
        External network status, 0-unopened; 1-opened; 2-closed; 3-opening.
        """
        return pulumi.get(self, "wan_status")

    @property
    @pulumi.getter(name="wanStatusIpv6")
    def wan_status_ipv6(self) -> pulumi.Output[int]:
        """
        Internet IPv6 status.
        """
        return pulumi.get(self, "wan_status_ipv6")

    @property
    @pulumi.getter(name="wanVip")
    def wan_vip(self) -> pulumi.Output[str]:
        """
        Extranet IP address, accessible from the public network.
        """
        return pulumi.get(self, "wan_vip")

    @property
    @pulumi.getter(name="wanVipv6")
    def wan_vipv6(self) -> pulumi.Output[str]:
        """
        Internet IPv6.
        """
        return pulumi.get(self, "wan_vipv6")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence[str]]:
        """
        Instance node availability zone distribution, up to two availability zones can be filled. When the shard specification is one master and two slaves, two of the nodes are in the first availability zone.
        """
        return pulumi.get(self, "zones")

