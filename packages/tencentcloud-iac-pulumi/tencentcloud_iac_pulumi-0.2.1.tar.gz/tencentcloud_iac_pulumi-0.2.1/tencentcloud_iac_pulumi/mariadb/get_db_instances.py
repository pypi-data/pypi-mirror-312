# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDbInstancesResult',
    'AwaitableGetDbInstancesResult',
    'get_db_instances',
    'get_db_instances_output',
]

@pulumi.output_type
class GetDbInstancesResult:
    """
    A collection of values returned by getDbInstances.
    """
    def __init__(__self__, id=None, instance_ids=None, instances=None, project_ids=None, result_output_file=None, search_name=None, subnet_id=None, vpc_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if search_name and not isinstance(search_name, str):
            raise TypeError("Expected argument 'search_name' to be a str")
        pulumi.set(__self__, "search_name", search_name)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetDbInstancesInstanceResult']:
        """
        instances info.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="searchName")
    def search_name(self) -> Optional[str]:
        return pulumi.get(self, "search_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetDbInstancesResult(GetDbInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbInstancesResult(
            id=self.id,
            instance_ids=self.instance_ids,
            instances=self.instances,
            project_ids=self.project_ids,
            result_output_file=self.result_output_file,
            search_name=self.search_name,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_db_instances(instance_ids: Optional[Sequence[str]] = None,
                     project_ids: Optional[Sequence[int]] = None,
                     result_output_file: Optional[str] = None,
                     search_name: Optional[str] = None,
                     subnet_id: Optional[str] = None,
                     vpc_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbInstancesResult:
    """
    Use this data source to query detailed information of mariadb dbInstances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_instances = tencentcloud.Mariadb.get_db_instances(instance_ids=["tdsql-ijxtqk5p"],
        project_ids=[0],
        subnet_id="3454730",
        vpc_id="5556791")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] instance_ids: instance ids.
    :param Sequence[int] project_ids: project ids.
    :param str result_output_file: Used to save results.
    :param str search_name: instance name or vip.
    :param str subnet_id: subnet id.
    :param str vpc_id: vpc id.
    """
    __args__ = dict()
    __args__['instanceIds'] = instance_ids
    __args__['projectIds'] = project_ids
    __args__['resultOutputFile'] = result_output_file
    __args__['searchName'] = search_name
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mariadb/getDbInstances:getDbInstances', __args__, opts=opts, typ=GetDbInstancesResult).value

    return AwaitableGetDbInstancesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        instances=pulumi.get(__ret__, 'instances'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        search_name=pulumi.get(__ret__, 'search_name'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_db_instances)
def get_db_instances_output(instance_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            project_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            search_name: Optional[pulumi.Input[Optional[str]]] = None,
                            subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                            vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbInstancesResult]:
    """
    Use this data source to query detailed information of mariadb dbInstances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_instances = tencentcloud.Mariadb.get_db_instances(instance_ids=["tdsql-ijxtqk5p"],
        project_ids=[0],
        subnet_id="3454730",
        vpc_id="5556791")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] instance_ids: instance ids.
    :param Sequence[int] project_ids: project ids.
    :param str result_output_file: Used to save results.
    :param str search_name: instance name or vip.
    :param str subnet_id: subnet id.
    :param str vpc_id: vpc id.
    """
    ...
