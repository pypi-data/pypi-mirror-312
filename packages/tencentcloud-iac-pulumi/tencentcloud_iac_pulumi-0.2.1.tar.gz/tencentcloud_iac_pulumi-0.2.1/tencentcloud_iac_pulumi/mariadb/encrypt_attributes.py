# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EncryptAttributesArgs', 'EncryptAttributes']

@pulumi.input_type
class EncryptAttributesArgs:
    def __init__(__self__, *,
                 encrypt_enabled: pulumi.Input[int],
                 instance_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a EncryptAttributes resource.
        :param pulumi.Input[int] encrypt_enabled: whether to enable data encryption, it is not supported to turn it off after it is turned on. The optional values:
               0-disable, 1-enable.
        :param pulumi.Input[str] instance_id: instance id.
        """
        pulumi.set(__self__, "encrypt_enabled", encrypt_enabled)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="encryptEnabled")
    def encrypt_enabled(self) -> pulumi.Input[int]:
        """
        whether to enable data encryption, it is not supported to turn it off after it is turned on. The optional values:
        0-disable, 1-enable.
        """
        return pulumi.get(self, "encrypt_enabled")

    @encrypt_enabled.setter
    def encrypt_enabled(self, value: pulumi.Input[int]):
        pulumi.set(self, "encrypt_enabled", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class _EncryptAttributesState:
    def __init__(__self__, *,
                 encrypt_enabled: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EncryptAttributes resources.
        :param pulumi.Input[int] encrypt_enabled: whether to enable data encryption, it is not supported to turn it off after it is turned on. The optional values:
               0-disable, 1-enable.
        :param pulumi.Input[str] instance_id: instance id.
        """
        if encrypt_enabled is not None:
            pulumi.set(__self__, "encrypt_enabled", encrypt_enabled)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="encryptEnabled")
    def encrypt_enabled(self) -> Optional[pulumi.Input[int]]:
        """
        whether to enable data encryption, it is not supported to turn it off after it is turned on. The optional values:
        0-disable, 1-enable.
        """
        return pulumi.get(self, "encrypt_enabled")

    @encrypt_enabled.setter
    def encrypt_enabled(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encrypt_enabled", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class EncryptAttributes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encrypt_enabled: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a EncryptAttributes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] encrypt_enabled: whether to enable data encryption, it is not supported to turn it off after it is turned on. The optional values:
               0-disable, 1-enable.
        :param pulumi.Input[str] instance_id: instance id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EncryptAttributesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EncryptAttributes resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EncryptAttributesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EncryptAttributesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encrypt_enabled: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EncryptAttributesArgs.__new__(EncryptAttributesArgs)

            if encrypt_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'encrypt_enabled'")
            __props__.__dict__["encrypt_enabled"] = encrypt_enabled
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
        super(EncryptAttributes, __self__).__init__(
            'tencentcloud:Mariadb/encryptAttributes:EncryptAttributes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            encrypt_enabled: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'EncryptAttributes':
        """
        Get an existing EncryptAttributes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] encrypt_enabled: whether to enable data encryption, it is not supported to turn it off after it is turned on. The optional values:
               0-disable, 1-enable.
        :param pulumi.Input[str] instance_id: instance id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EncryptAttributesState.__new__(_EncryptAttributesState)

        __props__.__dict__["encrypt_enabled"] = encrypt_enabled
        __props__.__dict__["instance_id"] = instance_id
        return EncryptAttributes(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="encryptEnabled")
    def encrypt_enabled(self) -> pulumi.Output[int]:
        """
        whether to enable data encryption, it is not supported to turn it off after it is turned on. The optional values:
        0-disable, 1-enable.
        """
        return pulumi.get(self, "encrypt_enabled")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

