# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountPrivilegesArgs', 'AccountPrivileges']

@pulumi.input_type
class AccountPrivilegesArgs:
    def __init__(__self__, *,
                 accounts: pulumi.Input['AccountPrivilegesAccountsArgs'],
                 instance_id: pulumi.Input[str],
                 column_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]]] = None,
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]] = None,
                 function_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 procedure_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]] = None,
                 view_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]]] = None):
        """
        The set of arguments for constructing a AccountPrivileges resource.
        :param pulumi.Input['AccountPrivilegesAccountsArgs'] accounts: account information.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]] column_privileges: Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]] database_privileges: Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]] function_privileges: Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]] procedure_privileges: Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]] table_privileges: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]] view_privileges: Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "instance_id", instance_id)
        if column_privileges is not None:
            pulumi.set(__self__, "column_privileges", column_privileges)
        if database_privileges is not None:
            pulumi.set(__self__, "database_privileges", database_privileges)
        if function_privileges is not None:
            pulumi.set(__self__, "function_privileges", function_privileges)
        if global_privileges is not None:
            pulumi.set(__self__, "global_privileges", global_privileges)
        if procedure_privileges is not None:
            pulumi.set(__self__, "procedure_privileges", procedure_privileges)
        if table_privileges is not None:
            pulumi.set(__self__, "table_privileges", table_privileges)
        if view_privileges is not None:
            pulumi.set(__self__, "view_privileges", view_privileges)

    @property
    @pulumi.getter
    def accounts(self) -> pulumi.Input['AccountPrivilegesAccountsArgs']:
        """
        account information.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: pulumi.Input['AccountPrivilegesAccountsArgs']):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="columnPrivileges")
    def column_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]]]:
        """
        Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "column_privileges")

    @column_privileges.setter
    def column_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]]]):
        pulumi.set(self, "column_privileges", value)

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]:
        """
        Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "database_privileges")

    @database_privileges.setter
    def database_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]):
        pulumi.set(self, "database_privileges", value)

    @property
    @pulumi.getter(name="functionPrivileges")
    def function_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]]]:
        """
        Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "function_privileges")

    @function_privileges.setter
    def function_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]]]):
        pulumi.set(self, "function_privileges", value)

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
        """
        return pulumi.get(self, "global_privileges")

    @global_privileges.setter
    def global_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "global_privileges", value)

    @property
    @pulumi.getter(name="procedurePrivileges")
    def procedure_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]]]:
        """
        Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "procedure_privileges")

    @procedure_privileges.setter
    def procedure_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]]]):
        pulumi.set(self, "procedure_privileges", value)

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]:
        """
        `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "table_privileges")

    @table_privileges.setter
    def table_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]):
        pulumi.set(self, "table_privileges", value)

    @property
    @pulumi.getter(name="viewPrivileges")
    def view_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]]]:
        """
        Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "view_privileges")

    @view_privileges.setter
    def view_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]]]):
        pulumi.set(self, "view_privileges", value)


@pulumi.input_type
class _AccountPrivilegesState:
    def __init__(__self__, *,
                 accounts: Optional[pulumi.Input['AccountPrivilegesAccountsArgs']] = None,
                 column_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]]] = None,
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]] = None,
                 function_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 procedure_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]] = None,
                 view_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]]] = None):
        """
        Input properties used for looking up and filtering AccountPrivileges resources.
        :param pulumi.Input['AccountPrivilegesAccountsArgs'] accounts: account information.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]] column_privileges: Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]] database_privileges: Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]] function_privileges: Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]] procedure_privileges: Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]] table_privileges: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]] view_privileges: Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        """
        if accounts is not None:
            pulumi.set(__self__, "accounts", accounts)
        if column_privileges is not None:
            pulumi.set(__self__, "column_privileges", column_privileges)
        if database_privileges is not None:
            pulumi.set(__self__, "database_privileges", database_privileges)
        if function_privileges is not None:
            pulumi.set(__self__, "function_privileges", function_privileges)
        if global_privileges is not None:
            pulumi.set(__self__, "global_privileges", global_privileges)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if procedure_privileges is not None:
            pulumi.set(__self__, "procedure_privileges", procedure_privileges)
        if table_privileges is not None:
            pulumi.set(__self__, "table_privileges", table_privileges)
        if view_privileges is not None:
            pulumi.set(__self__, "view_privileges", view_privileges)

    @property
    @pulumi.getter
    def accounts(self) -> Optional[pulumi.Input['AccountPrivilegesAccountsArgs']]:
        """
        account information.
        """
        return pulumi.get(self, "accounts")

    @accounts.setter
    def accounts(self, value: Optional[pulumi.Input['AccountPrivilegesAccountsArgs']]):
        pulumi.set(self, "accounts", value)

    @property
    @pulumi.getter(name="columnPrivileges")
    def column_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]]]:
        """
        Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "column_privileges")

    @column_privileges.setter
    def column_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesColumnPrivilegeArgs']]]]):
        pulumi.set(self, "column_privileges", value)

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]:
        """
        Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "database_privileges")

    @database_privileges.setter
    def database_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]):
        pulumi.set(self, "database_privileges", value)

    @property
    @pulumi.getter(name="functionPrivileges")
    def function_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]]]:
        """
        Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "function_privileges")

    @function_privileges.setter
    def function_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesFunctionPrivilegeArgs']]]]):
        pulumi.set(self, "function_privileges", value)

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
        """
        return pulumi.get(self, "global_privileges")

    @global_privileges.setter
    def global_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "global_privileges", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="procedurePrivileges")
    def procedure_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]]]:
        """
        Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "procedure_privileges")

    @procedure_privileges.setter
    def procedure_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesProcedurePrivilegeArgs']]]]):
        pulumi.set(self, "procedure_privileges", value)

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]:
        """
        `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "table_privileges")

    @table_privileges.setter
    def table_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]):
        pulumi.set(self, "table_privileges", value)

    @property
    @pulumi.getter(name="viewPrivileges")
    def view_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]]]:
        """
        Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "view_privileges")

    @view_privileges.setter
    def view_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesViewPrivilegeArgs']]]]):
        pulumi.set(self, "view_privileges", value)


class AccountPrivileges(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesAccountsArgs']]] = None,
                 column_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegeArgs']]]]] = None,
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]]] = None,
                 function_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesFunctionPrivilegeArgs']]]]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 procedure_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesProcedurePrivilegeArgs']]]]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]]] = None,
                 view_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegeArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a mariadb account_privileges

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        account_privileges = tencentcloud.mariadb.AccountPrivileges("accountPrivileges",
            accounts=tencentcloud.mariadb.AccountPrivilegesAccountsArgs(
                host="127.0.0.1",
                user="keep-modify-privileges",
            ),
            global_privileges=[
                "ALTER",
                "CREATE",
                "DELETE",
                "SELECT",
                "UPDATE",
                "DROP",
            ],
            instance_id="tdsql-9vqvls95")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mariadb account_privileges can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mariadb/accountPrivileges:AccountPrivileges account_privileges account_privileges_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesAccountsArgs']] accounts: account information.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegeArgs']]]] column_privileges: Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]] database_privileges: Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesFunctionPrivilegeArgs']]]] function_privileges: Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesProcedurePrivilegeArgs']]]] procedure_privileges: Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]] table_privileges: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegeArgs']]]] view_privileges: Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountPrivilegesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mariadb account_privileges

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        account_privileges = tencentcloud.mariadb.AccountPrivileges("accountPrivileges",
            accounts=tencentcloud.mariadb.AccountPrivilegesAccountsArgs(
                host="127.0.0.1",
                user="keep-modify-privileges",
            ),
            global_privileges=[
                "ALTER",
                "CREATE",
                "DELETE",
                "SELECT",
                "UPDATE",
                "DROP",
            ],
            instance_id="tdsql-9vqvls95")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mariadb account_privileges can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mariadb/accountPrivileges:AccountPrivileges account_privileges account_privileges_id
        ```

        :param str resource_name: The name of the resource.
        :param AccountPrivilegesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountPrivilegesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounts: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesAccountsArgs']]] = None,
                 column_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegeArgs']]]]] = None,
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]]] = None,
                 function_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesFunctionPrivilegeArgs']]]]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 procedure_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesProcedurePrivilegeArgs']]]]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]]] = None,
                 view_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegeArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountPrivilegesArgs.__new__(AccountPrivilegesArgs)

            if accounts is None and not opts.urn:
                raise TypeError("Missing required property 'accounts'")
            __props__.__dict__["accounts"] = accounts
            __props__.__dict__["column_privileges"] = column_privileges
            __props__.__dict__["database_privileges"] = database_privileges
            __props__.__dict__["function_privileges"] = function_privileges
            __props__.__dict__["global_privileges"] = global_privileges
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["procedure_privileges"] = procedure_privileges
            __props__.__dict__["table_privileges"] = table_privileges
            __props__.__dict__["view_privileges"] = view_privileges
        super(AccountPrivileges, __self__).__init__(
            'tencentcloud:Mariadb/accountPrivileges:AccountPrivileges',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounts: Optional[pulumi.Input[pulumi.InputType['AccountPrivilegesAccountsArgs']]] = None,
            column_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegeArgs']]]]] = None,
            database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]]] = None,
            function_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesFunctionPrivilegeArgs']]]]] = None,
            global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            procedure_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesProcedurePrivilegeArgs']]]]] = None,
            table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]]] = None,
            view_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegeArgs']]]]] = None) -> 'AccountPrivileges':
        """
        Get an existing AccountPrivileges resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AccountPrivilegesAccountsArgs']] accounts: account information.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesColumnPrivilegeArgs']]]] column_privileges: Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]] database_privileges: Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesFunctionPrivilegeArgs']]]] function_privileges: Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesProcedurePrivilegeArgs']]]] procedure_privileges: Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]] table_privileges: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesViewPrivilegeArgs']]]] view_privileges: Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountPrivilegesState.__new__(_AccountPrivilegesState)

        __props__.__dict__["accounts"] = accounts
        __props__.__dict__["column_privileges"] = column_privileges
        __props__.__dict__["database_privileges"] = database_privileges
        __props__.__dict__["function_privileges"] = function_privileges
        __props__.__dict__["global_privileges"] = global_privileges
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["procedure_privileges"] = procedure_privileges
        __props__.__dict__["table_privileges"] = table_privileges
        __props__.__dict__["view_privileges"] = view_privileges
        return AccountPrivileges(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def accounts(self) -> pulumi.Output['outputs.AccountPrivilegesAccounts']:
        """
        account information.
        """
        return pulumi.get(self, "accounts")

    @property
    @pulumi.getter(name="columnPrivileges")
    def column_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesColumnPrivilege']]]:
        """
        Column permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `REFERENCES`.Note: if the parameter is left empty, no change will be made to the granted column permissions. To clear the granted column permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "column_privileges")

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesDatabasePrivilege']]]:
        """
        Database permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted database permissions. To clear the granted database permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "database_privileges")

    @property
    @pulumi.getter(name="functionPrivileges")
    def function_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesFunctionPrivilege']]]:
        """
        Database function permissions. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted function permissions. To clear the granted function permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "function_privileges")

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Global permission. Valid values of `GlobalPrivileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `PROCESS`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `SHOW DATABASES`, `CREATE TEMPORARY TABLES`, `LOCK TABLES`, `EXECUTE`, `CREATE VIEW`, `SHOW VIEW`, `CREATE ROUTINE`, `ALTER ROUTINE`, `EVENT`, `TRIGGER`.Note: if the parameter is left empty, no change will be made to the granted global permissions. To clear the granted global permissions, set the parameter to an empty array.
        """
        return pulumi.get(self, "global_privileges")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="procedurePrivileges")
    def procedure_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesProcedurePrivilege']]]:
        """
        Database stored procedure permission. Valid values of `Privileges`: `ALTER ROUTINE`, `EXECUTE`.Note: if the parameter is not passed in, no change will be made to the granted stored procedure permissions. To clear the granted stored procedure permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "procedure_privileges")

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesTablePrivilege']]]:
        """
        `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted table permissions. To clear the granted table permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "table_privileges")

    @property
    @pulumi.getter(name="viewPrivileges")
    def view_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesViewPrivilege']]]:
        """
        Database view permission. Valid values of `Privileges`: `SELECT`, `INSERT`, `UPDATE`, `DELETE`, `CREATE`, `DROP`, `REFERENCES`, `INDEX`, `ALTER`, `CREATE VIEW`, `SHOW VIEW`, `TRIGGER`.Note: if the parameter is not passed in, no change will be made to the granted view permissions. To clear the granted view permissions, set `Privileges` to an empty array.
        """
        return pulumi.get(self, "view_privileges")

