# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['HourDbInstanceArgs', 'HourDbInstance']

@pulumi.input_type
class HourDbInstanceArgs:
    def __init__(__self__, *,
                 memory: pulumi.Input[int],
                 node_count: pulumi.Input[int],
                 storage: pulumi.Input[int],
                 zones: pulumi.Input[Sequence[pulumi.Input[str]]],
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a HourDbInstance resource.
        :param pulumi.Input[int] memory: instance memory.
        :param pulumi.Input[int] node_count: number of node for instance.
        :param pulumi.Input[int] storage: instance disk storage.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone of instance.
        :param pulumi.Input[str] db_version_id: db engine version, default to 10.1.9.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[str] subnet_id: subnet id, it&amp;#39;s required when vpcId is set.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vip: vip.
        :param pulumi.Input[str] vpc_id: vpc id.
        """
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "zones", zones)
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        instance memory.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Input[int]:
        """
        number of node for instance.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[int]:
        """
        instance disk storage.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        available zone of instance.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "zones", value)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        db engine version, default to 10.1.9.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of this instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet id, it&amp;#39;s required when vpcId is set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        vip.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _HourDbInstanceState:
    def __init__(__self__, *,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering HourDbInstance resources.
        :param pulumi.Input[str] db_version_id: db engine version, default to 10.1.9.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] memory: instance memory.
        :param pulumi.Input[int] node_count: number of node for instance.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[int] storage: instance disk storage.
        :param pulumi.Input[str] subnet_id: subnet id, it&amp;#39;s required when vpcId is set.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vip: vip.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone of instance.
        """
        if db_version_id is not None:
            pulumi.set(__self__, "db_version_id", db_version_id)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if node_count is not None:
            pulumi.set(__self__, "node_count", node_count)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zones is not None:
            pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        db engine version, default to 10.1.9.
        """
        return pulumi.get(self, "db_version_id")

    @db_version_id.setter
    def db_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version_id", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        name of this instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        instance memory.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> Optional[pulumi.Input[int]]:
        """
        number of node for instance.
        """
        return pulumi.get(self, "node_count")

    @node_count.setter
    def node_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "node_count", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        instance disk storage.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet id, it&amp;#39;s required when vpcId is set.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        vip.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        available zone of instance.
        """
        return pulumi.get(self, "zones")

    @zones.setter
    def zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "zones", value)


class HourDbInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a mariadb hour_db_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        basic = tencentcloud.mariadb.HourDbInstance("basic",
            db_version_id="10.0",
            instance_name="db-test-del",
            memory=2,
            node_count=2,
            storage=10,
            subnet_id="subnet-jdi5xn22",
            tags={
                "createdBy": "terraform",
            },
            vip="10.0.0.197",
            vpc_id="vpc-k1t8ickr",
            zones=[
                "ap-guangzhou-6",
                "ap-guangzhou-7",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mariadb hour_db_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mariadb/hourDbInstance:HourDbInstance hour_db_instance tdsql-kjqih9nn
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_version_id: db engine version, default to 10.1.9.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] memory: instance memory.
        :param pulumi.Input[int] node_count: number of node for instance.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[int] storage: instance disk storage.
        :param pulumi.Input[str] subnet_id: subnet id, it&amp;#39;s required when vpcId is set.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vip: vip.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone of instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HourDbInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mariadb hour_db_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        basic = tencentcloud.mariadb.HourDbInstance("basic",
            db_version_id="10.0",
            instance_name="db-test-del",
            memory=2,
            node_count=2,
            storage=10,
            subnet_id="subnet-jdi5xn22",
            tags={
                "createdBy": "terraform",
            },
            vip="10.0.0.197",
            vpc_id="vpc-k1t8ickr",
            zones=[
                "ap-guangzhou-6",
                "ap-guangzhou-7",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mariadb hour_db_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mariadb/hourDbInstance:HourDbInstance hour_db_instance tdsql-kjqih9nn
        ```

        :param str resource_name: The name of the resource.
        :param HourDbInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HourDbInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_version_id: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 node_count: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HourDbInstanceArgs.__new__(HourDbInstanceArgs)

            __props__.__dict__["db_version_id"] = db_version_id
            __props__.__dict__["instance_name"] = instance_name
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            if node_count is None and not opts.urn:
                raise TypeError("Missing required property 'node_count'")
            __props__.__dict__["node_count"] = node_count
            __props__.__dict__["project_id"] = project_id
            if storage is None and not opts.urn:
                raise TypeError("Missing required property 'storage'")
            __props__.__dict__["storage"] = storage
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vip"] = vip
            __props__.__dict__["vpc_id"] = vpc_id
            if zones is None and not opts.urn:
                raise TypeError("Missing required property 'zones'")
            __props__.__dict__["zones"] = zones
        super(HourDbInstance, __self__).__init__(
            'tencentcloud:Mariadb/hourDbInstance:HourDbInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_version_id: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            node_count: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'HourDbInstance':
        """
        Get an existing HourDbInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_version_id: db engine version, default to 10.1.9.
        :param pulumi.Input[str] instance_name: name of this instance.
        :param pulumi.Input[int] memory: instance memory.
        :param pulumi.Input[int] node_count: number of node for instance.
        :param pulumi.Input[int] project_id: project id.
        :param pulumi.Input[int] storage: instance disk storage.
        :param pulumi.Input[str] subnet_id: subnet id, it&amp;#39;s required when vpcId is set.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vip: vip.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] zones: available zone of instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HourDbInstanceState.__new__(_HourDbInstanceState)

        __props__.__dict__["db_version_id"] = db_version_id
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["memory"] = memory
        __props__.__dict__["node_count"] = node_count
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zones"] = zones
        return HourDbInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbVersionId")
    def db_version_id(self) -> pulumi.Output[str]:
        """
        db engine version, default to 10.1.9.
        """
        return pulumi.get(self, "db_version_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        name of this instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        instance memory.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> pulumi.Output[int]:
        """
        number of node for instance.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        instance disk storage.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        subnet id, it&amp;#39;s required when vpcId is set.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        vip.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zones(self) -> pulumi.Output[Sequence[str]]:
        """
        available zone of instance.
        """
        return pulumi.get(self, "zones")

