# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDescribeInstanceErrorLogsResult',
    'AwaitableGetDescribeInstanceErrorLogsResult',
    'get_describe_instance_error_logs',
    'get_describe_instance_error_logs_output',
]

@pulumi.output_type
class GetDescribeInstanceErrorLogsResult:
    """
    A collection of values returned by getDescribeInstanceErrorLogs.
    """
    def __init__(__self__, end_time=None, error_logs=None, id=None, instance_id=None, key_words=None, log_levels=None, order_by=None, order_by_type=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if error_logs and not isinstance(error_logs, list):
            raise TypeError("Expected argument 'error_logs' to be a list")
        pulumi.set(__self__, "error_logs", error_logs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if key_words and not isinstance(key_words, list):
            raise TypeError("Expected argument 'key_words' to be a list")
        pulumi.set(__self__, "key_words", key_words)
        if log_levels and not isinstance(log_levels, list):
            raise TypeError("Expected argument 'log_levels' to be a list")
        pulumi.set(__self__, "log_levels", log_levels)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_by_type and not isinstance(order_by_type, str):
            raise TypeError("Expected argument 'order_by_type' to be a str")
        pulumi.set(__self__, "order_by_type", order_by_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="errorLogs")
    def error_logs(self) -> Sequence['outputs.GetDescribeInstanceErrorLogsErrorLogResult']:
        """
        Error log list note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "error_logs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_words")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderByType")
    def order_by_type(self) -> Optional[str]:
        return pulumi.get(self, "order_by_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")


class AwaitableGetDescribeInstanceErrorLogsResult(GetDescribeInstanceErrorLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeInstanceErrorLogsResult(
            end_time=self.end_time,
            error_logs=self.error_logs,
            id=self.id,
            instance_id=self.instance_id,
            key_words=self.key_words,
            log_levels=self.log_levels,
            order_by=self.order_by,
            order_by_type=self.order_by_type,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_describe_instance_error_logs(end_time: Optional[str] = None,
                                     instance_id: Optional[str] = None,
                                     key_words: Optional[Sequence[str]] = None,
                                     log_levels: Optional[Sequence[str]] = None,
                                     order_by: Optional[str] = None,
                                     order_by_type: Optional[str] = None,
                                     result_output_file: Optional[str] = None,
                                     start_time: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeInstanceErrorLogsResult:
    """
    Use this data source to query detailed information of cynosdb describe_instance_error_logs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_instance_error_logs = tencentcloud.Cynosdb.get_describe_instance_error_logs(end_time="2023-06-19 15:04:05",
        instance_id="cynosdbmysql-ins-afqx1hy0",
        key_words=["Aborted"],
        log_levels=[
            "note",
            "warning",
        ],
        order_by="Timestamp",
        order_by_type="DESC",
        start_time="2023-06-01 15:04:05")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time.
    :param str instance_id: Instance Id.
    :param Sequence[str] key_words: Keywords, supports fuzzy search.
    :param Sequence[str] log_levels: Log levels, including error, warning, and note, support simultaneous search of multiple levels.
    :param str order_by: Sort fields with Timestamp enumeration values.
    :param str order_by_type: Sort type, with ASC and DESC enumeration values.
    :param str result_output_file: Used to save results.
    :param str start_time: start time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['keyWords'] = key_words
    __args__['logLevels'] = log_levels
    __args__['orderBy'] = order_by
    __args__['orderByType'] = order_by_type
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getDescribeInstanceErrorLogs:getDescribeInstanceErrorLogs', __args__, opts=opts, typ=GetDescribeInstanceErrorLogsResult).value

    return AwaitableGetDescribeInstanceErrorLogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        error_logs=pulumi.get(__ret__, 'error_logs'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        key_words=pulumi.get(__ret__, 'key_words'),
        log_levels=pulumi.get(__ret__, 'log_levels'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_by_type=pulumi.get(__ret__, 'order_by_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_describe_instance_error_logs)
def get_describe_instance_error_logs_output(end_time: Optional[pulumi.Input[Optional[str]]] = None,
                                            instance_id: Optional[pulumi.Input[str]] = None,
                                            key_words: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                            log_levels: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                            order_by: Optional[pulumi.Input[Optional[str]]] = None,
                                            order_by_type: Optional[pulumi.Input[Optional[str]]] = None,
                                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                            start_time: Optional[pulumi.Input[Optional[str]]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeInstanceErrorLogsResult]:
    """
    Use this data source to query detailed information of cynosdb describe_instance_error_logs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_instance_error_logs = tencentcloud.Cynosdb.get_describe_instance_error_logs(end_time="2023-06-19 15:04:05",
        instance_id="cynosdbmysql-ins-afqx1hy0",
        key_words=["Aborted"],
        log_levels=[
            "note",
            "warning",
        ],
        order_by="Timestamp",
        order_by_type="DESC",
        start_time="2023-06-01 15:04:05")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time.
    :param str instance_id: Instance Id.
    :param Sequence[str] key_words: Keywords, supports fuzzy search.
    :param Sequence[str] log_levels: Log levels, including error, warning, and note, support simultaneous search of multiple levels.
    :param str order_by: Sort fields with Timestamp enumeration values.
    :param str order_by_type: Sort type, with ASC and DESC enumeration values.
    :param str result_output_file: Used to save results.
    :param str start_time: start time.
    """
    ...
