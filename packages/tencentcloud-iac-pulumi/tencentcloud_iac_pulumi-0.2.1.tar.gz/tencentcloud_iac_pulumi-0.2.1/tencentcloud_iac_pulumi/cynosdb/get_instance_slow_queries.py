# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceSlowQueriesResult',
    'AwaitableGetInstanceSlowQueriesResult',
    'get_instance_slow_queries',
    'get_instance_slow_queries_output',
]

@pulumi.output_type
class GetInstanceSlowQueriesResult:
    """
    A collection of values returned by getInstanceSlowQueries.
    """
    def __init__(__self__, database=None, end_time=None, host=None, id=None, instance_id=None, order_by=None, order_by_type=None, result_output_file=None, slow_queries=None, start_time=None, username=None):
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_by_type and not isinstance(order_by_type, str):
            raise TypeError("Expected argument 'order_by_type' to be a str")
        pulumi.set(__self__, "order_by_type", order_by_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if slow_queries and not isinstance(slow_queries, list):
            raise TypeError("Expected argument 'slow_queries' to be a list")
        pulumi.set(__self__, "slow_queries", slow_queries)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderByType")
    def order_by_type(self) -> Optional[str]:
        return pulumi.get(self, "order_by_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="slowQueries")
    def slow_queries(self) -> Sequence['outputs.GetInstanceSlowQueriesSlowQueryResult']:
        """
        Slow query records.
        """
        return pulumi.get(self, "slow_queries")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


class AwaitableGetInstanceSlowQueriesResult(GetInstanceSlowQueriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceSlowQueriesResult(
            database=self.database,
            end_time=self.end_time,
            host=self.host,
            id=self.id,
            instance_id=self.instance_id,
            order_by=self.order_by,
            order_by_type=self.order_by_type,
            result_output_file=self.result_output_file,
            slow_queries=self.slow_queries,
            start_time=self.start_time,
            username=self.username)


def get_instance_slow_queries(database: Optional[str] = None,
                              end_time: Optional[str] = None,
                              host: Optional[str] = None,
                              instance_id: Optional[str] = None,
                              order_by: Optional[str] = None,
                              order_by_type: Optional[str] = None,
                              result_output_file: Optional[str] = None,
                              start_time: Optional[str] = None,
                              username: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceSlowQueriesResult:
    """
    Use this data source to query detailed information of cynosdb instance_slow_queries

    ## Example Usage

    ### Query slow queries of instance

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = pulumi.Config()
    cynosdb_cluster_id = config.get("cynosdbClusterId")
    if cynosdb_cluster_id is None:
        cynosdb_cluster_id = "default_cynosdb_cluster"
    instance_slow_queries = tencentcloud.Cynosdb.get_instance_slow_queries(instance_id=cynosdb_cluster_id,
        start_time="2023-06-20 23:19:03",
        end_time="2023-06-30 23:19:03",
        username="keep_dts",
        host="%%",
        database="tf_ci_test",
        order_by="QueryTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->

    ### Query slow queries by time range

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = pulumi.Config()
    cynosdb_cluster_id = config.get("cynosdbClusterId")
    if cynosdb_cluster_id is None:
        cynosdb_cluster_id = "default_cynosdb_cluster"
    instance_slow_queries = tencentcloud.Cynosdb.get_instance_slow_queries(instance_id=cynosdb_cluster_id,
        start_time="2023-06-20 23:19:03",
        end_time="2023-06-30 23:19:03",
        order_by="QueryTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->

    ### Query slow queries by user and db name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = pulumi.Config()
    cynosdb_cluster_id = config.get("cynosdbClusterId")
    if cynosdb_cluster_id is None:
        cynosdb_cluster_id = "default_cynosdb_cluster"
    instance_slow_queries = tencentcloud.Cynosdb.get_instance_slow_queries(instance_id=cynosdb_cluster_id,
        username="keep_dts",
        host="%%",
        database="tf_ci_test",
        order_by="QueryTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->


    :param str database: Database name.
    :param str end_time: Latest transaction start time.
    :param str host: Client host.
    :param str instance_id: Instance ID.
    :param str order_by: Sort field, optional values: QueryTime, LockTime, RowsExamined, RowsSent.
    :param str order_by_type: Sort type, optional values: asc, desc.
    :param str result_output_file: Used to save results.
    :param str start_time: Earliest transaction start time.
    :param str username: user name.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['endTime'] = end_time
    __args__['host'] = host
    __args__['instanceId'] = instance_id
    __args__['orderBy'] = order_by
    __args__['orderByType'] = order_by_type
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getInstanceSlowQueries:getInstanceSlowQueries', __args__, opts=opts, typ=GetInstanceSlowQueriesResult).value

    return AwaitableGetInstanceSlowQueriesResult(
        database=pulumi.get(__ret__, 'database'),
        end_time=pulumi.get(__ret__, 'end_time'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_by_type=pulumi.get(__ret__, 'order_by_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        slow_queries=pulumi.get(__ret__, 'slow_queries'),
        start_time=pulumi.get(__ret__, 'start_time'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_instance_slow_queries)
def get_instance_slow_queries_output(database: Optional[pulumi.Input[Optional[str]]] = None,
                                     end_time: Optional[pulumi.Input[Optional[str]]] = None,
                                     host: Optional[pulumi.Input[Optional[str]]] = None,
                                     instance_id: Optional[pulumi.Input[str]] = None,
                                     order_by: Optional[pulumi.Input[Optional[str]]] = None,
                                     order_by_type: Optional[pulumi.Input[Optional[str]]] = None,
                                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                     start_time: Optional[pulumi.Input[Optional[str]]] = None,
                                     username: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceSlowQueriesResult]:
    """
    Use this data source to query detailed information of cynosdb instance_slow_queries

    ## Example Usage

    ### Query slow queries of instance

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = pulumi.Config()
    cynosdb_cluster_id = config.get("cynosdbClusterId")
    if cynosdb_cluster_id is None:
        cynosdb_cluster_id = "default_cynosdb_cluster"
    instance_slow_queries = tencentcloud.Cynosdb.get_instance_slow_queries(instance_id=cynosdb_cluster_id,
        start_time="2023-06-20 23:19:03",
        end_time="2023-06-30 23:19:03",
        username="keep_dts",
        host="%%",
        database="tf_ci_test",
        order_by="QueryTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->

    ### Query slow queries by time range

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = pulumi.Config()
    cynosdb_cluster_id = config.get("cynosdbClusterId")
    if cynosdb_cluster_id is None:
        cynosdb_cluster_id = "default_cynosdb_cluster"
    instance_slow_queries = tencentcloud.Cynosdb.get_instance_slow_queries(instance_id=cynosdb_cluster_id,
        start_time="2023-06-20 23:19:03",
        end_time="2023-06-30 23:19:03",
        order_by="QueryTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->

    ### Query slow queries by user and db name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    config = pulumi.Config()
    cynosdb_cluster_id = config.get("cynosdbClusterId")
    if cynosdb_cluster_id is None:
        cynosdb_cluster_id = "default_cynosdb_cluster"
    instance_slow_queries = tencentcloud.Cynosdb.get_instance_slow_queries(instance_id=cynosdb_cluster_id,
        username="keep_dts",
        host="%%",
        database="tf_ci_test",
        order_by="QueryTime",
        order_by_type="desc")
    ```
    <!--End PulumiCodeChooser -->


    :param str database: Database name.
    :param str end_time: Latest transaction start time.
    :param str host: Client host.
    :param str instance_id: Instance ID.
    :param str order_by: Sort field, optional values: QueryTime, LockTime, RowsExamined, RowsSent.
    :param str order_by_type: Sort type, optional values: asc, desc.
    :param str result_output_file: Used to save results.
    :param str start_time: Earliest transaction start time.
    :param str username: user name.
    """
    ...
