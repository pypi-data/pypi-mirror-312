# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetParamTemplatesResult',
    'AwaitableGetParamTemplatesResult',
    'get_param_templates',
    'get_param_templates_output',
]

@pulumi.output_type
class GetParamTemplatesResult:
    """
    A collection of values returned by getParamTemplates.
    """
    def __init__(__self__, db_modes=None, engine_types=None, engine_versions=None, id=None, items=None, limit=None, offset=None, order_by=None, order_direction=None, products=None, result_output_file=None, template_ids=None, template_names=None, template_types=None):
        if db_modes and not isinstance(db_modes, list):
            raise TypeError("Expected argument 'db_modes' to be a list")
        pulumi.set(__self__, "db_modes", db_modes)
        if engine_types and not isinstance(engine_types, list):
            raise TypeError("Expected argument 'engine_types' to be a list")
        pulumi.set(__self__, "engine_types", engine_types)
        if engine_versions and not isinstance(engine_versions, list):
            raise TypeError("Expected argument 'engine_versions' to be a list")
        pulumi.set(__self__, "engine_versions", engine_versions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_direction and not isinstance(order_direction, str):
            raise TypeError("Expected argument 'order_direction' to be a str")
        pulumi.set(__self__, "order_direction", order_direction)
        if products and not isinstance(products, list):
            raise TypeError("Expected argument 'products' to be a list")
        pulumi.set(__self__, "products", products)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if template_ids and not isinstance(template_ids, list):
            raise TypeError("Expected argument 'template_ids' to be a list")
        pulumi.set(__self__, "template_ids", template_ids)
        if template_names and not isinstance(template_names, list):
            raise TypeError("Expected argument 'template_names' to be a list")
        pulumi.set(__self__, "template_names", template_names)
        if template_types and not isinstance(template_types, list):
            raise TypeError("Expected argument 'template_types' to be a list")
        pulumi.set(__self__, "template_types", template_types)

    @property
    @pulumi.getter(name="dbModes")
    def db_modes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "db_modes")

    @property
    @pulumi.getter(name="engineTypes")
    def engine_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "engine_types")

    @property
    @pulumi.getter(name="engineVersions")
    def engine_versions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "engine_versions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetParamTemplatesItemResult']:
        """
        Parameter Template Information.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderDirection")
    def order_direction(self) -> Optional[str]:
        return pulumi.get(self, "order_direction")

    @property
    @pulumi.getter
    def products(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "products")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="templateIds")
    def template_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "template_ids")

    @property
    @pulumi.getter(name="templateNames")
    def template_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "template_names")

    @property
    @pulumi.getter(name="templateTypes")
    def template_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "template_types")


class AwaitableGetParamTemplatesResult(GetParamTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetParamTemplatesResult(
            db_modes=self.db_modes,
            engine_types=self.engine_types,
            engine_versions=self.engine_versions,
            id=self.id,
            items=self.items,
            limit=self.limit,
            offset=self.offset,
            order_by=self.order_by,
            order_direction=self.order_direction,
            products=self.products,
            result_output_file=self.result_output_file,
            template_ids=self.template_ids,
            template_names=self.template_names,
            template_types=self.template_types)


def get_param_templates(db_modes: Optional[Sequence[str]] = None,
                        engine_types: Optional[Sequence[str]] = None,
                        engine_versions: Optional[Sequence[str]] = None,
                        limit: Optional[int] = None,
                        offset: Optional[int] = None,
                        order_by: Optional[str] = None,
                        order_direction: Optional[str] = None,
                        products: Optional[Sequence[str]] = None,
                        result_output_file: Optional[str] = None,
                        template_ids: Optional[Sequence[int]] = None,
                        template_names: Optional[Sequence[str]] = None,
                        template_types: Optional[Sequence[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetParamTemplatesResult:
    """
    Use this data source to query detailed information of cynosdb param_templates

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    param_templates = tencentcloud.Cynosdb.get_param_templates()
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] db_modes: Database mode, optional values: NORMAL, SERVERLESS.
    :param Sequence[str] engine_types: Engine types.
    :param Sequence[str] engine_versions: Database engine version number.
    :param int limit: Query limit.
    :param int offset: Page offset.
    :param str order_by: The sort field for the returned results.
    :param str order_direction: Sort by (asc, desc).
    :param Sequence[str] products: The product type corresponding to the query template.
    :param str result_output_file: Used to save results.
    :param Sequence[int] template_ids: The id list of templates.
    :param Sequence[str] template_names: The name list of templates.
    :param Sequence[str] template_types: Template types.
    """
    __args__ = dict()
    __args__['dbModes'] = db_modes
    __args__['engineTypes'] = engine_types
    __args__['engineVersions'] = engine_versions
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['orderBy'] = order_by
    __args__['orderDirection'] = order_direction
    __args__['products'] = products
    __args__['resultOutputFile'] = result_output_file
    __args__['templateIds'] = template_ids
    __args__['templateNames'] = template_names
    __args__['templateTypes'] = template_types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getParamTemplates:getParamTemplates', __args__, opts=opts, typ=GetParamTemplatesResult).value

    return AwaitableGetParamTemplatesResult(
        db_modes=pulumi.get(__ret__, 'db_modes'),
        engine_types=pulumi.get(__ret__, 'engine_types'),
        engine_versions=pulumi.get(__ret__, 'engine_versions'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_direction=pulumi.get(__ret__, 'order_direction'),
        products=pulumi.get(__ret__, 'products'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        template_ids=pulumi.get(__ret__, 'template_ids'),
        template_names=pulumi.get(__ret__, 'template_names'),
        template_types=pulumi.get(__ret__, 'template_types'))


@_utilities.lift_output_func(get_param_templates)
def get_param_templates_output(db_modes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               engine_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               engine_versions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               limit: Optional[pulumi.Input[Optional[int]]] = None,
                               offset: Optional[pulumi.Input[Optional[int]]] = None,
                               order_by: Optional[pulumi.Input[Optional[str]]] = None,
                               order_direction: Optional[pulumi.Input[Optional[str]]] = None,
                               products: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               template_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                               template_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               template_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetParamTemplatesResult]:
    """
    Use this data source to query detailed information of cynosdb param_templates

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    param_templates = tencentcloud.Cynosdb.get_param_templates()
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] db_modes: Database mode, optional values: NORMAL, SERVERLESS.
    :param Sequence[str] engine_types: Engine types.
    :param Sequence[str] engine_versions: Database engine version number.
    :param int limit: Query limit.
    :param int offset: Page offset.
    :param str order_by: The sort field for the returned results.
    :param str order_direction: Sort by (asc, desc).
    :param Sequence[str] products: The product type corresponding to the query template.
    :param str result_output_file: Used to save results.
    :param Sequence[int] template_ids: The id list of templates.
    :param Sequence[str] template_names: The name list of templates.
    :param Sequence[str] template_types: Template types.
    """
    ...
