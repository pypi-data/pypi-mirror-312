# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ResourcePackageArgs', 'ResourcePackage']

@pulumi.input_type
class ResourcePackageArgs:
    def __init__(__self__, *,
                 expire_day: pulumi.Input[int],
                 instance_type: pulumi.Input[str],
                 package_count: pulumi.Input[int],
                 package_region: pulumi.Input[str],
                 package_spec: pulumi.Input[float],
                 package_type: pulumi.Input[str],
                 package_version: pulumi.Input[str],
                 package_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ResourcePackage resource.
        :param pulumi.Input[int] expire_day: Validity period of resource package, in days.
        :param pulumi.Input[str] instance_type: Instance Type.
        :param pulumi.Input[int] package_count: Number of purchased resource packs.
        :param pulumi.Input[str] package_region: Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and
               overseas.
        :param pulumi.Input[float] package_spec: Resource package size, calculated in 10000 units; Storage resources: GB.
        :param pulumi.Input[str] package_type: Resource package type: CCU computing resource package, DISK storage resource package.
        :param pulumi.Input[str] package_version: Resource package version base basic version, common general version, enterprise enterprise version.
        :param pulumi.Input[str] package_name: Resource Package Name.
        """
        pulumi.set(__self__, "expire_day", expire_day)
        pulumi.set(__self__, "instance_type", instance_type)
        pulumi.set(__self__, "package_count", package_count)
        pulumi.set(__self__, "package_region", package_region)
        pulumi.set(__self__, "package_spec", package_spec)
        pulumi.set(__self__, "package_type", package_type)
        pulumi.set(__self__, "package_version", package_version)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> pulumi.Input[int]:
        """
        Validity period of resource package, in days.
        """
        return pulumi.get(self, "expire_day")

    @expire_day.setter
    def expire_day(self, value: pulumi.Input[int]):
        pulumi.set(self, "expire_day", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Input[str]:
        """
        Instance Type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="packageCount")
    def package_count(self) -> pulumi.Input[int]:
        """
        Number of purchased resource packs.
        """
        return pulumi.get(self, "package_count")

    @package_count.setter
    def package_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "package_count", value)

    @property
    @pulumi.getter(name="packageRegion")
    def package_region(self) -> pulumi.Input[str]:
        """
        Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and
        overseas.
        """
        return pulumi.get(self, "package_region")

    @package_region.setter
    def package_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_region", value)

    @property
    @pulumi.getter(name="packageSpec")
    def package_spec(self) -> pulumi.Input[float]:
        """
        Resource package size, calculated in 10000 units; Storage resources: GB.
        """
        return pulumi.get(self, "package_spec")

    @package_spec.setter
    def package_spec(self, value: pulumi.Input[float]):
        pulumi.set(self, "package_spec", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> pulumi.Input[str]:
        """
        Resource package type: CCU computing resource package, DISK storage resource package.
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> pulumi.Input[str]:
        """
        Resource package version base basic version, common general version, enterprise enterprise version.
        """
        return pulumi.get(self, "package_version")

    @package_version.setter
    def package_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "package_version", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Package Name.
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)


@pulumi.input_type
class _ResourcePackageState:
    def __init__(__self__, *,
                 expire_day: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 package_count: Optional[pulumi.Input[int]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_region: Optional[pulumi.Input[str]] = None,
                 package_spec: Optional[pulumi.Input[float]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 package_version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ResourcePackage resources.
        :param pulumi.Input[int] expire_day: Validity period of resource package, in days.
        :param pulumi.Input[str] instance_type: Instance Type.
        :param pulumi.Input[int] package_count: Number of purchased resource packs.
        :param pulumi.Input[str] package_name: Resource Package Name.
        :param pulumi.Input[str] package_region: Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and
               overseas.
        :param pulumi.Input[float] package_spec: Resource package size, calculated in 10000 units; Storage resources: GB.
        :param pulumi.Input[str] package_type: Resource package type: CCU computing resource package, DISK storage resource package.
        :param pulumi.Input[str] package_version: Resource package version base basic version, common general version, enterprise enterprise version.
        """
        if expire_day is not None:
            pulumi.set(__self__, "expire_day", expire_day)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if package_count is not None:
            pulumi.set(__self__, "package_count", package_count)
        if package_name is not None:
            pulumi.set(__self__, "package_name", package_name)
        if package_region is not None:
            pulumi.set(__self__, "package_region", package_region)
        if package_spec is not None:
            pulumi.set(__self__, "package_spec", package_spec)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if package_version is not None:
            pulumi.set(__self__, "package_version", package_version)

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> Optional[pulumi.Input[int]]:
        """
        Validity period of resource package, in days.
        """
        return pulumi.get(self, "expire_day")

    @expire_day.setter
    def expire_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expire_day", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Type.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="packageCount")
    def package_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of purchased resource packs.
        """
        return pulumi.get(self, "package_count")

    @package_count.setter
    def package_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "package_count", value)

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Package Name.
        """
        return pulumi.get(self, "package_name")

    @package_name.setter
    def package_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_name", value)

    @property
    @pulumi.getter(name="packageRegion")
    def package_region(self) -> Optional[pulumi.Input[str]]:
        """
        Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and
        overseas.
        """
        return pulumi.get(self, "package_region")

    @package_region.setter
    def package_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_region", value)

    @property
    @pulumi.getter(name="packageSpec")
    def package_spec(self) -> Optional[pulumi.Input[float]]:
        """
        Resource package size, calculated in 10000 units; Storage resources: GB.
        """
        return pulumi.get(self, "package_spec")

    @package_spec.setter
    def package_spec(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "package_spec", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        Resource package type: CCU computing resource package, DISK storage resource package.
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> Optional[pulumi.Input[str]]:
        """
        Resource package version base basic version, common general version, enterprise enterprise version.
        """
        return pulumi.get(self, "package_version")

    @package_version.setter
    def package_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_version", value)


class ResourcePackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expire_day: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 package_count: Optional[pulumi.Input[int]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_region: Optional[pulumi.Input[str]] = None,
                 package_spec: Optional[pulumi.Input[float]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 package_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ResourcePackage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] expire_day: Validity period of resource package, in days.
        :param pulumi.Input[str] instance_type: Instance Type.
        :param pulumi.Input[int] package_count: Number of purchased resource packs.
        :param pulumi.Input[str] package_name: Resource Package Name.
        :param pulumi.Input[str] package_region: Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and
               overseas.
        :param pulumi.Input[float] package_spec: Resource package size, calculated in 10000 units; Storage resources: GB.
        :param pulumi.Input[str] package_type: Resource package type: CCU computing resource package, DISK storage resource package.
        :param pulumi.Input[str] package_version: Resource package version base basic version, common general version, enterprise enterprise version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourcePackageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ResourcePackage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourcePackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourcePackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expire_day: Optional[pulumi.Input[int]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 package_count: Optional[pulumi.Input[int]] = None,
                 package_name: Optional[pulumi.Input[str]] = None,
                 package_region: Optional[pulumi.Input[str]] = None,
                 package_spec: Optional[pulumi.Input[float]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 package_version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourcePackageArgs.__new__(ResourcePackageArgs)

            if expire_day is None and not opts.urn:
                raise TypeError("Missing required property 'expire_day'")
            __props__.__dict__["expire_day"] = expire_day
            if instance_type is None and not opts.urn:
                raise TypeError("Missing required property 'instance_type'")
            __props__.__dict__["instance_type"] = instance_type
            if package_count is None and not opts.urn:
                raise TypeError("Missing required property 'package_count'")
            __props__.__dict__["package_count"] = package_count
            __props__.__dict__["package_name"] = package_name
            if package_region is None and not opts.urn:
                raise TypeError("Missing required property 'package_region'")
            __props__.__dict__["package_region"] = package_region
            if package_spec is None and not opts.urn:
                raise TypeError("Missing required property 'package_spec'")
            __props__.__dict__["package_spec"] = package_spec
            if package_type is None and not opts.urn:
                raise TypeError("Missing required property 'package_type'")
            __props__.__dict__["package_type"] = package_type
            if package_version is None and not opts.urn:
                raise TypeError("Missing required property 'package_version'")
            __props__.__dict__["package_version"] = package_version
        super(ResourcePackage, __self__).__init__(
            'tencentcloud:Cynosdb/resourcePackage:ResourcePackage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            expire_day: Optional[pulumi.Input[int]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            package_count: Optional[pulumi.Input[int]] = None,
            package_name: Optional[pulumi.Input[str]] = None,
            package_region: Optional[pulumi.Input[str]] = None,
            package_spec: Optional[pulumi.Input[float]] = None,
            package_type: Optional[pulumi.Input[str]] = None,
            package_version: Optional[pulumi.Input[str]] = None) -> 'ResourcePackage':
        """
        Get an existing ResourcePackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] expire_day: Validity period of resource package, in days.
        :param pulumi.Input[str] instance_type: Instance Type.
        :param pulumi.Input[int] package_count: Number of purchased resource packs.
        :param pulumi.Input[str] package_name: Resource Package Name.
        :param pulumi.Input[str] package_region: Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and
               overseas.
        :param pulumi.Input[float] package_spec: Resource package size, calculated in 10000 units; Storage resources: GB.
        :param pulumi.Input[str] package_type: Resource package type: CCU computing resource package, DISK storage resource package.
        :param pulumi.Input[str] package_version: Resource package version base basic version, common general version, enterprise enterprise version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourcePackageState.__new__(_ResourcePackageState)

        __props__.__dict__["expire_day"] = expire_day
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["package_count"] = package_count
        __props__.__dict__["package_name"] = package_name
        __props__.__dict__["package_region"] = package_region
        __props__.__dict__["package_spec"] = package_spec
        __props__.__dict__["package_type"] = package_type
        __props__.__dict__["package_version"] = package_version
        return ResourcePackage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="expireDay")
    def expire_day(self) -> pulumi.Output[int]:
        """
        Validity period of resource package, in days.
        """
        return pulumi.get(self, "expire_day")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        Instance Type.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="packageCount")
    def package_count(self) -> pulumi.Output[int]:
        """
        Number of purchased resource packs.
        """
        return pulumi.get(self, "package_count")

    @property
    @pulumi.getter(name="packageName")
    def package_name(self) -> pulumi.Output[Optional[str]]:
        """
        Resource Package Name.
        """
        return pulumi.get(self, "package_name")

    @property
    @pulumi.getter(name="packageRegion")
    def package_region(self) -> pulumi.Output[str]:
        """
        Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and
        overseas.
        """
        return pulumi.get(self, "package_region")

    @property
    @pulumi.getter(name="packageSpec")
    def package_spec(self) -> pulumi.Output[float]:
        """
        Resource package size, calculated in 10000 units; Storage resources: GB.
        """
        return pulumi.get(self, "package_spec")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> pulumi.Output[str]:
        """
        Resource package type: CCU computing resource package, DISK storage resource package.
        """
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="packageVersion")
    def package_version(self) -> pulumi.Output[str]:
        """
        Resource package version base basic version, common general version, enterprise enterprise version.
        """
        return pulumi.get(self, "package_version")

