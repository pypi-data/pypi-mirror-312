# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, cluster_id=None, database=None, id=None, result_output_file=None, table=None, table_type=None, tables=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if table and not isinstance(table, str):
            raise TypeError("Expected argument 'table' to be a str")
        pulumi.set(__self__, "table", table)
        if table_type and not isinstance(table_type, str):
            raise TypeError("Expected argument 'table_type' to be a str")
        pulumi.set(__self__, "table_type", table_type)
        if tables and not isinstance(tables, list):
            raise TypeError("Expected argument 'tables' to be a list")
        pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def table(self) -> Optional[str]:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="tableType")
    def table_type(self) -> Optional[str]:
        return pulumi.get(self, "table_type")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetClusterTableResult']:
        """
        Table Name List Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "tables")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            cluster_id=self.cluster_id,
            database=self.database,
            id=self.id,
            result_output_file=self.result_output_file,
            table=self.table,
            table_type=self.table_type,
            tables=self.tables)


def get_cluster(cluster_id: Optional[str] = None,
                database: Optional[str] = None,
                result_output_file: Optional[str] = None,
                table: Optional[str] = None,
                table_type: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Use this data source to query detailed information of cynosdb cluster

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster = tencentcloud.Cynosdb.get_cluster(cluster_id="cynosdbmysql-bws8h88b",
        database="users",
        table="tb_user_name",
        table_type="all")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str database: Database name.
    :param str result_output_file: Used to save results.
    :param str table: Data Table Name.
    :param str table_type: Data table type: view: only return view, base_ Table: only returns the basic table, all: returns the view and table.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['database'] = database
    __args__['resultOutputFile'] = result_output_file
    __args__['table'] = table
    __args__['tableType'] = table_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        database=pulumi.get(__ret__, 'database'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        table=pulumi.get(__ret__, 'table'),
        table_type=pulumi.get(__ret__, 'table_type'),
        tables=pulumi.get(__ret__, 'tables'))


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(cluster_id: Optional[pulumi.Input[str]] = None,
                       database: Optional[pulumi.Input[Optional[str]]] = None,
                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       table: Optional[pulumi.Input[Optional[str]]] = None,
                       table_type: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    Use this data source to query detailed information of cynosdb cluster

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster = tencentcloud.Cynosdb.get_cluster(cluster_id="cynosdbmysql-bws8h88b",
        database="users",
        table="tb_user_name",
        table_type="all")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str database: Database name.
    :param str result_output_file: Used to save results.
    :param str table: Data Table Name.
    :param str table_type: Data table type: view: only return view, base_ Table: only returns the basic table, all: returns the view and table.
    """
    ...
