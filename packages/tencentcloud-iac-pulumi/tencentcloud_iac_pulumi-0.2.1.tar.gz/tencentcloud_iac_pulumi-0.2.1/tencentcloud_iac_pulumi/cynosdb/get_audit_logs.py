# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAuditLogsResult',
    'AwaitableGetAuditLogsResult',
    'get_audit_logs',
    'get_audit_logs_output',
]

@pulumi.output_type
class GetAuditLogsResult:
    """
    A collection of values returned by getAuditLogs.
    """
    def __init__(__self__, end_time=None, filter=None, id=None, instance_id=None, items=None, order=None, order_by=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if filter and not isinstance(filter, dict):
            raise TypeError("Expected argument 'filter' to be a dict")
        pulumi.set(__self__, "filter", filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.GetAuditLogsFilterResult']:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetAuditLogsItemResult']:
        """
        Audit log details. Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetAuditLogsResult(GetAuditLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuditLogsResult(
            end_time=self.end_time,
            filter=self.filter,
            id=self.id,
            instance_id=self.instance_id,
            items=self.items,
            order=self.order,
            order_by=self.order_by,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_audit_logs(end_time: Optional[str] = None,
                   filter: Optional[pulumi.InputType['GetAuditLogsFilterArgs']] = None,
                   instance_id: Optional[str] = None,
                   order: Optional[str] = None,
                   order_by: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   start_time: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuditLogsResult:
    """
    Use this data source to query detailed information of cynosdb audit_logs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    audit_logs = tencentcloud.Cynosdb.get_audit_logs(end_time="2023-06-18 10:00:02",
        filter=tencentcloud.cynosdb.GetAuditLogsFilterArgs(
            hosts=["30.50.207.176"],
            policy_names=["default_audit"],
            sql="SELECT @@max_allowed_packet",
            sql_type="SELECT",
            users=["keep_dts"],
        ),
        instance_id="cynosdbmysql-ins-afqx1hy0",
        order="DESC",
        order_by="timestamp",
        start_time="2023-06-18 10:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: The end time is in the format of 2017-07-12 10:29:20.
    :param pulumi.InputType['GetAuditLogsFilterArgs'] filter: Filter conditions. You can filter logs according to the set filtering criteria.
    :param str instance_id: Instance ID.
    :param str order: Sort by. The supported values include: ASC - ascending order, DESC - descending order.
    :param str order_by: Sort fields. The supported values include: timestamp - timestamp; &amp;#39;effectRows&amp;#39; - affects the number of rows; &amp;#39;execTime&amp;#39; - Execution time.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time, format: 2017-07-12 10:29:20.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['filter'] = filter
    __args__['instanceId'] = instance_id
    __args__['order'] = order
    __args__['orderBy'] = order_by
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getAuditLogs:getAuditLogs', __args__, opts=opts, typ=GetAuditLogsResult).value

    return AwaitableGetAuditLogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        filter=pulumi.get(__ret__, 'filter'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        items=pulumi.get(__ret__, 'items'),
        order=pulumi.get(__ret__, 'order'),
        order_by=pulumi.get(__ret__, 'order_by'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_audit_logs)
def get_audit_logs_output(end_time: Optional[pulumi.Input[str]] = None,
                          filter: Optional[pulumi.Input[Optional[pulumi.InputType['GetAuditLogsFilterArgs']]]] = None,
                          instance_id: Optional[pulumi.Input[str]] = None,
                          order: Optional[pulumi.Input[Optional[str]]] = None,
                          order_by: Optional[pulumi.Input[Optional[str]]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          start_time: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuditLogsResult]:
    """
    Use this data source to query detailed information of cynosdb audit_logs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    audit_logs = tencentcloud.Cynosdb.get_audit_logs(end_time="2023-06-18 10:00:02",
        filter=tencentcloud.cynosdb.GetAuditLogsFilterArgs(
            hosts=["30.50.207.176"],
            policy_names=["default_audit"],
            sql="SELECT @@max_allowed_packet",
            sql_type="SELECT",
            users=["keep_dts"],
        ),
        instance_id="cynosdbmysql-ins-afqx1hy0",
        order="DESC",
        order_by="timestamp",
        start_time="2023-06-18 10:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: The end time is in the format of 2017-07-12 10:29:20.
    :param pulumi.InputType['GetAuditLogsFilterArgs'] filter: Filter conditions. You can filter logs according to the set filtering criteria.
    :param str instance_id: Instance ID.
    :param str order: Sort by. The supported values include: ASC - ascending order, DESC - descending order.
    :param str order_by: Sort fields. The supported values include: timestamp - timestamp; &amp;#39;effectRows&amp;#39; - affects the number of rows; &amp;#39;execTime&amp;#39; - Execution time.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time, format: 2017-07-12 10:29:20.
    """
    ...
