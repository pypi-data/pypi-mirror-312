# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetResourcePackageListResult',
    'AwaitableGetResourcePackageListResult',
    'get_resource_package_list',
    'get_resource_package_list_output',
]

@pulumi.output_type
class GetResourcePackageListResult:
    """
    A collection of values returned by getResourcePackageList.
    """
    def __init__(__self__, id=None, order_bies=None, order_direction=None, package_ids=None, package_names=None, package_regions=None, package_types=None, resource_package_lists=None, result_output_file=None, statuses=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order_bies and not isinstance(order_bies, list):
            raise TypeError("Expected argument 'order_bies' to be a list")
        pulumi.set(__self__, "order_bies", order_bies)
        if order_direction and not isinstance(order_direction, str):
            raise TypeError("Expected argument 'order_direction' to be a str")
        pulumi.set(__self__, "order_direction", order_direction)
        if package_ids and not isinstance(package_ids, list):
            raise TypeError("Expected argument 'package_ids' to be a list")
        pulumi.set(__self__, "package_ids", package_ids)
        if package_names and not isinstance(package_names, list):
            raise TypeError("Expected argument 'package_names' to be a list")
        pulumi.set(__self__, "package_names", package_names)
        if package_regions and not isinstance(package_regions, list):
            raise TypeError("Expected argument 'package_regions' to be a list")
        pulumi.set(__self__, "package_regions", package_regions)
        if package_types and not isinstance(package_types, list):
            raise TypeError("Expected argument 'package_types' to be a list")
        pulumi.set(__self__, "package_types", package_types)
        if resource_package_lists and not isinstance(resource_package_lists, list):
            raise TypeError("Expected argument 'resource_package_lists' to be a list")
        pulumi.set(__self__, "resource_package_lists", resource_package_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orderBies")
    def order_bies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "order_bies")

    @property
    @pulumi.getter(name="orderDirection")
    def order_direction(self) -> Optional[str]:
        return pulumi.get(self, "order_direction")

    @property
    @pulumi.getter(name="packageIds")
    def package_ids(self) -> Optional[Sequence[str]]:
        """
        Resource Package Unique ID Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "package_ids")

    @property
    @pulumi.getter(name="packageNames")
    def package_names(self) -> Optional[Sequence[str]]:
        """
        Resource package name note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "package_names")

    @property
    @pulumi.getter(name="packageRegions")
    def package_regions(self) -> Optional[Sequence[str]]:
        """
        The resource package is used in China, which is commonly used in mainland China, and in overseas, which is commonly used in Hong Kong, Macao, Taiwan, and overseas. Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "package_regions")

    @property
    @pulumi.getter(name="packageTypes")
    def package_types(self) -> Optional[Sequence[str]]:
        """
        Resource package type CCU - Compute resource package, DISK - Store resource package Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "package_types")

    @property
    @pulumi.getter(name="resourcePackageLists")
    def resource_package_lists(self) -> Sequence['outputs.GetResourcePackageListResourcePackageListResult']:
        """
        Resource package details note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "resource_package_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        Resource package status creating - creating; Using - In use; Expired - has expired; Normal_ Finish - used up; Apply_ Refund - Applying for a refund; Refund - The fee has been refunded. Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "statuses")


class AwaitableGetResourcePackageListResult(GetResourcePackageListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcePackageListResult(
            id=self.id,
            order_bies=self.order_bies,
            order_direction=self.order_direction,
            package_ids=self.package_ids,
            package_names=self.package_names,
            package_regions=self.package_regions,
            package_types=self.package_types,
            resource_package_lists=self.resource_package_lists,
            result_output_file=self.result_output_file,
            statuses=self.statuses)


def get_resource_package_list(order_bies: Optional[Sequence[str]] = None,
                              order_direction: Optional[str] = None,
                              package_ids: Optional[Sequence[str]] = None,
                              package_names: Optional[Sequence[str]] = None,
                              package_regions: Optional[Sequence[str]] = None,
                              package_types: Optional[Sequence[str]] = None,
                              result_output_file: Optional[str] = None,
                              statuses: Optional[Sequence[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcePackageListResult:
    """
    Use this data source to query detailed information of cynosdb resource_package_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    resource_package_list = tencentcloud.Cynosdb.get_resource_package_list(order_bies=["startTime"],
        order_direction="DESC",
        package_ids=["package-hy4d2ppl"],
        package_names=["keep-package-disk"],
        package_regions=["china"],
        package_types=["DISK"],
        statuses=["using"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] order_bies: Sorting conditions supported: startTime - effective time, expireTime - expiration time, packageUsedSpec - usage capacity, and packageTotalSpec - total storage capacity. Arrange in array order;.
    :param str order_direction: Sort by, DESC Descending, ASC Ascending.
    :param Sequence[str] package_ids: Resource Package Unique ID.
    :param Sequence[str] package_names: Resource Package Name.
    :param Sequence[str] package_regions: Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and overseas.
    :param Sequence[str] package_types: Resource package type CCU - Compute resource package, DISK - Storage resource package.
    :param str result_output_file: Used to save results.
    :param Sequence[str] statuses: Resource package status creating - creating; Using - In use; Expired - has expired; Normal_ Finish - used up; Apply_ Refund - Applying for a refund; Refund - The fee has been refunded.
    """
    __args__ = dict()
    __args__['orderBies'] = order_bies
    __args__['orderDirection'] = order_direction
    __args__['packageIds'] = package_ids
    __args__['packageNames'] = package_names
    __args__['packageRegions'] = package_regions
    __args__['packageTypes'] = package_types
    __args__['resultOutputFile'] = result_output_file
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getResourcePackageList:getResourcePackageList', __args__, opts=opts, typ=GetResourcePackageListResult).value

    return AwaitableGetResourcePackageListResult(
        id=pulumi.get(__ret__, 'id'),
        order_bies=pulumi.get(__ret__, 'order_bies'),
        order_direction=pulumi.get(__ret__, 'order_direction'),
        package_ids=pulumi.get(__ret__, 'package_ids'),
        package_names=pulumi.get(__ret__, 'package_names'),
        package_regions=pulumi.get(__ret__, 'package_regions'),
        package_types=pulumi.get(__ret__, 'package_types'),
        resource_package_lists=pulumi.get(__ret__, 'resource_package_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        statuses=pulumi.get(__ret__, 'statuses'))


@_utilities.lift_output_func(get_resource_package_list)
def get_resource_package_list_output(order_bies: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     order_direction: Optional[pulumi.Input[Optional[str]]] = None,
                                     package_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     package_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     package_regions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     package_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                     statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetResourcePackageListResult]:
    """
    Use this data source to query detailed information of cynosdb resource_package_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    resource_package_list = tencentcloud.Cynosdb.get_resource_package_list(order_bies=["startTime"],
        order_direction="DESC",
        package_ids=["package-hy4d2ppl"],
        package_names=["keep-package-disk"],
        package_regions=["china"],
        package_types=["DISK"],
        statuses=["using"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] order_bies: Sorting conditions supported: startTime - effective time, expireTime - expiration time, packageUsedSpec - usage capacity, and packageTotalSpec - total storage capacity. Arrange in array order;.
    :param str order_direction: Sort by, DESC Descending, ASC Ascending.
    :param Sequence[str] package_ids: Resource Package Unique ID.
    :param Sequence[str] package_names: Resource Package Name.
    :param Sequence[str] package_regions: Resource package usage region China - common in mainland China, overseas - common in Hong Kong, Macao, Taiwan, and overseas.
    :param Sequence[str] package_types: Resource package type CCU - Compute resource package, DISK - Storage resource package.
    :param str result_output_file: Used to save results.
    :param Sequence[str] statuses: Resource package status creating - creating; Using - In use; Expired - has expired; Normal_ Finish - used up; Apply_ Refund - Applying for a refund; Refund - The fee has been refunded.
    """
    ...
