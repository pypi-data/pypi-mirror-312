# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ExportInstanceErrorLogsArgs', 'ExportInstanceErrorLogs']

@pulumi.input_type
class ExportInstanceErrorLogsArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 end_time: Optional[pulumi.Input[str]] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 key_words: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_by_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExportInstanceErrorLogs resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] end_time: Latest log time.
        :param pulumi.Input[str] file_type: File type, optional values: csv, original.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_words: keyword.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] log_levels: Log level.
        :param pulumi.Input[str] order_by: Optional value Timestamp.
        :param pulumi.Input[str] order_by_type: ASC or DESC.
        :param pulumi.Input[str] start_time: Log earliest time.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if key_words is not None:
            pulumi.set(__self__, "key_words", key_words)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_by_type is not None:
            pulumi.set(__self__, "order_by_type", order_by_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Latest log time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        """
        File type, optional values: csv, original.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        keyword.
        """
        return pulumi.get(self, "key_words")

    @key_words.setter
    def key_words(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_words", value)

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Log level.
        """
        return pulumi.get(self, "log_levels")

    @log_levels.setter
    def log_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "log_levels", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        """
        Optional value Timestamp.
        """
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderByType")
    def order_by_type(self) -> Optional[pulumi.Input[str]]:
        """
        ASC or DESC.
        """
        return pulumi.get(self, "order_by_type")

    @order_by_type.setter
    def order_by_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Log earliest time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _ExportInstanceErrorLogsState:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[str]] = None,
                 error_log_item_exports: Optional[pulumi.Input[Sequence[pulumi.Input['ExportInstanceErrorLogsErrorLogItemExportArgs']]]] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_words: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_by_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExportInstanceErrorLogs resources.
        :param pulumi.Input[str] end_time: Latest log time.
        :param pulumi.Input[Sequence[pulumi.Input['ExportInstanceErrorLogsErrorLogItemExportArgs']]] error_log_item_exports: List of instances in the read-write instance group.
        :param pulumi.Input[str] file_type: File type, optional values: csv, original.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_words: keyword.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] log_levels: Log level.
        :param pulumi.Input[str] order_by: Optional value Timestamp.
        :param pulumi.Input[str] order_by_type: ASC or DESC.
        :param pulumi.Input[str] start_time: Log earliest time.
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if error_log_item_exports is not None:
            pulumi.set(__self__, "error_log_item_exports", error_log_item_exports)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_words is not None:
            pulumi.set(__self__, "key_words", key_words)
        if log_levels is not None:
            pulumi.set(__self__, "log_levels", log_levels)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_by_type is not None:
            pulumi.set(__self__, "order_by_type", order_by_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Latest log time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="errorLogItemExports")
    def error_log_item_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ExportInstanceErrorLogsErrorLogItemExportArgs']]]]:
        """
        List of instances in the read-write instance group.
        """
        return pulumi.get(self, "error_log_item_exports")

    @error_log_item_exports.setter
    def error_log_item_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ExportInstanceErrorLogsErrorLogItemExportArgs']]]]):
        pulumi.set(self, "error_log_item_exports", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        """
        File type, optional values: csv, original.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        keyword.
        """
        return pulumi.get(self, "key_words")

    @key_words.setter
    def key_words(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_words", value)

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Log level.
        """
        return pulumi.get(self, "log_levels")

    @log_levels.setter
    def log_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "log_levels", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        """
        Optional value Timestamp.
        """
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderByType")
    def order_by_type(self) -> Optional[pulumi.Input[str]]:
        """
        ASC or DESC.
        """
        return pulumi.get(self, "order_by_type")

    @order_by_type.setter
    def order_by_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Log earliest time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


class ExportInstanceErrorLogs(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_words: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_by_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb export_instance_error_logs

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        export_instance_error_logs = tencentcloud.cynosdb.ExportInstanceErrorLogs("exportInstanceErrorLogs",
            end_time="2022-01-01 14:00:00",
            file_type="csv",
            instance_id="cynosdbmysql-ins-afqx1hy0",
            key_words=["content"],
            log_levels=["note"],
            order_by="Timestamp",
            order_by_type="ASC",
            start_time="2022-01-01 12:00:00")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_time: Latest log time.
        :param pulumi.Input[str] file_type: File type, optional values: csv, original.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_words: keyword.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] log_levels: Log level.
        :param pulumi.Input[str] order_by: Optional value Timestamp.
        :param pulumi.Input[str] order_by_type: ASC or DESC.
        :param pulumi.Input[str] start_time: Log earliest time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExportInstanceErrorLogsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb export_instance_error_logs

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        export_instance_error_logs = tencentcloud.cynosdb.ExportInstanceErrorLogs("exportInstanceErrorLogs",
            end_time="2022-01-01 14:00:00",
            file_type="csv",
            instance_id="cynosdbmysql-ins-afqx1hy0",
            key_words=["content"],
            log_levels=["note"],
            order_by="Timestamp",
            order_by_type="ASC",
            start_time="2022-01-01 12:00:00")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ExportInstanceErrorLogsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExportInstanceErrorLogsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_words: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_by_type: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExportInstanceErrorLogsArgs.__new__(ExportInstanceErrorLogsArgs)

            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["file_type"] = file_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["key_words"] = key_words
            __props__.__dict__["log_levels"] = log_levels
            __props__.__dict__["order_by"] = order_by
            __props__.__dict__["order_by_type"] = order_by_type
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["error_log_item_exports"] = None
        super(ExportInstanceErrorLogs, __self__).__init__(
            'tencentcloud:Cynosdb/exportInstanceErrorLogs:ExportInstanceErrorLogs',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            error_log_item_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExportInstanceErrorLogsErrorLogItemExportArgs']]]]] = None,
            file_type: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            key_words: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            log_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            order_by: Optional[pulumi.Input[str]] = None,
            order_by_type: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None) -> 'ExportInstanceErrorLogs':
        """
        Get an existing ExportInstanceErrorLogs resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_time: Latest log time.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ExportInstanceErrorLogsErrorLogItemExportArgs']]]] error_log_item_exports: List of instances in the read-write instance group.
        :param pulumi.Input[str] file_type: File type, optional values: csv, original.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_words: keyword.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] log_levels: Log level.
        :param pulumi.Input[str] order_by: Optional value Timestamp.
        :param pulumi.Input[str] order_by_type: ASC or DESC.
        :param pulumi.Input[str] start_time: Log earliest time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExportInstanceErrorLogsState.__new__(_ExportInstanceErrorLogsState)

        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["error_log_item_exports"] = error_log_item_exports
        __props__.__dict__["file_type"] = file_type
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_words"] = key_words
        __props__.__dict__["log_levels"] = log_levels
        __props__.__dict__["order_by"] = order_by
        __props__.__dict__["order_by_type"] = order_by_type
        __props__.__dict__["start_time"] = start_time
        return ExportInstanceErrorLogs(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[Optional[str]]:
        """
        Latest log time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="errorLogItemExports")
    def error_log_item_exports(self) -> pulumi.Output[Sequence['outputs.ExportInstanceErrorLogsErrorLogItemExport']]:
        """
        List of instances in the read-write instance group.
        """
        return pulumi.get(self, "error_log_item_exports")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> pulumi.Output[Optional[str]]:
        """
        File type, optional values: csv, original.
        """
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        keyword.
        """
        return pulumi.get(self, "key_words")

    @property
    @pulumi.getter(name="logLevels")
    def log_levels(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Log level.
        """
        return pulumi.get(self, "log_levels")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> pulumi.Output[Optional[str]]:
        """
        Optional value Timestamp.
        """
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderByType")
    def order_by_type(self) -> pulumi.Output[Optional[str]]:
        """
        ASC or DESC.
        """
        return pulumi.get(self, "order_by_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[str]]:
        """
        Log earliest time.
        """
        return pulumi.get(self, "start_time")

