# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AccountPrivilegesArgs', 'AccountPrivileges']

@pulumi.input_type
class AccountPrivilegesArgs:
    def __init__(__self__, *,
                 account_name: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 global_privileges: pulumi.Input[Sequence[pulumi.Input[str]]],
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]] = None):
        """
        The set of arguments for constructing a AccountPrivileges resource.
        :param pulumi.Input[str] account_name: Account.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Array of global permissions.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]] database_privileges: Array of database permissions.
        :param pulumi.Input[str] host: Host, default `%`.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]] table_privileges: array of table permissions.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "global_privileges", global_privileges)
        if database_privileges is not None:
            pulumi.set(__self__, "database_privileges", database_privileges)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if table_privileges is not None:
            pulumi.set(__self__, "table_privileges", table_privileges)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Input[str]:
        """
        Account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Array of global permissions.
        """
        return pulumi.get(self, "global_privileges")

    @global_privileges.setter
    def global_privileges(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "global_privileges", value)

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]:
        """
        Array of database permissions.
        """
        return pulumi.get(self, "database_privileges")

    @database_privileges.setter
    def database_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]):
        pulumi.set(self, "database_privileges", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host, default `%`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]:
        """
        array of table permissions.
        """
        return pulumi.get(self, "table_privileges")

    @table_privileges.setter
    def table_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]):
        pulumi.set(self, "table_privileges", value)


@pulumi.input_type
class _AccountPrivilegesState:
    def __init__(__self__, *,
                 account_name: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]] = None):
        """
        Input properties used for looking up and filtering AccountPrivileges resources.
        :param pulumi.Input[str] account_name: Account.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]] database_privileges: Array of database permissions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Array of global permissions.
        :param pulumi.Input[str] host: Host, default `%`.
        :param pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]] table_privileges: array of table permissions.
        """
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if database_privileges is not None:
            pulumi.set(__self__, "database_privileges", database_privileges)
        if global_privileges is not None:
            pulumi.set(__self__, "global_privileges", global_privileges)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if table_privileges is not None:
            pulumi.set(__self__, "table_privileges", table_privileges)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        Account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]:
        """
        Array of database permissions.
        """
        return pulumi.get(self, "database_privileges")

    @database_privileges.setter
    def database_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesDatabasePrivilegeArgs']]]]):
        pulumi.set(self, "database_privileges", value)

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of global permissions.
        """
        return pulumi.get(self, "global_privileges")

    @global_privileges.setter
    def global_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "global_privileges", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host, default `%`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]:
        """
        array of table permissions.
        """
        return pulumi.get(self, "table_privileges")

    @table_privileges.setter
    def table_privileges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccountPrivilegesTablePrivilegeArgs']]]]):
        pulumi.set(self, "table_privileges", value)


class AccountPrivileges(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb account_privileges

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        account_privileges = tencentcloud.cynosdb.AccountPrivileges("accountPrivileges",
            account_name="test",
            cluster_id="cynosdbmysql-bws8h88b",
            database_privileges=[tencentcloud.cynosdb.AccountPrivilegesDatabasePrivilegeArgs(
                db="users",
                privileges=[
                    "DROP",
                    "REFERENCES",
                    "INDEX",
                    "CREATE VIEW",
                    "INSERT",
                    "EVENT",
                ],
            )],
            global_privileges=[
                "CREATE",
                "DROP",
                "ALTER",
                "CREATE TEMPORARY TABLES",
                "CREATE VIEW",
            ],
            host="%",
            table_privileges=[tencentcloud.cynosdb.AccountPrivilegesTablePrivilegeArgs(
                db="users",
                privileges=[
                    "ALTER",
                    "REFERENCES",
                    "SHOW VIEW",
                ],
                table_name="tb_user_name",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb account_privileges can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/accountPrivileges:AccountPrivileges account_privileges account_privileges_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Account.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]] database_privileges: Array of database permissions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Array of global permissions.
        :param pulumi.Input[str] host: Host, default `%`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]] table_privileges: array of table permissions.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountPrivilegesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb account_privileges

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        account_privileges = tencentcloud.cynosdb.AccountPrivileges("accountPrivileges",
            account_name="test",
            cluster_id="cynosdbmysql-bws8h88b",
            database_privileges=[tencentcloud.cynosdb.AccountPrivilegesDatabasePrivilegeArgs(
                db="users",
                privileges=[
                    "DROP",
                    "REFERENCES",
                    "INDEX",
                    "CREATE VIEW",
                    "INSERT",
                    "EVENT",
                ],
            )],
            global_privileges=[
                "CREATE",
                "DROP",
                "ALTER",
                "CREATE TEMPORARY TABLES",
                "CREATE VIEW",
            ],
            host="%",
            table_privileges=[tencentcloud.cynosdb.AccountPrivilegesTablePrivilegeArgs(
                db="users",
                privileges=[
                    "ALTER",
                    "REFERENCES",
                    "SHOW VIEW",
                ],
                table_name="tb_user_name",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb account_privileges can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/accountPrivileges:AccountPrivileges account_privileges account_privileges_id
        ```

        :param str resource_name: The name of the resource.
        :param AccountPrivilegesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountPrivilegesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_name: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]]] = None,
                 global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountPrivilegesArgs.__new__(AccountPrivilegesArgs)

            if account_name is None and not opts.urn:
                raise TypeError("Missing required property 'account_name'")
            __props__.__dict__["account_name"] = account_name
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["database_privileges"] = database_privileges
            if global_privileges is None and not opts.urn:
                raise TypeError("Missing required property 'global_privileges'")
            __props__.__dict__["global_privileges"] = global_privileges
            __props__.__dict__["host"] = host
            __props__.__dict__["table_privileges"] = table_privileges
        super(AccountPrivileges, __self__).__init__(
            'tencentcloud:Cynosdb/accountPrivileges:AccountPrivileges',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_name: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            database_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]]] = None,
            global_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            host: Optional[pulumi.Input[str]] = None,
            table_privileges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]]] = None) -> 'AccountPrivileges':
        """
        Get an existing AccountPrivileges resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_name: Account.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesDatabasePrivilegeArgs']]]] database_privileges: Array of database permissions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_privileges: Array of global permissions.
        :param pulumi.Input[str] host: Host, default `%`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AccountPrivilegesTablePrivilegeArgs']]]] table_privileges: array of table permissions.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountPrivilegesState.__new__(_AccountPrivilegesState)

        __props__.__dict__["account_name"] = account_name
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["database_privileges"] = database_privileges
        __props__.__dict__["global_privileges"] = global_privileges
        __props__.__dict__["host"] = host
        __props__.__dict__["table_privileges"] = table_privileges
        return AccountPrivileges(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> pulumi.Output[str]:
        """
        Account.
        """
        return pulumi.get(self, "account_name")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesDatabasePrivilege']]]:
        """
        Array of database permissions.
        """
        return pulumi.get(self, "database_privileges")

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> pulumi.Output[Sequence[str]]:
        """
        Array of global permissions.
        """
        return pulumi.get(self, "global_privileges")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        Host, default `%`.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> pulumi.Output[Optional[Sequence['outputs.AccountPrivilegesTablePrivilege']]]:
        """
        array of table permissions.
        """
        return pulumi.get(self, "table_privileges")

