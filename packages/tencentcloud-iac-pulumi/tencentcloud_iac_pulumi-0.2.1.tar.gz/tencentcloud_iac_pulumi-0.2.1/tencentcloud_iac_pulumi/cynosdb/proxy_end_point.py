# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProxyEndPointArgs', 'ProxyEndPoint']

@pulumi.input_type
class ProxyEndPointArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 unique_subnet_id: pulumi.Input[str],
                 unique_vpc_id: pulumi.Input[str],
                 access_mode: Optional[pulumi.Input[str]] = None,
                 auto_add_ro: Optional[pulumi.Input[str]] = None,
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 consistency_time_out: Optional[pulumi.Input[int]] = None,
                 consistency_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fail_over: Optional[pulumi.Input[str]] = None,
                 instance_weights: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 rw_type: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trans_split: Optional[pulumi.Input[bool]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 weight_mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProxyEndPoint resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        :param pulumi.Input[str] access_mode: Connection mode: nearby, balance.
        :param pulumi.Input[str] auto_add_ro: Do you want to automatically add read-only instances? Yes - Yes, no - Do not automatically add.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[int] consistency_time_out: Consistency timeout.
        :param pulumi.Input[str] consistency_type: Consistency type: event, global, session.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] fail_over: Enable Failover. yes or no.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]] instance_weights: Instance Weight.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[str] rw_type: Read and write attributes: READWRITE, READONLY.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[bool] trans_split: Transaction splitting.
        :param pulumi.Input[str] vip: VIP Information.
        :param pulumi.Input[int] vport: Port Information.
        :param pulumi.Input[str] weight_mode: Weight mode: system system allocation, custom customization.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "unique_subnet_id", unique_subnet_id)
        pulumi.set(__self__, "unique_vpc_id", unique_vpc_id)
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if auto_add_ro is not None:
            pulumi.set(__self__, "auto_add_ro", auto_add_ro)
        if connection_pool_time_out is not None:
            pulumi.set(__self__, "connection_pool_time_out", connection_pool_time_out)
        if connection_pool_type is not None:
            pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        if consistency_time_out is not None:
            pulumi.set(__self__, "consistency_time_out", consistency_time_out)
        if consistency_type is not None:
            pulumi.set(__self__, "consistency_type", consistency_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if instance_weights is not None:
            pulumi.set(__self__, "instance_weights", instance_weights)
        if open_connection_pool is not None:
            pulumi.set(__self__, "open_connection_pool", open_connection_pool)
        if rw_type is not None:
            pulumi.set(__self__, "rw_type", rw_type)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if trans_split is not None:
            pulumi.set(__self__, "trans_split", trans_split)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)
        if weight_mode is not None:
            pulumi.set(__self__, "weight_mode", weight_mode)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="uniqueSubnetId")
    def unique_subnet_id(self) -> pulumi.Input[str]:
        """
        The private network subnet ID is consistent with the cluster subnet ID by default.
        """
        return pulumi.get(self, "unique_subnet_id")

    @unique_subnet_id.setter
    def unique_subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "unique_subnet_id", value)

    @property
    @pulumi.getter(name="uniqueVpcId")
    def unique_vpc_id(self) -> pulumi.Input[str]:
        """
        Private network ID, which is consistent with the cluster private network ID by default.
        """
        return pulumi.get(self, "unique_vpc_id")

    @unique_vpc_id.setter
    def unique_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "unique_vpc_id", value)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Connection mode: nearby, balance.
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter(name="autoAddRo")
    def auto_add_ro(self) -> Optional[pulumi.Input[str]]:
        """
        Do you want to automatically add read-only instances? Yes - Yes, no - Do not automatically add.
        """
        return pulumi.get(self, "auto_add_ro")

    @auto_add_ro.setter
    def auto_add_ro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_add_ro", value)

    @property
    @pulumi.getter(name="connectionPoolTimeOut")
    def connection_pool_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Connection pool threshold: unit (second).
        """
        return pulumi.get(self, "connection_pool_time_out")

    @connection_pool_time_out.setter
    def connection_pool_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_pool_time_out", value)

    @property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> Optional[pulumi.Input[str]]:
        """
        Connection pool type: SessionConnectionPool (session level Connection pool).
        """
        return pulumi.get(self, "connection_pool_type")

    @connection_pool_type.setter
    def connection_pool_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_pool_type", value)

    @property
    @pulumi.getter(name="consistencyTimeOut")
    def consistency_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Consistency timeout.
        """
        return pulumi.get(self, "consistency_time_out")

    @consistency_time_out.setter
    def consistency_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "consistency_time_out", value)

    @property
    @pulumi.getter(name="consistencyType")
    def consistency_type(self) -> Optional[pulumi.Input[str]]:
        """
        Consistency type: event, global, session.
        """
        return pulumi.get(self, "consistency_type")

    @consistency_type.setter
    def consistency_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consistency_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Failover. yes or no.
        """
        return pulumi.get(self, "fail_over")

    @fail_over.setter
    def fail_over(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_over", value)

    @property
    @pulumi.getter(name="instanceWeights")
    def instance_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]]]:
        """
        Instance Weight.
        """
        return pulumi.get(self, "instance_weights")

    @instance_weights.setter
    def instance_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]]]):
        pulumi.set(self, "instance_weights", value)

    @property
    @pulumi.getter(name="openConnectionPool")
    def open_connection_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable Connection pool, yes - enable, no - do not enable.
        """
        return pulumi.get(self, "open_connection_pool")

    @open_connection_pool.setter
    def open_connection_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_connection_pool", value)

    @property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> Optional[pulumi.Input[str]]:
        """
        Read and write attributes: READWRITE, READONLY.
        """
        return pulumi.get(self, "rw_type")

    @rw_type.setter
    def rw_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rw_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security Group ID Array.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="transSplit")
    def trans_split(self) -> Optional[pulumi.Input[bool]]:
        """
        Transaction splitting.
        """
        return pulumi.get(self, "trans_split")

    @trans_split.setter
    def trans_split(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trans_split", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        VIP Information.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Port Information.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)

    @property
    @pulumi.getter(name="weightMode")
    def weight_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Weight mode: system system allocation, custom customization.
        """
        return pulumi.get(self, "weight_mode")

    @weight_mode.setter
    def weight_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight_mode", value)


@pulumi.input_type
class _ProxyEndPointState:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 auto_add_ro: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 consistency_time_out: Optional[pulumi.Input[int]] = None,
                 consistency_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fail_over: Optional[pulumi.Input[str]] = None,
                 instance_group_id: Optional[pulumi.Input[str]] = None,
                 instance_weights: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 proxy_group_id: Optional[pulumi.Input[str]] = None,
                 rw_type: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trans_split: Optional[pulumi.Input[bool]] = None,
                 unique_subnet_id: Optional[pulumi.Input[str]] = None,
                 unique_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 weight_mode: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProxyEndPoint resources.
        :param pulumi.Input[str] access_mode: Connection mode: nearby, balance.
        :param pulumi.Input[str] auto_add_ro: Do you want to automatically add read-only instances? Yes - Yes, no - Do not automatically add.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[int] consistency_time_out: Consistency timeout.
        :param pulumi.Input[str] consistency_type: Consistency type: event, global, session.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] fail_over: Enable Failover. yes or no.
        :param pulumi.Input[str] instance_group_id: Instance Group ID.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]] instance_weights: Instance Weight.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[str] proxy_group_id: Proxy Group ID.
        :param pulumi.Input[str] rw_type: Read and write attributes: READWRITE, READONLY.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[bool] trans_split: Transaction splitting.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        :param pulumi.Input[str] vip: VIP Information.
        :param pulumi.Input[int] vport: Port Information.
        :param pulumi.Input[str] weight_mode: Weight mode: system system allocation, custom customization.
        """
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if auto_add_ro is not None:
            pulumi.set(__self__, "auto_add_ro", auto_add_ro)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if connection_pool_time_out is not None:
            pulumi.set(__self__, "connection_pool_time_out", connection_pool_time_out)
        if connection_pool_type is not None:
            pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        if consistency_time_out is not None:
            pulumi.set(__self__, "consistency_time_out", consistency_time_out)
        if consistency_type is not None:
            pulumi.set(__self__, "consistency_type", consistency_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if fail_over is not None:
            pulumi.set(__self__, "fail_over", fail_over)
        if instance_group_id is not None:
            pulumi.set(__self__, "instance_group_id", instance_group_id)
        if instance_weights is not None:
            pulumi.set(__self__, "instance_weights", instance_weights)
        if open_connection_pool is not None:
            pulumi.set(__self__, "open_connection_pool", open_connection_pool)
        if proxy_group_id is not None:
            pulumi.set(__self__, "proxy_group_id", proxy_group_id)
        if rw_type is not None:
            pulumi.set(__self__, "rw_type", rw_type)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if trans_split is not None:
            pulumi.set(__self__, "trans_split", trans_split)
        if unique_subnet_id is not None:
            pulumi.set(__self__, "unique_subnet_id", unique_subnet_id)
        if unique_vpc_id is not None:
            pulumi.set(__self__, "unique_vpc_id", unique_vpc_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)
        if weight_mode is not None:
            pulumi.set(__self__, "weight_mode", weight_mode)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Connection mode: nearby, balance.
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter(name="autoAddRo")
    def auto_add_ro(self) -> Optional[pulumi.Input[str]]:
        """
        Do you want to automatically add read-only instances? Yes - Yes, no - Do not automatically add.
        """
        return pulumi.get(self, "auto_add_ro")

    @auto_add_ro.setter
    def auto_add_ro(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_add_ro", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="connectionPoolTimeOut")
    def connection_pool_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Connection pool threshold: unit (second).
        """
        return pulumi.get(self, "connection_pool_time_out")

    @connection_pool_time_out.setter
    def connection_pool_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_pool_time_out", value)

    @property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> Optional[pulumi.Input[str]]:
        """
        Connection pool type: SessionConnectionPool (session level Connection pool).
        """
        return pulumi.get(self, "connection_pool_type")

    @connection_pool_type.setter
    def connection_pool_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_pool_type", value)

    @property
    @pulumi.getter(name="consistencyTimeOut")
    def consistency_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Consistency timeout.
        """
        return pulumi.get(self, "consistency_time_out")

    @consistency_time_out.setter
    def consistency_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "consistency_time_out", value)

    @property
    @pulumi.getter(name="consistencyType")
    def consistency_type(self) -> Optional[pulumi.Input[str]]:
        """
        Consistency type: event, global, session.
        """
        return pulumi.get(self, "consistency_type")

    @consistency_type.setter
    def consistency_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consistency_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Failover. yes or no.
        """
        return pulumi.get(self, "fail_over")

    @fail_over.setter
    def fail_over(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fail_over", value)

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Group ID.
        """
        return pulumi.get(self, "instance_group_id")

    @instance_group_id.setter
    def instance_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_group_id", value)

    @property
    @pulumi.getter(name="instanceWeights")
    def instance_weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]]]:
        """
        Instance Weight.
        """
        return pulumi.get(self, "instance_weights")

    @instance_weights.setter
    def instance_weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyEndPointInstanceWeightArgs']]]]):
        pulumi.set(self, "instance_weights", value)

    @property
    @pulumi.getter(name="openConnectionPool")
    def open_connection_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable Connection pool, yes - enable, no - do not enable.
        """
        return pulumi.get(self, "open_connection_pool")

    @open_connection_pool.setter
    def open_connection_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_connection_pool", value)

    @property
    @pulumi.getter(name="proxyGroupId")
    def proxy_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy Group ID.
        """
        return pulumi.get(self, "proxy_group_id")

    @proxy_group_id.setter
    def proxy_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_group_id", value)

    @property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> Optional[pulumi.Input[str]]:
        """
        Read and write attributes: READWRITE, READONLY.
        """
        return pulumi.get(self, "rw_type")

    @rw_type.setter
    def rw_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rw_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security Group ID Array.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="transSplit")
    def trans_split(self) -> Optional[pulumi.Input[bool]]:
        """
        Transaction splitting.
        """
        return pulumi.get(self, "trans_split")

    @trans_split.setter
    def trans_split(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trans_split", value)

    @property
    @pulumi.getter(name="uniqueSubnetId")
    def unique_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The private network subnet ID is consistent with the cluster subnet ID by default.
        """
        return pulumi.get(self, "unique_subnet_id")

    @unique_subnet_id.setter
    def unique_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_subnet_id", value)

    @property
    @pulumi.getter(name="uniqueVpcId")
    def unique_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID, which is consistent with the cluster private network ID by default.
        """
        return pulumi.get(self, "unique_vpc_id")

    @unique_vpc_id.setter
    def unique_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_vpc_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        VIP Information.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Port Information.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)

    @property
    @pulumi.getter(name="weightMode")
    def weight_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Weight mode: system system allocation, custom customization.
        """
        return pulumi.get(self, "weight_mode")

    @weight_mode.setter
    def weight_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight_mode", value)


class ProxyEndPoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 auto_add_ro: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 consistency_time_out: Optional[pulumi.Input[int]] = None,
                 consistency_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fail_over: Optional[pulumi.Input[str]] = None,
                 instance_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyEndPointInstanceWeightArgs']]]]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 rw_type: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trans_split: Optional[pulumi.Input[bool]] = None,
                 unique_subnet_id: Optional[pulumi.Input[str]] = None,
                 unique_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 weight_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb proxy_end_point

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr")
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        ### Open connection pool

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            connection_pool_time_out=30,
            connection_pool_type="SessionConnectionPool",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="yes",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        ### Close connection pool

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="no",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            consistency_time_out=30,
            consistency_type="global",
            fail_over="yes",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="no",
            rw_type="READWRITE",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-rikr6z4o",
                weight=1,
            )],
            open_connection_pool="no",
            rw_type="READONLY",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        ### Comprehensive parameter examples

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            access_mode="nearby",
            auto_add_ro="yes",
            cluster_id="cynosdbmysql-bws8h88b",
            connection_pool_time_out=30,
            connection_pool_type="SessionConnectionPool",
            consistency_time_out=30,
            consistency_type="global",
            description="desc value",
            fail_over="yes",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="yes",
            rw_type="READWRITE",
            security_group_ids=["sg-7kpsbxdb"],
            trans_split=True,
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.118",
            vport=3306,
            weight_mode="system")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_mode: Connection mode: nearby, balance.
        :param pulumi.Input[str] auto_add_ro: Do you want to automatically add read-only instances? Yes - Yes, no - Do not automatically add.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[int] consistency_time_out: Consistency timeout.
        :param pulumi.Input[str] consistency_type: Consistency type: event, global, session.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] fail_over: Enable Failover. yes or no.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyEndPointInstanceWeightArgs']]]] instance_weights: Instance Weight.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[str] rw_type: Read and write attributes: READWRITE, READONLY.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[bool] trans_split: Transaction splitting.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        :param pulumi.Input[str] vip: VIP Information.
        :param pulumi.Input[int] vport: Port Information.
        :param pulumi.Input[str] weight_mode: Weight mode: system system allocation, custom customization.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProxyEndPointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb proxy_end_point

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr")
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        ### Open connection pool

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            connection_pool_time_out=30,
            connection_pool_type="SessionConnectionPool",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="yes",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        ### Close connection pool

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="no",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            consistency_time_out=30,
            consistency_type="global",
            fail_over="yes",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="no",
            rw_type="READWRITE",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-rikr6z4o",
                weight=1,
            )],
            open_connection_pool="no",
            rw_type="READONLY",
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.108",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        ### Comprehensive parameter examples

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_end_point = tencentcloud.cynosdb.ProxyEndPoint("proxyEndPoint",
            access_mode="nearby",
            auto_add_ro="yes",
            cluster_id="cynosdbmysql-bws8h88b",
            connection_pool_time_out=30,
            connection_pool_type="SessionConnectionPool",
            consistency_time_out=30,
            consistency_type="global",
            description="desc value",
            fail_over="yes",
            instance_weights=[tencentcloud.cynosdb.ProxyEndPointInstanceWeightArgs(
                instance_id="cynosdbmysql-ins-afqx1hy0",
                weight=1,
            )],
            open_connection_pool="yes",
            rw_type="READWRITE",
            security_group_ids=["sg-7kpsbxdb"],
            trans_split=True,
            unique_subnet_id="subnet-dwj7ipnc",
            unique_vpc_id="vpc-4owdpnwr",
            vip="172.16.112.118",
            vport=3306,
            weight_mode="system")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ProxyEndPointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxyEndPointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_mode: Optional[pulumi.Input[str]] = None,
                 auto_add_ro: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 consistency_time_out: Optional[pulumi.Input[int]] = None,
                 consistency_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 fail_over: Optional[pulumi.Input[str]] = None,
                 instance_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyEndPointInstanceWeightArgs']]]]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 rw_type: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trans_split: Optional[pulumi.Input[bool]] = None,
                 unique_subnet_id: Optional[pulumi.Input[str]] = None,
                 unique_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 weight_mode: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxyEndPointArgs.__new__(ProxyEndPointArgs)

            __props__.__dict__["access_mode"] = access_mode
            __props__.__dict__["auto_add_ro"] = auto_add_ro
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["connection_pool_time_out"] = connection_pool_time_out
            __props__.__dict__["connection_pool_type"] = connection_pool_type
            __props__.__dict__["consistency_time_out"] = consistency_time_out
            __props__.__dict__["consistency_type"] = consistency_type
            __props__.__dict__["description"] = description
            __props__.__dict__["fail_over"] = fail_over
            __props__.__dict__["instance_weights"] = instance_weights
            __props__.__dict__["open_connection_pool"] = open_connection_pool
            __props__.__dict__["rw_type"] = rw_type
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["trans_split"] = trans_split
            if unique_subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'unique_subnet_id'")
            __props__.__dict__["unique_subnet_id"] = unique_subnet_id
            if unique_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'unique_vpc_id'")
            __props__.__dict__["unique_vpc_id"] = unique_vpc_id
            __props__.__dict__["vip"] = vip
            __props__.__dict__["vport"] = vport
            __props__.__dict__["weight_mode"] = weight_mode
            __props__.__dict__["instance_group_id"] = None
            __props__.__dict__["proxy_group_id"] = None
        super(ProxyEndPoint, __self__).__init__(
            'tencentcloud:Cynosdb/proxyEndPoint:ProxyEndPoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_mode: Optional[pulumi.Input[str]] = None,
            auto_add_ro: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            connection_pool_time_out: Optional[pulumi.Input[int]] = None,
            connection_pool_type: Optional[pulumi.Input[str]] = None,
            consistency_time_out: Optional[pulumi.Input[int]] = None,
            consistency_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            fail_over: Optional[pulumi.Input[str]] = None,
            instance_group_id: Optional[pulumi.Input[str]] = None,
            instance_weights: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyEndPointInstanceWeightArgs']]]]] = None,
            open_connection_pool: Optional[pulumi.Input[str]] = None,
            proxy_group_id: Optional[pulumi.Input[str]] = None,
            rw_type: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            trans_split: Optional[pulumi.Input[bool]] = None,
            unique_subnet_id: Optional[pulumi.Input[str]] = None,
            unique_vpc_id: Optional[pulumi.Input[str]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[int]] = None,
            weight_mode: Optional[pulumi.Input[str]] = None) -> 'ProxyEndPoint':
        """
        Get an existing ProxyEndPoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_mode: Connection mode: nearby, balance.
        :param pulumi.Input[str] auto_add_ro: Do you want to automatically add read-only instances? Yes - Yes, no - Do not automatically add.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[int] consistency_time_out: Consistency timeout.
        :param pulumi.Input[str] consistency_type: Consistency type: event, global, session.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] fail_over: Enable Failover. yes or no.
        :param pulumi.Input[str] instance_group_id: Instance Group ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyEndPointInstanceWeightArgs']]]] instance_weights: Instance Weight.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[str] proxy_group_id: Proxy Group ID.
        :param pulumi.Input[str] rw_type: Read and write attributes: READWRITE, READONLY.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[bool] trans_split: Transaction splitting.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        :param pulumi.Input[str] vip: VIP Information.
        :param pulumi.Input[int] vport: Port Information.
        :param pulumi.Input[str] weight_mode: Weight mode: system system allocation, custom customization.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProxyEndPointState.__new__(_ProxyEndPointState)

        __props__.__dict__["access_mode"] = access_mode
        __props__.__dict__["auto_add_ro"] = auto_add_ro
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["connection_pool_time_out"] = connection_pool_time_out
        __props__.__dict__["connection_pool_type"] = connection_pool_type
        __props__.__dict__["consistency_time_out"] = consistency_time_out
        __props__.__dict__["consistency_type"] = consistency_type
        __props__.__dict__["description"] = description
        __props__.__dict__["fail_over"] = fail_over
        __props__.__dict__["instance_group_id"] = instance_group_id
        __props__.__dict__["instance_weights"] = instance_weights
        __props__.__dict__["open_connection_pool"] = open_connection_pool
        __props__.__dict__["proxy_group_id"] = proxy_group_id
        __props__.__dict__["rw_type"] = rw_type
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["trans_split"] = trans_split
        __props__.__dict__["unique_subnet_id"] = unique_subnet_id
        __props__.__dict__["unique_vpc_id"] = unique_vpc_id
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vport"] = vport
        __props__.__dict__["weight_mode"] = weight_mode
        return ProxyEndPoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> pulumi.Output[str]:
        """
        Connection mode: nearby, balance.
        """
        return pulumi.get(self, "access_mode")

    @property
    @pulumi.getter(name="autoAddRo")
    def auto_add_ro(self) -> pulumi.Output[str]:
        """
        Do you want to automatically add read-only instances? Yes - Yes, no - Do not automatically add.
        """
        return pulumi.get(self, "auto_add_ro")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="connectionPoolTimeOut")
    def connection_pool_time_out(self) -> pulumi.Output[int]:
        """
        Connection pool threshold: unit (second).
        """
        return pulumi.get(self, "connection_pool_time_out")

    @property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> pulumi.Output[str]:
        """
        Connection pool type: SessionConnectionPool (session level Connection pool).
        """
        return pulumi.get(self, "connection_pool_type")

    @property
    @pulumi.getter(name="consistencyTimeOut")
    def consistency_time_out(self) -> pulumi.Output[int]:
        """
        Consistency timeout.
        """
        return pulumi.get(self, "consistency_time_out")

    @property
    @pulumi.getter(name="consistencyType")
    def consistency_type(self) -> pulumi.Output[str]:
        """
        Consistency type: event, global, session.
        """
        return pulumi.get(self, "consistency_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failOver")
    def fail_over(self) -> pulumi.Output[str]:
        """
        Enable Failover. yes or no.
        """
        return pulumi.get(self, "fail_over")

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> pulumi.Output[str]:
        """
        Instance Group ID.
        """
        return pulumi.get(self, "instance_group_id")

    @property
    @pulumi.getter(name="instanceWeights")
    def instance_weights(self) -> pulumi.Output[Sequence['outputs.ProxyEndPointInstanceWeight']]:
        """
        Instance Weight.
        """
        return pulumi.get(self, "instance_weights")

    @property
    @pulumi.getter(name="openConnectionPool")
    def open_connection_pool(self) -> pulumi.Output[str]:
        """
        Whether to enable Connection pool, yes - enable, no - do not enable.
        """
        return pulumi.get(self, "open_connection_pool")

    @property
    @pulumi.getter(name="proxyGroupId")
    def proxy_group_id(self) -> pulumi.Output[str]:
        """
        Proxy Group ID.
        """
        return pulumi.get(self, "proxy_group_id")

    @property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> pulumi.Output[str]:
        """
        Read and write attributes: READWRITE, READONLY.
        """
        return pulumi.get(self, "rw_type")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security Group ID Array.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="transSplit")
    def trans_split(self) -> pulumi.Output[bool]:
        """
        Transaction splitting.
        """
        return pulumi.get(self, "trans_split")

    @property
    @pulumi.getter(name="uniqueSubnetId")
    def unique_subnet_id(self) -> pulumi.Output[str]:
        """
        The private network subnet ID is consistent with the cluster subnet ID by default.
        """
        return pulumi.get(self, "unique_subnet_id")

    @property
    @pulumi.getter(name="uniqueVpcId")
    def unique_vpc_id(self) -> pulumi.Output[str]:
        """
        Private network ID, which is consistent with the cluster private network ID by default.
        """
        return pulumi.get(self, "unique_vpc_id")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        VIP Information.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[int]:
        """
        Port Information.
        """
        return pulumi.get(self, "vport")

    @property
    @pulumi.getter(name="weightMode")
    def weight_mode(self) -> pulumi.Output[str]:
        """
        Weight mode: system system allocation, custom customization.
        """
        return pulumi.get(self, "weight_mode")

