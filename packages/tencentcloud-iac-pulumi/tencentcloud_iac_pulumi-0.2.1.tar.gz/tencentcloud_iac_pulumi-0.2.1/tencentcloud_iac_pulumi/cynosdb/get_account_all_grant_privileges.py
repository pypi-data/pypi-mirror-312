# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAccountAllGrantPrivilegesResult',
    'AwaitableGetAccountAllGrantPrivilegesResult',
    'get_account_all_grant_privileges',
    'get_account_all_grant_privileges_output',
]

@pulumi.output_type
class GetAccountAllGrantPrivilegesResult:
    """
    A collection of values returned by getAccountAllGrantPrivileges.
    """
    def __init__(__self__, account=None, cluster_id=None, database_privileges=None, global_privileges=None, id=None, privilege_statements=None, result_output_file=None, table_privileges=None):
        if account and not isinstance(account, dict):
            raise TypeError("Expected argument 'account' to be a dict")
        pulumi.set(__self__, "account", account)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if database_privileges and not isinstance(database_privileges, list):
            raise TypeError("Expected argument 'database_privileges' to be a list")
        pulumi.set(__self__, "database_privileges", database_privileges)
        if global_privileges and not isinstance(global_privileges, list):
            raise TypeError("Expected argument 'global_privileges' to be a list")
        pulumi.set(__self__, "global_privileges", global_privileges)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if privilege_statements and not isinstance(privilege_statements, list):
            raise TypeError("Expected argument 'privilege_statements' to be a list")
        pulumi.set(__self__, "privilege_statements", privilege_statements)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if table_privileges and not isinstance(table_privileges, list):
            raise TypeError("Expected argument 'table_privileges' to be a list")
        pulumi.set(__self__, "table_privileges", table_privileges)

    @property
    @pulumi.getter
    def account(self) -> 'outputs.GetAccountAllGrantPrivilegesAccountResult':
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="databasePrivileges")
    def database_privileges(self) -> Sequence['outputs.GetAccountAllGrantPrivilegesDatabasePrivilegeResult']:
        """
        Database permissions note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "database_privileges")

    @property
    @pulumi.getter(name="globalPrivileges")
    def global_privileges(self) -> Sequence[str]:
        """
        Global permission note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "global_privileges")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privilegeStatements")
    def privilege_statements(self) -> Sequence[str]:
        """
        Permission statement note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "privilege_statements")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="tablePrivileges")
    def table_privileges(self) -> Sequence['outputs.GetAccountAllGrantPrivilegesTablePrivilegeResult']:
        """
        Database table permissions note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_privileges")


class AwaitableGetAccountAllGrantPrivilegesResult(GetAccountAllGrantPrivilegesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountAllGrantPrivilegesResult(
            account=self.account,
            cluster_id=self.cluster_id,
            database_privileges=self.database_privileges,
            global_privileges=self.global_privileges,
            id=self.id,
            privilege_statements=self.privilege_statements,
            result_output_file=self.result_output_file,
            table_privileges=self.table_privileges)


def get_account_all_grant_privileges(account: Optional[pulumi.InputType['GetAccountAllGrantPrivilegesAccountArgs']] = None,
                                     cluster_id: Optional[str] = None,
                                     result_output_file: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountAllGrantPrivilegesResult:
    """
    Use this data source to query detailed information of cynosdb account_all_grant_privileges

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    account_all_grant_privileges = tencentcloud.Cynosdb.get_account_all_grant_privileges(account=tencentcloud.cynosdb.GetAccountAllGrantPrivilegesAccountArgs(
            account_name="keep_dts",
            host="%",
        ),
        cluster_id="cynosdbmysql-bws8h88b")
    ```
    <!--End PulumiCodeChooser -->


    :param pulumi.InputType['GetAccountAllGrantPrivilegesAccountArgs'] account: account information.
    :param str cluster_id: Cluster ID.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['account'] = account
    __args__['clusterId'] = cluster_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getAccountAllGrantPrivileges:getAccountAllGrantPrivileges', __args__, opts=opts, typ=GetAccountAllGrantPrivilegesResult).value

    return AwaitableGetAccountAllGrantPrivilegesResult(
        account=pulumi.get(__ret__, 'account'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        database_privileges=pulumi.get(__ret__, 'database_privileges'),
        global_privileges=pulumi.get(__ret__, 'global_privileges'),
        id=pulumi.get(__ret__, 'id'),
        privilege_statements=pulumi.get(__ret__, 'privilege_statements'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        table_privileges=pulumi.get(__ret__, 'table_privileges'))


@_utilities.lift_output_func(get_account_all_grant_privileges)
def get_account_all_grant_privileges_output(account: Optional[pulumi.Input[pulumi.InputType['GetAccountAllGrantPrivilegesAccountArgs']]] = None,
                                            cluster_id: Optional[pulumi.Input[str]] = None,
                                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountAllGrantPrivilegesResult]:
    """
    Use this data source to query detailed information of cynosdb account_all_grant_privileges

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    account_all_grant_privileges = tencentcloud.Cynosdb.get_account_all_grant_privileges(account=tencentcloud.cynosdb.GetAccountAllGrantPrivilegesAccountArgs(
            account_name="keep_dts",
            host="%",
        ),
        cluster_id="cynosdbmysql-bws8h88b")
    ```
    <!--End PulumiCodeChooser -->


    :param pulumi.InputType['GetAccountAllGrantPrivilegesAccountArgs'] account: account information.
    :param str cluster_id: Cluster ID.
    :param str result_output_file: Used to save results.
    """
    ...
