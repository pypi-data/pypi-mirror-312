# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WanArgs', 'Wan']

@pulumi.input_type
class WanArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 instance_grp_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a Wan resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_grp_id: Instance Group ID.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "instance_grp_id", instance_grp_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceGrpId")
    def instance_grp_id(self) -> pulumi.Input[str]:
        """
        Instance Group ID.
        """
        return pulumi.get(self, "instance_grp_id")

    @instance_grp_id.setter
    def instance_grp_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_grp_id", value)


@pulumi.input_type
class _WanState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 instance_grp_id: Optional[pulumi.Input[str]] = None,
                 wan_domain: Optional[pulumi.Input[str]] = None,
                 wan_ip: Optional[pulumi.Input[str]] = None,
                 wan_port: Optional[pulumi.Input[int]] = None,
                 wan_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Wan resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_grp_id: Instance Group ID.
        :param pulumi.Input[str] wan_domain: Domain name.
        :param pulumi.Input[str] wan_ip: Network ip.
        :param pulumi.Input[int] wan_port: Internet port.
        :param pulumi.Input[str] wan_status: Internet status.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if instance_grp_id is not None:
            pulumi.set(__self__, "instance_grp_id", instance_grp_id)
        if wan_domain is not None:
            pulumi.set(__self__, "wan_domain", wan_domain)
        if wan_ip is not None:
            pulumi.set(__self__, "wan_ip", wan_ip)
        if wan_port is not None:
            pulumi.set(__self__, "wan_port", wan_port)
        if wan_status is not None:
            pulumi.set(__self__, "wan_status", wan_status)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceGrpId")
    def instance_grp_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Group ID.
        """
        return pulumi.get(self, "instance_grp_id")

    @instance_grp_id.setter
    def instance_grp_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_grp_id", value)

    @property
    @pulumi.getter(name="wanDomain")
    def wan_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "wan_domain")

    @wan_domain.setter
    def wan_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_domain", value)

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Network ip.
        """
        return pulumi.get(self, "wan_ip")

    @wan_ip.setter
    def wan_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_ip", value)

    @property
    @pulumi.getter(name="wanPort")
    def wan_port(self) -> Optional[pulumi.Input[int]]:
        """
        Internet port.
        """
        return pulumi.get(self, "wan_port")

    @wan_port.setter
    def wan_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wan_port", value)

    @property
    @pulumi.getter(name="wanStatus")
    def wan_status(self) -> Optional[pulumi.Input[str]]:
        """
        Internet status.
        """
        return pulumi.get(self, "wan_status")

    @wan_status.setter
    def wan_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wan_status", value)


class Wan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 instance_grp_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb wan

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        wan = tencentcloud.cynosdb.Wan("wan",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_grp_id="cynosdbmysql-grp-lxav0p9z")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb wan can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/wan:Wan wan cynosdbmysql-bws8h88b#cynosdbmysql-grp-lxav0p9z
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_grp_id: Instance Group ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb wan

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        wan = tencentcloud.cynosdb.Wan("wan",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_grp_id="cynosdbmysql-grp-lxav0p9z")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb wan can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/wan:Wan wan cynosdbmysql-bws8h88b#cynosdbmysql-grp-lxav0p9z
        ```

        :param str resource_name: The name of the resource.
        :param WanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 instance_grp_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WanArgs.__new__(WanArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if instance_grp_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_grp_id'")
            __props__.__dict__["instance_grp_id"] = instance_grp_id
            __props__.__dict__["wan_domain"] = None
            __props__.__dict__["wan_ip"] = None
            __props__.__dict__["wan_port"] = None
            __props__.__dict__["wan_status"] = None
        super(Wan, __self__).__init__(
            'tencentcloud:Cynosdb/wan:Wan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            instance_grp_id: Optional[pulumi.Input[str]] = None,
            wan_domain: Optional[pulumi.Input[str]] = None,
            wan_ip: Optional[pulumi.Input[str]] = None,
            wan_port: Optional[pulumi.Input[int]] = None,
            wan_status: Optional[pulumi.Input[str]] = None) -> 'Wan':
        """
        Get an existing Wan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_grp_id: Instance Group ID.
        :param pulumi.Input[str] wan_domain: Domain name.
        :param pulumi.Input[str] wan_ip: Network ip.
        :param pulumi.Input[int] wan_port: Internet port.
        :param pulumi.Input[str] wan_status: Internet status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WanState.__new__(_WanState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["instance_grp_id"] = instance_grp_id
        __props__.__dict__["wan_domain"] = wan_domain
        __props__.__dict__["wan_ip"] = wan_ip
        __props__.__dict__["wan_port"] = wan_port
        __props__.__dict__["wan_status"] = wan_status
        return Wan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="instanceGrpId")
    def instance_grp_id(self) -> pulumi.Output[str]:
        """
        Instance Group ID.
        """
        return pulumi.get(self, "instance_grp_id")

    @property
    @pulumi.getter(name="wanDomain")
    def wan_domain(self) -> pulumi.Output[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "wan_domain")

    @property
    @pulumi.getter(name="wanIp")
    def wan_ip(self) -> pulumi.Output[str]:
        """
        Network ip.
        """
        return pulumi.get(self, "wan_ip")

    @property
    @pulumi.getter(name="wanPort")
    def wan_port(self) -> pulumi.Output[int]:
        """
        Internet port.
        """
        return pulumi.get(self, "wan_port")

    @property
    @pulumi.getter(name="wanStatus")
    def wan_status(self) -> pulumi.Output[str]:
        """
        Internet status.
        """
        return pulumi.get(self, "wan_status")

