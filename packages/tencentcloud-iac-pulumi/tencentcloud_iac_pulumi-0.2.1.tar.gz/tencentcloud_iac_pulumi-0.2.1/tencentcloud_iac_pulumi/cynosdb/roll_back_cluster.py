# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RollBackClusterArgs', 'RollBackCluster']

@pulumi.input_type
class RollBackClusterArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 rollback_id: pulumi.Input[int],
                 rollback_strategy: pulumi.Input[str],
                 expect_time: Optional[pulumi.Input[str]] = None,
                 expect_time_thresh: Optional[pulumi.Input[int]] = None,
                 rollback_databases: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]]] = None,
                 rollback_mode: Optional[pulumi.Input[str]] = None,
                 rollback_tables: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]]] = None):
        """
        The set of arguments for constructing a RollBackCluster resource.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[int] rollback_id: Rollback ID.
        :param pulumi.Input[str] rollback_strategy: Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
        :param pulumi.Input[str] expect_time: Expected rollback Time.
        :param pulumi.Input[int] expect_time_thresh: Expected Threshold (Obsolete).
        :param pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]] rollback_databases: Database list.
        :param pulumi.Input[str] rollback_mode: Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
        :param pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]] rollback_tables: Table list.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "rollback_id", rollback_id)
        pulumi.set(__self__, "rollback_strategy", rollback_strategy)
        if expect_time is not None:
            pulumi.set(__self__, "expect_time", expect_time)
        if expect_time_thresh is not None:
            pulumi.set(__self__, "expect_time_thresh", expect_time_thresh)
        if rollback_databases is not None:
            pulumi.set(__self__, "rollback_databases", rollback_databases)
        if rollback_mode is not None:
            pulumi.set(__self__, "rollback_mode", rollback_mode)
        if rollback_tables is not None:
            pulumi.set(__self__, "rollback_tables", rollback_tables)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="rollbackId")
    def rollback_id(self) -> pulumi.Input[int]:
        """
        Rollback ID.
        """
        return pulumi.get(self, "rollback_id")

    @rollback_id.setter
    def rollback_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "rollback_id", value)

    @property
    @pulumi.getter(name="rollbackStrategy")
    def rollback_strategy(self) -> pulumi.Input[str]:
        """
        Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
        """
        return pulumi.get(self, "rollback_strategy")

    @rollback_strategy.setter
    def rollback_strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "rollback_strategy", value)

    @property
    @pulumi.getter(name="expectTime")
    def expect_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expected rollback Time.
        """
        return pulumi.get(self, "expect_time")

    @expect_time.setter
    def expect_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect_time", value)

    @property
    @pulumi.getter(name="expectTimeThresh")
    def expect_time_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        Expected Threshold (Obsolete).
        """
        return pulumi.get(self, "expect_time_thresh")

    @expect_time_thresh.setter
    def expect_time_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expect_time_thresh", value)

    @property
    @pulumi.getter(name="rollbackDatabases")
    def rollback_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]]]:
        """
        Database list.
        """
        return pulumi.get(self, "rollback_databases")

    @rollback_databases.setter
    def rollback_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]]]):
        pulumi.set(self, "rollback_databases", value)

    @property
    @pulumi.getter(name="rollbackMode")
    def rollback_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
        """
        return pulumi.get(self, "rollback_mode")

    @rollback_mode.setter
    def rollback_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollback_mode", value)

    @property
    @pulumi.getter(name="rollbackTables")
    def rollback_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]]]:
        """
        Table list.
        """
        return pulumi.get(self, "rollback_tables")

    @rollback_tables.setter
    def rollback_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]]]):
        pulumi.set(self, "rollback_tables", value)


@pulumi.input_type
class _RollBackClusterState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 expect_time: Optional[pulumi.Input[str]] = None,
                 expect_time_thresh: Optional[pulumi.Input[int]] = None,
                 rollback_databases: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]]] = None,
                 rollback_id: Optional[pulumi.Input[int]] = None,
                 rollback_mode: Optional[pulumi.Input[str]] = None,
                 rollback_strategy: Optional[pulumi.Input[str]] = None,
                 rollback_tables: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]]] = None):
        """
        Input properties used for looking up and filtering RollBackCluster resources.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[str] expect_time: Expected rollback Time.
        :param pulumi.Input[int] expect_time_thresh: Expected Threshold (Obsolete).
        :param pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]] rollback_databases: Database list.
        :param pulumi.Input[int] rollback_id: Rollback ID.
        :param pulumi.Input[str] rollback_mode: Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
        :param pulumi.Input[str] rollback_strategy: Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
        :param pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]] rollback_tables: Table list.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if expect_time is not None:
            pulumi.set(__self__, "expect_time", expect_time)
        if expect_time_thresh is not None:
            pulumi.set(__self__, "expect_time_thresh", expect_time_thresh)
        if rollback_databases is not None:
            pulumi.set(__self__, "rollback_databases", rollback_databases)
        if rollback_id is not None:
            pulumi.set(__self__, "rollback_id", rollback_id)
        if rollback_mode is not None:
            pulumi.set(__self__, "rollback_mode", rollback_mode)
        if rollback_strategy is not None:
            pulumi.set(__self__, "rollback_strategy", rollback_strategy)
        if rollback_tables is not None:
            pulumi.set(__self__, "rollback_tables", rollback_tables)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="expectTime")
    def expect_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expected rollback Time.
        """
        return pulumi.get(self, "expect_time")

    @expect_time.setter
    def expect_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect_time", value)

    @property
    @pulumi.getter(name="expectTimeThresh")
    def expect_time_thresh(self) -> Optional[pulumi.Input[int]]:
        """
        Expected Threshold (Obsolete).
        """
        return pulumi.get(self, "expect_time_thresh")

    @expect_time_thresh.setter
    def expect_time_thresh(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expect_time_thresh", value)

    @property
    @pulumi.getter(name="rollbackDatabases")
    def rollback_databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]]]:
        """
        Database list.
        """
        return pulumi.get(self, "rollback_databases")

    @rollback_databases.setter
    def rollback_databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackDatabaseArgs']]]]):
        pulumi.set(self, "rollback_databases", value)

    @property
    @pulumi.getter(name="rollbackId")
    def rollback_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rollback ID.
        """
        return pulumi.get(self, "rollback_id")

    @rollback_id.setter
    def rollback_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rollback_id", value)

    @property
    @pulumi.getter(name="rollbackMode")
    def rollback_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
        """
        return pulumi.get(self, "rollback_mode")

    @rollback_mode.setter
    def rollback_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollback_mode", value)

    @property
    @pulumi.getter(name="rollbackStrategy")
    def rollback_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
        """
        return pulumi.get(self, "rollback_strategy")

    @rollback_strategy.setter
    def rollback_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollback_strategy", value)

    @property
    @pulumi.getter(name="rollbackTables")
    def rollback_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]]]:
        """
        Table list.
        """
        return pulumi.get(self, "rollback_tables")

    @rollback_tables.setter
    def rollback_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollBackClusterRollbackTableArgs']]]]):
        pulumi.set(self, "rollback_tables", value)


class RollBackCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 expect_time: Optional[pulumi.Input[str]] = None,
                 expect_time_thresh: Optional[pulumi.Input[int]] = None,
                 rollback_databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackDatabaseArgs']]]]] = None,
                 rollback_id: Optional[pulumi.Input[int]] = None,
                 rollback_mode: Optional[pulumi.Input[str]] = None,
                 rollback_strategy: Optional[pulumi.Input[str]] = None,
                 rollback_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackTableArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb roll_back_cluster

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        roll_back_cluster = tencentcloud.cynosdb.RollBackCluster("rollBackCluster",
            cluster_id="cynosdbmysql-bws8h88b",
            expect_time_thresh=0,
            rollback_databases=[tencentcloud.cynosdb.RollBackClusterRollbackDatabaseArgs(
                new_database="users_bak_1",
                old_database="users",
            )],
            rollback_id=732725,
            rollback_mode="full",
            rollback_strategy="snapRollback",
            rollback_tables=[tencentcloud.cynosdb.RollBackClusterRollbackTableArgs(
                database="tf_ci_test",
                tables=[tencentcloud.cynosdb.RollBackClusterRollbackTableTableArgs(
                    new_table="test_bak_111",
                    old_table="test",
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[str] expect_time: Expected rollback Time.
        :param pulumi.Input[int] expect_time_thresh: Expected Threshold (Obsolete).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackDatabaseArgs']]]] rollback_databases: Database list.
        :param pulumi.Input[int] rollback_id: Rollback ID.
        :param pulumi.Input[str] rollback_mode: Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
        :param pulumi.Input[str] rollback_strategy: Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackTableArgs']]]] rollback_tables: Table list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RollBackClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb roll_back_cluster

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        roll_back_cluster = tencentcloud.cynosdb.RollBackCluster("rollBackCluster",
            cluster_id="cynosdbmysql-bws8h88b",
            expect_time_thresh=0,
            rollback_databases=[tencentcloud.cynosdb.RollBackClusterRollbackDatabaseArgs(
                new_database="users_bak_1",
                old_database="users",
            )],
            rollback_id=732725,
            rollback_mode="full",
            rollback_strategy="snapRollback",
            rollback_tables=[tencentcloud.cynosdb.RollBackClusterRollbackTableArgs(
                database="tf_ci_test",
                tables=[tencentcloud.cynosdb.RollBackClusterRollbackTableTableArgs(
                    new_table="test_bak_111",
                    old_table="test",
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param RollBackClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RollBackClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 expect_time: Optional[pulumi.Input[str]] = None,
                 expect_time_thresh: Optional[pulumi.Input[int]] = None,
                 rollback_databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackDatabaseArgs']]]]] = None,
                 rollback_id: Optional[pulumi.Input[int]] = None,
                 rollback_mode: Optional[pulumi.Input[str]] = None,
                 rollback_strategy: Optional[pulumi.Input[str]] = None,
                 rollback_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackTableArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RollBackClusterArgs.__new__(RollBackClusterArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["expect_time"] = expect_time
            __props__.__dict__["expect_time_thresh"] = expect_time_thresh
            __props__.__dict__["rollback_databases"] = rollback_databases
            if rollback_id is None and not opts.urn:
                raise TypeError("Missing required property 'rollback_id'")
            __props__.__dict__["rollback_id"] = rollback_id
            __props__.__dict__["rollback_mode"] = rollback_mode
            if rollback_strategy is None and not opts.urn:
                raise TypeError("Missing required property 'rollback_strategy'")
            __props__.__dict__["rollback_strategy"] = rollback_strategy
            __props__.__dict__["rollback_tables"] = rollback_tables
        super(RollBackCluster, __self__).__init__(
            'tencentcloud:Cynosdb/rollBackCluster:RollBackCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            expect_time: Optional[pulumi.Input[str]] = None,
            expect_time_thresh: Optional[pulumi.Input[int]] = None,
            rollback_databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackDatabaseArgs']]]]] = None,
            rollback_id: Optional[pulumi.Input[int]] = None,
            rollback_mode: Optional[pulumi.Input[str]] = None,
            rollback_strategy: Optional[pulumi.Input[str]] = None,
            rollback_tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackTableArgs']]]]] = None) -> 'RollBackCluster':
        """
        Get an existing RollBackCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[str] expect_time: Expected rollback Time.
        :param pulumi.Input[int] expect_time_thresh: Expected Threshold (Obsolete).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackDatabaseArgs']]]] rollback_databases: Database list.
        :param pulumi.Input[int] rollback_id: Rollback ID.
        :param pulumi.Input[str] rollback_mode: Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
        :param pulumi.Input[str] rollback_strategy: Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollBackClusterRollbackTableArgs']]]] rollback_tables: Table list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RollBackClusterState.__new__(_RollBackClusterState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["expect_time"] = expect_time
        __props__.__dict__["expect_time_thresh"] = expect_time_thresh
        __props__.__dict__["rollback_databases"] = rollback_databases
        __props__.__dict__["rollback_id"] = rollback_id
        __props__.__dict__["rollback_mode"] = rollback_mode
        __props__.__dict__["rollback_strategy"] = rollback_strategy
        __props__.__dict__["rollback_tables"] = rollback_tables
        return RollBackCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="expectTime")
    def expect_time(self) -> pulumi.Output[Optional[str]]:
        """
        Expected rollback Time.
        """
        return pulumi.get(self, "expect_time")

    @property
    @pulumi.getter(name="expectTimeThresh")
    def expect_time_thresh(self) -> pulumi.Output[Optional[int]]:
        """
        Expected Threshold (Obsolete).
        """
        return pulumi.get(self, "expect_time_thresh")

    @property
    @pulumi.getter(name="rollbackDatabases")
    def rollback_databases(self) -> pulumi.Output[Optional[Sequence['outputs.RollBackClusterRollbackDatabase']]]:
        """
        Database list.
        """
        return pulumi.get(self, "rollback_databases")

    @property
    @pulumi.getter(name="rollbackId")
    def rollback_id(self) -> pulumi.Output[int]:
        """
        Rollback ID.
        """
        return pulumi.get(self, "rollback_id")

    @property
    @pulumi.getter(name="rollbackMode")
    def rollback_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
        """
        return pulumi.get(self, "rollback_mode")

    @property
    @pulumi.getter(name="rollbackStrategy")
    def rollback_strategy(self) -> pulumi.Output[str]:
        """
        Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
        """
        return pulumi.get(self, "rollback_strategy")

    @property
    @pulumi.getter(name="rollbackTables")
    def rollback_tables(self) -> pulumi.Output[Optional[Sequence['outputs.RollBackClusterRollbackTable']]]:
        """
        Table list.
        """
        return pulumi.get(self, "rollback_tables")

