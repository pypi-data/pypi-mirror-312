# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetProxyNodeResult',
    'AwaitableGetProxyNodeResult',
    'get_proxy_node',
    'get_proxy_node_output',
]

@pulumi.output_type
class GetProxyNodeResult:
    """
    A collection of values returned by getProxyNode.
    """
    def __init__(__self__, filters=None, id=None, order_by=None, order_by_type=None, proxy_node_infos=None, result_output_file=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_by_type and not isinstance(order_by_type, str):
            raise TypeError("Expected argument 'order_by_type' to be a str")
        pulumi.set(__self__, "order_by_type", order_by_type)
        if proxy_node_infos and not isinstance(proxy_node_infos, list):
            raise TypeError("Expected argument 'proxy_node_infos' to be a list")
        pulumi.set(__self__, "proxy_node_infos", proxy_node_infos)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetProxyNodeFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderByType")
    def order_by_type(self) -> Optional[str]:
        return pulumi.get(self, "order_by_type")

    @property
    @pulumi.getter(name="proxyNodeInfos")
    def proxy_node_infos(self) -> Sequence['outputs.GetProxyNodeProxyNodeInfoResult']:
        """
        Database Agent Node List.
        """
        return pulumi.get(self, "proxy_node_infos")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetProxyNodeResult(GetProxyNodeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxyNodeResult(
            filters=self.filters,
            id=self.id,
            order_by=self.order_by,
            order_by_type=self.order_by_type,
            proxy_node_infos=self.proxy_node_infos,
            result_output_file=self.result_output_file)


def get_proxy_node(filters: Optional[Sequence[pulumi.InputType['GetProxyNodeFilterArgs']]] = None,
                   order_by: Optional[str] = None,
                   order_by_type: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProxyNodeResult:
    """
    Use this data source to query detailed information of cynosdb proxy_node


    :param Sequence[pulumi.InputType['GetProxyNodeFilterArgs']] filters: Search criteria, if there are multiple filters, the relationship between the filters is a logical AND relationship.
    :param str order_by: Sort field, value range:CREATETIME: creation time; PRIODENDTIME: expiration time.
    :param str order_by_type: Sort type, value range:ASC: ascending sort; DESC: descending sort.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['orderBy'] = order_by
    __args__['orderByType'] = order_by_type
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getProxyNode:getProxyNode', __args__, opts=opts, typ=GetProxyNodeResult).value

    return AwaitableGetProxyNodeResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_by_type=pulumi.get(__ret__, 'order_by_type'),
        proxy_node_infos=pulumi.get(__ret__, 'proxy_node_infos'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_proxy_node)
def get_proxy_node_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetProxyNodeFilterArgs']]]]] = None,
                          order_by: Optional[pulumi.Input[Optional[str]]] = None,
                          order_by_type: Optional[pulumi.Input[Optional[str]]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProxyNodeResult]:
    """
    Use this data source to query detailed information of cynosdb proxy_node


    :param Sequence[pulumi.InputType['GetProxyNodeFilterArgs']] filters: Search criteria, if there are multiple filters, the relationship between the filters is a logical AND relationship.
    :param str order_by: Sort field, value range:CREATETIME: creation time; PRIODENDTIME: expiration time.
    :param str order_by_type: Sort type, value range:ASC: ascending sort; DESC: descending sort.
    :param str result_output_file: Used to save results.
    """
    ...
