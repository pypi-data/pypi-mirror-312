# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClusterPasswordComplexityArgs', 'ClusterPasswordComplexity']

@pulumi.input_type
class ClusterPasswordComplexityArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 validate_password_length: pulumi.Input[int],
                 validate_password_mixed_case_count: pulumi.Input[int],
                 validate_password_number_count: pulumi.Input[int],
                 validate_password_policy: pulumi.Input[str],
                 validate_password_special_char_count: pulumi.Input[int],
                 validate_password_dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ClusterPasswordComplexity resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] validate_password_length: Password length.
        :param pulumi.Input[int] validate_password_mixed_case_count: Number of uppercase and lowercase characters.
        :param pulumi.Input[int] validate_password_number_count: Number of digits.
        :param pulumi.Input[str] validate_password_policy: Password strength (MEDIUM, STRONG).
        :param pulumi.Input[int] validate_password_special_char_count: Number of special characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] validate_password_dictionaries: Data dictionary.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "validate_password_length", validate_password_length)
        pulumi.set(__self__, "validate_password_mixed_case_count", validate_password_mixed_case_count)
        pulumi.set(__self__, "validate_password_number_count", validate_password_number_count)
        pulumi.set(__self__, "validate_password_policy", validate_password_policy)
        pulumi.set(__self__, "validate_password_special_char_count", validate_password_special_char_count)
        if validate_password_dictionaries is not None:
            pulumi.set(__self__, "validate_password_dictionaries", validate_password_dictionaries)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="validatePasswordLength")
    def validate_password_length(self) -> pulumi.Input[int]:
        """
        Password length.
        """
        return pulumi.get(self, "validate_password_length")

    @validate_password_length.setter
    def validate_password_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "validate_password_length", value)

    @property
    @pulumi.getter(name="validatePasswordMixedCaseCount")
    def validate_password_mixed_case_count(self) -> pulumi.Input[int]:
        """
        Number of uppercase and lowercase characters.
        """
        return pulumi.get(self, "validate_password_mixed_case_count")

    @validate_password_mixed_case_count.setter
    def validate_password_mixed_case_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "validate_password_mixed_case_count", value)

    @property
    @pulumi.getter(name="validatePasswordNumberCount")
    def validate_password_number_count(self) -> pulumi.Input[int]:
        """
        Number of digits.
        """
        return pulumi.get(self, "validate_password_number_count")

    @validate_password_number_count.setter
    def validate_password_number_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "validate_password_number_count", value)

    @property
    @pulumi.getter(name="validatePasswordPolicy")
    def validate_password_policy(self) -> pulumi.Input[str]:
        """
        Password strength (MEDIUM, STRONG).
        """
        return pulumi.get(self, "validate_password_policy")

    @validate_password_policy.setter
    def validate_password_policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "validate_password_policy", value)

    @property
    @pulumi.getter(name="validatePasswordSpecialCharCount")
    def validate_password_special_char_count(self) -> pulumi.Input[int]:
        """
        Number of special characters.
        """
        return pulumi.get(self, "validate_password_special_char_count")

    @validate_password_special_char_count.setter
    def validate_password_special_char_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "validate_password_special_char_count", value)

    @property
    @pulumi.getter(name="validatePasswordDictionaries")
    def validate_password_dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Data dictionary.
        """
        return pulumi.get(self, "validate_password_dictionaries")

    @validate_password_dictionaries.setter
    def validate_password_dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "validate_password_dictionaries", value)


@pulumi.input_type
class _ClusterPasswordComplexityState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 validate_password_dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 validate_password_length: Optional[pulumi.Input[int]] = None,
                 validate_password_mixed_case_count: Optional[pulumi.Input[int]] = None,
                 validate_password_number_count: Optional[pulumi.Input[int]] = None,
                 validate_password_policy: Optional[pulumi.Input[str]] = None,
                 validate_password_special_char_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ClusterPasswordComplexity resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] validate_password_dictionaries: Data dictionary.
        :param pulumi.Input[int] validate_password_length: Password length.
        :param pulumi.Input[int] validate_password_mixed_case_count: Number of uppercase and lowercase characters.
        :param pulumi.Input[int] validate_password_number_count: Number of digits.
        :param pulumi.Input[str] validate_password_policy: Password strength (MEDIUM, STRONG).
        :param pulumi.Input[int] validate_password_special_char_count: Number of special characters.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if validate_password_dictionaries is not None:
            pulumi.set(__self__, "validate_password_dictionaries", validate_password_dictionaries)
        if validate_password_length is not None:
            pulumi.set(__self__, "validate_password_length", validate_password_length)
        if validate_password_mixed_case_count is not None:
            pulumi.set(__self__, "validate_password_mixed_case_count", validate_password_mixed_case_count)
        if validate_password_number_count is not None:
            pulumi.set(__self__, "validate_password_number_count", validate_password_number_count)
        if validate_password_policy is not None:
            pulumi.set(__self__, "validate_password_policy", validate_password_policy)
        if validate_password_special_char_count is not None:
            pulumi.set(__self__, "validate_password_special_char_count", validate_password_special_char_count)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="validatePasswordDictionaries")
    def validate_password_dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Data dictionary.
        """
        return pulumi.get(self, "validate_password_dictionaries")

    @validate_password_dictionaries.setter
    def validate_password_dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "validate_password_dictionaries", value)

    @property
    @pulumi.getter(name="validatePasswordLength")
    def validate_password_length(self) -> Optional[pulumi.Input[int]]:
        """
        Password length.
        """
        return pulumi.get(self, "validate_password_length")

    @validate_password_length.setter
    def validate_password_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "validate_password_length", value)

    @property
    @pulumi.getter(name="validatePasswordMixedCaseCount")
    def validate_password_mixed_case_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of uppercase and lowercase characters.
        """
        return pulumi.get(self, "validate_password_mixed_case_count")

    @validate_password_mixed_case_count.setter
    def validate_password_mixed_case_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "validate_password_mixed_case_count", value)

    @property
    @pulumi.getter(name="validatePasswordNumberCount")
    def validate_password_number_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of digits.
        """
        return pulumi.get(self, "validate_password_number_count")

    @validate_password_number_count.setter
    def validate_password_number_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "validate_password_number_count", value)

    @property
    @pulumi.getter(name="validatePasswordPolicy")
    def validate_password_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Password strength (MEDIUM, STRONG).
        """
        return pulumi.get(self, "validate_password_policy")

    @validate_password_policy.setter
    def validate_password_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validate_password_policy", value)

    @property
    @pulumi.getter(name="validatePasswordSpecialCharCount")
    def validate_password_special_char_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of special characters.
        """
        return pulumi.get(self, "validate_password_special_char_count")

    @validate_password_special_char_count.setter
    def validate_password_special_char_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "validate_password_special_char_count", value)


class ClusterPasswordComplexity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 validate_password_dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 validate_password_length: Optional[pulumi.Input[int]] = None,
                 validate_password_mixed_case_count: Optional[pulumi.Input[int]] = None,
                 validate_password_number_count: Optional[pulumi.Input[int]] = None,
                 validate_password_policy: Optional[pulumi.Input[str]] = None,
                 validate_password_special_char_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb cluster_password_complexity

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster_password_complexity = tencentcloud.cynosdb.ClusterPasswordComplexity("clusterPasswordComplexity",
            cluster_id="cynosdbmysql-cgd2gpwr",
            validate_password_dictionaries=[
                "cccc",
                "xxxx",
            ],
            validate_password_length=8,
            validate_password_mixed_case_count=1,
            validate_password_number_count=1,
            validate_password_policy="STRONG",
            validate_password_special_char_count=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb cluster_password_complexity can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/clusterPasswordComplexity:ClusterPasswordComplexity cluster_password_complexity cluster_password_complexity_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] validate_password_dictionaries: Data dictionary.
        :param pulumi.Input[int] validate_password_length: Password length.
        :param pulumi.Input[int] validate_password_mixed_case_count: Number of uppercase and lowercase characters.
        :param pulumi.Input[int] validate_password_number_count: Number of digits.
        :param pulumi.Input[str] validate_password_policy: Password strength (MEDIUM, STRONG).
        :param pulumi.Input[int] validate_password_special_char_count: Number of special characters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterPasswordComplexityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb cluster_password_complexity

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster_password_complexity = tencentcloud.cynosdb.ClusterPasswordComplexity("clusterPasswordComplexity",
            cluster_id="cynosdbmysql-cgd2gpwr",
            validate_password_dictionaries=[
                "cccc",
                "xxxx",
            ],
            validate_password_length=8,
            validate_password_mixed_case_count=1,
            validate_password_number_count=1,
            validate_password_policy="STRONG",
            validate_password_special_char_count=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb cluster_password_complexity can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/clusterPasswordComplexity:ClusterPasswordComplexity cluster_password_complexity cluster_password_complexity_id
        ```

        :param str resource_name: The name of the resource.
        :param ClusterPasswordComplexityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterPasswordComplexityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 validate_password_dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 validate_password_length: Optional[pulumi.Input[int]] = None,
                 validate_password_mixed_case_count: Optional[pulumi.Input[int]] = None,
                 validate_password_number_count: Optional[pulumi.Input[int]] = None,
                 validate_password_policy: Optional[pulumi.Input[str]] = None,
                 validate_password_special_char_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterPasswordComplexityArgs.__new__(ClusterPasswordComplexityArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["validate_password_dictionaries"] = validate_password_dictionaries
            if validate_password_length is None and not opts.urn:
                raise TypeError("Missing required property 'validate_password_length'")
            __props__.__dict__["validate_password_length"] = validate_password_length
            if validate_password_mixed_case_count is None and not opts.urn:
                raise TypeError("Missing required property 'validate_password_mixed_case_count'")
            __props__.__dict__["validate_password_mixed_case_count"] = validate_password_mixed_case_count
            if validate_password_number_count is None and not opts.urn:
                raise TypeError("Missing required property 'validate_password_number_count'")
            __props__.__dict__["validate_password_number_count"] = validate_password_number_count
            if validate_password_policy is None and not opts.urn:
                raise TypeError("Missing required property 'validate_password_policy'")
            __props__.__dict__["validate_password_policy"] = validate_password_policy
            if validate_password_special_char_count is None and not opts.urn:
                raise TypeError("Missing required property 'validate_password_special_char_count'")
            __props__.__dict__["validate_password_special_char_count"] = validate_password_special_char_count
        super(ClusterPasswordComplexity, __self__).__init__(
            'tencentcloud:Cynosdb/clusterPasswordComplexity:ClusterPasswordComplexity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            validate_password_dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            validate_password_length: Optional[pulumi.Input[int]] = None,
            validate_password_mixed_case_count: Optional[pulumi.Input[int]] = None,
            validate_password_number_count: Optional[pulumi.Input[int]] = None,
            validate_password_policy: Optional[pulumi.Input[str]] = None,
            validate_password_special_char_count: Optional[pulumi.Input[int]] = None) -> 'ClusterPasswordComplexity':
        """
        Get an existing ClusterPasswordComplexity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] validate_password_dictionaries: Data dictionary.
        :param pulumi.Input[int] validate_password_length: Password length.
        :param pulumi.Input[int] validate_password_mixed_case_count: Number of uppercase and lowercase characters.
        :param pulumi.Input[int] validate_password_number_count: Number of digits.
        :param pulumi.Input[str] validate_password_policy: Password strength (MEDIUM, STRONG).
        :param pulumi.Input[int] validate_password_special_char_count: Number of special characters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterPasswordComplexityState.__new__(_ClusterPasswordComplexityState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["validate_password_dictionaries"] = validate_password_dictionaries
        __props__.__dict__["validate_password_length"] = validate_password_length
        __props__.__dict__["validate_password_mixed_case_count"] = validate_password_mixed_case_count
        __props__.__dict__["validate_password_number_count"] = validate_password_number_count
        __props__.__dict__["validate_password_policy"] = validate_password_policy
        __props__.__dict__["validate_password_special_char_count"] = validate_password_special_char_count
        return ClusterPasswordComplexity(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="validatePasswordDictionaries")
    def validate_password_dictionaries(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Data dictionary.
        """
        return pulumi.get(self, "validate_password_dictionaries")

    @property
    @pulumi.getter(name="validatePasswordLength")
    def validate_password_length(self) -> pulumi.Output[int]:
        """
        Password length.
        """
        return pulumi.get(self, "validate_password_length")

    @property
    @pulumi.getter(name="validatePasswordMixedCaseCount")
    def validate_password_mixed_case_count(self) -> pulumi.Output[int]:
        """
        Number of uppercase and lowercase characters.
        """
        return pulumi.get(self, "validate_password_mixed_case_count")

    @property
    @pulumi.getter(name="validatePasswordNumberCount")
    def validate_password_number_count(self) -> pulumi.Output[int]:
        """
        Number of digits.
        """
        return pulumi.get(self, "validate_password_number_count")

    @property
    @pulumi.getter(name="validatePasswordPolicy")
    def validate_password_policy(self) -> pulumi.Output[str]:
        """
        Password strength (MEDIUM, STRONG).
        """
        return pulumi.get(self, "validate_password_policy")

    @property
    @pulumi.getter(name="validatePasswordSpecialCharCount")
    def validate_password_special_char_count(self) -> pulumi.Output[int]:
        """
        Number of special characters.
        """
        return pulumi.get(self, "validate_password_special_char_count")

