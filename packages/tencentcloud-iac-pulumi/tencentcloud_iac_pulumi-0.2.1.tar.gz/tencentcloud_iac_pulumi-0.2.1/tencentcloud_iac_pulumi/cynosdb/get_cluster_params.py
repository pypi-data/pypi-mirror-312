# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetClusterParamsResult',
    'AwaitableGetClusterParamsResult',
    'get_cluster_params',
    'get_cluster_params_output',
]

@pulumi.output_type
class GetClusterParamsResult:
    """
    A collection of values returned by getClusterParams.
    """
    def __init__(__self__, cluster_id=None, id=None, items=None, param_name=None, result_output_file=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if param_name and not isinstance(param_name, str):
            raise TypeError("Expected argument 'param_name' to be a str")
        pulumi.set(__self__, "param_name", param_name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetClusterParamsItemResult']:
        """
        Instance parameter list. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[str]:
        """
        The name of parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetClusterParamsResult(GetClusterParamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterParamsResult(
            cluster_id=self.cluster_id,
            id=self.id,
            items=self.items,
            param_name=self.param_name,
            result_output_file=self.result_output_file)


def get_cluster_params(cluster_id: Optional[str] = None,
                       param_name: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterParamsResult:
    """
    Use this data source to query detailed information of cynosdb cluster_params

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster_params = tencentcloud.Cynosdb.get_cluster_params(cluster_id="cynosdbmysql-bws8h88b",
        param_name="innodb_checksum_algorithm")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: The ID of cluster.
    :param str param_name: Parameter name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['paramName'] = param_name
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getClusterParams:getClusterParams', __args__, opts=opts, typ=GetClusterParamsResult).value

    return AwaitableGetClusterParamsResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        items=pulumi.get(__ret__, 'items'),
        param_name=pulumi.get(__ret__, 'param_name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_cluster_params)
def get_cluster_params_output(cluster_id: Optional[pulumi.Input[str]] = None,
                              param_name: Optional[pulumi.Input[Optional[str]]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterParamsResult]:
    """
    Use this data source to query detailed information of cynosdb cluster_params

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cluster_params = tencentcloud.Cynosdb.get_cluster_params(cluster_id="cynosdbmysql-bws8h88b",
        param_name="innodb_checksum_algorithm")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: The ID of cluster.
    :param str param_name: Parameter name.
    :param str result_output_file: Used to save results.
    """
    ...
