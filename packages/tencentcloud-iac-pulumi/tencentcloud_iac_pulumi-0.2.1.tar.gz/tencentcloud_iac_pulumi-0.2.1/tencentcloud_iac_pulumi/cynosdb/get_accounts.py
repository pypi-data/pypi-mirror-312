# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccountsResult',
    'AwaitableGetAccountsResult',
    'get_accounts',
    'get_accounts_output',
]

@pulumi.output_type
class GetAccountsResult:
    """
    A collection of values returned by getAccounts.
    """
    def __init__(__self__, account_names=None, account_sets=None, cluster_id=None, hosts=None, id=None, result_output_file=None):
        if account_names and not isinstance(account_names, list):
            raise TypeError("Expected argument 'account_names' to be a list")
        pulumi.set(__self__, "account_names", account_names)
        if account_sets and not isinstance(account_sets, list):
            raise TypeError("Expected argument 'account_sets' to be a list")
        pulumi.set(__self__, "account_sets", account_sets)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="accountNames")
    def account_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_names")

    @property
    @pulumi.getter(name="accountSets")
    def account_sets(self) -> Sequence['outputs.GetAccountsAccountSetResult']:
        """
        Database account list.&amp;quot;&amp;quot;Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "account_sets")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetAccountsResult(GetAccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountsResult(
            account_names=self.account_names,
            account_sets=self.account_sets,
            cluster_id=self.cluster_id,
            hosts=self.hosts,
            id=self.id,
            result_output_file=self.result_output_file)


def get_accounts(account_names: Optional[Sequence[str]] = None,
                 cluster_id: Optional[str] = None,
                 hosts: Optional[Sequence[str]] = None,
                 result_output_file: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountsResult:
    """
    Use this data source to query detailed information of cynosdb accounts

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    accounts = tencentcloud.Cynosdb.get_accounts(account_names=["root"],
        cluster_id="cynosdbmysql-bws8h88b")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] account_names: List of accounts to be filtered.
    :param str cluster_id: The ID of cluster.
    :param Sequence[str] hosts: List of hosts to be filtered.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['accountNames'] = account_names
    __args__['clusterId'] = cluster_id
    __args__['hosts'] = hosts
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getAccounts:getAccounts', __args__, opts=opts, typ=GetAccountsResult).value

    return AwaitableGetAccountsResult(
        account_names=pulumi.get(__ret__, 'account_names'),
        account_sets=pulumi.get(__ret__, 'account_sets'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_accounts)
def get_accounts_output(account_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        cluster_id: Optional[pulumi.Input[str]] = None,
                        hosts: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccountsResult]:
    """
    Use this data source to query detailed information of cynosdb accounts

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    accounts = tencentcloud.Cynosdb.get_accounts(account_names=["root"],
        cluster_id="cynosdbmysql-bws8h88b")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] account_names: List of accounts to be filtered.
    :param str cluster_id: The ID of cluster.
    :param Sequence[str] hosts: List of hosts to be filtered.
    :param str result_output_file: Used to save results.
    """
    ...
