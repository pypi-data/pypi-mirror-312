# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceParamArgs', 'InstanceParam']

@pulumi.input_type
class InstanceParamArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_param_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]]] = None,
                 is_in_maintain_period: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InstanceParam resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]] instance_param_lists: Instance parameter list.
        :param pulumi.Input[str] is_in_maintain_period: Yes: modify within the operation and maintenance time window, no: execute immediately (default value).
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_param_lists is not None:
            pulumi.set(__self__, "instance_param_lists", instance_param_lists)
        if is_in_maintain_period is not None:
            pulumi.set(__self__, "is_in_maintain_period", is_in_maintain_period)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceParamLists")
    def instance_param_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]]]:
        """
        Instance parameter list.
        """
        return pulumi.get(self, "instance_param_lists")

    @instance_param_lists.setter
    def instance_param_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]]]):
        pulumi.set(self, "instance_param_lists", value)

    @property
    @pulumi.getter(name="isInMaintainPeriod")
    def is_in_maintain_period(self) -> Optional[pulumi.Input[str]]:
        """
        Yes: modify within the operation and maintenance time window, no: execute immediately (default value).
        """
        return pulumi.get(self, "is_in_maintain_period")

    @is_in_maintain_period.setter
    def is_in_maintain_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_in_maintain_period", value)


@pulumi.input_type
class _InstanceParamState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_param_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]]] = None,
                 is_in_maintain_period: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InstanceParam resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]] instance_param_lists: Instance parameter list.
        :param pulumi.Input[str] is_in_maintain_period: Yes: modify within the operation and maintenance time window, no: execute immediately (default value).
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_param_lists is not None:
            pulumi.set(__self__, "instance_param_lists", instance_param_lists)
        if is_in_maintain_period is not None:
            pulumi.set(__self__, "is_in_maintain_period", is_in_maintain_period)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceParamLists")
    def instance_param_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]]]:
        """
        Instance parameter list.
        """
        return pulumi.get(self, "instance_param_lists")

    @instance_param_lists.setter
    def instance_param_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceParamInstanceParamListArgs']]]]):
        pulumi.set(self, "instance_param_lists", value)

    @property
    @pulumi.getter(name="isInMaintainPeriod")
    def is_in_maintain_period(self) -> Optional[pulumi.Input[str]]:
        """
        Yes: modify within the operation and maintenance time window, no: execute immediately (default value).
        """
        return pulumi.get(self, "is_in_maintain_period")

    @is_in_maintain_period.setter
    def is_in_maintain_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_in_maintain_period", value)


class InstanceParam(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_param_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParamInstanceParamListArgs']]]]] = None,
                 is_in_maintain_period: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb instance_param

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance_param = tencentcloud.cynosdb.InstanceParam("instanceParam",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_id="cynosdbmysql-ins-rikr6z4o",
            instance_param_lists=[tencentcloud.cynosdb.InstanceParamInstanceParamListArgs(
                current_value="0",
                param_name="init_connect",
            )],
            is_in_maintain_period="no")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParamInstanceParamListArgs']]]] instance_param_lists: Instance parameter list.
        :param pulumi.Input[str] is_in_maintain_period: Yes: modify within the operation and maintenance time window, no: execute immediately (default value).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceParamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb instance_param

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance_param = tencentcloud.cynosdb.InstanceParam("instanceParam",
            cluster_id="cynosdbmysql-bws8h88b",
            instance_id="cynosdbmysql-ins-rikr6z4o",
            instance_param_lists=[tencentcloud.cynosdb.InstanceParamInstanceParamListArgs(
                current_value="0",
                param_name="init_connect",
            )],
            is_in_maintain_period="no")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param InstanceParamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceParamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_param_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParamInstanceParamListArgs']]]]] = None,
                 is_in_maintain_period: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceParamArgs.__new__(InstanceParamArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["instance_param_lists"] = instance_param_lists
            __props__.__dict__["is_in_maintain_period"] = is_in_maintain_period
        super(InstanceParam, __self__).__init__(
            'tencentcloud:Cynosdb/instanceParam:InstanceParam',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_param_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParamInstanceParamListArgs']]]]] = None,
            is_in_maintain_period: Optional[pulumi.Input[str]] = None) -> 'InstanceParam':
        """
        Get an existing InstanceParam resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceParamInstanceParamListArgs']]]] instance_param_lists: Instance parameter list.
        :param pulumi.Input[str] is_in_maintain_period: Yes: modify within the operation and maintenance time window, no: execute immediately (default value).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceParamState.__new__(_InstanceParamState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_param_lists"] = instance_param_lists
        __props__.__dict__["is_in_maintain_period"] = is_in_maintain_period
        return InstanceParam(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceParamLists")
    def instance_param_lists(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceParamInstanceParamList']]]:
        """
        Instance parameter list.
        """
        return pulumi.get(self, "instance_param_lists")

    @property
    @pulumi.getter(name="isInMaintainPeriod")
    def is_in_maintain_period(self) -> pulumi.Output[Optional[str]]:
        """
        Yes: modify within the operation and maintenance time window, no: execute immediately (default value).
        """
        return pulumi.get(self, "is_in_maintain_period")

