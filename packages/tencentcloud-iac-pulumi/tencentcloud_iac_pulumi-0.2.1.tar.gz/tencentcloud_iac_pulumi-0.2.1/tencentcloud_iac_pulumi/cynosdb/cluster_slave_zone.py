# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClusterSlaveZoneArgs', 'ClusterSlaveZone']

@pulumi.input_type
class ClusterSlaveZoneArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 slave_zone: pulumi.Input[str]):
        """
        The set of arguments for constructing a ClusterSlaveZone resource.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[str] slave_zone: Slave zone.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "slave_zone", slave_zone)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="slaveZone")
    def slave_zone(self) -> pulumi.Input[str]:
        """
        Slave zone.
        """
        return pulumi.get(self, "slave_zone")

    @slave_zone.setter
    def slave_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "slave_zone", value)


@pulumi.input_type
class _ClusterSlaveZoneState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 slave_zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ClusterSlaveZone resources.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[str] slave_zone: Slave zone.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if slave_zone is not None:
            pulumi.set(__self__, "slave_zone", slave_zone)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="slaveZone")
    def slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Slave zone.
        """
        return pulumi.get(self, "slave_zone")

    @slave_zone.setter
    def slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_zone", value)


class ClusterSlaveZone(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 slave_zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb cluster slave zone.

        ## Example Usage

        ### Set a new slave zone for a cynosdb cluster.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        gz3 = tencentcloud.Vpc.get_subnets(availability_zone=var["default_az"],
            is_default=True)
        vpc_id = gz3.instance_lists[0].vpc_id
        subnet_id = gz3.instance_lists[0].subnet_id
        config = pulumi.Config()
        fixed_tags = config.get_object("fixedTags")
        if fixed_tags is None:
            fixed_tags = {
                "fixed_resource": "do_not_remove",
            }
        internal = tencentcloud.Security.get_groups(name="default",
            tags=fixed_tags)
        sg_id = internal.security_groups[0].security_group_id
        exclusive = tencentcloud.Security.get_groups(name="test_preset_sg")
        sg_id2 = exclusive.security_groups[0].security_group_id
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        new_availability_zone = config.get("newAvailabilityZone")
        if new_availability_zone is None:
            new_availability_zone = "ap-guangzhou-6"
        my_param_template = config.get("myParamTemplate")
        if my_param_template is None:
            my_param_template = "15765"
        instance = tencentcloud.cynosdb.Cluster("instance",
            available_zone=availability_zone,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            db_type="MYSQL",
            db_version="5.7",
            storage_limit=1000,
            cluster_name="tf_test_cynosdb_cluster_slave_zone",
            password="cynos@123",
            instance_maintain_duration=3600,
            instance_maintain_start_time=10800,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            instance_cpu_core=1,
            instance_memory_size=2,
            param_items=[
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="character_set_server",
                    current_value="utf8",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="time_zone",
                    current_value="+09:00",
                ),
            ],
            force_delete=True,
            rw_group_sgs=[sg_id],
            ro_group_sgs=[sg_id],
            prarm_template_id=my_param_template)
        cluster_slave_zone = tencentcloud.cynosdb.ClusterSlaveZone("clusterSlaveZone",
            cluster_id=instance.id,
            slave_zone=new_availability_zone)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb cluster_slave_zone can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/clusterSlaveZone:ClusterSlaveZone cluster_slave_zone cluster_id#slave_zone
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[str] slave_zone: Slave zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterSlaveZoneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb cluster slave zone.

        ## Example Usage

        ### Set a new slave zone for a cynosdb cluster.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        gz3 = tencentcloud.Vpc.get_subnets(availability_zone=var["default_az"],
            is_default=True)
        vpc_id = gz3.instance_lists[0].vpc_id
        subnet_id = gz3.instance_lists[0].subnet_id
        config = pulumi.Config()
        fixed_tags = config.get_object("fixedTags")
        if fixed_tags is None:
            fixed_tags = {
                "fixed_resource": "do_not_remove",
            }
        internal = tencentcloud.Security.get_groups(name="default",
            tags=fixed_tags)
        sg_id = internal.security_groups[0].security_group_id
        exclusive = tencentcloud.Security.get_groups(name="test_preset_sg")
        sg_id2 = exclusive.security_groups[0].security_group_id
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        new_availability_zone = config.get("newAvailabilityZone")
        if new_availability_zone is None:
            new_availability_zone = "ap-guangzhou-6"
        my_param_template = config.get("myParamTemplate")
        if my_param_template is None:
            my_param_template = "15765"
        instance = tencentcloud.cynosdb.Cluster("instance",
            available_zone=availability_zone,
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            db_type="MYSQL",
            db_version="5.7",
            storage_limit=1000,
            cluster_name="tf_test_cynosdb_cluster_slave_zone",
            password="cynos@123",
            instance_maintain_duration=3600,
            instance_maintain_start_time=10800,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            instance_cpu_core=1,
            instance_memory_size=2,
            param_items=[
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="character_set_server",
                    current_value="utf8",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="time_zone",
                    current_value="+09:00",
                ),
            ],
            force_delete=True,
            rw_group_sgs=[sg_id],
            ro_group_sgs=[sg_id],
            prarm_template_id=my_param_template)
        cluster_slave_zone = tencentcloud.cynosdb.ClusterSlaveZone("clusterSlaveZone",
            cluster_id=instance.id,
            slave_zone=new_availability_zone)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cynosdb cluster_slave_zone can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cynosdb/clusterSlaveZone:ClusterSlaveZone cluster_slave_zone cluster_id#slave_zone
        ```

        :param str resource_name: The name of the resource.
        :param ClusterSlaveZoneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterSlaveZoneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 slave_zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterSlaveZoneArgs.__new__(ClusterSlaveZoneArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if slave_zone is None and not opts.urn:
                raise TypeError("Missing required property 'slave_zone'")
            __props__.__dict__["slave_zone"] = slave_zone
        super(ClusterSlaveZone, __self__).__init__(
            'tencentcloud:Cynosdb/clusterSlaveZone:ClusterSlaveZone',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            slave_zone: Optional[pulumi.Input[str]] = None) -> 'ClusterSlaveZone':
        """
        Get an existing ClusterSlaveZone resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The ID of cluster.
        :param pulumi.Input[str] slave_zone: Slave zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterSlaveZoneState.__new__(_ClusterSlaveZoneState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["slave_zone"] = slave_zone
        return ClusterSlaveZone(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="slaveZone")
    def slave_zone(self) -> pulumi.Output[str]:
        """
        Slave zone.
        """
        return pulumi.get(self, "slave_zone")

