# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetZoneResult',
    'AwaitableGetZoneResult',
    'get_zone',
    'get_zone_output',
]

@pulumi.output_type
class GetZoneResult:
    """
    A collection of values returned by getZone.
    """
    def __init__(__self__, id=None, include_virtual_zones=None, region_sets=None, result_output_file=None, show_permission=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_virtual_zones and not isinstance(include_virtual_zones, bool):
            raise TypeError("Expected argument 'include_virtual_zones' to be a bool")
        pulumi.set(__self__, "include_virtual_zones", include_virtual_zones)
        if region_sets and not isinstance(region_sets, list):
            raise TypeError("Expected argument 'region_sets' to be a list")
        pulumi.set(__self__, "region_sets", region_sets)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if show_permission and not isinstance(show_permission, bool):
            raise TypeError("Expected argument 'show_permission' to be a bool")
        pulumi.set(__self__, "show_permission", show_permission)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeVirtualZones")
    def include_virtual_zones(self) -> Optional[bool]:
        return pulumi.get(self, "include_virtual_zones")

    @property
    @pulumi.getter(name="regionSets")
    def region_sets(self) -> Sequence['outputs.GetZoneRegionSetResult']:
        """
        Information of region.
        """
        return pulumi.get(self, "region_sets")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="showPermission")
    def show_permission(self) -> Optional[bool]:
        return pulumi.get(self, "show_permission")


class AwaitableGetZoneResult(GetZoneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZoneResult(
            id=self.id,
            include_virtual_zones=self.include_virtual_zones,
            region_sets=self.region_sets,
            result_output_file=self.result_output_file,
            show_permission=self.show_permission)


def get_zone(include_virtual_zones: Optional[bool] = None,
             result_output_file: Optional[str] = None,
             show_permission: Optional[bool] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZoneResult:
    """
    Use this data source to query detailed information of cynosdb zone

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    zone = tencentcloud.Cynosdb.get_zone(include_virtual_zones=True,
        show_permission=True)
    ```
    <!--End PulumiCodeChooser -->


    :param bool include_virtual_zones: Is virtual zone included.
    :param str result_output_file: Used to save results.
    :param bool show_permission: Whether to display all available zones under the region and display the permissions of each available zone of the user.
    """
    __args__ = dict()
    __args__['includeVirtualZones'] = include_virtual_zones
    __args__['resultOutputFile'] = result_output_file
    __args__['showPermission'] = show_permission
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cynosdb/getZone:getZone', __args__, opts=opts, typ=GetZoneResult).value

    return AwaitableGetZoneResult(
        id=pulumi.get(__ret__, 'id'),
        include_virtual_zones=pulumi.get(__ret__, 'include_virtual_zones'),
        region_sets=pulumi.get(__ret__, 'region_sets'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        show_permission=pulumi.get(__ret__, 'show_permission'))


@_utilities.lift_output_func(get_zone)
def get_zone_output(include_virtual_zones: Optional[pulumi.Input[Optional[bool]]] = None,
                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    show_permission: Optional[pulumi.Input[Optional[bool]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZoneResult]:
    """
    Use this data source to query detailed information of cynosdb zone

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    zone = tencentcloud.Cynosdb.get_zone(include_virtual_zones=True,
        show_permission=True)
    ```
    <!--End PulumiCodeChooser -->


    :param bool include_virtual_zones: Is virtual zone included.
    :param str result_output_file: Used to save results.
    :param bool show_permission: Whether to display all available zones under the region and display the permissions of each available zone of the user.
    """
    ...
