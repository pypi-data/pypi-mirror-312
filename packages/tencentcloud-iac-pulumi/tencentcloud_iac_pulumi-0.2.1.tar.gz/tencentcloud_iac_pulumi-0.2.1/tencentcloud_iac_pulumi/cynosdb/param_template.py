# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ParamTemplateArgs', 'ParamTemplate']

@pulumi.input_type
class ParamTemplateArgs:
    def __init__(__self__, *,
                 engine_version: pulumi.Input[str],
                 template_name: pulumi.Input[str],
                 db_mode: Optional[pulumi.Input[str]] = None,
                 param_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ParamTemplate resource.
        :param pulumi.Input[str] engine_version: MySQL version number.
        :param pulumi.Input[str] template_name: Template Name.
        :param pulumi.Input[str] db_mode: Database type, optional values: NORMAL (default), SERVERLESS.
        :param pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]] param_lists: parameter list.
        :param pulumi.Input[str] template_description: Template Description.
        :param pulumi.Input[int] template_id: Optional parameter, template ID to be copied.
        """
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "template_name", template_name)
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if param_lists is not None:
            pulumi.set(__self__, "param_lists", param_lists)
        if template_description is not None:
            pulumi.set(__self__, "template_description", template_description)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Input[str]:
        """
        MySQL version number.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Template Name.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Database type, optional values: NORMAL (default), SERVERLESS.
        """
        return pulumi.get(self, "db_mode")

    @db_mode.setter
    def db_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_mode", value)

    @property
    @pulumi.getter(name="paramLists")
    def param_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]]]:
        """
        parameter list.
        """
        return pulumi.get(self, "param_lists")

    @param_lists.setter
    def param_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]]]):
        pulumi.set(self, "param_lists", value)

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[pulumi.Input[str]]:
        """
        Template Description.
        """
        return pulumi.get(self, "template_description")

    @template_description.setter
    def template_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_description", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Optional parameter, template ID to be copied.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class _ParamTemplateState:
    def __init__(__self__, *,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 param_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ParamTemplate resources.
        :param pulumi.Input[str] db_mode: Database type, optional values: NORMAL (default), SERVERLESS.
        :param pulumi.Input[str] engine_version: MySQL version number.
        :param pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]] param_lists: parameter list.
        :param pulumi.Input[str] template_description: Template Description.
        :param pulumi.Input[int] template_id: Optional parameter, template ID to be copied.
        :param pulumi.Input[str] template_name: Template Name.
        """
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if param_lists is not None:
            pulumi.set(__self__, "param_lists", param_lists)
        if template_description is not None:
            pulumi.set(__self__, "template_description", template_description)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Database type, optional values: NORMAL (default), SERVERLESS.
        """
        return pulumi.get(self, "db_mode")

    @db_mode.setter
    def db_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_mode", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        MySQL version number.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="paramLists")
    def param_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]]]:
        """
        parameter list.
        """
        return pulumi.get(self, "param_lists")

    @param_lists.setter
    def param_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ParamTemplateParamListArgs']]]]):
        pulumi.set(self, "param_lists", value)

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[pulumi.Input[str]]:
        """
        Template Description.
        """
        return pulumi.get(self, "template_description")

    @template_description.setter
    def template_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_description", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Optional parameter, template ID to be copied.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template Name.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class ParamTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 param_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParamTemplateParamListArgs']]]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb param_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        param_template = tencentcloud.cynosdb.ParamTemplate("paramTemplate",
            db_mode="SERVERLESS",
            engine_version="5.7",
            param_lists=[tencentcloud.cynosdb.ParamTemplateParamListArgs(
                current_value="-1",
                param_name="optimizer_trace_offset",
            )],
            template_description="terraform-template",
            template_name="terraform-template")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_mode: Database type, optional values: NORMAL (default), SERVERLESS.
        :param pulumi.Input[str] engine_version: MySQL version number.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParamTemplateParamListArgs']]]] param_lists: parameter list.
        :param pulumi.Input[str] template_description: Template Description.
        :param pulumi.Input[int] template_id: Optional parameter, template ID to be copied.
        :param pulumi.Input[str] template_name: Template Name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ParamTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb param_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        param_template = tencentcloud.cynosdb.ParamTemplate("paramTemplate",
            db_mode="SERVERLESS",
            engine_version="5.7",
            param_lists=[tencentcloud.cynosdb.ParamTemplateParamListArgs(
                current_value="-1",
                param_name="optimizer_trace_offset",
            )],
            template_description="terraform-template",
            template_name="terraform-template")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ParamTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ParamTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 db_mode: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 param_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParamTemplateParamListArgs']]]]] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ParamTemplateArgs.__new__(ParamTemplateArgs)

            __props__.__dict__["db_mode"] = db_mode
            if engine_version is None and not opts.urn:
                raise TypeError("Missing required property 'engine_version'")
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["param_lists"] = param_lists
            __props__.__dict__["template_description"] = template_description
            __props__.__dict__["template_id"] = template_id
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
        super(ParamTemplate, __self__).__init__(
            'tencentcloud:Cynosdb/paramTemplate:ParamTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            db_mode: Optional[pulumi.Input[str]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            param_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParamTemplateParamListArgs']]]]] = None,
            template_description: Optional[pulumi.Input[str]] = None,
            template_id: Optional[pulumi.Input[int]] = None,
            template_name: Optional[pulumi.Input[str]] = None) -> 'ParamTemplate':
        """
        Get an existing ParamTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] db_mode: Database type, optional values: NORMAL (default), SERVERLESS.
        :param pulumi.Input[str] engine_version: MySQL version number.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ParamTemplateParamListArgs']]]] param_lists: parameter list.
        :param pulumi.Input[str] template_description: Template Description.
        :param pulumi.Input[int] template_id: Optional parameter, template ID to be copied.
        :param pulumi.Input[str] template_name: Template Name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ParamTemplateState.__new__(_ParamTemplateState)

        __props__.__dict__["db_mode"] = db_mode
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["param_lists"] = param_lists
        __props__.__dict__["template_description"] = template_description
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["template_name"] = template_name
        return ParamTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Database type, optional values: NORMAL (default), SERVERLESS.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[str]:
        """
        MySQL version number.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="paramLists")
    def param_lists(self) -> pulumi.Output[Sequence['outputs.ParamTemplateParamList']]:
        """
        parameter list.
        """
        return pulumi.get(self, "param_lists")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> pulumi.Output[Optional[str]]:
        """
        Template Description.
        """
        return pulumi.get(self, "template_description")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[int]:
        """
        Optional parameter, template ID to be copied.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Template Name.
        """
        return pulumi.get(self, "template_name")

