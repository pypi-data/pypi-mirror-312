# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProxyArgs', 'Proxy']

@pulumi.input_type
class ProxyArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 cpu: pulumi.Input[int],
                 mem: pulumi.Input[int],
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 proxy_count: Optional[pulumi.Input[int]] = None,
                 proxy_zones: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unique_subnet_id: Optional[pulumi.Input[str]] = None,
                 unique_vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Proxy resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[int] mem: Memory.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[int] proxy_count: Number of database proxy group nodes. If it is set at the same time as the `proxy_zones` field, the `proxy_zones` parameter shall prevail.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]] proxy_zones: Database node information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "mem", mem)
        if connection_pool_time_out is not None:
            pulumi.set(__self__, "connection_pool_time_out", connection_pool_time_out)
        if connection_pool_type is not None:
            pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if open_connection_pool is not None:
            pulumi.set(__self__, "open_connection_pool", open_connection_pool)
        if proxy_count is not None:
            pulumi.set(__self__, "proxy_count", proxy_count)
        if proxy_zones is not None:
            pulumi.set(__self__, "proxy_zones", proxy_zones)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if unique_subnet_id is not None:
            pulumi.set(__self__, "unique_subnet_id", unique_subnet_id)
        if unique_vpc_id is not None:
            pulumi.set(__self__, "unique_vpc_id", unique_vpc_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[int]:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def mem(self) -> pulumi.Input[int]:
        """
        Memory.
        """
        return pulumi.get(self, "mem")

    @mem.setter
    def mem(self, value: pulumi.Input[int]):
        pulumi.set(self, "mem", value)

    @property
    @pulumi.getter(name="connectionPoolTimeOut")
    def connection_pool_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Connection pool threshold: unit (second).
        """
        return pulumi.get(self, "connection_pool_time_out")

    @connection_pool_time_out.setter
    def connection_pool_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_pool_time_out", value)

    @property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> Optional[pulumi.Input[str]]:
        """
        Connection pool type: SessionConnectionPool (session level Connection pool).
        """
        return pulumi.get(self, "connection_pool_type")

    @connection_pool_type.setter
    def connection_pool_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_pool_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="openConnectionPool")
    def open_connection_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable Connection pool, yes - enable, no - do not enable.
        """
        return pulumi.get(self, "open_connection_pool")

    @open_connection_pool.setter
    def open_connection_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_connection_pool", value)

    @property
    @pulumi.getter(name="proxyCount")
    def proxy_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of database proxy group nodes. If it is set at the same time as the `proxy_zones` field, the `proxy_zones` parameter shall prevail.
        """
        return pulumi.get(self, "proxy_count")

    @proxy_count.setter
    def proxy_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_count", value)

    @property
    @pulumi.getter(name="proxyZones")
    def proxy_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]]]:
        """
        Database node information.
        """
        return pulumi.get(self, "proxy_zones")

    @proxy_zones.setter
    def proxy_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]]]):
        pulumi.set(self, "proxy_zones", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security Group ID Array.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="uniqueSubnetId")
    def unique_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The private network subnet ID is consistent with the cluster subnet ID by default.
        """
        return pulumi.get(self, "unique_subnet_id")

    @unique_subnet_id.setter
    def unique_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_subnet_id", value)

    @property
    @pulumi.getter(name="uniqueVpcId")
    def unique_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID, which is consistent with the cluster private network ID by default.
        """
        return pulumi.get(self, "unique_vpc_id")

    @unique_vpc_id.setter
    def unique_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_vpc_id", value)


@pulumi.input_type
class _ProxyState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 mem: Optional[pulumi.Input[int]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 proxy_count: Optional[pulumi.Input[int]] = None,
                 proxy_group_id: Optional[pulumi.Input[str]] = None,
                 proxy_zones: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]]] = None,
                 ro_instances: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyRoInstanceArgs']]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unique_subnet_id: Optional[pulumi.Input[str]] = None,
                 unique_vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Proxy resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] mem: Memory.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[int] proxy_count: Number of database proxy group nodes. If it is set at the same time as the `proxy_zones` field, the `proxy_zones` parameter shall prevail.
        :param pulumi.Input[str] proxy_group_id: Proxy Group Id.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]] proxy_zones: Database node information.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyRoInstanceArgs']]] ro_instances: Read only instance list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if connection_pool_time_out is not None:
            pulumi.set(__self__, "connection_pool_time_out", connection_pool_time_out)
        if connection_pool_type is not None:
            pulumi.set(__self__, "connection_pool_type", connection_pool_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if mem is not None:
            pulumi.set(__self__, "mem", mem)
        if open_connection_pool is not None:
            pulumi.set(__self__, "open_connection_pool", open_connection_pool)
        if proxy_count is not None:
            pulumi.set(__self__, "proxy_count", proxy_count)
        if proxy_group_id is not None:
            pulumi.set(__self__, "proxy_group_id", proxy_group_id)
        if proxy_zones is not None:
            pulumi.set(__self__, "proxy_zones", proxy_zones)
        if ro_instances is not None:
            pulumi.set(__self__, "ro_instances", ro_instances)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if unique_subnet_id is not None:
            pulumi.set(__self__, "unique_subnet_id", unique_subnet_id)
        if unique_vpc_id is not None:
            pulumi.set(__self__, "unique_vpc_id", unique_vpc_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="connectionPoolTimeOut")
    def connection_pool_time_out(self) -> Optional[pulumi.Input[int]]:
        """
        Connection pool threshold: unit (second).
        """
        return pulumi.get(self, "connection_pool_time_out")

    @connection_pool_time_out.setter
    def connection_pool_time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_pool_time_out", value)

    @property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> Optional[pulumi.Input[str]]:
        """
        Connection pool type: SessionConnectionPool (session level Connection pool).
        """
        return pulumi.get(self, "connection_pool_type")

    @connection_pool_type.setter
    def connection_pool_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_pool_type", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def mem(self) -> Optional[pulumi.Input[int]]:
        """
        Memory.
        """
        return pulumi.get(self, "mem")

    @mem.setter
    def mem(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem", value)

    @property
    @pulumi.getter(name="openConnectionPool")
    def open_connection_pool(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable Connection pool, yes - enable, no - do not enable.
        """
        return pulumi.get(self, "open_connection_pool")

    @open_connection_pool.setter
    def open_connection_pool(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "open_connection_pool", value)

    @property
    @pulumi.getter(name="proxyCount")
    def proxy_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of database proxy group nodes. If it is set at the same time as the `proxy_zones` field, the `proxy_zones` parameter shall prevail.
        """
        return pulumi.get(self, "proxy_count")

    @proxy_count.setter
    def proxy_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_count", value)

    @property
    @pulumi.getter(name="proxyGroupId")
    def proxy_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy Group Id.
        """
        return pulumi.get(self, "proxy_group_id")

    @proxy_group_id.setter
    def proxy_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_group_id", value)

    @property
    @pulumi.getter(name="proxyZones")
    def proxy_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]]]:
        """
        Database node information.
        """
        return pulumi.get(self, "proxy_zones")

    @proxy_zones.setter
    def proxy_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyZoneArgs']]]]):
        pulumi.set(self, "proxy_zones", value)

    @property
    @pulumi.getter(name="roInstances")
    def ro_instances(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyRoInstanceArgs']]]]:
        """
        Read only instance list.
        """
        return pulumi.get(self, "ro_instances")

    @ro_instances.setter
    def ro_instances(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyRoInstanceArgs']]]]):
        pulumi.set(self, "ro_instances", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security Group ID Array.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="uniqueSubnetId")
    def unique_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The private network subnet ID is consistent with the cluster subnet ID by default.
        """
        return pulumi.get(self, "unique_subnet_id")

    @unique_subnet_id.setter
    def unique_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_subnet_id", value)

    @property
    @pulumi.getter(name="uniqueVpcId")
    def unique_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID, which is consistent with the cluster private network ID by default.
        """
        return pulumi.get(self, "unique_vpc_id")

    @unique_vpc_id.setter
    def unique_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unique_vpc_id", value)


class Proxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 mem: Optional[pulumi.Input[int]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 proxy_count: Optional[pulumi.Input[int]] = None,
                 proxy_zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyZoneArgs']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unique_subnet_id: Optional[pulumi.Input[str]] = None,
                 unique_vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cynosdb proxy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy = tencentcloud.cynosdb.Proxy("proxy",
            cluster_id="cynosdbmysql-bws8h88b",
            connection_pool_time_out=30,
            connection_pool_type="SessionConnectionPool",
            cpu=2,
            description="desc sample",
            mem=4000,
            open_connection_pool="yes",
            proxy_zones=[tencentcloud.cynosdb.ProxyProxyZoneArgs(
                proxy_node_count=2,
                proxy_node_zone="ap-guangzhou-7",
            )],
            security_group_ids=["sg-baxfiao5"],
            unique_subnet_id="subnet-jdi5xn22",
            unique_vpc_id="vpc-k1t8ickr")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] mem: Memory.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[int] proxy_count: Number of database proxy group nodes. If it is set at the same time as the `proxy_zones` field, the `proxy_zones` parameter shall prevail.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyZoneArgs']]]] proxy_zones: Database node information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cynosdb proxy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy = tencentcloud.cynosdb.Proxy("proxy",
            cluster_id="cynosdbmysql-bws8h88b",
            connection_pool_time_out=30,
            connection_pool_type="SessionConnectionPool",
            cpu=2,
            description="desc sample",
            mem=4000,
            open_connection_pool="yes",
            proxy_zones=[tencentcloud.cynosdb.ProxyProxyZoneArgs(
                proxy_node_count=2,
                proxy_node_zone="ap-guangzhou-7",
            )],
            security_group_ids=["sg-baxfiao5"],
            unique_subnet_id="subnet-jdi5xn22",
            unique_vpc_id="vpc-k1t8ickr")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ProxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 connection_pool_time_out: Optional[pulumi.Input[int]] = None,
                 connection_pool_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 mem: Optional[pulumi.Input[int]] = None,
                 open_connection_pool: Optional[pulumi.Input[str]] = None,
                 proxy_count: Optional[pulumi.Input[int]] = None,
                 proxy_zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyZoneArgs']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unique_subnet_id: Optional[pulumi.Input[str]] = None,
                 unique_vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxyArgs.__new__(ProxyArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["connection_pool_time_out"] = connection_pool_time_out
            __props__.__dict__["connection_pool_type"] = connection_pool_type
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["description"] = description
            if mem is None and not opts.urn:
                raise TypeError("Missing required property 'mem'")
            __props__.__dict__["mem"] = mem
            __props__.__dict__["open_connection_pool"] = open_connection_pool
            __props__.__dict__["proxy_count"] = proxy_count
            __props__.__dict__["proxy_zones"] = proxy_zones
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["unique_subnet_id"] = unique_subnet_id
            __props__.__dict__["unique_vpc_id"] = unique_vpc_id
            __props__.__dict__["proxy_group_id"] = None
            __props__.__dict__["ro_instances"] = None
        super(Proxy, __self__).__init__(
            'tencentcloud:Cynosdb/proxy:Proxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            connection_pool_time_out: Optional[pulumi.Input[int]] = None,
            connection_pool_type: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            mem: Optional[pulumi.Input[int]] = None,
            open_connection_pool: Optional[pulumi.Input[str]] = None,
            proxy_count: Optional[pulumi.Input[int]] = None,
            proxy_group_id: Optional[pulumi.Input[str]] = None,
            proxy_zones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyZoneArgs']]]]] = None,
            ro_instances: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyRoInstanceArgs']]]]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            unique_subnet_id: Optional[pulumi.Input[str]] = None,
            unique_vpc_id: Optional[pulumi.Input[str]] = None) -> 'Proxy':
        """
        Get an existing Proxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[int] connection_pool_time_out: Connection pool threshold: unit (second).
        :param pulumi.Input[str] connection_pool_type: Connection pool type: SessionConnectionPool (session level Connection pool).
        :param pulumi.Input[int] cpu: Number of CPU cores.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[int] mem: Memory.
        :param pulumi.Input[str] open_connection_pool: Whether to enable Connection pool, yes - enable, no - do not enable.
        :param pulumi.Input[int] proxy_count: Number of database proxy group nodes. If it is set at the same time as the `proxy_zones` field, the `proxy_zones` parameter shall prevail.
        :param pulumi.Input[str] proxy_group_id: Proxy Group Id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyZoneArgs']]]] proxy_zones: Database node information.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyRoInstanceArgs']]]] ro_instances: Read only instance list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security Group ID Array.
        :param pulumi.Input[str] unique_subnet_id: The private network subnet ID is consistent with the cluster subnet ID by default.
        :param pulumi.Input[str] unique_vpc_id: Private network ID, which is consistent with the cluster private network ID by default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProxyState.__new__(_ProxyState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["connection_pool_time_out"] = connection_pool_time_out
        __props__.__dict__["connection_pool_type"] = connection_pool_type
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["description"] = description
        __props__.__dict__["mem"] = mem
        __props__.__dict__["open_connection_pool"] = open_connection_pool
        __props__.__dict__["proxy_count"] = proxy_count
        __props__.__dict__["proxy_group_id"] = proxy_group_id
        __props__.__dict__["proxy_zones"] = proxy_zones
        __props__.__dict__["ro_instances"] = ro_instances
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["unique_subnet_id"] = unique_subnet_id
        __props__.__dict__["unique_vpc_id"] = unique_vpc_id
        return Proxy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="connectionPoolTimeOut")
    def connection_pool_time_out(self) -> pulumi.Output[Optional[int]]:
        """
        Connection pool threshold: unit (second).
        """
        return pulumi.get(self, "connection_pool_time_out")

    @property
    @pulumi.getter(name="connectionPoolType")
    def connection_pool_type(self) -> pulumi.Output[Optional[str]]:
        """
        Connection pool type: SessionConnectionPool (session level Connection pool).
        """
        return pulumi.get(self, "connection_pool_type")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def mem(self) -> pulumi.Output[int]:
        """
        Memory.
        """
        return pulumi.get(self, "mem")

    @property
    @pulumi.getter(name="openConnectionPool")
    def open_connection_pool(self) -> pulumi.Output[Optional[str]]:
        """
        Whether to enable Connection pool, yes - enable, no - do not enable.
        """
        return pulumi.get(self, "open_connection_pool")

    @property
    @pulumi.getter(name="proxyCount")
    def proxy_count(self) -> pulumi.Output[int]:
        """
        Number of database proxy group nodes. If it is set at the same time as the `proxy_zones` field, the `proxy_zones` parameter shall prevail.
        """
        return pulumi.get(self, "proxy_count")

    @property
    @pulumi.getter(name="proxyGroupId")
    def proxy_group_id(self) -> pulumi.Output[str]:
        """
        Proxy Group Id.
        """
        return pulumi.get(self, "proxy_group_id")

    @property
    @pulumi.getter(name="proxyZones")
    def proxy_zones(self) -> pulumi.Output[Sequence['outputs.ProxyProxyZone']]:
        """
        Database node information.
        """
        return pulumi.get(self, "proxy_zones")

    @property
    @pulumi.getter(name="roInstances")
    def ro_instances(self) -> pulumi.Output[Sequence['outputs.ProxyRoInstance']]:
        """
        Read only instance list.
        """
        return pulumi.get(self, "ro_instances")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security Group ID Array.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="uniqueSubnetId")
    def unique_subnet_id(self) -> pulumi.Output[str]:
        """
        The private network subnet ID is consistent with the cluster subnet ID by default.
        """
        return pulumi.get(self, "unique_subnet_id")

    @property
    @pulumi.getter(name="uniqueVpcId")
    def unique_vpc_id(self) -> pulumi.Output[str]:
        """
        Private network ID, which is consistent with the cluster private network ID by default.
        """
        return pulumi.get(self, "unique_vpc_id")

