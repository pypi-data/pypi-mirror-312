# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 charge_type: pulumi.Input[str],
                 data_spec: pulumi.Input['InstanceDataSpecArgs'],
                 ha_flag: pulumi.Input[bool],
                 instance_name: pulumi.Input[str],
                 product_version: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 cls_log_set_id: Optional[pulumi.Input[str]] = None,
                 common_spec: Optional[pulumi.Input['InstanceCommonSpecArgs']] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 ha_zk: Optional[pulumi.Input[bool]] = None,
                 mount_disk_type: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] charge_type: Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        :param pulumi.Input['InstanceDataSpecArgs'] data_spec: Data spec.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[str] product_version: Product version.
        :param pulumi.Input[str] subnet_id: Subnet.
        :param pulumi.Input[str] vpc_id: Private network.
        :param pulumi.Input[str] zone: Availability zone.
        :param pulumi.Input[str] cls_log_set_id: CLS log set id.
        :param pulumi.Input['InstanceCommonSpecArgs'] common_spec: ZK node.
        :param pulumi.Input[str] cos_bucket_name: COS bucket name.
        :param pulumi.Input[bool] ha_zk: Whether ZK is highly available.
        :param pulumi.Input[int] mount_disk_type: Whether it is mounted on a bare disk.
        :param pulumi.Input[int] renew_flag: PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Prepaid needs to be delivered, billing time length, how many months.
        """
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "data_spec", data_spec)
        pulumi.set(__self__, "ha_flag", ha_flag)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "product_version", product_version)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        if cls_log_set_id is not None:
            pulumi.set(__self__, "cls_log_set_id", cls_log_set_id)
        if common_spec is not None:
            pulumi.set(__self__, "common_spec", common_spec)
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if ha_zk is not None:
            pulumi.set(__self__, "ha_zk", ha_zk)
        if mount_disk_type is not None:
            pulumi.set(__self__, "mount_disk_type", mount_disk_type)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Input[str]:
        """
        Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="dataSpec")
    def data_spec(self) -> pulumi.Input['InstanceDataSpecArgs']:
        """
        Data spec.
        """
        return pulumi.get(self, "data_spec")

    @data_spec.setter
    def data_spec(self, value: pulumi.Input['InstanceDataSpecArgs']):
        pulumi.set(self, "data_spec", value)

    @property
    @pulumi.getter(name="haFlag")
    def ha_flag(self) -> pulumi.Input[bool]:
        """
        Whether it is highly available.
        """
        return pulumi.get(self, "ha_flag")

    @ha_flag.setter
    def ha_flag(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ha_flag", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> pulumi.Input[str]:
        """
        Product version.
        """
        return pulumi.get(self, "product_version")

    @product_version.setter
    def product_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_version", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Private network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="clsLogSetId")
    def cls_log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS log set id.
        """
        return pulumi.get(self, "cls_log_set_id")

    @cls_log_set_id.setter
    def cls_log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_log_set_id", value)

    @property
    @pulumi.getter(name="commonSpec")
    def common_spec(self) -> Optional[pulumi.Input['InstanceCommonSpecArgs']]:
        """
        ZK node.
        """
        return pulumi.get(self, "common_spec")

    @common_spec.setter
    def common_spec(self, value: Optional[pulumi.Input['InstanceCommonSpecArgs']]):
        pulumi.set(self, "common_spec", value)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        COS bucket name.
        """
        return pulumi.get(self, "cos_bucket_name")

    @cos_bucket_name.setter
    def cos_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_name", value)

    @property
    @pulumi.getter(name="haZk")
    def ha_zk(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether ZK is highly available.
        """
        return pulumi.get(self, "ha_zk")

    @ha_zk.setter
    def ha_zk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ha_zk", value)

    @property
    @pulumi.getter(name="mountDiskType")
    def mount_disk_type(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is mounted on a bare disk.
        """
        return pulumi.get(self, "mount_disk_type")

    @mount_disk_type.setter
    def mount_disk_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mount_disk_type", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid needs to be delivered, billing time length, how many months.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cls_log_set_id: Optional[pulumi.Input[str]] = None,
                 common_spec: Optional[pulumi.Input['InstanceCommonSpecArgs']] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 data_spec: Optional[pulumi.Input['InstanceDataSpecArgs']] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 ha_flag: Optional[pulumi.Input[bool]] = None,
                 ha_zk: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 mount_disk_type: Optional[pulumi.Input[int]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] charge_type: Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        :param pulumi.Input[str] cls_log_set_id: CLS log set id.
        :param pulumi.Input['InstanceCommonSpecArgs'] common_spec: ZK node.
        :param pulumi.Input[str] cos_bucket_name: COS bucket name.
        :param pulumi.Input['InstanceDataSpecArgs'] data_spec: Data spec.
        :param pulumi.Input[str] expire_time: Expire time.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[bool] ha_zk: Whether ZK is highly available.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] mount_disk_type: Whether it is mounted on a bare disk.
        :param pulumi.Input[str] product_version: Product version.
        :param pulumi.Input[int] renew_flag: PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        :param pulumi.Input[str] subnet_id: Subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Prepaid needs to be delivered, billing time length, how many months.
        :param pulumi.Input[str] vpc_id: Private network.
        :param pulumi.Input[str] zone: Availability zone.
        """
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cls_log_set_id is not None:
            pulumi.set(__self__, "cls_log_set_id", cls_log_set_id)
        if common_spec is not None:
            pulumi.set(__self__, "common_spec", common_spec)
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if data_spec is not None:
            pulumi.set(__self__, "data_spec", data_spec)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if ha_flag is not None:
            pulumi.set(__self__, "ha_flag", ha_flag)
        if ha_zk is not None:
            pulumi.set(__self__, "ha_zk", ha_zk)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if mount_disk_type is not None:
            pulumi.set(__self__, "mount_disk_type", mount_disk_type)
        if product_version is not None:
            pulumi.set(__self__, "product_version", product_version)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="clsLogSetId")
    def cls_log_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS log set id.
        """
        return pulumi.get(self, "cls_log_set_id")

    @cls_log_set_id.setter
    def cls_log_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_log_set_id", value)

    @property
    @pulumi.getter(name="commonSpec")
    def common_spec(self) -> Optional[pulumi.Input['InstanceCommonSpecArgs']]:
        """
        ZK node.
        """
        return pulumi.get(self, "common_spec")

    @common_spec.setter
    def common_spec(self, value: Optional[pulumi.Input['InstanceCommonSpecArgs']]):
        pulumi.set(self, "common_spec", value)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        COS bucket name.
        """
        return pulumi.get(self, "cos_bucket_name")

    @cos_bucket_name.setter
    def cos_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_name", value)

    @property
    @pulumi.getter(name="dataSpec")
    def data_spec(self) -> Optional[pulumi.Input['InstanceDataSpecArgs']]:
        """
        Data spec.
        """
        return pulumi.get(self, "data_spec")

    @data_spec.setter
    def data_spec(self, value: Optional[pulumi.Input['InstanceDataSpecArgs']]):
        pulumi.set(self, "data_spec", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expire time.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="haFlag")
    def ha_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether it is highly available.
        """
        return pulumi.get(self, "ha_flag")

    @ha_flag.setter
    def ha_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ha_flag", value)

    @property
    @pulumi.getter(name="haZk")
    def ha_zk(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether ZK is highly available.
        """
        return pulumi.get(self, "ha_zk")

    @ha_zk.setter
    def ha_zk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ha_zk", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="mountDiskType")
    def mount_disk_type(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is mounted on a bare disk.
        """
        return pulumi.get(self, "mount_disk_type")

    @mount_disk_type.setter
    def mount_disk_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mount_disk_type", value)

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> Optional[pulumi.Input[str]]:
        """
        Product version.
        """
        return pulumi.get(self, "product_version")

    @product_version.setter
    def product_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_version", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid needs to be delivered, billing time length, how many months.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cls_log_set_id: Optional[pulumi.Input[str]] = None,
                 common_spec: Optional[pulumi.Input[pulumi.InputType['InstanceCommonSpecArgs']]] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 data_spec: Optional[pulumi.Input[pulumi.InputType['InstanceDataSpecArgs']]] = None,
                 ha_flag: Optional[pulumi.Input[bool]] = None,
                 ha_zk: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 mount_disk_type: Optional[pulumi.Input[int]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a clickhouse instance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cdwch_instance = tencentcloud.clickhouse.Instance("cdwchInstance",
            charge_type="POSTPAID_BY_HOUR",
            common_spec=tencentcloud.clickhouse.InstanceCommonSpecArgs(
                count=3,
                disk_size=300,
                spec_name="SCH6",
            ),
            data_spec=tencentcloud.clickhouse.InstanceDataSpecArgs(
                count=2,
                disk_size=300,
                spec_name="SCH6",
            ),
            ha_flag=True,
            instance_name="tf-test-clickhouse",
            product_version="21.8.12.29",
            subnet_id="subnet-xxxxxx",
            vpc_id="vpc-xxxxxx",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ### PREPAID instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cdwch_instance_prepaid = tencentcloud.clickhouse.Instance("cdwchInstancePrepaid",
            charge_type="PREPAID",
            common_spec=tencentcloud.clickhouse.InstanceCommonSpecArgs(
                count=3,
                disk_size=300,
                spec_name="SCH6",
            ),
            data_spec=tencentcloud.clickhouse.InstanceDataSpecArgs(
                count=2,
                disk_size=300,
                spec_name="SCH6",
            ),
            ha_flag=True,
            instance_name="tf-test-clickhouse-prepaid",
            product_version="21.8.12.29",
            renew_flag=1,
            subnet_id="subnet-xxxxxx",
            time_span=1,
            vpc_id="vpc-xxxxxx",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Clickhouse instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clickhouse/instance:Instance foo cdwch-xxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] charge_type: Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        :param pulumi.Input[str] cls_log_set_id: CLS log set id.
        :param pulumi.Input[pulumi.InputType['InstanceCommonSpecArgs']] common_spec: ZK node.
        :param pulumi.Input[str] cos_bucket_name: COS bucket name.
        :param pulumi.Input[pulumi.InputType['InstanceDataSpecArgs']] data_spec: Data spec.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[bool] ha_zk: Whether ZK is highly available.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] mount_disk_type: Whether it is mounted on a bare disk.
        :param pulumi.Input[str] product_version: Product version.
        :param pulumi.Input[int] renew_flag: PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        :param pulumi.Input[str] subnet_id: Subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Prepaid needs to be delivered, billing time length, how many months.
        :param pulumi.Input[str] vpc_id: Private network.
        :param pulumi.Input[str] zone: Availability zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a clickhouse instance.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cdwch_instance = tencentcloud.clickhouse.Instance("cdwchInstance",
            charge_type="POSTPAID_BY_HOUR",
            common_spec=tencentcloud.clickhouse.InstanceCommonSpecArgs(
                count=3,
                disk_size=300,
                spec_name="SCH6",
            ),
            data_spec=tencentcloud.clickhouse.InstanceDataSpecArgs(
                count=2,
                disk_size=300,
                spec_name="SCH6",
            ),
            ha_flag=True,
            instance_name="tf-test-clickhouse",
            product_version="21.8.12.29",
            subnet_id="subnet-xxxxxx",
            vpc_id="vpc-xxxxxx",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ### PREPAID instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cdwch_instance_prepaid = tencentcloud.clickhouse.Instance("cdwchInstancePrepaid",
            charge_type="PREPAID",
            common_spec=tencentcloud.clickhouse.InstanceCommonSpecArgs(
                count=3,
                disk_size=300,
                spec_name="SCH6",
            ),
            data_spec=tencentcloud.clickhouse.InstanceDataSpecArgs(
                count=2,
                disk_size=300,
                spec_name="SCH6",
            ),
            ha_flag=True,
            instance_name="tf-test-clickhouse-prepaid",
            product_version="21.8.12.29",
            renew_flag=1,
            subnet_id="subnet-xxxxxx",
            time_span=1,
            vpc_id="vpc-xxxxxx",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Clickhouse instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clickhouse/instance:Instance foo cdwch-xxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cls_log_set_id: Optional[pulumi.Input[str]] = None,
                 common_spec: Optional[pulumi.Input[pulumi.InputType['InstanceCommonSpecArgs']]] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 data_spec: Optional[pulumi.Input[pulumi.InputType['InstanceDataSpecArgs']]] = None,
                 ha_flag: Optional[pulumi.Input[bool]] = None,
                 ha_zk: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 mount_disk_type: Optional[pulumi.Input[int]] = None,
                 product_version: Optional[pulumi.Input[str]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if charge_type is None and not opts.urn:
                raise TypeError("Missing required property 'charge_type'")
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["cls_log_set_id"] = cls_log_set_id
            __props__.__dict__["common_spec"] = common_spec
            __props__.__dict__["cos_bucket_name"] = cos_bucket_name
            if data_spec is None and not opts.urn:
                raise TypeError("Missing required property 'data_spec'")
            __props__.__dict__["data_spec"] = data_spec
            if ha_flag is None and not opts.urn:
                raise TypeError("Missing required property 'ha_flag'")
            __props__.__dict__["ha_flag"] = ha_flag
            __props__.__dict__["ha_zk"] = ha_zk
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["mount_disk_type"] = mount_disk_type
            if product_version is None and not opts.urn:
                raise TypeError("Missing required property 'product_version'")
            __props__.__dict__["product_version"] = product_version
            __props__.__dict__["renew_flag"] = renew_flag
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_span"] = time_span
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
            __props__.__dict__["expire_time"] = None
        super(Instance, __self__).__init__(
            'tencentcloud:Clickhouse/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            cls_log_set_id: Optional[pulumi.Input[str]] = None,
            common_spec: Optional[pulumi.Input[pulumi.InputType['InstanceCommonSpecArgs']]] = None,
            cos_bucket_name: Optional[pulumi.Input[str]] = None,
            data_spec: Optional[pulumi.Input[pulumi.InputType['InstanceDataSpecArgs']]] = None,
            expire_time: Optional[pulumi.Input[str]] = None,
            ha_flag: Optional[pulumi.Input[bool]] = None,
            ha_zk: Optional[pulumi.Input[bool]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            mount_disk_type: Optional[pulumi.Input[int]] = None,
            product_version: Optional[pulumi.Input[str]] = None,
            renew_flag: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_span: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] charge_type: Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        :param pulumi.Input[str] cls_log_set_id: CLS log set id.
        :param pulumi.Input[pulumi.InputType['InstanceCommonSpecArgs']] common_spec: ZK node.
        :param pulumi.Input[str] cos_bucket_name: COS bucket name.
        :param pulumi.Input[pulumi.InputType['InstanceDataSpecArgs']] data_spec: Data spec.
        :param pulumi.Input[str] expire_time: Expire time.
        :param pulumi.Input[bool] ha_flag: Whether it is highly available.
        :param pulumi.Input[bool] ha_zk: Whether ZK is highly available.
        :param pulumi.Input[str] instance_name: Instance name.
        :param pulumi.Input[int] mount_disk_type: Whether it is mounted on a bare disk.
        :param pulumi.Input[str] product_version: Product version.
        :param pulumi.Input[int] renew_flag: PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        :param pulumi.Input[str] subnet_id: Subnet.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Prepaid needs to be delivered, billing time length, how many months.
        :param pulumi.Input[str] vpc_id: Private network.
        :param pulumi.Input[str] zone: Availability zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["cls_log_set_id"] = cls_log_set_id
        __props__.__dict__["common_spec"] = common_spec
        __props__.__dict__["cos_bucket_name"] = cos_bucket_name
        __props__.__dict__["data_spec"] = data_spec
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["ha_flag"] = ha_flag
        __props__.__dict__["ha_zk"] = ha_zk
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["mount_disk_type"] = mount_disk_type
        __props__.__dict__["product_version"] = product_version
        __props__.__dict__["renew_flag"] = renew_flag
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["time_span"] = time_span
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone"] = zone
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[str]:
        """
        Billing type: `PREPAID` prepaid, `POSTPAID_BY_HOUR` postpaid.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clsLogSetId")
    def cls_log_set_id(self) -> pulumi.Output[str]:
        """
        CLS log set id.
        """
        return pulumi.get(self, "cls_log_set_id")

    @property
    @pulumi.getter(name="commonSpec")
    def common_spec(self) -> pulumi.Output['outputs.InstanceCommonSpec']:
        """
        ZK node.
        """
        return pulumi.get(self, "common_spec")

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> pulumi.Output[str]:
        """
        COS bucket name.
        """
        return pulumi.get(self, "cos_bucket_name")

    @property
    @pulumi.getter(name="dataSpec")
    def data_spec(self) -> pulumi.Output['outputs.InstanceDataSpec']:
        """
        Data spec.
        """
        return pulumi.get(self, "data_spec")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[str]:
        """
        Expire time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="haFlag")
    def ha_flag(self) -> pulumi.Output[bool]:
        """
        Whether it is highly available.
        """
        return pulumi.get(self, "ha_flag")

    @property
    @pulumi.getter(name="haZk")
    def ha_zk(self) -> pulumi.Output[bool]:
        """
        Whether ZK is highly available.
        """
        return pulumi.get(self, "ha_zk")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="mountDiskType")
    def mount_disk_type(self) -> pulumi.Output[int]:
        """
        Whether it is mounted on a bare disk.
        """
        return pulumi.get(self, "mount_disk_type")

    @property
    @pulumi.getter(name="productVersion")
    def product_version(self) -> pulumi.Output[str]:
        """
        Product version.
        """
        return pulumi.get(self, "product_version")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> pulumi.Output[int]:
        """
        PREPAID needs to be passed. Whether to renew automatically. 1 means auto renewal is enabled.
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Output[Optional[int]]:
        """
        Prepaid needs to be delivered, billing time length, how many months.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Private network.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

