# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBackupJobDetailResult',
    'AwaitableGetBackupJobDetailResult',
    'get_backup_job_detail',
    'get_backup_job_detail_output',
]

@pulumi.output_type
class GetBackupJobDetailResult:
    """
    A collection of values returned by getBackupJobDetail.
    """
    def __init__(__self__, back_up_job_id=None, id=None, instance_id=None, result_output_file=None, table_contents=None):
        if back_up_job_id and not isinstance(back_up_job_id, int):
            raise TypeError("Expected argument 'back_up_job_id' to be a int")
        pulumi.set(__self__, "back_up_job_id", back_up_job_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if table_contents and not isinstance(table_contents, list):
            raise TypeError("Expected argument 'table_contents' to be a list")
        pulumi.set(__self__, "table_contents", table_contents)

    @property
    @pulumi.getter(name="backUpJobId")
    def back_up_job_id(self) -> int:
        return pulumi.get(self, "back_up_job_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="tableContents")
    def table_contents(self) -> Sequence['outputs.GetBackupJobDetailTableContentResult']:
        """
        Back up tables.
        """
        return pulumi.get(self, "table_contents")


class AwaitableGetBackupJobDetailResult(GetBackupJobDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBackupJobDetailResult(
            back_up_job_id=self.back_up_job_id,
            id=self.id,
            instance_id=self.instance_id,
            result_output_file=self.result_output_file,
            table_contents=self.table_contents)


def get_backup_job_detail(back_up_job_id: Optional[int] = None,
                          instance_id: Optional[str] = None,
                          result_output_file: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBackupJobDetailResult:
    """
    Use this data source to query detailed information of clickhouse backup job detail

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    backup_job_detail = tencentcloud.Clickhouse.get_backup_job_detail(back_up_job_id=1234,
        instance_id="cdwch-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param int back_up_job_id: Back up job id.
    :param str instance_id: Instance id.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['backUpJobId'] = back_up_job_id
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Clickhouse/getBackupJobDetail:getBackupJobDetail', __args__, opts=opts, typ=GetBackupJobDetailResult).value

    return AwaitableGetBackupJobDetailResult(
        back_up_job_id=pulumi.get(__ret__, 'back_up_job_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        table_contents=pulumi.get(__ret__, 'table_contents'))


@_utilities.lift_output_func(get_backup_job_detail)
def get_backup_job_detail_output(back_up_job_id: Optional[pulumi.Input[int]] = None,
                                 instance_id: Optional[pulumi.Input[str]] = None,
                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBackupJobDetailResult]:
    """
    Use this data source to query detailed information of clickhouse backup job detail

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    backup_job_detail = tencentcloud.Clickhouse.get_backup_job_detail(back_up_job_id=1234,
        instance_id="cdwch-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param int back_up_job_id: Back up job id.
    :param str instance_id: Instance id.
    :param str result_output_file: Used to save results.
    """
    ...
