# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['XmlConfigArgs', 'XmlConfig']

@pulumi.input_type
class XmlConfigArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 modify_conf_context: pulumi.Input['XmlConfigModifyConfContextArgs']):
        """
        The set of arguments for constructing a XmlConfig resource.
        :param pulumi.Input[str] instance_id: Cluster ID.
        :param pulumi.Input['XmlConfigModifyConfContextArgs'] modify_conf_context: Configuration file modification information.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "modify_conf_context", modify_conf_context)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="modifyConfContext")
    def modify_conf_context(self) -> pulumi.Input['XmlConfigModifyConfContextArgs']:
        """
        Configuration file modification information.
        """
        return pulumi.get(self, "modify_conf_context")

    @modify_conf_context.setter
    def modify_conf_context(self, value: pulumi.Input['XmlConfigModifyConfContextArgs']):
        pulumi.set(self, "modify_conf_context", value)


@pulumi.input_type
class _XmlConfigState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 modify_conf_context: Optional[pulumi.Input['XmlConfigModifyConfContextArgs']] = None):
        """
        Input properties used for looking up and filtering XmlConfig resources.
        :param pulumi.Input[str] instance_id: Cluster ID.
        :param pulumi.Input['XmlConfigModifyConfContextArgs'] modify_conf_context: Configuration file modification information.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if modify_conf_context is not None:
            pulumi.set(__self__, "modify_conf_context", modify_conf_context)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="modifyConfContext")
    def modify_conf_context(self) -> Optional[pulumi.Input['XmlConfigModifyConfContextArgs']]:
        """
        Configuration file modification information.
        """
        return pulumi.get(self, "modify_conf_context")

    @modify_conf_context.setter
    def modify_conf_context(self, value: Optional[pulumi.Input['XmlConfigModifyConfContextArgs']]):
        pulumi.set(self, "modify_conf_context", value)


class XmlConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 modify_conf_context: Optional[pulumi.Input[pulumi.InputType['XmlConfigModifyConfContextArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a clickhouse xml_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        xml_config = tencentcloud.clickhouse.XmlConfig("xmlConfig",
            instance_id="cdwch-datuhk3z",
            modify_conf_context=tencentcloud.clickhouse.XmlConfigModifyConfContextArgs(
                file_name="metrika.xml",
                file_path="/etc/clickhouse-server",
                new_conf_value="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHlhbmRleD4KICAgIDx6b29rZWVwZXItc2VydmVycz4KICAgIDwvem9va2VlcGVyLXNlcnZlcnM+CjwveWFuZGV4Pgo=",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        clickhouse xml_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clickhouse/xmlConfig:XmlConfig xml_config cdwch-datuhk3z#metrika.xml
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Cluster ID.
        :param pulumi.Input[pulumi.InputType['XmlConfigModifyConfContextArgs']] modify_conf_context: Configuration file modification information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: XmlConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a clickhouse xml_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        xml_config = tencentcloud.clickhouse.XmlConfig("xmlConfig",
            instance_id="cdwch-datuhk3z",
            modify_conf_context=tencentcloud.clickhouse.XmlConfigModifyConfContextArgs(
                file_name="metrika.xml",
                file_path="/etc/clickhouse-server",
                new_conf_value="PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHlhbmRleD4KICAgIDx6b29rZWVwZXItc2VydmVycz4KICAgIDwvem9va2VlcGVyLXNlcnZlcnM+CjwveWFuZGV4Pgo=",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        clickhouse xml_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Clickhouse/xmlConfig:XmlConfig xml_config cdwch-datuhk3z#metrika.xml
        ```

        :param str resource_name: The name of the resource.
        :param XmlConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(XmlConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 modify_conf_context: Optional[pulumi.Input[pulumi.InputType['XmlConfigModifyConfContextArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = XmlConfigArgs.__new__(XmlConfigArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if modify_conf_context is None and not opts.urn:
                raise TypeError("Missing required property 'modify_conf_context'")
            __props__.__dict__["modify_conf_context"] = modify_conf_context
        super(XmlConfig, __self__).__init__(
            'tencentcloud:Clickhouse/xmlConfig:XmlConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            modify_conf_context: Optional[pulumi.Input[pulumi.InputType['XmlConfigModifyConfContextArgs']]] = None) -> 'XmlConfig':
        """
        Get an existing XmlConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Cluster ID.
        :param pulumi.Input[pulumi.InputType['XmlConfigModifyConfContextArgs']] modify_conf_context: Configuration file modification information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _XmlConfigState.__new__(_XmlConfigState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["modify_conf_context"] = modify_conf_context
        return XmlConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="modifyConfContext")
    def modify_conf_context(self) -> pulumi.Output['outputs.XmlConfigModifyConfContext']:
        """
        Configuration file modification information.
        """
        return pulumi.get(self, "modify_conf_context")

