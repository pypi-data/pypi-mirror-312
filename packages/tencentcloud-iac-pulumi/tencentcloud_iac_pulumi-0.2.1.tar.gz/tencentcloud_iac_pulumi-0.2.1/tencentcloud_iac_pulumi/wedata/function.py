# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionArgs', 'Function']

@pulumi.input_type
class FunctionArgs:
    def __init__(__self__, *,
                 class_name: pulumi.Input[str],
                 cluster_identifier: pulumi.Input[str],
                 comment: pulumi.Input[str],
                 db_name: pulumi.Input[str],
                 description: pulumi.Input[str],
                 example: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 param_desc: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 resource_lists: pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]],
                 return_desc: pulumi.Input[str],
                 type: pulumi.Input[str],
                 usage: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Function resource.
        :param pulumi.Input[str] class_name: Class name of function entry.
        :param pulumi.Input[str] cluster_identifier: Cluster ID.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] description: Description of the function.
        :param pulumi.Input[str] example: Example of the function.
        :param pulumi.Input[str] kind: Function Kind, Enum: ANALYSIS, ENCRYPTION, AGGREGATE, LOGIC, DATE_AND_TIME, MATH, CONVERSION, STRING, IP_AND_DOMAIN, WINDOW, OTHER.
        :param pulumi.Input[str] param_desc: Description of the Parameter.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]] resource_lists: Resource of the function, stored in WeData COS(.jar,...).
        :param pulumi.Input[str] return_desc: Description of the Return value.
        :param pulumi.Input[str] type: Function Type, Enum: HIVE, SPARK, DLC.
        :param pulumi.Input[str] usage: Usage of the function.
        :param pulumi.Input[str] name: Function Name.
        """
        pulumi.set(__self__, "class_name", class_name)
        pulumi.set(__self__, "cluster_identifier", cluster_identifier)
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "example", example)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "param_desc", param_desc)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "resource_lists", resource_lists)
        pulumi.set(__self__, "return_desc", return_desc)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "usage", usage)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Input[str]:
        """
        Class name of function entry.
        """
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_identifier")

    @cluster_identifier.setter
    def cluster_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_identifier", value)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Input[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: pulumi.Input[str]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Description of the function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def example(self) -> pulumi.Input[str]:
        """
        Example of the function.
        """
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: pulumi.Input[str]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Function Kind, Enum: ANALYSIS, ENCRYPTION, AGGREGATE, LOGIC, DATE_AND_TIME, MATH, CONVERSION, STRING, IP_AND_DOMAIN, WINDOW, OTHER.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="paramDesc")
    def param_desc(self) -> pulumi.Input[str]:
        """
        Description of the Parameter.
        """
        return pulumi.get(self, "param_desc")

    @param_desc.setter
    def param_desc(self, value: pulumi.Input[str]):
        pulumi.set(self, "param_desc", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceLists")
    def resource_lists(self) -> pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]]:
        """
        Resource of the function, stored in WeData COS(.jar,...).
        """
        return pulumi.get(self, "resource_lists")

    @resource_lists.setter
    def resource_lists(self, value: pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]]):
        pulumi.set(self, "resource_lists", value)

    @property
    @pulumi.getter(name="returnDesc")
    def return_desc(self) -> pulumi.Input[str]:
        """
        Description of the Return value.
        """
        return pulumi.get(self, "return_desc")

    @return_desc.setter
    def return_desc(self, value: pulumi.Input[str]):
        pulumi.set(self, "return_desc", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Function Type, Enum: HIVE, SPARK, DLC.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Input[str]:
        """
        Usage of the function.
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: pulumi.Input[str]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Function Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _FunctionState:
    def __init__(__self__, *,
                 class_name: Optional[pulumi.Input[str]] = None,
                 cluster_identifier: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 example: Optional[pulumi.Input[str]] = None,
                 function_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 param_desc: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 resource_lists: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]]] = None,
                 return_desc: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Function resources.
        :param pulumi.Input[str] class_name: Class name of function entry.
        :param pulumi.Input[str] cluster_identifier: Cluster ID.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] description: Description of the function.
        :param pulumi.Input[str] example: Example of the function.
        :param pulumi.Input[str] function_id: Function ID.
        :param pulumi.Input[str] kind: Function Kind, Enum: ANALYSIS, ENCRYPTION, AGGREGATE, LOGIC, DATE_AND_TIME, MATH, CONVERSION, STRING, IP_AND_DOMAIN, WINDOW, OTHER.
        :param pulumi.Input[str] name: Function Name.
        :param pulumi.Input[str] param_desc: Description of the Parameter.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]] resource_lists: Resource of the function, stored in WeData COS(.jar,...).
        :param pulumi.Input[str] return_desc: Description of the Return value.
        :param pulumi.Input[str] type: Function Type, Enum: HIVE, SPARK, DLC.
        :param pulumi.Input[str] usage: Usage of the function.
        """
        if class_name is not None:
            pulumi.set(__self__, "class_name", class_name)
        if cluster_identifier is not None:
            pulumi.set(__self__, "cluster_identifier", cluster_identifier)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if function_id is not None:
            pulumi.set(__self__, "function_id", function_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if param_desc is not None:
            pulumi.set(__self__, "param_desc", param_desc)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_lists is not None:
            pulumi.set(__self__, "resource_lists", resource_lists)
        if return_desc is not None:
            pulumi.set(__self__, "return_desc", return_desc)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> Optional[pulumi.Input[str]]:
        """
        Class name of function entry.
        """
        return pulumi.get(self, "class_name")

    @class_name.setter
    def class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_name", value)

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_identifier")

    @cluster_identifier.setter
    def cluster_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_identifier", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[pulumi.Input[str]]:
        """
        Example of the function.
        """
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[pulumi.Input[str]]:
        """
        Function ID.
        """
        return pulumi.get(self, "function_id")

    @function_id.setter
    def function_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_id", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Function Kind, Enum: ANALYSIS, ENCRYPTION, AGGREGATE, LOGIC, DATE_AND_TIME, MATH, CONVERSION, STRING, IP_AND_DOMAIN, WINDOW, OTHER.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Function Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="paramDesc")
    def param_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Parameter.
        """
        return pulumi.get(self, "param_desc")

    @param_desc.setter
    def param_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_desc", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceLists")
    def resource_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]]]:
        """
        Resource of the function, stored in WeData COS(.jar,...).
        """
        return pulumi.get(self, "resource_lists")

    @resource_lists.setter
    def resource_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionResourceListArgs']]]]):
        pulumi.set(self, "resource_lists", value)

    @property
    @pulumi.getter(name="returnDesc")
    def return_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the Return value.
        """
        return pulumi.get(self, "return_desc")

    @return_desc.setter
    def return_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "return_desc", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Function Type, Enum: HIVE, SPARK, DLC.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        """
        Usage of the function.
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


class Function(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 cluster_identifier: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 example: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 param_desc: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 resource_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionResourceListArgs']]]]] = None,
                 return_desc: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a wedata function

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.Function("example",
            class_name="tf_class_example",
            cluster_identifier="emr-m6u3qgk0",
            comment="V1",
            db_name="tf_db_example",
            description="description.",
            example="example info.",
            kind="ANALYSIS",
            param_desc="param info.",
            project_id="1612982498218618880",
            resource_lists=[tencentcloud.wedata.FunctionResourceListArgs(
                id="5b28bcdf-a0e6-4022-927d-927d399c4593",
                name="untitled3-1.0-SNAPSHOT.jar",
                path="/wedata-demo-1314991481/untitled3-1.0-SNAPSHOT.jar",
                type="cos",
            )],
            return_desc="return value info.",
            type="HIVE",
            usage="usage info.")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] class_name: Class name of function entry.
        :param pulumi.Input[str] cluster_identifier: Cluster ID.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] description: Description of the function.
        :param pulumi.Input[str] example: Example of the function.
        :param pulumi.Input[str] kind: Function Kind, Enum: ANALYSIS, ENCRYPTION, AGGREGATE, LOGIC, DATE_AND_TIME, MATH, CONVERSION, STRING, IP_AND_DOMAIN, WINDOW, OTHER.
        :param pulumi.Input[str] name: Function Name.
        :param pulumi.Input[str] param_desc: Description of the Parameter.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionResourceListArgs']]]] resource_lists: Resource of the function, stored in WeData COS(.jar,...).
        :param pulumi.Input[str] return_desc: Description of the Return value.
        :param pulumi.Input[str] type: Function Type, Enum: HIVE, SPARK, DLC.
        :param pulumi.Input[str] usage: Usage of the function.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a wedata function

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.Function("example",
            class_name="tf_class_example",
            cluster_identifier="emr-m6u3qgk0",
            comment="V1",
            db_name="tf_db_example",
            description="description.",
            example="example info.",
            kind="ANALYSIS",
            param_desc="param info.",
            project_id="1612982498218618880",
            resource_lists=[tencentcloud.wedata.FunctionResourceListArgs(
                id="5b28bcdf-a0e6-4022-927d-927d399c4593",
                name="untitled3-1.0-SNAPSHOT.jar",
                path="/wedata-demo-1314991481/untitled3-1.0-SNAPSHOT.jar",
                type="cos",
            )],
            return_desc="return value info.",
            type="HIVE",
            usage="usage info.")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param FunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 class_name: Optional[pulumi.Input[str]] = None,
                 cluster_identifier: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 example: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 param_desc: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 resource_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionResourceListArgs']]]]] = None,
                 return_desc: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionArgs.__new__(FunctionArgs)

            if class_name is None and not opts.urn:
                raise TypeError("Missing required property 'class_name'")
            __props__.__dict__["class_name"] = class_name
            if cluster_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_identifier'")
            __props__.__dict__["cluster_identifier"] = cluster_identifier
            if comment is None and not opts.urn:
                raise TypeError("Missing required property 'comment'")
            __props__.__dict__["comment"] = comment
            if db_name is None and not opts.urn:
                raise TypeError("Missing required property 'db_name'")
            __props__.__dict__["db_name"] = db_name
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if example is None and not opts.urn:
                raise TypeError("Missing required property 'example'")
            __props__.__dict__["example"] = example
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            __props__.__dict__["name"] = name
            if param_desc is None and not opts.urn:
                raise TypeError("Missing required property 'param_desc'")
            __props__.__dict__["param_desc"] = param_desc
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if resource_lists is None and not opts.urn:
                raise TypeError("Missing required property 'resource_lists'")
            __props__.__dict__["resource_lists"] = resource_lists
            if return_desc is None and not opts.urn:
                raise TypeError("Missing required property 'return_desc'")
            __props__.__dict__["return_desc"] = return_desc
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            if usage is None and not opts.urn:
                raise TypeError("Missing required property 'usage'")
            __props__.__dict__["usage"] = usage
            __props__.__dict__["function_id"] = None
        super(Function, __self__).__init__(
            'tencentcloud:Wedata/function:Function',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            class_name: Optional[pulumi.Input[str]] = None,
            cluster_identifier: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            db_name: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            example: Optional[pulumi.Input[str]] = None,
            function_id: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            param_desc: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            resource_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionResourceListArgs']]]]] = None,
            return_desc: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            usage: Optional[pulumi.Input[str]] = None) -> 'Function':
        """
        Get an existing Function resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] class_name: Class name of function entry.
        :param pulumi.Input[str] cluster_identifier: Cluster ID.
        :param pulumi.Input[str] comment: Comment.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] description: Description of the function.
        :param pulumi.Input[str] example: Example of the function.
        :param pulumi.Input[str] function_id: Function ID.
        :param pulumi.Input[str] kind: Function Kind, Enum: ANALYSIS, ENCRYPTION, AGGREGATE, LOGIC, DATE_AND_TIME, MATH, CONVERSION, STRING, IP_AND_DOMAIN, WINDOW, OTHER.
        :param pulumi.Input[str] name: Function Name.
        :param pulumi.Input[str] param_desc: Description of the Parameter.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FunctionResourceListArgs']]]] resource_lists: Resource of the function, stored in WeData COS(.jar,...).
        :param pulumi.Input[str] return_desc: Description of the Return value.
        :param pulumi.Input[str] type: Function Type, Enum: HIVE, SPARK, DLC.
        :param pulumi.Input[str] usage: Usage of the function.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionState.__new__(_FunctionState)

        __props__.__dict__["class_name"] = class_name
        __props__.__dict__["cluster_identifier"] = cluster_identifier
        __props__.__dict__["comment"] = comment
        __props__.__dict__["db_name"] = db_name
        __props__.__dict__["description"] = description
        __props__.__dict__["example"] = example
        __props__.__dict__["function_id"] = function_id
        __props__.__dict__["kind"] = kind
        __props__.__dict__["name"] = name
        __props__.__dict__["param_desc"] = param_desc
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_lists"] = resource_lists
        __props__.__dict__["return_desc"] = return_desc
        __props__.__dict__["type"] = type
        __props__.__dict__["usage"] = usage
        return Function(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="className")
    def class_name(self) -> pulumi.Output[str]:
        """
        Class name of function entry.
        """
        return pulumi.get(self, "class_name")

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_identifier")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        Comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Output[str]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the function.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def example(self) -> pulumi.Output[str]:
        """
        Example of the function.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> pulumi.Output[str]:
        """
        Function ID.
        """
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        Function Kind, Enum: ANALYSIS, ENCRYPTION, AGGREGATE, LOGIC, DATE_AND_TIME, MATH, CONVERSION, STRING, IP_AND_DOMAIN, WINDOW, OTHER.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Function Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paramDesc")
    def param_desc(self) -> pulumi.Output[str]:
        """
        Description of the Parameter.
        """
        return pulumi.get(self, "param_desc")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resourceLists")
    def resource_lists(self) -> pulumi.Output[Sequence['outputs.FunctionResourceList']]:
        """
        Resource of the function, stored in WeData COS(.jar,...).
        """
        return pulumi.get(self, "resource_lists")

    @property
    @pulumi.getter(name="returnDesc")
    def return_desc(self) -> pulumi.Output[str]:
        """
        Description of the Return value.
        """
        return pulumi.get(self, "return_desc")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Function Type, Enum: HIVE, SPARK, DLC.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Output[str]:
        """
        Usage of the function.
        """
        return pulumi.get(self, "usage")

