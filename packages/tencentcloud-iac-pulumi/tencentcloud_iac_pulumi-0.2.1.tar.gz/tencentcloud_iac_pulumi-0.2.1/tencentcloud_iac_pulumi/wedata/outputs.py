# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BaselineAlarmRuleDto',
    'BaselineBaselineCreateAlarmRuleRequest',
    'BaselinePromiseTask',
    'DqRuleCompareRule',
    'DqRuleCompareRuleItem',
    'DqRuleCompareRuleItemValueList',
    'DqRuleFieldConfig',
    'DqRuleFieldConfigTableConfig',
    'DqRuleFieldConfigTableConfigFieldConfig',
    'DqRuleFieldConfigWhereConfig',
    'FunctionResourceList',
    'IntegrationOfflineTaskTaskInfo',
    'IntegrationOfflineTaskTaskInfoConfig',
    'IntegrationOfflineTaskTaskInfoExecuteContext',
    'IntegrationOfflineTaskTaskInfoExtConfig',
    'IntegrationOfflineTaskTaskInfoMapping',
    'IntegrationOfflineTaskTaskInfoMappingExtConfig',
    'IntegrationOfflineTaskTaskInfoMappingSchemaMapping',
    'IntegrationOfflineTaskTaskInfoMappingSourceSchema',
    'IntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty',
    'IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity',
    'IntegrationRealtimeTaskTaskInfo',
    'IntegrationRealtimeTaskTaskInfoConfig',
    'IntegrationRealtimeTaskTaskInfoExecuteContext',
    'IntegrationRealtimeTaskTaskInfoExtConfig',
    'IntegrationRealtimeTaskTaskInfoMapping',
    'IntegrationRealtimeTaskTaskInfoMappingExtConfig',
    'IntegrationRealtimeTaskTaskInfoMappingSchemaMapping',
    'IntegrationRealtimeTaskTaskInfoMappingSourceSchema',
    'IntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty',
    'IntegrationRealtimeTaskTaskInfoNode',
    'IntegrationRealtimeTaskTaskInfoNodeConfig',
    'IntegrationRealtimeTaskTaskInfoNodeExtConfig',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMapping',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty',
    'IntegrationRealtimeTaskTaskInfoNodeSchema',
    'IntegrationRealtimeTaskTaskInfoNodeSchemaProperty',
    'IntegrationTaskNodeNodeInfo',
    'IntegrationTaskNodeNodeInfoConfig',
    'IntegrationTaskNodeNodeInfoExtConfig',
    'IntegrationTaskNodeNodeInfoNodeMapping',
    'IntegrationTaskNodeNodeInfoNodeMappingExtConfig',
    'IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping',
    'IntegrationTaskNodeNodeInfoNodeMappingSourceSchema',
    'IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty',
    'IntegrationTaskNodeNodeInfoSchema',
    'IntegrationTaskNodeNodeInfoSchemaProperty',
    'GetDataSourceListFilterResult',
    'GetDataSourceListOrderFieldResult',
    'GetDataSourceListRowResult',
    'GetDataSourceWithoutInfoDataResult',
    'GetDataSourceWithoutInfoFilterResult',
    'GetDataSourceWithoutInfoOrderFieldResult',
    'GetRuleTemplatesDataResult',
]

@pulumi.output_type
class BaselineAlarmRuleDto(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmLevelType":
            suggest = "alarm_level_type"
        elif key == "alarmRuleId":
            suggest = "alarm_rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BaselineAlarmRuleDto. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BaselineAlarmRuleDto.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BaselineAlarmRuleDto.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_level_type: Optional[str] = None,
                 alarm_rule_id: Optional[str] = None):
        """
        :param str alarm_level_type: Important;Urgent;Normal.
        :param str alarm_rule_id: Alarm Rule ID.
        """
        if alarm_level_type is not None:
            pulumi.set(__self__, "alarm_level_type", alarm_level_type)
        if alarm_rule_id is not None:
            pulumi.set(__self__, "alarm_rule_id", alarm_rule_id)

    @property
    @pulumi.getter(name="alarmLevelType")
    def alarm_level_type(self) -> Optional[str]:
        """
        Important;Urgent;Normal.
        """
        return pulumi.get(self, "alarm_level_type")

    @property
    @pulumi.getter(name="alarmRuleId")
    def alarm_rule_id(self) -> Optional[str]:
        """
        Alarm Rule ID.
        """
        return pulumi.get(self, "alarm_rule_id")


@pulumi.output_type
class BaselineBaselineCreateAlarmRuleRequest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmLevel":
            suggest = "alarm_level"
        elif key == "alarmRecipientIds":
            suggest = "alarm_recipient_ids"
        elif key == "alarmRecipientType":
            suggest = "alarm_recipient_type"
        elif key == "alarmRecipients":
            suggest = "alarm_recipients"
        elif key == "alarmTypes":
            suggest = "alarm_types"
        elif key == "alarmWays":
            suggest = "alarm_ways"
        elif key == "creatorId":
            suggest = "creator_id"
        elif key == "extInfo":
            suggest = "ext_info"
        elif key == "monitorObjectIds":
            suggest = "monitor_object_ids"
        elif key == "monitorType":
            suggest = "monitor_type"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BaselineBaselineCreateAlarmRuleRequest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BaselineBaselineCreateAlarmRuleRequest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BaselineBaselineCreateAlarmRuleRequest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_level: Optional[int] = None,
                 alarm_recipient_ids: Optional[Sequence[str]] = None,
                 alarm_recipient_type: Optional[int] = None,
                 alarm_recipients: Optional[Sequence[str]] = None,
                 alarm_types: Optional[Sequence[str]] = None,
                 alarm_ways: Optional[Sequence[str]] = None,
                 creator: Optional[str] = None,
                 creator_id: Optional[str] = None,
                 ext_info: Optional[str] = None,
                 monitor_object_ids: Optional[Sequence[str]] = None,
                 monitor_type: Optional[int] = None,
                 project_id: Optional[str] = None,
                 rule_name: Optional[str] = None):
        """
        :param int alarm_level: Alarm Level, 1. Normal, 2. Important, 3. Urgent (default is 1. Normal)Note: This field may return null, indicating no valid value.
        :param Sequence[str] alarm_recipient_ids: Alarm Recipient IDsNote: This field may return null, indicating no valid value.
        :param int alarm_recipient_type: Alarm Recipient Type: 1. Specified Personnel, 2. Task Owner, 3. Duty Roster (default is 1. Specified Personnel)Note: This field may return null, indicating no valid value.
        :param Sequence[str] alarm_recipients: Alarm RecipientsNote: This field may return null, indicating no valid value.
        :param Sequence[str] alarm_types: Alarm Types, 1. Failure Alarm, 2. Timeout Alarm, 3. Success Alarm, 4. Baseline Violation, 5. Baseline Warning, 6. Baseline Task Failure (default is 1. Failure Alarm)Note: This field may return null, indicating no valid value.
        :param Sequence[str] alarm_ways: Alarm Methods, 1. Email, 2. SMS, 3. WeChat, 4. Voice, 5. Enterprise WeChat, 6. HTTP, 7. Enterprise WeChat Group; Alarm method code list (default is 1. Email)Note: This field may return null, indicating no valid value.
        :param str creator: Creator UINNote: This field may return null, indicating no valid value.
        :param str creator_id: Creator NameNote: This field may return null, indicating no valid value.
        :param str ext_info: Extended Information, 1. Estimated Runtime (default), 2. Estimated Completion Time, 3. Estimated Scheduling Time, 4. Incomplete within the Cycle; Value Types: 1. Specified Value, 2. Historical Average (default is 1. Specified Value)Note: This field may return null, indicating no valid value.
        :param Sequence[str] monitor_object_ids: Monitoring ObjectsNote: This field may return null, indicating no valid value.
        :param int monitor_type: Monitoring Type, 1. Task, 2. Workflow, 3. Project, 4. Baseline (default is 1. Task)Note: This field may return null, indicating no valid value.
        :param str project_id: Project NameNote: This field may return null, indicating no valid value.
        :param str rule_name: Rule NameNote: This field may return null, indicating no valid value.
        """
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_recipient_ids is not None:
            pulumi.set(__self__, "alarm_recipient_ids", alarm_recipient_ids)
        if alarm_recipient_type is not None:
            pulumi.set(__self__, "alarm_recipient_type", alarm_recipient_type)
        if alarm_recipients is not None:
            pulumi.set(__self__, "alarm_recipients", alarm_recipients)
        if alarm_types is not None:
            pulumi.set(__self__, "alarm_types", alarm_types)
        if alarm_ways is not None:
            pulumi.set(__self__, "alarm_ways", alarm_ways)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if ext_info is not None:
            pulumi.set(__self__, "ext_info", ext_info)
        if monitor_object_ids is not None:
            pulumi.set(__self__, "monitor_object_ids", monitor_object_ids)
        if monitor_type is not None:
            pulumi.set(__self__, "monitor_type", monitor_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[int]:
        """
        Alarm Level, 1. Normal, 2. Important, 3. Urgent (default is 1. Normal)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_level")

    @property
    @pulumi.getter(name="alarmRecipientIds")
    def alarm_recipient_ids(self) -> Optional[Sequence[str]]:
        """
        Alarm Recipient IDsNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_recipient_ids")

    @property
    @pulumi.getter(name="alarmRecipientType")
    def alarm_recipient_type(self) -> Optional[int]:
        """
        Alarm Recipient Type: 1. Specified Personnel, 2. Task Owner, 3. Duty Roster (default is 1. Specified Personnel)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_recipient_type")

    @property
    @pulumi.getter(name="alarmRecipients")
    def alarm_recipients(self) -> Optional[Sequence[str]]:
        """
        Alarm RecipientsNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_recipients")

    @property
    @pulumi.getter(name="alarmTypes")
    def alarm_types(self) -> Optional[Sequence[str]]:
        """
        Alarm Types, 1. Failure Alarm, 2. Timeout Alarm, 3. Success Alarm, 4. Baseline Violation, 5. Baseline Warning, 6. Baseline Task Failure (default is 1. Failure Alarm)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_types")

    @property
    @pulumi.getter(name="alarmWays")
    def alarm_ways(self) -> Optional[Sequence[str]]:
        """
        Alarm Methods, 1. Email, 2. SMS, 3. WeChat, 4. Voice, 5. Enterprise WeChat, 6. HTTP, 7. Enterprise WeChat Group; Alarm method code list (default is 1. Email)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_ways")

    @property
    @pulumi.getter
    def creator(self) -> Optional[str]:
        """
        Creator UINNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[str]:
        """
        Creator NameNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "creator_id")

    @property
    @pulumi.getter(name="extInfo")
    def ext_info(self) -> Optional[str]:
        """
        Extended Information, 1. Estimated Runtime (default), 2. Estimated Completion Time, 3. Estimated Scheduling Time, 4. Incomplete within the Cycle; Value Types: 1. Specified Value, 2. Historical Average (default is 1. Specified Value)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "ext_info")

    @property
    @pulumi.getter(name="monitorObjectIds")
    def monitor_object_ids(self) -> Optional[Sequence[str]]:
        """
        Monitoring ObjectsNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "monitor_object_ids")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> Optional[int]:
        """
        Monitoring Type, 1. Task, 2. Workflow, 3. Project, 4. Baseline (default is 1. Task)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project NameNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[str]:
        """
        Rule NameNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "rule_name")


@pulumi.output_type
class BaselinePromiseTask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "projectId":
            suggest = "project_id"
        elif key == "taskCycle":
            suggest = "task_cycle"
        elif key == "taskId":
            suggest = "task_id"
        elif key == "taskInChargeName":
            suggest = "task_in_charge_name"
        elif key == "taskInChargeUin":
            suggest = "task_in_charge_uin"
        elif key == "taskName":
            suggest = "task_name"
        elif key == "workflowId":
            suggest = "workflow_id"
        elif key == "workflowName":
            suggest = "workflow_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BaselinePromiseTask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BaselinePromiseTask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BaselinePromiseTask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 project_id: Optional[str] = None,
                 task_cycle: Optional[str] = None,
                 task_id: Optional[str] = None,
                 task_in_charge_name: Optional[str] = None,
                 task_in_charge_uin: Optional[str] = None,
                 task_name: Optional[str] = None,
                 workflow_id: Optional[str] = None,
                 workflow_name: Optional[str] = None):
        """
        :param str project_id: Project ID.
        :param str task_cycle: Task Scheduling Cycle.
        :param str task_id: Task ID.
        :param str task_in_charge_name: Task Owner Name.
        :param str task_in_charge_uin: Task Owner ID.
        :param str task_name: Task Name.
        :param str workflow_id: Workflow ID.
        :param str workflow_name: Workflow Name.
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if task_cycle is not None:
            pulumi.set(__self__, "task_cycle", task_cycle)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_in_charge_name is not None:
            pulumi.set(__self__, "task_in_charge_name", task_in_charge_name)
        if task_in_charge_uin is not None:
            pulumi.set(__self__, "task_in_charge_uin", task_in_charge_uin)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="taskCycle")
    def task_cycle(self) -> Optional[str]:
        """
        Task Scheduling Cycle.
        """
        return pulumi.get(self, "task_cycle")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        """
        Task ID.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskInChargeName")
    def task_in_charge_name(self) -> Optional[str]:
        """
        Task Owner Name.
        """
        return pulumi.get(self, "task_in_charge_name")

    @property
    @pulumi.getter(name="taskInChargeUin")
    def task_in_charge_uin(self) -> Optional[str]:
        """
        Task Owner ID.
        """
        return pulumi.get(self, "task_in_charge_uin")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[str]:
        """
        Task Name.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[str]:
        """
        Workflow ID.
        """
        return pulumi.get(self, "workflow_id")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[str]:
        """
        Workflow Name.
        """
        return pulumi.get(self, "workflow_name")


@pulumi.output_type
class DqRuleCompareRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cycleStep":
            suggest = "cycle_step"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DqRuleCompareRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DqRuleCompareRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DqRuleCompareRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cycle_step: Optional[int] = None,
                 items: Optional[Sequence['outputs.DqRuleCompareRuleItem']] = None):
        """
        :param int cycle_step: Periodic Indicates the default period of a template, in secondsNote: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['DqRuleCompareRuleItemArgs'] items: Comparison condition listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if cycle_step is not None:
            pulumi.set(__self__, "cycle_step", cycle_step)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="cycleStep")
    def cycle_step(self) -> Optional[int]:
        """
        Periodic Indicates the default period of a template, in secondsNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "cycle_step")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.DqRuleCompareRuleItem']]:
        """
        Comparison condition listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class DqRuleCompareRuleItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "compareType":
            suggest = "compare_type"
        elif key == "valueComputeType":
            suggest = "value_compute_type"
        elif key == "valueLists":
            suggest = "value_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DqRuleCompareRuleItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DqRuleCompareRuleItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DqRuleCompareRuleItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compare_type: Optional[int] = None,
                 operator: Optional[str] = None,
                 value_compute_type: Optional[int] = None,
                 value_lists: Optional[Sequence['outputs.DqRuleCompareRuleItemValueList']] = None):
        """
        :param int compare_type: Comparison type 1. Fixed value 2. Fluctuating value 3. Comparison of value range 4. Enumeration range comparison 5. Do not compareNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str operator: Comparison operation type &amp;lt; &amp;lt;= == =&amp;gt; &amp;gt;Note: This field may return null, indicating that a valid value cannot be obtained.
        :param int value_compute_type: Quality statistics Type 1. Absolute value 2. Increase 3. Decrease 4. C contains 5. N C does not containNote: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['DqRuleCompareRuleItemValueListArgs'] value_lists: Compare the threshold listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if compare_type is not None:
            pulumi.set(__self__, "compare_type", compare_type)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value_compute_type is not None:
            pulumi.set(__self__, "value_compute_type", value_compute_type)
        if value_lists is not None:
            pulumi.set(__self__, "value_lists", value_lists)

    @property
    @pulumi.getter(name="compareType")
    def compare_type(self) -> Optional[int]:
        """
        Comparison type 1. Fixed value 2. Fluctuating value 3. Comparison of value range 4. Enumeration range comparison 5. Do not compareNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "compare_type")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Comparison operation type &amp;lt; &amp;lt;= == =&amp;gt; &amp;gt;Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="valueComputeType")
    def value_compute_type(self) -> Optional[int]:
        """
        Quality statistics Type 1. Absolute value 2. Increase 3. Decrease 4. C contains 5. N C does not containNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value_compute_type")

    @property
    @pulumi.getter(name="valueLists")
    def value_lists(self) -> Optional[Sequence['outputs.DqRuleCompareRuleItemValueList']]:
        """
        Compare the threshold listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value_lists")


@pulumi.output_type
class DqRuleCompareRuleItemValueList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DqRuleCompareRuleItemValueList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DqRuleCompareRuleItemValueList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DqRuleCompareRuleItemValueList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: Optional[str] = None,
                 value_type: Optional[int] = None):
        """
        :param str value: Threshold valueNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int value_type: Threshold type 1. Low threshold 2. High threshold 3. Common threshold 4. Enumerated valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Threshold valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[int]:
        """
        Threshold type 1. Low threshold 2. High threshold 3. Common threshold 4. Enumerated valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class DqRuleFieldConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableConfigs":
            suggest = "table_configs"
        elif key == "whereConfigs":
            suggest = "where_configs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DqRuleFieldConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DqRuleFieldConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DqRuleFieldConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 table_configs: Optional[Sequence['outputs.DqRuleFieldConfigTableConfig']] = None,
                 where_configs: Optional[Sequence['outputs.DqRuleFieldConfigWhereConfig']] = None):
        """
        :param Sequence['DqRuleFieldConfigTableConfigArgs'] table_configs: Library table variableNote: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['DqRuleFieldConfigWhereConfigArgs'] where_configs: Where variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if table_configs is not None:
            pulumi.set(__self__, "table_configs", table_configs)
        if where_configs is not None:
            pulumi.set(__self__, "where_configs", where_configs)

    @property
    @pulumi.getter(name="tableConfigs")
    def table_configs(self) -> Optional[Sequence['outputs.DqRuleFieldConfigTableConfig']]:
        """
        Library table variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_configs")

    @property
    @pulumi.getter(name="whereConfigs")
    def where_configs(self) -> Optional[Sequence['outputs.DqRuleFieldConfigWhereConfig']]:
        """
        Where variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "where_configs")


@pulumi.output_type
class DqRuleFieldConfigTableConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseId":
            suggest = "database_id"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "fieldConfigs":
            suggest = "field_configs"
        elif key == "tableId":
            suggest = "table_id"
        elif key == "tableKey":
            suggest = "table_key"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DqRuleFieldConfigTableConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DqRuleFieldConfigTableConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DqRuleFieldConfigTableConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_id: Optional[str] = None,
                 database_name: Optional[str] = None,
                 field_configs: Optional[Sequence['outputs.DqRuleFieldConfigTableConfigFieldConfig']] = None,
                 table_id: Optional[str] = None,
                 table_key: Optional[str] = None,
                 table_name: Optional[str] = None):
        """
        :param str database_id: Database idNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str database_name: Database nameNote: This field may return null, indicating that a valid value cannot be obtained.
        :param Sequence['DqRuleFieldConfigTableConfigFieldConfigArgs'] field_configs: Field variableNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str table_id: Table idNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str table_key: Table keyNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str table_name: Table nameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if field_configs is not None:
            pulumi.set(__self__, "field_configs", field_configs)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)
        if table_key is not None:
            pulumi.set(__self__, "table_key", table_key)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[str]:
        """
        Database idNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Database nameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="fieldConfigs")
    def field_configs(self) -> Optional[Sequence['outputs.DqRuleFieldConfigTableConfigFieldConfig']]:
        """
        Field variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_configs")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[str]:
        """
        Table idNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_id")

    @property
    @pulumi.getter(name="tableKey")
    def table_key(self) -> Optional[str]:
        """
        Table keyNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_key")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        Table nameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class DqRuleFieldConfigTableConfigFieldConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDataType":
            suggest = "field_data_type"
        elif key == "fieldKey":
            suggest = "field_key"
        elif key == "fieldValue":
            suggest = "field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DqRuleFieldConfigTableConfigFieldConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DqRuleFieldConfigTableConfigFieldConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DqRuleFieldConfigTableConfigFieldConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_data_type: Optional[str] = None,
                 field_key: Optional[str] = None,
                 field_value: Optional[str] = None):
        """
        :param str field_data_type: Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str field_key: Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str field_value: Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if field_data_type is not None:
            pulumi.set(__self__, "field_data_type", field_data_type)
        if field_key is not None:
            pulumi.set(__self__, "field_key", field_key)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldDataType")
    def field_data_type(self) -> Optional[str]:
        """
        Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_data_type")

    @property
    @pulumi.getter(name="fieldKey")
    def field_key(self) -> Optional[str]:
        """
        Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_key")

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[str]:
        """
        Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_value")


@pulumi.output_type
class DqRuleFieldConfigWhereConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldDataType":
            suggest = "field_data_type"
        elif key == "fieldKey":
            suggest = "field_key"
        elif key == "fieldValue":
            suggest = "field_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DqRuleFieldConfigWhereConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DqRuleFieldConfigWhereConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DqRuleFieldConfigWhereConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_data_type: Optional[str] = None,
                 field_key: Optional[str] = None,
                 field_value: Optional[str] = None):
        """
        :param str field_data_type: Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str field_key: Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str field_value: Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if field_data_type is not None:
            pulumi.set(__self__, "field_data_type", field_data_type)
        if field_key is not None:
            pulumi.set(__self__, "field_key", field_key)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldDataType")
    def field_data_type(self) -> Optional[str]:
        """
        Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_data_type")

    @property
    @pulumi.getter(name="fieldKey")
    def field_key(self) -> Optional[str]:
        """
        Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_key")

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[str]:
        """
        Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_value")


@pulumi.output_type
class FunctionResourceList(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 id: Optional[str] = None,
                 md5: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str name: Resource Name.
        :param str path: Resource Path.
        :param str id: Resource ID.
        :param str md5: Resource MD5 Value.
        :param str type: Resource Type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Resource Path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def md5(self) -> Optional[str]:
        """
        Resource MD5 Value.
        """
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Resource Type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "creatorUin":
            suggest = "creator_uin"
        elif key == "dataProxyUrls":
            suggest = "data_proxy_urls"
        elif key == "executeContexts":
            suggest = "execute_contexts"
        elif key == "executorGroupName":
            suggest = "executor_group_name"
        elif key == "executorId":
            suggest = "executor_id"
        elif key == "extConfigs":
            suggest = "ext_configs"
        elif key == "hasVersion":
            suggest = "has_version"
        elif key == "inLongManagerUrl":
            suggest = "in_long_manager_url"
        elif key == "inLongManagerVersion":
            suggest = "in_long_manager_version"
        elif key == "inLongStreamId":
            suggest = "in_long_stream_id"
        elif key == "inputDatasourceType":
            suggest = "input_datasource_type"
        elif key == "instanceVersion":
            suggest = "instance_version"
        elif key == "lastRunTime":
            suggest = "last_run_time"
        elif key == "numRecordsIn":
            suggest = "num_records_in"
        elif key == "numRecordsOut":
            suggest = "num_records_out"
        elif key == "numRestarts":
            suggest = "num_restarts"
        elif key == "offlineTaskAddEntity":
            suggest = "offline_task_add_entity"
        elif key == "operatorUin":
            suggest = "operator_uin"
        elif key == "outputDatasourceType":
            suggest = "output_datasource_type"
        elif key == "ownerUin":
            suggest = "owner_uin"
        elif key == "readPhase":
            suggest = "read_phase"
        elif key == "readerDelay":
            suggest = "reader_delay"
        elif key == "runningCu":
            suggest = "running_cu"
        elif key == "scheduleTaskId":
            suggest = "schedule_task_id"
        elif key == "stopTime":
            suggest = "stop_time"
        elif key == "switchResource":
            suggest = "switch_resource"
        elif key == "syncType":
            suggest = "sync_type"
        elif key == "taskAlarmRegularLists":
            suggest = "task_alarm_regular_lists"
        elif key == "taskGroupId":
            suggest = "task_group_id"
        elif key == "taskMode":
            suggest = "task_mode"
        elif key == "updateTime":
            suggest = "update_time"
        elif key == "workflowId":
            suggest = "workflow_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationOfflineTaskTaskInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationOfflineTaskTaskInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationOfflineTaskTaskInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 configs: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoConfig']] = None,
                 create_time: Optional[str] = None,
                 creator_uin: Optional[str] = None,
                 data_proxy_urls: Optional[Sequence[str]] = None,
                 execute_contexts: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoExecuteContext']] = None,
                 executor_group_name: Optional[str] = None,
                 executor_id: Optional[str] = None,
                 ext_configs: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoExtConfig']] = None,
                 has_version: Optional[bool] = None,
                 in_long_manager_url: Optional[str] = None,
                 in_long_manager_version: Optional[str] = None,
                 in_long_stream_id: Optional[str] = None,
                 incharge: Optional[str] = None,
                 input_datasource_type: Optional[str] = None,
                 instance_version: Optional[int] = None,
                 last_run_time: Optional[str] = None,
                 locked: Optional[bool] = None,
                 locker: Optional[str] = None,
                 mappings: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMapping']] = None,
                 num_records_in: Optional[int] = None,
                 num_records_out: Optional[int] = None,
                 num_restarts: Optional[int] = None,
                 offline_task_add_entity: Optional['outputs.IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity'] = None,
                 operator_uin: Optional[str] = None,
                 output_datasource_type: Optional[str] = None,
                 owner_uin: Optional[str] = None,
                 read_phase: Optional[int] = None,
                 reader_delay: Optional[float] = None,
                 running_cu: Optional[float] = None,
                 schedule_task_id: Optional[str] = None,
                 status: Optional[int] = None,
                 stop_time: Optional[str] = None,
                 submit: Optional[bool] = None,
                 switch_resource: Optional[int] = None,
                 sync_type: Optional[int] = None,
                 task_alarm_regular_lists: Optional[Sequence[str]] = None,
                 task_group_id: Optional[str] = None,
                 task_mode: Optional[str] = None,
                 update_time: Optional[str] = None,
                 workflow_id: Optional[str] = None):
        """
        :param str app_id: User App Id.
        :param Sequence['IntegrationOfflineTaskTaskInfoConfigArgs'] configs: Task configuration.
        :param str create_time: Create time.
        :param str creator_uin: Creator User ID.
        :param Sequence[str] data_proxy_urls: Data proxy url.
        :param Sequence['IntegrationOfflineTaskTaskInfoExecuteContextArgs'] execute_contexts: Execute context.
        :param str executor_group_name: Executor group name.
        :param str executor_id: Executor resource ID.
        :param Sequence['IntegrationOfflineTaskTaskInfoExtConfigArgs'] ext_configs: Node extension configuration information.
        :param bool has_version: Whether the task been submitted.
        :param str in_long_manager_url: InLong manager url.
        :param str in_long_manager_version: InLong manager version.
        :param str in_long_stream_id: InLong stream id.
        :param str incharge: Incharge user.
        :param str input_datasource_type: Input datasource type.
        :param int instance_version: Instance version.
        :param str last_run_time: The last time the task was run.
        :param bool locked: Whether the task been locked.
        :param str locker: User locked task.
        :param Sequence['IntegrationOfflineTaskTaskInfoMappingArgs'] mappings: Node mapping.
        :param int num_records_in: Number of reads.
        :param int num_records_out: Number of writes.
        :param int num_restarts: Times of restarts.
        :param 'IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs' offline_task_add_entity: Offline task scheduling configuration.
        :param str operator_uin: Operator User ID.
        :param str output_datasource_type: Output datasource type.
        :param str owner_uin: Owner User ID.
        :param int read_phase: Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        :param float reader_delay: Read latency.
        :param float running_cu: The amount of resources consumed by real-time task.
        :param str schedule_task_id: Task scheduling id (job id such as oceanus or us).
        :param int status: Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        :param str stop_time: The time the task was stopped.
        :param bool submit: Whether the task version has been submitted for operation and maintenance.
        :param int switch_resource: Resource tiering status, 0: in progress, 1: successful, 2: failed.
        :param int sync_type: Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        :param Sequence[str] task_alarm_regular_lists: Task alarm regular.
        :param str task_group_id: Inlong Task Group ID.
        :param str task_mode: Task display mode, 0: canvas mode, 1: form mode.
        :param str update_time: Update time.
        :param str workflow_id: The workflow id to which the task belongs.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if data_proxy_urls is not None:
            pulumi.set(__self__, "data_proxy_urls", data_proxy_urls)
        if execute_contexts is not None:
            pulumi.set(__self__, "execute_contexts", execute_contexts)
        if executor_group_name is not None:
            pulumi.set(__self__, "executor_group_name", executor_group_name)
        if executor_id is not None:
            pulumi.set(__self__, "executor_id", executor_id)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if has_version is not None:
            pulumi.set(__self__, "has_version", has_version)
        if in_long_manager_url is not None:
            pulumi.set(__self__, "in_long_manager_url", in_long_manager_url)
        if in_long_manager_version is not None:
            pulumi.set(__self__, "in_long_manager_version", in_long_manager_version)
        if in_long_stream_id is not None:
            pulumi.set(__self__, "in_long_stream_id", in_long_stream_id)
        if incharge is not None:
            pulumi.set(__self__, "incharge", incharge)
        if input_datasource_type is not None:
            pulumi.set(__self__, "input_datasource_type", input_datasource_type)
        if instance_version is not None:
            pulumi.set(__self__, "instance_version", instance_version)
        if last_run_time is not None:
            pulumi.set(__self__, "last_run_time", last_run_time)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if locker is not None:
            pulumi.set(__self__, "locker", locker)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if num_records_in is not None:
            pulumi.set(__self__, "num_records_in", num_records_in)
        if num_records_out is not None:
            pulumi.set(__self__, "num_records_out", num_records_out)
        if num_restarts is not None:
            pulumi.set(__self__, "num_restarts", num_restarts)
        if offline_task_add_entity is not None:
            pulumi.set(__self__, "offline_task_add_entity", offline_task_add_entity)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if output_datasource_type is not None:
            pulumi.set(__self__, "output_datasource_type", output_datasource_type)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if read_phase is not None:
            pulumi.set(__self__, "read_phase", read_phase)
        if reader_delay is not None:
            pulumi.set(__self__, "reader_delay", reader_delay)
        if running_cu is not None:
            pulumi.set(__self__, "running_cu", running_cu)
        if schedule_task_id is not None:
            pulumi.set(__self__, "schedule_task_id", schedule_task_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stop_time is not None:
            pulumi.set(__self__, "stop_time", stop_time)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)
        if switch_resource is not None:
            pulumi.set(__self__, "switch_resource", switch_resource)
        if sync_type is not None:
            pulumi.set(__self__, "sync_type", sync_type)
        if task_alarm_regular_lists is not None:
            pulumi.set(__self__, "task_alarm_regular_lists", task_alarm_regular_lists)
        if task_group_id is not None:
            pulumi.set(__self__, "task_group_id", task_group_id)
        if task_mode is not None:
            pulumi.set(__self__, "task_mode", task_mode)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoConfig']]:
        """
        Task configuration.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[str]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter(name="dataProxyUrls")
    def data_proxy_urls(self) -> Optional[Sequence[str]]:
        """
        Data proxy url.
        """
        return pulumi.get(self, "data_proxy_urls")

    @property
    @pulumi.getter(name="executeContexts")
    def execute_contexts(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoExecuteContext']]:
        """
        Execute context.
        """
        return pulumi.get(self, "execute_contexts")

    @property
    @pulumi.getter(name="executorGroupName")
    def executor_group_name(self) -> Optional[str]:
        """
        Executor group name.
        """
        return pulumi.get(self, "executor_group_name")

    @property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> Optional[str]:
        """
        Executor resource ID.
        """
        return pulumi.get(self, "executor_id")

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter(name="hasVersion")
    def has_version(self) -> Optional[bool]:
        """
        Whether the task been submitted.
        """
        return pulumi.get(self, "has_version")

    @property
    @pulumi.getter(name="inLongManagerUrl")
    def in_long_manager_url(self) -> Optional[str]:
        """
        InLong manager url.
        """
        return pulumi.get(self, "in_long_manager_url")

    @property
    @pulumi.getter(name="inLongManagerVersion")
    def in_long_manager_version(self) -> Optional[str]:
        """
        InLong manager version.
        """
        return pulumi.get(self, "in_long_manager_version")

    @property
    @pulumi.getter(name="inLongStreamId")
    def in_long_stream_id(self) -> Optional[str]:
        """
        InLong stream id.
        """
        return pulumi.get(self, "in_long_stream_id")

    @property
    @pulumi.getter
    def incharge(self) -> Optional[str]:
        """
        Incharge user.
        """
        return pulumi.get(self, "incharge")

    @property
    @pulumi.getter(name="inputDatasourceType")
    def input_datasource_type(self) -> Optional[str]:
        """
        Input datasource type.
        """
        return pulumi.get(self, "input_datasource_type")

    @property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> Optional[int]:
        """
        Instance version.
        """
        return pulumi.get(self, "instance_version")

    @property
    @pulumi.getter(name="lastRunTime")
    def last_run_time(self) -> Optional[str]:
        """
        The last time the task was run.
        """
        return pulumi.get(self, "last_run_time")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        """
        Whether the task been locked.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def locker(self) -> Optional[str]:
        """
        User locked task.
        """
        return pulumi.get(self, "locker")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMapping']]:
        """
        Node mapping.
        """
        return pulumi.get(self, "mappings")

    @property
    @pulumi.getter(name="numRecordsIn")
    def num_records_in(self) -> Optional[int]:
        """
        Number of reads.
        """
        return pulumi.get(self, "num_records_in")

    @property
    @pulumi.getter(name="numRecordsOut")
    def num_records_out(self) -> Optional[int]:
        """
        Number of writes.
        """
        return pulumi.get(self, "num_records_out")

    @property
    @pulumi.getter(name="numRestarts")
    def num_restarts(self) -> Optional[int]:
        """
        Times of restarts.
        """
        return pulumi.get(self, "num_restarts")

    @property
    @pulumi.getter(name="offlineTaskAddEntity")
    def offline_task_add_entity(self) -> Optional['outputs.IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity']:
        """
        Offline task scheduling configuration.
        """
        return pulumi.get(self, "offline_task_add_entity")

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[str]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @property
    @pulumi.getter(name="outputDatasourceType")
    def output_datasource_type(self) -> Optional[str]:
        """
        Output datasource type.
        """
        return pulumi.get(self, "output_datasource_type")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[str]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="readPhase")
    def read_phase(self) -> Optional[int]:
        """
        Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        """
        return pulumi.get(self, "read_phase")

    @property
    @pulumi.getter(name="readerDelay")
    def reader_delay(self) -> Optional[float]:
        """
        Read latency.
        """
        return pulumi.get(self, "reader_delay")

    @property
    @pulumi.getter(name="runningCu")
    def running_cu(self) -> Optional[float]:
        """
        The amount of resources consumed by real-time task.
        """
        return pulumi.get(self, "running_cu")

    @property
    @pulumi.getter(name="scheduleTaskId")
    def schedule_task_id(self) -> Optional[str]:
        """
        Task scheduling id (job id such as oceanus or us).
        """
        return pulumi.get(self, "schedule_task_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        """
        Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stopTime")
    def stop_time(self) -> Optional[str]:
        """
        The time the task was stopped.
        """
        return pulumi.get(self, "stop_time")

    @property
    @pulumi.getter
    def submit(self) -> Optional[bool]:
        """
        Whether the task version has been submitted for operation and maintenance.
        """
        return pulumi.get(self, "submit")

    @property
    @pulumi.getter(name="switchResource")
    def switch_resource(self) -> Optional[int]:
        """
        Resource tiering status, 0: in progress, 1: successful, 2: failed.
        """
        return pulumi.get(self, "switch_resource")

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> Optional[int]:
        """
        Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        """
        return pulumi.get(self, "sync_type")

    @property
    @pulumi.getter(name="taskAlarmRegularLists")
    def task_alarm_regular_lists(self) -> Optional[Sequence[str]]:
        """
        Task alarm regular.
        """
        return pulumi.get(self, "task_alarm_regular_lists")

    @property
    @pulumi.getter(name="taskGroupId")
    def task_group_id(self) -> Optional[str]:
        """
        Inlong Task Group ID.
        """
        return pulumi.get(self, "task_group_id")

    @property
    @pulumi.getter(name="taskMode")
    def task_mode(self) -> Optional[str]:
        """
        Task display mode, 0: canvas mode, 1: form mode.
        """
        return pulumi.get(self, "task_mode")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[str]:
        """
        The workflow id to which the task belongs.
        """
        return pulumi.get(self, "workflow_id")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoExecuteContext(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extConfigs":
            suggest = "ext_configs"
        elif key == "schemaMappings":
            suggest = "schema_mappings"
        elif key == "sinkId":
            suggest = "sink_id"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceSchemas":
            suggest = "source_schemas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationOfflineTaskTaskInfoMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationOfflineTaskTaskInfoMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationOfflineTaskTaskInfoMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_configs: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingExtConfig']] = None,
                 schema_mappings: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingSchemaMapping']] = None,
                 sink_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 source_schemas: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingSourceSchema']] = None):
        """
        :param Sequence['IntegrationOfflineTaskTaskInfoMappingExtConfigArgs'] ext_configs: Node extension configuration information.
        :param Sequence['IntegrationOfflineTaskTaskInfoMappingSchemaMappingArgs'] schema_mappings: Schema mapping information.
        :param str sink_id: Sink node ID.
        :param str source_id: Source node ID.
        :param Sequence['IntegrationOfflineTaskTaskInfoMappingSourceSchemaArgs'] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingSchemaMapping']]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[str]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingSourceSchema']]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoMappingExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoMappingSchemaMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sinkSchemaId":
            suggest = "sink_schema_id"
        elif key == "sourceSchemaId":
            suggest = "source_schema_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationOfflineTaskTaskInfoMappingSchemaMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationOfflineTaskTaskInfoMappingSchemaMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationOfflineTaskTaskInfoMappingSchemaMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sink_schema_id: str,
                 source_schema_id: str):
        """
        :param str sink_schema_id: Schema ID from sink node.
        :param str source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> str:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> str:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoMappingSourceSchema(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str,
                 alias: Optional[str] = None,
                 comment: Optional[str] = None,
                 properties: Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty']] = None,
                 value: Optional[str] = None):
        """
        :param str id: Schema ID.
        :param str name: Schema name.
        :param str type: Schema type.
        :param str alias: Schema alias.
        :param str comment: Schema comment.
        :param Sequence['IntegrationOfflineTaskTaskInfoMappingSourceSchemaPropertyArgs'] properties: Schema extended attributes.
        :param str value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.IntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty']]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoMappingSourceSchemaProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Attributes name.
        :param str value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crontabExpression":
            suggest = "crontab_expression"
        elif key == "cycleType":
            suggest = "cycle_type"
        elif key == "executionEndTime":
            suggest = "execution_end_time"
        elif key == "executionStartTime":
            suggest = "execution_start_time"
        elif key == "retryWait":
            suggest = "retry_wait"
        elif key == "selfDepend":
            suggest = "self_depend"
        elif key == "tryLimit":
            suggest = "try_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationOfflineTaskTaskInfoOfflineTaskAddEntity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 crontab_expression: Optional[str] = None,
                 cycle_type: Optional[int] = None,
                 execution_end_time: Optional[str] = None,
                 execution_start_time: Optional[str] = None,
                 retriable: Optional[int] = None,
                 retry_wait: Optional[int] = None,
                 self_depend: Optional[int] = None,
                 try_limit: Optional[int] = None):
        """
        :param str crontab_expression: Crontab expression.
        :param int cycle_type: Scheduling type, 0: crontab type, 1: minutes, 2: hours, 3: days, 4: weeks, 5: months, 6: one-time, 7: user-driven, 10: elastic period (week), 11: elastic period (month), 12: year, 13: instant trigger.
        :param str execution_end_time: Scheduling execution end time.
        :param str execution_start_time: Scheduling execution start time.
        :param int retriable: Whether to retry.
        :param int retry_wait: Retry waiting time, unit is minutes.
        :param int self_depend: Self-dependent rules, 1: Ordered serial one at a time, queued execution, 2: Unordered serial one at a time, not queued execution, 3: Parallel, multiple at once.
        :param int try_limit: Number of retries.
        """
        if crontab_expression is not None:
            pulumi.set(__self__, "crontab_expression", crontab_expression)
        if cycle_type is not None:
            pulumi.set(__self__, "cycle_type", cycle_type)
        if execution_end_time is not None:
            pulumi.set(__self__, "execution_end_time", execution_end_time)
        if execution_start_time is not None:
            pulumi.set(__self__, "execution_start_time", execution_start_time)
        if retriable is not None:
            pulumi.set(__self__, "retriable", retriable)
        if retry_wait is not None:
            pulumi.set(__self__, "retry_wait", retry_wait)
        if self_depend is not None:
            pulumi.set(__self__, "self_depend", self_depend)
        if try_limit is not None:
            pulumi.set(__self__, "try_limit", try_limit)

    @property
    @pulumi.getter(name="crontabExpression")
    def crontab_expression(self) -> Optional[str]:
        """
        Crontab expression.
        """
        return pulumi.get(self, "crontab_expression")

    @property
    @pulumi.getter(name="cycleType")
    def cycle_type(self) -> Optional[int]:
        """
        Scheduling type, 0: crontab type, 1: minutes, 2: hours, 3: days, 4: weeks, 5: months, 6: one-time, 7: user-driven, 10: elastic period (week), 11: elastic period (month), 12: year, 13: instant trigger.
        """
        return pulumi.get(self, "cycle_type")

    @property
    @pulumi.getter(name="executionEndTime")
    def execution_end_time(self) -> Optional[str]:
        """
        Scheduling execution end time.
        """
        return pulumi.get(self, "execution_end_time")

    @property
    @pulumi.getter(name="executionStartTime")
    def execution_start_time(self) -> Optional[str]:
        """
        Scheduling execution start time.
        """
        return pulumi.get(self, "execution_start_time")

    @property
    @pulumi.getter
    def retriable(self) -> Optional[int]:
        """
        Whether to retry.
        """
        return pulumi.get(self, "retriable")

    @property
    @pulumi.getter(name="retryWait")
    def retry_wait(self) -> Optional[int]:
        """
        Retry waiting time, unit is minutes.
        """
        return pulumi.get(self, "retry_wait")

    @property
    @pulumi.getter(name="selfDepend")
    def self_depend(self) -> Optional[int]:
        """
        Self-dependent rules, 1: Ordered serial one at a time, queued execution, 2: Unordered serial one at a time, not queued execution, 3: Parallel, multiple at once.
        """
        return pulumi.get(self, "self_depend")

    @property
    @pulumi.getter(name="tryLimit")
    def try_limit(self) -> Optional[int]:
        """
        Number of retries.
        """
        return pulumi.get(self, "try_limit")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "creatorUin":
            suggest = "creator_uin"
        elif key == "dataProxyUrls":
            suggest = "data_proxy_urls"
        elif key == "executeContexts":
            suggest = "execute_contexts"
        elif key == "executorGroupName":
            suggest = "executor_group_name"
        elif key == "executorId":
            suggest = "executor_id"
        elif key == "extConfigs":
            suggest = "ext_configs"
        elif key == "hasVersion":
            suggest = "has_version"
        elif key == "inLongManagerUrl":
            suggest = "in_long_manager_url"
        elif key == "inLongManagerVersion":
            suggest = "in_long_manager_version"
        elif key == "inLongStreamId":
            suggest = "in_long_stream_id"
        elif key == "inputDatasourceType":
            suggest = "input_datasource_type"
        elif key == "instanceVersion":
            suggest = "instance_version"
        elif key == "lastRunTime":
            suggest = "last_run_time"
        elif key == "numRecordsIn":
            suggest = "num_records_in"
        elif key == "numRecordsOut":
            suggest = "num_records_out"
        elif key == "numRestarts":
            suggest = "num_restarts"
        elif key == "operatorUin":
            suggest = "operator_uin"
        elif key == "outputDatasourceType":
            suggest = "output_datasource_type"
        elif key == "ownerUin":
            suggest = "owner_uin"
        elif key == "readPhase":
            suggest = "read_phase"
        elif key == "readerDelay":
            suggest = "reader_delay"
        elif key == "runningCu":
            suggest = "running_cu"
        elif key == "scheduleTaskId":
            suggest = "schedule_task_id"
        elif key == "stopTime":
            suggest = "stop_time"
        elif key == "switchResource":
            suggest = "switch_resource"
        elif key == "taskAlarmRegularLists":
            suggest = "task_alarm_regular_lists"
        elif key == "taskGroupId":
            suggest = "task_group_id"
        elif key == "updateTime":
            suggest = "update_time"
        elif key == "workflowId":
            suggest = "workflow_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationRealtimeTaskTaskInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationRealtimeTaskTaskInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationRealtimeTaskTaskInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 configs: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoConfig']] = None,
                 create_time: Optional[str] = None,
                 creator_uin: Optional[str] = None,
                 data_proxy_urls: Optional[Sequence[str]] = None,
                 execute_contexts: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoExecuteContext']] = None,
                 executor_group_name: Optional[str] = None,
                 executor_id: Optional[str] = None,
                 ext_configs: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoExtConfig']] = None,
                 has_version: Optional[bool] = None,
                 in_long_manager_url: Optional[str] = None,
                 in_long_manager_version: Optional[str] = None,
                 in_long_stream_id: Optional[str] = None,
                 incharge: Optional[str] = None,
                 input_datasource_type: Optional[str] = None,
                 instance_version: Optional[int] = None,
                 last_run_time: Optional[str] = None,
                 locked: Optional[bool] = None,
                 locker: Optional[str] = None,
                 mappings: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMapping']] = None,
                 nodes: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNode']] = None,
                 num_records_in: Optional[int] = None,
                 num_records_out: Optional[int] = None,
                 num_restarts: Optional[int] = None,
                 operator_uin: Optional[str] = None,
                 output_datasource_type: Optional[str] = None,
                 owner_uin: Optional[str] = None,
                 read_phase: Optional[int] = None,
                 reader_delay: Optional[float] = None,
                 running_cu: Optional[float] = None,
                 schedule_task_id: Optional[str] = None,
                 status: Optional[int] = None,
                 stop_time: Optional[str] = None,
                 submit: Optional[bool] = None,
                 switch_resource: Optional[int] = None,
                 task_alarm_regular_lists: Optional[Sequence[str]] = None,
                 task_group_id: Optional[str] = None,
                 update_time: Optional[str] = None,
                 workflow_id: Optional[str] = None):
        """
        :param str app_id: User App Id.
        :param Sequence['IntegrationRealtimeTaskTaskInfoConfigArgs'] configs: Task configuration.
        :param str create_time: Create time.
        :param str creator_uin: Creator User ID.
        :param Sequence[str] data_proxy_urls: Data proxy url.
        :param Sequence['IntegrationRealtimeTaskTaskInfoExecuteContextArgs'] execute_contexts: Execute context.
        :param str executor_group_name: Executor group name.
        :param str executor_id: Executor resource ID.
        :param Sequence['IntegrationRealtimeTaskTaskInfoExtConfigArgs'] ext_configs: Node extension configuration information.
        :param bool has_version: Whether the task been submitted.
        :param str in_long_manager_url: InLong manager url.
        :param str in_long_manager_version: InLong manager version.
        :param str in_long_stream_id: InLong stream id.
        :param str incharge: Incharge user.
        :param str input_datasource_type: Input datasource type.
        :param int instance_version: Instance version.
        :param str last_run_time: The last time the task was run.
        :param bool locked: Whether the task been locked.
        :param str locker: User locked task.
        :param Sequence['IntegrationRealtimeTaskTaskInfoMappingArgs'] mappings: Node mapping.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeArgs'] nodes: Task Node Information.
        :param int num_records_in: Number of reads.
        :param int num_records_out: Number of writes.
        :param int num_restarts: Times of restarts.
        :param str operator_uin: Operator User ID.
        :param str output_datasource_type: Output datasource type.
        :param str owner_uin: Owner User ID.
        :param int read_phase: Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        :param float reader_delay: Read latency.
        :param float running_cu: The amount of resources consumed by real-time task.
        :param str schedule_task_id: Task scheduling id (job id such as oceanus or us).
        :param int status: Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        :param str stop_time: The time the task was stopped.
        :param bool submit: Whether the task version has been submitted for operation and maintenance.
        :param int switch_resource: Resource tiering status, 0: in progress, 1: successful, 2: failed.
        :param Sequence[str] task_alarm_regular_lists: Task alarm regular.
        :param str task_group_id: Inlong Task Group ID.
        :param str update_time: Update time.
        :param str workflow_id: The workflow id to which the task belongs.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if data_proxy_urls is not None:
            pulumi.set(__self__, "data_proxy_urls", data_proxy_urls)
        if execute_contexts is not None:
            pulumi.set(__self__, "execute_contexts", execute_contexts)
        if executor_group_name is not None:
            pulumi.set(__self__, "executor_group_name", executor_group_name)
        if executor_id is not None:
            pulumi.set(__self__, "executor_id", executor_id)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if has_version is not None:
            pulumi.set(__self__, "has_version", has_version)
        if in_long_manager_url is not None:
            pulumi.set(__self__, "in_long_manager_url", in_long_manager_url)
        if in_long_manager_version is not None:
            pulumi.set(__self__, "in_long_manager_version", in_long_manager_version)
        if in_long_stream_id is not None:
            pulumi.set(__self__, "in_long_stream_id", in_long_stream_id)
        if incharge is not None:
            pulumi.set(__self__, "incharge", incharge)
        if input_datasource_type is not None:
            pulumi.set(__self__, "input_datasource_type", input_datasource_type)
        if instance_version is not None:
            pulumi.set(__self__, "instance_version", instance_version)
        if last_run_time is not None:
            pulumi.set(__self__, "last_run_time", last_run_time)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if locker is not None:
            pulumi.set(__self__, "locker", locker)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if num_records_in is not None:
            pulumi.set(__self__, "num_records_in", num_records_in)
        if num_records_out is not None:
            pulumi.set(__self__, "num_records_out", num_records_out)
        if num_restarts is not None:
            pulumi.set(__self__, "num_restarts", num_restarts)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if output_datasource_type is not None:
            pulumi.set(__self__, "output_datasource_type", output_datasource_type)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if read_phase is not None:
            pulumi.set(__self__, "read_phase", read_phase)
        if reader_delay is not None:
            pulumi.set(__self__, "reader_delay", reader_delay)
        if running_cu is not None:
            pulumi.set(__self__, "running_cu", running_cu)
        if schedule_task_id is not None:
            pulumi.set(__self__, "schedule_task_id", schedule_task_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stop_time is not None:
            pulumi.set(__self__, "stop_time", stop_time)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)
        if switch_resource is not None:
            pulumi.set(__self__, "switch_resource", switch_resource)
        if task_alarm_regular_lists is not None:
            pulumi.set(__self__, "task_alarm_regular_lists", task_alarm_regular_lists)
        if task_group_id is not None:
            pulumi.set(__self__, "task_group_id", task_group_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoConfig']]:
        """
        Task configuration.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[str]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter(name="dataProxyUrls")
    def data_proxy_urls(self) -> Optional[Sequence[str]]:
        """
        Data proxy url.
        """
        return pulumi.get(self, "data_proxy_urls")

    @property
    @pulumi.getter(name="executeContexts")
    def execute_contexts(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoExecuteContext']]:
        """
        Execute context.
        """
        return pulumi.get(self, "execute_contexts")

    @property
    @pulumi.getter(name="executorGroupName")
    def executor_group_name(self) -> Optional[str]:
        """
        Executor group name.
        """
        return pulumi.get(self, "executor_group_name")

    @property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> Optional[str]:
        """
        Executor resource ID.
        """
        return pulumi.get(self, "executor_id")

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter(name="hasVersion")
    def has_version(self) -> Optional[bool]:
        """
        Whether the task been submitted.
        """
        return pulumi.get(self, "has_version")

    @property
    @pulumi.getter(name="inLongManagerUrl")
    def in_long_manager_url(self) -> Optional[str]:
        """
        InLong manager url.
        """
        return pulumi.get(self, "in_long_manager_url")

    @property
    @pulumi.getter(name="inLongManagerVersion")
    def in_long_manager_version(self) -> Optional[str]:
        """
        InLong manager version.
        """
        return pulumi.get(self, "in_long_manager_version")

    @property
    @pulumi.getter(name="inLongStreamId")
    def in_long_stream_id(self) -> Optional[str]:
        """
        InLong stream id.
        """
        return pulumi.get(self, "in_long_stream_id")

    @property
    @pulumi.getter
    def incharge(self) -> Optional[str]:
        """
        Incharge user.
        """
        return pulumi.get(self, "incharge")

    @property
    @pulumi.getter(name="inputDatasourceType")
    def input_datasource_type(self) -> Optional[str]:
        """
        Input datasource type.
        """
        return pulumi.get(self, "input_datasource_type")

    @property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> Optional[int]:
        """
        Instance version.
        """
        return pulumi.get(self, "instance_version")

    @property
    @pulumi.getter(name="lastRunTime")
    def last_run_time(self) -> Optional[str]:
        """
        The last time the task was run.
        """
        return pulumi.get(self, "last_run_time")

    @property
    @pulumi.getter
    def locked(self) -> Optional[bool]:
        """
        Whether the task been locked.
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def locker(self) -> Optional[str]:
        """
        User locked task.
        """
        return pulumi.get(self, "locker")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMapping']]:
        """
        Node mapping.
        """
        return pulumi.get(self, "mappings")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNode']]:
        """
        Task Node Information.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="numRecordsIn")
    def num_records_in(self) -> Optional[int]:
        """
        Number of reads.
        """
        return pulumi.get(self, "num_records_in")

    @property
    @pulumi.getter(name="numRecordsOut")
    def num_records_out(self) -> Optional[int]:
        """
        Number of writes.
        """
        return pulumi.get(self, "num_records_out")

    @property
    @pulumi.getter(name="numRestarts")
    def num_restarts(self) -> Optional[int]:
        """
        Times of restarts.
        """
        return pulumi.get(self, "num_restarts")

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[str]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @property
    @pulumi.getter(name="outputDatasourceType")
    def output_datasource_type(self) -> Optional[str]:
        """
        Output datasource type.
        """
        return pulumi.get(self, "output_datasource_type")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[str]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="readPhase")
    def read_phase(self) -> Optional[int]:
        """
        Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        """
        return pulumi.get(self, "read_phase")

    @property
    @pulumi.getter(name="readerDelay")
    def reader_delay(self) -> Optional[float]:
        """
        Read latency.
        """
        return pulumi.get(self, "reader_delay")

    @property
    @pulumi.getter(name="runningCu")
    def running_cu(self) -> Optional[float]:
        """
        The amount of resources consumed by real-time task.
        """
        return pulumi.get(self, "running_cu")

    @property
    @pulumi.getter(name="scheduleTaskId")
    def schedule_task_id(self) -> Optional[str]:
        """
        Task scheduling id (job id such as oceanus or us).
        """
        return pulumi.get(self, "schedule_task_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        """
        Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stopTime")
    def stop_time(self) -> Optional[str]:
        """
        The time the task was stopped.
        """
        return pulumi.get(self, "stop_time")

    @property
    @pulumi.getter
    def submit(self) -> Optional[bool]:
        """
        Whether the task version has been submitted for operation and maintenance.
        """
        return pulumi.get(self, "submit")

    @property
    @pulumi.getter(name="switchResource")
    def switch_resource(self) -> Optional[int]:
        """
        Resource tiering status, 0: in progress, 1: successful, 2: failed.
        """
        return pulumi.get(self, "switch_resource")

    @property
    @pulumi.getter(name="taskAlarmRegularLists")
    def task_alarm_regular_lists(self) -> Optional[Sequence[str]]:
        """
        Task alarm regular.
        """
        return pulumi.get(self, "task_alarm_regular_lists")

    @property
    @pulumi.getter(name="taskGroupId")
    def task_group_id(self) -> Optional[str]:
        """
        Inlong Task Group ID.
        """
        return pulumi.get(self, "task_group_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[str]:
        """
        The workflow id to which the task belongs.
        """
        return pulumi.get(self, "workflow_id")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoExecuteContext(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extConfigs":
            suggest = "ext_configs"
        elif key == "schemaMappings":
            suggest = "schema_mappings"
        elif key == "sinkId":
            suggest = "sink_id"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceSchemas":
            suggest = "source_schemas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationRealtimeTaskTaskInfoMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationRealtimeTaskTaskInfoMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationRealtimeTaskTaskInfoMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_configs: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingExtConfig']] = None,
                 schema_mappings: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingSchemaMapping']] = None,
                 sink_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 source_schemas: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingSourceSchema']] = None):
        """
        :param Sequence['IntegrationRealtimeTaskTaskInfoMappingExtConfigArgs'] ext_configs: Node extension configuration information.
        :param Sequence['IntegrationRealtimeTaskTaskInfoMappingSchemaMappingArgs'] schema_mappings: Schema mapping information.
        :param str sink_id: Sink node ID.
        :param str source_id: Source node ID.
        :param Sequence['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaArgs'] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingSchemaMapping']]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[str]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingSourceSchema']]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoMappingExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoMappingSchemaMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sinkSchemaId":
            suggest = "sink_schema_id"
        elif key == "sourceSchemaId":
            suggest = "source_schema_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationRealtimeTaskTaskInfoMappingSchemaMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationRealtimeTaskTaskInfoMappingSchemaMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationRealtimeTaskTaskInfoMappingSchemaMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sink_schema_id: str,
                 source_schema_id: str):
        """
        :param str sink_schema_id: Schema ID from sink node.
        :param str source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> str:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> str:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoMappingSourceSchema(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str,
                 alias: Optional[str] = None,
                 comment: Optional[str] = None,
                 properties: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty']] = None,
                 value: Optional[str] = None):
        """
        :param str id: Schema ID.
        :param str name: Schema name.
        :param str type: Schema type.
        :param str alias: Schema alias.
        :param str comment: Schema comment.
        :param Sequence['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaPropertyArgs'] properties: Schema extended attributes.
        :param str value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty']]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoMappingSourceSchemaProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Attributes name.
        :param str value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "creatorUin":
            suggest = "creator_uin"
        elif key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "datasourceId":
            suggest = "datasource_id"
        elif key == "extConfigs":
            suggest = "ext_configs"
        elif key == "nodeMapping":
            suggest = "node_mapping"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "operatorUin":
            suggest = "operator_uin"
        elif key == "ownerUin":
            suggest = "owner_uin"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "taskId":
            suggest = "task_id"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationRealtimeTaskTaskInfoNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationRealtimeTaskTaskInfoNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationRealtimeTaskTaskInfoNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 configs: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeConfig']] = None,
                 create_time: Optional[str] = None,
                 creator_uin: Optional[str] = None,
                 data_source_type: Optional[str] = None,
                 datasource_id: Optional[str] = None,
                 description: Optional[str] = None,
                 ext_configs: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeExtConfig']] = None,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 node_mapping: Optional['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMapping'] = None,
                 node_type: Optional[str] = None,
                 operator_uin: Optional[str] = None,
                 owner_uin: Optional[str] = None,
                 project_id: Optional[str] = None,
                 schemas: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeSchema']] = None,
                 task_id: Optional[str] = None,
                 update_time: Optional[str] = None):
        """
        :param str app_id: User App Id.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeConfigArgs'] configs: Node configuration information.
        :param str create_time: Create time.
        :param str creator_uin: Creator User ID.
        :param str data_source_type: Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
        :param str datasource_id: Datasource ID.
        :param str description: Node Description.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeExtConfigArgs'] ext_configs: Node extension configuration information.
        :param str id: Node ID.
        :param str name: Node Name.
        :param 'IntegrationRealtimeTaskTaskInfoNodeNodeMappingArgs' node_mapping: Node mapping.
        :param str node_type: Node type: INPUT,OUTPUT,JOIN,FILTER,TRANSFORM.
        :param str operator_uin: Operator User ID.
        :param str owner_uin: Owner User ID.
        :param str project_id: Project ID.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeSchemaArgs'] schemas: Schema information.
        :param str task_id: The task id to which the node belongs.
        :param str update_time: Update time.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if data_source_type is not None:
            pulumi.set(__self__, "data_source_type", data_source_type)
        if datasource_id is not None:
            pulumi.set(__self__, "datasource_id", datasource_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_mapping is not None:
            pulumi.set(__self__, "node_mapping", node_mapping)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeConfig']]:
        """
        Node configuration information.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[str]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> Optional[str]:
        """
        Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
        """
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="datasourceId")
    def datasource_id(self) -> Optional[str]:
        """
        Datasource ID.
        """
        return pulumi.get(self, "datasource_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Node Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Node ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Node Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeMapping")
    def node_mapping(self) -> Optional['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMapping']:
        """
        Node mapping.
        """
        return pulumi.get(self, "node_mapping")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[str]:
        """
        Node type: INPUT,OUTPUT,JOIN,FILTER,TRANSFORM.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[str]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[str]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeSchema']]:
        """
        Schema information.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[str]:
        """
        The task id to which the node belongs.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extConfigs":
            suggest = "ext_configs"
        elif key == "schemaMappings":
            suggest = "schema_mappings"
        elif key == "sinkId":
            suggest = "sink_id"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceSchemas":
            suggest = "source_schemas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationRealtimeTaskTaskInfoNodeNodeMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationRealtimeTaskTaskInfoNodeNodeMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationRealtimeTaskTaskInfoNodeNodeMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_configs: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig']] = None,
                 schema_mappings: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping']] = None,
                 sink_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 source_schemas: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema']] = None):
        """
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfigArgs'] ext_configs: Node extension configuration information.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMappingArgs'] schema_mappings: Schema mapping information.
        :param str sink_id: Sink node ID.
        :param str source_id: Source node ID.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaArgs'] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping']]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[str]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema']]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sinkSchemaId":
            suggest = "sink_schema_id"
        elif key == "sourceSchemaId":
            suggest = "source_schema_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sink_schema_id: str,
                 source_schema_id: str):
        """
        :param str sink_schema_id: Schema ID from sink node.
        :param str source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> str:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> str:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchema(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str,
                 alias: Optional[str] = None,
                 comment: Optional[str] = None,
                 properties: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty']] = None,
                 value: Optional[str] = None):
        """
        :param str id: Schema ID.
        :param str name: Schema name.
        :param str type: Schema type.
        :param str alias: Schema alias.
        :param str comment: Schema comment.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaPropertyArgs'] properties: Schema extended attributes.
        :param str value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty']]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Attributes name.
        :param str value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeSchema(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str,
                 alias: Optional[str] = None,
                 comment: Optional[str] = None,
                 properties: Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeSchemaProperty']] = None,
                 value: Optional[str] = None):
        """
        :param str id: Schema ID.
        :param str name: Schema name.
        :param str type: Schema type.
        :param str alias: Schema alias.
        :param str comment: Schema comment.
        :param Sequence['IntegrationRealtimeTaskTaskInfoNodeSchemaPropertyArgs'] properties: Schema extended attributes.
        :param str value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.IntegrationRealtimeTaskTaskInfoNodeSchemaProperty']]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationRealtimeTaskTaskInfoNodeSchemaProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Attributes name.
        :param str value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationTaskNodeNodeInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appId":
            suggest = "app_id"
        elif key == "createTime":
            suggest = "create_time"
        elif key == "creatorUin":
            suggest = "creator_uin"
        elif key == "datasourceId":
            suggest = "datasource_id"
        elif key == "extConfigs":
            suggest = "ext_configs"
        elif key == "nodeMapping":
            suggest = "node_mapping"
        elif key == "operatorUin":
            suggest = "operator_uin"
        elif key == "ownerUin":
            suggest = "owner_uin"
        elif key == "updateTime":
            suggest = "update_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationTaskNodeNodeInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationTaskNodeNodeInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationTaskNodeNodeInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_id: Optional[str] = None,
                 configs: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoConfig']] = None,
                 create_time: Optional[str] = None,
                 creator_uin: Optional[str] = None,
                 datasource_id: Optional[str] = None,
                 ext_configs: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoExtConfig']] = None,
                 node_mapping: Optional['outputs.IntegrationTaskNodeNodeInfoNodeMapping'] = None,
                 operator_uin: Optional[str] = None,
                 owner_uin: Optional[str] = None,
                 schemas: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoSchema']] = None,
                 update_time: Optional[str] = None):
        """
        :param str app_id: User App Id.
        :param Sequence['IntegrationTaskNodeNodeInfoConfigArgs'] configs: Node configuration information.
        :param str create_time: Create time.
        :param str creator_uin: Creator User ID.
        :param str datasource_id: Datasource ID.
        :param Sequence['IntegrationTaskNodeNodeInfoExtConfigArgs'] ext_configs: Node extension configuration information.
        :param 'IntegrationTaskNodeNodeInfoNodeMappingArgs' node_mapping: Node mapping.
        :param str operator_uin: Operator User ID.
        :param str owner_uin: Owner User ID.
        :param Sequence['IntegrationTaskNodeNodeInfoSchemaArgs'] schemas: Schema information.
        :param str update_time: Update time.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if datasource_id is not None:
            pulumi.set(__self__, "datasource_id", datasource_id)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if node_mapping is not None:
            pulumi.set(__self__, "node_mapping", node_mapping)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[str]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoConfig']]:
        """
        Node configuration information.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[str]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter(name="datasourceId")
    def datasource_id(self) -> Optional[str]:
        """
        Datasource ID.
        """
        return pulumi.get(self, "datasource_id")

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter(name="nodeMapping")
    def node_mapping(self) -> Optional['outputs.IntegrationTaskNodeNodeInfoNodeMapping']:
        """
        Node mapping.
        """
        return pulumi.get(self, "node_mapping")

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[str]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[str]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter
    def schemas(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoSchema']]:
        """
        Schema information.
        """
        return pulumi.get(self, "schemas")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoNodeMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "extConfigs":
            suggest = "ext_configs"
        elif key == "schemaMappings":
            suggest = "schema_mappings"
        elif key == "sinkId":
            suggest = "sink_id"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceSchemas":
            suggest = "source_schemas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationTaskNodeNodeInfoNodeMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationTaskNodeNodeInfoNodeMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationTaskNodeNodeInfoNodeMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ext_configs: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingExtConfig']] = None,
                 schema_mappings: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping']] = None,
                 sink_id: Optional[str] = None,
                 source_id: Optional[str] = None,
                 source_schemas: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingSourceSchema']] = None):
        """
        :param Sequence['IntegrationTaskNodeNodeInfoNodeMappingExtConfigArgs'] ext_configs: Node extension configuration information.
        :param Sequence['IntegrationTaskNodeNodeInfoNodeMappingSchemaMappingArgs'] schema_mappings: Schema mapping information.
        :param str sink_id: Sink node ID.
        :param str source_id: Source node ID.
        :param Sequence['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaArgs'] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingExtConfig']]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping']]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[str]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingSourceSchema']]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoNodeMappingExtConfig(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Configuration name.
        :param str value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sinkSchemaId":
            suggest = "sink_schema_id"
        elif key == "sourceSchemaId":
            suggest = "source_schema_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IntegrationTaskNodeNodeInfoNodeMappingSchemaMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sink_schema_id: str,
                 source_schema_id: str):
        """
        :param str sink_schema_id: Schema ID from sink node.
        :param str source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> str:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> str:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoNodeMappingSourceSchema(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str,
                 alias: Optional[str] = None,
                 comment: Optional[str] = None,
                 properties: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty']] = None,
                 value: Optional[str] = None):
        """
        :param str id: Schema ID.
        :param str name: Schema name.
        :param str type: Schema type.
        :param str alias: Schema alias.
        :param str comment: Schema comment.
        :param Sequence['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaPropertyArgs'] properties: Schema extended attributes.
        :param str value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty']]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Attributes name.
        :param str value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoSchema(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 type: str,
                 alias: Optional[str] = None,
                 comment: Optional[str] = None,
                 properties: Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoSchemaProperty']] = None,
                 value: Optional[str] = None):
        """
        :param str id: Schema ID.
        :param str name: Schema name.
        :param str type: Schema type.
        :param str alias: Schema alias.
        :param str comment: Schema comment.
        :param Sequence['IntegrationTaskNodeNodeInfoSchemaPropertyArgs'] properties: Schema extended attributes.
        :param str value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def comment(self) -> Optional[str]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Sequence['outputs.IntegrationTaskNodeNodeInfoSchemaProperty']]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class IntegrationTaskNodeNodeInfoSchemaProperty(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str name: Attributes name.
        :param str value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDataSourceListFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Filter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDataSourceListOrderFieldResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 name: str):
        """
        :param str direction: OrderFields rule.
        :param str name: OrderFields name.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        OrderFields rule.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        OrderFields name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDataSourceListRowResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 author: bool,
                 authority_project_name: str,
                 authority_user_name: str,
                 biz_params: str,
                 biz_params_string: str,
                 category: str,
                 cluster_id: str,
                 cluster_name: str,
                 create_time: int,
                 data_source_status: str,
                 database_name: str,
                 deliver: bool,
                 description: str,
                 display: str,
                 edit: bool,
                 id: int,
                 instance: str,
                 modified_time: int,
                 name: str,
                 owner_account: str,
                 owner_account_name: str,
                 owner_project_id: str,
                 owner_project_ident: str,
                 owner_project_name: str,
                 params: str,
                 params_string: str,
                 region: str,
                 show_type: str,
                 status: int,
                 type: str):
        """
        :param int app_id: Appid.
        :param bool author: Has Author.
        :param str authority_project_name: Datasource AuthorityProjectName.
        :param str authority_user_name: Datasource AuthorityUserName.
        :param str biz_params: Biz params.
        :param str biz_params_string: Biz params json string.
        :param str category: Datasource category.
        :param str cluster_id: Datasource cluster id.
        :param str cluster_name: Datasource cluster name.
        :param int create_time: CreateTime.
        :param str data_source_status: DatasourceDataSourceStatus.
        :param str database_name: DatabaseName.
        :param bool deliver: Can Deliver.
        :param str description: Description.
        :param str display: Datasource display name.
        :param bool edit: Datasource can Edit.
        :param int id: ID.
        :param str instance: Instance.
        :param int modified_time: Datasource ModifiedTime.
        :param str name: Filter name.
        :param str owner_account: Datasource owner account.
        :param str owner_account_name: Datasource owner account name.
        :param str owner_project_id: Datasource owner project id.
        :param str owner_project_ident: Datasource OwnerProjectIdent.
        :param str owner_project_name: Datasource OwnerProjectName.
        :param str params: Datasource params.
        :param str params_string: Params json string.
        :param str region: Datasource engin cluster region.
        :param str show_type: Datasource show type.
        :param int status: Datasource status.
        :param str type: Datasource type.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "authority_project_name", authority_project_name)
        pulumi.set(__self__, "authority_user_name", authority_user_name)
        pulumi.set(__self__, "biz_params", biz_params)
        pulumi.set(__self__, "biz_params_string", biz_params_string)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_source_status", data_source_status)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "deliver", deliver)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "edit", edit)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_account", owner_account)
        pulumi.set(__self__, "owner_account_name", owner_account_name)
        pulumi.set(__self__, "owner_project_id", owner_project_id)
        pulumi.set(__self__, "owner_project_ident", owner_project_ident)
        pulumi.set(__self__, "owner_project_name", owner_project_name)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "params_string", params_string)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "show_type", show_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        """
        Appid.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def author(self) -> bool:
        """
        Has Author.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter(name="authorityProjectName")
    def authority_project_name(self) -> str:
        """
        Datasource AuthorityProjectName.
        """
        return pulumi.get(self, "authority_project_name")

    @property
    @pulumi.getter(name="authorityUserName")
    def authority_user_name(self) -> str:
        """
        Datasource AuthorityUserName.
        """
        return pulumi.get(self, "authority_user_name")

    @property
    @pulumi.getter(name="bizParams")
    def biz_params(self) -> str:
        """
        Biz params.
        """
        return pulumi.get(self, "biz_params")

    @property
    @pulumi.getter(name="bizParamsString")
    def biz_params_string(self) -> str:
        """
        Biz params json string.
        """
        return pulumi.get(self, "biz_params_string")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Datasource category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Datasource cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Datasource cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        CreateTime.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataSourceStatus")
    def data_source_status(self) -> str:
        """
        DatasourceDataSourceStatus.
        """
        return pulumi.get(self, "data_source_status")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        DatabaseName.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def deliver(self) -> bool:
        """
        Can Deliver.
        """
        return pulumi.get(self, "deliver")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Datasource display name.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def edit(self) -> bool:
        """
        Datasource can Edit.
        """
        return pulumi.get(self, "edit")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def instance(self) -> str:
        """
        Instance.
        """
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> int:
        """
        Datasource ModifiedTime.
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerAccount")
    def owner_account(self) -> str:
        """
        Datasource owner account.
        """
        return pulumi.get(self, "owner_account")

    @property
    @pulumi.getter(name="ownerAccountName")
    def owner_account_name(self) -> str:
        """
        Datasource owner account name.
        """
        return pulumi.get(self, "owner_account_name")

    @property
    @pulumi.getter(name="ownerProjectId")
    def owner_project_id(self) -> str:
        """
        Datasource owner project id.
        """
        return pulumi.get(self, "owner_project_id")

    @property
    @pulumi.getter(name="ownerProjectIdent")
    def owner_project_ident(self) -> str:
        """
        Datasource OwnerProjectIdent.
        """
        return pulumi.get(self, "owner_project_ident")

    @property
    @pulumi.getter(name="ownerProjectName")
    def owner_project_name(self) -> str:
        """
        Datasource OwnerProjectName.
        """
        return pulumi.get(self, "owner_project_name")

    @property
    @pulumi.getter
    def params(self) -> str:
        """
        Datasource params.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter(name="paramsString")
    def params_string(self) -> str:
        """
        Params json string.
        """
        return pulumi.get(self, "params_string")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Datasource engin cluster region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="showType")
    def show_type(self) -> str:
        """
        Datasource show type.
        """
        return pulumi.get(self, "show_type")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Datasource status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Datasource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataSourceWithoutInfoDataResult(dict):
    def __init__(__self__, *,
                 app_id: int,
                 author: bool,
                 authority_project_name: str,
                 authority_user_name: str,
                 biz_params: str,
                 biz_params_string: str,
                 category: str,
                 cluster_id: str,
                 cluster_name: str,
                 create_time: int,
                 data_source_status: str,
                 database_name: str,
                 deliver: bool,
                 description: str,
                 display: str,
                 edit: bool,
                 id: int,
                 instance: str,
                 modified_time: int,
                 name: str,
                 owner_account: str,
                 owner_account_name: str,
                 owner_project_id: str,
                 owner_project_ident: str,
                 owner_project_name: str,
                 params: str,
                 params_string: str,
                 region: str,
                 show_type: str,
                 status: int,
                 type: str):
        """
        :param int app_id: Appid.
        :param bool author: Has Author.
        :param str authority_project_name: Datasource AuthorityProjectName.
        :param str authority_user_name: Datasource AuthorityUserName.
        :param str biz_params: Biz params.
        :param str biz_params_string: Biz params json string.
        :param str category: Datasource category.
        :param str cluster_id: Datasource cluster id.
        :param str cluster_name: Datasource cluster name.
        :param int create_time: CreateTime.
        :param str data_source_status: DatasourceDataSourceStatus.
        :param str database_name: DatabaseName.
        :param bool deliver: Can Deliver.
        :param str description: Description.
        :param str display: Datasource display name.
        :param bool edit: Datasource can Edit.
        :param int id: ID.
        :param str instance: Instance.
        :param int modified_time: Datasource ModifiedTime.
        :param str name: Filter name.
        :param str owner_account: Datasource owner account.
        :param str owner_account_name: Datasource owner account name.
        :param str owner_project_id: Datasource owner project id.
        :param str owner_project_ident: Datasource OwnerProjectIdent.
        :param str owner_project_name: Datasource OwnerProjectName.
        :param str params: Datasource params.
        :param str params_string: Params json string.
        :param str region: Datasource engin cluster region.
        :param str show_type: Datasource show type.
        :param int status: Datasource status.
        :param str type: Datasource type.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "author", author)
        pulumi.set(__self__, "authority_project_name", authority_project_name)
        pulumi.set(__self__, "authority_user_name", authority_user_name)
        pulumi.set(__self__, "biz_params", biz_params)
        pulumi.set(__self__, "biz_params_string", biz_params_string)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "data_source_status", data_source_status)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "deliver", deliver)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "edit", edit)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "modified_time", modified_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner_account", owner_account)
        pulumi.set(__self__, "owner_account_name", owner_account_name)
        pulumi.set(__self__, "owner_project_id", owner_project_id)
        pulumi.set(__self__, "owner_project_ident", owner_project_ident)
        pulumi.set(__self__, "owner_project_name", owner_project_name)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "params_string", params_string)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "show_type", show_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> int:
        """
        Appid.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def author(self) -> bool:
        """
        Has Author.
        """
        return pulumi.get(self, "author")

    @property
    @pulumi.getter(name="authorityProjectName")
    def authority_project_name(self) -> str:
        """
        Datasource AuthorityProjectName.
        """
        return pulumi.get(self, "authority_project_name")

    @property
    @pulumi.getter(name="authorityUserName")
    def authority_user_name(self) -> str:
        """
        Datasource AuthorityUserName.
        """
        return pulumi.get(self, "authority_user_name")

    @property
    @pulumi.getter(name="bizParams")
    def biz_params(self) -> str:
        """
        Biz params.
        """
        return pulumi.get(self, "biz_params")

    @property
    @pulumi.getter(name="bizParamsString")
    def biz_params_string(self) -> str:
        """
        Biz params json string.
        """
        return pulumi.get(self, "biz_params_string")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        Datasource category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Datasource cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Datasource cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        CreateTime.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dataSourceStatus")
    def data_source_status(self) -> str:
        """
        DatasourceDataSourceStatus.
        """
        return pulumi.get(self, "data_source_status")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        DatabaseName.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def deliver(self) -> bool:
        """
        Can Deliver.
        """
        return pulumi.get(self, "deliver")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> str:
        """
        Datasource display name.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def edit(self) -> bool:
        """
        Datasource can Edit.
        """
        return pulumi.get(self, "edit")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def instance(self) -> str:
        """
        Instance.
        """
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> int:
        """
        Datasource ModifiedTime.
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerAccount")
    def owner_account(self) -> str:
        """
        Datasource owner account.
        """
        return pulumi.get(self, "owner_account")

    @property
    @pulumi.getter(name="ownerAccountName")
    def owner_account_name(self) -> str:
        """
        Datasource owner account name.
        """
        return pulumi.get(self, "owner_account_name")

    @property
    @pulumi.getter(name="ownerProjectId")
    def owner_project_id(self) -> str:
        """
        Datasource owner project id.
        """
        return pulumi.get(self, "owner_project_id")

    @property
    @pulumi.getter(name="ownerProjectIdent")
    def owner_project_ident(self) -> str:
        """
        Datasource OwnerProjectIdent.
        """
        return pulumi.get(self, "owner_project_ident")

    @property
    @pulumi.getter(name="ownerProjectName")
    def owner_project_name(self) -> str:
        """
        Datasource OwnerProjectName.
        """
        return pulumi.get(self, "owner_project_name")

    @property
    @pulumi.getter
    def params(self) -> str:
        """
        Datasource params.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter(name="paramsString")
    def params_string(self) -> str:
        """
        Params json string.
        """
        return pulumi.get(self, "params_string")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Datasource engin cluster region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="showType")
    def show_type(self) -> str:
        """
        Datasource show type.
        """
        return pulumi.get(self, "show_type")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Datasource status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Datasource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDataSourceWithoutInfoFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Filter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDataSourceWithoutInfoOrderFieldResult(dict):
    def __init__(__self__, *,
                 direction: str,
                 name: str):
        """
        :param str direction: OrderFields rule.
        :param str name: OrderFields name.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        OrderFields rule.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        OrderFields name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRuleTemplatesDataResult(dict):
    def __init__(__self__, *,
                 citation_count: int,
                 compare_type: int,
                 description: str,
                 multi_source_flag: bool,
                 name: str,
                 quality_dim: int,
                 rule_template_id: int,
                 source_content: str,
                 source_engine_types: Sequence[int],
                 source_object_data_type: int,
                 source_object_type: int,
                 sql_expression: str,
                 sub_quality_dim: int,
                 type: int,
                 update_time: str,
                 user_id: int,
                 user_name: str,
                 where_flag: bool):
        """
        :param int citation_count: Citations.
        :param int compare_type: The type of comparison method supported by the rule (1: fixed value comparison, greater than, less than, greater than or equal to, etc. 2: fluctuating value comparison, absolute value, rise, fall).
        :param str description: Description of rule template.
        :param bool multi_source_flag: Whether to associate other library tables.
        :param str name: Name of rule template.
        :param int quality_dim: Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
        :param int rule_template_id: ID of rule template.
        :param str source_content: Content of rule template.
        :param Sequence[int] source_engine_types: Applicable type of source data.
        :param int source_object_data_type: Source data object type. `1`: value, `2`: string.
        :param int source_object_type: Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        :param str sql_expression: Sql Expression.
        :param int sub_quality_dim: Sub Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
        :param int type: Template type. `1` means System template, `2` means Custom template.
        :param str update_time: update time, like: yyyy-MM-dd HH:mm:ss.
        :param int user_id: user id.
        :param str user_name: user name.
        :param bool where_flag: If add where.
        """
        pulumi.set(__self__, "citation_count", citation_count)
        pulumi.set(__self__, "compare_type", compare_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "multi_source_flag", multi_source_flag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quality_dim", quality_dim)
        pulumi.set(__self__, "rule_template_id", rule_template_id)
        pulumi.set(__self__, "source_content", source_content)
        pulumi.set(__self__, "source_engine_types", source_engine_types)
        pulumi.set(__self__, "source_object_data_type", source_object_data_type)
        pulumi.set(__self__, "source_object_type", source_object_type)
        pulumi.set(__self__, "sql_expression", sql_expression)
        pulumi.set(__self__, "sub_quality_dim", sub_quality_dim)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "update_time", update_time)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)
        pulumi.set(__self__, "where_flag", where_flag)

    @property
    @pulumi.getter(name="citationCount")
    def citation_count(self) -> int:
        """
        Citations.
        """
        return pulumi.get(self, "citation_count")

    @property
    @pulumi.getter(name="compareType")
    def compare_type(self) -> int:
        """
        The type of comparison method supported by the rule (1: fixed value comparison, greater than, less than, greater than or equal to, etc. 2: fluctuating value comparison, absolute value, rise, fall).
        """
        return pulumi.get(self, "compare_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of rule template.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="multiSourceFlag")
    def multi_source_flag(self) -> bool:
        """
        Whether to associate other library tables.
        """
        return pulumi.get(self, "multi_source_flag")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of rule template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="qualityDim")
    def quality_dim(self) -> int:
        """
        Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
        """
        return pulumi.get(self, "quality_dim")

    @property
    @pulumi.getter(name="ruleTemplateId")
    def rule_template_id(self) -> int:
        """
        ID of rule template.
        """
        return pulumi.get(self, "rule_template_id")

    @property
    @pulumi.getter(name="sourceContent")
    def source_content(self) -> str:
        """
        Content of rule template.
        """
        return pulumi.get(self, "source_content")

    @property
    @pulumi.getter(name="sourceEngineTypes")
    def source_engine_types(self) -> Sequence[int]:
        """
        Applicable type of source data.
        """
        return pulumi.get(self, "source_engine_types")

    @property
    @pulumi.getter(name="sourceObjectDataType")
    def source_object_data_type(self) -> int:
        """
        Source data object type. `1`: value, `2`: string.
        """
        return pulumi.get(self, "source_object_data_type")

    @property
    @pulumi.getter(name="sourceObjectType")
    def source_object_type(self) -> int:
        """
        Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        """
        return pulumi.get(self, "source_object_type")

    @property
    @pulumi.getter(name="sqlExpression")
    def sql_expression(self) -> str:
        """
        Sql Expression.
        """
        return pulumi.get(self, "sql_expression")

    @property
    @pulumi.getter(name="subQualityDim")
    def sub_quality_dim(self) -> int:
        """
        Sub Quality inspection dimensions. `1`: Accuracy, `2`: Uniqueness, `3`: Completeness, `4`: Consistency, `5`: Timeliness, `6`: Effectiveness.
        """
        return pulumi.get(self, "sub_quality_dim")

    @property
    @pulumi.getter
    def type(self) -> int:
        """
        Template type. `1` means System template, `2` means Custom template.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        update time, like: yyyy-MM-dd HH:mm:ss.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> int:
        """
        user id.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        user name.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="whereFlag")
    def where_flag(self) -> bool:
        """
        If add where.
        """
        return pulumi.get(self, "where_flag")


