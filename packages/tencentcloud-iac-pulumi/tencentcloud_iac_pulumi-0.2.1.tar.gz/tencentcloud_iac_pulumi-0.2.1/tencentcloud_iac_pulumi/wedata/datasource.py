# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DatasourceArgs', 'Datasource']

@pulumi.input_type
class DatasourceArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 owner_project_id: pulumi.Input[str],
                 owner_project_ident: pulumi.Input[str],
                 owner_project_name: pulumi.Input[str],
                 params: pulumi.Input[str],
                 type: pulumi.Input[str],
                 biz_params: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 collect: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 cos_region: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Datasource resource.
        :param pulumi.Input[str] category: DataSource Category.
        :param pulumi.Input[str] owner_project_id: Owner projectId.
        :param pulumi.Input[str] owner_project_ident: Owner Project Ident.
        :param pulumi.Input[str] owner_project_name: Owner project name.
        :param pulumi.Input[str] params: Params.
        :param pulumi.Input[str] type: DataSource Type.
        :param pulumi.Input[str] biz_params: BizParams.
        :param pulumi.Input[str] cluster_id: ClusterId.
        :param pulumi.Input[str] collect: Collect.
        :param pulumi.Input[str] cos_bucket: COSBucket.
        :param pulumi.Input[str] cos_region: Cos region.
        :param pulumi.Input[str] database_name: Dbname.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] display: Display.
        :param pulumi.Input[str] instance: Instance.
        :param pulumi.Input[str] name: DataSource Name.
        :param pulumi.Input[int] status: Status.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "owner_project_id", owner_project_id)
        pulumi.set(__self__, "owner_project_ident", owner_project_ident)
        pulumi.set(__self__, "owner_project_name", owner_project_name)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)
        if biz_params is not None:
            pulumi.set(__self__, "biz_params", biz_params)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if collect is not None:
            pulumi.set(__self__, "collect", collect)
        if cos_bucket is not None:
            pulumi.set(__self__, "cos_bucket", cos_bucket)
        if cos_region is not None:
            pulumi.set(__self__, "cos_region", cos_region)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        DataSource Category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="ownerProjectId")
    def owner_project_id(self) -> pulumi.Input[str]:
        """
        Owner projectId.
        """
        return pulumi.get(self, "owner_project_id")

    @owner_project_id.setter
    def owner_project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner_project_id", value)

    @property
    @pulumi.getter(name="ownerProjectIdent")
    def owner_project_ident(self) -> pulumi.Input[str]:
        """
        Owner Project Ident.
        """
        return pulumi.get(self, "owner_project_ident")

    @owner_project_ident.setter
    def owner_project_ident(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner_project_ident", value)

    @property
    @pulumi.getter(name="ownerProjectName")
    def owner_project_name(self) -> pulumi.Input[str]:
        """
        Owner project name.
        """
        return pulumi.get(self, "owner_project_name")

    @owner_project_name.setter
    def owner_project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner_project_name", value)

    @property
    @pulumi.getter
    def params(self) -> pulumi.Input[str]:
        """
        Params.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: pulumi.Input[str]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        DataSource Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="bizParams")
    def biz_params(self) -> Optional[pulumi.Input[str]]:
        """
        BizParams.
        """
        return pulumi.get(self, "biz_params")

    @biz_params.setter
    def biz_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "biz_params", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ClusterId.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def collect(self) -> Optional[pulumi.Input[str]]:
        """
        Collect.
        """
        return pulumi.get(self, "collect")

    @collect.setter
    def collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collect", value)

    @property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        COSBucket.
        """
        return pulumi.get(self, "cos_bucket")

    @cos_bucket.setter
    def cos_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket", value)

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cos region.
        """
        return pulumi.get(self, "cos_region")

    @cos_region.setter
    def cos_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_region", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Dbname.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        """
        Display.
        """
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        Instance.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        DataSource Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _DatasourceState:
    def __init__(__self__, *,
                 biz_params: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 collect: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 cos_region: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_project_id: Optional[pulumi.Input[str]] = None,
                 owner_project_ident: Optional[pulumi.Input[str]] = None,
                 owner_project_name: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[str]] = None,
                 params_out: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Datasource resources.
        :param pulumi.Input[str] biz_params: BizParams.
        :param pulumi.Input[str] category: DataSource Category.
        :param pulumi.Input[str] cluster_id: ClusterId.
        :param pulumi.Input[str] collect: Collect.
        :param pulumi.Input[str] cos_bucket: COSBucket.
        :param pulumi.Input[str] cos_region: Cos region.
        :param pulumi.Input[str] database_name: Dbname.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] display: Display.
        :param pulumi.Input[str] instance: Instance.
        :param pulumi.Input[str] name: DataSource Name.
        :param pulumi.Input[str] owner_project_id: Owner projectId.
        :param pulumi.Input[str] owner_project_ident: Owner Project Ident.
        :param pulumi.Input[str] owner_project_name: Owner project name.
        :param pulumi.Input[str] params: Params.
        :param pulumi.Input[str] params_out: Params Out.
        :param pulumi.Input[int] status: Status.
        :param pulumi.Input[str] type: DataSource Type.
        """
        if biz_params is not None:
            pulumi.set(__self__, "biz_params", biz_params)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if collect is not None:
            pulumi.set(__self__, "collect", collect)
        if cos_bucket is not None:
            pulumi.set(__self__, "cos_bucket", cos_bucket)
        if cos_region is not None:
            pulumi.set(__self__, "cos_region", cos_region)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display is not None:
            pulumi.set(__self__, "display", display)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner_project_id is not None:
            pulumi.set(__self__, "owner_project_id", owner_project_id)
        if owner_project_ident is not None:
            pulumi.set(__self__, "owner_project_ident", owner_project_ident)
        if owner_project_name is not None:
            pulumi.set(__self__, "owner_project_name", owner_project_name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if params_out is not None:
            pulumi.set(__self__, "params_out", params_out)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bizParams")
    def biz_params(self) -> Optional[pulumi.Input[str]]:
        """
        BizParams.
        """
        return pulumi.get(self, "biz_params")

    @biz_params.setter
    def biz_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "biz_params", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        DataSource Category.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ClusterId.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def collect(self) -> Optional[pulumi.Input[str]]:
        """
        Collect.
        """
        return pulumi.get(self, "collect")

    @collect.setter
    def collect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collect", value)

    @property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        COSBucket.
        """
        return pulumi.get(self, "cos_bucket")

    @cos_bucket.setter
    def cos_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket", value)

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cos region.
        """
        return pulumi.get(self, "cos_region")

    @cos_region.setter
    def cos_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_region", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Dbname.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def display(self) -> Optional[pulumi.Input[str]]:
        """
        Display.
        """
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def instance(self) -> Optional[pulumi.Input[str]]:
        """
        Instance.
        """
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        DataSource Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ownerProjectId")
    def owner_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Owner projectId.
        """
        return pulumi.get(self, "owner_project_id")

    @owner_project_id.setter
    def owner_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_project_id", value)

    @property
    @pulumi.getter(name="ownerProjectIdent")
    def owner_project_ident(self) -> Optional[pulumi.Input[str]]:
        """
        Owner Project Ident.
        """
        return pulumi.get(self, "owner_project_ident")

    @owner_project_ident.setter
    def owner_project_ident(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_project_ident", value)

    @property
    @pulumi.getter(name="ownerProjectName")
    def owner_project_name(self) -> Optional[pulumi.Input[str]]:
        """
        Owner project name.
        """
        return pulumi.get(self, "owner_project_name")

    @owner_project_name.setter
    def owner_project_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_project_name", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[str]]:
        """
        Params.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter(name="paramsOut")
    def params_out(self) -> Optional[pulumi.Input[str]]:
        """
        Params Out.
        """
        return pulumi.get(self, "params_out")

    @params_out.setter
    def params_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "params_out", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        DataSource Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Datasource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 biz_params: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 collect: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 cos_region: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_project_id: Optional[pulumi.Input[str]] = None,
                 owner_project_ident: Optional[pulumi.Input[str]] = None,
                 owner_project_name: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a wedata datasource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.Datasource("example",
            category="DB",
            type="MYSQL",
            owner_project_id="1612982498218618880",
            owner_project_name="project_demo",
            owner_project_ident="体验项目",
            description="description.",
            display="tf_example_demo",
            status=1,
            cos_bucket="wedata-agent-sh-1257305158",
            cos_region="ap-shanghai",
            params=json.dumps({
                "connectType": "public",
                "authorityType": "true",
                "deployType": "CONNSTR_PUBLICDB",
                "url": "jdbc:mysql://1.1.1.1:8080/database",
                "username": "root",
                "password": "password",
                "type": "MYSQL",
            }))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] biz_params: BizParams.
        :param pulumi.Input[str] category: DataSource Category.
        :param pulumi.Input[str] cluster_id: ClusterId.
        :param pulumi.Input[str] collect: Collect.
        :param pulumi.Input[str] cos_bucket: COSBucket.
        :param pulumi.Input[str] cos_region: Cos region.
        :param pulumi.Input[str] database_name: Dbname.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] display: Display.
        :param pulumi.Input[str] instance: Instance.
        :param pulumi.Input[str] name: DataSource Name.
        :param pulumi.Input[str] owner_project_id: Owner projectId.
        :param pulumi.Input[str] owner_project_ident: Owner Project Ident.
        :param pulumi.Input[str] owner_project_name: Owner project name.
        :param pulumi.Input[str] params: Params.
        :param pulumi.Input[int] status: Status.
        :param pulumi.Input[str] type: DataSource Type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatasourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a wedata datasource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.Datasource("example",
            category="DB",
            type="MYSQL",
            owner_project_id="1612982498218618880",
            owner_project_name="project_demo",
            owner_project_ident="体验项目",
            description="description.",
            display="tf_example_demo",
            status=1,
            cos_bucket="wedata-agent-sh-1257305158",
            cos_region="ap-shanghai",
            params=json.dumps({
                "connectType": "public",
                "authorityType": "true",
                "deployType": "CONNSTR_PUBLICDB",
                "url": "jdbc:mysql://1.1.1.1:8080/database",
                "username": "root",
                "password": "password",
                "type": "MYSQL",
            }))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param DatasourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatasourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 biz_params: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 collect: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 cos_region: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display: Optional[pulumi.Input[str]] = None,
                 instance: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner_project_id: Optional[pulumi.Input[str]] = None,
                 owner_project_ident: Optional[pulumi.Input[str]] = None,
                 owner_project_name: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatasourceArgs.__new__(DatasourceArgs)

            __props__.__dict__["biz_params"] = biz_params
            if category is None and not opts.urn:
                raise TypeError("Missing required property 'category'")
            __props__.__dict__["category"] = category
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["collect"] = collect
            __props__.__dict__["cos_bucket"] = cos_bucket
            __props__.__dict__["cos_region"] = cos_region
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["description"] = description
            __props__.__dict__["display"] = display
            __props__.__dict__["instance"] = instance
            __props__.__dict__["name"] = name
            if owner_project_id is None and not opts.urn:
                raise TypeError("Missing required property 'owner_project_id'")
            __props__.__dict__["owner_project_id"] = owner_project_id
            if owner_project_ident is None and not opts.urn:
                raise TypeError("Missing required property 'owner_project_ident'")
            __props__.__dict__["owner_project_ident"] = owner_project_ident
            if owner_project_name is None and not opts.urn:
                raise TypeError("Missing required property 'owner_project_name'")
            __props__.__dict__["owner_project_name"] = owner_project_name
            if params is None and not opts.urn:
                raise TypeError("Missing required property 'params'")
            __props__.__dict__["params"] = params
            __props__.__dict__["status"] = status
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["params_out"] = None
        super(Datasource, __self__).__init__(
            'tencentcloud:Wedata/datasource:Datasource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            biz_params: Optional[pulumi.Input[str]] = None,
            category: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            collect: Optional[pulumi.Input[str]] = None,
            cos_bucket: Optional[pulumi.Input[str]] = None,
            cos_region: Optional[pulumi.Input[str]] = None,
            database_name: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display: Optional[pulumi.Input[str]] = None,
            instance: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            owner_project_id: Optional[pulumi.Input[str]] = None,
            owner_project_ident: Optional[pulumi.Input[str]] = None,
            owner_project_name: Optional[pulumi.Input[str]] = None,
            params: Optional[pulumi.Input[str]] = None,
            params_out: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Datasource':
        """
        Get an existing Datasource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] biz_params: BizParams.
        :param pulumi.Input[str] category: DataSource Category.
        :param pulumi.Input[str] cluster_id: ClusterId.
        :param pulumi.Input[str] collect: Collect.
        :param pulumi.Input[str] cos_bucket: COSBucket.
        :param pulumi.Input[str] cos_region: Cos region.
        :param pulumi.Input[str] database_name: Dbname.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[str] display: Display.
        :param pulumi.Input[str] instance: Instance.
        :param pulumi.Input[str] name: DataSource Name.
        :param pulumi.Input[str] owner_project_id: Owner projectId.
        :param pulumi.Input[str] owner_project_ident: Owner Project Ident.
        :param pulumi.Input[str] owner_project_name: Owner project name.
        :param pulumi.Input[str] params: Params.
        :param pulumi.Input[str] params_out: Params Out.
        :param pulumi.Input[int] status: Status.
        :param pulumi.Input[str] type: DataSource Type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatasourceState.__new__(_DatasourceState)

        __props__.__dict__["biz_params"] = biz_params
        __props__.__dict__["category"] = category
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["collect"] = collect
        __props__.__dict__["cos_bucket"] = cos_bucket
        __props__.__dict__["cos_region"] = cos_region
        __props__.__dict__["database_name"] = database_name
        __props__.__dict__["description"] = description
        __props__.__dict__["display"] = display
        __props__.__dict__["instance"] = instance
        __props__.__dict__["name"] = name
        __props__.__dict__["owner_project_id"] = owner_project_id
        __props__.__dict__["owner_project_ident"] = owner_project_ident
        __props__.__dict__["owner_project_name"] = owner_project_name
        __props__.__dict__["params"] = params
        __props__.__dict__["params_out"] = params_out
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return Datasource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bizParams")
    def biz_params(self) -> pulumi.Output[Optional[str]]:
        """
        BizParams.
        """
        return pulumi.get(self, "biz_params")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        """
        DataSource Category.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ClusterId.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def collect(self) -> pulumi.Output[str]:
        """
        Collect.
        """
        return pulumi.get(self, "collect")

    @property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> pulumi.Output[Optional[str]]:
        """
        COSBucket.
        """
        return pulumi.get(self, "cos_bucket")

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> pulumi.Output[Optional[str]]:
        """
        Cos region.
        """
        return pulumi.get(self, "cos_region")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[str]:
        """
        Dbname.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def display(self) -> pulumi.Output[Optional[str]]:
        """
        Display.
        """
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Output[Optional[str]]:
        """
        Instance.
        """
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        DataSource Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ownerProjectId")
    def owner_project_id(self) -> pulumi.Output[str]:
        """
        Owner projectId.
        """
        return pulumi.get(self, "owner_project_id")

    @property
    @pulumi.getter(name="ownerProjectIdent")
    def owner_project_ident(self) -> pulumi.Output[str]:
        """
        Owner Project Ident.
        """
        return pulumi.get(self, "owner_project_ident")

    @property
    @pulumi.getter(name="ownerProjectName")
    def owner_project_name(self) -> pulumi.Output[str]:
        """
        Owner project name.
        """
        return pulumi.get(self, "owner_project_name")

    @property
    @pulumi.getter
    def params(self) -> pulumi.Output[str]:
        """
        Params.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter(name="paramsOut")
    def params_out(self) -> pulumi.Output[str]:
        """
        Params Out.
        """
        return pulumi.get(self, "params_out")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        Status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        DataSource Type.
        """
        return pulumi.get(self, "type")

