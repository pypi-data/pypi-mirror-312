# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'BaselineAlarmRuleDtoArgs',
    'BaselineBaselineCreateAlarmRuleRequestArgs',
    'BaselinePromiseTaskArgs',
    'DqRuleCompareRuleArgs',
    'DqRuleCompareRuleItemArgs',
    'DqRuleCompareRuleItemValueListArgs',
    'DqRuleFieldConfigArgs',
    'DqRuleFieldConfigTableConfigArgs',
    'DqRuleFieldConfigTableConfigFieldConfigArgs',
    'DqRuleFieldConfigWhereConfigArgs',
    'FunctionResourceListArgs',
    'IntegrationOfflineTaskTaskInfoArgs',
    'IntegrationOfflineTaskTaskInfoConfigArgs',
    'IntegrationOfflineTaskTaskInfoExecuteContextArgs',
    'IntegrationOfflineTaskTaskInfoExtConfigArgs',
    'IntegrationOfflineTaskTaskInfoMappingArgs',
    'IntegrationOfflineTaskTaskInfoMappingExtConfigArgs',
    'IntegrationOfflineTaskTaskInfoMappingSchemaMappingArgs',
    'IntegrationOfflineTaskTaskInfoMappingSourceSchemaArgs',
    'IntegrationOfflineTaskTaskInfoMappingSourceSchemaPropertyArgs',
    'IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs',
    'IntegrationRealtimeTaskTaskInfoArgs',
    'IntegrationRealtimeTaskTaskInfoConfigArgs',
    'IntegrationRealtimeTaskTaskInfoExecuteContextArgs',
    'IntegrationRealtimeTaskTaskInfoExtConfigArgs',
    'IntegrationRealtimeTaskTaskInfoMappingArgs',
    'IntegrationRealtimeTaskTaskInfoMappingExtConfigArgs',
    'IntegrationRealtimeTaskTaskInfoMappingSchemaMappingArgs',
    'IntegrationRealtimeTaskTaskInfoMappingSourceSchemaArgs',
    'IntegrationRealtimeTaskTaskInfoMappingSourceSchemaPropertyArgs',
    'IntegrationRealtimeTaskTaskInfoNodeArgs',
    'IntegrationRealtimeTaskTaskInfoNodeConfigArgs',
    'IntegrationRealtimeTaskTaskInfoNodeExtConfigArgs',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingArgs',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfigArgs',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMappingArgs',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaArgs',
    'IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaPropertyArgs',
    'IntegrationRealtimeTaskTaskInfoNodeSchemaArgs',
    'IntegrationRealtimeTaskTaskInfoNodeSchemaPropertyArgs',
    'IntegrationTaskNodeNodeInfoArgs',
    'IntegrationTaskNodeNodeInfoConfigArgs',
    'IntegrationTaskNodeNodeInfoExtConfigArgs',
    'IntegrationTaskNodeNodeInfoNodeMappingArgs',
    'IntegrationTaskNodeNodeInfoNodeMappingExtConfigArgs',
    'IntegrationTaskNodeNodeInfoNodeMappingSchemaMappingArgs',
    'IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaArgs',
    'IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaPropertyArgs',
    'IntegrationTaskNodeNodeInfoSchemaArgs',
    'IntegrationTaskNodeNodeInfoSchemaPropertyArgs',
    'GetDataSourceListFilterArgs',
    'GetDataSourceListOrderFieldArgs',
    'GetDataSourceWithoutInfoFilterArgs',
    'GetDataSourceWithoutInfoOrderFieldArgs',
]

@pulumi.input_type
class BaselineAlarmRuleDtoArgs:
    def __init__(__self__, *,
                 alarm_level_type: Optional[pulumi.Input[str]] = None,
                 alarm_rule_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alarm_level_type: Important;Urgent;Normal.
        :param pulumi.Input[str] alarm_rule_id: Alarm Rule ID.
        """
        if alarm_level_type is not None:
            pulumi.set(__self__, "alarm_level_type", alarm_level_type)
        if alarm_rule_id is not None:
            pulumi.set(__self__, "alarm_rule_id", alarm_rule_id)

    @property
    @pulumi.getter(name="alarmLevelType")
    def alarm_level_type(self) -> Optional[pulumi.Input[str]]:
        """
        Important;Urgent;Normal.
        """
        return pulumi.get(self, "alarm_level_type")

    @alarm_level_type.setter
    def alarm_level_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_level_type", value)

    @property
    @pulumi.getter(name="alarmRuleId")
    def alarm_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Alarm Rule ID.
        """
        return pulumi.get(self, "alarm_rule_id")

    @alarm_rule_id.setter
    def alarm_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alarm_rule_id", value)


@pulumi.input_type
class BaselineBaselineCreateAlarmRuleRequestArgs:
    def __init__(__self__, *,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_recipient_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alarm_recipient_type: Optional[pulumi.Input[int]] = None,
                 alarm_recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alarm_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alarm_ways: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 creator: Optional[pulumi.Input[str]] = None,
                 creator_id: Optional[pulumi.Input[str]] = None,
                 ext_info: Optional[pulumi.Input[str]] = None,
                 monitor_object_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitor_type: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] alarm_level: Alarm Level, 1. Normal, 2. Important, 3. Urgent (default is 1. Normal)Note: This field may return null, indicating no valid value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_recipient_ids: Alarm Recipient IDsNote: This field may return null, indicating no valid value.
        :param pulumi.Input[int] alarm_recipient_type: Alarm Recipient Type: 1. Specified Personnel, 2. Task Owner, 3. Duty Roster (default is 1. Specified Personnel)Note: This field may return null, indicating no valid value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_recipients: Alarm RecipientsNote: This field may return null, indicating no valid value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_types: Alarm Types, 1. Failure Alarm, 2. Timeout Alarm, 3. Success Alarm, 4. Baseline Violation, 5. Baseline Warning, 6. Baseline Task Failure (default is 1. Failure Alarm)Note: This field may return null, indicating no valid value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_ways: Alarm Methods, 1. Email, 2. SMS, 3. WeChat, 4. Voice, 5. Enterprise WeChat, 6. HTTP, 7. Enterprise WeChat Group; Alarm method code list (default is 1. Email)Note: This field may return null, indicating no valid value.
        :param pulumi.Input[str] creator: Creator UINNote: This field may return null, indicating no valid value.
        :param pulumi.Input[str] creator_id: Creator NameNote: This field may return null, indicating no valid value.
        :param pulumi.Input[str] ext_info: Extended Information, 1. Estimated Runtime (default), 2. Estimated Completion Time, 3. Estimated Scheduling Time, 4. Incomplete within the Cycle; Value Types: 1. Specified Value, 2. Historical Average (default is 1. Specified Value)Note: This field may return null, indicating no valid value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitor_object_ids: Monitoring ObjectsNote: This field may return null, indicating no valid value.
        :param pulumi.Input[int] monitor_type: Monitoring Type, 1. Task, 2. Workflow, 3. Project, 4. Baseline (default is 1. Task)Note: This field may return null, indicating no valid value.
        :param pulumi.Input[str] project_id: Project NameNote: This field may return null, indicating no valid value.
        :param pulumi.Input[str] rule_name: Rule NameNote: This field may return null, indicating no valid value.
        """
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_recipient_ids is not None:
            pulumi.set(__self__, "alarm_recipient_ids", alarm_recipient_ids)
        if alarm_recipient_type is not None:
            pulumi.set(__self__, "alarm_recipient_type", alarm_recipient_type)
        if alarm_recipients is not None:
            pulumi.set(__self__, "alarm_recipients", alarm_recipients)
        if alarm_types is not None:
            pulumi.set(__self__, "alarm_types", alarm_types)
        if alarm_ways is not None:
            pulumi.set(__self__, "alarm_ways", alarm_ways)
        if creator is not None:
            pulumi.set(__self__, "creator", creator)
        if creator_id is not None:
            pulumi.set(__self__, "creator_id", creator_id)
        if ext_info is not None:
            pulumi.set(__self__, "ext_info", ext_info)
        if monitor_object_ids is not None:
            pulumi.set(__self__, "monitor_object_ids", monitor_object_ids)
        if monitor_type is not None:
            pulumi.set(__self__, "monitor_type", monitor_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[int]]:
        """
        Alarm Level, 1. Normal, 2. Important, 3. Urgent (default is 1. Normal)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_level", value)

    @property
    @pulumi.getter(name="alarmRecipientIds")
    def alarm_recipient_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Alarm Recipient IDsNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_recipient_ids")

    @alarm_recipient_ids.setter
    def alarm_recipient_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alarm_recipient_ids", value)

    @property
    @pulumi.getter(name="alarmRecipientType")
    def alarm_recipient_type(self) -> Optional[pulumi.Input[int]]:
        """
        Alarm Recipient Type: 1. Specified Personnel, 2. Task Owner, 3. Duty Roster (default is 1. Specified Personnel)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_recipient_type")

    @alarm_recipient_type.setter
    def alarm_recipient_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_recipient_type", value)

    @property
    @pulumi.getter(name="alarmRecipients")
    def alarm_recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Alarm RecipientsNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_recipients")

    @alarm_recipients.setter
    def alarm_recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alarm_recipients", value)

    @property
    @pulumi.getter(name="alarmTypes")
    def alarm_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Alarm Types, 1. Failure Alarm, 2. Timeout Alarm, 3. Success Alarm, 4. Baseline Violation, 5. Baseline Warning, 6. Baseline Task Failure (default is 1. Failure Alarm)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_types")

    @alarm_types.setter
    def alarm_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alarm_types", value)

    @property
    @pulumi.getter(name="alarmWays")
    def alarm_ways(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Alarm Methods, 1. Email, 2. SMS, 3. WeChat, 4. Voice, 5. Enterprise WeChat, 6. HTTP, 7. Enterprise WeChat Group; Alarm method code list (default is 1. Email)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "alarm_ways")

    @alarm_ways.setter
    def alarm_ways(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alarm_ways", value)

    @property
    @pulumi.getter
    def creator(self) -> Optional[pulumi.Input[str]]:
        """
        Creator UINNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "creator")

    @creator.setter
    def creator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator", value)

    @property
    @pulumi.getter(name="creatorId")
    def creator_id(self) -> Optional[pulumi.Input[str]]:
        """
        Creator NameNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "creator_id")

    @creator_id.setter
    def creator_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_id", value)

    @property
    @pulumi.getter(name="extInfo")
    def ext_info(self) -> Optional[pulumi.Input[str]]:
        """
        Extended Information, 1. Estimated Runtime (default), 2. Estimated Completion Time, 3. Estimated Scheduling Time, 4. Incomplete within the Cycle; Value Types: 1. Specified Value, 2. Historical Average (default is 1. Specified Value)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "ext_info")

    @ext_info.setter
    def ext_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ext_info", value)

    @property
    @pulumi.getter(name="monitorObjectIds")
    def monitor_object_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Monitoring ObjectsNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "monitor_object_ids")

    @monitor_object_ids.setter
    def monitor_object_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitor_object_ids", value)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> Optional[pulumi.Input[int]]:
        """
        Monitoring Type, 1. Task, 2. Workflow, 3. Project, 4. Baseline (default is 1. Task)Note: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "monitor_type")

    @monitor_type.setter
    def monitor_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project NameNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule NameNote: This field may return null, indicating no valid value.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)


@pulumi.input_type
class BaselinePromiseTaskArgs:
    def __init__(__self__, *,
                 project_id: Optional[pulumi.Input[str]] = None,
                 task_cycle: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 task_in_charge_name: Optional[pulumi.Input[str]] = None,
                 task_in_charge_uin: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] task_cycle: Task Scheduling Cycle.
        :param pulumi.Input[str] task_id: Task ID.
        :param pulumi.Input[str] task_in_charge_name: Task Owner Name.
        :param pulumi.Input[str] task_in_charge_uin: Task Owner ID.
        :param pulumi.Input[str] task_name: Task Name.
        :param pulumi.Input[str] workflow_id: Workflow ID.
        :param pulumi.Input[str] workflow_name: Workflow Name.
        """
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if task_cycle is not None:
            pulumi.set(__self__, "task_cycle", task_cycle)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_in_charge_name is not None:
            pulumi.set(__self__, "task_in_charge_name", task_in_charge_name)
        if task_in_charge_uin is not None:
            pulumi.set(__self__, "task_in_charge_uin", task_in_charge_uin)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="taskCycle")
    def task_cycle(self) -> Optional[pulumi.Input[str]]:
        """
        Task Scheduling Cycle.
        """
        return pulumi.get(self, "task_cycle")

    @task_cycle.setter
    def task_cycle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_cycle", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="taskInChargeName")
    def task_in_charge_name(self) -> Optional[pulumi.Input[str]]:
        """
        Task Owner Name.
        """
        return pulumi.get(self, "task_in_charge_name")

    @task_in_charge_name.setter
    def task_in_charge_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_in_charge_name", value)

    @property
    @pulumi.getter(name="taskInChargeUin")
    def task_in_charge_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Task Owner ID.
        """
        return pulumi.get(self, "task_in_charge_uin")

    @task_in_charge_uin.setter
    def task_in_charge_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_in_charge_uin", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        Task Name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workflow ID.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[pulumi.Input[str]]:
        """
        Workflow Name.
        """
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_name", value)


@pulumi.input_type
class DqRuleCompareRuleArgs:
    def __init__(__self__, *,
                 cycle_step: Optional[pulumi.Input[int]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemArgs']]]] = None):
        """
        :param pulumi.Input[int] cycle_step: Periodic Indicates the default period of a template, in secondsNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemArgs']]] items: Comparison condition listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if cycle_step is not None:
            pulumi.set(__self__, "cycle_step", cycle_step)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="cycleStep")
    def cycle_step(self) -> Optional[pulumi.Input[int]]:
        """
        Periodic Indicates the default period of a template, in secondsNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "cycle_step")

    @cycle_step.setter
    def cycle_step(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cycle_step", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemArgs']]]]:
        """
        Comparison condition listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemArgs']]]]):
        pulumi.set(self, "items", value)


@pulumi.input_type
class DqRuleCompareRuleItemArgs:
    def __init__(__self__, *,
                 compare_type: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 value_compute_type: Optional[pulumi.Input[int]] = None,
                 value_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemValueListArgs']]]] = None):
        """
        :param pulumi.Input[int] compare_type: Comparison type 1. Fixed value 2. Fluctuating value 3. Comparison of value range 4. Enumeration range comparison 5. Do not compareNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] operator: Comparison operation type &amp;lt; &amp;lt;= == =&amp;gt; &amp;gt;Note: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[int] value_compute_type: Quality statistics Type 1. Absolute value 2. Increase 3. Decrease 4. C contains 5. N C does not containNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemValueListArgs']]] value_lists: Compare the threshold listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if compare_type is not None:
            pulumi.set(__self__, "compare_type", compare_type)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value_compute_type is not None:
            pulumi.set(__self__, "value_compute_type", value_compute_type)
        if value_lists is not None:
            pulumi.set(__self__, "value_lists", value_lists)

    @property
    @pulumi.getter(name="compareType")
    def compare_type(self) -> Optional[pulumi.Input[int]]:
        """
        Comparison type 1. Fixed value 2. Fluctuating value 3. Comparison of value range 4. Enumeration range comparison 5. Do not compareNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "compare_type")

    @compare_type.setter
    def compare_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compare_type", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Comparison operation type &amp;lt; &amp;lt;= == =&amp;gt; &amp;gt;Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="valueComputeType")
    def value_compute_type(self) -> Optional[pulumi.Input[int]]:
        """
        Quality statistics Type 1. Absolute value 2. Increase 3. Decrease 4. C contains 5. N C does not containNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value_compute_type")

    @value_compute_type.setter
    def value_compute_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value_compute_type", value)

    @property
    @pulumi.getter(name="valueLists")
    def value_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemValueListArgs']]]]:
        """
        Compare the threshold listNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value_lists")

    @value_lists.setter
    def value_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleCompareRuleItemValueListArgs']]]]):
        pulumi.set(self, "value_lists", value)


@pulumi.input_type
class DqRuleCompareRuleItemValueListArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[str]] = None,
                 value_type: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] value: Threshold valueNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[int] value_type: Threshold type 1. Low threshold 2. High threshold 3. Common threshold 4. Enumerated valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_type is not None:
            pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Threshold valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> Optional[pulumi.Input[int]]:
        """
        Threshold type 1. Low threshold 2. High threshold 3. Common threshold 4. Enumerated valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value_type", value)


@pulumi.input_type
class DqRuleFieldConfigArgs:
    def __init__(__self__, *,
                 table_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigArgs']]]] = None,
                 where_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigWhereConfigArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigArgs']]] table_configs: Library table variableNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigWhereConfigArgs']]] where_configs: Where variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if table_configs is not None:
            pulumi.set(__self__, "table_configs", table_configs)
        if where_configs is not None:
            pulumi.set(__self__, "where_configs", where_configs)

    @property
    @pulumi.getter(name="tableConfigs")
    def table_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigArgs']]]]:
        """
        Library table variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_configs")

    @table_configs.setter
    def table_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigArgs']]]]):
        pulumi.set(self, "table_configs", value)

    @property
    @pulumi.getter(name="whereConfigs")
    def where_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigWhereConfigArgs']]]]:
        """
        Where variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "where_configs")

    @where_configs.setter
    def where_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigWhereConfigArgs']]]]):
        pulumi.set(self, "where_configs", value)


@pulumi.input_type
class DqRuleFieldConfigTableConfigArgs:
    def __init__(__self__, *,
                 database_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 field_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigFieldConfigArgs']]]] = None,
                 table_id: Optional[pulumi.Input[str]] = None,
                 table_key: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] database_id: Database idNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] database_name: Database nameNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigFieldConfigArgs']]] field_configs: Field variableNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] table_id: Table idNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] table_key: Table keyNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] table_name: Table nameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if database_id is not None:
            pulumi.set(__self__, "database_id", database_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if field_configs is not None:
            pulumi.set(__self__, "field_configs", field_configs)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)
        if table_key is not None:
            pulumi.set(__self__, "table_key", table_key)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[pulumi.Input[str]]:
        """
        Database idNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "database_id")

    @database_id.setter
    def database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database nameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="fieldConfigs")
    def field_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigFieldConfigArgs']]]]:
        """
        Field variableNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_configs")

    @field_configs.setter
    def field_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DqRuleFieldConfigTableConfigFieldConfigArgs']]]]):
        pulumi.set(self, "field_configs", value)

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[pulumi.Input[str]]:
        """
        Table idNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_id", value)

    @property
    @pulumi.getter(name="tableKey")
    def table_key(self) -> Optional[pulumi.Input[str]]:
        """
        Table keyNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_key")

    @table_key.setter
    def table_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_key", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Table nameNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class DqRuleFieldConfigTableConfigFieldConfigArgs:
    def __init__(__self__, *,
                 field_data_type: Optional[pulumi.Input[str]] = None,
                 field_key: Optional[pulumi.Input[str]] = None,
                 field_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_data_type: Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] field_key: Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] field_value: Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if field_data_type is not None:
            pulumi.set(__self__, "field_data_type", field_data_type)
        if field_key is not None:
            pulumi.set(__self__, "field_key", field_key)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldDataType")
    def field_data_type(self) -> Optional[pulumi.Input[str]]:
        """
        Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_data_type")

    @field_data_type.setter
    def field_data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_data_type", value)

    @property
    @pulumi.getter(name="fieldKey")
    def field_key(self) -> Optional[pulumi.Input[str]]:
        """
        Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_key")

    @field_key.setter
    def field_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_key", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        """
        Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)


@pulumi.input_type
class DqRuleFieldConfigWhereConfigArgs:
    def __init__(__self__, *,
                 field_data_type: Optional[pulumi.Input[str]] = None,
                 field_key: Optional[pulumi.Input[str]] = None,
                 field_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] field_data_type: Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] field_key: Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] field_value: Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        if field_data_type is not None:
            pulumi.set(__self__, "field_data_type", field_data_type)
        if field_key is not None:
            pulumi.set(__self__, "field_key", field_key)
        if field_value is not None:
            pulumi.set(__self__, "field_value", field_value)

    @property
    @pulumi.getter(name="fieldDataType")
    def field_data_type(self) -> Optional[pulumi.Input[str]]:
        """
        Field typeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_data_type")

    @field_data_type.setter
    def field_data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_data_type", value)

    @property
    @pulumi.getter(name="fieldKey")
    def field_key(self) -> Optional[pulumi.Input[str]]:
        """
        Field keyNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_key")

    @field_key.setter
    def field_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_key", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        """
        Field valueNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)


@pulumi.input_type
class FunctionResourceListArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None,
                 md5: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Resource Name.
        :param pulumi.Input[str] path: Resource Path.
        :param pulumi.Input[str] id: Resource ID.
        :param pulumi.Input[str] md5: Resource MD5 Value.
        :param pulumi.Input[str] type: Resource Type.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Resource Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Resource Path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def md5(self) -> Optional[pulumi.Input[str]]:
        """
        Resource MD5 Value.
        """
        return pulumi.get(self, "md5")

    @md5.setter
    def md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoConfigArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator_uin: Optional[pulumi.Input[str]] = None,
                 data_proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execute_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExecuteContextArgs']]]] = None,
                 executor_group_name: Optional[pulumi.Input[str]] = None,
                 executor_id: Optional[pulumi.Input[str]] = None,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExtConfigArgs']]]] = None,
                 has_version: Optional[pulumi.Input[bool]] = None,
                 in_long_manager_url: Optional[pulumi.Input[str]] = None,
                 in_long_manager_version: Optional[pulumi.Input[str]] = None,
                 in_long_stream_id: Optional[pulumi.Input[str]] = None,
                 incharge: Optional[pulumi.Input[str]] = None,
                 input_datasource_type: Optional[pulumi.Input[str]] = None,
                 instance_version: Optional[pulumi.Input[int]] = None,
                 last_run_time: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 locker: Optional[pulumi.Input[str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingArgs']]]] = None,
                 num_records_in: Optional[pulumi.Input[int]] = None,
                 num_records_out: Optional[pulumi.Input[int]] = None,
                 num_restarts: Optional[pulumi.Input[int]] = None,
                 offline_task_add_entity: Optional[pulumi.Input['IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs']] = None,
                 operator_uin: Optional[pulumi.Input[str]] = None,
                 output_datasource_type: Optional[pulumi.Input[str]] = None,
                 owner_uin: Optional[pulumi.Input[str]] = None,
                 read_phase: Optional[pulumi.Input[int]] = None,
                 reader_delay: Optional[pulumi.Input[float]] = None,
                 running_cu: Optional[pulumi.Input[float]] = None,
                 schedule_task_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 stop_time: Optional[pulumi.Input[str]] = None,
                 submit: Optional[pulumi.Input[bool]] = None,
                 switch_resource: Optional[pulumi.Input[int]] = None,
                 sync_type: Optional[pulumi.Input[int]] = None,
                 task_alarm_regular_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 task_group_id: Optional[pulumi.Input[str]] = None,
                 task_mode: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] app_id: User App Id.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoConfigArgs']]] configs: Task configuration.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] creator_uin: Creator User ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_proxy_urls: Data proxy url.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExecuteContextArgs']]] execute_contexts: Execute context.
        :param pulumi.Input[str] executor_group_name: Executor group name.
        :param pulumi.Input[str] executor_id: Executor resource ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input[bool] has_version: Whether the task been submitted.
        :param pulumi.Input[str] in_long_manager_url: InLong manager url.
        :param pulumi.Input[str] in_long_manager_version: InLong manager version.
        :param pulumi.Input[str] in_long_stream_id: InLong stream id.
        :param pulumi.Input[str] incharge: Incharge user.
        :param pulumi.Input[str] input_datasource_type: Input datasource type.
        :param pulumi.Input[int] instance_version: Instance version.
        :param pulumi.Input[str] last_run_time: The last time the task was run.
        :param pulumi.Input[bool] locked: Whether the task been locked.
        :param pulumi.Input[str] locker: User locked task.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingArgs']]] mappings: Node mapping.
        :param pulumi.Input[int] num_records_in: Number of reads.
        :param pulumi.Input[int] num_records_out: Number of writes.
        :param pulumi.Input[int] num_restarts: Times of restarts.
        :param pulumi.Input['IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs'] offline_task_add_entity: Offline task scheduling configuration.
        :param pulumi.Input[str] operator_uin: Operator User ID.
        :param pulumi.Input[str] output_datasource_type: Output datasource type.
        :param pulumi.Input[str] owner_uin: Owner User ID.
        :param pulumi.Input[int] read_phase: Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        :param pulumi.Input[float] reader_delay: Read latency.
        :param pulumi.Input[float] running_cu: The amount of resources consumed by real-time task.
        :param pulumi.Input[str] schedule_task_id: Task scheduling id (job id such as oceanus or us).
        :param pulumi.Input[int] status: Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        :param pulumi.Input[str] stop_time: The time the task was stopped.
        :param pulumi.Input[bool] submit: Whether the task version has been submitted for operation and maintenance.
        :param pulumi.Input[int] switch_resource: Resource tiering status, 0: in progress, 1: successful, 2: failed.
        :param pulumi.Input[int] sync_type: Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] task_alarm_regular_lists: Task alarm regular.
        :param pulumi.Input[str] task_group_id: Inlong Task Group ID.
        :param pulumi.Input[str] task_mode: Task display mode, 0: canvas mode, 1: form mode.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] workflow_id: The workflow id to which the task belongs.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if data_proxy_urls is not None:
            pulumi.set(__self__, "data_proxy_urls", data_proxy_urls)
        if execute_contexts is not None:
            pulumi.set(__self__, "execute_contexts", execute_contexts)
        if executor_group_name is not None:
            pulumi.set(__self__, "executor_group_name", executor_group_name)
        if executor_id is not None:
            pulumi.set(__self__, "executor_id", executor_id)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if has_version is not None:
            pulumi.set(__self__, "has_version", has_version)
        if in_long_manager_url is not None:
            pulumi.set(__self__, "in_long_manager_url", in_long_manager_url)
        if in_long_manager_version is not None:
            pulumi.set(__self__, "in_long_manager_version", in_long_manager_version)
        if in_long_stream_id is not None:
            pulumi.set(__self__, "in_long_stream_id", in_long_stream_id)
        if incharge is not None:
            pulumi.set(__self__, "incharge", incharge)
        if input_datasource_type is not None:
            pulumi.set(__self__, "input_datasource_type", input_datasource_type)
        if instance_version is not None:
            pulumi.set(__self__, "instance_version", instance_version)
        if last_run_time is not None:
            pulumi.set(__self__, "last_run_time", last_run_time)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if locker is not None:
            pulumi.set(__self__, "locker", locker)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if num_records_in is not None:
            pulumi.set(__self__, "num_records_in", num_records_in)
        if num_records_out is not None:
            pulumi.set(__self__, "num_records_out", num_records_out)
        if num_restarts is not None:
            pulumi.set(__self__, "num_restarts", num_restarts)
        if offline_task_add_entity is not None:
            pulumi.set(__self__, "offline_task_add_entity", offline_task_add_entity)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if output_datasource_type is not None:
            pulumi.set(__self__, "output_datasource_type", output_datasource_type)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if read_phase is not None:
            pulumi.set(__self__, "read_phase", read_phase)
        if reader_delay is not None:
            pulumi.set(__self__, "reader_delay", reader_delay)
        if running_cu is not None:
            pulumi.set(__self__, "running_cu", running_cu)
        if schedule_task_id is not None:
            pulumi.set(__self__, "schedule_task_id", schedule_task_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stop_time is not None:
            pulumi.set(__self__, "stop_time", stop_time)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)
        if switch_resource is not None:
            pulumi.set(__self__, "switch_resource", switch_resource)
        if sync_type is not None:
            pulumi.set(__self__, "sync_type", sync_type)
        if task_alarm_regular_lists is not None:
            pulumi.set(__self__, "task_alarm_regular_lists", task_alarm_regular_lists)
        if task_group_id is not None:
            pulumi.set(__self__, "task_group_id", task_group_id)
        if task_mode is not None:
            pulumi.set(__self__, "task_mode", task_mode)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoConfigArgs']]]]:
        """
        Task configuration.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @creator_uin.setter
    def creator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_uin", value)

    @property
    @pulumi.getter(name="dataProxyUrls")
    def data_proxy_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Data proxy url.
        """
        return pulumi.get(self, "data_proxy_urls")

    @data_proxy_urls.setter
    def data_proxy_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_proxy_urls", value)

    @property
    @pulumi.getter(name="executeContexts")
    def execute_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExecuteContextArgs']]]]:
        """
        Execute context.
        """
        return pulumi.get(self, "execute_contexts")

    @execute_contexts.setter
    def execute_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExecuteContextArgs']]]]):
        pulumi.set(self, "execute_contexts", value)

    @property
    @pulumi.getter(name="executorGroupName")
    def executor_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Executor group name.
        """
        return pulumi.get(self, "executor_group_name")

    @executor_group_name.setter
    def executor_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_group_name", value)

    @property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> Optional[pulumi.Input[str]]:
        """
        Executor resource ID.
        """
        return pulumi.get(self, "executor_id")

    @executor_id.setter
    def executor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_id", value)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter(name="hasVersion")
    def has_version(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the task been submitted.
        """
        return pulumi.get(self, "has_version")

    @has_version.setter
    def has_version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_version", value)

    @property
    @pulumi.getter(name="inLongManagerUrl")
    def in_long_manager_url(self) -> Optional[pulumi.Input[str]]:
        """
        InLong manager url.
        """
        return pulumi.get(self, "in_long_manager_url")

    @in_long_manager_url.setter
    def in_long_manager_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_long_manager_url", value)

    @property
    @pulumi.getter(name="inLongManagerVersion")
    def in_long_manager_version(self) -> Optional[pulumi.Input[str]]:
        """
        InLong manager version.
        """
        return pulumi.get(self, "in_long_manager_version")

    @in_long_manager_version.setter
    def in_long_manager_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_long_manager_version", value)

    @property
    @pulumi.getter(name="inLongStreamId")
    def in_long_stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        InLong stream id.
        """
        return pulumi.get(self, "in_long_stream_id")

    @in_long_stream_id.setter
    def in_long_stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_long_stream_id", value)

    @property
    @pulumi.getter
    def incharge(self) -> Optional[pulumi.Input[str]]:
        """
        Incharge user.
        """
        return pulumi.get(self, "incharge")

    @incharge.setter
    def incharge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incharge", value)

    @property
    @pulumi.getter(name="inputDatasourceType")
    def input_datasource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Input datasource type.
        """
        return pulumi.get(self, "input_datasource_type")

    @input_datasource_type.setter
    def input_datasource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_datasource_type", value)

    @property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance version.
        """
        return pulumi.get(self, "instance_version")

    @instance_version.setter
    def instance_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_version", value)

    @property
    @pulumi.getter(name="lastRunTime")
    def last_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time the task was run.
        """
        return pulumi.get(self, "last_run_time")

    @last_run_time.setter
    def last_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_run_time", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the task been locked.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def locker(self) -> Optional[pulumi.Input[str]]:
        """
        User locked task.
        """
        return pulumi.get(self, "locker")

    @locker.setter
    def locker(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locker", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingArgs']]]]:
        """
        Node mapping.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @property
    @pulumi.getter(name="numRecordsIn")
    def num_records_in(self) -> Optional[pulumi.Input[int]]:
        """
        Number of reads.
        """
        return pulumi.get(self, "num_records_in")

    @num_records_in.setter
    def num_records_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_records_in", value)

    @property
    @pulumi.getter(name="numRecordsOut")
    def num_records_out(self) -> Optional[pulumi.Input[int]]:
        """
        Number of writes.
        """
        return pulumi.get(self, "num_records_out")

    @num_records_out.setter
    def num_records_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_records_out", value)

    @property
    @pulumi.getter(name="numRestarts")
    def num_restarts(self) -> Optional[pulumi.Input[int]]:
        """
        Times of restarts.
        """
        return pulumi.get(self, "num_restarts")

    @num_restarts.setter
    def num_restarts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_restarts", value)

    @property
    @pulumi.getter(name="offlineTaskAddEntity")
    def offline_task_add_entity(self) -> Optional[pulumi.Input['IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs']]:
        """
        Offline task scheduling configuration.
        """
        return pulumi.get(self, "offline_task_add_entity")

    @offline_task_add_entity.setter
    def offline_task_add_entity(self, value: Optional[pulumi.Input['IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs']]):
        pulumi.set(self, "offline_task_add_entity", value)

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @operator_uin.setter
    def operator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator_uin", value)

    @property
    @pulumi.getter(name="outputDatasourceType")
    def output_datasource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Output datasource type.
        """
        return pulumi.get(self, "output_datasource_type")

    @output_datasource_type.setter
    def output_datasource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_datasource_type", value)

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @owner_uin.setter
    def owner_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_uin", value)

    @property
    @pulumi.getter(name="readPhase")
    def read_phase(self) -> Optional[pulumi.Input[int]]:
        """
        Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        """
        return pulumi.get(self, "read_phase")

    @read_phase.setter
    def read_phase(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_phase", value)

    @property
    @pulumi.getter(name="readerDelay")
    def reader_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Read latency.
        """
        return pulumi.get(self, "reader_delay")

    @reader_delay.setter
    def reader_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "reader_delay", value)

    @property
    @pulumi.getter(name="runningCu")
    def running_cu(self) -> Optional[pulumi.Input[float]]:
        """
        The amount of resources consumed by real-time task.
        """
        return pulumi.get(self, "running_cu")

    @running_cu.setter
    def running_cu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "running_cu", value)

    @property
    @pulumi.getter(name="scheduleTaskId")
    def schedule_task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Task scheduling id (job id such as oceanus or us).
        """
        return pulumi.get(self, "schedule_task_id")

    @schedule_task_id.setter
    def schedule_task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_task_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="stopTime")
    def stop_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time the task was stopped.
        """
        return pulumi.get(self, "stop_time")

    @stop_time.setter
    def stop_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stop_time", value)

    @property
    @pulumi.getter
    def submit(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the task version has been submitted for operation and maintenance.
        """
        return pulumi.get(self, "submit")

    @submit.setter
    def submit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "submit", value)

    @property
    @pulumi.getter(name="switchResource")
    def switch_resource(self) -> Optional[pulumi.Input[int]]:
        """
        Resource tiering status, 0: in progress, 1: successful, 2: failed.
        """
        return pulumi.get(self, "switch_resource")

    @switch_resource.setter
    def switch_resource(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_resource", value)

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> Optional[pulumi.Input[int]]:
        """
        Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        """
        return pulumi.get(self, "sync_type")

    @sync_type.setter
    def sync_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_type", value)

    @property
    @pulumi.getter(name="taskAlarmRegularLists")
    def task_alarm_regular_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Task alarm regular.
        """
        return pulumi.get(self, "task_alarm_regular_lists")

    @task_alarm_regular_lists.setter
    def task_alarm_regular_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "task_alarm_regular_lists", value)

    @property
    @pulumi.getter(name="taskGroupId")
    def task_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Inlong Task Group ID.
        """
        return pulumi.get(self, "task_group_id")

    @task_group_id.setter
    def task_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_group_id", value)

    @property
    @pulumi.getter(name="taskMode")
    def task_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Task display mode, 0: canvas mode, 1: form mode.
        """
        return pulumi.get(self, "task_mode")

    @task_mode.setter
    def task_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_mode", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workflow id to which the task belongs.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoExecuteContextArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoMappingArgs:
    def __init__(__self__, *,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingExtConfigArgs']]]] = None,
                 schema_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSchemaMappingArgs']]]] = None,
                 sink_id: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_schemas: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSchemaMappingArgs']]] schema_mappings: Schema mapping information.
        :param pulumi.Input[str] sink_id: Sink node ID.
        :param pulumi.Input[str] source_id: Source node ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaArgs']]] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSchemaMappingArgs']]]]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @schema_mappings.setter
    def schema_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSchemaMappingArgs']]]]):
        pulumi.set(self, "schema_mappings", value)

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[pulumi.Input[str]]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @sink_id.setter
    def sink_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sink_id", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaArgs']]]]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")

    @source_schemas.setter
    def source_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaArgs']]]]):
        pulumi.set(self, "source_schemas", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoMappingExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoMappingSchemaMappingArgs:
    def __init__(__self__, *,
                 sink_schema_id: pulumi.Input[str],
                 source_schema_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sink_schema_id: Schema ID from sink node.
        :param pulumi.Input[str] source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @sink_schema_id.setter
    def sink_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sink_schema_id", value)

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")

    @source_schema_id.setter
    def source_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_schema_id", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoMappingSourceSchemaArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaPropertyArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Schema ID.
        :param pulumi.Input[str] name: Schema name.
        :param pulumi.Input[str] type: Schema type.
        :param pulumi.Input[str] alias: Schema alias.
        :param pulumi.Input[str] comment: Schema comment.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaPropertyArgs']]] properties: Schema extended attributes.
        :param pulumi.Input[str] value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaPropertyArgs']]]]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationOfflineTaskTaskInfoMappingSourceSchemaPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoMappingSourceSchemaPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Attributes name.
        :param pulumi.Input[str] value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationOfflineTaskTaskInfoOfflineTaskAddEntityArgs:
    def __init__(__self__, *,
                 crontab_expression: Optional[pulumi.Input[str]] = None,
                 cycle_type: Optional[pulumi.Input[int]] = None,
                 execution_end_time: Optional[pulumi.Input[str]] = None,
                 execution_start_time: Optional[pulumi.Input[str]] = None,
                 retriable: Optional[pulumi.Input[int]] = None,
                 retry_wait: Optional[pulumi.Input[int]] = None,
                 self_depend: Optional[pulumi.Input[int]] = None,
                 try_limit: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] crontab_expression: Crontab expression.
        :param pulumi.Input[int] cycle_type: Scheduling type, 0: crontab type, 1: minutes, 2: hours, 3: days, 4: weeks, 5: months, 6: one-time, 7: user-driven, 10: elastic period (week), 11: elastic period (month), 12: year, 13: instant trigger.
        :param pulumi.Input[str] execution_end_time: Scheduling execution end time.
        :param pulumi.Input[str] execution_start_time: Scheduling execution start time.
        :param pulumi.Input[int] retriable: Whether to retry.
        :param pulumi.Input[int] retry_wait: Retry waiting time, unit is minutes.
        :param pulumi.Input[int] self_depend: Self-dependent rules, 1: Ordered serial one at a time, queued execution, 2: Unordered serial one at a time, not queued execution, 3: Parallel, multiple at once.
        :param pulumi.Input[int] try_limit: Number of retries.
        """
        if crontab_expression is not None:
            pulumi.set(__self__, "crontab_expression", crontab_expression)
        if cycle_type is not None:
            pulumi.set(__self__, "cycle_type", cycle_type)
        if execution_end_time is not None:
            pulumi.set(__self__, "execution_end_time", execution_end_time)
        if execution_start_time is not None:
            pulumi.set(__self__, "execution_start_time", execution_start_time)
        if retriable is not None:
            pulumi.set(__self__, "retriable", retriable)
        if retry_wait is not None:
            pulumi.set(__self__, "retry_wait", retry_wait)
        if self_depend is not None:
            pulumi.set(__self__, "self_depend", self_depend)
        if try_limit is not None:
            pulumi.set(__self__, "try_limit", try_limit)

    @property
    @pulumi.getter(name="crontabExpression")
    def crontab_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Crontab expression.
        """
        return pulumi.get(self, "crontab_expression")

    @crontab_expression.setter
    def crontab_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crontab_expression", value)

    @property
    @pulumi.getter(name="cycleType")
    def cycle_type(self) -> Optional[pulumi.Input[int]]:
        """
        Scheduling type, 0: crontab type, 1: minutes, 2: hours, 3: days, 4: weeks, 5: months, 6: one-time, 7: user-driven, 10: elastic period (week), 11: elastic period (month), 12: year, 13: instant trigger.
        """
        return pulumi.get(self, "cycle_type")

    @cycle_type.setter
    def cycle_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cycle_type", value)

    @property
    @pulumi.getter(name="executionEndTime")
    def execution_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduling execution end time.
        """
        return pulumi.get(self, "execution_end_time")

    @execution_end_time.setter
    def execution_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_end_time", value)

    @property
    @pulumi.getter(name="executionStartTime")
    def execution_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduling execution start time.
        """
        return pulumi.get(self, "execution_start_time")

    @execution_start_time.setter
    def execution_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_start_time", value)

    @property
    @pulumi.getter
    def retriable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to retry.
        """
        return pulumi.get(self, "retriable")

    @retriable.setter
    def retriable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retriable", value)

    @property
    @pulumi.getter(name="retryWait")
    def retry_wait(self) -> Optional[pulumi.Input[int]]:
        """
        Retry waiting time, unit is minutes.
        """
        return pulumi.get(self, "retry_wait")

    @retry_wait.setter
    def retry_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_wait", value)

    @property
    @pulumi.getter(name="selfDepend")
    def self_depend(self) -> Optional[pulumi.Input[int]]:
        """
        Self-dependent rules, 1: Ordered serial one at a time, queued execution, 2: Unordered serial one at a time, not queued execution, 3: Parallel, multiple at once.
        """
        return pulumi.get(self, "self_depend")

    @self_depend.setter
    def self_depend(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "self_depend", value)

    @property
    @pulumi.getter(name="tryLimit")
    def try_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries.
        """
        return pulumi.get(self, "try_limit")

    @try_limit.setter
    def try_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "try_limit", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoConfigArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator_uin: Optional[pulumi.Input[str]] = None,
                 data_proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execute_contexts: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExecuteContextArgs']]]] = None,
                 executor_group_name: Optional[pulumi.Input[str]] = None,
                 executor_id: Optional[pulumi.Input[str]] = None,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExtConfigArgs']]]] = None,
                 has_version: Optional[pulumi.Input[bool]] = None,
                 in_long_manager_url: Optional[pulumi.Input[str]] = None,
                 in_long_manager_version: Optional[pulumi.Input[str]] = None,
                 in_long_stream_id: Optional[pulumi.Input[str]] = None,
                 incharge: Optional[pulumi.Input[str]] = None,
                 input_datasource_type: Optional[pulumi.Input[str]] = None,
                 instance_version: Optional[pulumi.Input[int]] = None,
                 last_run_time: Optional[pulumi.Input[str]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 locker: Optional[pulumi.Input[str]] = None,
                 mappings: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingArgs']]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeArgs']]]] = None,
                 num_records_in: Optional[pulumi.Input[int]] = None,
                 num_records_out: Optional[pulumi.Input[int]] = None,
                 num_restarts: Optional[pulumi.Input[int]] = None,
                 operator_uin: Optional[pulumi.Input[str]] = None,
                 output_datasource_type: Optional[pulumi.Input[str]] = None,
                 owner_uin: Optional[pulumi.Input[str]] = None,
                 read_phase: Optional[pulumi.Input[int]] = None,
                 reader_delay: Optional[pulumi.Input[float]] = None,
                 running_cu: Optional[pulumi.Input[float]] = None,
                 schedule_task_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 stop_time: Optional[pulumi.Input[str]] = None,
                 submit: Optional[pulumi.Input[bool]] = None,
                 switch_resource: Optional[pulumi.Input[int]] = None,
                 task_alarm_regular_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 task_group_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] app_id: User App Id.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoConfigArgs']]] configs: Task configuration.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] creator_uin: Creator User ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] data_proxy_urls: Data proxy url.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExecuteContextArgs']]] execute_contexts: Execute context.
        :param pulumi.Input[str] executor_group_name: Executor group name.
        :param pulumi.Input[str] executor_id: Executor resource ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input[bool] has_version: Whether the task been submitted.
        :param pulumi.Input[str] in_long_manager_url: InLong manager url.
        :param pulumi.Input[str] in_long_manager_version: InLong manager version.
        :param pulumi.Input[str] in_long_stream_id: InLong stream id.
        :param pulumi.Input[str] incharge: Incharge user.
        :param pulumi.Input[str] input_datasource_type: Input datasource type.
        :param pulumi.Input[int] instance_version: Instance version.
        :param pulumi.Input[str] last_run_time: The last time the task was run.
        :param pulumi.Input[bool] locked: Whether the task been locked.
        :param pulumi.Input[str] locker: User locked task.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingArgs']]] mappings: Node mapping.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeArgs']]] nodes: Task Node Information.
        :param pulumi.Input[int] num_records_in: Number of reads.
        :param pulumi.Input[int] num_records_out: Number of writes.
        :param pulumi.Input[int] num_restarts: Times of restarts.
        :param pulumi.Input[str] operator_uin: Operator User ID.
        :param pulumi.Input[str] output_datasource_type: Output datasource type.
        :param pulumi.Input[str] owner_uin: Owner User ID.
        :param pulumi.Input[int] read_phase: Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        :param pulumi.Input[float] reader_delay: Read latency.
        :param pulumi.Input[float] running_cu: The amount of resources consumed by real-time task.
        :param pulumi.Input[str] schedule_task_id: Task scheduling id (job id such as oceanus or us).
        :param pulumi.Input[int] status: Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        :param pulumi.Input[str] stop_time: The time the task was stopped.
        :param pulumi.Input[bool] submit: Whether the task version has been submitted for operation and maintenance.
        :param pulumi.Input[int] switch_resource: Resource tiering status, 0: in progress, 1: successful, 2: failed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] task_alarm_regular_lists: Task alarm regular.
        :param pulumi.Input[str] task_group_id: Inlong Task Group ID.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] workflow_id: The workflow id to which the task belongs.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if data_proxy_urls is not None:
            pulumi.set(__self__, "data_proxy_urls", data_proxy_urls)
        if execute_contexts is not None:
            pulumi.set(__self__, "execute_contexts", execute_contexts)
        if executor_group_name is not None:
            pulumi.set(__self__, "executor_group_name", executor_group_name)
        if executor_id is not None:
            pulumi.set(__self__, "executor_id", executor_id)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if has_version is not None:
            pulumi.set(__self__, "has_version", has_version)
        if in_long_manager_url is not None:
            pulumi.set(__self__, "in_long_manager_url", in_long_manager_url)
        if in_long_manager_version is not None:
            pulumi.set(__self__, "in_long_manager_version", in_long_manager_version)
        if in_long_stream_id is not None:
            pulumi.set(__self__, "in_long_stream_id", in_long_stream_id)
        if incharge is not None:
            pulumi.set(__self__, "incharge", incharge)
        if input_datasource_type is not None:
            pulumi.set(__self__, "input_datasource_type", input_datasource_type)
        if instance_version is not None:
            pulumi.set(__self__, "instance_version", instance_version)
        if last_run_time is not None:
            pulumi.set(__self__, "last_run_time", last_run_time)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if locker is not None:
            pulumi.set(__self__, "locker", locker)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if num_records_in is not None:
            pulumi.set(__self__, "num_records_in", num_records_in)
        if num_records_out is not None:
            pulumi.set(__self__, "num_records_out", num_records_out)
        if num_restarts is not None:
            pulumi.set(__self__, "num_restarts", num_restarts)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if output_datasource_type is not None:
            pulumi.set(__self__, "output_datasource_type", output_datasource_type)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if read_phase is not None:
            pulumi.set(__self__, "read_phase", read_phase)
        if reader_delay is not None:
            pulumi.set(__self__, "reader_delay", reader_delay)
        if running_cu is not None:
            pulumi.set(__self__, "running_cu", running_cu)
        if schedule_task_id is not None:
            pulumi.set(__self__, "schedule_task_id", schedule_task_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stop_time is not None:
            pulumi.set(__self__, "stop_time", stop_time)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)
        if switch_resource is not None:
            pulumi.set(__self__, "switch_resource", switch_resource)
        if task_alarm_regular_lists is not None:
            pulumi.set(__self__, "task_alarm_regular_lists", task_alarm_regular_lists)
        if task_group_id is not None:
            pulumi.set(__self__, "task_group_id", task_group_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoConfigArgs']]]]:
        """
        Task configuration.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @creator_uin.setter
    def creator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_uin", value)

    @property
    @pulumi.getter(name="dataProxyUrls")
    def data_proxy_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Data proxy url.
        """
        return pulumi.get(self, "data_proxy_urls")

    @data_proxy_urls.setter
    def data_proxy_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "data_proxy_urls", value)

    @property
    @pulumi.getter(name="executeContexts")
    def execute_contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExecuteContextArgs']]]]:
        """
        Execute context.
        """
        return pulumi.get(self, "execute_contexts")

    @execute_contexts.setter
    def execute_contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExecuteContextArgs']]]]):
        pulumi.set(self, "execute_contexts", value)

    @property
    @pulumi.getter(name="executorGroupName")
    def executor_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Executor group name.
        """
        return pulumi.get(self, "executor_group_name")

    @executor_group_name.setter
    def executor_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_group_name", value)

    @property
    @pulumi.getter(name="executorId")
    def executor_id(self) -> Optional[pulumi.Input[str]]:
        """
        Executor resource ID.
        """
        return pulumi.get(self, "executor_id")

    @executor_id.setter
    def executor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_id", value)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter(name="hasVersion")
    def has_version(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the task been submitted.
        """
        return pulumi.get(self, "has_version")

    @has_version.setter
    def has_version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_version", value)

    @property
    @pulumi.getter(name="inLongManagerUrl")
    def in_long_manager_url(self) -> Optional[pulumi.Input[str]]:
        """
        InLong manager url.
        """
        return pulumi.get(self, "in_long_manager_url")

    @in_long_manager_url.setter
    def in_long_manager_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_long_manager_url", value)

    @property
    @pulumi.getter(name="inLongManagerVersion")
    def in_long_manager_version(self) -> Optional[pulumi.Input[str]]:
        """
        InLong manager version.
        """
        return pulumi.get(self, "in_long_manager_version")

    @in_long_manager_version.setter
    def in_long_manager_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_long_manager_version", value)

    @property
    @pulumi.getter(name="inLongStreamId")
    def in_long_stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        InLong stream id.
        """
        return pulumi.get(self, "in_long_stream_id")

    @in_long_stream_id.setter
    def in_long_stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_long_stream_id", value)

    @property
    @pulumi.getter
    def incharge(self) -> Optional[pulumi.Input[str]]:
        """
        Incharge user.
        """
        return pulumi.get(self, "incharge")

    @incharge.setter
    def incharge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incharge", value)

    @property
    @pulumi.getter(name="inputDatasourceType")
    def input_datasource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Input datasource type.
        """
        return pulumi.get(self, "input_datasource_type")

    @input_datasource_type.setter
    def input_datasource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_datasource_type", value)

    @property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> Optional[pulumi.Input[int]]:
        """
        Instance version.
        """
        return pulumi.get(self, "instance_version")

    @instance_version.setter
    def instance_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_version", value)

    @property
    @pulumi.getter(name="lastRunTime")
    def last_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time the task was run.
        """
        return pulumi.get(self, "last_run_time")

    @last_run_time.setter
    def last_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_run_time", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the task been locked.
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def locker(self) -> Optional[pulumi.Input[str]]:
        """
        User locked task.
        """
        return pulumi.get(self, "locker")

    @locker.setter
    def locker(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locker", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingArgs']]]]:
        """
        Node mapping.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingArgs']]]]):
        pulumi.set(self, "mappings", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeArgs']]]]:
        """
        Task Node Information.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter(name="numRecordsIn")
    def num_records_in(self) -> Optional[pulumi.Input[int]]:
        """
        Number of reads.
        """
        return pulumi.get(self, "num_records_in")

    @num_records_in.setter
    def num_records_in(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_records_in", value)

    @property
    @pulumi.getter(name="numRecordsOut")
    def num_records_out(self) -> Optional[pulumi.Input[int]]:
        """
        Number of writes.
        """
        return pulumi.get(self, "num_records_out")

    @num_records_out.setter
    def num_records_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_records_out", value)

    @property
    @pulumi.getter(name="numRestarts")
    def num_restarts(self) -> Optional[pulumi.Input[int]]:
        """
        Times of restarts.
        """
        return pulumi.get(self, "num_restarts")

    @num_restarts.setter
    def num_restarts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_restarts", value)

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @operator_uin.setter
    def operator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator_uin", value)

    @property
    @pulumi.getter(name="outputDatasourceType")
    def output_datasource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Output datasource type.
        """
        return pulumi.get(self, "output_datasource_type")

    @output_datasource_type.setter
    def output_datasource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_datasource_type", value)

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @owner_uin.setter
    def owner_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_uin", value)

    @property
    @pulumi.getter(name="readPhase")
    def read_phase(self) -> Optional[pulumi.Input[int]]:
        """
        Reading stage, 0: full amount, 1: partial full amount, 2: all incremental.
        """
        return pulumi.get(self, "read_phase")

    @read_phase.setter
    def read_phase(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_phase", value)

    @property
    @pulumi.getter(name="readerDelay")
    def reader_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Read latency.
        """
        return pulumi.get(self, "reader_delay")

    @reader_delay.setter
    def reader_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "reader_delay", value)

    @property
    @pulumi.getter(name="runningCu")
    def running_cu(self) -> Optional[pulumi.Input[float]]:
        """
        The amount of resources consumed by real-time task.
        """
        return pulumi.get(self, "running_cu")

    @running_cu.setter
    def running_cu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "running_cu", value)

    @property
    @pulumi.getter(name="scheduleTaskId")
    def schedule_task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Task scheduling id (job id such as oceanus or us).
        """
        return pulumi.get(self, "schedule_task_id")

    @schedule_task_id.setter
    def schedule_task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_task_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Task status 1. Not started | Task initialization, 2. Task starting, 3. Running, 4. Paused, 5. Task stopping, 6. Stopped, 7. Execution failed, 8. deleted, 9. Locked, 404. unknown status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="stopTime")
    def stop_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time the task was stopped.
        """
        return pulumi.get(self, "stop_time")

    @stop_time.setter
    def stop_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stop_time", value)

    @property
    @pulumi.getter
    def submit(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the task version has been submitted for operation and maintenance.
        """
        return pulumi.get(self, "submit")

    @submit.setter
    def submit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "submit", value)

    @property
    @pulumi.getter(name="switchResource")
    def switch_resource(self) -> Optional[pulumi.Input[int]]:
        """
        Resource tiering status, 0: in progress, 1: successful, 2: failed.
        """
        return pulumi.get(self, "switch_resource")

    @switch_resource.setter
    def switch_resource(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_resource", value)

    @property
    @pulumi.getter(name="taskAlarmRegularLists")
    def task_alarm_regular_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Task alarm regular.
        """
        return pulumi.get(self, "task_alarm_regular_lists")

    @task_alarm_regular_lists.setter
    def task_alarm_regular_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "task_alarm_regular_lists", value)

    @property
    @pulumi.getter(name="taskGroupId")
    def task_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Inlong Task Group ID.
        """
        return pulumi.get(self, "task_group_id")

    @task_group_id.setter
    def task_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_group_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workflow id to which the task belongs.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoExecuteContextArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoMappingArgs:
    def __init__(__self__, *,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingExtConfigArgs']]]] = None,
                 schema_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSchemaMappingArgs']]]] = None,
                 sink_id: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_schemas: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSchemaMappingArgs']]] schema_mappings: Schema mapping information.
        :param pulumi.Input[str] sink_id: Sink node ID.
        :param pulumi.Input[str] source_id: Source node ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaArgs']]] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSchemaMappingArgs']]]]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @schema_mappings.setter
    def schema_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSchemaMappingArgs']]]]):
        pulumi.set(self, "schema_mappings", value)

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[pulumi.Input[str]]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @sink_id.setter
    def sink_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sink_id", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaArgs']]]]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")

    @source_schemas.setter
    def source_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaArgs']]]]):
        pulumi.set(self, "source_schemas", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoMappingExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoMappingSchemaMappingArgs:
    def __init__(__self__, *,
                 sink_schema_id: pulumi.Input[str],
                 source_schema_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sink_schema_id: Schema ID from sink node.
        :param pulumi.Input[str] source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @sink_schema_id.setter
    def sink_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sink_schema_id", value)

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")

    @source_schema_id.setter
    def source_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_schema_id", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoMappingSourceSchemaArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaPropertyArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Schema ID.
        :param pulumi.Input[str] name: Schema name.
        :param pulumi.Input[str] type: Schema type.
        :param pulumi.Input[str] alias: Schema alias.
        :param pulumi.Input[str] comment: Schema comment.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaPropertyArgs']]] properties: Schema extended attributes.
        :param pulumi.Input[str] value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaPropertyArgs']]]]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoMappingSourceSchemaPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoMappingSourceSchemaPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Attributes name.
        :param pulumi.Input[str] value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeConfigArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator_uin: Optional[pulumi.Input[str]] = None,
                 data_source_type: Optional[pulumi.Input[str]] = None,
                 datasource_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeExtConfigArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_mapping: Optional[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingArgs']] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 operator_uin: Optional[pulumi.Input[str]] = None,
                 owner_uin: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaArgs']]]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] app_id: User App Id.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeConfigArgs']]] configs: Node configuration information.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] creator_uin: Creator User ID.
        :param pulumi.Input[str] data_source_type: Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
        :param pulumi.Input[str] datasource_id: Datasource ID.
        :param pulumi.Input[str] description: Node Description.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input[str] id: Node ID.
        :param pulumi.Input[str] name: Node Name.
        :param pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingArgs'] node_mapping: Node mapping.
        :param pulumi.Input[str] node_type: Node type: INPUT,OUTPUT,JOIN,FILTER,TRANSFORM.
        :param pulumi.Input[str] operator_uin: Operator User ID.
        :param pulumi.Input[str] owner_uin: Owner User ID.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaArgs']]] schemas: Schema information.
        :param pulumi.Input[str] task_id: The task id to which the node belongs.
        :param pulumi.Input[str] update_time: Update time.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if data_source_type is not None:
            pulumi.set(__self__, "data_source_type", data_source_type)
        if datasource_id is not None:
            pulumi.set(__self__, "datasource_id", datasource_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_mapping is not None:
            pulumi.set(__self__, "node_mapping", node_mapping)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeConfigArgs']]]]:
        """
        Node configuration information.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @creator_uin.setter
    def creator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_uin", value)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> Optional[pulumi.Input[str]]:
        """
        Data source type: MYSQL, POSTGRE, ORACLE, SQLSERVER, FTP, HIVE, HDFS, ICEBERG, KAFKA, HBASE, SPARK, TBASE, DB2, DM, GAUSSDB, GBASE, IMPALA, ES, S3_DATAINSIGHT, GREENPLUM, PHOENIX, SAP_HANA, SFTP, OCEANBASE, CLICKHOUSE, KUDU, VERTICA, REDIS, COS, DLC, DORIS, CKAFKA, DTS_KAFKA, S3, CDW, TDSQLC, TDSQL, MONGODB, SYBASE, REST_API, StarRocks, TCHOUSE_X.
        """
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source_type", value)

    @property
    @pulumi.getter(name="datasourceId")
    def datasource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Datasource ID.
        """
        return pulumi.get(self, "datasource_id")

    @datasource_id.setter
    def datasource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datasource_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Node Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Node ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Node Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeMapping")
    def node_mapping(self) -> Optional[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingArgs']]:
        """
        Node mapping.
        """
        return pulumi.get(self, "node_mapping")

    @node_mapping.setter
    def node_mapping(self, value: Optional[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingArgs']]):
        pulumi.set(self, "node_mapping", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        Node type: INPUT,OUTPUT,JOIN,FILTER,TRANSFORM.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @operator_uin.setter
    def operator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator_uin", value)

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @owner_uin.setter
    def owner_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_uin", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaArgs']]]]:
        """
        Schema information.
        """
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaArgs']]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        The task id to which the node belongs.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingArgs:
    def __init__(__self__, *,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfigArgs']]]] = None,
                 schema_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMappingArgs']]]] = None,
                 sink_id: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_schemas: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMappingArgs']]] schema_mappings: Schema mapping information.
        :param pulumi.Input[str] sink_id: Sink node ID.
        :param pulumi.Input[str] source_id: Source node ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaArgs']]] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMappingArgs']]]]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @schema_mappings.setter
    def schema_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMappingArgs']]]]):
        pulumi.set(self, "schema_mappings", value)

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[pulumi.Input[str]]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @sink_id.setter
    def sink_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sink_id", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaArgs']]]]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")

    @source_schemas.setter
    def source_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaArgs']]]]):
        pulumi.set(self, "source_schemas", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingSchemaMappingArgs:
    def __init__(__self__, *,
                 sink_schema_id: pulumi.Input[str],
                 source_schema_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sink_schema_id: Schema ID from sink node.
        :param pulumi.Input[str] source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @sink_schema_id.setter
    def sink_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sink_schema_id", value)

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")

    @source_schema_id.setter
    def source_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_schema_id", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaPropertyArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Schema ID.
        :param pulumi.Input[str] name: Schema name.
        :param pulumi.Input[str] type: Schema type.
        :param pulumi.Input[str] alias: Schema alias.
        :param pulumi.Input[str] comment: Schema comment.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaPropertyArgs']]] properties: Schema extended attributes.
        :param pulumi.Input[str] value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaPropertyArgs']]]]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeNodeMappingSourceSchemaPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Attributes name.
        :param pulumi.Input[str] value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeSchemaArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaPropertyArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Schema ID.
        :param pulumi.Input[str] name: Schema name.
        :param pulumi.Input[str] type: Schema type.
        :param pulumi.Input[str] alias: Schema alias.
        :param pulumi.Input[str] comment: Schema comment.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaPropertyArgs']]] properties: Schema extended attributes.
        :param pulumi.Input[str] value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaPropertyArgs']]]]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationRealtimeTaskTaskInfoNodeSchemaPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationRealtimeTaskTaskInfoNodeSchemaPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Attributes name.
        :param pulumi.Input[str] value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoArgs:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoConfigArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator_uin: Optional[pulumi.Input[str]] = None,
                 datasource_id: Optional[pulumi.Input[str]] = None,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoExtConfigArgs']]]] = None,
                 node_mapping: Optional[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingArgs']] = None,
                 operator_uin: Optional[pulumi.Input[str]] = None,
                 owner_uin: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaArgs']]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] app_id: User App Id.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoConfigArgs']]] configs: Node configuration information.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] creator_uin: Creator User ID.
        :param pulumi.Input[str] datasource_id: Datasource ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingArgs'] node_mapping: Node mapping.
        :param pulumi.Input[str] operator_uin: Operator User ID.
        :param pulumi.Input[str] owner_uin: Owner User ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaArgs']]] schemas: Schema information.
        :param pulumi.Input[str] update_time: Update time.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if datasource_id is not None:
            pulumi.set(__self__, "datasource_id", datasource_id)
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if node_mapping is not None:
            pulumi.set(__self__, "node_mapping", node_mapping)
        if operator_uin is not None:
            pulumi.set(__self__, "operator_uin", operator_uin)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        User App Id.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoConfigArgs']]]]:
        """
        Node configuration information.
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoConfigArgs']]]]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Creator User ID.
        """
        return pulumi.get(self, "creator_uin")

    @creator_uin.setter
    def creator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_uin", value)

    @property
    @pulumi.getter(name="datasourceId")
    def datasource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Datasource ID.
        """
        return pulumi.get(self, "datasource_id")

    @datasource_id.setter
    def datasource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datasource_id", value)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter(name="nodeMapping")
    def node_mapping(self) -> Optional[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingArgs']]:
        """
        Node mapping.
        """
        return pulumi.get(self, "node_mapping")

    @node_mapping.setter
    def node_mapping(self, value: Optional[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingArgs']]):
        pulumi.set(self, "node_mapping", value)

    @property
    @pulumi.getter(name="operatorUin")
    def operator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Operator User ID.
        """
        return pulumi.get(self, "operator_uin")

    @operator_uin.setter
    def operator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator_uin", value)

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Owner User ID.
        """
        return pulumi.get(self, "owner_uin")

    @owner_uin.setter
    def owner_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_uin", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaArgs']]]]:
        """
        Schema information.
        """
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaArgs']]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoNodeMappingArgs:
    def __init__(__self__, *,
                 ext_configs: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingExtConfigArgs']]]] = None,
                 schema_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSchemaMappingArgs']]]] = None,
                 sink_id: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_schemas: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingExtConfigArgs']]] ext_configs: Node extension configuration information.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSchemaMappingArgs']]] schema_mappings: Schema mapping information.
        :param pulumi.Input[str] sink_id: Sink node ID.
        :param pulumi.Input[str] source_id: Source node ID.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaArgs']]] source_schemas: Source node schema information.
        """
        if ext_configs is not None:
            pulumi.set(__self__, "ext_configs", ext_configs)
        if schema_mappings is not None:
            pulumi.set(__self__, "schema_mappings", schema_mappings)
        if sink_id is not None:
            pulumi.set(__self__, "sink_id", sink_id)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_schemas is not None:
            pulumi.set(__self__, "source_schemas", source_schemas)

    @property
    @pulumi.getter(name="extConfigs")
    def ext_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingExtConfigArgs']]]]:
        """
        Node extension configuration information.
        """
        return pulumi.get(self, "ext_configs")

    @ext_configs.setter
    def ext_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingExtConfigArgs']]]]):
        pulumi.set(self, "ext_configs", value)

    @property
    @pulumi.getter(name="schemaMappings")
    def schema_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSchemaMappingArgs']]]]:
        """
        Schema mapping information.
        """
        return pulumi.get(self, "schema_mappings")

    @schema_mappings.setter
    def schema_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSchemaMappingArgs']]]]):
        pulumi.set(self, "schema_mappings", value)

    @property
    @pulumi.getter(name="sinkId")
    def sink_id(self) -> Optional[pulumi.Input[str]]:
        """
        Sink node ID.
        """
        return pulumi.get(self, "sink_id")

    @sink_id.setter
    def sink_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sink_id", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        Source node ID.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceSchemas")
    def source_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaArgs']]]]:
        """
        Source node schema information.
        """
        return pulumi.get(self, "source_schemas")

    @source_schemas.setter
    def source_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaArgs']]]]):
        pulumi.set(self, "source_schemas", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoNodeMappingExtConfigArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Configuration name.
        :param pulumi.Input[str] value: Configuration value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoNodeMappingSchemaMappingArgs:
    def __init__(__self__, *,
                 sink_schema_id: pulumi.Input[str],
                 source_schema_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sink_schema_id: Schema ID from sink node.
        :param pulumi.Input[str] source_schema_id: Schema ID from source node.
        """
        pulumi.set(__self__, "sink_schema_id", sink_schema_id)
        pulumi.set(__self__, "source_schema_id", source_schema_id)

    @property
    @pulumi.getter(name="sinkSchemaId")
    def sink_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from sink node.
        """
        return pulumi.get(self, "sink_schema_id")

    @sink_schema_id.setter
    def sink_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sink_schema_id", value)

    @property
    @pulumi.getter(name="sourceSchemaId")
    def source_schema_id(self) -> pulumi.Input[str]:
        """
        Schema ID from source node.
        """
        return pulumi.get(self, "source_schema_id")

    @source_schema_id.setter
    def source_schema_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_schema_id", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaPropertyArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Schema ID.
        :param pulumi.Input[str] name: Schema name.
        :param pulumi.Input[str] type: Schema type.
        :param pulumi.Input[str] alias: Schema alias.
        :param pulumi.Input[str] comment: Schema comment.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaPropertyArgs']]] properties: Schema extended attributes.
        :param pulumi.Input[str] value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaPropertyArgs']]]]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoNodeMappingSourceSchemaPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Attributes name.
        :param pulumi.Input[str] value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoSchemaArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaPropertyArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Schema ID.
        :param pulumi.Input[str] name: Schema name.
        :param pulumi.Input[str] type: Schema type.
        :param pulumi.Input[str] alias: Schema alias.
        :param pulumi.Input[str] comment: Schema comment.
        :param pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaPropertyArgs']]] properties: Schema extended attributes.
        :param pulumi.Input[str] value: Schema value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Schema ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Schema name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Schema type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Schema alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Schema comment.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaPropertyArgs']]]]:
        """
        Schema extended attributes.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IntegrationTaskNodeNodeInfoSchemaPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Schema value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class IntegrationTaskNodeNodeInfoSchemaPropertyArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Attributes name.
        :param pulumi.Input[str] value: Attributes value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Attributes value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetDataSourceListFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Filter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDataSourceListOrderFieldArgs:
    def __init__(__self__, *,
                 direction: str,
                 name: str):
        """
        :param str direction: OrderFields rule.
        :param str name: OrderFields name.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        OrderFields rule.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: str):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        OrderFields name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetDataSourceWithoutInfoFilterArgs:
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter name.
        :param Sequence[str] values: Filter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Filter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDataSourceWithoutInfoOrderFieldArgs:
    def __init__(__self__, *,
                 direction: str,
                 name: str):
        """
        :param str direction: OrderFields rule.
        :param str name: OrderFields name.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def direction(self) -> str:
        """
        OrderFields rule.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: str):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        OrderFields name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)


