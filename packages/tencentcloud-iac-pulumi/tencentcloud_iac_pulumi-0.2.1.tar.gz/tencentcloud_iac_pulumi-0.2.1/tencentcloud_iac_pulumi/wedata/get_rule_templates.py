# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRuleTemplatesResult',
    'AwaitableGetRuleTemplatesResult',
    'get_rule_templates',
    'get_rule_templates_output',
]

@pulumi.output_type
class GetRuleTemplatesResult:
    """
    A collection of values returned by getRuleTemplates.
    """
    def __init__(__self__, datas=None, id=None, project_id=None, result_output_file=None, source_engine_types=None, source_object_type=None, type=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if source_engine_types and not isinstance(source_engine_types, list):
            raise TypeError("Expected argument 'source_engine_types' to be a list")
        pulumi.set(__self__, "source_engine_types", source_engine_types)
        if source_object_type and not isinstance(source_object_type, int):
            raise TypeError("Expected argument 'source_object_type' to be a int")
        pulumi.set(__self__, "source_object_type", source_object_type)
        if type and not isinstance(type, int):
            raise TypeError("Expected argument 'type' to be a int")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetRuleTemplatesDataResult']:
        """
        rule template list.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sourceEngineTypes")
    def source_engine_types(self) -> Optional[Sequence[int]]:
        """
        Applicable type of source data.
        """
        return pulumi.get(self, "source_engine_types")

    @property
    @pulumi.getter(name="sourceObjectType")
    def source_object_type(self) -> Optional[int]:
        """
        Source object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
        """
        return pulumi.get(self, "source_object_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[int]:
        """
        Template type. `1` means System template, `2` means Custom template.
        """
        return pulumi.get(self, "type")


class AwaitableGetRuleTemplatesResult(GetRuleTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuleTemplatesResult(
            datas=self.datas,
            id=self.id,
            project_id=self.project_id,
            result_output_file=self.result_output_file,
            source_engine_types=self.source_engine_types,
            source_object_type=self.source_object_type,
            type=self.type)


def get_rule_templates(project_id: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       source_engine_types: Optional[Sequence[int]] = None,
                       source_object_type: Optional[int] = None,
                       type: Optional[int] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRuleTemplatesResult:
    """
    Use this data source to query detailed information of wedata rule templates

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    rule_templates = tencentcloud.Wedata.get_rule_templates(project_id="1840731346428280832",
        source_engine_types=[
            2,
            4,
            16,
        ],
        source_object_type=2,
        type=2)
    ```
    <!--End PulumiCodeChooser -->


    :param str project_id: Project ID.
    :param str result_output_file: Used to save results.
    :param Sequence[int] source_engine_types: Applicable type of source data.
    :param int source_object_type: Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
    :param int type: Template type. `1` means System template, `2` means Custom template.
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['sourceEngineTypes'] = source_engine_types
    __args__['sourceObjectType'] = source_object_type
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Wedata/getRuleTemplates:getRuleTemplates', __args__, opts=opts, typ=GetRuleTemplatesResult).value

    return AwaitableGetRuleTemplatesResult(
        datas=pulumi.get(__ret__, 'datas'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        source_engine_types=pulumi.get(__ret__, 'source_engine_types'),
        source_object_type=pulumi.get(__ret__, 'source_object_type'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_rule_templates)
def get_rule_templates_output(project_id: Optional[pulumi.Input[Optional[str]]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              source_engine_types: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                              source_object_type: Optional[pulumi.Input[Optional[int]]] = None,
                              type: Optional[pulumi.Input[Optional[int]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRuleTemplatesResult]:
    """
    Use this data source to query detailed information of wedata rule templates

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    rule_templates = tencentcloud.Wedata.get_rule_templates(project_id="1840731346428280832",
        source_engine_types=[
            2,
            4,
            16,
        ],
        source_object_type=2,
        type=2)
    ```
    <!--End PulumiCodeChooser -->


    :param str project_id: Project ID.
    :param str result_output_file: Used to save results.
    :param Sequence[int] source_engine_types: Applicable type of source data.
    :param int source_object_type: Source data object type. `1`: Constant, `2`: Offline table level, `3`: Offline field level.
    :param int type: Template type. `1` means System template, `2` means Custom template.
    """
    ...
