# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IntegrationRealtimeTaskArgs', 'IntegrationRealtimeTask']

@pulumi.input_type
class IntegrationRealtimeTaskArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 sync_type: pulumi.Input[int],
                 task_info: pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs'],
                 task_mode: pulumi.Input[str],
                 task_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IntegrationRealtimeTask resource.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[int] sync_type: Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        :param pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs'] task_info: Task Information.
        :param pulumi.Input[str] task_mode: Task display mode, 0: canvas mode, 1: form mode.
        :param pulumi.Input[str] task_name: Task name.
        :param pulumi.Input[str] description: Description information.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "sync_type", sync_type)
        pulumi.set(__self__, "task_info", task_info)
        pulumi.set(__self__, "task_mode", task_mode)
        pulumi.set(__self__, "task_name", task_name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> pulumi.Input[int]:
        """
        Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        """
        return pulumi.get(self, "sync_type")

    @sync_type.setter
    def sync_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "sync_type", value)

    @property
    @pulumi.getter(name="taskInfo")
    def task_info(self) -> pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs']:
        """
        Task Information.
        """
        return pulumi.get(self, "task_info")

    @task_info.setter
    def task_info(self, value: pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs']):
        pulumi.set(self, "task_info", value)

    @property
    @pulumi.getter(name="taskMode")
    def task_mode(self) -> pulumi.Input[str]:
        """
        Task display mode, 0: canvas mode, 1: form mode.
        """
        return pulumi.get(self, "task_mode")

    @task_mode.setter
    def task_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_mode", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[str]:
        """
        Task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _IntegrationRealtimeTaskState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 sync_type: Optional[pulumi.Input[int]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 task_info: Optional[pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs']] = None,
                 task_mode: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IntegrationRealtimeTask resources.
        :param pulumi.Input[str] description: Description information.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[int] sync_type: Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        :param pulumi.Input[str] task_id: The task id to which the node belongs.
        :param pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs'] task_info: Task Information.
        :param pulumi.Input[str] task_mode: Task display mode, 0: canvas mode, 1: form mode.
        :param pulumi.Input[str] task_name: Task name.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if sync_type is not None:
            pulumi.set(__self__, "sync_type", sync_type)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_info is not None:
            pulumi.set(__self__, "task_info", task_info)
        if task_mode is not None:
            pulumi.set(__self__, "task_mode", task_mode)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description information.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> Optional[pulumi.Input[int]]:
        """
        Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        """
        return pulumi.get(self, "sync_type")

    @sync_type.setter
    def sync_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_type", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        The task id to which the node belongs.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="taskInfo")
    def task_info(self) -> Optional[pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs']]:
        """
        Task Information.
        """
        return pulumi.get(self, "task_info")

    @task_info.setter
    def task_info(self, value: Optional[pulumi.Input['IntegrationRealtimeTaskTaskInfoArgs']]):
        pulumi.set(self, "task_info", value)

    @property
    @pulumi.getter(name="taskMode")
    def task_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Task display mode, 0: canvas mode, 1: form mode.
        """
        return pulumi.get(self, "task_mode")

    @task_mode.setter
    def task_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_mode", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        Task name.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)


class IntegrationRealtimeTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 sync_type: Optional[pulumi.Input[int]] = None,
                 task_info: Optional[pulumi.Input[pulumi.InputType['IntegrationRealtimeTaskTaskInfoArgs']]] = None,
                 task_mode: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a wedata integration_realtime_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.IntegrationRealtimeTask("example",
            description="description.",
            project_id="1612982498218618880",
            sync_type=1,
            task_info=tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoArgs(
                configs=[
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="concurrency",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="TaskManager",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="JobManager",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="TolerateDirtyData",
                        value="0",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="CheckpointingInterval",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="CheckpointingIntervalUnit",
                        value="min",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="RestartStrategyFixedDelayAttempts",
                        value="-1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="ResourceAllocationType",
                        value="0",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="TaskAlarmRegularList",
                        value="35",
                    ),
                ],
                executor_id="20230313175748567418",
                incharge="100028439226",
            ),
            task_mode="1",
            task_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        wedata integration_realtime_task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask example 1776563389209296896#h9d39630a-ae45-4460-90b2-0b093cbfef5d
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description information.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[int] sync_type: Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        :param pulumi.Input[pulumi.InputType['IntegrationRealtimeTaskTaskInfoArgs']] task_info: Task Information.
        :param pulumi.Input[str] task_mode: Task display mode, 0: canvas mode, 1: form mode.
        :param pulumi.Input[str] task_name: Task name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IntegrationRealtimeTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a wedata integration_realtime_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.IntegrationRealtimeTask("example",
            description="description.",
            project_id="1612982498218618880",
            sync_type=1,
            task_info=tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoArgs(
                configs=[
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="concurrency",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="TaskManager",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="JobManager",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="TolerateDirtyData",
                        value="0",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="CheckpointingInterval",
                        value="1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="CheckpointingIntervalUnit",
                        value="min",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="RestartStrategyFixedDelayAttempts",
                        value="-1",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="ResourceAllocationType",
                        value="0",
                    ),
                    tencentcloud.wedata.IntegrationRealtimeTaskTaskInfoConfigArgs(
                        name="TaskAlarmRegularList",
                        value="35",
                    ),
                ],
                executor_id="20230313175748567418",
                incharge="100028439226",
            ),
            task_mode="1",
            task_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        wedata integration_realtime_task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask example 1776563389209296896#h9d39630a-ae45-4460-90b2-0b093cbfef5d
        ```

        :param str resource_name: The name of the resource.
        :param IntegrationRealtimeTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IntegrationRealtimeTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 sync_type: Optional[pulumi.Input[int]] = None,
                 task_info: Optional[pulumi.Input[pulumi.InputType['IntegrationRealtimeTaskTaskInfoArgs']]] = None,
                 task_mode: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IntegrationRealtimeTaskArgs.__new__(IntegrationRealtimeTaskArgs)

            __props__.__dict__["description"] = description
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if sync_type is None and not opts.urn:
                raise TypeError("Missing required property 'sync_type'")
            __props__.__dict__["sync_type"] = sync_type
            if task_info is None and not opts.urn:
                raise TypeError("Missing required property 'task_info'")
            __props__.__dict__["task_info"] = task_info
            if task_mode is None and not opts.urn:
                raise TypeError("Missing required property 'task_mode'")
            __props__.__dict__["task_mode"] = task_mode
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            __props__.__dict__["task_id"] = None
        super(IntegrationRealtimeTask, __self__).__init__(
            'tencentcloud:Wedata/integrationRealtimeTask:IntegrationRealtimeTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            sync_type: Optional[pulumi.Input[int]] = None,
            task_id: Optional[pulumi.Input[str]] = None,
            task_info: Optional[pulumi.Input[pulumi.InputType['IntegrationRealtimeTaskTaskInfoArgs']]] = None,
            task_mode: Optional[pulumi.Input[str]] = None,
            task_name: Optional[pulumi.Input[str]] = None) -> 'IntegrationRealtimeTask':
        """
        Get an existing IntegrationRealtimeTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description information.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[int] sync_type: Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        :param pulumi.Input[str] task_id: The task id to which the node belongs.
        :param pulumi.Input[pulumi.InputType['IntegrationRealtimeTaskTaskInfoArgs']] task_info: Task Information.
        :param pulumi.Input[str] task_mode: Task display mode, 0: canvas mode, 1: form mode.
        :param pulumi.Input[str] task_name: Task name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IntegrationRealtimeTaskState.__new__(_IntegrationRealtimeTaskState)

        __props__.__dict__["description"] = description
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["sync_type"] = sync_type
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["task_info"] = task_info
        __props__.__dict__["task_mode"] = task_mode
        __props__.__dict__["task_name"] = task_name
        return IntegrationRealtimeTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description information.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> pulumi.Output[int]:
        """
        Synchronization type: 1. Whole database synchronization, 2. Single table synchronization.
        """
        return pulumi.get(self, "sync_type")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[str]:
        """
        The task id to which the node belongs.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskInfo")
    def task_info(self) -> pulumi.Output['outputs.IntegrationRealtimeTaskTaskInfo']:
        """
        Task Information.
        """
        return pulumi.get(self, "task_info")

    @property
    @pulumi.getter(name="taskMode")
    def task_mode(self) -> pulumi.Output[str]:
        """
        Task display mode, 0: canvas mode, 1: form mode.
        """
        return pulumi.get(self, "task_mode")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[str]:
        """
        Task name.
        """
        return pulumi.get(self, "task_name")

