# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ResourceArgs', 'Resource']

@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 cos_bucket_name: pulumi.Input[str],
                 cos_region: pulumi.Input[str],
                 file_name: pulumi.Input[str],
                 file_path: pulumi.Input[str],
                 files_size: pulumi.Input[str],
                 project_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a Resource resource.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name.
        :param pulumi.Input[str] cos_region: Cos bucket region.
        :param pulumi.Input[str] file_name: File name.
        :param pulumi.Input[str] file_path: For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
        :param pulumi.Input[str] files_size: File size.
        :param pulumi.Input[str] project_id: Project ID.
        """
        pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        pulumi.set(__self__, "cos_region", cos_region)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "files_size", files_size)
        pulumi.set(__self__, "project_id", project_id)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> pulumi.Input[str]:
        """
        Cos bucket name.
        """
        return pulumi.get(self, "cos_bucket_name")

    @cos_bucket_name.setter
    def cos_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cos_bucket_name", value)

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> pulumi.Input[str]:
        """
        Cos bucket region.
        """
        return pulumi.get(self, "cos_region")

    @cos_region.setter
    def cos_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "cos_region", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[str]:
        """
        File name.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Input[str]:
        """
        For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="filesSize")
    def files_size(self) -> pulumi.Input[str]:
        """
        File size.
        """
        return pulumi.get(self, "files_size")

    @files_size.setter
    def files_size(self, value: pulumi.Input[str]):
        pulumi.set(self, "files_size", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)


@pulumi.input_type
class _ResourceState:
    def __init__(__self__, *,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 cos_region: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 files_size: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Resource resources.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name.
        :param pulumi.Input[str] cos_region: Cos bucket region.
        :param pulumi.Input[str] file_name: File name.
        :param pulumi.Input[str] file_path: For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
        :param pulumi.Input[str] files_size: File size.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] resource_id: Resource ID.
        """
        if cos_bucket_name is not None:
            pulumi.set(__self__, "cos_bucket_name", cos_bucket_name)
        if cos_region is not None:
            pulumi.set(__self__, "cos_region", cos_region)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if files_size is not None:
            pulumi.set(__self__, "files_size", files_size)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cos bucket name.
        """
        return pulumi.get(self, "cos_bucket_name")

    @cos_bucket_name.setter
    def cos_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket_name", value)

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> Optional[pulumi.Input[str]]:
        """
        Cos bucket region.
        """
        return pulumi.get(self, "cos_region")

    @cos_region.setter
    def cos_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_region", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="filesSize")
    def files_size(self) -> Optional[pulumi.Input[str]]:
        """
        File size.
        """
        return pulumi.get(self, "files_size")

    @files_size.setter
    def files_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "files_size", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)


class Resource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 cos_region: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 files_size: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a wedata resource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.Resource("example",
            cos_bucket_name="wedata-demo-1314991481",
            cos_region="ap-guangzhou",
            file_name="tf_example",
            file_path="/datastudio/resource/demo",
            files_size="8165",
            project_id="1612982498218618880")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        wedata resource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Wedata/resource:Resource example 1612982498218618880#/datastudio/resource/demo#75431931-7d27-4034-b3de-3dc3348a220e
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name.
        :param pulumi.Input[str] cos_region: Cos bucket region.
        :param pulumi.Input[str] file_name: File name.
        :param pulumi.Input[str] file_path: For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
        :param pulumi.Input[str] files_size: File size.
        :param pulumi.Input[str] project_id: Project ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a wedata resource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.wedata.Resource("example",
            cos_bucket_name="wedata-demo-1314991481",
            cos_region="ap-guangzhou",
            file_name="tf_example",
            file_path="/datastudio/resource/demo",
            files_size="8165",
            project_id="1612982498218618880")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        wedata resource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Wedata/resource:Resource example 1612982498218618880#/datastudio/resource/demo#75431931-7d27-4034-b3de-3dc3348a220e
        ```

        :param str resource_name: The name of the resource.
        :param ResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cos_bucket_name: Optional[pulumi.Input[str]] = None,
                 cos_region: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 files_size: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceArgs.__new__(ResourceArgs)

            if cos_bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'cos_bucket_name'")
            __props__.__dict__["cos_bucket_name"] = cos_bucket_name
            if cos_region is None and not opts.urn:
                raise TypeError("Missing required property 'cos_region'")
            __props__.__dict__["cos_region"] = cos_region
            if file_name is None and not opts.urn:
                raise TypeError("Missing required property 'file_name'")
            __props__.__dict__["file_name"] = file_name
            if file_path is None and not opts.urn:
                raise TypeError("Missing required property 'file_path'")
            __props__.__dict__["file_path"] = file_path
            if files_size is None and not opts.urn:
                raise TypeError("Missing required property 'files_size'")
            __props__.__dict__["files_size"] = files_size
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["resource_id"] = None
        super(Resource, __self__).__init__(
            'tencentcloud:Wedata/resource:Resource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cos_bucket_name: Optional[pulumi.Input[str]] = None,
            cos_region: Optional[pulumi.Input[str]] = None,
            file_name: Optional[pulumi.Input[str]] = None,
            file_path: Optional[pulumi.Input[str]] = None,
            files_size: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None) -> 'Resource':
        """
        Get an existing Resource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cos_bucket_name: Cos bucket name.
        :param pulumi.Input[str] cos_region: Cos bucket region.
        :param pulumi.Input[str] file_name: File name.
        :param pulumi.Input[str] file_path: For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
        :param pulumi.Input[str] files_size: File size.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] resource_id: Resource ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceState.__new__(_ResourceState)

        __props__.__dict__["cos_bucket_name"] = cos_bucket_name
        __props__.__dict__["cos_region"] = cos_region
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["file_path"] = file_path
        __props__.__dict__["files_size"] = files_size
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["resource_id"] = resource_id
        return Resource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cosBucketName")
    def cos_bucket_name(self) -> pulumi.Output[str]:
        """
        Cos bucket name.
        """
        return pulumi.get(self, "cos_bucket_name")

    @property
    @pulumi.getter(name="cosRegion")
    def cos_region(self) -> pulumi.Output[str]:
        """
        Cos bucket region.
        """
        return pulumi.get(self, "cos_region")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[str]:
        """
        File name.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Output[str]:
        """
        For file path:/datastudio/resource/projectId/folderName; for folder path:/datastudio/resource/folderName.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="filesSize")
    def files_size(self) -> pulumi.Output[str]:
        """
        File size.
        """
        return pulumi.get(self, "files_size")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "resource_id")

