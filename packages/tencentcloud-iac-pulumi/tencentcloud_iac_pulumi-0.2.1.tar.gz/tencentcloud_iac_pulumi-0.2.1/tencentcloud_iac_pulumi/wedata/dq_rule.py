# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DqRuleArgs', 'DqRule']

@pulumi.input_type
class DqRuleArgs:
    def __init__(__self__, *,
                 alarm_level: pulumi.Input[int],
                 compare_rule: pulumi.Input['DqRuleCompareRuleArgs'],
                 condition_type: pulumi.Input[int],
                 project_id: pulumi.Input[str],
                 rule_template_id: pulumi.Input[int],
                 source_object_data_type_name: pulumi.Input[str],
                 source_object_value: pulumi.Input[str],
                 type: pulumi.Input[int],
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 custom_sql: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 field_config: Optional[pulumi.Input['DqRuleFieldConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 quality_dim: Optional[pulumi.Input[int]] = None,
                 rel_condition_expr: Optional[pulumi.Input[str]] = None,
                 rule_group_id: Optional[pulumi.Input[int]] = None,
                 source_engine_types: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 table_id: Optional[pulumi.Input[str]] = None,
                 target_condition_expr: Optional[pulumi.Input[str]] = None,
                 target_database_id: Optional[pulumi.Input[str]] = None,
                 target_object_value: Optional[pulumi.Input[str]] = None,
                 target_table_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DqRule resource.
        :param pulumi.Input[int] alarm_level: Alarm trigger levels 1. Low, 2. Medium, 3. High.
        :param pulumi.Input['DqRuleCompareRuleArgs'] compare_rule: Alarm trigger condition.
        :param pulumi.Input[int] condition_type: Detection scope 1. Full Table 2. Conditional scan.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[int] rule_template_id: Rule template id.
        :param pulumi.Input[str] source_object_data_type_name: Source field type. int, string.
        :param pulumi.Input[str] source_object_value: Source field name.
        :param pulumi.Input[int] type: Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
        :param pulumi.Input[str] condition_expression: Condition scans WHERE condition expressions.
        :param pulumi.Input[str] custom_sql: Custom sql.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input['DqRuleFieldConfigArgs'] field_config: Custom template sql expression field replacement parameters.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[int] quality_dim: Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
        :param pulumi.Input[str] rel_condition_expr: The source field and the target field are associated with a conditional on expression.
        :param pulumi.Input[int] rule_group_id: Rule group id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] source_engine_types: List of execution engines supported by this rule.
        :param pulumi.Input[str] table_id: Table id.
        :param pulumi.Input[str] target_condition_expr: Target filter condition expression.
        :param pulumi.Input[str] target_database_id: Target database id.
        :param pulumi.Input[str] target_object_value: Target field name  CITY.
        :param pulumi.Input[str] target_table_id: Target table id.
        """
        pulumi.set(__self__, "alarm_level", alarm_level)
        pulumi.set(__self__, "compare_rule", compare_rule)
        pulumi.set(__self__, "condition_type", condition_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "rule_template_id", rule_template_id)
        pulumi.set(__self__, "source_object_data_type_name", source_object_data_type_name)
        pulumi.set(__self__, "source_object_value", source_object_value)
        pulumi.set(__self__, "type", type)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if custom_sql is not None:
            pulumi.set(__self__, "custom_sql", custom_sql)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if field_config is not None:
            pulumi.set(__self__, "field_config", field_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if quality_dim is not None:
            pulumi.set(__self__, "quality_dim", quality_dim)
        if rel_condition_expr is not None:
            pulumi.set(__self__, "rel_condition_expr", rel_condition_expr)
        if rule_group_id is not None:
            pulumi.set(__self__, "rule_group_id", rule_group_id)
        if source_engine_types is not None:
            pulumi.set(__self__, "source_engine_types", source_engine_types)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)
        if target_condition_expr is not None:
            pulumi.set(__self__, "target_condition_expr", target_condition_expr)
        if target_database_id is not None:
            pulumi.set(__self__, "target_database_id", target_database_id)
        if target_object_value is not None:
            pulumi.set(__self__, "target_object_value", target_object_value)
        if target_table_id is not None:
            pulumi.set(__self__, "target_table_id", target_table_id)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Input[int]:
        """
        Alarm trigger levels 1. Low, 2. Medium, 3. High.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "alarm_level", value)

    @property
    @pulumi.getter(name="compareRule")
    def compare_rule(self) -> pulumi.Input['DqRuleCompareRuleArgs']:
        """
        Alarm trigger condition.
        """
        return pulumi.get(self, "compare_rule")

    @compare_rule.setter
    def compare_rule(self, value: pulumi.Input['DqRuleCompareRuleArgs']):
        pulumi.set(self, "compare_rule", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Input[int]:
        """
        Detection scope 1. Full Table 2. Conditional scan.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "condition_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="ruleTemplateId")
    def rule_template_id(self) -> pulumi.Input[int]:
        """
        Rule template id.
        """
        return pulumi.get(self, "rule_template_id")

    @rule_template_id.setter
    def rule_template_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "rule_template_id", value)

    @property
    @pulumi.getter(name="sourceObjectDataTypeName")
    def source_object_data_type_name(self) -> pulumi.Input[str]:
        """
        Source field type. int, string.
        """
        return pulumi.get(self, "source_object_data_type_name")

    @source_object_data_type_name.setter
    def source_object_data_type_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_object_data_type_name", value)

    @property
    @pulumi.getter(name="sourceObjectValue")
    def source_object_value(self) -> pulumi.Input[str]:
        """
        Source field name.
        """
        return pulumi.get(self, "source_object_value")

    @source_object_value.setter
    def source_object_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_object_value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[int]:
        """
        Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[int]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Condition scans WHERE condition expressions.
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_expression", value)

    @property
    @pulumi.getter(name="customSql")
    def custom_sql(self) -> Optional[pulumi.Input[str]]:
        """
        Custom sql.
        """
        return pulumi.get(self, "custom_sql")

    @custom_sql.setter
    def custom_sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_sql", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fieldConfig")
    def field_config(self) -> Optional[pulumi.Input['DqRuleFieldConfigArgs']]:
        """
        Custom template sql expression field replacement parameters.
        """
        return pulumi.get(self, "field_config")

    @field_config.setter
    def field_config(self, value: Optional[pulumi.Input['DqRuleFieldConfigArgs']]):
        pulumi.set(self, "field_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="qualityDim")
    def quality_dim(self) -> Optional[pulumi.Input[int]]:
        """
        Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
        """
        return pulumi.get(self, "quality_dim")

    @quality_dim.setter
    def quality_dim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_dim", value)

    @property
    @pulumi.getter(name="relConditionExpr")
    def rel_condition_expr(self) -> Optional[pulumi.Input[str]]:
        """
        The source field and the target field are associated with a conditional on expression.
        """
        return pulumi.get(self, "rel_condition_expr")

    @rel_condition_expr.setter
    def rel_condition_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rel_condition_expr", value)

    @property
    @pulumi.getter(name="ruleGroupId")
    def rule_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule group id.
        """
        return pulumi.get(self, "rule_group_id")

    @rule_group_id.setter
    def rule_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_group_id", value)

    @property
    @pulumi.getter(name="sourceEngineTypes")
    def source_engine_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of execution engines supported by this rule.
        """
        return pulumi.get(self, "source_engine_types")

    @source_engine_types.setter
    def source_engine_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "source_engine_types", value)

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[pulumi.Input[str]]:
        """
        Table id.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_id", value)

    @property
    @pulumi.getter(name="targetConditionExpr")
    def target_condition_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Target filter condition expression.
        """
        return pulumi.get(self, "target_condition_expr")

    @target_condition_expr.setter
    def target_condition_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_condition_expr", value)

    @property
    @pulumi.getter(name="targetDatabaseId")
    def target_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        Target database id.
        """
        return pulumi.get(self, "target_database_id")

    @target_database_id.setter
    def target_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_id", value)

    @property
    @pulumi.getter(name="targetObjectValue")
    def target_object_value(self) -> Optional[pulumi.Input[str]]:
        """
        Target field name  CITY.
        """
        return pulumi.get(self, "target_object_value")

    @target_object_value.setter
    def target_object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_object_value", value)

    @property
    @pulumi.getter(name="targetTableId")
    def target_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        Target table id.
        """
        return pulumi.get(self, "target_table_id")

    @target_table_id.setter
    def target_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_table_id", value)


@pulumi.input_type
class _DqRuleState:
    def __init__(__self__, *,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 compare_rule: Optional[pulumi.Input['DqRuleCompareRuleArgs']] = None,
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[int]] = None,
                 custom_sql: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 field_config: Optional[pulumi.Input['DqRuleFieldConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 quality_dim: Optional[pulumi.Input[int]] = None,
                 rel_condition_expr: Optional[pulumi.Input[str]] = None,
                 rule_group_id: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 rule_template_id: Optional[pulumi.Input[int]] = None,
                 source_engine_types: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 source_object_data_type_name: Optional[pulumi.Input[str]] = None,
                 source_object_value: Optional[pulumi.Input[str]] = None,
                 table_id: Optional[pulumi.Input[str]] = None,
                 target_condition_expr: Optional[pulumi.Input[str]] = None,
                 target_database_id: Optional[pulumi.Input[str]] = None,
                 target_object_value: Optional[pulumi.Input[str]] = None,
                 target_table_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DqRule resources.
        :param pulumi.Input[int] alarm_level: Alarm trigger levels 1. Low, 2. Medium, 3. High.
        :param pulumi.Input['DqRuleCompareRuleArgs'] compare_rule: Alarm trigger condition.
        :param pulumi.Input[str] condition_expression: Condition scans WHERE condition expressions.
        :param pulumi.Input[int] condition_type: Detection scope 1. Full Table 2. Conditional scan.
        :param pulumi.Input[str] custom_sql: Custom sql.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input['DqRuleFieldConfigArgs'] field_config: Custom template sql expression field replacement parameters.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[int] quality_dim: Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
        :param pulumi.Input[str] rel_condition_expr: The source field and the target field are associated with a conditional on expression.
        :param pulumi.Input[int] rule_group_id: Rule group id.
        :param pulumi.Input[str] rule_id: Rule ID.
        :param pulumi.Input[int] rule_template_id: Rule template id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] source_engine_types: List of execution engines supported by this rule.
        :param pulumi.Input[str] source_object_data_type_name: Source field type. int, string.
        :param pulumi.Input[str] source_object_value: Source field name.
        :param pulumi.Input[str] table_id: Table id.
        :param pulumi.Input[str] target_condition_expr: Target filter condition expression.
        :param pulumi.Input[str] target_database_id: Target database id.
        :param pulumi.Input[str] target_object_value: Target field name  CITY.
        :param pulumi.Input[str] target_table_id: Target table id.
        :param pulumi.Input[int] type: Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
        """
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if compare_rule is not None:
            pulumi.set(__self__, "compare_rule", compare_rule)
        if condition_expression is not None:
            pulumi.set(__self__, "condition_expression", condition_expression)
        if condition_type is not None:
            pulumi.set(__self__, "condition_type", condition_type)
        if custom_sql is not None:
            pulumi.set(__self__, "custom_sql", custom_sql)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if field_config is not None:
            pulumi.set(__self__, "field_config", field_config)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if quality_dim is not None:
            pulumi.set(__self__, "quality_dim", quality_dim)
        if rel_condition_expr is not None:
            pulumi.set(__self__, "rel_condition_expr", rel_condition_expr)
        if rule_group_id is not None:
            pulumi.set(__self__, "rule_group_id", rule_group_id)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_template_id is not None:
            pulumi.set(__self__, "rule_template_id", rule_template_id)
        if source_engine_types is not None:
            pulumi.set(__self__, "source_engine_types", source_engine_types)
        if source_object_data_type_name is not None:
            pulumi.set(__self__, "source_object_data_type_name", source_object_data_type_name)
        if source_object_value is not None:
            pulumi.set(__self__, "source_object_value", source_object_value)
        if table_id is not None:
            pulumi.set(__self__, "table_id", table_id)
        if target_condition_expr is not None:
            pulumi.set(__self__, "target_condition_expr", target_condition_expr)
        if target_database_id is not None:
            pulumi.set(__self__, "target_database_id", target_database_id)
        if target_object_value is not None:
            pulumi.set(__self__, "target_object_value", target_object_value)
        if target_table_id is not None:
            pulumi.set(__self__, "target_table_id", target_table_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[int]]:
        """
        Alarm trigger levels 1. Low, 2. Medium, 3. High.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_level", value)

    @property
    @pulumi.getter(name="compareRule")
    def compare_rule(self) -> Optional[pulumi.Input['DqRuleCompareRuleArgs']]:
        """
        Alarm trigger condition.
        """
        return pulumi.get(self, "compare_rule")

    @compare_rule.setter
    def compare_rule(self, value: Optional[pulumi.Input['DqRuleCompareRuleArgs']]):
        pulumi.set(self, "compare_rule", value)

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Condition scans WHERE condition expressions.
        """
        return pulumi.get(self, "condition_expression")

    @condition_expression.setter
    def condition_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition_expression", value)

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> Optional[pulumi.Input[int]]:
        """
        Detection scope 1. Full Table 2. Conditional scan.
        """
        return pulumi.get(self, "condition_type")

    @condition_type.setter
    def condition_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "condition_type", value)

    @property
    @pulumi.getter(name="customSql")
    def custom_sql(self) -> Optional[pulumi.Input[str]]:
        """
        Custom sql.
        """
        return pulumi.get(self, "custom_sql")

    @custom_sql.setter
    def custom_sql(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_sql", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fieldConfig")
    def field_config(self) -> Optional[pulumi.Input['DqRuleFieldConfigArgs']]:
        """
        Custom template sql expression field replacement parameters.
        """
        return pulumi.get(self, "field_config")

    @field_config.setter
    def field_config(self, value: Optional[pulumi.Input['DqRuleFieldConfigArgs']]):
        pulumi.set(self, "field_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="qualityDim")
    def quality_dim(self) -> Optional[pulumi.Input[int]]:
        """
        Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
        """
        return pulumi.get(self, "quality_dim")

    @quality_dim.setter
    def quality_dim(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quality_dim", value)

    @property
    @pulumi.getter(name="relConditionExpr")
    def rel_condition_expr(self) -> Optional[pulumi.Input[str]]:
        """
        The source field and the target field are associated with a conditional on expression.
        """
        return pulumi.get(self, "rel_condition_expr")

    @rel_condition_expr.setter
    def rel_condition_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rel_condition_expr", value)

    @property
    @pulumi.getter(name="ruleGroupId")
    def rule_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule group id.
        """
        return pulumi.get(self, "rule_group_id")

    @rule_group_id.setter
    def rule_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_group_id", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="ruleTemplateId")
    def rule_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        Rule template id.
        """
        return pulumi.get(self, "rule_template_id")

    @rule_template_id.setter
    def rule_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_template_id", value)

    @property
    @pulumi.getter(name="sourceEngineTypes")
    def source_engine_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of execution engines supported by this rule.
        """
        return pulumi.get(self, "source_engine_types")

    @source_engine_types.setter
    def source_engine_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "source_engine_types", value)

    @property
    @pulumi.getter(name="sourceObjectDataTypeName")
    def source_object_data_type_name(self) -> Optional[pulumi.Input[str]]:
        """
        Source field type. int, string.
        """
        return pulumi.get(self, "source_object_data_type_name")

    @source_object_data_type_name.setter
    def source_object_data_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_object_data_type_name", value)

    @property
    @pulumi.getter(name="sourceObjectValue")
    def source_object_value(self) -> Optional[pulumi.Input[str]]:
        """
        Source field name.
        """
        return pulumi.get(self, "source_object_value")

    @source_object_value.setter
    def source_object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_object_value", value)

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> Optional[pulumi.Input[str]]:
        """
        Table id.
        """
        return pulumi.get(self, "table_id")

    @table_id.setter
    def table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_id", value)

    @property
    @pulumi.getter(name="targetConditionExpr")
    def target_condition_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Target filter condition expression.
        """
        return pulumi.get(self, "target_condition_expr")

    @target_condition_expr.setter
    def target_condition_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_condition_expr", value)

    @property
    @pulumi.getter(name="targetDatabaseId")
    def target_database_id(self) -> Optional[pulumi.Input[str]]:
        """
        Target database id.
        """
        return pulumi.get(self, "target_database_id")

    @target_database_id.setter
    def target_database_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_database_id", value)

    @property
    @pulumi.getter(name="targetObjectValue")
    def target_object_value(self) -> Optional[pulumi.Input[str]]:
        """
        Target field name  CITY.
        """
        return pulumi.get(self, "target_object_value")

    @target_object_value.setter
    def target_object_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_object_value", value)

    @property
    @pulumi.getter(name="targetTableId")
    def target_table_id(self) -> Optional[pulumi.Input[str]]:
        """
        Target table id.
        """
        return pulumi.get(self, "target_table_id")

    @target_table_id.setter
    def target_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_table_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)


class DqRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 compare_rule: Optional[pulumi.Input[pulumi.InputType['DqRuleCompareRuleArgs']]] = None,
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[int]] = None,
                 custom_sql: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 field_config: Optional[pulumi.Input[pulumi.InputType['DqRuleFieldConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 quality_dim: Optional[pulumi.Input[int]] = None,
                 rel_condition_expr: Optional[pulumi.Input[str]] = None,
                 rule_group_id: Optional[pulumi.Input[int]] = None,
                 rule_template_id: Optional[pulumi.Input[int]] = None,
                 source_engine_types: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 source_object_data_type_name: Optional[pulumi.Input[str]] = None,
                 source_object_value: Optional[pulumi.Input[str]] = None,
                 table_id: Optional[pulumi.Input[str]] = None,
                 target_condition_expr: Optional[pulumi.Input[str]] = None,
                 target_database_id: Optional[pulumi.Input[str]] = None,
                 target_object_value: Optional[pulumi.Input[str]] = None,
                 target_table_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a wedata dq_rule

        ## Import

        wedata dq_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Wedata/dqRule:DqRule example 1948767646355341312#894
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] alarm_level: Alarm trigger levels 1. Low, 2. Medium, 3. High.
        :param pulumi.Input[pulumi.InputType['DqRuleCompareRuleArgs']] compare_rule: Alarm trigger condition.
        :param pulumi.Input[str] condition_expression: Condition scans WHERE condition expressions.
        :param pulumi.Input[int] condition_type: Detection scope 1. Full Table 2. Conditional scan.
        :param pulumi.Input[str] custom_sql: Custom sql.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[pulumi.InputType['DqRuleFieldConfigArgs']] field_config: Custom template sql expression field replacement parameters.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[int] quality_dim: Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
        :param pulumi.Input[str] rel_condition_expr: The source field and the target field are associated with a conditional on expression.
        :param pulumi.Input[int] rule_group_id: Rule group id.
        :param pulumi.Input[int] rule_template_id: Rule template id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] source_engine_types: List of execution engines supported by this rule.
        :param pulumi.Input[str] source_object_data_type_name: Source field type. int, string.
        :param pulumi.Input[str] source_object_value: Source field name.
        :param pulumi.Input[str] table_id: Table id.
        :param pulumi.Input[str] target_condition_expr: Target filter condition expression.
        :param pulumi.Input[str] target_database_id: Target database id.
        :param pulumi.Input[str] target_object_value: Target field name  CITY.
        :param pulumi.Input[str] target_table_id: Target table id.
        :param pulumi.Input[int] type: Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DqRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a wedata dq_rule

        ## Import

        wedata dq_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Wedata/dqRule:DqRule example 1948767646355341312#894
        ```

        :param str resource_name: The name of the resource.
        :param DqRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DqRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 compare_rule: Optional[pulumi.Input[pulumi.InputType['DqRuleCompareRuleArgs']]] = None,
                 condition_expression: Optional[pulumi.Input[str]] = None,
                 condition_type: Optional[pulumi.Input[int]] = None,
                 custom_sql: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 field_config: Optional[pulumi.Input[pulumi.InputType['DqRuleFieldConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 quality_dim: Optional[pulumi.Input[int]] = None,
                 rel_condition_expr: Optional[pulumi.Input[str]] = None,
                 rule_group_id: Optional[pulumi.Input[int]] = None,
                 rule_template_id: Optional[pulumi.Input[int]] = None,
                 source_engine_types: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 source_object_data_type_name: Optional[pulumi.Input[str]] = None,
                 source_object_value: Optional[pulumi.Input[str]] = None,
                 table_id: Optional[pulumi.Input[str]] = None,
                 target_condition_expr: Optional[pulumi.Input[str]] = None,
                 target_database_id: Optional[pulumi.Input[str]] = None,
                 target_object_value: Optional[pulumi.Input[str]] = None,
                 target_table_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DqRuleArgs.__new__(DqRuleArgs)

            if alarm_level is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_level'")
            __props__.__dict__["alarm_level"] = alarm_level
            if compare_rule is None and not opts.urn:
                raise TypeError("Missing required property 'compare_rule'")
            __props__.__dict__["compare_rule"] = compare_rule
            __props__.__dict__["condition_expression"] = condition_expression
            if condition_type is None and not opts.urn:
                raise TypeError("Missing required property 'condition_type'")
            __props__.__dict__["condition_type"] = condition_type
            __props__.__dict__["custom_sql"] = custom_sql
            __props__.__dict__["description"] = description
            __props__.__dict__["field_config"] = field_config
            __props__.__dict__["name"] = name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["quality_dim"] = quality_dim
            __props__.__dict__["rel_condition_expr"] = rel_condition_expr
            __props__.__dict__["rule_group_id"] = rule_group_id
            if rule_template_id is None and not opts.urn:
                raise TypeError("Missing required property 'rule_template_id'")
            __props__.__dict__["rule_template_id"] = rule_template_id
            __props__.__dict__["source_engine_types"] = source_engine_types
            if source_object_data_type_name is None and not opts.urn:
                raise TypeError("Missing required property 'source_object_data_type_name'")
            __props__.__dict__["source_object_data_type_name"] = source_object_data_type_name
            if source_object_value is None and not opts.urn:
                raise TypeError("Missing required property 'source_object_value'")
            __props__.__dict__["source_object_value"] = source_object_value
            __props__.__dict__["table_id"] = table_id
            __props__.__dict__["target_condition_expr"] = target_condition_expr
            __props__.__dict__["target_database_id"] = target_database_id
            __props__.__dict__["target_object_value"] = target_object_value
            __props__.__dict__["target_table_id"] = target_table_id
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["rule_id"] = None
        super(DqRule, __self__).__init__(
            'tencentcloud:Wedata/dqRule:DqRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_level: Optional[pulumi.Input[int]] = None,
            compare_rule: Optional[pulumi.Input[pulumi.InputType['DqRuleCompareRuleArgs']]] = None,
            condition_expression: Optional[pulumi.Input[str]] = None,
            condition_type: Optional[pulumi.Input[int]] = None,
            custom_sql: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            field_config: Optional[pulumi.Input[pulumi.InputType['DqRuleFieldConfigArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            quality_dim: Optional[pulumi.Input[int]] = None,
            rel_condition_expr: Optional[pulumi.Input[str]] = None,
            rule_group_id: Optional[pulumi.Input[int]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            rule_template_id: Optional[pulumi.Input[int]] = None,
            source_engine_types: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            source_object_data_type_name: Optional[pulumi.Input[str]] = None,
            source_object_value: Optional[pulumi.Input[str]] = None,
            table_id: Optional[pulumi.Input[str]] = None,
            target_condition_expr: Optional[pulumi.Input[str]] = None,
            target_database_id: Optional[pulumi.Input[str]] = None,
            target_object_value: Optional[pulumi.Input[str]] = None,
            target_table_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[int]] = None) -> 'DqRule':
        """
        Get an existing DqRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] alarm_level: Alarm trigger levels 1. Low, 2. Medium, 3. High.
        :param pulumi.Input[pulumi.InputType['DqRuleCompareRuleArgs']] compare_rule: Alarm trigger condition.
        :param pulumi.Input[str] condition_expression: Condition scans WHERE condition expressions.
        :param pulumi.Input[int] condition_type: Detection scope 1. Full Table 2. Conditional scan.
        :param pulumi.Input[str] custom_sql: Custom sql.
        :param pulumi.Input[str] description: Rule description.
        :param pulumi.Input[pulumi.InputType['DqRuleFieldConfigArgs']] field_config: Custom template sql expression field replacement parameters.
        :param pulumi.Input[str] name: Rule name.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[int] quality_dim: Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
        :param pulumi.Input[str] rel_condition_expr: The source field and the target field are associated with a conditional on expression.
        :param pulumi.Input[int] rule_group_id: Rule group id.
        :param pulumi.Input[str] rule_id: Rule ID.
        :param pulumi.Input[int] rule_template_id: Rule template id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] source_engine_types: List of execution engines supported by this rule.
        :param pulumi.Input[str] source_object_data_type_name: Source field type. int, string.
        :param pulumi.Input[str] source_object_value: Source field name.
        :param pulumi.Input[str] table_id: Table id.
        :param pulumi.Input[str] target_condition_expr: Target filter condition expression.
        :param pulumi.Input[str] target_database_id: Target database id.
        :param pulumi.Input[str] target_object_value: Target field name  CITY.
        :param pulumi.Input[str] target_table_id: Target table id.
        :param pulumi.Input[int] type: Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DqRuleState.__new__(_DqRuleState)

        __props__.__dict__["alarm_level"] = alarm_level
        __props__.__dict__["compare_rule"] = compare_rule
        __props__.__dict__["condition_expression"] = condition_expression
        __props__.__dict__["condition_type"] = condition_type
        __props__.__dict__["custom_sql"] = custom_sql
        __props__.__dict__["description"] = description
        __props__.__dict__["field_config"] = field_config
        __props__.__dict__["name"] = name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["quality_dim"] = quality_dim
        __props__.__dict__["rel_condition_expr"] = rel_condition_expr
        __props__.__dict__["rule_group_id"] = rule_group_id
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["rule_template_id"] = rule_template_id
        __props__.__dict__["source_engine_types"] = source_engine_types
        __props__.__dict__["source_object_data_type_name"] = source_object_data_type_name
        __props__.__dict__["source_object_value"] = source_object_value
        __props__.__dict__["table_id"] = table_id
        __props__.__dict__["target_condition_expr"] = target_condition_expr
        __props__.__dict__["target_database_id"] = target_database_id
        __props__.__dict__["target_object_value"] = target_object_value
        __props__.__dict__["target_table_id"] = target_table_id
        __props__.__dict__["type"] = type
        return DqRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Output[int]:
        """
        Alarm trigger levels 1. Low, 2. Medium, 3. High.
        """
        return pulumi.get(self, "alarm_level")

    @property
    @pulumi.getter(name="compareRule")
    def compare_rule(self) -> pulumi.Output['outputs.DqRuleCompareRule']:
        """
        Alarm trigger condition.
        """
        return pulumi.get(self, "compare_rule")

    @property
    @pulumi.getter(name="conditionExpression")
    def condition_expression(self) -> pulumi.Output[Optional[str]]:
        """
        Condition scans WHERE condition expressions.
        """
        return pulumi.get(self, "condition_expression")

    @property
    @pulumi.getter(name="conditionType")
    def condition_type(self) -> pulumi.Output[int]:
        """
        Detection scope 1. Full Table 2. Conditional scan.
        """
        return pulumi.get(self, "condition_type")

    @property
    @pulumi.getter(name="customSql")
    def custom_sql(self) -> pulumi.Output[Optional[str]]:
        """
        Custom sql.
        """
        return pulumi.get(self, "custom_sql")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fieldConfig")
    def field_config(self) -> pulumi.Output[Optional['outputs.DqRuleFieldConfig']]:
        """
        Custom template sql expression field replacement parameters.
        """
        return pulumi.get(self, "field_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="qualityDim")
    def quality_dim(self) -> pulumi.Output[int]:
        """
        Rules belong to quality dimensions (1. accuracy, 2. uniqueness, 3. completeness, 4. consistency, 5. timeliness, 6. effectiveness).
        """
        return pulumi.get(self, "quality_dim")

    @property
    @pulumi.getter(name="relConditionExpr")
    def rel_condition_expr(self) -> pulumi.Output[Optional[str]]:
        """
        The source field and the target field are associated with a conditional on expression.
        """
        return pulumi.get(self, "rel_condition_expr")

    @property
    @pulumi.getter(name="ruleGroupId")
    def rule_group_id(self) -> pulumi.Output[Optional[int]]:
        """
        Rule group id.
        """
        return pulumi.get(self, "rule_group_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleTemplateId")
    def rule_template_id(self) -> pulumi.Output[int]:
        """
        Rule template id.
        """
        return pulumi.get(self, "rule_template_id")

    @property
    @pulumi.getter(name="sourceEngineTypes")
    def source_engine_types(self) -> pulumi.Output[Sequence[int]]:
        """
        List of execution engines supported by this rule.
        """
        return pulumi.get(self, "source_engine_types")

    @property
    @pulumi.getter(name="sourceObjectDataTypeName")
    def source_object_data_type_name(self) -> pulumi.Output[str]:
        """
        Source field type. int, string.
        """
        return pulumi.get(self, "source_object_data_type_name")

    @property
    @pulumi.getter(name="sourceObjectValue")
    def source_object_value(self) -> pulumi.Output[str]:
        """
        Source field name.
        """
        return pulumi.get(self, "source_object_value")

    @property
    @pulumi.getter(name="tableId")
    def table_id(self) -> pulumi.Output[Optional[str]]:
        """
        Table id.
        """
        return pulumi.get(self, "table_id")

    @property
    @pulumi.getter(name="targetConditionExpr")
    def target_condition_expr(self) -> pulumi.Output[Optional[str]]:
        """
        Target filter condition expression.
        """
        return pulumi.get(self, "target_condition_expr")

    @property
    @pulumi.getter(name="targetDatabaseId")
    def target_database_id(self) -> pulumi.Output[Optional[str]]:
        """
        Target database id.
        """
        return pulumi.get(self, "target_database_id")

    @property
    @pulumi.getter(name="targetObjectValue")
    def target_object_value(self) -> pulumi.Output[Optional[str]]:
        """
        Target field name  CITY.
        """
        return pulumi.get(self, "target_object_value")

    @property
    @pulumi.getter(name="targetTableId")
    def target_table_id(self) -> pulumi.Output[Optional[str]]:
        """
        Target table id.
        """
        return pulumi.get(self, "target_table_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[int]:
        """
        Rule Type 1. System Template, 2. Custom Template, 3. Custom SQL.
        """
        return pulumi.get(self, "type")

