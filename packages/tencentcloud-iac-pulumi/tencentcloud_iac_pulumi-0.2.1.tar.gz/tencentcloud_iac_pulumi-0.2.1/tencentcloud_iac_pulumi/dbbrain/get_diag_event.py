# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDiagEventResult',
    'AwaitableGetDiagEventResult',
    'get_diag_event',
    'get_diag_event_output',
]

@pulumi.output_type
class GetDiagEventResult:
    """
    A collection of values returned by getDiagEvent.
    """
    def __init__(__self__, diag_item=None, diag_type=None, end_time=None, event_id=None, explanation=None, id=None, instance_id=None, metric=None, outline=None, problem=None, product=None, result_output_file=None, severity=None, start_time=None, suggestions=None):
        if diag_item and not isinstance(diag_item, str):
            raise TypeError("Expected argument 'diag_item' to be a str")
        pulumi.set(__self__, "diag_item", diag_item)
        if diag_type and not isinstance(diag_type, str):
            raise TypeError("Expected argument 'diag_type' to be a str")
        pulumi.set(__self__, "diag_type", diag_type)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if event_id and not isinstance(event_id, int):
            raise TypeError("Expected argument 'event_id' to be a int")
        pulumi.set(__self__, "event_id", event_id)
        if explanation and not isinstance(explanation, str):
            raise TypeError("Expected argument 'explanation' to be a str")
        pulumi.set(__self__, "explanation", explanation)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if metric and not isinstance(metric, str):
            raise TypeError("Expected argument 'metric' to be a str")
        pulumi.set(__self__, "metric", metric)
        if outline and not isinstance(outline, str):
            raise TypeError("Expected argument 'outline' to be a str")
        pulumi.set(__self__, "outline", outline)
        if problem and not isinstance(problem, str):
            raise TypeError("Expected argument 'problem' to be a str")
        pulumi.set(__self__, "problem", problem)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if severity and not isinstance(severity, int):
            raise TypeError("Expected argument 'severity' to be a int")
        pulumi.set(__self__, "severity", severity)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if suggestions and not isinstance(suggestions, str):
            raise TypeError("Expected argument 'suggestions' to be a str")
        pulumi.set(__self__, "suggestions", suggestions)

    @property
    @pulumi.getter(name="diagItem")
    def diag_item(self) -> str:
        """
        diagnostic item.
        """
        return pulumi.get(self, "diag_item")

    @property
    @pulumi.getter(name="diagType")
    def diag_type(self) -> str:
        """
        Diagnostic type.
        """
        return pulumi.get(self, "diag_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        End Time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> int:
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter
    def explanation(self) -> str:
        """
        Diagnostic event details, output is empty if there is no additional explanatory information.
        """
        return pulumi.get(self, "explanation")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def metric(self) -> str:
        """
        reserved text. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def outline(self) -> str:
        """
        Diagnostic summary.
        """
        return pulumi.get(self, "outline")

    @property
    @pulumi.getter
    def problem(self) -> str:
        """
        Diagnosed problem.
        """
        return pulumi.get(self, "problem")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def severity(self) -> int:
        """
        severity. The severity is divided into 5 levels, according to the degree of impact from high to low: 1: Fatal, 2: Serious, 3: Warning, 4: Prompt, 5: Healthy.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Starting time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def suggestions(self) -> str:
        """
        A diagnostic suggestion, or empty if there is no suggestion.
        """
        return pulumi.get(self, "suggestions")


class AwaitableGetDiagEventResult(GetDiagEventResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiagEventResult(
            diag_item=self.diag_item,
            diag_type=self.diag_type,
            end_time=self.end_time,
            event_id=self.event_id,
            explanation=self.explanation,
            id=self.id,
            instance_id=self.instance_id,
            metric=self.metric,
            outline=self.outline,
            problem=self.problem,
            product=self.product,
            result_output_file=self.result_output_file,
            severity=self.severity,
            start_time=self.start_time,
            suggestions=self.suggestions)


def get_diag_event(event_id: Optional[int] = None,
                   instance_id: Optional[str] = None,
                   product: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiagEventResult:
    """
    Use this data source to query detailed information of dbbrain diag_event

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    diag_history = tencentcloud.Dbbrain.get_diag_history(instance_id="%s",
        start_time="%s",
        end_time="%s",
        product="mysql")
    diag_event = tencentcloud.Dbbrain.get_diag_event(instance_id="%s",
        event_id=diag_history.events[0].event_id,
        product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param int event_id: Event ID. Obtain it through `Get Instance Diagnosis History DescribeDBDiagHistory`.
    :param str instance_id: isntance id.
    :param str product: Service product type, supported values include: `mysql` - cloud database MySQL, `cynosdb` - cloud database CynosDB for MySQL, the default is `mysql`.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['eventId'] = event_id
    __args__['instanceId'] = instance_id
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getDiagEvent:getDiagEvent', __args__, opts=opts, typ=GetDiagEventResult).value

    return AwaitableGetDiagEventResult(
        diag_item=pulumi.get(__ret__, 'diag_item'),
        diag_type=pulumi.get(__ret__, 'diag_type'),
        end_time=pulumi.get(__ret__, 'end_time'),
        event_id=pulumi.get(__ret__, 'event_id'),
        explanation=pulumi.get(__ret__, 'explanation'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        metric=pulumi.get(__ret__, 'metric'),
        outline=pulumi.get(__ret__, 'outline'),
        problem=pulumi.get(__ret__, 'problem'),
        product=pulumi.get(__ret__, 'product'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        severity=pulumi.get(__ret__, 'severity'),
        start_time=pulumi.get(__ret__, 'start_time'),
        suggestions=pulumi.get(__ret__, 'suggestions'))


@_utilities.lift_output_func(get_diag_event)
def get_diag_event_output(event_id: Optional[pulumi.Input[Optional[int]]] = None,
                          instance_id: Optional[pulumi.Input[str]] = None,
                          product: Optional[pulumi.Input[Optional[str]]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDiagEventResult]:
    """
    Use this data source to query detailed information of dbbrain diag_event

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    diag_history = tencentcloud.Dbbrain.get_diag_history(instance_id="%s",
        start_time="%s",
        end_time="%s",
        product="mysql")
    diag_event = tencentcloud.Dbbrain.get_diag_event(instance_id="%s",
        event_id=diag_history.events[0].event_id,
        product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param int event_id: Event ID. Obtain it through `Get Instance Diagnosis History DescribeDBDiagHistory`.
    :param str instance_id: isntance id.
    :param str product: Service product type, supported values include: `mysql` - cloud database MySQL, `cynosdb` - cloud database CynosDB for MySQL, the default is `mysql`.
    :param str result_output_file: Used to save results.
    """
    ...
