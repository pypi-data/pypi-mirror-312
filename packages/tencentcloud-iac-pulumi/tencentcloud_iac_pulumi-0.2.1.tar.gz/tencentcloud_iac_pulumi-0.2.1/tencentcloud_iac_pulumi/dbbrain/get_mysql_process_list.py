# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMysqlProcessListResult',
    'AwaitableGetMysqlProcessListResult',
    'get_mysql_process_list',
    'get_mysql_process_list_output',
]

@pulumi.output_type
class GetMysqlProcessListResult:
    """
    A collection of values returned by getMysqlProcessList.
    """
    def __init__(__self__, command=None, db=None, host=None, id=None, info=None, instance_id=None, process_lists=None, product=None, result_output_file=None, state=None, time=None, user=None):
        if command and not isinstance(command, str):
            raise TypeError("Expected argument 'command' to be a str")
        pulumi.set(__self__, "command", command)
        if db and not isinstance(db, str):
            raise TypeError("Expected argument 'db' to be a str")
        pulumi.set(__self__, "db", db)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if info and not isinstance(info, str):
            raise TypeError("Expected argument 'info' to be a str")
        pulumi.set(__self__, "info", info)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if process_lists and not isinstance(process_lists, list):
            raise TypeError("Expected argument 'process_lists' to be a list")
        pulumi.set(__self__, "process_lists", process_lists)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time and not isinstance(time, int):
            raise TypeError("Expected argument 'time' to be a int")
        pulumi.set(__self__, "time", time)
        if user and not isinstance(user, str):
            raise TypeError("Expected argument 'user' to be a str")
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def command(self) -> Optional[str]:
        """
        The execution type of the thread.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def db(self) -> Optional[str]:
        """
        The thread that operates the database.
        """
        return pulumi.get(self, "db")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        The operating host address of the thread.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        thread ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def info(self) -> Optional[str]:
        """
        The operation statement for the thread.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="processLists")
    def process_lists(self) -> Sequence['outputs.GetMysqlProcessListProcessListResult']:
        """
        Live thread list.
        """
        return pulumi.get(self, "process_lists")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The operational state of the thread.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def time(self) -> Optional[int]:
        """
        The operation duration of the thread, in seconds.
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        The operating account name of the thread.
        """
        return pulumi.get(self, "user")


class AwaitableGetMysqlProcessListResult(GetMysqlProcessListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMysqlProcessListResult(
            command=self.command,
            db=self.db,
            host=self.host,
            id=self.id,
            info=self.info,
            instance_id=self.instance_id,
            process_lists=self.process_lists,
            product=self.product,
            result_output_file=self.result_output_file,
            state=self.state,
            time=self.time,
            user=self.user)


def get_mysql_process_list(command: Optional[str] = None,
                           db: Optional[str] = None,
                           host: Optional[str] = None,
                           id: Optional[int] = None,
                           info: Optional[str] = None,
                           instance_id: Optional[str] = None,
                           product: Optional[str] = None,
                           result_output_file: Optional[str] = None,
                           state: Optional[str] = None,
                           time: Optional[int] = None,
                           user: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMysqlProcessListResult:
    """
    Use this data source to query detailed information of dbbrain mysql_process_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    mysql_process_list = tencentcloud.Dbbrain.get_mysql_process_list(instance_id=local["mysql_id"],
        product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param str command: The execution type of the thread, used to filter the thread list.
    :param str db: The threads operations database, used to filter the thread list.
    :param str host: The operating host address of the thread, used to filter the thread list.
    :param int id: thread ID, used to filter the thread list.
    :param str info: The threads operation statement is used to filter the thread list.
    :param str instance_id: instance id.
    :param str product: Service product type, supported values: `mysql` - cloud database MySQL; `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
    :param str result_output_file: Used to save results.
    :param str state: The operational state of the thread, used to filter the thread list.
    :param int time: The minimum value of the operation duration of a thread, in seconds, used to filter the list of threads whose operation duration is longer than this value.
    :param str user: The operating account name of the thread, used to filter the thread list.
    """
    __args__ = dict()
    __args__['command'] = command
    __args__['db'] = db
    __args__['host'] = host
    __args__['id'] = id
    __args__['info'] = info
    __args__['instanceId'] = instance_id
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    __args__['state'] = state
    __args__['time'] = time
    __args__['user'] = user
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getMysqlProcessList:getMysqlProcessList', __args__, opts=opts, typ=GetMysqlProcessListResult).value

    return AwaitableGetMysqlProcessListResult(
        command=pulumi.get(__ret__, 'command'),
        db=pulumi.get(__ret__, 'db'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        info=pulumi.get(__ret__, 'info'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        process_lists=pulumi.get(__ret__, 'process_lists'),
        product=pulumi.get(__ret__, 'product'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        state=pulumi.get(__ret__, 'state'),
        time=pulumi.get(__ret__, 'time'),
        user=pulumi.get(__ret__, 'user'))


@_utilities.lift_output_func(get_mysql_process_list)
def get_mysql_process_list_output(command: Optional[pulumi.Input[Optional[str]]] = None,
                                  db: Optional[pulumi.Input[Optional[str]]] = None,
                                  host: Optional[pulumi.Input[Optional[str]]] = None,
                                  id: Optional[pulumi.Input[Optional[int]]] = None,
                                  info: Optional[pulumi.Input[Optional[str]]] = None,
                                  instance_id: Optional[pulumi.Input[str]] = None,
                                  product: Optional[pulumi.Input[Optional[str]]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  state: Optional[pulumi.Input[Optional[str]]] = None,
                                  time: Optional[pulumi.Input[Optional[int]]] = None,
                                  user: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMysqlProcessListResult]:
    """
    Use this data source to query detailed information of dbbrain mysql_process_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    mysql_process_list = tencentcloud.Dbbrain.get_mysql_process_list(instance_id=local["mysql_id"],
        product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param str command: The execution type of the thread, used to filter the thread list.
    :param str db: The threads operations database, used to filter the thread list.
    :param str host: The operating host address of the thread, used to filter the thread list.
    :param int id: thread ID, used to filter the thread list.
    :param str info: The threads operation statement is used to filter the thread list.
    :param str instance_id: instance id.
    :param str product: Service product type, supported values: `mysql` - cloud database MySQL; `cynosdb` - cloud database TDSQL-C for MySQL, the default is `mysql`.
    :param str result_output_file: Used to save results.
    :param str state: The operational state of the thread, used to filter the thread list.
    :param int time: The minimum value of the operation duration of a thread, in seconds, used to filter the list of threads whose operation duration is longer than this value.
    :param str user: The operating account name of the thread, used to filter the thread list.
    """
    ...
