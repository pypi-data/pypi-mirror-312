# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSlowLogUserHostStatsResult',
    'AwaitableGetSlowLogUserHostStatsResult',
    'get_slow_log_user_host_stats',
    'get_slow_log_user_host_stats_output',
]

@pulumi.output_type
class GetSlowLogUserHostStatsResult:
    """
    A collection of values returned by getSlowLogUserHostStats.
    """
    def __init__(__self__, end_time=None, id=None, instance_id=None, items=None, md5=None, product=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if md5 and not isinstance(md5, str):
            raise TypeError("Expected argument 'md5' to be a str")
        pulumi.set(__self__, "md5", md5)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSlowLogUserHostStatsItemResult']:
        """
        Detailed list of the slow log proportion for each source address.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def md5(self) -> Optional[str]:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetSlowLogUserHostStatsResult(GetSlowLogUserHostStatsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSlowLogUserHostStatsResult(
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            items=self.items,
            md5=self.md5,
            product=self.product,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_slow_log_user_host_stats(end_time: Optional[str] = None,
                                 instance_id: Optional[str] = None,
                                 md5: Optional[str] = None,
                                 product: Optional[str] = None,
                                 result_output_file: Optional[str] = None,
                                 start_time: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSlowLogUserHostStatsResult:
    """
    Use this data source to query detailed information of dbbrain slow_log_user_host_stats

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    test = tencentcloud.Dbbrain.get_slow_log_user_host_stats(end_time="%s",
        instance_id="%s",
        product="mysql",
        start_time="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: EndTime time of the query range, time format such as: 2019-09-10 12:13:14.
    :param str instance_id: instance id.
    :param str md5: MD5 value of SOL template.
    :param str product: Types of service products, supported values:`mysql` - Cloud Database MySQL; `cynosdb` - Cloud Database TDSQL-C for MySQL, defaults to `mysql`.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time of the query range, time format such as: 2019-09-10 12:13:14.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['md5'] = md5
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getSlowLogUserHostStats:getSlowLogUserHostStats', __args__, opts=opts, typ=GetSlowLogUserHostStatsResult).value

    return AwaitableGetSlowLogUserHostStatsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        items=pulumi.get(__ret__, 'items'),
        md5=pulumi.get(__ret__, 'md5'),
        product=pulumi.get(__ret__, 'product'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_slow_log_user_host_stats)
def get_slow_log_user_host_stats_output(end_time: Optional[pulumi.Input[str]] = None,
                                        instance_id: Optional[pulumi.Input[str]] = None,
                                        md5: Optional[pulumi.Input[Optional[str]]] = None,
                                        product: Optional[pulumi.Input[Optional[str]]] = None,
                                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        start_time: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSlowLogUserHostStatsResult]:
    """
    Use this data source to query detailed information of dbbrain slow_log_user_host_stats

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    test = tencentcloud.Dbbrain.get_slow_log_user_host_stats(end_time="%s",
        instance_id="%s",
        product="mysql",
        start_time="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: EndTime time of the query range, time format such as: 2019-09-10 12:13:14.
    :param str instance_id: instance id.
    :param str md5: MD5 value of SOL template.
    :param str product: Types of service products, supported values:`mysql` - Cloud Database MySQL; `cynosdb` - Cloud Database TDSQL-C for MySQL, defaults to `mysql`.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time of the query range, time format such as: 2019-09-10 12:13:14.
    """
    ...
