# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSecurityAuditLogExportTasksResult',
    'AwaitableGetSecurityAuditLogExportTasksResult',
    'get_security_audit_log_export_tasks',
    'get_security_audit_log_export_tasks_output',
]

@pulumi.output_type
class GetSecurityAuditLogExportTasksResult:
    """
    A collection of values returned by getSecurityAuditLogExportTasks.
    """
    def __init__(__self__, async_request_ids=None, id=None, lists=None, product=None, result_output_file=None, sec_audit_group_id=None):
        if async_request_ids and not isinstance(async_request_ids, list):
            raise TypeError("Expected argument 'async_request_ids' to be a list")
        pulumi.set(__self__, "async_request_ids", async_request_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sec_audit_group_id and not isinstance(sec_audit_group_id, str):
            raise TypeError("Expected argument 'sec_audit_group_id' to be a str")
        pulumi.set(__self__, "sec_audit_group_id", sec_audit_group_id)

    @property
    @pulumi.getter(name="asyncRequestIds")
    def async_request_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "async_request_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetSecurityAuditLogExportTasksListResult']:
        """
        security audit log export task list.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def product(self) -> str:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="secAuditGroupId")
    def sec_audit_group_id(self) -> str:
        return pulumi.get(self, "sec_audit_group_id")


class AwaitableGetSecurityAuditLogExportTasksResult(GetSecurityAuditLogExportTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityAuditLogExportTasksResult(
            async_request_ids=self.async_request_ids,
            id=self.id,
            lists=self.lists,
            product=self.product,
            result_output_file=self.result_output_file,
            sec_audit_group_id=self.sec_audit_group_id)


def get_security_audit_log_export_tasks(async_request_ids: Optional[Sequence[int]] = None,
                                        product: Optional[str] = None,
                                        result_output_file: Optional[str] = None,
                                        sec_audit_group_id: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityAuditLogExportTasksResult:
    """
    Use this data source to query detailed information of dbbrain securityAuditLogExportTasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    task = tencentcloud.dbbrain.SecurityAuditLogExportTask("task",
        sec_audit_group_id="sec_audit_group_id",
        start_time="start_time",
        end_time="end_time",
        product="mysql",
        danger_levels=[
            0,
            1,
            2,
        ])
    tasks = tencentcloud.Dbbrain.get_security_audit_log_export_tasks_output(sec_audit_group_id="sec_audit_group_id",
        product="mysql",
        async_request_ids=[task.async_request_id])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] async_request_ids: async request id list.
    :param str product: product, optional value is mysql.
    :param str result_output_file: Used to save results.
    :param str sec_audit_group_id: security audit group id.
    """
    __args__ = dict()
    __args__['asyncRequestIds'] = async_request_ids
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    __args__['secAuditGroupId'] = sec_audit_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getSecurityAuditLogExportTasks:getSecurityAuditLogExportTasks', __args__, opts=opts, typ=GetSecurityAuditLogExportTasksResult).value

    return AwaitableGetSecurityAuditLogExportTasksResult(
        async_request_ids=pulumi.get(__ret__, 'async_request_ids'),
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        product=pulumi.get(__ret__, 'product'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sec_audit_group_id=pulumi.get(__ret__, 'sec_audit_group_id'))


@_utilities.lift_output_func(get_security_audit_log_export_tasks)
def get_security_audit_log_export_tasks_output(async_request_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                                               product: Optional[pulumi.Input[str]] = None,
                                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                               sec_audit_group_id: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecurityAuditLogExportTasksResult]:
    """
    Use this data source to query detailed information of dbbrain securityAuditLogExportTasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    task = tencentcloud.dbbrain.SecurityAuditLogExportTask("task",
        sec_audit_group_id="sec_audit_group_id",
        start_time="start_time",
        end_time="end_time",
        product="mysql",
        danger_levels=[
            0,
            1,
            2,
        ])
    tasks = tencentcloud.Dbbrain.get_security_audit_log_export_tasks_output(sec_audit_group_id="sec_audit_group_id",
        product="mysql",
        async_request_ids=[task.async_request_id])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] async_request_ids: async request id list.
    :param str product: product, optional value is mysql.
    :param str result_output_file: Used to save results.
    :param str sec_audit_group_id: security audit group id.
    """
    ...
