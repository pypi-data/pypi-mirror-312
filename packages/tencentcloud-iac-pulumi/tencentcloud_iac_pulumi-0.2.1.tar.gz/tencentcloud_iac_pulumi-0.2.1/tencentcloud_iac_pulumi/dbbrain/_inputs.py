# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ModifyDiagDbInstanceOperationInstanceConfsArgs',
    'SqlFilterSessionTokenArgs',
    'TdsqlAuditLogFilterArgs',
    'GetSlowLogTopSqlsSchemaListArgs',
]

@pulumi.input_type
class ModifyDiagDbInstanceOperationInstanceConfsArgs:
    def __init__(__self__, *,
                 daily_inspection: Optional[pulumi.Input[str]] = None,
                 overview_display: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] daily_inspection: Database inspection switch, Yes/No.
        :param pulumi.Input[str] overview_display: Instance overview switch, Yes/No.
        """
        if daily_inspection is not None:
            pulumi.set(__self__, "daily_inspection", daily_inspection)
        if overview_display is not None:
            pulumi.set(__self__, "overview_display", overview_display)

    @property
    @pulumi.getter(name="dailyInspection")
    def daily_inspection(self) -> Optional[pulumi.Input[str]]:
        """
        Database inspection switch, Yes/No.
        """
        return pulumi.get(self, "daily_inspection")

    @daily_inspection.setter
    def daily_inspection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "daily_inspection", value)

    @property
    @pulumi.getter(name="overviewDisplay")
    def overview_display(self) -> Optional[pulumi.Input[str]]:
        """
        Instance overview switch, Yes/No.
        """
        return pulumi.get(self, "overview_display")

    @overview_display.setter
    def overview_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "overview_display", value)


@pulumi.input_type
class SqlFilterSessionTokenArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 user: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: password.
        :param pulumi.Input[str] user: user name.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        user name.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class TdsqlAuditLogFilterArgs:
    def __init__(__self__, *,
                 affect_rows: Optional[pulumi.Input[int]] = None,
                 db_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exec_time: Optional[pulumi.Input[int]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sent_rows: Optional[pulumi.Input[int]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] affect_rows: Number of affected rows. Indicates filtering audit logs whose affected rows are greater than this value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] db_names: Database name.
        :param pulumi.Input[int] exec_time: Execution time. The unit is: us. It means to filter the audit logs whose execution time is greater than this value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: Client Address.
        :param pulumi.Input[int] sent_rows: Return the number of rows. It means to filter the audit log with the number of returned rows greater than this value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: Username.
        """
        if affect_rows is not None:
            pulumi.set(__self__, "affect_rows", affect_rows)
        if db_names is not None:
            pulumi.set(__self__, "db_names", db_names)
        if exec_time is not None:
            pulumi.set(__self__, "exec_time", exec_time)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if sent_rows is not None:
            pulumi.set(__self__, "sent_rows", sent_rows)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="affectRows")
    def affect_rows(self) -> Optional[pulumi.Input[int]]:
        """
        Number of affected rows. Indicates filtering audit logs whose affected rows are greater than this value.
        """
        return pulumi.get(self, "affect_rows")

    @affect_rows.setter
    def affect_rows(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "affect_rows", value)

    @property
    @pulumi.getter(name="dbNames")
    def db_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Database name.
        """
        return pulumi.get(self, "db_names")

    @db_names.setter
    def db_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "db_names", value)

    @property
    @pulumi.getter(name="execTime")
    def exec_time(self) -> Optional[pulumi.Input[int]]:
        """
        Execution time. The unit is: us. It means to filter the audit logs whose execution time is greater than this value.
        """
        return pulumi.get(self, "exec_time")

    @exec_time.setter
    def exec_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exec_time", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Client Address.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="sentRows")
    def sent_rows(self) -> Optional[pulumi.Input[int]]:
        """
        Return the number of rows. It means to filter the audit log with the number of returned rows greater than this value.
        """
        return pulumi.get(self, "sent_rows")

    @sent_rows.setter
    def sent_rows(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sent_rows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Username.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class GetSlowLogTopSqlsSchemaListArgs:
    def __init__(__self__, *,
                 schema: str):
        """
        :param str schema: DB name.
        """
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def schema(self) -> str:
        """
        DB name.
        """
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: str):
        pulumi.set(self, "schema", value)


