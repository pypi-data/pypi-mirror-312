# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSlowLogUserSqlAdviceResult',
    'AwaitableGetSlowLogUserSqlAdviceResult',
    'get_slow_log_user_sql_advice',
    'get_slow_log_user_sql_advice_output',
]

@pulumi.output_type
class GetSlowLogUserSqlAdviceResult:
    """
    A collection of values returned by getSlowLogUserSqlAdvice.
    """
    def __init__(__self__, advices=None, comments=None, cost=None, id=None, instance_id=None, product=None, request_id=None, result_output_file=None, schema=None, sql_plan=None, sql_text=None, tables=None):
        if advices and not isinstance(advices, str):
            raise TypeError("Expected argument 'advices' to be a str")
        pulumi.set(__self__, "advices", advices)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if cost and not isinstance(cost, str):
            raise TypeError("Expected argument 'cost' to be a str")
        pulumi.set(__self__, "cost", cost)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if sql_plan and not isinstance(sql_plan, str):
            raise TypeError("Expected argument 'sql_plan' to be a str")
        pulumi.set(__self__, "sql_plan", sql_plan)
        if sql_text and not isinstance(sql_text, str):
            raise TypeError("Expected argument 'sql_text' to be a str")
        pulumi.set(__self__, "sql_text", sql_text)
        if tables and not isinstance(tables, str):
            raise TypeError("Expected argument 'tables' to be a str")
        pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def advices(self) -> str:
        """
        SQL optimization suggestion, which can be parsed into a JSON array, and the output is empty when no optimization is required.
        """
        return pulumi.get(self, "advices")

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        SQL optimization suggestion remarks, which can be parsed into a String array, and the output is empty when optimization is not required.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def cost(self) -> str:
        """
        The cost saving details after SQL optimization can be parsed as JSON, and the output is empty when no optimization is required.
        """
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        """
        Unique request ID, returned for every request. The RequestId of the request needs to be provided when locating the problem.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sqlPlan")
    def sql_plan(self) -> str:
        """
        The SQL execution plan can be parsed into JSON, and the output is empty when no optimization is required.
        """
        return pulumi.get(self, "sql_plan")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter
    def tables(self) -> str:
        """
        The DDL information of related tables can be parsed into a JSON array.
        """
        return pulumi.get(self, "tables")


class AwaitableGetSlowLogUserSqlAdviceResult(GetSlowLogUserSqlAdviceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSlowLogUserSqlAdviceResult(
            advices=self.advices,
            comments=self.comments,
            cost=self.cost,
            id=self.id,
            instance_id=self.instance_id,
            product=self.product,
            request_id=self.request_id,
            result_output_file=self.result_output_file,
            schema=self.schema,
            sql_plan=self.sql_plan,
            sql_text=self.sql_text,
            tables=self.tables)


def get_slow_log_user_sql_advice(instance_id: Optional[str] = None,
                                 product: Optional[str] = None,
                                 result_output_file: Optional[str] = None,
                                 schema: Optional[str] = None,
                                 sql_text: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSlowLogUserSqlAdviceResult:
    """
    Use this data source to query detailed information of dbbrain slow_log_user_sql_advice

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    test = tencentcloud.Dbbrain.get_slow_log_user_sql_advice(instance_id="%s",
        product="mysql",
        sql_text="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: instance id.
    :param str product: Service product type, supported values: `mysql` - cloud database MySQL; `cynosdb` - cloud database TDSQL-C for MySQL; `dbbrain-mysql` - self-built MySQL, the default is `mysql`.
    :param str result_output_file: Used to save results.
    :param str schema: library name.
    :param str sql_text: SQL statements.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    __args__['schema'] = schema
    __args__['sqlText'] = sql_text
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getSlowLogUserSqlAdvice:getSlowLogUserSqlAdvice', __args__, opts=opts, typ=GetSlowLogUserSqlAdviceResult).value

    return AwaitableGetSlowLogUserSqlAdviceResult(
        advices=pulumi.get(__ret__, 'advices'),
        comments=pulumi.get(__ret__, 'comments'),
        cost=pulumi.get(__ret__, 'cost'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        product=pulumi.get(__ret__, 'product'),
        request_id=pulumi.get(__ret__, 'request_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        schema=pulumi.get(__ret__, 'schema'),
        sql_plan=pulumi.get(__ret__, 'sql_plan'),
        sql_text=pulumi.get(__ret__, 'sql_text'),
        tables=pulumi.get(__ret__, 'tables'))


@_utilities.lift_output_func(get_slow_log_user_sql_advice)
def get_slow_log_user_sql_advice_output(instance_id: Optional[pulumi.Input[str]] = None,
                                        product: Optional[pulumi.Input[Optional[str]]] = None,
                                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        schema: Optional[pulumi.Input[Optional[str]]] = None,
                                        sql_text: Optional[pulumi.Input[str]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSlowLogUserSqlAdviceResult]:
    """
    Use this data source to query detailed information of dbbrain slow_log_user_sql_advice

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    test = tencentcloud.Dbbrain.get_slow_log_user_sql_advice(instance_id="%s",
        product="mysql",
        sql_text="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: instance id.
    :param str product: Service product type, supported values: `mysql` - cloud database MySQL; `cynosdb` - cloud database TDSQL-C for MySQL; `dbbrain-mysql` - self-built MySQL, the default is `mysql`.
    :param str result_output_file: Used to save results.
    :param str schema: library name.
    :param str sql_text: SQL statements.
    """
    ...
