# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSecurityAuditLogDownloadUrlsResult',
    'AwaitableGetSecurityAuditLogDownloadUrlsResult',
    'get_security_audit_log_download_urls',
    'get_security_audit_log_download_urls_output',
]

@pulumi.output_type
class GetSecurityAuditLogDownloadUrlsResult:
    """
    A collection of values returned by getSecurityAuditLogDownloadUrls.
    """
    def __init__(__self__, async_request_id=None, id=None, product=None, result_output_file=None, sec_audit_group_id=None, urls=None):
        if async_request_id and not isinstance(async_request_id, int):
            raise TypeError("Expected argument 'async_request_id' to be a int")
        pulumi.set(__self__, "async_request_id", async_request_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sec_audit_group_id and not isinstance(sec_audit_group_id, str):
            raise TypeError("Expected argument 'sec_audit_group_id' to be a str")
        pulumi.set(__self__, "sec_audit_group_id", sec_audit_group_id)
        if urls and not isinstance(urls, list):
            raise TypeError("Expected argument 'urls' to be a list")
        pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> int:
        return pulumi.get(self, "async_request_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def product(self) -> str:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="secAuditGroupId")
    def sec_audit_group_id(self) -> str:
        return pulumi.get(self, "sec_audit_group_id")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[str]:
        """
        List of COS links to export results. When the result set is large, it may be divided into multiple urls for download.
        """
        return pulumi.get(self, "urls")


class AwaitableGetSecurityAuditLogDownloadUrlsResult(GetSecurityAuditLogDownloadUrlsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecurityAuditLogDownloadUrlsResult(
            async_request_id=self.async_request_id,
            id=self.id,
            product=self.product,
            result_output_file=self.result_output_file,
            sec_audit_group_id=self.sec_audit_group_id,
            urls=self.urls)


def get_security_audit_log_download_urls(async_request_id: Optional[int] = None,
                                         product: Optional[str] = None,
                                         result_output_file: Optional[str] = None,
                                         sec_audit_group_id: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecurityAuditLogDownloadUrlsResult:
    """
    Use this data source to query detailed information of dbbrain security_audit_log_download_urls

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    task = tencentcloud.dbbrain.SecurityAuditLogExportTask("task",
        sec_audit_group_id="%s",
        start_time="%s",
        end_time="%s",
        product="mysql",
        danger_levels=[
            0,
            1,
            2,
        ])
    test = tencentcloud.Dbbrain.get_security_audit_log_download_urls_output(sec_audit_group_id="%s",
        async_request_id=task.async_request_id,
        product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param int async_request_id: Asynchronous task ID.
    :param str product: Service product type, supported values: `mysql` - ApsaraDB for MySQL.
    :param str result_output_file: Used to save results.
    :param str sec_audit_group_id: Security audit group Id.
    """
    __args__ = dict()
    __args__['asyncRequestId'] = async_request_id
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    __args__['secAuditGroupId'] = sec_audit_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getSecurityAuditLogDownloadUrls:getSecurityAuditLogDownloadUrls', __args__, opts=opts, typ=GetSecurityAuditLogDownloadUrlsResult).value

    return AwaitableGetSecurityAuditLogDownloadUrlsResult(
        async_request_id=pulumi.get(__ret__, 'async_request_id'),
        id=pulumi.get(__ret__, 'id'),
        product=pulumi.get(__ret__, 'product'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sec_audit_group_id=pulumi.get(__ret__, 'sec_audit_group_id'),
        urls=pulumi.get(__ret__, 'urls'))


@_utilities.lift_output_func(get_security_audit_log_download_urls)
def get_security_audit_log_download_urls_output(async_request_id: Optional[pulumi.Input[int]] = None,
                                                product: Optional[pulumi.Input[str]] = None,
                                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                sec_audit_group_id: Optional[pulumi.Input[str]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecurityAuditLogDownloadUrlsResult]:
    """
    Use this data source to query detailed information of dbbrain security_audit_log_download_urls

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    task = tencentcloud.dbbrain.SecurityAuditLogExportTask("task",
        sec_audit_group_id="%s",
        start_time="%s",
        end_time="%s",
        product="mysql",
        danger_levels=[
            0,
            1,
            2,
        ])
    test = tencentcloud.Dbbrain.get_security_audit_log_download_urls_output(sec_audit_group_id="%s",
        async_request_id=task.async_request_id,
        product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param int async_request_id: Asynchronous task ID.
    :param str product: Service product type, supported values: `mysql` - ApsaraDB for MySQL.
    :param str result_output_file: Used to save results.
    :param str sec_audit_group_id: Security audit group Id.
    """
    ...
