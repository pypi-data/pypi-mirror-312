# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SecurityAuditLogExportTaskArgs', 'SecurityAuditLogExportTask']

@pulumi.input_type
class SecurityAuditLogExportTaskArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 product: pulumi.Input[str],
                 sec_audit_group_id: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 danger_levels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a SecurityAuditLogExportTask resource.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[str] product: product, optional value is mysql.
        :param pulumi.Input[str] sec_audit_group_id: security audit group id.
        :param pulumi.Input[str] start_time: start time.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] danger_levels: List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "sec_audit_group_id", sec_audit_group_id)
        pulumi.set(__self__, "start_time", start_time)
        if danger_levels is not None:
            pulumi.set(__self__, "danger_levels", danger_levels)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def product(self) -> pulumi.Input[str]:
        """
        product, optional value is mysql.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: pulumi.Input[str]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter(name="secAuditGroupId")
    def sec_audit_group_id(self) -> pulumi.Input[str]:
        """
        security audit group id.
        """
        return pulumi.get(self, "sec_audit_group_id")

    @sec_audit_group_id.setter
    def sec_audit_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sec_audit_group_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="dangerLevels")
    def danger_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        """
        return pulumi.get(self, "danger_levels")

    @danger_levels.setter
    def danger_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "danger_levels", value)


@pulumi.input_type
class _SecurityAuditLogExportTaskState:
    def __init__(__self__, *,
                 async_request_id: Optional[pulumi.Input[int]] = None,
                 danger_levels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 sec_audit_group_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SecurityAuditLogExportTask resources.
        :param pulumi.Input[int] async_request_id: request of async id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] danger_levels: List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[str] product: product, optional value is mysql.
        :param pulumi.Input[str] sec_audit_group_id: security audit group id.
        :param pulumi.Input[str] start_time: start time.
        """
        if async_request_id is not None:
            pulumi.set(__self__, "async_request_id", async_request_id)
        if danger_levels is not None:
            pulumi.set(__self__, "danger_levels", danger_levels)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if sec_audit_group_id is not None:
            pulumi.set(__self__, "sec_audit_group_id", sec_audit_group_id)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> Optional[pulumi.Input[int]]:
        """
        request of async id.
        """
        return pulumi.get(self, "async_request_id")

    @async_request_id.setter
    def async_request_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "async_request_id", value)

    @property
    @pulumi.getter(name="dangerLevels")
    def danger_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        """
        return pulumi.get(self, "danger_levels")

    @danger_levels.setter
    def danger_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "danger_levels", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[str]]:
        """
        product, optional value is mysql.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter(name="secAuditGroupId")
    def sec_audit_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        security audit group id.
        """
        return pulumi.get(self, "sec_audit_group_id")

    @sec_audit_group_id.setter
    def sec_audit_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sec_audit_group_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


class SecurityAuditLogExportTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 danger_levels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 sec_audit_group_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dbbrain security_audit_log_export_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        task = tencentcloud.dbbrain.SecurityAuditLogExportTask("task",
            danger_levels=[
                0,
                1,
                2,
            ],
            end_time="2020-12-28 01:00:00",
            product="mysql",
            sec_audit_group_id="sec_audit_group_id",
            start_time="2020-12-28 00:00:00")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] danger_levels: List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[str] product: product, optional value is mysql.
        :param pulumi.Input[str] sec_audit_group_id: security audit group id.
        :param pulumi.Input[str] start_time: start time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityAuditLogExportTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dbbrain security_audit_log_export_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        task = tencentcloud.dbbrain.SecurityAuditLogExportTask("task",
            danger_levels=[
                0,
                1,
                2,
            ],
            end_time="2020-12-28 01:00:00",
            product="mysql",
            sec_audit_group_id="sec_audit_group_id",
            start_time="2020-12-28 00:00:00")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SecurityAuditLogExportTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityAuditLogExportTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 danger_levels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 sec_audit_group_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityAuditLogExportTaskArgs.__new__(SecurityAuditLogExportTaskArgs)

            __props__.__dict__["danger_levels"] = danger_levels
            if end_time is None and not opts.urn:
                raise TypeError("Missing required property 'end_time'")
            __props__.__dict__["end_time"] = end_time
            if product is None and not opts.urn:
                raise TypeError("Missing required property 'product'")
            __props__.__dict__["product"] = product
            if sec_audit_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'sec_audit_group_id'")
            __props__.__dict__["sec_audit_group_id"] = sec_audit_group_id
            if start_time is None and not opts.urn:
                raise TypeError("Missing required property 'start_time'")
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["async_request_id"] = None
        super(SecurityAuditLogExportTask, __self__).__init__(
            'tencentcloud:Dbbrain/securityAuditLogExportTask:SecurityAuditLogExportTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            async_request_id: Optional[pulumi.Input[int]] = None,
            danger_levels: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            product: Optional[pulumi.Input[str]] = None,
            sec_audit_group_id: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None) -> 'SecurityAuditLogExportTask':
        """
        Get an existing SecurityAuditLogExportTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] async_request_id: request of async id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] danger_levels: List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[str] product: product, optional value is mysql.
        :param pulumi.Input[str] sec_audit_group_id: security audit group id.
        :param pulumi.Input[str] start_time: start time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityAuditLogExportTaskState.__new__(_SecurityAuditLogExportTaskState)

        __props__.__dict__["async_request_id"] = async_request_id
        __props__.__dict__["danger_levels"] = danger_levels
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["product"] = product
        __props__.__dict__["sec_audit_group_id"] = sec_audit_group_id
        __props__.__dict__["start_time"] = start_time
        return SecurityAuditLogExportTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> pulumi.Output[int]:
        """
        request of async id.
        """
        return pulumi.get(self, "async_request_id")

    @property
    @pulumi.getter(name="dangerLevels")
    def danger_levels(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of log risk levels, supported values include: 0 no risk; 1 low risk; 2 medium risk; 3 high risk.
        """
        return pulumi.get(self, "danger_levels")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def product(self) -> pulumi.Output[str]:
        """
        product, optional value is mysql.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="secAuditGroupId")
    def sec_audit_group_id(self) -> pulumi.Output[str]:
        """
        security audit group id.
        """
        return pulumi.get(self, "sec_audit_group_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

