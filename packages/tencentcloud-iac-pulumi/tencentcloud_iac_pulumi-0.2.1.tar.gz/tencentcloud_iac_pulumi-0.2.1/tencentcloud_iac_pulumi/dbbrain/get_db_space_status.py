# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDbSpaceStatusResult',
    'AwaitableGetDbSpaceStatusResult',
    'get_db_space_status',
    'get_db_space_status_output',
]

@pulumi.output_type
class GetDbSpaceStatusResult:
    """
    A collection of values returned by getDbSpaceStatus.
    """
    def __init__(__self__, available_days=None, growth=None, id=None, instance_id=None, product=None, range_days=None, remain=None, result_output_file=None, total=None):
        if available_days and not isinstance(available_days, int):
            raise TypeError("Expected argument 'available_days' to be a int")
        pulumi.set(__self__, "available_days", available_days)
        if growth and not isinstance(growth, int):
            raise TypeError("Expected argument 'growth' to be a int")
        pulumi.set(__self__, "growth", growth)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if range_days and not isinstance(range_days, int):
            raise TypeError("Expected argument 'range_days' to be a int")
        pulumi.set(__self__, "range_days", range_days)
        if remain and not isinstance(remain, int):
            raise TypeError("Expected argument 'remain' to be a int")
        pulumi.set(__self__, "remain", remain)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if total and not isinstance(total, int):
            raise TypeError("Expected argument 'total' to be a int")
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="availableDays")
    def available_days(self) -> int:
        """
        Estimated number of days available.
        """
        return pulumi.get(self, "available_days")

    @property
    @pulumi.getter
    def growth(self) -> int:
        """
        Disk growth (MB).
        """
        return pulumi.get(self, "growth")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="rangeDays")
    def range_days(self) -> Optional[int]:
        return pulumi.get(self, "range_days")

    @property
    @pulumi.getter
    def remain(self) -> int:
        """
        Disk remaining (MB).
        """
        return pulumi.get(self, "remain")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total disk size (MB).
        """
        return pulumi.get(self, "total")


class AwaitableGetDbSpaceStatusResult(GetDbSpaceStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbSpaceStatusResult(
            available_days=self.available_days,
            growth=self.growth,
            id=self.id,
            instance_id=self.instance_id,
            product=self.product,
            range_days=self.range_days,
            remain=self.remain,
            result_output_file=self.result_output_file,
            total=self.total)


def get_db_space_status(instance_id: Optional[str] = None,
                        product: Optional[str] = None,
                        range_days: Optional[int] = None,
                        result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbSpaceStatusResult:
    """
    Use this data source to query detailed information of dbbrain db_space_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_space_status = tencentcloud.Dbbrain.get_db_space_status(instance_id="%s",
        product="mysql",
        range_days=7)
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: instance id.
    :param str product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL, the default is mysql.
    :param int range_days: The number of days in the time period, the deadline is the current day, and the default is 7 days.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['product'] = product
    __args__['rangeDays'] = range_days
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getDbSpaceStatus:getDbSpaceStatus', __args__, opts=opts, typ=GetDbSpaceStatusResult).value

    return AwaitableGetDbSpaceStatusResult(
        available_days=pulumi.get(__ret__, 'available_days'),
        growth=pulumi.get(__ret__, 'growth'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        product=pulumi.get(__ret__, 'product'),
        range_days=pulumi.get(__ret__, 'range_days'),
        remain=pulumi.get(__ret__, 'remain'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        total=pulumi.get(__ret__, 'total'))


@_utilities.lift_output_func(get_db_space_status)
def get_db_space_status_output(instance_id: Optional[pulumi.Input[str]] = None,
                               product: Optional[pulumi.Input[Optional[str]]] = None,
                               range_days: Optional[pulumi.Input[Optional[int]]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbSpaceStatusResult]:
    """
    Use this data source to query detailed information of dbbrain db_space_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_space_status = tencentcloud.Dbbrain.get_db_space_status(instance_id="%s",
        product="mysql",
        range_days=7)
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: instance id.
    :param str product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL, the default is mysql.
    :param int range_days: The number of days in the time period, the deadline is the current day, and the default is 7 days.
    :param str result_output_file: Used to save results.
    """
    ...
