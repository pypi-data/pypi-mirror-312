# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ModifyDiagDbInstanceOperationArgs', 'ModifyDiagDbInstanceOperation']

@pulumi.input_type
class ModifyDiagDbInstanceOperationArgs:
    def __init__(__self__, *,
                 instance_confs: pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs'],
                 product: pulumi.Input[str],
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 regions: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ModifyDiagDbInstanceOperation resource.
        :param pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs'] instance_confs: Instance configuration, including inspection, overview switch, etc.
        :param pulumi.Input[str] product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: Specifies the ID of the instance whose inspection status is changed.
        :param pulumi.Input[str] regions: Effective instance region, the value is All, which means all regions.
        """
        pulumi.set(__self__, "instance_confs", instance_confs)
        pulumi.set(__self__, "product", product)
        if instance_ids is not None:
            pulumi.set(__self__, "instance_ids", instance_ids)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter(name="instanceConfs")
    def instance_confs(self) -> pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs']:
        """
        Instance configuration, including inspection, overview switch, etc.
        """
        return pulumi.get(self, "instance_confs")

    @instance_confs.setter
    def instance_confs(self, value: pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs']):
        pulumi.set(self, "instance_confs", value)

    @property
    @pulumi.getter
    def product(self) -> pulumi.Input[str]:
        """
        Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: pulumi.Input[str]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the ID of the instance whose inspection status is changed.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_ids", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[str]]:
        """
        Effective instance region, the value is All, which means all regions.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regions", value)


@pulumi.input_type
class _ModifyDiagDbInstanceOperationState:
    def __init__(__self__, *,
                 instance_confs: Optional[pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs']] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ModifyDiagDbInstanceOperation resources.
        :param pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs'] instance_confs: Instance configuration, including inspection, overview switch, etc.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: Specifies the ID of the instance whose inspection status is changed.
        :param pulumi.Input[str] product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
        :param pulumi.Input[str] regions: Effective instance region, the value is All, which means all regions.
        """
        if instance_confs is not None:
            pulumi.set(__self__, "instance_confs", instance_confs)
        if instance_ids is not None:
            pulumi.set(__self__, "instance_ids", instance_ids)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter(name="instanceConfs")
    def instance_confs(self) -> Optional[pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs']]:
        """
        Instance configuration, including inspection, overview switch, etc.
        """
        return pulumi.get(self, "instance_confs")

    @instance_confs.setter
    def instance_confs(self, value: Optional[pulumi.Input['ModifyDiagDbInstanceOperationInstanceConfsArgs']]):
        pulumi.set(self, "instance_confs", value)

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the ID of the instance whose inspection status is changed.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_ids", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[str]]:
        """
        Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[str]]:
        """
        Effective instance region, the value is All, which means all regions.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regions", value)


class ModifyDiagDbInstanceOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_confs: Optional[pulumi.Input[pulumi.InputType['ModifyDiagDbInstanceOperationInstanceConfsArgs']]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dbbrain modify_diag_db_instance_conf

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        on = tencentcloud.dbbrain.ModifyDiagDbInstanceOperation("on",
            instance_confs=tencentcloud.dbbrain.ModifyDiagDbInstanceOperationInstanceConfsArgs(
                daily_inspection="Yes",
                overview_display="Yes",
            ),
            instance_ids=["%s"],
            product="mysql")
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        off = tencentcloud.dbbrain.ModifyDiagDbInstanceOperation("off",
            instance_confs=tencentcloud.dbbrain.ModifyDiagDbInstanceOperationInstanceConfsArgs(
                daily_inspection="No",
                overview_display="No",
            ),
            instance_ids=["%s"],
            product="mysql")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ModifyDiagDbInstanceOperationInstanceConfsArgs']] instance_confs: Instance configuration, including inspection, overview switch, etc.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: Specifies the ID of the instance whose inspection status is changed.
        :param pulumi.Input[str] product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
        :param pulumi.Input[str] regions: Effective instance region, the value is All, which means all regions.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModifyDiagDbInstanceOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dbbrain modify_diag_db_instance_conf

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        on = tencentcloud.dbbrain.ModifyDiagDbInstanceOperation("on",
            instance_confs=tencentcloud.dbbrain.ModifyDiagDbInstanceOperationInstanceConfsArgs(
                daily_inspection="Yes",
                overview_display="Yes",
            ),
            instance_ids=["%s"],
            product="mysql")
        ```
        <!--End PulumiCodeChooser -->

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        off = tencentcloud.dbbrain.ModifyDiagDbInstanceOperation("off",
            instance_confs=tencentcloud.dbbrain.ModifyDiagDbInstanceOperationInstanceConfsArgs(
                daily_inspection="No",
                overview_display="No",
            ),
            instance_ids=["%s"],
            product="mysql")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ModifyDiagDbInstanceOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModifyDiagDbInstanceOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_confs: Optional[pulumi.Input[pulumi.InputType['ModifyDiagDbInstanceOperationInstanceConfsArgs']]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 regions: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModifyDiagDbInstanceOperationArgs.__new__(ModifyDiagDbInstanceOperationArgs)

            if instance_confs is None and not opts.urn:
                raise TypeError("Missing required property 'instance_confs'")
            __props__.__dict__["instance_confs"] = instance_confs
            __props__.__dict__["instance_ids"] = instance_ids
            if product is None and not opts.urn:
                raise TypeError("Missing required property 'product'")
            __props__.__dict__["product"] = product
            __props__.__dict__["regions"] = regions
        super(ModifyDiagDbInstanceOperation, __self__).__init__(
            'tencentcloud:Dbbrain/modifyDiagDbInstanceOperation:ModifyDiagDbInstanceOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_confs: Optional[pulumi.Input[pulumi.InputType['ModifyDiagDbInstanceOperationInstanceConfsArgs']]] = None,
            instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            product: Optional[pulumi.Input[str]] = None,
            regions: Optional[pulumi.Input[str]] = None) -> 'ModifyDiagDbInstanceOperation':
        """
        Get an existing ModifyDiagDbInstanceOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ModifyDiagDbInstanceOperationInstanceConfsArgs']] instance_confs: Instance configuration, including inspection, overview switch, etc.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: Specifies the ID of the instance whose inspection status is changed.
        :param pulumi.Input[str] product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
        :param pulumi.Input[str] regions: Effective instance region, the value is All, which means all regions.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModifyDiagDbInstanceOperationState.__new__(_ModifyDiagDbInstanceOperationState)

        __props__.__dict__["instance_confs"] = instance_confs
        __props__.__dict__["instance_ids"] = instance_ids
        __props__.__dict__["product"] = product
        __props__.__dict__["regions"] = regions
        return ModifyDiagDbInstanceOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceConfs")
    def instance_confs(self) -> pulumi.Output['outputs.ModifyDiagDbInstanceOperationInstanceConfs']:
        """
        Instance configuration, including inspection, overview switch, etc.
        """
        return pulumi.get(self, "instance_confs")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specifies the ID of the instance whose inspection status is changed.
        """
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter
    def product(self) -> pulumi.Output[str]:
        """
        Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Optional[str]]:
        """
        Effective instance region, the value is All, which means all regions.
        """
        return pulumi.get(self, "regions")

