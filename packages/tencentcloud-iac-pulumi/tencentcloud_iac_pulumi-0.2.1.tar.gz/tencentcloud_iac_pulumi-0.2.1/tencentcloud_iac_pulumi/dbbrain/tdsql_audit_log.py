# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TdsqlAuditLogArgs', 'TdsqlAuditLog']

@pulumi.input_type
class TdsqlAuditLogArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 node_request_type: pulumi.Input[str],
                 product: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 filter: Optional[pulumi.Input['TdsqlAuditLogFilterArgs']] = None):
        """
        The set of arguments for constructing a TdsqlAuditLog resource.
        :param pulumi.Input[str] end_time: Deadline time, such as `2019-09-11 10:13:14`.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] node_request_type: Consistent with Product. For example: dcdb, mariadb.
        :param pulumi.Input[str] product: Service product type, supported values include: dcdb - cloud database Tdsql, mariadb - cloud database MariaDB for MariaDB..
        :param pulumi.Input[str] start_time: Start time, such as `2019-09-10 12:13:14`.
        :param pulumi.Input['TdsqlAuditLogFilterArgs'] filter: Filter conditions. Logs can be filtered according to the filter conditions set.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "node_request_type", node_request_type)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "start_time", start_time)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        """
        Deadline time, such as `2019-09-11 10:13:14`.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="nodeRequestType")
    def node_request_type(self) -> pulumi.Input[str]:
        """
        Consistent with Product. For example: dcdb, mariadb.
        """
        return pulumi.get(self, "node_request_type")

    @node_request_type.setter
    def node_request_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "node_request_type", value)

    @property
    @pulumi.getter
    def product(self) -> pulumi.Input[str]:
        """
        Service product type, supported values include: dcdb - cloud database Tdsql, mariadb - cloud database MariaDB for MariaDB..
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: pulumi.Input[str]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        Start time, such as `2019-09-10 12:13:14`.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['TdsqlAuditLogFilterArgs']]:
        """
        Filter conditions. Logs can be filtered according to the filter conditions set.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['TdsqlAuditLogFilterArgs']]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class _TdsqlAuditLogState:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input['TdsqlAuditLogFilterArgs']] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 node_request_type: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TdsqlAuditLog resources.
        :param pulumi.Input[str] end_time: Deadline time, such as `2019-09-11 10:13:14`.
        :param pulumi.Input['TdsqlAuditLogFilterArgs'] filter: Filter conditions. Logs can be filtered according to the filter conditions set.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] node_request_type: Consistent with Product. For example: dcdb, mariadb.
        :param pulumi.Input[str] product: Service product type, supported values include: dcdb - cloud database Tdsql, mariadb - cloud database MariaDB for MariaDB..
        :param pulumi.Input[str] start_time: Start time, such as `2019-09-10 12:13:14`.
        """
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if node_request_type is not None:
            pulumi.set(__self__, "node_request_type", node_request_type)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Deadline time, such as `2019-09-11 10:13:14`.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['TdsqlAuditLogFilterArgs']]:
        """
        Filter conditions. Logs can be filtered according to the filter conditions set.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['TdsqlAuditLogFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="nodeRequestType")
    def node_request_type(self) -> Optional[pulumi.Input[str]]:
        """
        Consistent with Product. For example: dcdb, mariadb.
        """
        return pulumi.get(self, "node_request_type")

    @node_request_type.setter
    def node_request_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_request_type", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[str]]:
        """
        Service product type, supported values include: dcdb - cloud database Tdsql, mariadb - cloud database MariaDB for MariaDB..
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Start time, such as `2019-09-10 12:13:14`.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


class TdsqlAuditLog(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['TdsqlAuditLogFilterArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 node_request_type: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dbbrain tdsql_audit_log

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_log = tencentcloud.dbbrain.TdsqlAuditLog("myLog",
            end_time="%s",
            filter=tencentcloud.dbbrain.TdsqlAuditLogFilterArgs(
                hosts=[
                    "%%",
                    "127.0.0.1",
                ],
                users=[
                    "tf_test",
                    "mysql",
                ],
            ),
            instance_id="%s",
            node_request_type="dcdb",
            product="dcdb",
            start_time="%s")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_time: Deadline time, such as `2019-09-11 10:13:14`.
        :param pulumi.Input[pulumi.InputType['TdsqlAuditLogFilterArgs']] filter: Filter conditions. Logs can be filtered according to the filter conditions set.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] node_request_type: Consistent with Product. For example: dcdb, mariadb.
        :param pulumi.Input[str] product: Service product type, supported values include: dcdb - cloud database Tdsql, mariadb - cloud database MariaDB for MariaDB..
        :param pulumi.Input[str] start_time: Start time, such as `2019-09-10 12:13:14`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TdsqlAuditLogArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dbbrain tdsql_audit_log

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_log = tencentcloud.dbbrain.TdsqlAuditLog("myLog",
            end_time="%s",
            filter=tencentcloud.dbbrain.TdsqlAuditLogFilterArgs(
                hosts=[
                    "%%",
                    "127.0.0.1",
                ],
                users=[
                    "tf_test",
                    "mysql",
                ],
            ),
            instance_id="%s",
            node_request_type="dcdb",
            product="dcdb",
            start_time="%s")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TdsqlAuditLogArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TdsqlAuditLogArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['TdsqlAuditLogFilterArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 node_request_type: Optional[pulumi.Input[str]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TdsqlAuditLogArgs.__new__(TdsqlAuditLogArgs)

            if end_time is None and not opts.urn:
                raise TypeError("Missing required property 'end_time'")
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["filter"] = filter
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if node_request_type is None and not opts.urn:
                raise TypeError("Missing required property 'node_request_type'")
            __props__.__dict__["node_request_type"] = node_request_type
            if product is None and not opts.urn:
                raise TypeError("Missing required property 'product'")
            __props__.__dict__["product"] = product
            if start_time is None and not opts.urn:
                raise TypeError("Missing required property 'start_time'")
            __props__.__dict__["start_time"] = start_time
        super(TdsqlAuditLog, __self__).__init__(
            'tencentcloud:Dbbrain/tdsqlAuditLog:TdsqlAuditLog',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            filter: Optional[pulumi.Input[pulumi.InputType['TdsqlAuditLogFilterArgs']]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            node_request_type: Optional[pulumi.Input[str]] = None,
            product: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None) -> 'TdsqlAuditLog':
        """
        Get an existing TdsqlAuditLog resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_time: Deadline time, such as `2019-09-11 10:13:14`.
        :param pulumi.Input[pulumi.InputType['TdsqlAuditLogFilterArgs']] filter: Filter conditions. Logs can be filtered according to the filter conditions set.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] node_request_type: Consistent with Product. For example: dcdb, mariadb.
        :param pulumi.Input[str] product: Service product type, supported values include: dcdb - cloud database Tdsql, mariadb - cloud database MariaDB for MariaDB..
        :param pulumi.Input[str] start_time: Start time, such as `2019-09-10 12:13:14`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TdsqlAuditLogState.__new__(_TdsqlAuditLogState)

        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["filter"] = filter
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["node_request_type"] = node_request_type
        __props__.__dict__["product"] = product
        __props__.__dict__["start_time"] = start_time
        return TdsqlAuditLog(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        Deadline time, such as `2019-09-11 10:13:14`.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.TdsqlAuditLogFilter']]:
        """
        Filter conditions. Logs can be filtered according to the filter conditions set.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="nodeRequestType")
    def node_request_type(self) -> pulumi.Output[str]:
        """
        Consistent with Product. For example: dcdb, mariadb.
        """
        return pulumi.get(self, "node_request_type")

    @property
    @pulumi.getter
    def product(self) -> pulumi.Output[str]:
        """
        Service product type, supported values include: dcdb - cloud database Tdsql, mariadb - cloud database MariaDB for MariaDB..
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Start time, such as `2019-09-10 12:13:14`.
        """
        return pulumi.get(self, "start_time")

