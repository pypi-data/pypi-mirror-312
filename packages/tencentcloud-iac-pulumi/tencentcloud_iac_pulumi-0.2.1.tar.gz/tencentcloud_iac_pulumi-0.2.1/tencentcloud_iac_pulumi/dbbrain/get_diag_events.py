# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDiagEventsResult',
    'AwaitableGetDiagEventsResult',
    'get_diag_events',
    'get_diag_events_output',
]

@pulumi.output_type
class GetDiagEventsResult:
    """
    A collection of values returned by getDiagEvents.
    """
    def __init__(__self__, end_time=None, id=None, instance_ids=None, lists=None, result_output_file=None, severities=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if severities and not isinstance(severities, list):
            raise TypeError("Expected argument 'severities' to be a list")
        pulumi.set(__self__, "severities", severities)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetDiagEventsListResult']:
        """
        diag event list.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def severities(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetDiagEventsResult(GetDiagEventsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiagEventsResult(
            end_time=self.end_time,
            id=self.id,
            instance_ids=self.instance_ids,
            lists=self.lists,
            result_output_file=self.result_output_file,
            severities=self.severities,
            start_time=self.start_time)


def get_diag_events(end_time: Optional[str] = None,
                    instance_ids: Optional[Sequence[str]] = None,
                    result_output_file: Optional[str] = None,
                    severities: Optional[Sequence[int]] = None,
                    start_time: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiagEventsResult:
    """
    Use this data source to query detailed information of dbbrain diag_events

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    diag_events = tencentcloud.Dbbrain.get_diag_events(end_time="%s",
        instance_ids=["%s"],
        severities=[
            1,
            4,
            5,
        ],
        start_time="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: end time.
    :param Sequence[str] instance_ids: instance id list.
    :param str result_output_file: Used to save results.
    :param Sequence[int] severities: severity list, optional value is 1-fatal, 2-severity, 3-warning, 4-tips, 5-health.
    :param str start_time: start time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceIds'] = instance_ids
    __args__['resultOutputFile'] = result_output_file
    __args__['severities'] = severities
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getDiagEvents:getDiagEvents', __args__, opts=opts, typ=GetDiagEventsResult).value

    return AwaitableGetDiagEventsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        lists=pulumi.get(__ret__, 'lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        severities=pulumi.get(__ret__, 'severities'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_diag_events)
def get_diag_events_output(end_time: Optional[pulumi.Input[str]] = None,
                           instance_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           severities: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                           start_time: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDiagEventsResult]:
    """
    Use this data source to query detailed information of dbbrain diag_events

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    diag_events = tencentcloud.Dbbrain.get_diag_events(end_time="%s",
        instance_ids=["%s"],
        severities=[
            1,
            4,
            5,
        ],
        start_time="%s")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: end time.
    :param Sequence[str] instance_ids: instance id list.
    :param str result_output_file: Used to save results.
    :param Sequence[int] severities: severity list, optional value is 1-fatal, 2-severity, 3-warning, 4-tips, 5-health.
    :param str start_time: start time.
    """
    ...
