# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSqlTemplatesResult',
    'AwaitableGetSqlTemplatesResult',
    'get_sql_templates',
    'get_sql_templates_output',
]

@pulumi.output_type
class GetSqlTemplatesResult:
    """
    A collection of values returned by getSqlTemplates.
    """
    def __init__(__self__, id=None, instance_id=None, product=None, result_output_file=None, schema=None, sql_id=None, sql_template=None, sql_text=None, sql_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if schema and not isinstance(schema, str):
            raise TypeError("Expected argument 'schema' to be a str")
        pulumi.set(__self__, "schema", schema)
        if sql_id and not isinstance(sql_id, int):
            raise TypeError("Expected argument 'sql_id' to be a int")
        pulumi.set(__self__, "sql_id", sql_id)
        if sql_template and not isinstance(sql_template, str):
            raise TypeError("Expected argument 'sql_template' to be a str")
        pulumi.set(__self__, "sql_template", sql_template)
        if sql_text and not isinstance(sql_text, str):
            raise TypeError("Expected argument 'sql_text' to be a str")
        pulumi.set(__self__, "sql_text", sql_text)
        if sql_type and not isinstance(sql_type, str):
            raise TypeError("Expected argument 'sql_type' to be a str")
        pulumi.set(__self__, "sql_type", sql_type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def product(self) -> Optional[str]:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="sqlId")
    def sql_id(self) -> int:
        """
        SQL template ID.
        """
        return pulumi.get(self, "sql_id")

    @property
    @pulumi.getter(name="sqlTemplate")
    def sql_template(self) -> str:
        """
        SQL template content.
        """
        return pulumi.get(self, "sql_template")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> str:
        """
        sql type.
        """
        return pulumi.get(self, "sql_type")


class AwaitableGetSqlTemplatesResult(GetSqlTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSqlTemplatesResult(
            id=self.id,
            instance_id=self.instance_id,
            product=self.product,
            result_output_file=self.result_output_file,
            schema=self.schema,
            sql_id=self.sql_id,
            sql_template=self.sql_template,
            sql_text=self.sql_text,
            sql_type=self.sql_type)


def get_sql_templates(instance_id: Optional[str] = None,
                      product: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      schema: Optional[str] = None,
                      sql_text: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSqlTemplatesResult:
    """
    Use this data source to query detailed information of dbbrain sql_templates

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    sql_templates = tencentcloud.Dbbrain.get_sql_templates(instance_id="",
        product="",
        schema="",
        sql_text="")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: instance id.
    :param str product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL, the default is mysql.
    :param str result_output_file: Used to save results.
    :param str schema: database name.
    :param str sql_text: SQL statements.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    __args__['schema'] = schema
    __args__['sqlText'] = sql_text
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dbbrain/getSqlTemplates:getSqlTemplates', __args__, opts=opts, typ=GetSqlTemplatesResult).value

    return AwaitableGetSqlTemplatesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        product=pulumi.get(__ret__, 'product'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        schema=pulumi.get(__ret__, 'schema'),
        sql_id=pulumi.get(__ret__, 'sql_id'),
        sql_template=pulumi.get(__ret__, 'sql_template'),
        sql_text=pulumi.get(__ret__, 'sql_text'),
        sql_type=pulumi.get(__ret__, 'sql_type'))


@_utilities.lift_output_func(get_sql_templates)
def get_sql_templates_output(instance_id: Optional[pulumi.Input[str]] = None,
                             product: Optional[pulumi.Input[Optional[str]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             schema: Optional[pulumi.Input[str]] = None,
                             sql_text: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSqlTemplatesResult]:
    """
    Use this data source to query detailed information of dbbrain sql_templates

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    sql_templates = tencentcloud.Dbbrain.get_sql_templates(instance_id="",
        product="",
        schema="",
        sql_text="")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: instance id.
    :param str product: Service product type, supported values include: mysql - cloud database MySQL, cynosdb - cloud database CynosDB for MySQL, the default is mysql.
    :param str result_output_file: Used to save results.
    :param str schema: database name.
    :param str sql_text: SQL statements.
    """
    ...
