# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SqlFilterArgs', 'SqlFilter']

@pulumi.input_type
class SqlFilterArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 filter_key: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 max_concurrency: pulumi.Input[int],
                 session_token: pulumi.Input['SqlFilterSessionTokenArgs'],
                 sql_type: pulumi.Input[str],
                 product: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SqlFilter resource.
        :param pulumi.Input[int] duration: filter duration.
        :param pulumi.Input[str] filter_key: filter key.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[int] max_concurrency: maximum concurreny.
        :param pulumi.Input['SqlFilterSessionTokenArgs'] session_token: session token.
        :param pulumi.Input[str] sql_type: sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        :param pulumi.Input[str] product: product, optional value is &amp;#39;mysql&amp;#39;, &amp;#39;cynosdb&amp;#39;.
        :param pulumi.Input[str] status: filter status.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "filter_key", filter_key)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        pulumi.set(__self__, "session_token", session_token)
        pulumi.set(__self__, "sql_type", sql_type)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        """
        filter duration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="filterKey")
    def filter_key(self) -> pulumi.Input[str]:
        """
        filter key.
        """
        return pulumi.get(self, "filter_key")

    @filter_key.setter
    def filter_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_key", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Input[int]:
        """
        maximum concurreny.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> pulumi.Input['SqlFilterSessionTokenArgs']:
        """
        session token.
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: pulumi.Input['SqlFilterSessionTokenArgs']):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> pulumi.Input[str]:
        """
        sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        """
        return pulumi.get(self, "sql_type")

    @sql_type.setter
    def sql_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_type", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[str]]:
        """
        product, optional value is &amp;#39;mysql&amp;#39;, &amp;#39;cynosdb&amp;#39;.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        filter status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _SqlFilterState:
    def __init__(__self__, *,
                 duration: Optional[pulumi.Input[int]] = None,
                 filter_id: Optional[pulumi.Input[int]] = None,
                 filter_key: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input['SqlFilterSessionTokenArgs']] = None,
                 sql_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SqlFilter resources.
        :param pulumi.Input[int] duration: filter duration.
        :param pulumi.Input[int] filter_id: filter id.
        :param pulumi.Input[str] filter_key: filter key.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[int] max_concurrency: maximum concurreny.
        :param pulumi.Input[str] product: product, optional value is &amp;#39;mysql&amp;#39;, &amp;#39;cynosdb&amp;#39;.
        :param pulumi.Input['SqlFilterSessionTokenArgs'] session_token: session token.
        :param pulumi.Input[str] sql_type: sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        :param pulumi.Input[str] status: filter status.
        """
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if filter_id is not None:
            pulumi.set(__self__, "filter_id", filter_id)
        if filter_key is not None:
            pulumi.set(__self__, "filter_key", filter_key)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if product is not None:
            pulumi.set(__self__, "product", product)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        filter duration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> Optional[pulumi.Input[int]]:
        """
        filter id.
        """
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="filterKey")
    def filter_key(self) -> Optional[pulumi.Input[str]]:
        """
        filter key.
        """
        return pulumi.get(self, "filter_key")

    @filter_key.setter
    def filter_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_key", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        maximum concurreny.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[str]]:
        """
        product, optional value is &amp;#39;mysql&amp;#39;, &amp;#39;cynosdb&amp;#39;.
        """
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input['SqlFilterSessionTokenArgs']]:
        """
        session token.
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input['SqlFilterSessionTokenArgs']]):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[pulumi.Input[str]]:
        """
        sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        """
        return pulumi.get(self, "sql_type")

    @sql_type.setter
    def sql_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sql_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        filter status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class SqlFilter(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 filter_key: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[pulumi.InputType['SqlFilterSessionTokenArgs']]] = None,
                 sql_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dbbrain sql_filter.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        region = config.get("region")
        if region is None:
            region = "ap-guangzhou"
        mysql = tencentcloud.Mysql.get_instance(instance_name="instance_name")
        mysql_id = mysql.instance_lists[0].mysql_id
        sql_filter = tencentcloud.dbbrain.SqlFilter("sqlFilter",
            instance_id=mysql_id,
            session_token=tencentcloud.dbbrain.SqlFilterSessionTokenArgs(
                user="test",
                password="===password===",
            ),
            sql_type="SELECT",
            filter_key="filter_key",
            max_concurrency=10,
            duration=3600)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] duration: filter duration.
        :param pulumi.Input[str] filter_key: filter key.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[int] max_concurrency: maximum concurreny.
        :param pulumi.Input[str] product: product, optional value is &amp;#39;mysql&amp;#39;, &amp;#39;cynosdb&amp;#39;.
        :param pulumi.Input[pulumi.InputType['SqlFilterSessionTokenArgs']] session_token: session token.
        :param pulumi.Input[str] sql_type: sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        :param pulumi.Input[str] status: filter status.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SqlFilterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dbbrain sql_filter.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        region = config.get("region")
        if region is None:
            region = "ap-guangzhou"
        mysql = tencentcloud.Mysql.get_instance(instance_name="instance_name")
        mysql_id = mysql.instance_lists[0].mysql_id
        sql_filter = tencentcloud.dbbrain.SqlFilter("sqlFilter",
            instance_id=mysql_id,
            session_token=tencentcloud.dbbrain.SqlFilterSessionTokenArgs(
                user="test",
                password="===password===",
            ),
            sql_type="SELECT",
            filter_key="filter_key",
            max_concurrency=10,
            duration=3600)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SqlFilterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SqlFilterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 filter_key: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 product: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[pulumi.InputType['SqlFilterSessionTokenArgs']]] = None,
                 sql_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SqlFilterArgs.__new__(SqlFilterArgs)

            if duration is None and not opts.urn:
                raise TypeError("Missing required property 'duration'")
            __props__.__dict__["duration"] = duration
            if filter_key is None and not opts.urn:
                raise TypeError("Missing required property 'filter_key'")
            __props__.__dict__["filter_key"] = filter_key
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if max_concurrency is None and not opts.urn:
                raise TypeError("Missing required property 'max_concurrency'")
            __props__.__dict__["max_concurrency"] = max_concurrency
            __props__.__dict__["product"] = product
            if session_token is None and not opts.urn:
                raise TypeError("Missing required property 'session_token'")
            __props__.__dict__["session_token"] = session_token
            if sql_type is None and not opts.urn:
                raise TypeError("Missing required property 'sql_type'")
            __props__.__dict__["sql_type"] = sql_type
            __props__.__dict__["status"] = status
            __props__.__dict__["filter_id"] = None
        super(SqlFilter, __self__).__init__(
            'tencentcloud:Dbbrain/sqlFilter:SqlFilter',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            duration: Optional[pulumi.Input[int]] = None,
            filter_id: Optional[pulumi.Input[int]] = None,
            filter_key: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            max_concurrency: Optional[pulumi.Input[int]] = None,
            product: Optional[pulumi.Input[str]] = None,
            session_token: Optional[pulumi.Input[pulumi.InputType['SqlFilterSessionTokenArgs']]] = None,
            sql_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'SqlFilter':
        """
        Get an existing SqlFilter resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] duration: filter duration.
        :param pulumi.Input[int] filter_id: filter id.
        :param pulumi.Input[str] filter_key: filter key.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[int] max_concurrency: maximum concurreny.
        :param pulumi.Input[str] product: product, optional value is &amp;#39;mysql&amp;#39;, &amp;#39;cynosdb&amp;#39;.
        :param pulumi.Input[pulumi.InputType['SqlFilterSessionTokenArgs']] session_token: session token.
        :param pulumi.Input[str] sql_type: sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        :param pulumi.Input[str] status: filter status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SqlFilterState.__new__(_SqlFilterState)

        __props__.__dict__["duration"] = duration
        __props__.__dict__["filter_id"] = filter_id
        __props__.__dict__["filter_key"] = filter_key
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["max_concurrency"] = max_concurrency
        __props__.__dict__["product"] = product
        __props__.__dict__["session_token"] = session_token
        __props__.__dict__["sql_type"] = sql_type
        __props__.__dict__["status"] = status
        return SqlFilter(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[int]:
        """
        filter duration.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Output[int]:
        """
        filter id.
        """
        return pulumi.get(self, "filter_id")

    @property
    @pulumi.getter(name="filterKey")
    def filter_key(self) -> pulumi.Output[str]:
        """
        filter key.
        """
        return pulumi.get(self, "filter_key")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Output[int]:
        """
        maximum concurreny.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter
    def product(self) -> pulumi.Output[Optional[str]]:
        """
        product, optional value is &amp;#39;mysql&amp;#39;, &amp;#39;cynosdb&amp;#39;.
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> pulumi.Output['outputs.SqlFilterSessionToken']:
        """
        session token.
        """
        return pulumi.get(self, "session_token")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> pulumi.Output[str]:
        """
        sql type, optional value is SELECT, UPDATE, DELETE, INSERT, REPLACE.
        """
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        filter status.
        """
        return pulumi.get(self, "status")

