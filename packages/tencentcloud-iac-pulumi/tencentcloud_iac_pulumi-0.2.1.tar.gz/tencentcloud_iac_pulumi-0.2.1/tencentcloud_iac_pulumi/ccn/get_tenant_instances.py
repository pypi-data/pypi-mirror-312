# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetTenantInstancesResult',
    'AwaitableGetTenantInstancesResult',
    'get_tenant_instances',
    'get_tenant_instances_output',
]

@pulumi.output_type
class GetTenantInstancesResult:
    """
    A collection of values returned by getTenantInstances.
    """
    def __init__(__self__, ccn_ids=None, id=None, is_security_locks=None, result_output_file=None, user_account_ids=None):
        if ccn_ids and not isinstance(ccn_ids, list):
            raise TypeError("Expected argument 'ccn_ids' to be a list")
        pulumi.set(__self__, "ccn_ids", ccn_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_security_locks and not isinstance(is_security_locks, list):
            raise TypeError("Expected argument 'is_security_locks' to be a list")
        pulumi.set(__self__, "is_security_locks", is_security_locks)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if user_account_ids and not isinstance(user_account_ids, list):
            raise TypeError("Expected argument 'user_account_ids' to be a list")
        pulumi.set(__self__, "user_account_ids", user_account_ids)

    @property
    @pulumi.getter(name="ccnIds")
    def ccn_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ccn_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSecurityLocks")
    def is_security_locks(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "is_security_locks")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="userAccountIds")
    def user_account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_account_ids")


class AwaitableGetTenantInstancesResult(GetTenantInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTenantInstancesResult(
            ccn_ids=self.ccn_ids,
            id=self.id,
            is_security_locks=self.is_security_locks,
            result_output_file=self.result_output_file,
            user_account_ids=self.user_account_ids)


def get_tenant_instances(ccn_ids: Optional[Sequence[str]] = None,
                         is_security_locks: Optional[Sequence[str]] = None,
                         result_output_file: Optional[str] = None,
                         user_account_ids: Optional[Sequence[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTenantInstancesResult:
    """
    Use this data source to query detailed information of vpc tenant_ccn

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tenant_ccn = tencentcloud.Ccn.get_tenant_instances(ccn_ids=["ccn-39lqkygf"],
        is_security_locks=["true"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] ccn_ids: filter by ccn ids, like: ['ccn-12345678'].
    :param Sequence[str] is_security_locks: filter by locked, like ['true'].
    :param str result_output_file: Used to save results.
    :param Sequence[str] user_account_ids: filter by ccn ids, like: ['12345678'].
    """
    __args__ = dict()
    __args__['ccnIds'] = ccn_ids
    __args__['isSecurityLocks'] = is_security_locks
    __args__['resultOutputFile'] = result_output_file
    __args__['userAccountIds'] = user_account_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ccn/getTenantInstances:getTenantInstances', __args__, opts=opts, typ=GetTenantInstancesResult).value

    return AwaitableGetTenantInstancesResult(
        ccn_ids=pulumi.get(__ret__, 'ccn_ids'),
        id=pulumi.get(__ret__, 'id'),
        is_security_locks=pulumi.get(__ret__, 'is_security_locks'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        user_account_ids=pulumi.get(__ret__, 'user_account_ids'))


@_utilities.lift_output_func(get_tenant_instances)
def get_tenant_instances_output(ccn_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                is_security_locks: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                user_account_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTenantInstancesResult]:
    """
    Use this data source to query detailed information of vpc tenant_ccn

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tenant_ccn = tencentcloud.Ccn.get_tenant_instances(ccn_ids=["ccn-39lqkygf"],
        is_security_locks=["true"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] ccn_ids: filter by ccn ids, like: ['ccn-12345678'].
    :param Sequence[str] is_security_locks: filter by locked, like ['true'].
    :param str result_output_file: Used to save results.
    :param Sequence[str] user_account_ids: filter by ccn ids, like: ['12345678'].
    """
    ...
