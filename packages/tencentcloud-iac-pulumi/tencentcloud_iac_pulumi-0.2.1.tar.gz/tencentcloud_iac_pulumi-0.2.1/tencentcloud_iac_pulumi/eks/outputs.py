# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterDnsServer',
    'ClusterInternalLb',
    'ClusterPublicLb',
    'ContainerInstanceCbsVolume',
    'ContainerInstanceContainer',
    'ContainerInstanceContainerLivenessProbe',
    'ContainerInstanceContainerReadinessProbe',
    'ContainerInstanceContainerVolumeMount',
    'ContainerInstanceImageRegistryCredential',
    'ContainerInstanceInitContainer',
    'ContainerInstanceInitContainerVolumeMount',
    'ContainerInstanceNfsVolume',
    'GetClusterCredentialAddressResult',
    'GetClusterCredentialInternalLbResult',
    'GetClusterCredentialPublicLbResult',
    'GetClustersListResult',
    'GetClustersListDnsServerResult',
]

@pulumi.output_type
class ClusterDnsServer(dict):
    def __init__(__self__, *,
                 domain: Optional[str] = None,
                 servers: Optional[Sequence[str]] = None):
        """
        :param str domain: DNS Server domain. Empty indicates all domain.
        :param Sequence[str] servers: List of DNS Server IP address, pattern: "ip[:port]".
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        DNS Server domain. Empty indicates all domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence[str]]:
        """
        List of DNS Server IP address, pattern: "ip[:port]".
        """
        return pulumi.get(self, "servers")


@pulumi.output_type
class ClusterInternalLb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterInternalLb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterInternalLb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterInternalLb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 subnet_id: Optional[str] = None):
        """
        :param bool enabled: Indicates weather the internal access LB enabled.
        :param str subnet_id: ID of subnet which related to Internal LB.
        """
        pulumi.set(__self__, "enabled", enabled)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates weather the internal access LB enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        ID of subnet which related to Internal LB.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ClusterPublicLb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowFromCidrs":
            suggest = "allow_from_cidrs"
        elif key == "extraParam":
            suggest = "extra_param"
        elif key == "securityGroup":
            suggest = "security_group"
        elif key == "securityPolicies":
            suggest = "security_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPublicLb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPublicLb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPublicLb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 allow_from_cidrs: Optional[Sequence[str]] = None,
                 extra_param: Optional[str] = None,
                 security_group: Optional[str] = None,
                 security_policies: Optional[Sequence[str]] = None):
        """
        :param bool enabled: Indicates weather the public access LB enabled.
        :param Sequence[str] allow_from_cidrs: List of CIDRs which allowed to access.
        :param str extra_param: Extra param text json.
        :param Sequence[str] security_policies: List of security allow IP or CIDRs, default deny all.
        """
        pulumi.set(__self__, "enabled", enabled)
        if allow_from_cidrs is not None:
            pulumi.set(__self__, "allow_from_cidrs", allow_from_cidrs)
        if extra_param is not None:
            pulumi.set(__self__, "extra_param", extra_param)
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if security_policies is not None:
            pulumi.set(__self__, "security_policies", security_policies)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates weather the public access LB enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="allowFromCidrs")
    def allow_from_cidrs(self) -> Optional[Sequence[str]]:
        """
        List of CIDRs which allowed to access.
        """
        return pulumi.get(self, "allow_from_cidrs")

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> Optional[str]:
        """
        Extra param text json.
        """
        return pulumi.get(self, "extra_param")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[str]:
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Optional[Sequence[str]]:
        """
        List of security allow IP or CIDRs, default deny all.
        """
        return pulumi.get(self, "security_policies")


@pulumi.output_type
class ContainerInstanceCbsVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceCbsVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceCbsVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceCbsVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: str,
                 name: str):
        """
        :param str disk_id: ID of CBS.
        :param str name: Name of CBS volume.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        """
        ID of CBS.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of CBS volume.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ContainerInstanceContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "envVars":
            suggest = "env_vars"
        elif key == "livenessProbe":
            suggest = "liveness_probe"
        elif key == "readinessProbe":
            suggest = "readiness_probe"
        elif key == "volumeMounts":
            suggest = "volume_mounts"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 commands: Optional[Sequence[str]] = None,
                 cpu: Optional[float] = None,
                 env_vars: Optional[Mapping[str, Any]] = None,
                 liveness_probe: Optional['outputs.ContainerInstanceContainerLivenessProbe'] = None,
                 memory: Optional[float] = None,
                 readiness_probe: Optional['outputs.ContainerInstanceContainerReadinessProbe'] = None,
                 volume_mounts: Optional[Sequence['outputs.ContainerInstanceContainerVolumeMount']] = None,
                 working_dir: Optional[str] = None):
        """
        :param str image: Image of Container.
        :param str name: Name of Container.
        :param Sequence[str] args: Container launch argument list.
        :param Sequence[str] commands: Container launch command list.
        :param float cpu: Number of cpu core of container.
        :param Mapping[str, Any] env_vars: Map of environment variables of container OS.
        :param 'ContainerInstanceContainerLivenessProbeArgs' liveness_probe: Configuration block of LivenessProbe.
        :param float memory: Memory size of container.
        :param 'ContainerInstanceContainerReadinessProbeArgs' readiness_probe: Configuration block of ReadinessProbe.
        :param Sequence['ContainerInstanceContainerVolumeMountArgs'] volume_mounts: List of volume mount informations.
        :param str working_dir: Container working directory.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if env_vars is not None:
            pulumi.set(__self__, "env_vars", env_vars)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        Image of Container.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Container.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Container launch argument list.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        """
        Container launch command list.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[float]:
        """
        Number of cpu core of container.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="envVars")
    def env_vars(self) -> Optional[Mapping[str, Any]]:
        """
        Map of environment variables of container OS.
        """
        return pulumi.get(self, "env_vars")

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional['outputs.ContainerInstanceContainerLivenessProbe']:
        """
        Configuration block of LivenessProbe.
        """
        return pulumi.get(self, "liveness_probe")

    @property
    @pulumi.getter
    def memory(self) -> Optional[float]:
        """
        Memory size of container.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional['outputs.ContainerInstanceContainerReadinessProbe']:
        """
        Configuration block of ReadinessProbe.
        """
        return pulumi.get(self, "readiness_probe")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.ContainerInstanceContainerVolumeMount']]:
        """
        List of volume mount informations.
        """
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        """
        Container working directory.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class ContainerInstanceContainerLivenessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "execCommands":
            suggest = "exec_commands"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGetPath":
            suggest = "http_get_path"
        elif key == "httpGetPort":
            suggest = "http_get_port"
        elif key == "httpGetScheme":
            suggest = "http_get_scheme"
        elif key == "initDelaySeconds":
            suggest = "init_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "tcpSocketPort":
            suggest = "tcp_socket_port"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceContainerLivenessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceContainerLivenessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceContainerLivenessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_commands: Optional[Sequence[str]] = None,
                 failure_threshold: Optional[int] = None,
                 http_get_path: Optional[str] = None,
                 http_get_port: Optional[int] = None,
                 http_get_scheme: Optional[str] = None,
                 init_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket_port: Optional[int] = None,
                 timeout_seconds: Optional[int] = None):
        """
        :param Sequence[str] exec_commands: List of execution commands.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        :param str http_get_path: HttpGet detection path.
        :param int http_get_port: HttpGet detection port.
        :param str http_get_scheme: HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        :param int init_delay_seconds: Number of seconds after the container has started before probes are initiated.
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        :param int tcp_socket_port: TCP Socket detection port.
        :param int timeout_seconds: Number of seconds after which the probe times out.
               Defaults to 1 second. Minimum value is `1`.
        """
        if exec_commands is not None:
            pulumi.set(__self__, "exec_commands", exec_commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get_path is not None:
            pulumi.set(__self__, "http_get_path", http_get_path)
        if http_get_port is not None:
            pulumi.set(__self__, "http_get_port", http_get_port)
        if http_get_scheme is not None:
            pulumi.set(__self__, "http_get_scheme", http_get_scheme)
        if init_delay_seconds is not None:
            pulumi.set(__self__, "init_delay_seconds", init_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket_port is not None:
            pulumi.set(__self__, "tcp_socket_port", tcp_socket_port)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="execCommands")
    def exec_commands(self) -> Optional[Sequence[str]]:
        """
        List of execution commands.
        """
        return pulumi.get(self, "exec_commands")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGetPath")
    def http_get_path(self) -> Optional[str]:
        """
        HttpGet detection path.
        """
        return pulumi.get(self, "http_get_path")

    @property
    @pulumi.getter(name="httpGetPort")
    def http_get_port(self) -> Optional[int]:
        """
        HttpGet detection port.
        """
        return pulumi.get(self, "http_get_port")

    @property
    @pulumi.getter(name="httpGetScheme")
    def http_get_scheme(self) -> Optional[str]:
        """
        HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        """
        return pulumi.get(self, "http_get_scheme")

    @property
    @pulumi.getter(name="initDelaySeconds")
    def init_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before probes are initiated.
        """
        return pulumi.get(self, "init_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocketPort")
    def tcp_socket_port(self) -> Optional[int]:
        """
        TCP Socket detection port.
        """
        return pulumi.get(self, "tcp_socket_port")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is `1`.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class ContainerInstanceContainerReadinessProbe(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "execCommands":
            suggest = "exec_commands"
        elif key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "httpGetPath":
            suggest = "http_get_path"
        elif key == "httpGetPort":
            suggest = "http_get_port"
        elif key == "httpGetScheme":
            suggest = "http_get_scheme"
        elif key == "initDelaySeconds":
            suggest = "init_delay_seconds"
        elif key == "periodSeconds":
            suggest = "period_seconds"
        elif key == "successThreshold":
            suggest = "success_threshold"
        elif key == "tcpSocketPort":
            suggest = "tcp_socket_port"
        elif key == "timeoutSeconds":
            suggest = "timeout_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceContainerReadinessProbe. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceContainerReadinessProbe.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceContainerReadinessProbe.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exec_commands: Optional[Sequence[str]] = None,
                 failure_threshold: Optional[int] = None,
                 http_get_path: Optional[str] = None,
                 http_get_port: Optional[int] = None,
                 http_get_scheme: Optional[str] = None,
                 init_delay_seconds: Optional[int] = None,
                 period_seconds: Optional[int] = None,
                 success_threshold: Optional[int] = None,
                 tcp_socket_port: Optional[int] = None,
                 timeout_seconds: Optional[int] = None):
        """
        :param Sequence[str] exec_commands: List of execution commands.
        :param int failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        :param str http_get_path: HttpGet detection path.
        :param int http_get_port: HttpGet detection port.
        :param str http_get_scheme: HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        :param int init_delay_seconds: Number of seconds after the container has started before probes are initiated.
        :param int period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        :param int success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        :param int tcp_socket_port: TCP Socket detection port.
        :param int timeout_seconds: Number of seconds after which the probe times out.
               Defaults to 1 second. Minimum value is `1`.
        """
        if exec_commands is not None:
            pulumi.set(__self__, "exec_commands", exec_commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get_path is not None:
            pulumi.set(__self__, "http_get_path", http_get_path)
        if http_get_port is not None:
            pulumi.set(__self__, "http_get_port", http_get_port)
        if http_get_scheme is not None:
            pulumi.set(__self__, "http_get_scheme", http_get_scheme)
        if init_delay_seconds is not None:
            pulumi.set(__self__, "init_delay_seconds", init_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket_port is not None:
            pulumi.set(__self__, "tcp_socket_port", tcp_socket_port)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="execCommands")
    def exec_commands(self) -> Optional[Sequence[str]]:
        """
        List of execution commands.
        """
        return pulumi.get(self, "exec_commands")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[int]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        """
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="httpGetPath")
    def http_get_path(self) -> Optional[str]:
        """
        HttpGet detection path.
        """
        return pulumi.get(self, "http_get_path")

    @property
    @pulumi.getter(name="httpGetPort")
    def http_get_port(self) -> Optional[int]:
        """
        HttpGet detection port.
        """
        return pulumi.get(self, "http_get_port")

    @property
    @pulumi.getter(name="httpGetScheme")
    def http_get_scheme(self) -> Optional[str]:
        """
        HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        """
        return pulumi.get(self, "http_get_scheme")

    @property
    @pulumi.getter(name="initDelaySeconds")
    def init_delay_seconds(self) -> Optional[int]:
        """
        Number of seconds after the container has started before probes are initiated.
        """
        return pulumi.get(self, "init_delay_seconds")

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[int]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        """
        return pulumi.get(self, "success_threshold")

    @property
    @pulumi.getter(name="tcpSocketPort")
    def tcp_socket_port(self) -> Optional[int]:
        """
        TCP Socket detection port.
        """
        return pulumi.get(self, "tcp_socket_port")

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[int]:
        """
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is `1`.
        """
        return pulumi.get(self, "timeout_seconds")


@pulumi.output_type
class ContainerInstanceContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPropagation":
            suggest = "mount_propagation"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "subPath":
            suggest = "sub_path"
        elif key == "subPathExpr":
            suggest = "sub_path_expr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 path: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        """
        :param str name: Volume name.
        :param str path: Volume mount path.
        :param str mount_propagation: Volume mount propagation.
        :param bool read_only: Whether the volume is read-only.
        :param str sub_path: Volume mount sub-path.
        :param str sub_path_expr: Volume mount sub-path expression.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Volume name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Volume mount path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        """
        Volume mount propagation.
        """
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Whether the volume is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        """
        Volume mount sub-path.
        """
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        """
        Volume mount sub-path expression.
        """
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class ContainerInstanceImageRegistryCredential(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 password: Optional[str] = None,
                 server: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str name: Name of credential.
        :param str password: Password.
        :param str server: Address of image registry.
        :param str username: Username.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of credential.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def server(self) -> Optional[str]:
        """
        Address of image registry.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        Username.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class ContainerInstanceInitContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "envVars":
            suggest = "env_vars"
        elif key == "volumeMounts":
            suggest = "volume_mounts"
        elif key == "workingDir":
            suggest = "working_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceInitContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceInitContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceInitContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 image: str,
                 name: str,
                 args: Optional[Sequence[str]] = None,
                 commands: Optional[Sequence[str]] = None,
                 cpu: Optional[float] = None,
                 env_vars: Optional[Mapping[str, Any]] = None,
                 memory: Optional[float] = None,
                 volume_mounts: Optional[Sequence['outputs.ContainerInstanceInitContainerVolumeMount']] = None,
                 working_dir: Optional[str] = None):
        """
        :param str image: Image of Container.
        :param str name: Name of Container.
        :param Sequence[str] args: Container launch argument list.
        :param Sequence[str] commands: Container launch command list.
        :param float cpu: Number of cpu core of container.
        :param Mapping[str, Any] env_vars: Map of environment variables of container OS.
        :param float memory: Memory size of container.
        :param Sequence['ContainerInstanceInitContainerVolumeMountArgs'] volume_mounts: List of volume mount informations.
        :param str working_dir: Container working directory.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if env_vars is not None:
            pulumi.set(__self__, "env_vars", env_vars)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def image(self) -> str:
        """
        Image of Container.
        """
        return pulumi.get(self, "image")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Container.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        Container launch argument list.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        """
        Container launch command list.
        """
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def cpu(self) -> Optional[float]:
        """
        Number of cpu core of container.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="envVars")
    def env_vars(self) -> Optional[Mapping[str, Any]]:
        """
        Map of environment variables of container OS.
        """
        return pulumi.get(self, "env_vars")

    @property
    @pulumi.getter
    def memory(self) -> Optional[float]:
        """
        Memory size of container.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[Sequence['outputs.ContainerInstanceInitContainerVolumeMount']]:
        """
        List of volume mount informations.
        """
        return pulumi.get(self, "volume_mounts")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[str]:
        """
        Container working directory.
        """
        return pulumi.get(self, "working_dir")


@pulumi.output_type
class ContainerInstanceInitContainerVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPropagation":
            suggest = "mount_propagation"
        elif key == "readOnly":
            suggest = "read_only"
        elif key == "subPath":
            suggest = "sub_path"
        elif key == "subPathExpr":
            suggest = "sub_path_expr"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceInitContainerVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceInitContainerVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceInitContainerVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 path: str,
                 mount_propagation: Optional[str] = None,
                 read_only: Optional[bool] = None,
                 sub_path: Optional[str] = None,
                 sub_path_expr: Optional[str] = None):
        """
        :param str name: Volume name.
        :param str path: Volume mount path.
        :param str mount_propagation: Volume mount propagation.
        :param bool read_only: Whether the volume is read-only.
        :param str sub_path: Volume mount sub-path.
        :param str sub_path_expr: Volume mount sub-path expression.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Volume name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Volume mount path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[str]:
        """
        Volume mount propagation.
        """
        return pulumi.get(self, "mount_propagation")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Whether the volume is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[str]:
        """
        Volume mount sub-path.
        """
        return pulumi.get(self, "sub_path")

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[str]:
        """
        Volume mount sub-path expression.
        """
        return pulumi.get(self, "sub_path_expr")


@pulumi.output_type
class ContainerInstanceNfsVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerInstanceNfsVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerInstanceNfsVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerInstanceNfsVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 path: str,
                 server: str,
                 read_only: Optional[bool] = None):
        """
        :param str name: Name of NFS volume.
        :param str path: NFS volume path.
        :param str server: NFS server address.
        :param bool read_only: Indicates whether the volume is read only. Default is `false`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of NFS volume.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        NFS volume path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        NFS server address.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Indicates whether the volume is read only. Default is `false`.
        """
        return pulumi.get(self, "read_only")


@pulumi.output_type
class GetClusterCredentialAddressResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 port: str,
                 type: str):
        """
        :param str ip: IP Address.
        :param str port: Port.
        :param str type: Type of IP, can be `advertise`, `public`, etc.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        IP Address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def port(self) -> str:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of IP, can be `advertise`, `public`, etc.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetClusterCredentialInternalLbResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 subnet_id: str):
        """
        :param bool enabled: Indicates weather the public access LB enabled.
        :param str subnet_id: ID of subnet which related to Internal LB.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates weather the public access LB enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of subnet which related to Internal LB.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetClusterCredentialPublicLbResult(dict):
    def __init__(__self__, *,
                 allow_from_cidrs: Sequence[str],
                 enabled: bool,
                 extra_param: str,
                 security_group: str,
                 security_policies: Sequence[str]):
        """
        :param Sequence[str] allow_from_cidrs: List of CIDRs which allowed to access.
        :param bool enabled: Indicates weather the public access LB enabled.
        :param str extra_param: Extra param text json.
        :param str security_group: Security group.
        :param Sequence[str] security_policies: List of security allow IP or CIDRs, default deny all.
        """
        pulumi.set(__self__, "allow_from_cidrs", allow_from_cidrs)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "extra_param", extra_param)
        pulumi.set(__self__, "security_group", security_group)
        pulumi.set(__self__, "security_policies", security_policies)

    @property
    @pulumi.getter(name="allowFromCidrs")
    def allow_from_cidrs(self) -> Sequence[str]:
        """
        List of CIDRs which allowed to access.
        """
        return pulumi.get(self, "allow_from_cidrs")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Indicates weather the public access LB enabled.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> str:
        """
        Extra param text json.
        """
        return pulumi.get(self, "extra_param")

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> str:
        """
        Security group.
        """
        return pulumi.get(self, "security_group")

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Sequence[str]:
        """
        List of security allow IP or CIDRs, default deny all.
        """
        return pulumi.get(self, "security_policies")


@pulumi.output_type
class GetClustersListResult(dict):
    def __init__(__self__, *,
                 cluster_desc: str,
                 cluster_id: str,
                 cluster_name: str,
                 created_time: str,
                 dns_servers: Sequence['outputs.GetClustersListDnsServerResult'],
                 enable_vpc_core_dns: bool,
                 k8s_version: str,
                 need_delete_cbs: bool,
                 service_subnet_id: str,
                 status: str,
                 subnet_ids: Sequence[str],
                 tags: Mapping[str, Any],
                 vpc_id: str):
        """
        :param str cluster_desc: Description of the cluster.
        :param str cluster_id: ID of the cluster. Conflict with cluster_name, can not be set at the same time.
        :param str cluster_name: Name of the cluster. Conflict with cluster_id, can not be set at the same time.
        :param str created_time: Create time of the clusters.
        :param Sequence['GetClustersListDnsServerArgs'] dns_servers: List of cluster custom DNS Server info.
        :param bool enable_vpc_core_dns: Indicates whether to enable dns in user cluster, default value is `true`.
        :param str k8s_version: EKS cluster kubernetes version.
        :param bool need_delete_cbs: Indicates whether to delete CBS after EKS cluster remove.
        :param str service_subnet_id: Subnet id of service.
        :param str status: EKS status.
        :param Sequence[str] subnet_ids: Subnet id list.
        :param Mapping[str, Any] tags: Tags of EKS cluster.
        :param str vpc_id: Vpc id.
        """
        pulumi.set(__self__, "cluster_desc", cluster_desc)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "dns_servers", dns_servers)
        pulumi.set(__self__, "enable_vpc_core_dns", enable_vpc_core_dns)
        pulumi.set(__self__, "k8s_version", k8s_version)
        pulumi.set(__self__, "need_delete_cbs", need_delete_cbs)
        pulumi.set(__self__, "service_subnet_id", service_subnet_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> str:
        """
        Description of the cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        ID of the cluster. Conflict with cluster_name, can not be set at the same time.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Name of the cluster. Conflict with cluster_id, can not be set at the same time.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        Create time of the clusters.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Sequence['outputs.GetClustersListDnsServerResult']:
        """
        List of cluster custom DNS Server info.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="enableVpcCoreDns")
    def enable_vpc_core_dns(self) -> bool:
        """
        Indicates whether to enable dns in user cluster, default value is `true`.
        """
        return pulumi.get(self, "enable_vpc_core_dns")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> str:
        """
        EKS cluster kubernetes version.
        """
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter(name="needDeleteCbs")
    def need_delete_cbs(self) -> bool:
        """
        Indicates whether to delete CBS after EKS cluster remove.
        """
        return pulumi.get(self, "need_delete_cbs")

    @property
    @pulumi.getter(name="serviceSubnetId")
    def service_subnet_id(self) -> str:
        """
        Subnet id of service.
        """
        return pulumi.get(self, "service_subnet_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        EKS status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        Subnet id list.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of EKS cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Vpc id.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetClustersListDnsServerResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 servers: Sequence[str]):
        """
        :param str domain: DNS Server domain. Empty indicates all domain.
        :param Sequence[str] servers: List of DNS Server IP address.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        DNS Server domain. Empty indicates all domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def servers(self) -> Sequence[str]:
        """
        List of DNS Server IP address.
        """
        return pulumi.get(self, "servers")


