# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ClusterDnsServerArgs',
    'ClusterInternalLbArgs',
    'ClusterPublicLbArgs',
    'ContainerInstanceCbsVolumeArgs',
    'ContainerInstanceContainerArgs',
    'ContainerInstanceContainerLivenessProbeArgs',
    'ContainerInstanceContainerReadinessProbeArgs',
    'ContainerInstanceContainerVolumeMountArgs',
    'ContainerInstanceImageRegistryCredentialArgs',
    'ContainerInstanceInitContainerArgs',
    'ContainerInstanceInitContainerVolumeMountArgs',
    'ContainerInstanceNfsVolumeArgs',
]

@pulumi.input_type
class ClusterDnsServerArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] domain: DNS Server domain. Empty indicates all domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] servers: List of DNS Server IP address, pattern: "ip[:port]".
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        DNS Server domain. Empty indicates all domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNS Server IP address, pattern: "ip[:port]".
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "servers", value)


@pulumi.input_type
class ClusterInternalLbArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: Indicates weather the internal access LB enabled.
        :param pulumi.Input[str] subnet_id: ID of subnet which related to Internal LB.
        """
        pulumi.set(__self__, "enabled", enabled)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Indicates weather the internal access LB enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of subnet which related to Internal LB.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class ClusterPublicLbArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 allow_from_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 extra_param: Optional[pulumi.Input[str]] = None,
                 security_group: Optional[pulumi.Input[str]] = None,
                 security_policies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] enabled: Indicates weather the public access LB enabled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_from_cidrs: List of CIDRs which allowed to access.
        :param pulumi.Input[str] extra_param: Extra param text json.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_policies: List of security allow IP or CIDRs, default deny all.
        """
        pulumi.set(__self__, "enabled", enabled)
        if allow_from_cidrs is not None:
            pulumi.set(__self__, "allow_from_cidrs", allow_from_cidrs)
        if extra_param is not None:
            pulumi.set(__self__, "extra_param", extra_param)
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if security_policies is not None:
            pulumi.set(__self__, "security_policies", security_policies)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        Indicates weather the public access LB enabled.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="allowFromCidrs")
    def allow_from_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of CIDRs which allowed to access.
        """
        return pulumi.get(self, "allow_from_cidrs")

    @allow_from_cidrs.setter
    def allow_from_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_from_cidrs", value)

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> Optional[pulumi.Input[str]]:
        """
        Extra param text json.
        """
        return pulumi.get(self, "extra_param")

    @extra_param.setter
    def extra_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_param", value)

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group")

    @security_group.setter
    def security_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group", value)

    @property
    @pulumi.getter(name="securityPolicies")
    def security_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of security allow IP or CIDRs, default deny all.
        """
        return pulumi.get(self, "security_policies")

    @security_policies.setter
    def security_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_policies", value)


@pulumi.input_type
class ContainerInstanceCbsVolumeArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] disk_id: ID of CBS.
        :param pulumi.Input[str] name: Name of CBS volume.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        ID of CBS.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of CBS volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ContainerInstanceContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cpu: Optional[pulumi.Input[float]] = None,
                 env_vars: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 liveness_probe: Optional[pulumi.Input['ContainerInstanceContainerLivenessProbeArgs']] = None,
                 memory: Optional[pulumi.Input[float]] = None,
                 readiness_probe: Optional[pulumi.Input['ContainerInstanceContainerReadinessProbeArgs']] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerVolumeMountArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image: Image of Container.
        :param pulumi.Input[str] name: Name of Container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Container launch argument list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Container launch command list.
        :param pulumi.Input[float] cpu: Number of cpu core of container.
        :param pulumi.Input[Mapping[str, Any]] env_vars: Map of environment variables of container OS.
        :param pulumi.Input['ContainerInstanceContainerLivenessProbeArgs'] liveness_probe: Configuration block of LivenessProbe.
        :param pulumi.Input[float] memory: Memory size of container.
        :param pulumi.Input['ContainerInstanceContainerReadinessProbeArgs'] readiness_probe: Configuration block of ReadinessProbe.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerVolumeMountArgs']]] volume_mounts: List of volume mount informations.
        :param pulumi.Input[str] working_dir: Container working directory.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if env_vars is not None:
            pulumi.set(__self__, "env_vars", env_vars)
        if liveness_probe is not None:
            pulumi.set(__self__, "liveness_probe", liveness_probe)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if readiness_probe is not None:
            pulumi.set(__self__, "readiness_probe", readiness_probe)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        Image of Container.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of Container.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Container launch argument list.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Container launch command list.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[float]]:
        """
        Number of cpu core of container.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="envVars")
    def env_vars(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Map of environment variables of container OS.
        """
        return pulumi.get(self, "env_vars")

    @env_vars.setter
    def env_vars(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "env_vars", value)

    @property
    @pulumi.getter(name="livenessProbe")
    def liveness_probe(self) -> Optional[pulumi.Input['ContainerInstanceContainerLivenessProbeArgs']]:
        """
        Configuration block of LivenessProbe.
        """
        return pulumi.get(self, "liveness_probe")

    @liveness_probe.setter
    def liveness_probe(self, value: Optional[pulumi.Input['ContainerInstanceContainerLivenessProbeArgs']]):
        pulumi.set(self, "liveness_probe", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[float]]:
        """
        Memory size of container.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="readinessProbe")
    def readiness_probe(self) -> Optional[pulumi.Input['ContainerInstanceContainerReadinessProbeArgs']]:
        """
        Configuration block of ReadinessProbe.
        """
        return pulumi.get(self, "readiness_probe")

    @readiness_probe.setter
    def readiness_probe(self, value: Optional[pulumi.Input['ContainerInstanceContainerReadinessProbeArgs']]):
        pulumi.set(self, "readiness_probe", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerVolumeMountArgs']]]]:
        """
        List of volume mount informations.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container working directory.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


@pulumi.input_type
class ContainerInstanceContainerLivenessProbeArgs:
    def __init__(__self__, *,
                 exec_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get_path: Optional[pulumi.Input[str]] = None,
                 http_get_port: Optional[pulumi.Input[int]] = None,
                 http_get_scheme: Optional[pulumi.Input[str]] = None,
                 init_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket_port: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exec_commands: List of execution commands.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        :param pulumi.Input[str] http_get_path: HttpGet detection path.
        :param pulumi.Input[int] http_get_port: HttpGet detection port.
        :param pulumi.Input[str] http_get_scheme: HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        :param pulumi.Input[int] init_delay_seconds: Number of seconds after the container has started before probes are initiated.
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        :param pulumi.Input[int] tcp_socket_port: TCP Socket detection port.
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out.
               Defaults to 1 second. Minimum value is `1`.
        """
        if exec_commands is not None:
            pulumi.set(__self__, "exec_commands", exec_commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get_path is not None:
            pulumi.set(__self__, "http_get_path", http_get_path)
        if http_get_port is not None:
            pulumi.set(__self__, "http_get_port", http_get_port)
        if http_get_scheme is not None:
            pulumi.set(__self__, "http_get_scheme", http_get_scheme)
        if init_delay_seconds is not None:
            pulumi.set(__self__, "init_delay_seconds", init_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket_port is not None:
            pulumi.set(__self__, "tcp_socket_port", tcp_socket_port)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="execCommands")
    def exec_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of execution commands.
        """
        return pulumi.get(self, "exec_commands")

    @exec_commands.setter
    def exec_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGetPath")
    def http_get_path(self) -> Optional[pulumi.Input[str]]:
        """
        HttpGet detection path.
        """
        return pulumi.get(self, "http_get_path")

    @http_get_path.setter
    def http_get_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get_path", value)

    @property
    @pulumi.getter(name="httpGetPort")
    def http_get_port(self) -> Optional[pulumi.Input[int]]:
        """
        HttpGet detection port.
        """
        return pulumi.get(self, "http_get_port")

    @http_get_port.setter
    def http_get_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_get_port", value)

    @property
    @pulumi.getter(name="httpGetScheme")
    def http_get_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        """
        return pulumi.get(self, "http_get_scheme")

    @http_get_scheme.setter
    def http_get_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get_scheme", value)

    @property
    @pulumi.getter(name="initDelaySeconds")
    def init_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before probes are initiated.
        """
        return pulumi.get(self, "init_delay_seconds")

    @init_delay_seconds.setter
    def init_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "init_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocketPort")
    def tcp_socket_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP Socket detection port.
        """
        return pulumi.get(self, "tcp_socket_port")

    @tcp_socket_port.setter
    def tcp_socket_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_socket_port", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ContainerInstanceContainerReadinessProbeArgs:
    def __init__(__self__, *,
                 exec_commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 failure_threshold: Optional[pulumi.Input[int]] = None,
                 http_get_path: Optional[pulumi.Input[str]] = None,
                 http_get_port: Optional[pulumi.Input[int]] = None,
                 http_get_scheme: Optional[pulumi.Input[str]] = None,
                 init_delay_seconds: Optional[pulumi.Input[int]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 success_threshold: Optional[pulumi.Input[int]] = None,
                 tcp_socket_port: Optional[pulumi.Input[int]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exec_commands: List of execution commands.
        :param pulumi.Input[int] failure_threshold: Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        :param pulumi.Input[str] http_get_path: HttpGet detection path.
        :param pulumi.Input[int] http_get_port: HttpGet detection port.
        :param pulumi.Input[str] http_get_scheme: HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        :param pulumi.Input[int] init_delay_seconds: Number of seconds after the container has started before probes are initiated.
        :param pulumi.Input[int] period_seconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        :param pulumi.Input[int] success_threshold: Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        :param pulumi.Input[int] tcp_socket_port: TCP Socket detection port.
        :param pulumi.Input[int] timeout_seconds: Number of seconds after which the probe times out.
               Defaults to 1 second. Minimum value is `1`.
        """
        if exec_commands is not None:
            pulumi.set(__self__, "exec_commands", exec_commands)
        if failure_threshold is not None:
            pulumi.set(__self__, "failure_threshold", failure_threshold)
        if http_get_path is not None:
            pulumi.set(__self__, "http_get_path", http_get_path)
        if http_get_port is not None:
            pulumi.set(__self__, "http_get_port", http_get_port)
        if http_get_scheme is not None:
            pulumi.set(__self__, "http_get_scheme", http_get_scheme)
        if init_delay_seconds is not None:
            pulumi.set(__self__, "init_delay_seconds", init_delay_seconds)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if success_threshold is not None:
            pulumi.set(__self__, "success_threshold", success_threshold)
        if tcp_socket_port is not None:
            pulumi.set(__self__, "tcp_socket_port", tcp_socket_port)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter(name="execCommands")
    def exec_commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of execution commands.
        """
        return pulumi.get(self, "exec_commands")

    @exec_commands.setter
    def exec_commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_commands", value)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive failures for the probe to be considered failed after having succeeded.Default: `3`. Minimum value is `1`.
        """
        return pulumi.get(self, "failure_threshold")

    @failure_threshold.setter
    def failure_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "failure_threshold", value)

    @property
    @pulumi.getter(name="httpGetPath")
    def http_get_path(self) -> Optional[pulumi.Input[str]]:
        """
        HttpGet detection path.
        """
        return pulumi.get(self, "http_get_path")

    @http_get_path.setter
    def http_get_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get_path", value)

    @property
    @pulumi.getter(name="httpGetPort")
    def http_get_port(self) -> Optional[pulumi.Input[int]]:
        """
        HttpGet detection port.
        """
        return pulumi.get(self, "http_get_port")

    @http_get_port.setter
    def http_get_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_get_port", value)

    @property
    @pulumi.getter(name="httpGetScheme")
    def http_get_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        HttpGet detection scheme. Available values: `HTTP`, `HTTPS`.
        """
        return pulumi.get(self, "http_get_scheme")

    @http_get_scheme.setter
    def http_get_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_get_scheme", value)

    @property
    @pulumi.getter(name="initDelaySeconds")
    def init_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after the container has started before probes are initiated.
        """
        return pulumi.get(self, "init_delay_seconds")

    @init_delay_seconds.setter
    def init_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "init_delay_seconds", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is `1`.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter(name="successThreshold")
    def success_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum consecutive successes for the probe to be considered successful after having failed. Default: `1`. Must be 1 for liveness. Minimum value is `1`.
        """
        return pulumi.get(self, "success_threshold")

    @success_threshold.setter
    def success_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "success_threshold", value)

    @property
    @pulumi.getter(name="tcpSocketPort")
    def tcp_socket_port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP Socket detection port.
        """
        return pulumi.get(self, "tcp_socket_port")

    @tcp_socket_port.setter
    def tcp_socket_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_socket_port", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds after which the probe times out.
        Defaults to 1 second. Minimum value is `1`.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class ContainerInstanceContainerVolumeMountArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Volume name.
        :param pulumi.Input[str] path: Volume mount path.
        :param pulumi.Input[str] mount_propagation: Volume mount propagation.
        :param pulumi.Input[bool] read_only: Whether the volume is read-only.
        :param pulumi.Input[str] sub_path: Volume mount sub-path.
        :param pulumi.Input[str] sub_path_expr: Volume mount sub-path expression.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Volume name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Volume mount path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        Volume mount propagation.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the volume is read-only.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Volume mount sub-path.
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Volume mount sub-path expression.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ContainerInstanceImageRegistryCredentialArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of credential.
        :param pulumi.Input[str] password: Password.
        :param pulumi.Input[str] server: Address of image registry.
        :param pulumi.Input[str] username: Username.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of credential.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        Address of image registry.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ContainerInstanceInitContainerArgs:
    def __init__(__self__, *,
                 image: pulumi.Input[str],
                 name: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 commands: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cpu: Optional[pulumi.Input[float]] = None,
                 env_vars: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 memory: Optional[pulumi.Input[float]] = None,
                 volume_mounts: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerVolumeMountArgs']]]] = None,
                 working_dir: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image: Image of Container.
        :param pulumi.Input[str] name: Name of Container.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Container launch argument list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] commands: Container launch command list.
        :param pulumi.Input[float] cpu: Number of cpu core of container.
        :param pulumi.Input[Mapping[str, Any]] env_vars: Map of environment variables of container OS.
        :param pulumi.Input[float] memory: Memory size of container.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerVolumeMountArgs']]] volume_mounts: List of volume mount informations.
        :param pulumi.Input[str] working_dir: Container working directory.
        """
        pulumi.set(__self__, "image", image)
        pulumi.set(__self__, "name", name)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if env_vars is not None:
            pulumi.set(__self__, "env_vars", env_vars)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if volume_mounts is not None:
            pulumi.set(__self__, "volume_mounts", volume_mounts)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter
    def image(self) -> pulumi.Input[str]:
        """
        Image of Container.
        """
        return pulumi.get(self, "image")

    @image.setter
    def image(self, value: pulumi.Input[str]):
        pulumi.set(self, "image", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of Container.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Container launch argument list.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def commands(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Container launch command list.
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[float]]:
        """
        Number of cpu core of container.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="envVars")
    def env_vars(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Map of environment variables of container OS.
        """
        return pulumi.get(self, "env_vars")

    @env_vars.setter
    def env_vars(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "env_vars", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[float]]:
        """
        Memory size of container.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="volumeMounts")
    def volume_mounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerVolumeMountArgs']]]]:
        """
        List of volume mount informations.
        """
        return pulumi.get(self, "volume_mounts")

    @volume_mounts.setter
    def volume_mounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerVolumeMountArgs']]]]):
        pulumi.set(self, "volume_mounts", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Container working directory.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_dir", value)


@pulumi.input_type
class ContainerInstanceInitContainerVolumeMountArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 mount_propagation: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 sub_path: Optional[pulumi.Input[str]] = None,
                 sub_path_expr: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Volume name.
        :param pulumi.Input[str] path: Volume mount path.
        :param pulumi.Input[str] mount_propagation: Volume mount propagation.
        :param pulumi.Input[bool] read_only: Whether the volume is read-only.
        :param pulumi.Input[str] sub_path: Volume mount sub-path.
        :param pulumi.Input[str] sub_path_expr: Volume mount sub-path expression.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        if mount_propagation is not None:
            pulumi.set(__self__, "mount_propagation", mount_propagation)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if sub_path is not None:
            pulumi.set(__self__, "sub_path", sub_path)
        if sub_path_expr is not None:
            pulumi.set(__self__, "sub_path_expr", sub_path_expr)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Volume name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Volume mount path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="mountPropagation")
    def mount_propagation(self) -> Optional[pulumi.Input[str]]:
        """
        Volume mount propagation.
        """
        return pulumi.get(self, "mount_propagation")

    @mount_propagation.setter
    def mount_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_propagation", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the volume is read-only.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter(name="subPath")
    def sub_path(self) -> Optional[pulumi.Input[str]]:
        """
        Volume mount sub-path.
        """
        return pulumi.get(self, "sub_path")

    @sub_path.setter
    def sub_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path", value)

    @property
    @pulumi.getter(name="subPathExpr")
    def sub_path_expr(self) -> Optional[pulumi.Input[str]]:
        """
        Volume mount sub-path expression.
        """
        return pulumi.get(self, "sub_path_expr")

    @sub_path_expr.setter
    def sub_path_expr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_path_expr", value)


@pulumi.input_type
class ContainerInstanceNfsVolumeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 read_only: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of NFS volume.
        :param pulumi.Input[str] path: NFS volume path.
        :param pulumi.Input[str] server: NFS server address.
        :param pulumi.Input[bool] read_only: Indicates whether the volume is read only. Default is `false`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of NFS volume.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        NFS volume path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        NFS server address.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the volume is read only. Default is `false`.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)


