# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 k8s_version: pulumi.Input[str],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vpc_id: pulumi.Input[str],
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]]] = None,
                 enable_vpc_core_dns: Optional[pulumi.Input[bool]] = None,
                 extra_param: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 internal_lb: Optional[pulumi.Input['ClusterInternalLbArgs']] = None,
                 need_delete_cbs: Optional[pulumi.Input[bool]] = None,
                 public_lb: Optional[pulumi.Input['ClusterPublicLbArgs']] = None,
                 service_subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] cluster_name: Name of EKS cluster.
        :param pulumi.Input[str] k8s_version: Kubernetes version of EKS cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Ids for EKS cluster.
        :param pulumi.Input[str] vpc_id: Vpc Id of EKS cluster.
        :param pulumi.Input[str] cluster_desc: Description of EKS cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]] dns_servers: List of cluster custom DNS Server info.
        :param pulumi.Input[bool] enable_vpc_core_dns: Indicates whether to enable dns in user cluster, default value is `true`.
        :param pulumi.Input[Mapping[str, Any]] extra_param: Extend parameters.
        :param pulumi.Input['ClusterInternalLbArgs'] internal_lb: Cluster internal access LoadBalancer info.
        :param pulumi.Input[bool] need_delete_cbs: Delete CBS after EKS cluster remove.
        :param pulumi.Input['ClusterPublicLbArgs'] public_lb: Cluster public access LoadBalancer info.
        :param pulumi.Input[str] service_subnet_id: Subnet id of service.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of EKS cluster.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "k8s_version", k8s_version)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if cluster_desc is not None:
            pulumi.set(__self__, "cluster_desc", cluster_desc)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if enable_vpc_core_dns is not None:
            pulumi.set(__self__, "enable_vpc_core_dns", enable_vpc_core_dns)
        if extra_param is not None:
            pulumi.set(__self__, "extra_param", extra_param)
        if internal_lb is not None:
            pulumi.set(__self__, "internal_lb", internal_lb)
        if need_delete_cbs is not None:
            pulumi.set(__self__, "need_delete_cbs", need_delete_cbs)
        if public_lb is not None:
            pulumi.set(__self__, "public_lb", public_lb)
        if service_subnet_id is not None:
            pulumi.set(__self__, "service_subnet_id", service_subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        Name of EKS cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> pulumi.Input[str]:
        """
        Kubernetes version of EKS cluster.
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Subnet Ids for EKS cluster.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Vpc Id of EKS cluster.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of EKS cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @cluster_desc.setter
    def cluster_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_desc", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]]]:
        """
        List of cluster custom DNS Server info.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="enableVpcCoreDns")
    def enable_vpc_core_dns(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable dns in user cluster, default value is `true`.
        """
        return pulumi.get(self, "enable_vpc_core_dns")

    @enable_vpc_core_dns.setter
    def enable_vpc_core_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vpc_core_dns", value)

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extend parameters.
        """
        return pulumi.get(self, "extra_param")

    @extra_param.setter
    def extra_param(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_param", value)

    @property
    @pulumi.getter(name="internalLb")
    def internal_lb(self) -> Optional[pulumi.Input['ClusterInternalLbArgs']]:
        """
        Cluster internal access LoadBalancer info.
        """
        return pulumi.get(self, "internal_lb")

    @internal_lb.setter
    def internal_lb(self, value: Optional[pulumi.Input['ClusterInternalLbArgs']]):
        pulumi.set(self, "internal_lb", value)

    @property
    @pulumi.getter(name="needDeleteCbs")
    def need_delete_cbs(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete CBS after EKS cluster remove.
        """
        return pulumi.get(self, "need_delete_cbs")

    @need_delete_cbs.setter
    def need_delete_cbs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_delete_cbs", value)

    @property
    @pulumi.getter(name="publicLb")
    def public_lb(self) -> Optional[pulumi.Input['ClusterPublicLbArgs']]:
        """
        Cluster public access LoadBalancer info.
        """
        return pulumi.get(self, "public_lb")

    @public_lb.setter
    def public_lb(self, value: Optional[pulumi.Input['ClusterPublicLbArgs']]):
        pulumi.set(self, "public_lb", value)

    @property
    @pulumi.getter(name="serviceSubnetId")
    def service_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id of service.
        """
        return pulumi.get(self, "service_subnet_id")

    @service_subnet_id.setter
    def service_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of EKS cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]]] = None,
                 enable_vpc_core_dns: Optional[pulumi.Input[bool]] = None,
                 extra_param: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 internal_lb: Optional[pulumi.Input['ClusterInternalLbArgs']] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 kube_config: Optional[pulumi.Input[str]] = None,
                 need_delete_cbs: Optional[pulumi.Input[bool]] = None,
                 public_lb: Optional[pulumi.Input['ClusterPublicLbArgs']] = None,
                 service_subnet_id: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[str] cluster_desc: Description of EKS cluster.
        :param pulumi.Input[str] cluster_name: Name of EKS cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]] dns_servers: List of cluster custom DNS Server info.
        :param pulumi.Input[bool] enable_vpc_core_dns: Indicates whether to enable dns in user cluster, default value is `true`.
        :param pulumi.Input[Mapping[str, Any]] extra_param: Extend parameters.
        :param pulumi.Input['ClusterInternalLbArgs'] internal_lb: Cluster internal access LoadBalancer info.
        :param pulumi.Input[str] k8s_version: Kubernetes version of EKS cluster.
        :param pulumi.Input[str] kube_config: EKS cluster kubeconfig.
        :param pulumi.Input[bool] need_delete_cbs: Delete CBS after EKS cluster remove.
        :param pulumi.Input['ClusterPublicLbArgs'] public_lb: Cluster public access LoadBalancer info.
        :param pulumi.Input[str] service_subnet_id: Subnet id of service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Ids for EKS cluster.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of EKS cluster.
        :param pulumi.Input[str] vpc_id: Vpc Id of EKS cluster.
        """
        if cluster_desc is not None:
            pulumi.set(__self__, "cluster_desc", cluster_desc)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if enable_vpc_core_dns is not None:
            pulumi.set(__self__, "enable_vpc_core_dns", enable_vpc_core_dns)
        if extra_param is not None:
            pulumi.set(__self__, "extra_param", extra_param)
        if internal_lb is not None:
            pulumi.set(__self__, "internal_lb", internal_lb)
        if k8s_version is not None:
            pulumi.set(__self__, "k8s_version", k8s_version)
        if kube_config is not None:
            pulumi.set(__self__, "kube_config", kube_config)
        if need_delete_cbs is not None:
            pulumi.set(__self__, "need_delete_cbs", need_delete_cbs)
        if public_lb is not None:
            pulumi.set(__self__, "public_lb", public_lb)
        if service_subnet_id is not None:
            pulumi.set(__self__, "service_subnet_id", service_subnet_id)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Description of EKS cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @cluster_desc.setter
    def cluster_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_desc", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of EKS cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]]]:
        """
        List of cluster custom DNS Server info.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterDnsServerArgs']]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="enableVpcCoreDns")
    def enable_vpc_core_dns(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to enable dns in user cluster, default value is `true`.
        """
        return pulumi.get(self, "enable_vpc_core_dns")

    @enable_vpc_core_dns.setter
    def enable_vpc_core_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_vpc_core_dns", value)

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Extend parameters.
        """
        return pulumi.get(self, "extra_param")

    @extra_param.setter
    def extra_param(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "extra_param", value)

    @property
    @pulumi.getter(name="internalLb")
    def internal_lb(self) -> Optional[pulumi.Input['ClusterInternalLbArgs']]:
        """
        Cluster internal access LoadBalancer info.
        """
        return pulumi.get(self, "internal_lb")

    @internal_lb.setter
    def internal_lb(self, value: Optional[pulumi.Input['ClusterInternalLbArgs']]):
        pulumi.set(self, "internal_lb", value)

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> Optional[pulumi.Input[str]]:
        """
        Kubernetes version of EKS cluster.
        """
        return pulumi.get(self, "k8s_version")

    @k8s_version.setter
    def k8s_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k8s_version", value)

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> Optional[pulumi.Input[str]]:
        """
        EKS cluster kubeconfig.
        """
        return pulumi.get(self, "kube_config")

    @kube_config.setter
    def kube_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_config", value)

    @property
    @pulumi.getter(name="needDeleteCbs")
    def need_delete_cbs(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete CBS after EKS cluster remove.
        """
        return pulumi.get(self, "need_delete_cbs")

    @need_delete_cbs.setter
    def need_delete_cbs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_delete_cbs", value)

    @property
    @pulumi.getter(name="publicLb")
    def public_lb(self) -> Optional[pulumi.Input['ClusterPublicLbArgs']]:
        """
        Cluster public access LoadBalancer info.
        """
        return pulumi.get(self, "public_lb")

    @public_lb.setter
    def public_lb(self, value: Optional[pulumi.Input['ClusterPublicLbArgs']]):
        pulumi.set(self, "public_lb", value)

    @property
    @pulumi.getter(name="serviceSubnetId")
    def service_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id of service.
        """
        return pulumi.get(self, "service_subnet_id")

    @service_subnet_id.setter
    def service_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_subnet_id", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnet Ids for EKS cluster.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of EKS cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc Id of EKS cluster.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterDnsServerArgs']]]]] = None,
                 enable_vpc_core_dns: Optional[pulumi.Input[bool]] = None,
                 extra_param: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 internal_lb: Optional[pulumi.Input[pulumi.InputType['ClusterInternalLbArgs']]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 need_delete_cbs: Optional[pulumi.Input[bool]] = None,
                 public_lb: Optional[pulumi.Input[pulumi.InputType['ClusterPublicLbArgs']]] = None,
                 service_subnet_id: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an elastic kubernetes cluster resource.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.2.0.0/16")
        sub = tencentcloud.subnet.Instance("sub",
            vpc_id=vpc.id,
            cidr_block="10.2.11.0/24",
            availability_zone="ap-guangzhou-3")
        sub2 = tencentcloud.subnet.Instance("sub2",
            vpc_id=vpc.id,
            cidr_block="10.2.10.0/24",
            availability_zone="ap-guangzhou-3")
        foo = tencentcloud.eks.Cluster("foo",
            cluster_name="tf-test-eks",
            k8s_version="1.18.4",
            vpc_id=vpc.id,
            subnet_ids=[
                sub.id,
                sub2.id,
            ],
            cluster_desc="test eks cluster created by terraform",
            service_subnet_id=sub.id,
            dns_servers=[tencentcloud.eks.ClusterDnsServerArgs(
                domain="www.example1.com",
                servers=[
                    "1.1.1.1:8080",
                    "1.1.1.1:8081",
                    "1.1.1.1:8082",
                ],
            )],
            enable_vpc_core_dns=True,
            need_delete_cbs=True,
            tags={
                "hello": "world",
            })
        ```

        ## Import

        ```sh
         $ pulumi import tencentcloud:Eks/cluster:Cluster foo cluster-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_desc: Description of EKS cluster.
        :param pulumi.Input[str] cluster_name: Name of EKS cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterDnsServerArgs']]]] dns_servers: List of cluster custom DNS Server info.
        :param pulumi.Input[bool] enable_vpc_core_dns: Indicates whether to enable dns in user cluster, default value is `true`.
        :param pulumi.Input[Mapping[str, Any]] extra_param: Extend parameters.
        :param pulumi.Input[pulumi.InputType['ClusterInternalLbArgs']] internal_lb: Cluster internal access LoadBalancer info.
        :param pulumi.Input[str] k8s_version: Kubernetes version of EKS cluster.
        :param pulumi.Input[bool] need_delete_cbs: Delete CBS after EKS cluster remove.
        :param pulumi.Input[pulumi.InputType['ClusterPublicLbArgs']] public_lb: Cluster public access LoadBalancer info.
        :param pulumi.Input[str] service_subnet_id: Subnet id of service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Ids for EKS cluster.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of EKS cluster.
        :param pulumi.Input[str] vpc_id: Vpc Id of EKS cluster.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an elastic kubernetes cluster resource.

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.2.0.0/16")
        sub = tencentcloud.subnet.Instance("sub",
            vpc_id=vpc.id,
            cidr_block="10.2.11.0/24",
            availability_zone="ap-guangzhou-3")
        sub2 = tencentcloud.subnet.Instance("sub2",
            vpc_id=vpc.id,
            cidr_block="10.2.10.0/24",
            availability_zone="ap-guangzhou-3")
        foo = tencentcloud.eks.Cluster("foo",
            cluster_name="tf-test-eks",
            k8s_version="1.18.4",
            vpc_id=vpc.id,
            subnet_ids=[
                sub.id,
                sub2.id,
            ],
            cluster_desc="test eks cluster created by terraform",
            service_subnet_id=sub.id,
            dns_servers=[tencentcloud.eks.ClusterDnsServerArgs(
                domain="www.example1.com",
                servers=[
                    "1.1.1.1:8080",
                    "1.1.1.1:8081",
                    "1.1.1.1:8082",
                ],
            )],
            enable_vpc_core_dns=True,
            need_delete_cbs=True,
            tags={
                "hello": "world",
            })
        ```

        ## Import

        ```sh
         $ pulumi import tencentcloud:Eks/cluster:Cluster foo cluster-id
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterDnsServerArgs']]]]] = None,
                 enable_vpc_core_dns: Optional[pulumi.Input[bool]] = None,
                 extra_param: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 internal_lb: Optional[pulumi.Input[pulumi.InputType['ClusterInternalLbArgs']]] = None,
                 k8s_version: Optional[pulumi.Input[str]] = None,
                 need_delete_cbs: Optional[pulumi.Input[bool]] = None,
                 public_lb: Optional[pulumi.Input[pulumi.InputType['ClusterPublicLbArgs']]] = None,
                 service_subnet_id: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["cluster_desc"] = cluster_desc
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["enable_vpc_core_dns"] = enable_vpc_core_dns
            __props__.__dict__["extra_param"] = extra_param
            __props__.__dict__["internal_lb"] = internal_lb
            if k8s_version is None and not opts.urn:
                raise TypeError("Missing required property 'k8s_version'")
            __props__.__dict__["k8s_version"] = k8s_version
            __props__.__dict__["need_delete_cbs"] = need_delete_cbs
            __props__.__dict__["public_lb"] = public_lb
            __props__.__dict__["service_subnet_id"] = service_subnet_id
            if subnet_ids is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_ids'")
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["tags"] = tags
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["kube_config"] = None
        super(Cluster, __self__).__init__(
            'tencentcloud:Eks/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_desc: Optional[pulumi.Input[str]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterDnsServerArgs']]]]] = None,
            enable_vpc_core_dns: Optional[pulumi.Input[bool]] = None,
            extra_param: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            internal_lb: Optional[pulumi.Input[pulumi.InputType['ClusterInternalLbArgs']]] = None,
            k8s_version: Optional[pulumi.Input[str]] = None,
            kube_config: Optional[pulumi.Input[str]] = None,
            need_delete_cbs: Optional[pulumi.Input[bool]] = None,
            public_lb: Optional[pulumi.Input[pulumi.InputType['ClusterPublicLbArgs']]] = None,
            service_subnet_id: Optional[pulumi.Input[str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_desc: Description of EKS cluster.
        :param pulumi.Input[str] cluster_name: Name of EKS cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterDnsServerArgs']]]] dns_servers: List of cluster custom DNS Server info.
        :param pulumi.Input[bool] enable_vpc_core_dns: Indicates whether to enable dns in user cluster, default value is `true`.
        :param pulumi.Input[Mapping[str, Any]] extra_param: Extend parameters.
        :param pulumi.Input[pulumi.InputType['ClusterInternalLbArgs']] internal_lb: Cluster internal access LoadBalancer info.
        :param pulumi.Input[str] k8s_version: Kubernetes version of EKS cluster.
        :param pulumi.Input[str] kube_config: EKS cluster kubeconfig.
        :param pulumi.Input[bool] need_delete_cbs: Delete CBS after EKS cluster remove.
        :param pulumi.Input[pulumi.InputType['ClusterPublicLbArgs']] public_lb: Cluster public access LoadBalancer info.
        :param pulumi.Input[str] service_subnet_id: Subnet id of service.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet Ids for EKS cluster.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of EKS cluster.
        :param pulumi.Input[str] vpc_id: Vpc Id of EKS cluster.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["cluster_desc"] = cluster_desc
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["enable_vpc_core_dns"] = enable_vpc_core_dns
        __props__.__dict__["extra_param"] = extra_param
        __props__.__dict__["internal_lb"] = internal_lb
        __props__.__dict__["k8s_version"] = k8s_version
        __props__.__dict__["kube_config"] = kube_config
        __props__.__dict__["need_delete_cbs"] = need_delete_cbs
        __props__.__dict__["public_lb"] = public_lb
        __props__.__dict__["service_subnet_id"] = service_subnet_id
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vpc_id"] = vpc_id
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Description of EKS cluster.
        """
        return pulumi.get(self, "cluster_desc")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        Name of EKS cluster.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence['outputs.ClusterDnsServer']]]:
        """
        List of cluster custom DNS Server info.
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="enableVpcCoreDns")
    def enable_vpc_core_dns(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to enable dns in user cluster, default value is `true`.
        """
        return pulumi.get(self, "enable_vpc_core_dns")

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Extend parameters.
        """
        return pulumi.get(self, "extra_param")

    @property
    @pulumi.getter(name="internalLb")
    def internal_lb(self) -> pulumi.Output[Optional['outputs.ClusterInternalLb']]:
        """
        Cluster internal access LoadBalancer info.
        """
        return pulumi.get(self, "internal_lb")

    @property
    @pulumi.getter(name="k8sVersion")
    def k8s_version(self) -> pulumi.Output[str]:
        """
        Kubernetes version of EKS cluster.
        """
        return pulumi.get(self, "k8s_version")

    @property
    @pulumi.getter(name="kubeConfig")
    def kube_config(self) -> pulumi.Output[str]:
        """
        EKS cluster kubeconfig.
        """
        return pulumi.get(self, "kube_config")

    @property
    @pulumi.getter(name="needDeleteCbs")
    def need_delete_cbs(self) -> pulumi.Output[Optional[bool]]:
        """
        Delete CBS after EKS cluster remove.
        """
        return pulumi.get(self, "need_delete_cbs")

    @property
    @pulumi.getter(name="publicLb")
    def public_lb(self) -> pulumi.Output[Optional['outputs.ClusterPublicLb']]:
        """
        Cluster public access LoadBalancer info.
        """
        return pulumi.get(self, "public_lb")

    @property
    @pulumi.getter(name="serviceSubnetId")
    def service_subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        Subnet id of service.
        """
        return pulumi.get(self, "service_subnet_id")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Subnet Ids for EKS cluster.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of EKS cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Vpc Id of EKS cluster.
        """
        return pulumi.get(self, "vpc_id")

