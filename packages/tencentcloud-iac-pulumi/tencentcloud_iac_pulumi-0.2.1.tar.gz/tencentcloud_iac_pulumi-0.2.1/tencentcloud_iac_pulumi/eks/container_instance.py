# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainerInstanceArgs', 'ContainerInstance']

@pulumi.input_type
class ContainerInstanceArgs:
    def __init__(__self__, *,
                 containers: pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]],
                 cpu: pulumi.Input[float],
                 memory: pulumi.Input[float],
                 security_groups: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 auto_create_eip: Optional[pulumi.Input[bool]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 cbs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]]] = None,
                 cpu_type: Optional[pulumi.Input[str]] = None,
                 dns_config_options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 dns_names_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip_delete_policy: Optional[pulumi.Input[bool]] = None,
                 eip_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 eip_service_provider: Optional[pulumi.Input[str]] = None,
                 existed_eip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_count: Optional[pulumi.Input[int]] = None,
                 gpu_type: Optional[pulumi.Input[str]] = None,
                 image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nfs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ContainerInstance resource.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]] containers: List of container.
        :param pulumi.Input[float] cpu: The number of CPU cores. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[float] memory: Memory size. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: List of security group id.
        :param pulumi.Input[str] subnet_id: Subnet ID of container instance.
        :param pulumi.Input[str] vpc_id: VPC ID.
        :param pulumi.Input[bool] auto_create_eip: Indicates whether to create EIP instead of specify existing EIPs. Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]] cbs_volumes: List of CBS volume.
        :param pulumi.Input[str] cpu_type: Type of cpu, which can set to `intel` or `amd`. It also support backup list like `amd,intel` which indicates using `intel` when `amd` sold out.
        :param pulumi.Input[Mapping[str, Any]] dns_config_options: Map of DNS config options.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names_servers: IP Addresses of DNS Servers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_searches: List of DNS Search Domain.
        :param pulumi.Input[bool] eip_delete_policy: Indicates weather the EIP release or not after instance deleted. Conflict with `existed_eip_ids`.
        :param pulumi.Input[int] eip_max_bandwidth_out: Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] eip_service_provider: EIP service provider. Default is `BGP`, values `CMCC`,`CTCC`,`CUCC` are available for whitelist customer. Conflict with `existed_eip_ids`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] existed_eip_ids: Existed EIP ID List which used to bind container instance. Conflict with `auto_create_eip` and auto create EIP options.
        :param pulumi.Input[int] gpu_count: Count of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] gpu_type: Type of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]] image_registry_credentials: List of credentials which pull from image registry.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]] init_containers: List of initialized container.
        :param pulumi.Input[str] name: Name of EKS container instance.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]] nfs_volumes: List of NFS volume.
        :param pulumi.Input[str] restart_policy: Container instance restart policy. Available values: `Always`, `Never`, `OnFailure`.
        """
        pulumi.set(__self__, "containers", containers)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if auto_create_eip is not None:
            pulumi.set(__self__, "auto_create_eip", auto_create_eip)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if cbs_volumes is not None:
            pulumi.set(__self__, "cbs_volumes", cbs_volumes)
        if cpu_type is not None:
            pulumi.set(__self__, "cpu_type", cpu_type)
        if dns_config_options is not None:
            pulumi.set(__self__, "dns_config_options", dns_config_options)
        if dns_names_servers is not None:
            pulumi.set(__self__, "dns_names_servers", dns_names_servers)
        if dns_searches is not None:
            pulumi.set(__self__, "dns_searches", dns_searches)
        if eip_delete_policy is not None:
            pulumi.set(__self__, "eip_delete_policy", eip_delete_policy)
        if eip_max_bandwidth_out is not None:
            pulumi.set(__self__, "eip_max_bandwidth_out", eip_max_bandwidth_out)
        if eip_service_provider is not None:
            pulumi.set(__self__, "eip_service_provider", eip_service_provider)
        if existed_eip_ids is not None:
            pulumi.set(__self__, "existed_eip_ids", existed_eip_ids)
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_type is not None:
            pulumi.set(__self__, "gpu_type", gpu_type)
        if image_registry_credentials is not None:
            pulumi.set(__self__, "image_registry_credentials", image_registry_credentials)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nfs_volumes is not None:
            pulumi.set(__self__, "nfs_volumes", nfs_volumes)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)

    @property
    @pulumi.getter
    def containers(self) -> pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]]:
        """
        List of container.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[float]:
        """
        The number of CPU cores. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[float]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[float]:
        """
        Memory size. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[float]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of security group id.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet ID of container instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="autoCreateEip")
    def auto_create_eip(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create EIP instead of specify existing EIPs. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "auto_create_eip")

    @auto_create_eip.setter
    def auto_create_eip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_eip", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="cbsVolumes")
    def cbs_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]]]:
        """
        List of CBS volume.
        """
        return pulumi.get(self, "cbs_volumes")

    @cbs_volumes.setter
    def cbs_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]]]):
        pulumi.set(self, "cbs_volumes", value)

    @property
    @pulumi.getter(name="cpuType")
    def cpu_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of cpu, which can set to `intel` or `amd`. It also support backup list like `amd,intel` which indicates using `intel` when `amd` sold out.
        """
        return pulumi.get(self, "cpu_type")

    @cpu_type.setter
    def cpu_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_type", value)

    @property
    @pulumi.getter(name="dnsConfigOptions")
    def dns_config_options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Map of DNS config options.
        """
        return pulumi.get(self, "dns_config_options")

    @dns_config_options.setter
    def dns_config_options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "dns_config_options", value)

    @property
    @pulumi.getter(name="dnsNamesServers")
    def dns_names_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IP Addresses of DNS Servers.
        """
        return pulumi.get(self, "dns_names_servers")

    @dns_names_servers.setter
    def dns_names_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names_servers", value)

    @property
    @pulumi.getter(name="dnsSearches")
    def dns_searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNS Search Domain.
        """
        return pulumi.get(self, "dns_searches")

    @dns_searches.setter
    def dns_searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_searches", value)

    @property
    @pulumi.getter(name="eipDeletePolicy")
    def eip_delete_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates weather the EIP release or not after instance deleted. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_delete_policy")

    @eip_delete_policy.setter
    def eip_delete_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eip_delete_policy", value)

    @property
    @pulumi.getter(name="eipMaxBandwidthOut")
    def eip_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_max_bandwidth_out")

    @eip_max_bandwidth_out.setter
    def eip_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eip_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="eipServiceProvider")
    def eip_service_provider(self) -> Optional[pulumi.Input[str]]:
        """
        EIP service provider. Default is `BGP`, values `CMCC`,`CTCC`,`CUCC` are available for whitelist customer. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_service_provider")

    @eip_service_provider.setter
    def eip_service_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_service_provider", value)

    @property
    @pulumi.getter(name="existedEipIds")
    def existed_eip_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Existed EIP ID List which used to bind container instance. Conflict with `auto_create_eip` and auto create EIP options.
        """
        return pulumi.get(self, "existed_eip_ids")

    @existed_eip_ids.setter
    def existed_eip_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "existed_eip_ids", value)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "gpu_count")

    @gpu_count.setter
    def gpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gpu_count", value)

    @property
    @pulumi.getter(name="gpuType")
    def gpu_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "gpu_type")

    @gpu_type.setter
    def gpu_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpu_type", value)

    @property
    @pulumi.getter(name="imageRegistryCredentials")
    def image_registry_credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]]]:
        """
        List of credentials which pull from image registry.
        """
        return pulumi.get(self, "image_registry_credentials")

    @image_registry_credentials.setter
    def image_registry_credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]]]):
        pulumi.set(self, "image_registry_credentials", value)

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]]]:
        """
        List of initialized container.
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of EKS container instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nfsVolumes")
    def nfs_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]]]:
        """
        List of NFS volume.
        """
        return pulumi.get(self, "nfs_volumes")

    @nfs_volumes.setter
    def nfs_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]]]):
        pulumi.set(self, "nfs_volumes", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Container instance restart policy. Available values: `Always`, `Never`, `OnFailure`.
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_policy", value)


@pulumi.input_type
class _ContainerInstanceState:
    def __init__(__self__, *,
                 auto_create_eip: Optional[pulumi.Input[bool]] = None,
                 auto_create_eip_id: Optional[pulumi.Input[str]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 cbs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]]] = None,
                 cpu: Optional[pulumi.Input[float]] = None,
                 cpu_type: Optional[pulumi.Input[str]] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 dns_config_options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 dns_names_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip_address: Optional[pulumi.Input[str]] = None,
                 eip_delete_policy: Optional[pulumi.Input[bool]] = None,
                 eip_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 eip_service_provider: Optional[pulumi.Input[str]] = None,
                 existed_eip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_count: Optional[pulumi.Input[int]] = None,
                 gpu_type: Optional[pulumi.Input[str]] = None,
                 image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]]] = None,
                 memory: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nfs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ContainerInstance resources.
        :param pulumi.Input[bool] auto_create_eip: Indicates whether to create EIP instead of specify existing EIPs. Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] auto_create_eip_id: ID of EIP which create automatically.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]] cbs_volumes: List of CBS volume.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]] containers: List of container.
        :param pulumi.Input[float] cpu: The number of CPU cores. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] cpu_type: Type of cpu, which can set to `intel` or `amd`. It also support backup list like `amd,intel` which indicates using `intel` when `amd` sold out.
        :param pulumi.Input[str] created_time: Container instance creation time.
        :param pulumi.Input[Mapping[str, Any]] dns_config_options: Map of DNS config options.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names_servers: IP Addresses of DNS Servers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_searches: List of DNS Search Domain.
        :param pulumi.Input[str] eip_address: EIP address.
        :param pulumi.Input[bool] eip_delete_policy: Indicates weather the EIP release or not after instance deleted. Conflict with `existed_eip_ids`.
        :param pulumi.Input[int] eip_max_bandwidth_out: Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] eip_service_provider: EIP service provider. Default is `BGP`, values `CMCC`,`CTCC`,`CUCC` are available for whitelist customer. Conflict with `existed_eip_ids`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] existed_eip_ids: Existed EIP ID List which used to bind container instance. Conflict with `auto_create_eip` and auto create EIP options.
        :param pulumi.Input[int] gpu_count: Count of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] gpu_type: Type of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]] image_registry_credentials: List of credentials which pull from image registry.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]] init_containers: List of initialized container.
        :param pulumi.Input[float] memory: Memory size. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] name: Name of EKS container instance.
        :param pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]] nfs_volumes: List of NFS volume.
        :param pulumi.Input[str] private_ip: Private IP address.
        :param pulumi.Input[str] restart_policy: Container instance restart policy. Available values: `Always`, `Never`, `OnFailure`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: List of security group id.
        :param pulumi.Input[str] status: Container instance status.
        :param pulumi.Input[str] subnet_id: Subnet ID of container instance.
        :param pulumi.Input[str] vpc_id: VPC ID.
        """
        if auto_create_eip is not None:
            pulumi.set(__self__, "auto_create_eip", auto_create_eip)
        if auto_create_eip_id is not None:
            pulumi.set(__self__, "auto_create_eip_id", auto_create_eip_id)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if cbs_volumes is not None:
            pulumi.set(__self__, "cbs_volumes", cbs_volumes)
        if containers is not None:
            pulumi.set(__self__, "containers", containers)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if cpu_type is not None:
            pulumi.set(__self__, "cpu_type", cpu_type)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if dns_config_options is not None:
            pulumi.set(__self__, "dns_config_options", dns_config_options)
        if dns_names_servers is not None:
            pulumi.set(__self__, "dns_names_servers", dns_names_servers)
        if dns_searches is not None:
            pulumi.set(__self__, "dns_searches", dns_searches)
        if eip_address is not None:
            pulumi.set(__self__, "eip_address", eip_address)
        if eip_delete_policy is not None:
            pulumi.set(__self__, "eip_delete_policy", eip_delete_policy)
        if eip_max_bandwidth_out is not None:
            pulumi.set(__self__, "eip_max_bandwidth_out", eip_max_bandwidth_out)
        if eip_service_provider is not None:
            pulumi.set(__self__, "eip_service_provider", eip_service_provider)
        if existed_eip_ids is not None:
            pulumi.set(__self__, "existed_eip_ids", existed_eip_ids)
        if gpu_count is not None:
            pulumi.set(__self__, "gpu_count", gpu_count)
        if gpu_type is not None:
            pulumi.set(__self__, "gpu_type", gpu_type)
        if image_registry_credentials is not None:
            pulumi.set(__self__, "image_registry_credentials", image_registry_credentials)
        if init_containers is not None:
            pulumi.set(__self__, "init_containers", init_containers)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nfs_volumes is not None:
            pulumi.set(__self__, "nfs_volumes", nfs_volumes)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if restart_policy is not None:
            pulumi.set(__self__, "restart_policy", restart_policy)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoCreateEip")
    def auto_create_eip(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to create EIP instead of specify existing EIPs. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "auto_create_eip")

    @auto_create_eip.setter
    def auto_create_eip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_eip", value)

    @property
    @pulumi.getter(name="autoCreateEipId")
    def auto_create_eip_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of EIP which create automatically.
        """
        return pulumi.get(self, "auto_create_eip_id")

    @auto_create_eip_id.setter
    def auto_create_eip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_create_eip_id", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="cbsVolumes")
    def cbs_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]]]:
        """
        List of CBS volume.
        """
        return pulumi.get(self, "cbs_volumes")

    @cbs_volumes.setter
    def cbs_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceCbsVolumeArgs']]]]):
        pulumi.set(self, "cbs_volumes", value)

    @property
    @pulumi.getter
    def containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]]]:
        """
        List of container.
        """
        return pulumi.get(self, "containers")

    @containers.setter
    def containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceContainerArgs']]]]):
        pulumi.set(self, "containers", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[float]]:
        """
        The number of CPU cores. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="cpuType")
    def cpu_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of cpu, which can set to `intel` or `amd`. It also support backup list like `amd,intel` which indicates using `intel` when `amd` sold out.
        """
        return pulumi.get(self, "cpu_type")

    @cpu_type.setter
    def cpu_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_type", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        Container instance creation time.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="dnsConfigOptions")
    def dns_config_options(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Map of DNS config options.
        """
        return pulumi.get(self, "dns_config_options")

    @dns_config_options.setter
    def dns_config_options(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "dns_config_options", value)

    @property
    @pulumi.getter(name="dnsNamesServers")
    def dns_names_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IP Addresses of DNS Servers.
        """
        return pulumi.get(self, "dns_names_servers")

    @dns_names_servers.setter
    def dns_names_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names_servers", value)

    @property
    @pulumi.getter(name="dnsSearches")
    def dns_searches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNS Search Domain.
        """
        return pulumi.get(self, "dns_searches")

    @dns_searches.setter
    def dns_searches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_searches", value)

    @property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> Optional[pulumi.Input[str]]:
        """
        EIP address.
        """
        return pulumi.get(self, "eip_address")

    @eip_address.setter
    def eip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_address", value)

    @property
    @pulumi.getter(name="eipDeletePolicy")
    def eip_delete_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates weather the EIP release or not after instance deleted. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_delete_policy")

    @eip_delete_policy.setter
    def eip_delete_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eip_delete_policy", value)

    @property
    @pulumi.getter(name="eipMaxBandwidthOut")
    def eip_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_max_bandwidth_out")

    @eip_max_bandwidth_out.setter
    def eip_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "eip_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="eipServiceProvider")
    def eip_service_provider(self) -> Optional[pulumi.Input[str]]:
        """
        EIP service provider. Default is `BGP`, values `CMCC`,`CTCC`,`CUCC` are available for whitelist customer. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_service_provider")

    @eip_service_provider.setter
    def eip_service_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "eip_service_provider", value)

    @property
    @pulumi.getter(name="existedEipIds")
    def existed_eip_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Existed EIP ID List which used to bind container instance. Conflict with `auto_create_eip` and auto create EIP options.
        """
        return pulumi.get(self, "existed_eip_ids")

    @existed_eip_ids.setter
    def existed_eip_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "existed_eip_ids", value)

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "gpu_count")

    @gpu_count.setter
    def gpu_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gpu_count", value)

    @property
    @pulumi.getter(name="gpuType")
    def gpu_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "gpu_type")

    @gpu_type.setter
    def gpu_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gpu_type", value)

    @property
    @pulumi.getter(name="imageRegistryCredentials")
    def image_registry_credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]]]:
        """
        List of credentials which pull from image registry.
        """
        return pulumi.get(self, "image_registry_credentials")

    @image_registry_credentials.setter
    def image_registry_credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceImageRegistryCredentialArgs']]]]):
        pulumi.set(self, "image_registry_credentials", value)

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]]]:
        """
        List of initialized container.
        """
        return pulumi.get(self, "init_containers")

    @init_containers.setter
    def init_containers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceInitContainerArgs']]]]):
        pulumi.set(self, "init_containers", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[float]]:
        """
        Memory size. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of EKS container instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nfsVolumes")
    def nfs_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]]]:
        """
        List of NFS volume.
        """
        return pulumi.get(self, "nfs_volumes")

    @nfs_volumes.setter
    def nfs_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerInstanceNfsVolumeArgs']]]]):
        pulumi.set(self, "nfs_volumes", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Private IP address.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Container instance restart policy. Available values: `Always`, `Never`, `OnFailure`.
        """
        return pulumi.get(self, "restart_policy")

    @restart_policy.setter
    def restart_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restart_policy", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of security group id.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Container instance status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet ID of container instance.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class ContainerInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_create_eip: Optional[pulumi.Input[bool]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 cbs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceCbsVolumeArgs']]]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceContainerArgs']]]]] = None,
                 cpu: Optional[pulumi.Input[float]] = None,
                 cpu_type: Optional[pulumi.Input[str]] = None,
                 dns_config_options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 dns_names_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip_delete_policy: Optional[pulumi.Input[bool]] = None,
                 eip_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 eip_service_provider: Optional[pulumi.Input[str]] = None,
                 existed_eip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_count: Optional[pulumi.Input[int]] = None,
                 gpu_type: Optional[pulumi.Input[str]] = None,
                 image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceImageRegistryCredentialArgs']]]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceInitContainerArgs']]]]] = None,
                 memory: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nfs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceNfsVolumeArgs']]]]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an elastic kubernetes service container instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.Security.get_groups()
        zone = tencentcloud.Availability.get_zones_by_product(product="cvm")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/24")
        sub = tencentcloud.subnet.Instance("sub",
            availability_zone=zone.zones[0].name,
            cidr_block="10.0.0.0/24",
            vpc_id=vpc.id)
        cbs = tencentcloud.cbs.Storage("cbs",
            availability_zone=zone.zones[0].name,
            storage_name="cbs1",
            storage_size=10,
            storage_type="CLOUD_PREMIUM")
        eci1 = tencentcloud.eks.ContainerInstance("eci1",
            vpc_id=vpc.id,
            subnet_id=sub.id,
            cpu=2,
            cpu_type="intel",
            restart_policy="Always",
            memory=4,
            security_groups=[group.security_groups[0].security_group_id],
            cbs_volumes=[tencentcloud.eks.ContainerInstanceCbsVolumeArgs(
                name="vol1",
                disk_id=cbs.id,
            )],
            containers=[
                tencentcloud.eks.ContainerInstanceContainerArgs(
                    name="redis1",
                    image="redis",
                    liveness_probe=tencentcloud.eks.ContainerInstanceContainerLivenessProbeArgs(
                        init_delay_seconds=1,
                        timeout_seconds=3,
                        period_seconds=11,
                        success_threshold=1,
                        failure_threshold=3,
                        http_get_path="/",
                        http_get_port=443,
                        http_get_scheme="HTTPS",
                    ),
                    readiness_probe=tencentcloud.eks.ContainerInstanceContainerReadinessProbeArgs(
                        init_delay_seconds=1,
                        timeout_seconds=3,
                        period_seconds=10,
                        success_threshold=1,
                        failure_threshold=3,
                        tcp_socket_port=81,
                    ),
                ),
                tencentcloud.eks.ContainerInstanceContainerArgs(
                    name="nginx",
                    image="nginx",
                ),
            ],
            init_containers=[tencentcloud.eks.ContainerInstanceInitContainerArgs(
                name="alpine",
                image="alpine:latest",
            )])
        ```

        ## Import

        ```sh
         $ pulumi import tencentcloud:Eks/containerInstance:ContainerInstance foo container-instance-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_create_eip: Indicates whether to create EIP instead of specify existing EIPs. Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceCbsVolumeArgs']]]] cbs_volumes: List of CBS volume.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceContainerArgs']]]] containers: List of container.
        :param pulumi.Input[float] cpu: The number of CPU cores. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] cpu_type: Type of cpu, which can set to `intel` or `amd`. It also support backup list like `amd,intel` which indicates using `intel` when `amd` sold out.
        :param pulumi.Input[Mapping[str, Any]] dns_config_options: Map of DNS config options.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names_servers: IP Addresses of DNS Servers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_searches: List of DNS Search Domain.
        :param pulumi.Input[bool] eip_delete_policy: Indicates weather the EIP release or not after instance deleted. Conflict with `existed_eip_ids`.
        :param pulumi.Input[int] eip_max_bandwidth_out: Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] eip_service_provider: EIP service provider. Default is `BGP`, values `CMCC`,`CTCC`,`CUCC` are available for whitelist customer. Conflict with `existed_eip_ids`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] existed_eip_ids: Existed EIP ID List which used to bind container instance. Conflict with `auto_create_eip` and auto create EIP options.
        :param pulumi.Input[int] gpu_count: Count of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] gpu_type: Type of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceImageRegistryCredentialArgs']]]] image_registry_credentials: List of credentials which pull from image registry.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceInitContainerArgs']]]] init_containers: List of initialized container.
        :param pulumi.Input[float] memory: Memory size. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] name: Name of EKS container instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceNfsVolumeArgs']]]] nfs_volumes: List of NFS volume.
        :param pulumi.Input[str] restart_policy: Container instance restart policy. Available values: `Always`, `Never`, `OnFailure`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: List of security group id.
        :param pulumi.Input[str] subnet_id: Subnet ID of container instance.
        :param pulumi.Input[str] vpc_id: VPC ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainerInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an elastic kubernetes service container instance.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.Security.get_groups()
        zone = tencentcloud.Availability.get_zones_by_product(product="cvm")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/24")
        sub = tencentcloud.subnet.Instance("sub",
            availability_zone=zone.zones[0].name,
            cidr_block="10.0.0.0/24",
            vpc_id=vpc.id)
        cbs = tencentcloud.cbs.Storage("cbs",
            availability_zone=zone.zones[0].name,
            storage_name="cbs1",
            storage_size=10,
            storage_type="CLOUD_PREMIUM")
        eci1 = tencentcloud.eks.ContainerInstance("eci1",
            vpc_id=vpc.id,
            subnet_id=sub.id,
            cpu=2,
            cpu_type="intel",
            restart_policy="Always",
            memory=4,
            security_groups=[group.security_groups[0].security_group_id],
            cbs_volumes=[tencentcloud.eks.ContainerInstanceCbsVolumeArgs(
                name="vol1",
                disk_id=cbs.id,
            )],
            containers=[
                tencentcloud.eks.ContainerInstanceContainerArgs(
                    name="redis1",
                    image="redis",
                    liveness_probe=tencentcloud.eks.ContainerInstanceContainerLivenessProbeArgs(
                        init_delay_seconds=1,
                        timeout_seconds=3,
                        period_seconds=11,
                        success_threshold=1,
                        failure_threshold=3,
                        http_get_path="/",
                        http_get_port=443,
                        http_get_scheme="HTTPS",
                    ),
                    readiness_probe=tencentcloud.eks.ContainerInstanceContainerReadinessProbeArgs(
                        init_delay_seconds=1,
                        timeout_seconds=3,
                        period_seconds=10,
                        success_threshold=1,
                        failure_threshold=3,
                        tcp_socket_port=81,
                    ),
                ),
                tencentcloud.eks.ContainerInstanceContainerArgs(
                    name="nginx",
                    image="nginx",
                ),
            ],
            init_containers=[tencentcloud.eks.ContainerInstanceInitContainerArgs(
                name="alpine",
                image="alpine:latest",
            )])
        ```

        ## Import

        ```sh
         $ pulumi import tencentcloud:Eks/containerInstance:ContainerInstance foo container-instance-id
        ```

        :param str resource_name: The name of the resource.
        :param ContainerInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainerInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_create_eip: Optional[pulumi.Input[bool]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 cbs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceCbsVolumeArgs']]]]] = None,
                 containers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceContainerArgs']]]]] = None,
                 cpu: Optional[pulumi.Input[float]] = None,
                 cpu_type: Optional[pulumi.Input[str]] = None,
                 dns_config_options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 dns_names_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eip_delete_policy: Optional[pulumi.Input[bool]] = None,
                 eip_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 eip_service_provider: Optional[pulumi.Input[str]] = None,
                 existed_eip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gpu_count: Optional[pulumi.Input[int]] = None,
                 gpu_type: Optional[pulumi.Input[str]] = None,
                 image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceImageRegistryCredentialArgs']]]]] = None,
                 init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceInitContainerArgs']]]]] = None,
                 memory: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nfs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceNfsVolumeArgs']]]]] = None,
                 restart_policy: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainerInstanceArgs.__new__(ContainerInstanceArgs)

            __props__.__dict__["auto_create_eip"] = auto_create_eip
            __props__.__dict__["cam_role_name"] = cam_role_name
            __props__.__dict__["cbs_volumes"] = cbs_volumes
            if containers is None and not opts.urn:
                raise TypeError("Missing required property 'containers'")
            __props__.__dict__["containers"] = containers
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["cpu_type"] = cpu_type
            __props__.__dict__["dns_config_options"] = dns_config_options
            __props__.__dict__["dns_names_servers"] = dns_names_servers
            __props__.__dict__["dns_searches"] = dns_searches
            __props__.__dict__["eip_delete_policy"] = eip_delete_policy
            __props__.__dict__["eip_max_bandwidth_out"] = eip_max_bandwidth_out
            __props__.__dict__["eip_service_provider"] = eip_service_provider
            __props__.__dict__["existed_eip_ids"] = existed_eip_ids
            __props__.__dict__["gpu_count"] = gpu_count
            __props__.__dict__["gpu_type"] = gpu_type
            __props__.__dict__["image_registry_credentials"] = image_registry_credentials
            __props__.__dict__["init_containers"] = init_containers
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["name"] = name
            __props__.__dict__["nfs_volumes"] = nfs_volumes
            __props__.__dict__["restart_policy"] = restart_policy
            if security_groups is None and not opts.urn:
                raise TypeError("Missing required property 'security_groups'")
            __props__.__dict__["security_groups"] = security_groups
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["auto_create_eip_id"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["eip_address"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["status"] = None
        super(ContainerInstance, __self__).__init__(
            'tencentcloud:Eks/containerInstance:ContainerInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_create_eip: Optional[pulumi.Input[bool]] = None,
            auto_create_eip_id: Optional[pulumi.Input[str]] = None,
            cam_role_name: Optional[pulumi.Input[str]] = None,
            cbs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceCbsVolumeArgs']]]]] = None,
            containers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceContainerArgs']]]]] = None,
            cpu: Optional[pulumi.Input[float]] = None,
            cpu_type: Optional[pulumi.Input[str]] = None,
            created_time: Optional[pulumi.Input[str]] = None,
            dns_config_options: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            dns_names_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_searches: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            eip_address: Optional[pulumi.Input[str]] = None,
            eip_delete_policy: Optional[pulumi.Input[bool]] = None,
            eip_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
            eip_service_provider: Optional[pulumi.Input[str]] = None,
            existed_eip_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            gpu_count: Optional[pulumi.Input[int]] = None,
            gpu_type: Optional[pulumi.Input[str]] = None,
            image_registry_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceImageRegistryCredentialArgs']]]]] = None,
            init_containers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceInitContainerArgs']]]]] = None,
            memory: Optional[pulumi.Input[float]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nfs_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceNfsVolumeArgs']]]]] = None,
            private_ip: Optional[pulumi.Input[str]] = None,
            restart_policy: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'ContainerInstance':
        """
        Get an existing ContainerInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_create_eip: Indicates whether to create EIP instead of specify existing EIPs. Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] auto_create_eip_id: ID of EIP which create automatically.
        :param pulumi.Input[str] cam_role_name: CAM role name authorized to access.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceCbsVolumeArgs']]]] cbs_volumes: List of CBS volume.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceContainerArgs']]]] containers: List of container.
        :param pulumi.Input[float] cpu: The number of CPU cores. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] cpu_type: Type of cpu, which can set to `intel` or `amd`. It also support backup list like `amd,intel` which indicates using `intel` when `amd` sold out.
        :param pulumi.Input[str] created_time: Container instance creation time.
        :param pulumi.Input[Mapping[str, Any]] dns_config_options: Map of DNS config options.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names_servers: IP Addresses of DNS Servers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_searches: List of DNS Search Domain.
        :param pulumi.Input[str] eip_address: EIP address.
        :param pulumi.Input[bool] eip_delete_policy: Indicates weather the EIP release or not after instance deleted. Conflict with `existed_eip_ids`.
        :param pulumi.Input[int] eip_max_bandwidth_out: Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). Conflict with `existed_eip_ids`.
        :param pulumi.Input[str] eip_service_provider: EIP service provider. Default is `BGP`, values `CMCC`,`CTCC`,`CUCC` are available for whitelist customer. Conflict with `existed_eip_ids`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] existed_eip_ids: Existed EIP ID List which used to bind container instance. Conflict with `auto_create_eip` and auto create EIP options.
        :param pulumi.Input[int] gpu_count: Count of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] gpu_type: Type of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceImageRegistryCredentialArgs']]]] image_registry_credentials: List of credentials which pull from image registry.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceInitContainerArgs']]]] init_containers: List of initialized container.
        :param pulumi.Input[float] memory: Memory size. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        :param pulumi.Input[str] name: Name of EKS container instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainerInstanceNfsVolumeArgs']]]] nfs_volumes: List of NFS volume.
        :param pulumi.Input[str] private_ip: Private IP address.
        :param pulumi.Input[str] restart_policy: Container instance restart policy. Available values: `Always`, `Never`, `OnFailure`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: List of security group id.
        :param pulumi.Input[str] status: Container instance status.
        :param pulumi.Input[str] subnet_id: Subnet ID of container instance.
        :param pulumi.Input[str] vpc_id: VPC ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainerInstanceState.__new__(_ContainerInstanceState)

        __props__.__dict__["auto_create_eip"] = auto_create_eip
        __props__.__dict__["auto_create_eip_id"] = auto_create_eip_id
        __props__.__dict__["cam_role_name"] = cam_role_name
        __props__.__dict__["cbs_volumes"] = cbs_volumes
        __props__.__dict__["containers"] = containers
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["cpu_type"] = cpu_type
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["dns_config_options"] = dns_config_options
        __props__.__dict__["dns_names_servers"] = dns_names_servers
        __props__.__dict__["dns_searches"] = dns_searches
        __props__.__dict__["eip_address"] = eip_address
        __props__.__dict__["eip_delete_policy"] = eip_delete_policy
        __props__.__dict__["eip_max_bandwidth_out"] = eip_max_bandwidth_out
        __props__.__dict__["eip_service_provider"] = eip_service_provider
        __props__.__dict__["existed_eip_ids"] = existed_eip_ids
        __props__.__dict__["gpu_count"] = gpu_count
        __props__.__dict__["gpu_type"] = gpu_type
        __props__.__dict__["image_registry_credentials"] = image_registry_credentials
        __props__.__dict__["init_containers"] = init_containers
        __props__.__dict__["memory"] = memory
        __props__.__dict__["name"] = name
        __props__.__dict__["nfs_volumes"] = nfs_volumes
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["restart_policy"] = restart_policy
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        return ContainerInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoCreateEip")
    def auto_create_eip(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether to create EIP instead of specify existing EIPs. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "auto_create_eip")

    @property
    @pulumi.getter(name="autoCreateEipId")
    def auto_create_eip_id(self) -> pulumi.Output[str]:
        """
        ID of EIP which create automatically.
        """
        return pulumi.get(self, "auto_create_eip_id")

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> pulumi.Output[Optional[str]]:
        """
        CAM role name authorized to access.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter(name="cbsVolumes")
    def cbs_volumes(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerInstanceCbsVolume']]]:
        """
        List of CBS volume.
        """
        return pulumi.get(self, "cbs_volumes")

    @property
    @pulumi.getter
    def containers(self) -> pulumi.Output[Sequence['outputs.ContainerInstanceContainer']]:
        """
        List of container.
        """
        return pulumi.get(self, "containers")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[float]:
        """
        The number of CPU cores. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="cpuType")
    def cpu_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of cpu, which can set to `intel` or `amd`. It also support backup list like `amd,intel` which indicates using `intel` when `amd` sold out.
        """
        return pulumi.get(self, "cpu_type")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        Container instance creation time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="dnsConfigOptions")
    def dns_config_options(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Map of DNS config options.
        """
        return pulumi.get(self, "dns_config_options")

    @property
    @pulumi.getter(name="dnsNamesServers")
    def dns_names_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        IP Addresses of DNS Servers.
        """
        return pulumi.get(self, "dns_names_servers")

    @property
    @pulumi.getter(name="dnsSearches")
    def dns_searches(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of DNS Search Domain.
        """
        return pulumi.get(self, "dns_searches")

    @property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> pulumi.Output[str]:
        """
        EIP address.
        """
        return pulumi.get(self, "eip_address")

    @property
    @pulumi.getter(name="eipDeletePolicy")
    def eip_delete_policy(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates weather the EIP release or not after instance deleted. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_delete_policy")

    @property
    @pulumi.getter(name="eipMaxBandwidthOut")
    def eip_max_bandwidth_out(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum outgoing bandwidth to the public network, measured in Mbps (Mega bits per second). Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_max_bandwidth_out")

    @property
    @pulumi.getter(name="eipServiceProvider")
    def eip_service_provider(self) -> pulumi.Output[Optional[str]]:
        """
        EIP service provider. Default is `BGP`, values `CMCC`,`CTCC`,`CUCC` are available for whitelist customer. Conflict with `existed_eip_ids`.
        """
        return pulumi.get(self, "eip_service_provider")

    @property
    @pulumi.getter(name="existedEipIds")
    def existed_eip_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Existed EIP ID List which used to bind container instance. Conflict with `auto_create_eip` and auto create EIP options.
        """
        return pulumi.get(self, "existed_eip_ids")

    @property
    @pulumi.getter(name="gpuCount")
    def gpu_count(self) -> pulumi.Output[Optional[int]]:
        """
        Count of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "gpu_count")

    @property
    @pulumi.getter(name="gpuType")
    def gpu_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of GPU. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "gpu_type")

    @property
    @pulumi.getter(name="imageRegistryCredentials")
    def image_registry_credentials(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerInstanceImageRegistryCredential']]]:
        """
        List of credentials which pull from image registry.
        """
        return pulumi.get(self, "image_registry_credentials")

    @property
    @pulumi.getter(name="initContainers")
    def init_containers(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerInstanceInitContainer']]]:
        """
        List of initialized container.
        """
        return pulumi.get(self, "init_containers")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[float]:
        """
        Memory size. Check https://intl.cloud.tencent.com/document/product/457/34057 for specification references.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of EKS container instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nfsVolumes")
    def nfs_volumes(self) -> pulumi.Output[Optional[Sequence['outputs.ContainerInstanceNfsVolume']]]:
        """
        List of NFS volume.
        """
        return pulumi.get(self, "nfs_volumes")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[str]:
        """
        Private IP address.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="restartPolicy")
    def restart_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Container instance restart policy. Available values: `Always`, `Never`, `OnFailure`.
        """
        return pulumi.get(self, "restart_policy")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        List of security group id.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Container instance status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Subnet ID of container instance.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

