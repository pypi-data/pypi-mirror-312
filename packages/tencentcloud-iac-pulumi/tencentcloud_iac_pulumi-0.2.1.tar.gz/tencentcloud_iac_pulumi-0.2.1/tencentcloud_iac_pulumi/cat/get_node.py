# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNodeResult',
    'AwaitableGetNodeResult',
    'get_node',
    'get_node_output',
]

@pulumi.output_type
class GetNodeResult:
    """
    A collection of values returned by getNode.
    """
    def __init__(__self__, id=None, is_ipv6=None, location=None, node_defines=None, node_name=None, node_type=None, pay_mode=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_ipv6 and not isinstance(is_ipv6, bool):
            raise TypeError("Expected argument 'is_ipv6' to be a bool")
        pulumi.set(__self__, "is_ipv6", is_ipv6)
        if location and not isinstance(location, int):
            raise TypeError("Expected argument 'location' to be a int")
        pulumi.set(__self__, "location", location)
        if node_defines and not isinstance(node_defines, list):
            raise TypeError("Expected argument 'node_defines' to be a list")
        pulumi.set(__self__, "node_defines", node_defines)
        if node_name and not isinstance(node_name, str):
            raise TypeError("Expected argument 'node_name' to be a str")
        pulumi.set(__self__, "node_name", node_name)
        if node_type and not isinstance(node_type, int):
            raise TypeError("Expected argument 'node_type' to be a int")
        pulumi.set(__self__, "node_type", node_type)
        if pay_mode and not isinstance(pay_mode, int):
            raise TypeError("Expected argument 'pay_mode' to be a int")
        pulumi.set(__self__, "pay_mode", pay_mode)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isIpv6")
    def is_ipv6(self) -> Optional[bool]:
        return pulumi.get(self, "is_ipv6")

    @property
    @pulumi.getter
    def location(self) -> Optional[int]:
        """
        Node area:1=Chinese Mainland,2=Hong Kong, Macao and Taiwan,3=Overseas.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="nodeDefines")
    def node_defines(self) -> Sequence['outputs.GetNodeNodeDefineResult']:
        """
        Probe node list.
        """
        return pulumi.get(self, "node_defines")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> Optional[str]:
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[int]:
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[int]:
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetNodeResult(GetNodeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNodeResult(
            id=self.id,
            is_ipv6=self.is_ipv6,
            location=self.location,
            node_defines=self.node_defines,
            node_name=self.node_name,
            node_type=self.node_type,
            pay_mode=self.pay_mode,
            result_output_file=self.result_output_file)


def get_node(is_ipv6: Optional[bool] = None,
             location: Optional[int] = None,
             node_name: Optional[str] = None,
             node_type: Optional[int] = None,
             pay_mode: Optional[int] = None,
             result_output_file: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNodeResult:
    """
    Use this data source to query detailed information of cat node

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    node = tencentcloud.Cat.get_node(is_ipv6=False,
        location=2,
        node_type=1)
    ```
    <!--End PulumiCodeChooser -->


    :param bool is_ipv6: is IPv6.
    :param int location: Node area:1=Chinese Mainland,2=Hong Kong, Macao and Taiwan,3=Overseas.
    :param str node_name: Node name.
    :param int node_type: Node type 1:IDC,2:LastMile,3:Mobile.
    :param int pay_mode: Payment mode:1=Trial version,2=Paid version.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['isIpv6'] = is_ipv6
    __args__['location'] = location
    __args__['nodeName'] = node_name
    __args__['nodeType'] = node_type
    __args__['payMode'] = pay_mode
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cat/getNode:getNode', __args__, opts=opts, typ=GetNodeResult).value

    return AwaitableGetNodeResult(
        id=pulumi.get(__ret__, 'id'),
        is_ipv6=pulumi.get(__ret__, 'is_ipv6'),
        location=pulumi.get(__ret__, 'location'),
        node_defines=pulumi.get(__ret__, 'node_defines'),
        node_name=pulumi.get(__ret__, 'node_name'),
        node_type=pulumi.get(__ret__, 'node_type'),
        pay_mode=pulumi.get(__ret__, 'pay_mode'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_node)
def get_node_output(is_ipv6: Optional[pulumi.Input[Optional[bool]]] = None,
                    location: Optional[pulumi.Input[Optional[int]]] = None,
                    node_name: Optional[pulumi.Input[Optional[str]]] = None,
                    node_type: Optional[pulumi.Input[Optional[int]]] = None,
                    pay_mode: Optional[pulumi.Input[Optional[int]]] = None,
                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNodeResult]:
    """
    Use this data source to query detailed information of cat node

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    node = tencentcloud.Cat.get_node(is_ipv6=False,
        location=2,
        node_type=1)
    ```
    <!--End PulumiCodeChooser -->


    :param bool is_ipv6: is IPv6.
    :param int location: Node area:1=Chinese Mainland,2=Hong Kong, Macao and Taiwan,3=Overseas.
    :param str node_name: Node name.
    :param int node_type: Node type 1:IDC,2:LastMile,3:Mobile.
    :param int pay_mode: Payment mode:1=Trial version,2=Paid version.
    :param str result_output_file: Used to save results.
    """
    ...
