# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProbeDataResult',
    'AwaitableGetProbeDataResult',
    'get_probe_data',
    'get_probe_data_output',
]

@pulumi.output_type
class GetProbeDataResult:
    """
    A collection of values returned by getProbeData.
    """
    def __init__(__self__, ascending=None, begin_time=None, cities=None, codes=None, detailed_single_data_defines=None, districts=None, end_time=None, error_types=None, id=None, limit=None, offset=None, operators=None, result_output_file=None, selected_fields=None, sort_field=None, task_ids=None, task_type=None):
        if ascending and not isinstance(ascending, bool):
            raise TypeError("Expected argument 'ascending' to be a bool")
        pulumi.set(__self__, "ascending", ascending)
        if begin_time and not isinstance(begin_time, int):
            raise TypeError("Expected argument 'begin_time' to be a int")
        pulumi.set(__self__, "begin_time", begin_time)
        if cities and not isinstance(cities, list):
            raise TypeError("Expected argument 'cities' to be a list")
        pulumi.set(__self__, "cities", cities)
        if codes and not isinstance(codes, list):
            raise TypeError("Expected argument 'codes' to be a list")
        pulumi.set(__self__, "codes", codes)
        if detailed_single_data_defines and not isinstance(detailed_single_data_defines, list):
            raise TypeError("Expected argument 'detailed_single_data_defines' to be a list")
        pulumi.set(__self__, "detailed_single_data_defines", detailed_single_data_defines)
        if districts and not isinstance(districts, list):
            raise TypeError("Expected argument 'districts' to be a list")
        pulumi.set(__self__, "districts", districts)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if error_types and not isinstance(error_types, list):
            raise TypeError("Expected argument 'error_types' to be a list")
        pulumi.set(__self__, "error_types", error_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if operators and not isinstance(operators, list):
            raise TypeError("Expected argument 'operators' to be a list")
        pulumi.set(__self__, "operators", operators)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if selected_fields and not isinstance(selected_fields, list):
            raise TypeError("Expected argument 'selected_fields' to be a list")
        pulumi.set(__self__, "selected_fields", selected_fields)
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        pulumi.set(__self__, "sort_field", sort_field)
        if task_ids and not isinstance(task_ids, list):
            raise TypeError("Expected argument 'task_ids' to be a list")
        pulumi.set(__self__, "task_ids", task_ids)
        if task_type and not isinstance(task_type, str):
            raise TypeError("Expected argument 'task_type' to be a str")
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def ascending(self) -> bool:
        return pulumi.get(self, "ascending")

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> int:
        return pulumi.get(self, "begin_time")

    @property
    @pulumi.getter
    def cities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cities")

    @property
    @pulumi.getter
    def codes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "codes")

    @property
    @pulumi.getter(name="detailedSingleDataDefines")
    def detailed_single_data_defines(self) -> Sequence['outputs.GetProbeDataDetailedSingleDataDefineResult']:
        """
        Probe node list.
        """
        return pulumi.get(self, "detailed_single_data_defines")

    @property
    @pulumi.getter
    def districts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "districts")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="errorTypes")
    def error_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "error_types")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> int:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> int:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def operators(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "operators")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="selectedFields")
    def selected_fields(self) -> Sequence[str]:
        return pulumi.get(self, "selected_fields")

    @property
    @pulumi.getter(name="sortField")
    def sort_field(self) -> str:
        return pulumi.get(self, "sort_field")

    @property
    @pulumi.getter(name="taskIds")
    def task_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "task_ids")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        return pulumi.get(self, "task_type")


class AwaitableGetProbeDataResult(GetProbeDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProbeDataResult(
            ascending=self.ascending,
            begin_time=self.begin_time,
            cities=self.cities,
            codes=self.codes,
            detailed_single_data_defines=self.detailed_single_data_defines,
            districts=self.districts,
            end_time=self.end_time,
            error_types=self.error_types,
            id=self.id,
            limit=self.limit,
            offset=self.offset,
            operators=self.operators,
            result_output_file=self.result_output_file,
            selected_fields=self.selected_fields,
            sort_field=self.sort_field,
            task_ids=self.task_ids,
            task_type=self.task_type)


def get_probe_data(ascending: Optional[bool] = None,
                   begin_time: Optional[int] = None,
                   cities: Optional[Sequence[str]] = None,
                   codes: Optional[Sequence[str]] = None,
                   districts: Optional[Sequence[str]] = None,
                   end_time: Optional[int] = None,
                   error_types: Optional[Sequence[str]] = None,
                   limit: Optional[int] = None,
                   offset: Optional[int] = None,
                   operators: Optional[Sequence[str]] = None,
                   result_output_file: Optional[str] = None,
                   selected_fields: Optional[Sequence[str]] = None,
                   sort_field: Optional[str] = None,
                   task_ids: Optional[Sequence[str]] = None,
                   task_type: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProbeDataResult:
    """
    Use this data source to query detailed information of cat probe data

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    probe_data = tencentcloud.Cat.get_probe_data(ascending=True,
        begin_time=1667923200000,
        end_time=1667996208428,
        limit=20,
        offset=0,
        selected_fields=["terraform"],
        sort_field="ProbeTime",
        task_ids=["task-knare1mk"],
        task_type="AnalyzeTaskType_Network")
    ```
    <!--End PulumiCodeChooser -->


    :param bool ascending: true is Ascending.
    :param int begin_time: Start timestamp (in milliseconds).
    :param Sequence[str] cities: City list.
    :param Sequence[str] codes: Code list.
    :param Sequence[str] districts: Districts list.
    :param int end_time: End timestamp (in milliseconds).
    :param Sequence[str] error_types: ErrorTypes list.
    :param int limit: Limit.
    :param int offset: Offset.
    :param Sequence[str] operators: Operators list.
    :param str result_output_file: Used to save results.
    :param Sequence[str] selected_fields: Selected Fields.
    :param str sort_field: Fields to be sorted ProbeTime dial test time sorting can be filled in You can also fill in the selected fields in SelectedFields.
    :param Sequence[str] task_ids: TaskID list.
    :param str task_type: Task Type in AnalyzeTaskType_Network,AnalyzeTaskType_Browse,AnalyzeTaskType_UploadDownload,AnalyzeTaskType_Transport,AnalyzeTaskType_MediaStream.
    """
    __args__ = dict()
    __args__['ascending'] = ascending
    __args__['beginTime'] = begin_time
    __args__['cities'] = cities
    __args__['codes'] = codes
    __args__['districts'] = districts
    __args__['endTime'] = end_time
    __args__['errorTypes'] = error_types
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['operators'] = operators
    __args__['resultOutputFile'] = result_output_file
    __args__['selectedFields'] = selected_fields
    __args__['sortField'] = sort_field
    __args__['taskIds'] = task_ids
    __args__['taskType'] = task_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cat/getProbeData:getProbeData', __args__, opts=opts, typ=GetProbeDataResult).value

    return AwaitableGetProbeDataResult(
        ascending=pulumi.get(__ret__, 'ascending'),
        begin_time=pulumi.get(__ret__, 'begin_time'),
        cities=pulumi.get(__ret__, 'cities'),
        codes=pulumi.get(__ret__, 'codes'),
        detailed_single_data_defines=pulumi.get(__ret__, 'detailed_single_data_defines'),
        districts=pulumi.get(__ret__, 'districts'),
        end_time=pulumi.get(__ret__, 'end_time'),
        error_types=pulumi.get(__ret__, 'error_types'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        operators=pulumi.get(__ret__, 'operators'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        selected_fields=pulumi.get(__ret__, 'selected_fields'),
        sort_field=pulumi.get(__ret__, 'sort_field'),
        task_ids=pulumi.get(__ret__, 'task_ids'),
        task_type=pulumi.get(__ret__, 'task_type'))


@_utilities.lift_output_func(get_probe_data)
def get_probe_data_output(ascending: Optional[pulumi.Input[bool]] = None,
                          begin_time: Optional[pulumi.Input[int]] = None,
                          cities: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          codes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          districts: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          end_time: Optional[pulumi.Input[int]] = None,
                          error_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          limit: Optional[pulumi.Input[int]] = None,
                          offset: Optional[pulumi.Input[int]] = None,
                          operators: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          selected_fields: Optional[pulumi.Input[Sequence[str]]] = None,
                          sort_field: Optional[pulumi.Input[str]] = None,
                          task_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          task_type: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProbeDataResult]:
    """
    Use this data source to query detailed information of cat probe data

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    probe_data = tencentcloud.Cat.get_probe_data(ascending=True,
        begin_time=1667923200000,
        end_time=1667996208428,
        limit=20,
        offset=0,
        selected_fields=["terraform"],
        sort_field="ProbeTime",
        task_ids=["task-knare1mk"],
        task_type="AnalyzeTaskType_Network")
    ```
    <!--End PulumiCodeChooser -->


    :param bool ascending: true is Ascending.
    :param int begin_time: Start timestamp (in milliseconds).
    :param Sequence[str] cities: City list.
    :param Sequence[str] codes: Code list.
    :param Sequence[str] districts: Districts list.
    :param int end_time: End timestamp (in milliseconds).
    :param Sequence[str] error_types: ErrorTypes list.
    :param int limit: Limit.
    :param int offset: Offset.
    :param Sequence[str] operators: Operators list.
    :param str result_output_file: Used to save results.
    :param Sequence[str] selected_fields: Selected Fields.
    :param str sort_field: Fields to be sorted ProbeTime dial test time sorting can be filled in You can also fill in the selected fields in SelectedFields.
    :param Sequence[str] task_ids: TaskID list.
    :param str task_type: Task Type in AnalyzeTaskType_Network,AnalyzeTaskType_Browse,AnalyzeTaskType_UploadDownload,AnalyzeTaskType_Transport,AnalyzeTaskType_MediaStream.
    """
    ...
