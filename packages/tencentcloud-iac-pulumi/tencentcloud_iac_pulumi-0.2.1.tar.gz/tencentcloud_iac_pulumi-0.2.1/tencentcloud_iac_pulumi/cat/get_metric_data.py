# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetMetricDataResult',
    'AwaitableGetMetricDataResult',
    'get_metric_data',
    'get_metric_data_output',
]

@pulumi.output_type
class GetMetricDataResult:
    """
    A collection of values returned by getMetricData.
    """
    def __init__(__self__, analyze_task_type=None, field=None, filter=None, filters=None, group_by=None, id=None, metric_set=None, metric_type=None, result_output_file=None):
        if analyze_task_type and not isinstance(analyze_task_type, str):
            raise TypeError("Expected argument 'analyze_task_type' to be a str")
        pulumi.set(__self__, "analyze_task_type", analyze_task_type)
        if field and not isinstance(field, str):
            raise TypeError("Expected argument 'field' to be a str")
        pulumi.set(__self__, "field", field)
        if filter and not isinstance(filter, str):
            raise TypeError("Expected argument 'filter' to be a str")
        pulumi.set(__self__, "filter", filter)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if group_by and not isinstance(group_by, str):
            raise TypeError("Expected argument 'group_by' to be a str")
        pulumi.set(__self__, "group_by", group_by)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_set and not isinstance(metric_set, str):
            raise TypeError("Expected argument 'metric_set' to be a str")
        pulumi.set(__self__, "metric_set", metric_set)
        if metric_type and not isinstance(metric_type, str):
            raise TypeError("Expected argument 'metric_type' to be a str")
        pulumi.set(__self__, "metric_type", metric_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="analyzeTaskType")
    def analyze_task_type(self) -> str:
        return pulumi.get(self, "analyze_task_type")

    @property
    @pulumi.getter
    def field(self) -> str:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def filters(self) -> Sequence[str]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[str]:
        return pulumi.get(self, "group_by")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricSet")
    def metric_set(self) -> str:
        """
        Return JSON string.
        """
        return pulumi.get(self, "metric_set")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetMetricDataResult(GetMetricDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMetricDataResult(
            analyze_task_type=self.analyze_task_type,
            field=self.field,
            filter=self.filter,
            filters=self.filters,
            group_by=self.group_by,
            id=self.id,
            metric_set=self.metric_set,
            metric_type=self.metric_type,
            result_output_file=self.result_output_file)


def get_metric_data(analyze_task_type: Optional[str] = None,
                    field: Optional[str] = None,
                    filter: Optional[str] = None,
                    filters: Optional[Sequence[str]] = None,
                    group_by: Optional[str] = None,
                    metric_type: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMetricDataResult:
    """
    Use this data source to query detailed information of cat metric_data

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    metric_data = tencentcloud.Cat.get_metric_data(analyze_task_type="AnalyzeTaskType_Network",
        field="avg(\\"ping_time\\")",
        filters=[
            "\\"host\\" = 'www.qq.com'",
            "time >= now()-1h",
        ],
        metric_type="gauge")
    ```
    <!--End PulumiCodeChooser -->


    :param str analyze_task_type: Analysis of task type, supported types: `AnalyzeTaskType_Network`: network quality, `AnalyzeTaskType_Browse`: page performance, `AnalyzeTaskType_Transport`: port performance, `AnalyzeTaskType_UploadDownload`: file transport, `AnalyzeTaskType_MediaStream`: audiovisual experience.
    :param str field: Detailed fields of metrics, specified metrics can be passed or aggregate metrics, such as avg(ping_time) means entire delay.
    :param str filter: Filter conditions can be passed as a single filter or multiple parameters concatenated together.
    :param Sequence[str] filters: Multiple condition filtering, supports combining multiple filtering conditions for query.
    :param str group_by: Aggregation time, such as 1m, 1d, 30d, and so on.
    :param str metric_type: Metric type, metrics queries are passed with gauge by default.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['analyzeTaskType'] = analyze_task_type
    __args__['field'] = field
    __args__['filter'] = filter
    __args__['filters'] = filters
    __args__['groupBy'] = group_by
    __args__['metricType'] = metric_type
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cat/getMetricData:getMetricData', __args__, opts=opts, typ=GetMetricDataResult).value

    return AwaitableGetMetricDataResult(
        analyze_task_type=pulumi.get(__ret__, 'analyze_task_type'),
        field=pulumi.get(__ret__, 'field'),
        filter=pulumi.get(__ret__, 'filter'),
        filters=pulumi.get(__ret__, 'filters'),
        group_by=pulumi.get(__ret__, 'group_by'),
        id=pulumi.get(__ret__, 'id'),
        metric_set=pulumi.get(__ret__, 'metric_set'),
        metric_type=pulumi.get(__ret__, 'metric_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_metric_data)
def get_metric_data_output(analyze_task_type: Optional[pulumi.Input[str]] = None,
                           field: Optional[pulumi.Input[str]] = None,
                           filter: Optional[pulumi.Input[Optional[str]]] = None,
                           filters: Optional[pulumi.Input[Sequence[str]]] = None,
                           group_by: Optional[pulumi.Input[Optional[str]]] = None,
                           metric_type: Optional[pulumi.Input[str]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMetricDataResult]:
    """
    Use this data source to query detailed information of cat metric_data

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    metric_data = tencentcloud.Cat.get_metric_data(analyze_task_type="AnalyzeTaskType_Network",
        field="avg(\\"ping_time\\")",
        filters=[
            "\\"host\\" = 'www.qq.com'",
            "time >= now()-1h",
        ],
        metric_type="gauge")
    ```
    <!--End PulumiCodeChooser -->


    :param str analyze_task_type: Analysis of task type, supported types: `AnalyzeTaskType_Network`: network quality, `AnalyzeTaskType_Browse`: page performance, `AnalyzeTaskType_Transport`: port performance, `AnalyzeTaskType_UploadDownload`: file transport, `AnalyzeTaskType_MediaStream`: audiovisual experience.
    :param str field: Detailed fields of metrics, specified metrics can be passed or aggregate metrics, such as avg(ping_time) means entire delay.
    :param str filter: Filter conditions can be passed as a single filter or multiple parameters concatenated together.
    :param Sequence[str] filters: Multiple condition filtering, supports combining multiple filtering conditions for query.
    :param str group_by: Aggregation time, such as 1m, 1d, 30d, and so on.
    :param str metric_type: Metric type, metrics queries are passed with gauge by default.
    :param str result_output_file: Used to save results.
    """
    ...
