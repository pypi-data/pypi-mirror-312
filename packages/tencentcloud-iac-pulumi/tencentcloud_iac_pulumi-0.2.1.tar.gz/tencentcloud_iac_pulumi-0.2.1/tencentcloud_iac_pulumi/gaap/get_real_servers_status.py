# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRealServersStatusResult',
    'AwaitableGetRealServersStatusResult',
    'get_real_servers_status',
    'get_real_servers_status_output',
]

@pulumi.output_type
class GetRealServersStatusResult:
    """
    A collection of values returned by getRealServersStatus.
    """
    def __init__(__self__, id=None, real_server_ids=None, real_server_status_sets=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if real_server_ids and not isinstance(real_server_ids, list):
            raise TypeError("Expected argument 'real_server_ids' to be a list")
        pulumi.set(__self__, "real_server_ids", real_server_ids)
        if real_server_status_sets and not isinstance(real_server_status_sets, list):
            raise TypeError("Expected argument 'real_server_status_sets' to be a list")
        pulumi.set(__self__, "real_server_status_sets", real_server_status_sets)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="realServerIds")
    def real_server_ids(self) -> Sequence[str]:
        return pulumi.get(self, "real_server_ids")

    @property
    @pulumi.getter(name="realServerStatusSets")
    def real_server_status_sets(self) -> Sequence['outputs.GetRealServersStatusRealServerStatusSetResult']:
        """
        Real Server Status Set.
        """
        return pulumi.get(self, "real_server_status_sets")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetRealServersStatusResult(GetRealServersStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRealServersStatusResult(
            id=self.id,
            real_server_ids=self.real_server_ids,
            real_server_status_sets=self.real_server_status_sets,
            result_output_file=self.result_output_file)


def get_real_servers_status(real_server_ids: Optional[Sequence[str]] = None,
                            result_output_file: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRealServersStatusResult:
    """
    Use this data source to query detailed information of gaap real servers status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    real_servers_status = tencentcloud.Gaap.get_real_servers_status(real_server_ids=["rs-3mlpbuut"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] real_server_ids: Real Server Ids.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['realServerIds'] = real_server_ids
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/getRealServersStatus:getRealServersStatus', __args__, opts=opts, typ=GetRealServersStatusResult).value

    return AwaitableGetRealServersStatusResult(
        id=pulumi.get(__ret__, 'id'),
        real_server_ids=pulumi.get(__ret__, 'real_server_ids'),
        real_server_status_sets=pulumi.get(__ret__, 'real_server_status_sets'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_real_servers_status)
def get_real_servers_status_output(real_server_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRealServersStatusResult]:
    """
    Use this data source to query detailed information of gaap real servers status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    real_servers_status = tencentcloud.Gaap.get_real_servers_status(real_server_ids=["rs-3mlpbuut"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] real_server_ids: Real Server Ids.
    :param str result_output_file: Used to save results.
    """
    ...
