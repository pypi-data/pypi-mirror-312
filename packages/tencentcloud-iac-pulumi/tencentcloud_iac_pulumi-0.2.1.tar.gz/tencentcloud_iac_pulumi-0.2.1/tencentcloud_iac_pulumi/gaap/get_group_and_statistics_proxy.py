# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupAndStatisticsProxyResult',
    'AwaitableGetGroupAndStatisticsProxyResult',
    'get_group_and_statistics_proxy',
    'get_group_and_statistics_proxy_output',
]

@pulumi.output_type
class GetGroupAndStatisticsProxyResult:
    """
    A collection of values returned by getGroupAndStatisticsProxy.
    """
    def __init__(__self__, group_sets=None, id=None, project_id=None, result_output_file=None):
        if group_sets and not isinstance(group_sets, list):
            raise TypeError("Expected argument 'group_sets' to be a list")
        pulumi.set(__self__, "group_sets", group_sets)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="groupSets")
    def group_sets(self) -> Sequence['outputs.GetGroupAndStatisticsProxyGroupSetResult']:
        """
        Channel group information that can be counted.
        """
        return pulumi.get(self, "group_sets")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetGroupAndStatisticsProxyResult(GetGroupAndStatisticsProxyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupAndStatisticsProxyResult(
            group_sets=self.group_sets,
            id=self.id,
            project_id=self.project_id,
            result_output_file=self.result_output_file)


def get_group_and_statistics_proxy(project_id: Optional[int] = None,
                                   result_output_file: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupAndStatisticsProxyResult:
    """
    Use this data source to query detailed information of gaap and statistics proxy

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    group_and_statistics_proxy = tencentcloud.Gaap.get_group_and_statistics_proxy(project_id=0)
    ```
    <!--End PulumiCodeChooser -->


    :param int project_id: Project Id.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/getGroupAndStatisticsProxy:getGroupAndStatisticsProxy', __args__, opts=opts, typ=GetGroupAndStatisticsProxyResult).value

    return AwaitableGetGroupAndStatisticsProxyResult(
        group_sets=pulumi.get(__ret__, 'group_sets'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_group_and_statistics_proxy)
def get_group_and_statistics_proxy_output(project_id: Optional[pulumi.Input[int]] = None,
                                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupAndStatisticsProxyResult]:
    """
    Use this data source to query detailed information of gaap and statistics proxy

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    group_and_statistics_proxy = tencentcloud.Gaap.get_group_and_statistics_proxy(project_id=0)
    ```
    <!--End PulumiCodeChooser -->


    :param int project_id: Project Id.
    :param str result_output_file: Used to save results.
    """
    ...
