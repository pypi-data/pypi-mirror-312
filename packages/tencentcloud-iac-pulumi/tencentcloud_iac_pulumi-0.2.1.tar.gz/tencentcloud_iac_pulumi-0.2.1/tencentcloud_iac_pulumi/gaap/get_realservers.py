# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRealserversResult',
    'AwaitableGetRealserversResult',
    'get_realservers',
    'get_realservers_output',
]

@pulumi.output_type
class GetRealserversResult:
    """
    A collection of values returned by getRealservers.
    """
    def __init__(__self__, domain=None, id=None, ip=None, name=None, project_id=None, realservers=None, result_output_file=None, tags=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if realservers and not isinstance(realservers, list):
            raise TypeError("Expected argument 'realservers' to be a list")
        pulumi.set(__self__, "realservers", realservers)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain of the GAAP realserver.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        IP of the GAAP realserver.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the GAAP realserver.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        ID of the project within the GAAP realserver.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def realservers(self) -> Sequence['outputs.GetRealserversRealserverResult']:
        """
        An information list of GAAP realserver. Each element contains the following attributes:
        """
        return pulumi.get(self, "realservers")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        Tags of the GAAP realserver.
        """
        return pulumi.get(self, "tags")


class AwaitableGetRealserversResult(GetRealserversResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRealserversResult(
            domain=self.domain,
            id=self.id,
            ip=self.ip,
            name=self.name,
            project_id=self.project_id,
            realservers=self.realservers,
            result_output_file=self.result_output_file,
            tags=self.tags)


def get_realservers(domain: Optional[str] = None,
                    ip: Optional[str] = None,
                    name: Optional[str] = None,
                    project_id: Optional[int] = None,
                    result_output_file: Optional[str] = None,
                    tags: Optional[Mapping[str, Any]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRealserversResult:
    """
    Use this data source to query gaap realservers.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_realserver = tencentcloud.gaap.Realserver("fooRealserver", ip="1.1.1.1")
    foo_realservers = foo_realserver.ip.apply(lambda ip: tencentcloud.Gaap.get_realservers_output(ip=ip))
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: Domain of the GAAP realserver to be queried, conflict with `ip`.
    :param str ip: IP of the GAAP realserver to be queried, conflict with `domain`.
    :param str name: Name of the GAAP realserver to be queried, the maximum length is 30.
    :param int project_id: ID of the project within the GAAP realserver to be queried, default value is `-1`, no set means all projects.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['ip'] = ip
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/getRealservers:getRealservers', __args__, opts=opts, typ=GetRealserversResult).value

    return AwaitableGetRealserversResult(
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        realservers=pulumi.get(__ret__, 'realservers'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_realservers)
def get_realservers_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                           ip: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           project_id: Optional[pulumi.Input[Optional[int]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRealserversResult]:
    """
    Use this data source to query gaap realservers.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_realserver = tencentcloud.gaap.Realserver("fooRealserver", ip="1.1.1.1")
    foo_realservers = foo_realserver.ip.apply(lambda ip: tencentcloud.Gaap.get_realservers_output(ip=ip))
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: Domain of the GAAP realserver to be queried, conflict with `ip`.
    :param str ip: IP of the GAAP realserver to be queried, conflict with `domain`.
    :param str name: Name of the GAAP realserver to be queried, the maximum length is 30.
    :param int project_id: ID of the project within the GAAP realserver to be queried, default value is `-1`, no set means all projects.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
    """
    ...
