# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ProxyGroupArgs', 'ProxyGroup']

@pulumi.input_type
class ProxyGroupArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 project_id: pulumi.Input[int],
                 real_server_region: pulumi.Input[str],
                 ip_address_version: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProxyGroup resource.
        :param pulumi.Input[str] group_name: Channel group alias.
        :param pulumi.Input[int] project_id: ID of the project to which the proxy group belongs.
        :param pulumi.Input[str] real_server_region: real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
        :param pulumi.Input[str] ip_address_version: IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
        :param pulumi.Input[str] package_type: Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "real_server_region", real_server_region)
        if ip_address_version is not None:
            pulumi.set(__self__, "ip_address_version", ip_address_version)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Channel group alias.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        ID of the project to which the proxy group belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="realServerRegion")
    def real_server_region(self) -> pulumi.Input[str]:
        """
        real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
        """
        return pulumi.get(self, "real_server_region")

    @real_server_region.setter
    def real_server_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "real_server_region", value)

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
        """
        return pulumi.get(self, "ip_address_version")

    @ip_address_version.setter
    def ip_address_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_version", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)


@pulumi.input_type
class _ProxyGroupState:
    def __init__(__self__, *,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ip_address_version: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 real_server_region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProxyGroup resources.
        :param pulumi.Input[str] group_name: Channel group alias.
        :param pulumi.Input[str] ip_address_version: IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
        :param pulumi.Input[str] package_type: Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
        :param pulumi.Input[int] project_id: ID of the project to which the proxy group belongs.
        :param pulumi.Input[str] real_server_region: real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if ip_address_version is not None:
            pulumi.set(__self__, "ip_address_version", ip_address_version)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if real_server_region is not None:
            pulumi.set(__self__, "real_server_region", real_server_region)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Channel group alias.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
        """
        return pulumi.get(self, "ip_address_version")

    @ip_address_version.setter
    def ip_address_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_version", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the project to which the proxy group belongs.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="realServerRegion")
    def real_server_region(self) -> Optional[pulumi.Input[str]]:
        """
        real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
        """
        return pulumi.get(self, "real_server_region")

    @real_server_region.setter
    def real_server_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "real_server_region", value)


class ProxyGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ip_address_version: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 real_server_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a gaap proxy group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_group = tencentcloud.gaap.ProxyGroup("proxyGroup",
            group_name="tf-test-update",
            ip_address_version="IPv4",
            package_type="Thunder",
            project_id=0,
            real_server_region="Beijing")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        gaap proxy_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Gaap/proxyGroup:ProxyGroup proxy_group proxy_group_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_name: Channel group alias.
        :param pulumi.Input[str] ip_address_version: IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
        :param pulumi.Input[str] package_type: Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
        :param pulumi.Input[int] project_id: ID of the project to which the proxy group belongs.
        :param pulumi.Input[str] real_server_region: real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProxyGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a gaap proxy group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        proxy_group = tencentcloud.gaap.ProxyGroup("proxyGroup",
            group_name="tf-test-update",
            ip_address_version="IPv4",
            package_type="Thunder",
            project_id=0,
            real_server_region="Beijing")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        gaap proxy_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Gaap/proxyGroup:ProxyGroup proxy_group proxy_group_id
        ```

        :param str resource_name: The name of the resource.
        :param ProxyGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxyGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 ip_address_version: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 real_server_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxyGroupArgs.__new__(ProxyGroupArgs)

            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["ip_address_version"] = ip_address_version
            __props__.__dict__["package_type"] = package_type
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if real_server_region is None and not opts.urn:
                raise TypeError("Missing required property 'real_server_region'")
            __props__.__dict__["real_server_region"] = real_server_region
        super(ProxyGroup, __self__).__init__(
            'tencentcloud:Gaap/proxyGroup:ProxyGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            ip_address_version: Optional[pulumi.Input[str]] = None,
            package_type: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            real_server_region: Optional[pulumi.Input[str]] = None) -> 'ProxyGroup':
        """
        Get an existing ProxyGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] group_name: Channel group alias.
        :param pulumi.Input[str] ip_address_version: IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
        :param pulumi.Input[str] package_type: Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
        :param pulumi.Input[int] project_id: ID of the project to which the proxy group belongs.
        :param pulumi.Input[str] real_server_region: real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProxyGroupState.__new__(_ProxyGroupState)

        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["ip_address_version"] = ip_address_version
        __props__.__dict__["package_type"] = package_type
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["real_server_region"] = real_server_region
        return ProxyGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Channel group alias.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> pulumi.Output[Optional[str]]:
        """
        IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
        """
        return pulumi.get(self, "ip_address_version")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> pulumi.Output[Optional[str]]:
        """
        Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
        """
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        ID of the project to which the proxy group belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="realServerRegion")
    def real_server_region(self) -> pulumi.Output[str]:
        """
        real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
        """
        return pulumi.get(self, "real_server_region")

