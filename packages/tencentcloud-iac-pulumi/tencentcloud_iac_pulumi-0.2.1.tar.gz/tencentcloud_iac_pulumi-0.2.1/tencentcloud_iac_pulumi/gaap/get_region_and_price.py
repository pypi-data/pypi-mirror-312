# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRegionAndPriceResult',
    'AwaitableGetRegionAndPriceResult',
    'get_region_and_price',
    'get_region_and_price_output',
]

@pulumi.output_type
class GetRegionAndPriceResult:
    """
    A collection of values returned by getRegionAndPrice.
    """
    def __init__(__self__, bandwidth_unit_prices=None, currency=None, dest_region_sets=None, id=None, ip_address_version=None, package_type=None, result_output_file=None):
        if bandwidth_unit_prices and not isinstance(bandwidth_unit_prices, list):
            raise TypeError("Expected argument 'bandwidth_unit_prices' to be a list")
        pulumi.set(__self__, "bandwidth_unit_prices", bandwidth_unit_prices)
        if currency and not isinstance(currency, str):
            raise TypeError("Expected argument 'currency' to be a str")
        pulumi.set(__self__, "currency", currency)
        if dest_region_sets and not isinstance(dest_region_sets, list):
            raise TypeError("Expected argument 'dest_region_sets' to be a list")
        pulumi.set(__self__, "dest_region_sets", dest_region_sets)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address_version and not isinstance(ip_address_version, str):
            raise TypeError("Expected argument 'ip_address_version' to be a str")
        pulumi.set(__self__, "ip_address_version", ip_address_version)
        if package_type and not isinstance(package_type, str):
            raise TypeError("Expected argument 'package_type' to be a str")
        pulumi.set(__self__, "package_type", package_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="bandwidthUnitPrices")
    def bandwidth_unit_prices(self) -> Sequence['outputs.GetRegionAndPriceBandwidthUnitPriceResult']:
        """
        Band width Unit Price, Unit:yuan/Mbps/day.
        """
        return pulumi.get(self, "bandwidth_unit_prices")

    @property
    @pulumi.getter
    def currency(self) -> str:
        """
        Bandwidth Price Currency Type:CNYUSD.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter(name="destRegionSets")
    def dest_region_sets(self) -> Sequence['outputs.GetRegionAndPriceDestRegionSetResult']:
        """
        Source Site Area Details List.
        """
        return pulumi.get(self, "dest_region_sets")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> Optional[str]:
        return pulumi.get(self, "ip_address_version")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[str]:
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetRegionAndPriceResult(GetRegionAndPriceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRegionAndPriceResult(
            bandwidth_unit_prices=self.bandwidth_unit_prices,
            currency=self.currency,
            dest_region_sets=self.dest_region_sets,
            id=self.id,
            ip_address_version=self.ip_address_version,
            package_type=self.package_type,
            result_output_file=self.result_output_file)


def get_region_and_price(ip_address_version: Optional[str] = None,
                         package_type: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRegionAndPriceResult:
    """
    Use this data source to query detailed information of gaap region and price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    region_and_price = tencentcloud.Gaap.get_region_and_price()
    ```
    <!--End PulumiCodeChooser -->


    :param str ip_address_version: IP version. Available values: IPv4, IPv6. Default is IPv4.
    :param str package_type: Type of channel package. `Thunder` represents standard channel group, `Accelerator` represents game accelerator channel, and `CrossBorder` represents cross-border channel.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['ipAddressVersion'] = ip_address_version
    __args__['packageType'] = package_type
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/getRegionAndPrice:getRegionAndPrice', __args__, opts=opts, typ=GetRegionAndPriceResult).value

    return AwaitableGetRegionAndPriceResult(
        bandwidth_unit_prices=pulumi.get(__ret__, 'bandwidth_unit_prices'),
        currency=pulumi.get(__ret__, 'currency'),
        dest_region_sets=pulumi.get(__ret__, 'dest_region_sets'),
        id=pulumi.get(__ret__, 'id'),
        ip_address_version=pulumi.get(__ret__, 'ip_address_version'),
        package_type=pulumi.get(__ret__, 'package_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_region_and_price)
def get_region_and_price_output(ip_address_version: Optional[pulumi.Input[Optional[str]]] = None,
                                package_type: Optional[pulumi.Input[Optional[str]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRegionAndPriceResult]:
    """
    Use this data source to query detailed information of gaap region and price

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    region_and_price = tencentcloud.Gaap.get_region_and_price()
    ```
    <!--End PulumiCodeChooser -->


    :param str ip_address_version: IP version. Available values: IPv4, IPv6. Default is IPv4.
    :param str package_type: Type of channel package. `Thunder` represents standard channel group, `Accelerator` represents game accelerator channel, and `CrossBorder` represents cross-border channel.
    :param str result_output_file: Used to save results.
    """
    ...
