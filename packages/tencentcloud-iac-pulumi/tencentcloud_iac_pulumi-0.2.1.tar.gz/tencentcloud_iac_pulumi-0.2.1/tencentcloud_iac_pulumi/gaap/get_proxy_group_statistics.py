# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProxyGroupStatisticsResult',
    'AwaitableGetProxyGroupStatisticsResult',
    'get_proxy_group_statistics',
    'get_proxy_group_statistics_output',
]

@pulumi.output_type
class GetProxyGroupStatisticsResult:
    """
    A collection of values returned by getProxyGroupStatistics.
    """
    def __init__(__self__, end_time=None, granularity=None, group_id=None, id=None, metric_names=None, result_output_file=None, start_time=None, statistics_datas=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if granularity and not isinstance(granularity, int):
            raise TypeError("Expected argument 'granularity' to be a int")
        pulumi.set(__self__, "granularity", granularity)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_names and not isinstance(metric_names, list):
            raise TypeError("Expected argument 'metric_names' to be a list")
        pulumi.set(__self__, "metric_names", metric_names)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if statistics_datas and not isinstance(statistics_datas, list):
            raise TypeError("Expected argument 'statistics_datas' to be a list")
        pulumi.set(__self__, "statistics_datas", statistics_datas)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def granularity(self) -> int:
        return pulumi.get(self, "granularity")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricNames")
    def metric_names(self) -> Sequence[str]:
        return pulumi.get(self, "metric_names")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="statisticsDatas")
    def statistics_datas(self) -> Sequence['outputs.GetProxyGroupStatisticsStatisticsDataResult']:
        """
        proxy Group Statistics.
        """
        return pulumi.get(self, "statistics_datas")


class AwaitableGetProxyGroupStatisticsResult(GetProxyGroupStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxyGroupStatisticsResult(
            end_time=self.end_time,
            granularity=self.granularity,
            group_id=self.group_id,
            id=self.id,
            metric_names=self.metric_names,
            result_output_file=self.result_output_file,
            start_time=self.start_time,
            statistics_datas=self.statistics_datas)


def get_proxy_group_statistics(end_time: Optional[str] = None,
                               granularity: Optional[int] = None,
                               group_id: Optional[str] = None,
                               metric_names: Optional[Sequence[str]] = None,
                               result_output_file: Optional[str] = None,
                               start_time: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProxyGroupStatisticsResult:
    """
    Use this data source to query detailed information of gaap proxy group statistics

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    proxy_group_statistics = tencentcloud.Gaap.get_proxy_group_statistics(end_time="2023-10-09 23:59:59",
        granularity=300,
        group_id="link-m9t4yho9",
        metric_names=[
            "InBandwidth",
            "OutBandwidth",
            "InFlow",
            "OutFlow",
        ],
        start_time="2023-10-09 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End Time.
    :param int granularity: Monitoring granularity, currently supporting 60 300 3600 86400, in seconds.When the time range does not exceed 1 day, support a minimum granularity of 60 seconds;When the time range does not exceed 7 days, support a minimum granularity of 3600 seconds;When the time range does not exceed 30 days, the minimum granularity supported is 86400 seconds.
    :param str group_id: Group Id.
    :param Sequence[str] metric_names: Metric Names. support, InBandwidth, OutBandwidth, Concurrent, InPackets, OutPackets.
    :param str result_output_file: Used to save results.
    :param str start_time: Start Time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['granularity'] = granularity
    __args__['groupId'] = group_id
    __args__['metricNames'] = metric_names
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/getProxyGroupStatistics:getProxyGroupStatistics', __args__, opts=opts, typ=GetProxyGroupStatisticsResult).value

    return AwaitableGetProxyGroupStatisticsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        granularity=pulumi.get(__ret__, 'granularity'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        metric_names=pulumi.get(__ret__, 'metric_names'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'),
        statistics_datas=pulumi.get(__ret__, 'statistics_datas'))


@_utilities.lift_output_func(get_proxy_group_statistics)
def get_proxy_group_statistics_output(end_time: Optional[pulumi.Input[str]] = None,
                                      granularity: Optional[pulumi.Input[int]] = None,
                                      group_id: Optional[pulumi.Input[str]] = None,
                                      metric_names: Optional[pulumi.Input[Sequence[str]]] = None,
                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      start_time: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProxyGroupStatisticsResult]:
    """
    Use this data source to query detailed information of gaap proxy group statistics

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    proxy_group_statistics = tencentcloud.Gaap.get_proxy_group_statistics(end_time="2023-10-09 23:59:59",
        granularity=300,
        group_id="link-m9t4yho9",
        metric_names=[
            "InBandwidth",
            "OutBandwidth",
            "InFlow",
            "OutFlow",
        ],
        start_time="2023-10-09 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End Time.
    :param int granularity: Monitoring granularity, currently supporting 60 300 3600 86400, in seconds.When the time range does not exceed 1 day, support a minimum granularity of 60 seconds;When the time range does not exceed 7 days, support a minimum granularity of 3600 seconds;When the time range does not exceed 30 days, the minimum granularity supported is 86400 seconds.
    :param str group_id: Group Id.
    :param Sequence[str] metric_names: Metric Names. support, InBandwidth, OutBandwidth, Concurrent, InPackets, OutPackets.
    :param str result_output_file: Used to save results.
    :param str start_time: Start Time.
    """
    ...
