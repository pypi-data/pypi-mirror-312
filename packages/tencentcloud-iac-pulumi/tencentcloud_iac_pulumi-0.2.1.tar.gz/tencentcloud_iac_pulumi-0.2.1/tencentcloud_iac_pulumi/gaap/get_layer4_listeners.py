# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetLayer4ListenersResult',
    'AwaitableGetLayer4ListenersResult',
    'get_layer4_listeners',
    'get_layer4_listeners_output',
]

@pulumi.output_type
class GetLayer4ListenersResult:
    """
    A collection of values returned by getLayer4Listeners.
    """
    def __init__(__self__, id=None, listener_id=None, listener_name=None, listeners=None, port=None, protocol=None, proxy_id=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_id and not isinstance(listener_id, str):
            raise TypeError("Expected argument 'listener_id' to be a str")
        pulumi.set(__self__, "listener_id", listener_id)
        if listener_name and not isinstance(listener_name, str):
            raise TypeError("Expected argument 'listener_name' to be a str")
        pulumi.set(__self__, "listener_name", listener_name)
        if listeners and not isinstance(listeners, list):
            raise TypeError("Expected argument 'listeners' to be a list")
        pulumi.set(__self__, "listeners", listeners)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if proxy_id and not isinstance(proxy_id, str):
            raise TypeError("Expected argument 'proxy_id' to be a str")
        pulumi.set(__self__, "proxy_id", proxy_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[str]:
        return pulumi.get(self, "listener_id")

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[str]:
        return pulumi.get(self, "listener_name")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetLayer4ListenersListenerResult']:
        """
        An information list of layer4 listeners. Each element contains the following attributes:
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port of the layer4 listener.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol of the layer4 listener.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[str]:
        """
        ID of the GAAP proxy.
        """
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetLayer4ListenersResult(GetLayer4ListenersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLayer4ListenersResult(
            id=self.id,
            listener_id=self.listener_id,
            listener_name=self.listener_name,
            listeners=self.listeners,
            port=self.port,
            protocol=self.protocol,
            proxy_id=self.proxy_id,
            result_output_file=self.result_output_file)


def get_layer4_listeners(listener_id: Optional[str] = None,
                         listener_name: Optional[str] = None,
                         port: Optional[int] = None,
                         protocol: Optional[str] = None,
                         proxy_id: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLayer4ListenersResult:
    """
    Use this data source to query gaap layer4 listeners.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_proxy = tencentcloud.gaap.Proxy("fooProxy",
        bandwidth=10,
        concurrent=2,
        access_region="SouthChina",
        realserver_region="NorthChina")
    foo_realserver = tencentcloud.gaap.Realserver("fooRealserver", ip="1.1.1.1")
    foo_layer4_listener = tencentcloud.gaap.Layer4Listener("fooLayer4Listener",
        protocol="TCP",
        port=80,
        realserver_type="IP",
        proxy_id=foo_proxy.id,
        health_check=True,
        interval=5,
        connect_timeout=2,
        realserver_bind_sets=[tencentcloud.gaap.Layer4ListenerRealserverBindSetArgs(
            id=foo_realserver.id,
            ip=foo_realserver.ip,
            port=80,
        )])
    foo_layer4_listeners = tencentcloud.Gaap.get_layer4_listeners_output(protocol="TCP",
        proxy_id=foo_proxy.id,
        listener_id=foo_layer4_listener.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str listener_id: ID of the layer4 listener to be queried.
    :param str listener_name: Name of the layer4 listener to be queried.
    :param int port: Port of the layer4 listener to be queried.
    :param str protocol: Protocol of the layer4 listener to be queried. Valid values: `TCP` and `UDP`.
    :param str proxy_id: ID of the GAAP proxy to be queried.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['listenerId'] = listener_id
    __args__['listenerName'] = listener_name
    __args__['port'] = port
    __args__['protocol'] = protocol
    __args__['proxyId'] = proxy_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Gaap/getLayer4Listeners:getLayer4Listeners', __args__, opts=opts, typ=GetLayer4ListenersResult).value

    return AwaitableGetLayer4ListenersResult(
        id=pulumi.get(__ret__, 'id'),
        listener_id=pulumi.get(__ret__, 'listener_id'),
        listener_name=pulumi.get(__ret__, 'listener_name'),
        listeners=pulumi.get(__ret__, 'listeners'),
        port=pulumi.get(__ret__, 'port'),
        protocol=pulumi.get(__ret__, 'protocol'),
        proxy_id=pulumi.get(__ret__, 'proxy_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_layer4_listeners)
def get_layer4_listeners_output(listener_id: Optional[pulumi.Input[Optional[str]]] = None,
                                listener_name: Optional[pulumi.Input[Optional[str]]] = None,
                                port: Optional[pulumi.Input[Optional[int]]] = None,
                                protocol: Optional[pulumi.Input[str]] = None,
                                proxy_id: Optional[pulumi.Input[Optional[str]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLayer4ListenersResult]:
    """
    Use this data source to query gaap layer4 listeners.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_proxy = tencentcloud.gaap.Proxy("fooProxy",
        bandwidth=10,
        concurrent=2,
        access_region="SouthChina",
        realserver_region="NorthChina")
    foo_realserver = tencentcloud.gaap.Realserver("fooRealserver", ip="1.1.1.1")
    foo_layer4_listener = tencentcloud.gaap.Layer4Listener("fooLayer4Listener",
        protocol="TCP",
        port=80,
        realserver_type="IP",
        proxy_id=foo_proxy.id,
        health_check=True,
        interval=5,
        connect_timeout=2,
        realserver_bind_sets=[tencentcloud.gaap.Layer4ListenerRealserverBindSetArgs(
            id=foo_realserver.id,
            ip=foo_realserver.ip,
            port=80,
        )])
    foo_layer4_listeners = tencentcloud.Gaap.get_layer4_listeners_output(protocol="TCP",
        proxy_id=foo_proxy.id,
        listener_id=foo_layer4_listener.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str listener_id: ID of the layer4 listener to be queried.
    :param str listener_name: Name of the layer4 listener to be queried.
    :param int port: Port of the layer4 listener to be queried.
    :param str protocol: Protocol of the layer4 listener to be queried. Valid values: `TCP` and `UDP`.
    :param str proxy_id: ID of the GAAP proxy to be queried.
    :param str result_output_file: Used to save results.
    """
    ...
