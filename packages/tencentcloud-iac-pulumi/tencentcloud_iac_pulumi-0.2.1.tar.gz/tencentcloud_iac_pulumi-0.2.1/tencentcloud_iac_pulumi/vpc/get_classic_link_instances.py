# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetClassicLinkInstancesResult',
    'AwaitableGetClassicLinkInstancesResult',
    'get_classic_link_instances',
    'get_classic_link_instances_output',
]

@pulumi.output_type
class GetClassicLinkInstancesResult:
    """
    A collection of values returned by getClassicLinkInstances.
    """
    def __init__(__self__, classic_link_instance_sets=None, filters=None, id=None, result_output_file=None):
        if classic_link_instance_sets and not isinstance(classic_link_instance_sets, list):
            raise TypeError("Expected argument 'classic_link_instance_sets' to be a list")
        pulumi.set(__self__, "classic_link_instance_sets", classic_link_instance_sets)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="classicLinkInstanceSets")
    def classic_link_instance_sets(self) -> Sequence['outputs.GetClassicLinkInstancesClassicLinkInstanceSetResult']:
        """
        Classiclink instance.
        """
        return pulumi.get(self, "classic_link_instance_sets")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetClassicLinkInstancesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetClassicLinkInstancesResult(GetClassicLinkInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClassicLinkInstancesResult(
            classic_link_instance_sets=self.classic_link_instance_sets,
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file)


def get_classic_link_instances(filters: Optional[Sequence[pulumi.InputType['GetClassicLinkInstancesFilterArgs']]] = None,
                               result_output_file: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClassicLinkInstancesResult:
    """
    Use this data source to query detailed information of vpc classic_link_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    classic_link_instances = tencentcloud.Vpc.get_classic_link_instances(filters=[tencentcloud.vpc.GetClassicLinkInstancesFilterArgs(
        name="vpc-id",
        values=["vpc-lh4nqig9"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetClassicLinkInstancesFilterArgs']] filters: Filter conditions.`vpc-id` - String - (Filter condition) The VPC instance ID. `vm-ip` - String - (Filter condition) The IP address of the CVM on the basic network.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Vpc/getClassicLinkInstances:getClassicLinkInstances', __args__, opts=opts, typ=GetClassicLinkInstancesResult).value

    return AwaitableGetClassicLinkInstancesResult(
        classic_link_instance_sets=pulumi.get(__ret__, 'classic_link_instance_sets'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_classic_link_instances)
def get_classic_link_instances_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetClassicLinkInstancesFilterArgs']]]]] = None,
                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClassicLinkInstancesResult]:
    """
    Use this data source to query detailed information of vpc classic_link_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    classic_link_instances = tencentcloud.Vpc.get_classic_link_instances(filters=[tencentcloud.vpc.GetClassicLinkInstancesFilterArgs(
        name="vpc-id",
        values=["vpc-lh4nqig9"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetClassicLinkInstancesFilterArgs']] filters: Filter conditions.`vpc-id` - String - (Filter condition) The VPC instance ID. `vm-ip` - String - (Filter condition) The IP address of the CVM on the basic network.
    :param str result_output_file: Used to save results.
    """
    ...
