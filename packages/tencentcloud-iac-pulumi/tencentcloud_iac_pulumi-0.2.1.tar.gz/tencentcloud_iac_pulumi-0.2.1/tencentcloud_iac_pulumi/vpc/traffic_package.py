# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TrafficPackageArgs', 'TrafficPackage']

@pulumi.input_type
class TrafficPackageArgs:
    def __init__(__self__, *,
                 traffic_amount: pulumi.Input[int]):
        """
        The set of arguments for constructing a TrafficPackage resource.
        :param pulumi.Input[int] traffic_amount: Traffic Package Amount, eg: 10,20,50,512,1024,5120,51200,60,300,600,3072,6144,30720,61440,307200.
        """
        pulumi.set(__self__, "traffic_amount", traffic_amount)

    @property
    @pulumi.getter(name="trafficAmount")
    def traffic_amount(self) -> pulumi.Input[int]:
        """
        Traffic Package Amount, eg: 10,20,50,512,1024,5120,51200,60,300,600,3072,6144,30720,61440,307200.
        """
        return pulumi.get(self, "traffic_amount")

    @traffic_amount.setter
    def traffic_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "traffic_amount", value)


@pulumi.input_type
class _TrafficPackageState:
    def __init__(__self__, *,
                 created_time: Optional[pulumi.Input[str]] = None,
                 remaining_amount: Optional[pulumi.Input[float]] = None,
                 traffic_amount: Optional[pulumi.Input[int]] = None,
                 used_amount: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering TrafficPackage resources.
        :param pulumi.Input[str] created_time: Created time.
        :param pulumi.Input[float] remaining_amount: Remaining amount.
        :param pulumi.Input[int] traffic_amount: Traffic Package Amount, eg: 10,20,50,512,1024,5120,51200,60,300,600,3072,6144,30720,61440,307200.
        :param pulumi.Input[float] used_amount: Used amount.
        """
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if remaining_amount is not None:
            pulumi.set(__self__, "remaining_amount", remaining_amount)
        if traffic_amount is not None:
            pulumi.set(__self__, "traffic_amount", traffic_amount)
        if used_amount is not None:
            pulumi.set(__self__, "used_amount", used_amount)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        Created time.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="remainingAmount")
    def remaining_amount(self) -> Optional[pulumi.Input[float]]:
        """
        Remaining amount.
        """
        return pulumi.get(self, "remaining_amount")

    @remaining_amount.setter
    def remaining_amount(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "remaining_amount", value)

    @property
    @pulumi.getter(name="trafficAmount")
    def traffic_amount(self) -> Optional[pulumi.Input[int]]:
        """
        Traffic Package Amount, eg: 10,20,50,512,1024,5120,51200,60,300,600,3072,6144,30720,61440,307200.
        """
        return pulumi.get(self, "traffic_amount")

    @traffic_amount.setter
    def traffic_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "traffic_amount", value)

    @property
    @pulumi.getter(name="usedAmount")
    def used_amount(self) -> Optional[pulumi.Input[float]]:
        """
        Used amount.
        """
        return pulumi.get(self, "used_amount")

    @used_amount.setter
    def used_amount(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "used_amount", value)


class TrafficPackage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 traffic_amount: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc traffic_package

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.vpc.TrafficPackage("example", traffic_amount=10)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc traffic_package can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/trafficPackage:TrafficPackage traffic_package traffic_package_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] traffic_amount: Traffic Package Amount, eg: 10,20,50,512,1024,5120,51200,60,300,600,3072,6144,30720,61440,307200.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrafficPackageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc traffic_package

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.vpc.TrafficPackage("example", traffic_amount=10)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc traffic_package can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/trafficPackage:TrafficPackage traffic_package traffic_package_id
        ```

        :param str resource_name: The name of the resource.
        :param TrafficPackageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficPackageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 traffic_amount: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficPackageArgs.__new__(TrafficPackageArgs)

            if traffic_amount is None and not opts.urn:
                raise TypeError("Missing required property 'traffic_amount'")
            __props__.__dict__["traffic_amount"] = traffic_amount
            __props__.__dict__["created_time"] = None
            __props__.__dict__["remaining_amount"] = None
            __props__.__dict__["used_amount"] = None
        super(TrafficPackage, __self__).__init__(
            'tencentcloud:Vpc/trafficPackage:TrafficPackage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_time: Optional[pulumi.Input[str]] = None,
            remaining_amount: Optional[pulumi.Input[float]] = None,
            traffic_amount: Optional[pulumi.Input[int]] = None,
            used_amount: Optional[pulumi.Input[float]] = None) -> 'TrafficPackage':
        """
        Get an existing TrafficPackage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_time: Created time.
        :param pulumi.Input[float] remaining_amount: Remaining amount.
        :param pulumi.Input[int] traffic_amount: Traffic Package Amount, eg: 10,20,50,512,1024,5120,51200,60,300,600,3072,6144,30720,61440,307200.
        :param pulumi.Input[float] used_amount: Used amount.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrafficPackageState.__new__(_TrafficPackageState)

        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["remaining_amount"] = remaining_amount
        __props__.__dict__["traffic_amount"] = traffic_amount
        __props__.__dict__["used_amount"] = used_amount
        return TrafficPackage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        Created time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="remainingAmount")
    def remaining_amount(self) -> pulumi.Output[float]:
        """
        Remaining amount.
        """
        return pulumi.get(self, "remaining_amount")

    @property
    @pulumi.getter(name="trafficAmount")
    def traffic_amount(self) -> pulumi.Output[int]:
        """
        Traffic Package Amount, eg: 10,20,50,512,1024,5120,51200,60,300,600,3072,6144,30720,61440,307200.
        """
        return pulumi.get(self, "traffic_amount")

    @property
    @pulumi.getter(name="usedAmount")
    def used_amount(self) -> pulumi.Output[float]:
        """
        Used amount.
        """
        return pulumi.get(self, "used_amount")

