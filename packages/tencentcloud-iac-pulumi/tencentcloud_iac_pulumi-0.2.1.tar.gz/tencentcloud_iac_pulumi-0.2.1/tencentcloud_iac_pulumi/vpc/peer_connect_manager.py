# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PeerConnectManagerArgs', 'PeerConnectManager']

@pulumi.input_type
class PeerConnectManagerArgs:
    def __init__(__self__, *,
                 destination_region: pulumi.Input[str],
                 destination_uin: pulumi.Input[str],
                 destination_vpc_id: pulumi.Input[str],
                 peering_connection_name: pulumi.Input[str],
                 source_vpc_id: pulumi.Input[str],
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PeerConnectManager resource.
        :param pulumi.Input[str] destination_region: Peer region.
        :param pulumi.Input[str] destination_uin: Peer user UIN.
        :param pulumi.Input[str] destination_vpc_id: The unique ID of the peer VPC.
        :param pulumi.Input[str] peering_connection_name: Peer connection name.
        :param pulumi.Input[str] source_vpc_id: The unique ID of the local VPC.
        :param pulumi.Input[int] bandwidth: Bandwidth upper limit, unit Mbps.
        :param pulumi.Input[str] charge_type: Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        :param pulumi.Input[str] qos_level: Service classification PT, AU, AG.
        :param pulumi.Input[str] type: Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        """
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_uin", destination_uin)
        pulumi.set(__self__, "destination_vpc_id", destination_vpc_id)
        pulumi.set(__self__, "peering_connection_name", peering_connection_name)
        pulumi.set(__self__, "source_vpc_id", source_vpc_id)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if qos_level is not None:
            pulumi.set(__self__, "qos_level", qos_level)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Input[str]:
        """
        Peer region.
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_region", value)

    @property
    @pulumi.getter(name="destinationUin")
    def destination_uin(self) -> pulumi.Input[str]:
        """
        Peer user UIN.
        """
        return pulumi.get(self, "destination_uin")

    @destination_uin.setter
    def destination_uin(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_uin", value)

    @property
    @pulumi.getter(name="destinationVpcId")
    def destination_vpc_id(self) -> pulumi.Input[str]:
        """
        The unique ID of the peer VPC.
        """
        return pulumi.get(self, "destination_vpc_id")

    @destination_vpc_id.setter
    def destination_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_vpc_id", value)

    @property
    @pulumi.getter(name="peeringConnectionName")
    def peering_connection_name(self) -> pulumi.Input[str]:
        """
        Peer connection name.
        """
        return pulumi.get(self, "peering_connection_name")

    @peering_connection_name.setter
    def peering_connection_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "peering_connection_name", value)

    @property
    @pulumi.getter(name="sourceVpcId")
    def source_vpc_id(self) -> pulumi.Input[str]:
        """
        The unique ID of the local VPC.
        """
        return pulumi.get(self, "source_vpc_id")

    @source_vpc_id.setter
    def source_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_vpc_id", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth upper limit, unit Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="qosLevel")
    def qos_level(self) -> Optional[pulumi.Input[str]]:
        """
        Service classification PT, AU, AG.
        """
        return pulumi.get(self, "qos_level")

    @qos_level.setter
    def qos_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_level", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _PeerConnectManagerState:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 destination_uin: Optional[pulumi.Input[str]] = None,
                 destination_vpc_id: Optional[pulumi.Input[str]] = None,
                 peering_connection_name: Optional[pulumi.Input[str]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 source_vpc_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PeerConnectManager resources.
        :param pulumi.Input[int] bandwidth: Bandwidth upper limit, unit Mbps.
        :param pulumi.Input[str] charge_type: Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        :param pulumi.Input[str] destination_region: Peer region.
        :param pulumi.Input[str] destination_uin: Peer user UIN.
        :param pulumi.Input[str] destination_vpc_id: The unique ID of the peer VPC.
        :param pulumi.Input[str] peering_connection_name: Peer connection name.
        :param pulumi.Input[str] qos_level: Service classification PT, AU, AG.
        :param pulumi.Input[str] source_vpc_id: The unique ID of the local VPC.
        :param pulumi.Input[str] type: Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if destination_uin is not None:
            pulumi.set(__self__, "destination_uin", destination_uin)
        if destination_vpc_id is not None:
            pulumi.set(__self__, "destination_vpc_id", destination_vpc_id)
        if peering_connection_name is not None:
            pulumi.set(__self__, "peering_connection_name", peering_connection_name)
        if qos_level is not None:
            pulumi.set(__self__, "qos_level", qos_level)
        if source_vpc_id is not None:
            pulumi.set(__self__, "source_vpc_id", source_vpc_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Bandwidth upper limit, unit Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[str]]:
        """
        Peer region.
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_region", value)

    @property
    @pulumi.getter(name="destinationUin")
    def destination_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Peer user UIN.
        """
        return pulumi.get(self, "destination_uin")

    @destination_uin.setter
    def destination_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_uin", value)

    @property
    @pulumi.getter(name="destinationVpcId")
    def destination_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the peer VPC.
        """
        return pulumi.get(self, "destination_vpc_id")

    @destination_vpc_id.setter
    def destination_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_vpc_id", value)

    @property
    @pulumi.getter(name="peeringConnectionName")
    def peering_connection_name(self) -> Optional[pulumi.Input[str]]:
        """
        Peer connection name.
        """
        return pulumi.get(self, "peering_connection_name")

    @peering_connection_name.setter
    def peering_connection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peering_connection_name", value)

    @property
    @pulumi.getter(name="qosLevel")
    def qos_level(self) -> Optional[pulumi.Input[str]]:
        """
        Service classification PT, AU, AG.
        """
        return pulumi.get(self, "qos_level")

    @qos_level.setter
    def qos_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_level", value)

    @property
    @pulumi.getter(name="sourceVpcId")
    def source_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the local VPC.
        """
        return pulumi.get(self, "source_vpc_id")

    @source_vpc_id.setter
    def source_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_vpc_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class PeerConnectManager(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 destination_uin: Optional[pulumi.Input[str]] = None,
                 destination_vpc_id: Optional[pulumi.Input[str]] = None,
                 peering_connection_name: Optional[pulumi.Input[str]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 source_vpc_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc peer_connect_manager

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        owner_uin = info.owner_uin
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        des_vpc = tencentcloud.vpc.Instance("desVpc", cidr_block="172.16.0.0/16")
        peer_connect_manager = tencentcloud.vpc.PeerConnectManager("peerConnectManager",
            source_vpc_id=vpc.id,
            peering_connection_name="example-iac",
            destination_vpc_id=des_vpc.id,
            destination_uin=owner_uin,
            destination_region="ap-guangzhou")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc peer_connect_manager can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/peerConnectManager:PeerConnectManager peer_connect_manager peer_connect_manager_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bandwidth: Bandwidth upper limit, unit Mbps.
        :param pulumi.Input[str] charge_type: Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        :param pulumi.Input[str] destination_region: Peer region.
        :param pulumi.Input[str] destination_uin: Peer user UIN.
        :param pulumi.Input[str] destination_vpc_id: The unique ID of the peer VPC.
        :param pulumi.Input[str] peering_connection_name: Peer connection name.
        :param pulumi.Input[str] qos_level: Service classification PT, AU, AG.
        :param pulumi.Input[str] source_vpc_id: The unique ID of the local VPC.
        :param pulumi.Input[str] type: Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PeerConnectManagerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc peer_connect_manager

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        info = tencentcloud.User.get_info()
        owner_uin = info.owner_uin
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        des_vpc = tencentcloud.vpc.Instance("desVpc", cidr_block="172.16.0.0/16")
        peer_connect_manager = tencentcloud.vpc.PeerConnectManager("peerConnectManager",
            source_vpc_id=vpc.id,
            peering_connection_name="example-iac",
            destination_vpc_id=des_vpc.id,
            destination_uin=owner_uin,
            destination_region="ap-guangzhou")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc peer_connect_manager can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/peerConnectManager:PeerConnectManager peer_connect_manager peer_connect_manager_id
        ```

        :param str resource_name: The name of the resource.
        :param PeerConnectManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PeerConnectManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 destination_uin: Optional[pulumi.Input[str]] = None,
                 destination_vpc_id: Optional[pulumi.Input[str]] = None,
                 peering_connection_name: Optional[pulumi.Input[str]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 source_vpc_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PeerConnectManagerArgs.__new__(PeerConnectManagerArgs)

            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["charge_type"] = charge_type
            if destination_region is None and not opts.urn:
                raise TypeError("Missing required property 'destination_region'")
            __props__.__dict__["destination_region"] = destination_region
            if destination_uin is None and not opts.urn:
                raise TypeError("Missing required property 'destination_uin'")
            __props__.__dict__["destination_uin"] = destination_uin
            if destination_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'destination_vpc_id'")
            __props__.__dict__["destination_vpc_id"] = destination_vpc_id
            if peering_connection_name is None and not opts.urn:
                raise TypeError("Missing required property 'peering_connection_name'")
            __props__.__dict__["peering_connection_name"] = peering_connection_name
            __props__.__dict__["qos_level"] = qos_level
            if source_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_vpc_id'")
            __props__.__dict__["source_vpc_id"] = source_vpc_id
            __props__.__dict__["type"] = type
        super(PeerConnectManager, __self__).__init__(
            'tencentcloud:Vpc/peerConnectManager:PeerConnectManager',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            destination_region: Optional[pulumi.Input[str]] = None,
            destination_uin: Optional[pulumi.Input[str]] = None,
            destination_vpc_id: Optional[pulumi.Input[str]] = None,
            peering_connection_name: Optional[pulumi.Input[str]] = None,
            qos_level: Optional[pulumi.Input[str]] = None,
            source_vpc_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'PeerConnectManager':
        """
        Get an existing PeerConnectManager resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bandwidth: Bandwidth upper limit, unit Mbps.
        :param pulumi.Input[str] charge_type: Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        :param pulumi.Input[str] destination_region: Peer region.
        :param pulumi.Input[str] destination_uin: Peer user UIN.
        :param pulumi.Input[str] destination_vpc_id: The unique ID of the peer VPC.
        :param pulumi.Input[str] peering_connection_name: Peer connection name.
        :param pulumi.Input[str] qos_level: Service classification PT, AU, AG.
        :param pulumi.Input[str] source_vpc_id: The unique ID of the local VPC.
        :param pulumi.Input[str] type: Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PeerConnectManagerState.__new__(_PeerConnectManagerState)

        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["destination_region"] = destination_region
        __props__.__dict__["destination_uin"] = destination_uin
        __props__.__dict__["destination_vpc_id"] = destination_vpc_id
        __props__.__dict__["peering_connection_name"] = peering_connection_name
        __props__.__dict__["qos_level"] = qos_level
        __props__.__dict__["source_vpc_id"] = source_vpc_id
        __props__.__dict__["type"] = type
        return PeerConnectManager(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[Optional[int]]:
        """
        Bandwidth upper limit, unit Mbps.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[str]:
        """
        Billing mode, daily peak value POSTPAID_BY_DAY_MAX, monthly value 95 POSTPAID_BY_MONTH_95.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Output[str]:
        """
        Peer region.
        """
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="destinationUin")
    def destination_uin(self) -> pulumi.Output[str]:
        """
        Peer user UIN.
        """
        return pulumi.get(self, "destination_uin")

    @property
    @pulumi.getter(name="destinationVpcId")
    def destination_vpc_id(self) -> pulumi.Output[str]:
        """
        The unique ID of the peer VPC.
        """
        return pulumi.get(self, "destination_vpc_id")

    @property
    @pulumi.getter(name="peeringConnectionName")
    def peering_connection_name(self) -> pulumi.Output[str]:
        """
        Peer connection name.
        """
        return pulumi.get(self, "peering_connection_name")

    @property
    @pulumi.getter(name="qosLevel")
    def qos_level(self) -> pulumi.Output[str]:
        """
        Service classification PT, AU, AG.
        """
        return pulumi.get(self, "qos_level")

    @property
    @pulumi.getter(name="sourceVpcId")
    def source_vpc_id(self) -> pulumi.Output[str]:
        """
        The unique ID of the local VPC.
        """
        return pulumi.get(self, "source_vpc_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Interworking type, VPC_PEER interworking between VPCs; VPC_BM_PEER interworking between VPC and BM Network.
        """
        return pulumi.get(self, "type")

