# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EnableEndPointConnectArgs', 'EnableEndPointConnect']

@pulumi.input_type
class EnableEndPointConnectArgs:
    def __init__(__self__, *,
                 accept_flag: pulumi.Input[bool],
                 end_point_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 end_point_service_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a EnableEndPointConnect resource.
        :param pulumi.Input[bool] accept_flag: Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] end_point_ids: Endpoint ID.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID.
        """
        pulumi.set(__self__, "accept_flag", accept_flag)
        pulumi.set(__self__, "end_point_ids", end_point_ids)
        pulumi.set(__self__, "end_point_service_id", end_point_service_id)

    @property
    @pulumi.getter(name="acceptFlag")
    def accept_flag(self) -> pulumi.Input[bool]:
        """
        Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
        """
        return pulumi.get(self, "accept_flag")

    @accept_flag.setter
    def accept_flag(self, value: pulumi.Input[bool]):
        pulumi.set(self, "accept_flag", value)

    @property
    @pulumi.getter(name="endPointIds")
    def end_point_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_ids")

    @end_point_ids.setter
    def end_point_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "end_point_ids", value)

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> pulumi.Input[str]:
        """
        Endpoint service ID.
        """
        return pulumi.get(self, "end_point_service_id")

    @end_point_service_id.setter
    def end_point_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_point_service_id", value)


@pulumi.input_type
class _EnableEndPointConnectState:
    def __init__(__self__, *,
                 accept_flag: Optional[pulumi.Input[bool]] = None,
                 end_point_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EnableEndPointConnect resources.
        :param pulumi.Input[bool] accept_flag: Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] end_point_ids: Endpoint ID.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID.
        """
        if accept_flag is not None:
            pulumi.set(__self__, "accept_flag", accept_flag)
        if end_point_ids is not None:
            pulumi.set(__self__, "end_point_ids", end_point_ids)
        if end_point_service_id is not None:
            pulumi.set(__self__, "end_point_service_id", end_point_service_id)

    @property
    @pulumi.getter(name="acceptFlag")
    def accept_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
        """
        return pulumi.get(self, "accept_flag")

    @accept_flag.setter
    def accept_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_flag", value)

    @property
    @pulumi.getter(name="endPointIds")
    def end_point_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_ids")

    @end_point_ids.setter
    def end_point_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "end_point_ids", value)

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Endpoint service ID.
        """
        return pulumi.get(self, "end_point_service_id")

    @end_point_service_id.setter
    def end_point_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_point_service_id", value)


class EnableEndPointConnect(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_flag: Optional[pulumi.Input[bool]] = None,
                 end_point_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc enable_end_point_connect

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        enable_end_point_connect = tencentcloud.vpc.EnableEndPointConnect("enableEndPointConnect",
            accept_flag=True,
            end_point_ids=["vpce-6q0ftmke"],
            end_point_service_id="vpcsvc-98jddhcz")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_flag: Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] end_point_ids: Endpoint ID.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnableEndPointConnectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc enable_end_point_connect

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        enable_end_point_connect = tencentcloud.vpc.EnableEndPointConnect("enableEndPointConnect",
            accept_flag=True,
            end_point_ids=["vpce-6q0ftmke"],
            end_point_service_id="vpcsvc-98jddhcz")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param EnableEndPointConnectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnableEndPointConnectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accept_flag: Optional[pulumi.Input[bool]] = None,
                 end_point_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 end_point_service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnableEndPointConnectArgs.__new__(EnableEndPointConnectArgs)

            if accept_flag is None and not opts.urn:
                raise TypeError("Missing required property 'accept_flag'")
            __props__.__dict__["accept_flag"] = accept_flag
            if end_point_ids is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_ids'")
            __props__.__dict__["end_point_ids"] = end_point_ids
            if end_point_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'end_point_service_id'")
            __props__.__dict__["end_point_service_id"] = end_point_service_id
        super(EnableEndPointConnect, __self__).__init__(
            'tencentcloud:Vpc/enableEndPointConnect:EnableEndPointConnect',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accept_flag: Optional[pulumi.Input[bool]] = None,
            end_point_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            end_point_service_id: Optional[pulumi.Input[str]] = None) -> 'EnableEndPointConnect':
        """
        Get an existing EnableEndPointConnect resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] accept_flag: Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] end_point_ids: Endpoint ID.
        :param pulumi.Input[str] end_point_service_id: Endpoint service ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnableEndPointConnectState.__new__(_EnableEndPointConnectState)

        __props__.__dict__["accept_flag"] = accept_flag
        __props__.__dict__["end_point_ids"] = end_point_ids
        __props__.__dict__["end_point_service_id"] = end_point_service_id
        return EnableEndPointConnect(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptFlag")
    def accept_flag(self) -> pulumi.Output[bool]:
        """
        Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
        """
        return pulumi.get(self, "accept_flag")

    @property
    @pulumi.getter(name="endPointIds")
    def end_point_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Endpoint ID.
        """
        return pulumi.get(self, "end_point_ids")

    @property
    @pulumi.getter(name="endPointServiceId")
    def end_point_service_id(self) -> pulumi.Output[str]:
        """
        Endpoint service ID.
        """
        return pulumi.get(self, "end_point_service_id")

