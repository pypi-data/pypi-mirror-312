# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Ipv6SubnetCidrBlockArgs', 'Ipv6SubnetCidrBlock']

@pulumi.input_type
class Ipv6SubnetCidrBlockArgs:
    def __init__(__self__, *,
                 ipv6_subnet_cidr_blocks: pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs'],
                 vpc_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a Ipv6SubnetCidrBlock resource.
        :param pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs'] ipv6_subnet_cidr_blocks: Allocate a list of `IPv6` subnets.
        :param pulumi.Input[str] vpc_id: The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
        """
        pulumi.set(__self__, "ipv6_subnet_cidr_blocks", ipv6_subnet_cidr_blocks)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="ipv6SubnetCidrBlocks")
    def ipv6_subnet_cidr_blocks(self) -> pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']:
        """
        Allocate a list of `IPv6` subnets.
        """
        return pulumi.get(self, "ipv6_subnet_cidr_blocks")

    @ipv6_subnet_cidr_blocks.setter
    def ipv6_subnet_cidr_blocks(self, value: pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']):
        pulumi.set(self, "ipv6_subnet_cidr_blocks", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _Ipv6SubnetCidrBlockState:
    def __init__(__self__, *,
                 ipv6_subnet_cidr_blocks: Optional[pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ipv6SubnetCidrBlock resources.
        :param pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs'] ipv6_subnet_cidr_blocks: Allocate a list of `IPv6` subnets.
        :param pulumi.Input[str] vpc_id: The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
        """
        if ipv6_subnet_cidr_blocks is not None:
            pulumi.set(__self__, "ipv6_subnet_cidr_blocks", ipv6_subnet_cidr_blocks)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="ipv6SubnetCidrBlocks")
    def ipv6_subnet_cidr_blocks(self) -> Optional[pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']]:
        """
        Allocate a list of `IPv6` subnets.
        """
        return pulumi.get(self, "ipv6_subnet_cidr_blocks")

    @ipv6_subnet_cidr_blocks.setter
    def ipv6_subnet_cidr_blocks(self, value: Optional[pulumi.Input['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']]):
        pulumi.set(self, "ipv6_subnet_cidr_blocks", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Ipv6SubnetCidrBlock(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ipv6_subnet_cidr_blocks: Optional[pulumi.Input[pulumi.InputType['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc ipv6_subnet_cidr_block

        ## Import

        vpc ipv6_subnet_cidr_block can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/ipv6SubnetCidrBlock:Ipv6SubnetCidrBlock ipv6_subnet_cidr_block ipv6_subnet_cidr_block_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']] ipv6_subnet_cidr_blocks: Allocate a list of `IPv6` subnets.
        :param pulumi.Input[str] vpc_id: The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Ipv6SubnetCidrBlockArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc ipv6_subnet_cidr_block

        ## Import

        vpc ipv6_subnet_cidr_block can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/ipv6SubnetCidrBlock:Ipv6SubnetCidrBlock ipv6_subnet_cidr_block ipv6_subnet_cidr_block_id
        ```

        :param str resource_name: The name of the resource.
        :param Ipv6SubnetCidrBlockArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Ipv6SubnetCidrBlockArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ipv6_subnet_cidr_blocks: Optional[pulumi.Input[pulumi.InputType['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Ipv6SubnetCidrBlockArgs.__new__(Ipv6SubnetCidrBlockArgs)

            if ipv6_subnet_cidr_blocks is None and not opts.urn:
                raise TypeError("Missing required property 'ipv6_subnet_cidr_blocks'")
            __props__.__dict__["ipv6_subnet_cidr_blocks"] = ipv6_subnet_cidr_blocks
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(Ipv6SubnetCidrBlock, __self__).__init__(
            'tencentcloud:Vpc/ipv6SubnetCidrBlock:Ipv6SubnetCidrBlock',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ipv6_subnet_cidr_blocks: Optional[pulumi.Input[pulumi.InputType['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Ipv6SubnetCidrBlock':
        """
        Get an existing Ipv6SubnetCidrBlock resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksArgs']] ipv6_subnet_cidr_blocks: Allocate a list of `IPv6` subnets.
        :param pulumi.Input[str] vpc_id: The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Ipv6SubnetCidrBlockState.__new__(_Ipv6SubnetCidrBlockState)

        __props__.__dict__["ipv6_subnet_cidr_blocks"] = ipv6_subnet_cidr_blocks
        __props__.__dict__["vpc_id"] = vpc_id
        return Ipv6SubnetCidrBlock(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ipv6SubnetCidrBlocks")
    def ipv6_subnet_cidr_blocks(self) -> pulumi.Output['outputs.Ipv6SubnetCidrBlockIpv6SubnetCidrBlocks']:
        """
        Allocate a list of `IPv6` subnets.
        """
        return pulumi.get(self, "ipv6_subnet_cidr_blocks")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
        """
        return pulumi.get(self, "vpc_id")

