# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetLimitsResult',
    'AwaitableGetLimitsResult',
    'get_limits',
    'get_limits_output',
]

@pulumi.output_type
class GetLimitsResult:
    """
    A collection of values returned by getLimits.
    """
    def __init__(__self__, id=None, limit_types=None, result_output_file=None, vpc_limit_sets=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit_types and not isinstance(limit_types, list):
            raise TypeError("Expected argument 'limit_types' to be a list")
        pulumi.set(__self__, "limit_types", limit_types)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if vpc_limit_sets and not isinstance(vpc_limit_sets, list):
            raise TypeError("Expected argument 'vpc_limit_sets' to be a list")
        pulumi.set(__self__, "vpc_limit_sets", vpc_limit_sets)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="limitTypes")
    def limit_types(self) -> Sequence[str]:
        return pulumi.get(self, "limit_types")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="vpcLimitSets")
    def vpc_limit_sets(self) -> Sequence['outputs.GetLimitsVpcLimitSetResult']:
        """
        vpc limit.
        """
        return pulumi.get(self, "vpc_limit_sets")


class AwaitableGetLimitsResult(GetLimitsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLimitsResult(
            id=self.id,
            limit_types=self.limit_types,
            result_output_file=self.result_output_file,
            vpc_limit_sets=self.vpc_limit_sets)


def get_limits(limit_types: Optional[Sequence[str]] = None,
               result_output_file: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLimitsResult:
    """
    Use this data source to query detailed information of vpc limits

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    limits = tencentcloud.Vpc.get_limits(limit_types=[
        "appid-max-vpcs",
        "vpc-max-subnets",
    ])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] limit_types: Quota name. A maximum of 100 quota types can be queried each time.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['limitTypes'] = limit_types
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Vpc/getLimits:getLimits', __args__, opts=opts, typ=GetLimitsResult).value

    return AwaitableGetLimitsResult(
        id=pulumi.get(__ret__, 'id'),
        limit_types=pulumi.get(__ret__, 'limit_types'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        vpc_limit_sets=pulumi.get(__ret__, 'vpc_limit_sets'))


@_utilities.lift_output_func(get_limits)
def get_limits_output(limit_types: Optional[pulumi.Input[Sequence[str]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLimitsResult]:
    """
    Use this data source to query detailed information of vpc limits

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    limits = tencentcloud.Vpc.get_limits(limit_types=[
        "appid-max-vpcs",
        "vpc-max-subnets",
    ])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] limit_types: Quota name. A maximum of 100 quota types can be queried each time.
    :param str result_output_file: Used to save results.
    """
    ...
