# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SnapshotPolicyConfigArgs', 'SnapshotPolicyConfig']

@pulumi.input_type
class SnapshotPolicyConfigArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool],
                 snapshot_policy_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a SnapshotPolicyConfig resource.
        :param pulumi.Input[bool] enable: If enable snapshot policy.
        :param pulumi.Input[str] snapshot_policy_id: Snapshot policy Id.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "snapshot_policy_id", snapshot_policy_id)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        If enable snapshot policy.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> pulumi.Input[str]:
        """
        Snapshot policy Id.
        """
        return pulumi.get(self, "snapshot_policy_id")

    @snapshot_policy_id.setter
    def snapshot_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "snapshot_policy_id", value)


@pulumi.input_type
class _SnapshotPolicyConfigState:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[bool]] = None,
                 snapshot_policy_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SnapshotPolicyConfig resources.
        :param pulumi.Input[bool] enable: If enable snapshot policy.
        :param pulumi.Input[str] snapshot_policy_id: Snapshot policy Id.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if snapshot_policy_id is not None:
            pulumi.set(__self__, "snapshot_policy_id", snapshot_policy_id)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        If enable snapshot policy.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot policy Id.
        """
        return pulumi.get(self, "snapshot_policy_id")

    @snapshot_policy_id.setter
    def snapshot_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_policy_id", value)


class SnapshotPolicyConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 snapshot_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc snapshot_policy_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_bucket = tencentcloud.cos.Bucket("exampleBucket",
            bucket="tf-example-1308919341",
            acl="private")
        example_snapshot_policy = tencentcloud.vpc.SnapshotPolicy("exampleSnapshotPolicy",
            snapshot_policy_name="tf-example",
            backup_type="time",
            cos_bucket=example_bucket.bucket,
            cos_region="ap-guangzhou",
            create_new_cos=False,
            keep_time=2,
            backup_policies=[
                tencentcloud.vpc.SnapshotPolicyBackupPolicyArgs(
                    backup_day="monday",
                    backup_time="00:00:00",
                ),
                tencentcloud.vpc.SnapshotPolicyBackupPolicyArgs(
                    backup_day="tuesday",
                    backup_time="01:00:00",
                ),
                tencentcloud.vpc.SnapshotPolicyBackupPolicyArgs(
                    backup_day="wednesday",
                    backup_time="02:00:00",
                ),
            ])
        config = tencentcloud.vpc.SnapshotPolicyConfig("config",
            snapshot_policy_id=example_snapshot_policy.id,
            enable=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc snapshot_policy_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/snapshotPolicyConfig:SnapshotPolicyConfig snapshot_policy_config snapshot_policy_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable: If enable snapshot policy.
        :param pulumi.Input[str] snapshot_policy_id: Snapshot policy Id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotPolicyConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc snapshot_policy_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_bucket = tencentcloud.cos.Bucket("exampleBucket",
            bucket="tf-example-1308919341",
            acl="private")
        example_snapshot_policy = tencentcloud.vpc.SnapshotPolicy("exampleSnapshotPolicy",
            snapshot_policy_name="tf-example",
            backup_type="time",
            cos_bucket=example_bucket.bucket,
            cos_region="ap-guangzhou",
            create_new_cos=False,
            keep_time=2,
            backup_policies=[
                tencentcloud.vpc.SnapshotPolicyBackupPolicyArgs(
                    backup_day="monday",
                    backup_time="00:00:00",
                ),
                tencentcloud.vpc.SnapshotPolicyBackupPolicyArgs(
                    backup_day="tuesday",
                    backup_time="01:00:00",
                ),
                tencentcloud.vpc.SnapshotPolicyBackupPolicyArgs(
                    backup_day="wednesday",
                    backup_time="02:00:00",
                ),
            ])
        config = tencentcloud.vpc.SnapshotPolicyConfig("config",
            snapshot_policy_id=example_snapshot_policy.id,
            enable=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc snapshot_policy_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpc/snapshotPolicyConfig:SnapshotPolicyConfig snapshot_policy_config snapshot_policy_id
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotPolicyConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotPolicyConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 snapshot_policy_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotPolicyConfigArgs.__new__(SnapshotPolicyConfigArgs)

            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            if snapshot_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'snapshot_policy_id'")
            __props__.__dict__["snapshot_policy_id"] = snapshot_policy_id
        super(SnapshotPolicyConfig, __self__).__init__(
            'tencentcloud:Vpc/snapshotPolicyConfig:SnapshotPolicyConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            snapshot_policy_id: Optional[pulumi.Input[str]] = None) -> 'SnapshotPolicyConfig':
        """
        Get an existing SnapshotPolicyConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable: If enable snapshot policy.
        :param pulumi.Input[str] snapshot_policy_id: Snapshot policy Id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotPolicyConfigState.__new__(_SnapshotPolicyConfigState)

        __props__.__dict__["enable"] = enable
        __props__.__dict__["snapshot_policy_id"] = snapshot_policy_id
        return SnapshotPolicyConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        If enable snapshot policy.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="snapshotPolicyId")
    def snapshot_policy_id(self) -> pulumi.Output[str]:
        """
        Snapshot policy Id.
        """
        return pulumi.get(self, "snapshot_policy_id")

