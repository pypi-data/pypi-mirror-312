# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNetDetectStateCheckResult',
    'AwaitableGetNetDetectStateCheckResult',
    'get_net_detect_state_check',
    'get_net_detect_state_check_output',
]

@pulumi.output_type
class GetNetDetectStateCheckResult:
    """
    A collection of values returned by getNetDetectStateCheck.
    """
    def __init__(__self__, detect_destination_ips=None, id=None, net_detect_id=None, net_detect_ip_state_sets=None, net_detect_name=None, next_hop_destination=None, next_hop_type=None, result_output_file=None, subnet_id=None, vpc_id=None):
        if detect_destination_ips and not isinstance(detect_destination_ips, list):
            raise TypeError("Expected argument 'detect_destination_ips' to be a list")
        pulumi.set(__self__, "detect_destination_ips", detect_destination_ips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if net_detect_id and not isinstance(net_detect_id, str):
            raise TypeError("Expected argument 'net_detect_id' to be a str")
        pulumi.set(__self__, "net_detect_id", net_detect_id)
        if net_detect_ip_state_sets and not isinstance(net_detect_ip_state_sets, list):
            raise TypeError("Expected argument 'net_detect_ip_state_sets' to be a list")
        pulumi.set(__self__, "net_detect_ip_state_sets", net_detect_ip_state_sets)
        if net_detect_name and not isinstance(net_detect_name, str):
            raise TypeError("Expected argument 'net_detect_name' to be a str")
        pulumi.set(__self__, "net_detect_name", net_detect_name)
        if next_hop_destination and not isinstance(next_hop_destination, str):
            raise TypeError("Expected argument 'next_hop_destination' to be a str")
        pulumi.set(__self__, "next_hop_destination", next_hop_destination)
        if next_hop_type and not isinstance(next_hop_type, str):
            raise TypeError("Expected argument 'next_hop_type' to be a str")
        pulumi.set(__self__, "next_hop_type", next_hop_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="detectDestinationIps")
    def detect_destination_ips(self) -> Sequence[str]:
        """
        The destination IPv4 address of network detection.
        """
        return pulumi.get(self, "detect_destination_ips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="netDetectId")
    def net_detect_id(self) -> Optional[str]:
        return pulumi.get(self, "net_detect_id")

    @property
    @pulumi.getter(name="netDetectIpStateSets")
    def net_detect_ip_state_sets(self) -> Sequence['outputs.GetNetDetectStateCheckNetDetectIpStateSetResult']:
        """
        The array of network detection verification results.
        """
        return pulumi.get(self, "net_detect_ip_state_sets")

    @property
    @pulumi.getter(name="netDetectName")
    def net_detect_name(self) -> Optional[str]:
        return pulumi.get(self, "net_detect_name")

    @property
    @pulumi.getter(name="nextHopDestination")
    def next_hop_destination(self) -> str:
        return pulumi.get(self, "next_hop_destination")

    @property
    @pulumi.getter(name="nextHopType")
    def next_hop_type(self) -> str:
        return pulumi.get(self, "next_hop_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_id")


class AwaitableGetNetDetectStateCheckResult(GetNetDetectStateCheckResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetDetectStateCheckResult(
            detect_destination_ips=self.detect_destination_ips,
            id=self.id,
            net_detect_id=self.net_detect_id,
            net_detect_ip_state_sets=self.net_detect_ip_state_sets,
            net_detect_name=self.net_detect_name,
            next_hop_destination=self.next_hop_destination,
            next_hop_type=self.next_hop_type,
            result_output_file=self.result_output_file,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_net_detect_state_check(detect_destination_ips: Optional[Sequence[str]] = None,
                               net_detect_id: Optional[str] = None,
                               net_detect_name: Optional[str] = None,
                               next_hop_destination: Optional[str] = None,
                               next_hop_type: Optional[str] = None,
                               result_output_file: Optional[str] = None,
                               subnet_id: Optional[str] = None,
                               vpc_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetDetectStateCheckResult:
    """
    Use this data source to query detailed information of vpc net_detect_state_check

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    net_detect_state_check = tencentcloud.Vpc.get_net_detect_state_check(detect_destination_ips=[
            "10.0.0.3",
            "10.0.0.2",
        ],
        net_detect_id="netd-12345678",
        next_hop_destination="10.0.0.4",
        next_hop_type="NORMAL_CVM")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] detect_destination_ips: The array of detection destination IPv4 addresses, which contains at most two IP addresses.
    :param str net_detect_id: ID of a network inspector instance, e.g. netd-12345678. Enter at least one of this parameter, VpcId, SubnetId, and NetDetectName. Use NetDetectId if it is present.
    :param str net_detect_name: The name of a network inspector, up to 60 bytes in length. It is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
    :param str next_hop_destination: The next-hop destination gateway. The value is related to NextHopType.If NextHopType is set to VPN, the value of this parameter is the VPN gateway ID, such as vpngw-12345678.If NextHopType is set to DIRECTCONNECT, the value of this parameter is the direct connect gateway ID, such as dcg-12345678.If NextHopType is set to PEERCONNECTION, the value of this parameter is the peering connection ID, such as pcx-12345678.If NextHopType is set to NAT, the value of this parameter is the NAT gateway ID, such as nat-12345678.If NextHopType is set to NORMAL_CVM, the value of this parameter is the IPv4 address of the CVM, such as 10.0.0.12.
    :param str next_hop_type: The type of the next hop. Currently supported types are:VPN: VPN gateway;DIRECTCONNECT: direct connect gateway;PEERCONNECTION: peering connection;NAT: NAT gateway;NORMAL_CVM: normal CVM.
    :param str result_output_file: Used to save results.
    :param str subnet_id: ID of a subnet instance, e.g. `subnet-12345678`, which is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
    :param str vpc_id: ID of a `VPC` instance, e.g. `vpc-12345678`, which is used together with SubnetId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
    """
    __args__ = dict()
    __args__['detectDestinationIps'] = detect_destination_ips
    __args__['netDetectId'] = net_detect_id
    __args__['netDetectName'] = net_detect_name
    __args__['nextHopDestination'] = next_hop_destination
    __args__['nextHopType'] = next_hop_type
    __args__['resultOutputFile'] = result_output_file
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Vpc/getNetDetectStateCheck:getNetDetectStateCheck', __args__, opts=opts, typ=GetNetDetectStateCheckResult).value

    return AwaitableGetNetDetectStateCheckResult(
        detect_destination_ips=pulumi.get(__ret__, 'detect_destination_ips'),
        id=pulumi.get(__ret__, 'id'),
        net_detect_id=pulumi.get(__ret__, 'net_detect_id'),
        net_detect_ip_state_sets=pulumi.get(__ret__, 'net_detect_ip_state_sets'),
        net_detect_name=pulumi.get(__ret__, 'net_detect_name'),
        next_hop_destination=pulumi.get(__ret__, 'next_hop_destination'),
        next_hop_type=pulumi.get(__ret__, 'next_hop_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_net_detect_state_check)
def get_net_detect_state_check_output(detect_destination_ips: Optional[pulumi.Input[Sequence[str]]] = None,
                                      net_detect_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      net_detect_name: Optional[pulumi.Input[Optional[str]]] = None,
                                      next_hop_destination: Optional[pulumi.Input[str]] = None,
                                      next_hop_type: Optional[pulumi.Input[str]] = None,
                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetDetectStateCheckResult]:
    """
    Use this data source to query detailed information of vpc net_detect_state_check

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    net_detect_state_check = tencentcloud.Vpc.get_net_detect_state_check(detect_destination_ips=[
            "10.0.0.3",
            "10.0.0.2",
        ],
        net_detect_id="netd-12345678",
        next_hop_destination="10.0.0.4",
        next_hop_type="NORMAL_CVM")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] detect_destination_ips: The array of detection destination IPv4 addresses, which contains at most two IP addresses.
    :param str net_detect_id: ID of a network inspector instance, e.g. netd-12345678. Enter at least one of this parameter, VpcId, SubnetId, and NetDetectName. Use NetDetectId if it is present.
    :param str net_detect_name: The name of a network inspector, up to 60 bytes in length. It is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
    :param str next_hop_destination: The next-hop destination gateway. The value is related to NextHopType.If NextHopType is set to VPN, the value of this parameter is the VPN gateway ID, such as vpngw-12345678.If NextHopType is set to DIRECTCONNECT, the value of this parameter is the direct connect gateway ID, such as dcg-12345678.If NextHopType is set to PEERCONNECTION, the value of this parameter is the peering connection ID, such as pcx-12345678.If NextHopType is set to NAT, the value of this parameter is the NAT gateway ID, such as nat-12345678.If NextHopType is set to NORMAL_CVM, the value of this parameter is the IPv4 address of the CVM, such as 10.0.0.12.
    :param str next_hop_type: The type of the next hop. Currently supported types are:VPN: VPN gateway;DIRECTCONNECT: direct connect gateway;PEERCONNECTION: peering connection;NAT: NAT gateway;NORMAL_CVM: normal CVM.
    :param str result_output_file: Used to save results.
    :param str subnet_id: ID of a subnet instance, e.g. `subnet-12345678`, which is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
    :param str vpc_id: ID of a `VPC` instance, e.g. `vpc-12345678`, which is used together with SubnetId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
    """
    ...
