# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetUsedIpAddressResult',
    'AwaitableGetUsedIpAddressResult',
    'get_used_ip_address',
    'get_used_ip_address_output',
]

@pulumi.output_type
class GetUsedIpAddressResult:
    """
    A collection of values returned by getUsedIpAddress.
    """
    def __init__(__self__, id=None, ip_address_states=None, ip_addresses=None, result_output_file=None, subnet_id=None, vpc_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address_states and not isinstance(ip_address_states, list):
            raise TypeError("Expected argument 'ip_address_states' to be a list")
        pulumi.set(__self__, "ip_address_states", ip_address_states)
        if ip_addresses and not isinstance(ip_addresses, list):
            raise TypeError("Expected argument 'ip_addresses' to be a list")
        pulumi.set(__self__, "ip_addresses", ip_addresses)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddressStates")
    def ip_address_states(self) -> Sequence['outputs.GetUsedIpAddressIpAddressStateResult']:
        """
        Information of resources bound with the queried IPs Note: This parameter may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "ip_address_states")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet instance ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC instance ID.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetUsedIpAddressResult(GetUsedIpAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsedIpAddressResult(
            id=self.id,
            ip_address_states=self.ip_address_states,
            ip_addresses=self.ip_addresses,
            result_output_file=self.result_output_file,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id)


def get_used_ip_address(ip_addresses: Optional[Sequence[str]] = None,
                        result_output_file: Optional[str] = None,
                        subnet_id: Optional[str] = None,
                        vpc_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsedIpAddressResult:
    """
    Use this data source to query detailed information of vpc used_ip_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    used_ip_address = tencentcloud.Vpc.get_used_ip_address(vpc_id="vpc-4owdpnwr")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] ip_addresses: IPs to query.
    :param str result_output_file: Used to save results.
    :param str subnet_id: Subnet instance ID.
    :param str vpc_id: VPC instance ID.
    """
    __args__ = dict()
    __args__['ipAddresses'] = ip_addresses
    __args__['resultOutputFile'] = result_output_file
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Vpc/getUsedIpAddress:getUsedIpAddress', __args__, opts=opts, typ=GetUsedIpAddressResult).value

    return AwaitableGetUsedIpAddressResult(
        id=pulumi.get(__ret__, 'id'),
        ip_address_states=pulumi.get(__ret__, 'ip_address_states'),
        ip_addresses=pulumi.get(__ret__, 'ip_addresses'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_used_ip_address)
def get_used_ip_address_output(ip_addresses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                               vpc_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUsedIpAddressResult]:
    """
    Use this data source to query detailed information of vpc used_ip_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    used_ip_address = tencentcloud.Vpc.get_used_ip_address(vpc_id="vpc-4owdpnwr")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] ip_addresses: IPs to query.
    :param str result_output_file: Used to save results.
    :param str subnet_id: Subnet instance ID.
    :param str vpc_id: VPC instance ID.
    """
    ...
