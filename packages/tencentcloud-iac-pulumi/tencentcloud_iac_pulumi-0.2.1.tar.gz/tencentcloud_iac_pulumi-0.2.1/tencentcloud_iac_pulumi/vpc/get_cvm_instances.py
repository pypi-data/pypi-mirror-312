# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCvmInstancesResult',
    'AwaitableGetCvmInstancesResult',
    'get_cvm_instances',
    'get_cvm_instances_output',
]

@pulumi.output_type
class GetCvmInstancesResult:
    """
    A collection of values returned by getCvmInstances.
    """
    def __init__(__self__, filters=None, id=None, instance_sets=None, result_output_file=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_sets and not isinstance(instance_sets, list):
            raise TypeError("Expected argument 'instance_sets' to be a list")
        pulumi.set(__self__, "instance_sets", instance_sets)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetCvmInstancesFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceSets")
    def instance_sets(self) -> Sequence['outputs.GetCvmInstancesInstanceSetResult']:
        """
        List of CVM instances.
        """
        return pulumi.get(self, "instance_sets")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetCvmInstancesResult(GetCvmInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCvmInstancesResult(
            filters=self.filters,
            id=self.id,
            instance_sets=self.instance_sets,
            result_output_file=self.result_output_file)


def get_cvm_instances(filters: Optional[Sequence[pulumi.InputType['GetCvmInstancesFilterArgs']]] = None,
                      result_output_file: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCvmInstancesResult:
    """
    Use this data source to query detailed information of vpc cvm_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cvm_instances = tencentcloud.Vpc.get_cvm_instances(filters=[tencentcloud.vpc.GetCvmInstancesFilterArgs(
        name="vpc-id",
        values=["vpc-lh4nqig9"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetCvmInstancesFilterArgs']] filters: Filter condition. `RouteTableIds` and `Filters` cannot be specified at the same time. vpc-id - String - (Filter condition) VPC instance ID, such as `vpc-f49l6u0z`;instance-type - String - (Filter condition) CVM instance ID;instance-name - String - (Filter condition) CVM name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Vpc/getCvmInstances:getCvmInstances', __args__, opts=opts, typ=GetCvmInstancesResult).value

    return AwaitableGetCvmInstancesResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        instance_sets=pulumi.get(__ret__, 'instance_sets'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_cvm_instances)
def get_cvm_instances_output(filters: Optional[pulumi.Input[Sequence[pulumi.InputType['GetCvmInstancesFilterArgs']]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCvmInstancesResult]:
    """
    Use this data source to query detailed information of vpc cvm_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cvm_instances = tencentcloud.Vpc.get_cvm_instances(filters=[tencentcloud.vpc.GetCvmInstancesFilterArgs(
        name="vpc-id",
        values=["vpc-lh4nqig9"],
    )])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetCvmInstancesFilterArgs']] filters: Filter condition. `RouteTableIds` and `Filters` cannot be specified at the same time. vpc-id - String - (Filter condition) VPC instance ID, such as `vpc-f49l6u0z`;instance-type - String - (Filter condition) CVM instance ID;instance-name - String - (Filter condition) CVM name.
    :param str result_output_file: Used to save results.
    """
    ...
