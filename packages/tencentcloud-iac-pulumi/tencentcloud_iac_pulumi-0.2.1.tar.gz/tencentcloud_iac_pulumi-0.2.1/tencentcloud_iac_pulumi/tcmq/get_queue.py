# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetQueueResult',
    'AwaitableGetQueueResult',
    'get_queue',
    'get_queue_output',
]

@pulumi.output_type
class GetQueueResult:
    """
    A collection of values returned by getQueue.
    """
    def __init__(__self__, filters=None, id=None, is_tag_filter=None, limit=None, offset=None, queue_lists=None, queue_name=None, queue_name_lists=None, result_output_file=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_tag_filter and not isinstance(is_tag_filter, bool):
            raise TypeError("Expected argument 'is_tag_filter' to be a bool")
        pulumi.set(__self__, "is_tag_filter", is_tag_filter)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if queue_lists and not isinstance(queue_lists, list):
            raise TypeError("Expected argument 'queue_lists' to be a list")
        pulumi.set(__self__, "queue_lists", queue_lists)
        if queue_name and not isinstance(queue_name, str):
            raise TypeError("Expected argument 'queue_name' to be a str")
        pulumi.set(__self__, "queue_name", queue_name)
        if queue_name_lists and not isinstance(queue_name_lists, list):
            raise TypeError("Expected argument 'queue_name_lists' to be a list")
        pulumi.set(__self__, "queue_name_lists", queue_name_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetQueueFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isTagFilter")
    def is_tag_filter(self) -> Optional[bool]:
        return pulumi.get(self, "is_tag_filter")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="queueLists")
    def queue_lists(self) -> Sequence['outputs.GetQueueQueueListResult']:
        """
        Queue list.
        """
        return pulumi.get(self, "queue_lists")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[str]:
        """
        Message queue name.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="queueNameLists")
    def queue_name_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "queue_name_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetQueueResult(GetQueueResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQueueResult(
            filters=self.filters,
            id=self.id,
            is_tag_filter=self.is_tag_filter,
            limit=self.limit,
            offset=self.offset,
            queue_lists=self.queue_lists,
            queue_name=self.queue_name,
            queue_name_lists=self.queue_name_lists,
            result_output_file=self.result_output_file)


def get_queue(filters: Optional[Sequence[pulumi.InputType['GetQueueFilterArgs']]] = None,
              is_tag_filter: Optional[bool] = None,
              limit: Optional[int] = None,
              offset: Optional[int] = None,
              queue_name: Optional[str] = None,
              queue_name_lists: Optional[Sequence[str]] = None,
              result_output_file: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQueueResult:
    """
    Use this data source to query detailed information of tcmq queue

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    queue = tencentcloud.Tcmq.get_queue(queue_name="queue_name")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetQueueFilterArgs']] filters: Filter. Currently, you can filter by tag. The tag name must be prefixed with `tag:`, such as `tag: owner`, `tag: environment`, or `tag: business`.
    :param bool is_tag_filter: For filtering by tag, this parameter must be set to `true`.
    :param int limit: The number of queues to be returned per page in case of paginated return. If this parameter is not passed in, 20 will be used by default. Maximum value: 50.
    :param int offset: Starting position of a queue list to be returned on the current page in case of paginated return. If a value is entered, limit must be specified. If this parameter is left empty, 0 will be used by default.
    :param str queue_name: Filter by QueueName.
    :param Sequence[str] queue_name_lists: Filter by CMQ queue name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['isTagFilter'] = is_tag_filter
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['queueName'] = queue_name
    __args__['queueNameLists'] = queue_name_lists
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tcmq/getQueue:getQueue', __args__, opts=opts, typ=GetQueueResult).value

    return AwaitableGetQueueResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        is_tag_filter=pulumi.get(__ret__, 'is_tag_filter'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        queue_lists=pulumi.get(__ret__, 'queue_lists'),
        queue_name=pulumi.get(__ret__, 'queue_name'),
        queue_name_lists=pulumi.get(__ret__, 'queue_name_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_queue)
def get_queue_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetQueueFilterArgs']]]]] = None,
                     is_tag_filter: Optional[pulumi.Input[Optional[bool]]] = None,
                     limit: Optional[pulumi.Input[Optional[int]]] = None,
                     offset: Optional[pulumi.Input[Optional[int]]] = None,
                     queue_name: Optional[pulumi.Input[Optional[str]]] = None,
                     queue_name_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQueueResult]:
    """
    Use this data source to query detailed information of tcmq queue

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    queue = tencentcloud.Tcmq.get_queue(queue_name="queue_name")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetQueueFilterArgs']] filters: Filter. Currently, you can filter by tag. The tag name must be prefixed with `tag:`, such as `tag: owner`, `tag: environment`, or `tag: business`.
    :param bool is_tag_filter: For filtering by tag, this parameter must be set to `true`.
    :param int limit: The number of queues to be returned per page in case of paginated return. If this parameter is not passed in, 20 will be used by default. Maximum value: 50.
    :param int offset: Starting position of a queue list to be returned on the current page in case of paginated return. If a value is entered, limit must be specified. If this parameter is left empty, 0 will be used by default.
    :param str queue_name: Filter by QueueName.
    :param Sequence[str] queue_name_lists: Filter by CMQ queue name.
    :param str result_output_file: Used to save results.
    """
    ...
