# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetQueueFilterResult',
    'GetQueueQueueListResult',
    'GetQueueQueueListDeadLetterPolicyResult',
    'GetQueueQueueListDeadLetterSourceResult',
    'GetQueueQueueListTagResult',
    'GetQueueQueueListTransactionPolicyResult',
    'GetSubscribeSubscriptionListResult',
    'GetTopicFilterResult',
    'GetTopicTopicListResult',
    'GetTopicTopicListTagResult',
]

@pulumi.output_type
class GetQueueFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter parameter name.
        :param Sequence[str] values: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetQueueQueueListResult(dict):
    def __init__(__self__, *,
                 active_msg_num: int,
                 bps: int,
                 create_time: int,
                 create_uin: int,
                 dead_letter_policies: Sequence['outputs.GetQueueQueueListDeadLetterPolicyResult'],
                 dead_letter_sources: Sequence['outputs.GetQueueQueueListDeadLetterSourceResult'],
                 delay_msg_num: int,
                 inactive_msg_num: int,
                 last_modify_time: int,
                 max_delay_seconds: int,
                 max_msg_backlog_size: int,
                 max_msg_heap_num: int,
                 max_msg_size: int,
                 max_unacked_msg_num: int,
                 min_msg_time: int,
                 msg_retention_seconds: int,
                 namespace_name: str,
                 polling_wait_seconds: int,
                 qps: int,
                 queue_id: str,
                 queue_name: str,
                 retention_size_in_mb: int,
                 rewind_msg_num: int,
                 rewind_seconds: int,
                 status: int,
                 tags: Sequence['outputs.GetQueueQueueListTagResult'],
                 tenant_id: str,
                 trace: bool,
                 transaction: bool,
                 transaction_policies: Sequence['outputs.GetQueueQueueListTransactionPolicyResult'],
                 visibility_timeout: int):
        """
        :param int active_msg_num: Total number of messages in `Active` status (i.e., unconsumed) in the queue, which is an approximate value.
        :param int bps: Bandwidth limit.
        :param int create_time: Queue creation time. A Unix timestamp accurate down to the millisecond will be returned.
        :param int create_uin: Creator `Uin`.
        :param Sequence['GetQueueQueueListDeadLetterPolicyArgs'] dead_letter_policies: Dead letter queue policy.
        :param Sequence['GetQueueQueueListDeadLetterSourceArgs'] dead_letter_sources: Dead letter queue.
        :param int delay_msg_num: Number of delayed messages.
        :param int inactive_msg_num: Total number of messages in `Inactive` status (i.e., being consumed) in the queue, which is an approximate value.
        :param int last_modify_time: Time when the queue attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
        :param int max_delay_seconds: Maximum retention period for inflight messages.
        :param int max_msg_backlog_size: Maximum size of heaped messages in bytes.
        :param int max_msg_heap_num: Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        :param int max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param int max_unacked_msg_num: The maximum number of unacknowledged messages.
        :param int min_msg_time: Minimum unconsumed time of message in seconds.
        :param int msg_retention_seconds: The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        :param str namespace_name: Namespace name.
        :param int polling_wait_seconds: Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        :param int qps: Limit of the number of messages produced per second. The value for consumed messages is 1.1 times this value.
        :param str queue_id: Message queue ID.
        :param str queue_name: Filter by QueueName.
        :param int retention_size_in_mb: Queue storage space configured for message rewind. Value range: 1,024-10,240 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param int rewind_msg_num: Number of retained messages which have been deleted by the `DelMsg` API but are still within their rewind time range.
        :param int rewind_seconds: Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param int status: Cluster status. `0`: creating; `1`: normal; `2`: terminating; `3`: deleted; `4`: isolated; `5`: creation failed; `6`: deletion failed.
        :param Sequence['GetQueueQueueListTagArgs'] tags: Associated tag.
        :param str tenant_id: Tenant ID.
        :param bool trace: Message trace. true: enabled; false: not enabled.
        :param bool transaction: 1: transaction queue; 0: general queue.
        :param Sequence['GetQueueQueueListTransactionPolicyArgs'] transaction_policies: Transaction message policy.
        :param int visibility_timeout: Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        pulumi.set(__self__, "active_msg_num", active_msg_num)
        pulumi.set(__self__, "bps", bps)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "create_uin", create_uin)
        pulumi.set(__self__, "dead_letter_policies", dead_letter_policies)
        pulumi.set(__self__, "dead_letter_sources", dead_letter_sources)
        pulumi.set(__self__, "delay_msg_num", delay_msg_num)
        pulumi.set(__self__, "inactive_msg_num", inactive_msg_num)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "max_delay_seconds", max_delay_seconds)
        pulumi.set(__self__, "max_msg_backlog_size", max_msg_backlog_size)
        pulumi.set(__self__, "max_msg_heap_num", max_msg_heap_num)
        pulumi.set(__self__, "max_msg_size", max_msg_size)
        pulumi.set(__self__, "max_unacked_msg_num", max_unacked_msg_num)
        pulumi.set(__self__, "min_msg_time", min_msg_time)
        pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "polling_wait_seconds", polling_wait_seconds)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "queue_name", queue_name)
        pulumi.set(__self__, "retention_size_in_mb", retention_size_in_mb)
        pulumi.set(__self__, "rewind_msg_num", rewind_msg_num)
        pulumi.set(__self__, "rewind_seconds", rewind_seconds)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "trace", trace)
        pulumi.set(__self__, "transaction", transaction)
        pulumi.set(__self__, "transaction_policies", transaction_policies)
        pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="activeMsgNum")
    def active_msg_num(self) -> int:
        """
        Total number of messages in `Active` status (i.e., unconsumed) in the queue, which is an approximate value.
        """
        return pulumi.get(self, "active_msg_num")

    @property
    @pulumi.getter
    def bps(self) -> int:
        """
        Bandwidth limit.
        """
        return pulumi.get(self, "bps")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Queue creation time. A Unix timestamp accurate down to the millisecond will be returned.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="createUin")
    def create_uin(self) -> int:
        """
        Creator `Uin`.
        """
        return pulumi.get(self, "create_uin")

    @property
    @pulumi.getter(name="deadLetterPolicies")
    def dead_letter_policies(self) -> Sequence['outputs.GetQueueQueueListDeadLetterPolicyResult']:
        """
        Dead letter queue policy.
        """
        return pulumi.get(self, "dead_letter_policies")

    @property
    @pulumi.getter(name="deadLetterSources")
    def dead_letter_sources(self) -> Sequence['outputs.GetQueueQueueListDeadLetterSourceResult']:
        """
        Dead letter queue.
        """
        return pulumi.get(self, "dead_letter_sources")

    @property
    @pulumi.getter(name="delayMsgNum")
    def delay_msg_num(self) -> int:
        """
        Number of delayed messages.
        """
        return pulumi.get(self, "delay_msg_num")

    @property
    @pulumi.getter(name="inactiveMsgNum")
    def inactive_msg_num(self) -> int:
        """
        Total number of messages in `Inactive` status (i.e., being consumed) in the queue, which is an approximate value.
        """
        return pulumi.get(self, "inactive_msg_num")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> int:
        """
        Time when the queue attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
        """
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter(name="maxDelaySeconds")
    def max_delay_seconds(self) -> int:
        """
        Maximum retention period for inflight messages.
        """
        return pulumi.get(self, "max_delay_seconds")

    @property
    @pulumi.getter(name="maxMsgBacklogSize")
    def max_msg_backlog_size(self) -> int:
        """
        Maximum size of heaped messages in bytes.
        """
        return pulumi.get(self, "max_msg_backlog_size")

    @property
    @pulumi.getter(name="maxMsgHeapNum")
    def max_msg_heap_num(self) -> int:
        """
        Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        """
        return pulumi.get(self, "max_msg_heap_num")

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> int:
        """
        Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        """
        return pulumi.get(self, "max_msg_size")

    @property
    @pulumi.getter(name="maxUnackedMsgNum")
    def max_unacked_msg_num(self) -> int:
        """
        The maximum number of unacknowledged messages.
        """
        return pulumi.get(self, "max_unacked_msg_num")

    @property
    @pulumi.getter(name="minMsgTime")
    def min_msg_time(self) -> int:
        """
        Minimum unconsumed time of message in seconds.
        """
        return pulumi.get(self, "min_msg_time")

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> int:
        """
        The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        """
        return pulumi.get(self, "msg_retention_seconds")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="pollingWaitSeconds")
    def polling_wait_seconds(self) -> int:
        """
        Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        """
        return pulumi.get(self, "polling_wait_seconds")

    @property
    @pulumi.getter
    def qps(self) -> int:
        """
        Limit of the number of messages produced per second. The value for consumed messages is 1.1 times this value.
        """
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        """
        Message queue ID.
        """
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        """
        Filter by QueueName.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="retentionSizeInMb")
    def retention_size_in_mb(self) -> int:
        """
        Queue storage space configured for message rewind. Value range: 1,024-10,240 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "retention_size_in_mb")

    @property
    @pulumi.getter(name="rewindMsgNum")
    def rewind_msg_num(self) -> int:
        """
        Number of retained messages which have been deleted by the `DelMsg` API but are still within their rewind time range.
        """
        return pulumi.get(self, "rewind_msg_num")

    @property
    @pulumi.getter(name="rewindSeconds")
    def rewind_seconds(self) -> int:
        """
        Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "rewind_seconds")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Cluster status. `0`: creating; `1`: normal; `2`: terminating; `3`: deleted; `4`: isolated; `5`: creation failed; `6`: deletion failed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetQueueQueueListTagResult']:
        """
        Associated tag.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Tenant ID.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def trace(self) -> bool:
        """
        Message trace. true: enabled; false: not enabled.
        """
        return pulumi.get(self, "trace")

    @property
    @pulumi.getter
    def transaction(self) -> bool:
        """
        1: transaction queue; 0: general queue.
        """
        return pulumi.get(self, "transaction")

    @property
    @pulumi.getter(name="transactionPolicies")
    def transaction_policies(self) -> Sequence['outputs.GetQueueQueueListTransactionPolicyResult']:
        """
        Transaction message policy.
        """
        return pulumi.get(self, "transaction_policies")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> int:
        """
        Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        return pulumi.get(self, "visibility_timeout")


@pulumi.output_type
class GetQueueQueueListDeadLetterPolicyResult(dict):
    def __init__(__self__, *,
                 dead_letter_queue: str,
                 max_receive_count: int,
                 max_time_to_live: int,
                 policy: int):
        """
        :param str dead_letter_queue: Dead letter queue.
        :param int max_receive_count: Maximum number of receipts.
        :param int max_time_to_live: Maximum period in seconds before an unconsumed message expires, which is required if `Policy` is 1. Value range: 300-43200. This value should be smaller than `MsgRetentionSeconds` (maximum message retention period).
        :param int policy: Dead letter queue policy.
        """
        pulumi.set(__self__, "dead_letter_queue", dead_letter_queue)
        pulumi.set(__self__, "max_receive_count", max_receive_count)
        pulumi.set(__self__, "max_time_to_live", max_time_to_live)
        pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="deadLetterQueue")
    def dead_letter_queue(self) -> str:
        """
        Dead letter queue.
        """
        return pulumi.get(self, "dead_letter_queue")

    @property
    @pulumi.getter(name="maxReceiveCount")
    def max_receive_count(self) -> int:
        """
        Maximum number of receipts.
        """
        return pulumi.get(self, "max_receive_count")

    @property
    @pulumi.getter(name="maxTimeToLive")
    def max_time_to_live(self) -> int:
        """
        Maximum period in seconds before an unconsumed message expires, which is required if `Policy` is 1. Value range: 300-43200. This value should be smaller than `MsgRetentionSeconds` (maximum message retention period).
        """
        return pulumi.get(self, "max_time_to_live")

    @property
    @pulumi.getter
    def policy(self) -> int:
        """
        Dead letter queue policy.
        """
        return pulumi.get(self, "policy")


@pulumi.output_type
class GetQueueQueueListDeadLetterSourceResult(dict):
    def __init__(__self__, *,
                 queue_id: str,
                 queue_name: str):
        """
        :param str queue_id: Message queue ID.
        :param str queue_name: Filter by QueueName.
        """
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "queue_name", queue_name)

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        """
        Message queue ID.
        """
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> str:
        """
        Filter by QueueName.
        """
        return pulumi.get(self, "queue_name")


@pulumi.output_type
class GetQueueQueueListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Value of the tag key.
        :param str tag_value: Value of the tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Value of the tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Value of the tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetQueueQueueListTransactionPolicyResult(dict):
    def __init__(__self__, *,
                 first_query_interval: int,
                 max_query_count: int):
        """
        :param int first_query_interval: First lookback time.
        :param int max_query_count: Maximum number of queries.
        """
        pulumi.set(__self__, "first_query_interval", first_query_interval)
        pulumi.set(__self__, "max_query_count", max_query_count)

    @property
    @pulumi.getter(name="firstQueryInterval")
    def first_query_interval(self) -> int:
        """
        First lookback time.
        """
        return pulumi.get(self, "first_query_interval")

    @property
    @pulumi.getter(name="maxQueryCount")
    def max_query_count(self) -> int:
        """
        Maximum number of queries.
        """
        return pulumi.get(self, "max_query_count")


@pulumi.output_type
class GetSubscribeSubscriptionListResult(dict):
    def __init__(__self__, *,
                 binding_keys: Sequence[str],
                 create_time: int,
                 endpoint: str,
                 filter_tags: Sequence[str],
                 last_modify_time: int,
                 msg_count: int,
                 notify_content_format: str,
                 notify_strategy: str,
                 protocol: str,
                 subscription_id: str,
                 subscription_name: str,
                 topic_owner: int):
        """
        :param Sequence[str] binding_keys: Filtering policy for subscribing to and receiving messages.
        :param int create_time: Subscription creation time. A Unix timestamp accurate down to the millisecond will be returned.
        :param str endpoint: Endpoint that receives notifications, which varies by `protocol`: for HTTP, the endpoint must start with `http://`, and the `host` can be a domain or IP; for `queue`, `queueName` should be entered.
        :param Sequence[str] filter_tags: Filtering policy selected when a subscription is created:If `filterType` is 1, `filterTag` will be used for filtering. If `filterType` is 2, `bindingKey` will be used for filtering.
        :param int last_modify_time: Time when the subscription attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
        :param int msg_count: Number of messages to be delivered in the subscription.
        :param str notify_content_format: Push content format. Valid values: 1. `JSON`; 2. `SIMPLIFIED`, i.e., the raw format. If `Protocol` is `queue`, this value must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
        :param str notify_strategy: CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1. `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
        :param str protocol: Subscription protocol. Currently, two protocols are supported: HTTP and queue. To use the HTTP protocol, you need to build your own web server to receive messages. With the queue protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
        :param str subscription_id: Subscription ID, which will be used during monitoring data pull.
        :param str subscription_name: Fuzzy search by SubscriptionName.
        :param int topic_owner: Subscription owner APPID.
        """
        pulumi.set(__self__, "binding_keys", binding_keys)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "filter_tags", filter_tags)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "msg_count", msg_count)
        pulumi.set(__self__, "notify_content_format", notify_content_format)
        pulumi.set(__self__, "notify_strategy", notify_strategy)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "subscription_id", subscription_id)
        pulumi.set(__self__, "subscription_name", subscription_name)
        pulumi.set(__self__, "topic_owner", topic_owner)

    @property
    @pulumi.getter(name="bindingKeys")
    def binding_keys(self) -> Sequence[str]:
        """
        Filtering policy for subscribing to and receiving messages.
        """
        return pulumi.get(self, "binding_keys")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Subscription creation time. A Unix timestamp accurate down to the millisecond will be returned.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        Endpoint that receives notifications, which varies by `protocol`: for HTTP, the endpoint must start with `http://`, and the `host` can be a domain or IP; for `queue`, `queueName` should be entered.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="filterTags")
    def filter_tags(self) -> Sequence[str]:
        """
        Filtering policy selected when a subscription is created:If `filterType` is 1, `filterTag` will be used for filtering. If `filterType` is 2, `bindingKey` will be used for filtering.
        """
        return pulumi.get(self, "filter_tags")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> int:
        """
        Time when the subscription attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
        """
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter(name="msgCount")
    def msg_count(self) -> int:
        """
        Number of messages to be delivered in the subscription.
        """
        return pulumi.get(self, "msg_count")

    @property
    @pulumi.getter(name="notifyContentFormat")
    def notify_content_format(self) -> str:
        """
        Push content format. Valid values: 1. `JSON`; 2. `SIMPLIFIED`, i.e., the raw format. If `Protocol` is `queue`, this value must be `SIMPLIFIED`. If `Protocol` is `http`, both options are acceptable, and the default value is `JSON`.
        """
        return pulumi.get(self, "notify_content_format")

    @property
    @pulumi.getter(name="notifyStrategy")
    def notify_strategy(self) -> str:
        """
        CMQ push server retry policy in case an error occurs while pushing a message to `Endpoint`. Valid values: 1. `BACKOFF_RETRY`: backoff retry, which is to retry at a fixed interval, discard the message after a certain number of retries, and continue to push the next message; 2. `EXPONENTIAL_DECAY_RETRY`: exponential decay retry, which is to retry at an exponentially increasing interval, such as 1s, 2s, 4s, 8s, and so on. As a message can be retained in a topic for one day, failed messages will be discarded at most after one day of retry. Default value: `EXPONENTIAL_DECAY_RETRY`.
        """
        return pulumi.get(self, "notify_strategy")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Subscription protocol. Currently, two protocols are supported: HTTP and queue. To use the HTTP protocol, you need to build your own web server to receive messages. With the queue protocol, messages are automatically pushed to a CMQ queue and you can pull them concurrently.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        Subscription ID, which will be used during monitoring data pull.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="subscriptionName")
    def subscription_name(self) -> str:
        """
        Fuzzy search by SubscriptionName.
        """
        return pulumi.get(self, "subscription_name")

    @property
    @pulumi.getter(name="topicOwner")
    def topic_owner(self) -> int:
        """
        Subscription owner APPID.
        """
        return pulumi.get(self, "topic_owner")


@pulumi.output_type
class GetTopicFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: Filter parameter name.
        :param Sequence[str] values: Value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Filter parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTopicTopicListResult(dict):
    def __init__(__self__, *,
                 broker_type: int,
                 create_time: int,
                 create_uin: int,
                 filter_type: int,
                 last_modify_time: int,
                 max_msg_size: int,
                 msg_count: int,
                 msg_retention_seconds: int,
                 namespace_name: str,
                 qps: int,
                 status: int,
                 tags: Sequence['outputs.GetTopicTopicListTagResult'],
                 tenant_id: str,
                 topic_id: str,
                 topic_name: str,
                 trace: bool):
        """
        :param int broker_type: Valid values: `0` (Pulsar), `1` (RocketMQ).
        :param int create_time: Topic creation time. A Unix timestamp accurate down to the millisecond will be returned.
        :param int create_uin: Creator `Uin`. The `resource` field for CAM authentication is composed of this field.
        :param int filter_type: Filtering policy selected when a subscription is created: If `filterType` is 1, `FilterTag` will be used for filtering. If `filterType` is 2, `BindingKey` will be used for filtering.
        :param int last_modify_time: Time when the topic attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
        :param int max_msg_size: Maximum message size, which ranges from 1,024 to 1,048,576 bytes (i.e., 1-1,024 KB). The default value is 65,536.
        :param int msg_count: Number of current messages in the topic (number of retained messages).
        :param int msg_retention_seconds: Maximum lifecycle of message in topic. After the period specified by this parameter has elapsed since a message is sent to the topic, the message will be deleted no matter whether it has been successfully pushed to the user. This parameter is measured in seconds and defaulted to one day (86,400 seconds), which cannot be modified.
        :param str namespace_name: Namespace name.
        :param int qps: Number of messages published per second.
        :param int status: Cluster status. `0`: creating; `1`: normal; `2`: terminating; `3`: deleted; `4`: isolated; `5`: creation failed; `6`: deletion failed.
        :param Sequence['GetTopicTopicListTagArgs'] tags: Associated tag.
        :param str tenant_id: Tenant ID.
        :param str topic_id: Topic ID.
        :param str topic_name: Fuzzy search by TopicName.
        :param bool trace: Message trace. true: enabled; false: not enabled.
        """
        pulumi.set(__self__, "broker_type", broker_type)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "create_uin", create_uin)
        pulumi.set(__self__, "filter_type", filter_type)
        pulumi.set(__self__, "last_modify_time", last_modify_time)
        pulumi.set(__self__, "max_msg_size", max_msg_size)
        pulumi.set(__self__, "msg_count", msg_count)
        pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        pulumi.set(__self__, "namespace_name", namespace_name)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topic_name", topic_name)
        pulumi.set(__self__, "trace", trace)

    @property
    @pulumi.getter(name="brokerType")
    def broker_type(self) -> int:
        """
        Valid values: `0` (Pulsar), `1` (RocketMQ).
        """
        return pulumi.get(self, "broker_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Topic creation time. A Unix timestamp accurate down to the millisecond will be returned.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="createUin")
    def create_uin(self) -> int:
        """
        Creator `Uin`. The `resource` field for CAM authentication is composed of this field.
        """
        return pulumi.get(self, "create_uin")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> int:
        """
        Filtering policy selected when a subscription is created: If `filterType` is 1, `FilterTag` will be used for filtering. If `filterType` is 2, `BindingKey` will be used for filtering.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="lastModifyTime")
    def last_modify_time(self) -> int:
        """
        Time when the topic attribute is last modified. A Unix timestamp accurate down to the millisecond will be returned.
        """
        return pulumi.get(self, "last_modify_time")

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> int:
        """
        Maximum message size, which ranges from 1,024 to 1,048,576 bytes (i.e., 1-1,024 KB). The default value is 65,536.
        """
        return pulumi.get(self, "max_msg_size")

    @property
    @pulumi.getter(name="msgCount")
    def msg_count(self) -> int:
        """
        Number of current messages in the topic (number of retained messages).
        """
        return pulumi.get(self, "msg_count")

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> int:
        """
        Maximum lifecycle of message in topic. After the period specified by this parameter has elapsed since a message is sent to the topic, the message will be deleted no matter whether it has been successfully pushed to the user. This parameter is measured in seconds and defaulted to one day (86,400 seconds), which cannot be modified.
        """
        return pulumi.get(self, "msg_retention_seconds")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> str:
        """
        Namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def qps(self) -> int:
        """
        Number of messages published per second.
        """
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Cluster status. `0`: creating; `1`: normal; `2`: terminating; `3`: deleted; `4`: isolated; `5`: creation failed; `6`: deletion failed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTopicTopicListTagResult']:
        """
        Associated tag.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        Tenant ID.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> str:
        """
        Topic ID.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        Fuzzy search by TopicName.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter
    def trace(self) -> bool:
        """
        Message trace. true: enabled; false: not enabled.
        """
        return pulumi.get(self, "trace")


@pulumi.output_type
class GetTopicTopicListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Value of the tag key.
        :param str tag_value: Value of the tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Value of the tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Value of the tag value.
        """
        return pulumi.get(self, "tag_value")


