# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['QueueArgs', 'Queue']

@pulumi.input_type
class QueueArgs:
    def __init__(__self__, *,
                 queue_name: pulumi.Input[str],
                 dead_letter_queue_name: Optional[pulumi.Input[str]] = None,
                 first_query_interval: Optional[pulumi.Input[int]] = None,
                 max_msg_heap_num: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 max_query_count: Optional[pulumi.Input[int]] = None,
                 max_receive_count: Optional[pulumi.Input[int]] = None,
                 max_time_to_live: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 polling_wait_seconds: Optional[pulumi.Input[int]] = None,
                 retention_size_in_mb: Optional[pulumi.Input[int]] = None,
                 rewind_seconds: Optional[pulumi.Input[int]] = None,
                 trace: Optional[pulumi.Input[bool]] = None,
                 transaction: Optional[pulumi.Input[int]] = None,
                 visibility_timeout: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Queue resource.
        :param pulumi.Input[str] queue_name: Queue name, which must be unique under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[str] dead_letter_queue_name: Dead letter queue name.
        :param pulumi.Input[int] first_query_interval: First lookback interval.
        :param pulumi.Input[int] max_msg_heap_num: Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] max_query_count: Maximum number of lookbacks.
        :param pulumi.Input[int] max_receive_count: Maximum receipt times. Value range: 1-1000.
        :param pulumi.Input[int] max_time_to_live: Maximum period in seconds before an unconsumed message expires, which is required if `policy` is 1. Value range: 300-43200. This value should be smaller than `msgRetentionSeconds` (maximum message retention period).
        :param pulumi.Input[int] msg_retention_seconds: The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        :param pulumi.Input[int] policy: Dead letter policy. 0: message has been consumed multiple times but not deleted; 1: `Time-To-Live` has elapsed.
        :param pulumi.Input[int] polling_wait_seconds: Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        :param pulumi.Input[int] retention_size_in_mb: Queue storage space configured for message rewind. Value range: 10,240-512,000 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[int] rewind_seconds: Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is not configured, the feature will not be enabled.
        :param pulumi.Input[int] transaction: 1: transaction queue; 0: general queue.
        :param pulumi.Input[int] visibility_timeout: Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        pulumi.set(__self__, "queue_name", queue_name)
        if dead_letter_queue_name is not None:
            pulumi.set(__self__, "dead_letter_queue_name", dead_letter_queue_name)
        if first_query_interval is not None:
            pulumi.set(__self__, "first_query_interval", first_query_interval)
        if max_msg_heap_num is not None:
            pulumi.set(__self__, "max_msg_heap_num", max_msg_heap_num)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if max_query_count is not None:
            pulumi.set(__self__, "max_query_count", max_query_count)
        if max_receive_count is not None:
            pulumi.set(__self__, "max_receive_count", max_receive_count)
        if max_time_to_live is not None:
            pulumi.set(__self__, "max_time_to_live", max_time_to_live)
        if msg_retention_seconds is not None:
            pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if polling_wait_seconds is not None:
            pulumi.set(__self__, "polling_wait_seconds", polling_wait_seconds)
        if retention_size_in_mb is not None:
            pulumi.set(__self__, "retention_size_in_mb", retention_size_in_mb)
        if rewind_seconds is not None:
            pulumi.set(__self__, "rewind_seconds", rewind_seconds)
        if trace is not None:
            pulumi.set(__self__, "trace", trace)
        if transaction is not None:
            pulumi.set(__self__, "transaction", transaction)
        if visibility_timeout is not None:
            pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Input[str]:
        """
        Queue name, which must be unique under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="deadLetterQueueName")
    def dead_letter_queue_name(self) -> Optional[pulumi.Input[str]]:
        """
        Dead letter queue name.
        """
        return pulumi.get(self, "dead_letter_queue_name")

    @dead_letter_queue_name.setter
    def dead_letter_queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dead_letter_queue_name", value)

    @property
    @pulumi.getter(name="firstQueryInterval")
    def first_query_interval(self) -> Optional[pulumi.Input[int]]:
        """
        First lookback interval.
        """
        return pulumi.get(self, "first_query_interval")

    @first_query_interval.setter
    def first_query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "first_query_interval", value)

    @property
    @pulumi.getter(name="maxMsgHeapNum")
    def max_msg_heap_num(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        """
        return pulumi.get(self, "max_msg_heap_num")

    @max_msg_heap_num.setter
    def max_msg_heap_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_heap_num", value)

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        """
        return pulumi.get(self, "max_msg_size")

    @max_msg_size.setter
    def max_msg_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_size", value)

    @property
    @pulumi.getter(name="maxQueryCount")
    def max_query_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of lookbacks.
        """
        return pulumi.get(self, "max_query_count")

    @max_query_count.setter
    def max_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_query_count", value)

    @property
    @pulumi.getter(name="maxReceiveCount")
    def max_receive_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum receipt times. Value range: 1-1000.
        """
        return pulumi.get(self, "max_receive_count")

    @max_receive_count.setter
    def max_receive_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_receive_count", value)

    @property
    @pulumi.getter(name="maxTimeToLive")
    def max_time_to_live(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum period in seconds before an unconsumed message expires, which is required if `policy` is 1. Value range: 300-43200. This value should be smaller than `msgRetentionSeconds` (maximum message retention period).
        """
        return pulumi.get(self, "max_time_to_live")

    @max_time_to_live.setter
    def max_time_to_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_time_to_live", value)

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        """
        return pulumi.get(self, "msg_retention_seconds")

    @msg_retention_seconds.setter
    def msg_retention_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_retention_seconds", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[int]]:
        """
        Dead letter policy. 0: message has been consumed multiple times but not deleted; 1: `Time-To-Live` has elapsed.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="pollingWaitSeconds")
    def polling_wait_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        """
        return pulumi.get(self, "polling_wait_seconds")

    @polling_wait_seconds.setter
    def polling_wait_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_wait_seconds", value)

    @property
    @pulumi.getter(name="retentionSizeInMb")
    def retention_size_in_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Queue storage space configured for message rewind. Value range: 10,240-512,000 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "retention_size_in_mb")

    @retention_size_in_mb.setter
    def retention_size_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_size_in_mb", value)

    @property
    @pulumi.getter(name="rewindSeconds")
    def rewind_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "rewind_seconds")

    @rewind_seconds.setter
    def rewind_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rewind_seconds", value)

    @property
    @pulumi.getter
    def trace(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable message trace. true: yes; false: no. If this field is not configured, the feature will not be enabled.
        """
        return pulumi.get(self, "trace")

    @trace.setter
    def trace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trace", value)

    @property
    @pulumi.getter
    def transaction(self) -> Optional[pulumi.Input[int]]:
        """
        1: transaction queue; 0: general queue.
        """
        return pulumi.get(self, "transaction")

    @transaction.setter
    def transaction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transaction", value)

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        return pulumi.get(self, "visibility_timeout")

    @visibility_timeout.setter
    def visibility_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "visibility_timeout", value)


@pulumi.input_type
class _QueueState:
    def __init__(__self__, *,
                 dead_letter_queue_name: Optional[pulumi.Input[str]] = None,
                 first_query_interval: Optional[pulumi.Input[int]] = None,
                 max_msg_heap_num: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 max_query_count: Optional[pulumi.Input[int]] = None,
                 max_receive_count: Optional[pulumi.Input[int]] = None,
                 max_time_to_live: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 polling_wait_seconds: Optional[pulumi.Input[int]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 retention_size_in_mb: Optional[pulumi.Input[int]] = None,
                 rewind_seconds: Optional[pulumi.Input[int]] = None,
                 trace: Optional[pulumi.Input[bool]] = None,
                 transaction: Optional[pulumi.Input[int]] = None,
                 visibility_timeout: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Queue resources.
        :param pulumi.Input[str] dead_letter_queue_name: Dead letter queue name.
        :param pulumi.Input[int] first_query_interval: First lookback interval.
        :param pulumi.Input[int] max_msg_heap_num: Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] max_query_count: Maximum number of lookbacks.
        :param pulumi.Input[int] max_receive_count: Maximum receipt times. Value range: 1-1000.
        :param pulumi.Input[int] max_time_to_live: Maximum period in seconds before an unconsumed message expires, which is required if `policy` is 1. Value range: 300-43200. This value should be smaller than `msgRetentionSeconds` (maximum message retention period).
        :param pulumi.Input[int] msg_retention_seconds: The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        :param pulumi.Input[int] policy: Dead letter policy. 0: message has been consumed multiple times but not deleted; 1: `Time-To-Live` has elapsed.
        :param pulumi.Input[int] polling_wait_seconds: Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        :param pulumi.Input[str] queue_name: Queue name, which must be unique under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[int] retention_size_in_mb: Queue storage space configured for message rewind. Value range: 10,240-512,000 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[int] rewind_seconds: Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is not configured, the feature will not be enabled.
        :param pulumi.Input[int] transaction: 1: transaction queue; 0: general queue.
        :param pulumi.Input[int] visibility_timeout: Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        if dead_letter_queue_name is not None:
            pulumi.set(__self__, "dead_letter_queue_name", dead_letter_queue_name)
        if first_query_interval is not None:
            pulumi.set(__self__, "first_query_interval", first_query_interval)
        if max_msg_heap_num is not None:
            pulumi.set(__self__, "max_msg_heap_num", max_msg_heap_num)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if max_query_count is not None:
            pulumi.set(__self__, "max_query_count", max_query_count)
        if max_receive_count is not None:
            pulumi.set(__self__, "max_receive_count", max_receive_count)
        if max_time_to_live is not None:
            pulumi.set(__self__, "max_time_to_live", max_time_to_live)
        if msg_retention_seconds is not None:
            pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if polling_wait_seconds is not None:
            pulumi.set(__self__, "polling_wait_seconds", polling_wait_seconds)
        if queue_name is not None:
            pulumi.set(__self__, "queue_name", queue_name)
        if retention_size_in_mb is not None:
            pulumi.set(__self__, "retention_size_in_mb", retention_size_in_mb)
        if rewind_seconds is not None:
            pulumi.set(__self__, "rewind_seconds", rewind_seconds)
        if trace is not None:
            pulumi.set(__self__, "trace", trace)
        if transaction is not None:
            pulumi.set(__self__, "transaction", transaction)
        if visibility_timeout is not None:
            pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="deadLetterQueueName")
    def dead_letter_queue_name(self) -> Optional[pulumi.Input[str]]:
        """
        Dead letter queue name.
        """
        return pulumi.get(self, "dead_letter_queue_name")

    @dead_letter_queue_name.setter
    def dead_letter_queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dead_letter_queue_name", value)

    @property
    @pulumi.getter(name="firstQueryInterval")
    def first_query_interval(self) -> Optional[pulumi.Input[int]]:
        """
        First lookback interval.
        """
        return pulumi.get(self, "first_query_interval")

    @first_query_interval.setter
    def first_query_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "first_query_interval", value)

    @property
    @pulumi.getter(name="maxMsgHeapNum")
    def max_msg_heap_num(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        """
        return pulumi.get(self, "max_msg_heap_num")

    @max_msg_heap_num.setter
    def max_msg_heap_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_heap_num", value)

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        """
        return pulumi.get(self, "max_msg_size")

    @max_msg_size.setter
    def max_msg_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_size", value)

    @property
    @pulumi.getter(name="maxQueryCount")
    def max_query_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of lookbacks.
        """
        return pulumi.get(self, "max_query_count")

    @max_query_count.setter
    def max_query_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_query_count", value)

    @property
    @pulumi.getter(name="maxReceiveCount")
    def max_receive_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum receipt times. Value range: 1-1000.
        """
        return pulumi.get(self, "max_receive_count")

    @max_receive_count.setter
    def max_receive_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_receive_count", value)

    @property
    @pulumi.getter(name="maxTimeToLive")
    def max_time_to_live(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum period in seconds before an unconsumed message expires, which is required if `policy` is 1. Value range: 300-43200. This value should be smaller than `msgRetentionSeconds` (maximum message retention period).
        """
        return pulumi.get(self, "max_time_to_live")

    @max_time_to_live.setter
    def max_time_to_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_time_to_live", value)

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        """
        return pulumi.get(self, "msg_retention_seconds")

    @msg_retention_seconds.setter
    def msg_retention_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_retention_seconds", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[int]]:
        """
        Dead letter policy. 0: message has been consumed multiple times but not deleted; 1: `Time-To-Live` has elapsed.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="pollingWaitSeconds")
    def polling_wait_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        """
        return pulumi.get(self, "polling_wait_seconds")

    @polling_wait_seconds.setter
    def polling_wait_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "polling_wait_seconds", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> Optional[pulumi.Input[str]]:
        """
        Queue name, which must be unique under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        """
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="retentionSizeInMb")
    def retention_size_in_mb(self) -> Optional[pulumi.Input[int]]:
        """
        Queue storage space configured for message rewind. Value range: 10,240-512,000 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "retention_size_in_mb")

    @retention_size_in_mb.setter
    def retention_size_in_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_size_in_mb", value)

    @property
    @pulumi.getter(name="rewindSeconds")
    def rewind_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "rewind_seconds")

    @rewind_seconds.setter
    def rewind_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rewind_seconds", value)

    @property
    @pulumi.getter
    def trace(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable message trace. true: yes; false: no. If this field is not configured, the feature will not be enabled.
        """
        return pulumi.get(self, "trace")

    @trace.setter
    def trace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trace", value)

    @property
    @pulumi.getter
    def transaction(self) -> Optional[pulumi.Input[int]]:
        """
        1: transaction queue; 0: general queue.
        """
        return pulumi.get(self, "transaction")

    @transaction.setter
    def transaction(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "transaction", value)

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        return pulumi.get(self, "visibility_timeout")

    @visibility_timeout.setter
    def visibility_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "visibility_timeout", value)


class Queue(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dead_letter_queue_name: Optional[pulumi.Input[str]] = None,
                 first_query_interval: Optional[pulumi.Input[int]] = None,
                 max_msg_heap_num: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 max_query_count: Optional[pulumi.Input[int]] = None,
                 max_receive_count: Optional[pulumi.Input[int]] = None,
                 max_time_to_live: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 polling_wait_seconds: Optional[pulumi.Input[int]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 retention_size_in_mb: Optional[pulumi.Input[int]] = None,
                 rewind_seconds: Optional[pulumi.Input[int]] = None,
                 trace: Optional[pulumi.Input[bool]] = None,
                 transaction: Optional[pulumi.Input[int]] = None,
                 visibility_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcmq queue

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        queue = tencentcloud.tcmq.Queue("queue", queue_name="queue_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcmq queue can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcmq/queue:Queue queue queue_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dead_letter_queue_name: Dead letter queue name.
        :param pulumi.Input[int] first_query_interval: First lookback interval.
        :param pulumi.Input[int] max_msg_heap_num: Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] max_query_count: Maximum number of lookbacks.
        :param pulumi.Input[int] max_receive_count: Maximum receipt times. Value range: 1-1000.
        :param pulumi.Input[int] max_time_to_live: Maximum period in seconds before an unconsumed message expires, which is required if `policy` is 1. Value range: 300-43200. This value should be smaller than `msgRetentionSeconds` (maximum message retention period).
        :param pulumi.Input[int] msg_retention_seconds: The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        :param pulumi.Input[int] policy: Dead letter policy. 0: message has been consumed multiple times but not deleted; 1: `Time-To-Live` has elapsed.
        :param pulumi.Input[int] polling_wait_seconds: Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        :param pulumi.Input[str] queue_name: Queue name, which must be unique under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[int] retention_size_in_mb: Queue storage space configured for message rewind. Value range: 10,240-512,000 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[int] rewind_seconds: Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is not configured, the feature will not be enabled.
        :param pulumi.Input[int] transaction: 1: transaction queue; 0: general queue.
        :param pulumi.Input[int] visibility_timeout: Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QueueArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcmq queue

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        queue = tencentcloud.tcmq.Queue("queue", queue_name="queue_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcmq queue can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcmq/queue:Queue queue queue_id
        ```

        :param str resource_name: The name of the resource.
        :param QueueArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QueueArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dead_letter_queue_name: Optional[pulumi.Input[str]] = None,
                 first_query_interval: Optional[pulumi.Input[int]] = None,
                 max_msg_heap_num: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 max_query_count: Optional[pulumi.Input[int]] = None,
                 max_receive_count: Optional[pulumi.Input[int]] = None,
                 max_time_to_live: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 policy: Optional[pulumi.Input[int]] = None,
                 polling_wait_seconds: Optional[pulumi.Input[int]] = None,
                 queue_name: Optional[pulumi.Input[str]] = None,
                 retention_size_in_mb: Optional[pulumi.Input[int]] = None,
                 rewind_seconds: Optional[pulumi.Input[int]] = None,
                 trace: Optional[pulumi.Input[bool]] = None,
                 transaction: Optional[pulumi.Input[int]] = None,
                 visibility_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QueueArgs.__new__(QueueArgs)

            __props__.__dict__["dead_letter_queue_name"] = dead_letter_queue_name
            __props__.__dict__["first_query_interval"] = first_query_interval
            __props__.__dict__["max_msg_heap_num"] = max_msg_heap_num
            __props__.__dict__["max_msg_size"] = max_msg_size
            __props__.__dict__["max_query_count"] = max_query_count
            __props__.__dict__["max_receive_count"] = max_receive_count
            __props__.__dict__["max_time_to_live"] = max_time_to_live
            __props__.__dict__["msg_retention_seconds"] = msg_retention_seconds
            __props__.__dict__["policy"] = policy
            __props__.__dict__["polling_wait_seconds"] = polling_wait_seconds
            if queue_name is None and not opts.urn:
                raise TypeError("Missing required property 'queue_name'")
            __props__.__dict__["queue_name"] = queue_name
            __props__.__dict__["retention_size_in_mb"] = retention_size_in_mb
            __props__.__dict__["rewind_seconds"] = rewind_seconds
            __props__.__dict__["trace"] = trace
            __props__.__dict__["transaction"] = transaction
            __props__.__dict__["visibility_timeout"] = visibility_timeout
        super(Queue, __self__).__init__(
            'tencentcloud:Tcmq/queue:Queue',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dead_letter_queue_name: Optional[pulumi.Input[str]] = None,
            first_query_interval: Optional[pulumi.Input[int]] = None,
            max_msg_heap_num: Optional[pulumi.Input[int]] = None,
            max_msg_size: Optional[pulumi.Input[int]] = None,
            max_query_count: Optional[pulumi.Input[int]] = None,
            max_receive_count: Optional[pulumi.Input[int]] = None,
            max_time_to_live: Optional[pulumi.Input[int]] = None,
            msg_retention_seconds: Optional[pulumi.Input[int]] = None,
            policy: Optional[pulumi.Input[int]] = None,
            polling_wait_seconds: Optional[pulumi.Input[int]] = None,
            queue_name: Optional[pulumi.Input[str]] = None,
            retention_size_in_mb: Optional[pulumi.Input[int]] = None,
            rewind_seconds: Optional[pulumi.Input[int]] = None,
            trace: Optional[pulumi.Input[bool]] = None,
            transaction: Optional[pulumi.Input[int]] = None,
            visibility_timeout: Optional[pulumi.Input[int]] = None) -> 'Queue':
        """
        Get an existing Queue resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dead_letter_queue_name: Dead letter queue name.
        :param pulumi.Input[int] first_query_interval: First lookback interval.
        :param pulumi.Input[int] max_msg_heap_num: Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] max_query_count: Maximum number of lookbacks.
        :param pulumi.Input[int] max_receive_count: Maximum receipt times. Value range: 1-1000.
        :param pulumi.Input[int] max_time_to_live: Maximum period in seconds before an unconsumed message expires, which is required if `policy` is 1. Value range: 300-43200. This value should be smaller than `msgRetentionSeconds` (maximum message retention period).
        :param pulumi.Input[int] msg_retention_seconds: The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        :param pulumi.Input[int] policy: Dead letter policy. 0: message has been consumed multiple times but not deleted; 1: `Time-To-Live` has elapsed.
        :param pulumi.Input[int] polling_wait_seconds: Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        :param pulumi.Input[str] queue_name: Queue name, which must be unique under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[int] retention_size_in_mb: Queue storage space configured for message rewind. Value range: 10,240-512,000 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[int] rewind_seconds: Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is not configured, the feature will not be enabled.
        :param pulumi.Input[int] transaction: 1: transaction queue; 0: general queue.
        :param pulumi.Input[int] visibility_timeout: Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QueueState.__new__(_QueueState)

        __props__.__dict__["dead_letter_queue_name"] = dead_letter_queue_name
        __props__.__dict__["first_query_interval"] = first_query_interval
        __props__.__dict__["max_msg_heap_num"] = max_msg_heap_num
        __props__.__dict__["max_msg_size"] = max_msg_size
        __props__.__dict__["max_query_count"] = max_query_count
        __props__.__dict__["max_receive_count"] = max_receive_count
        __props__.__dict__["max_time_to_live"] = max_time_to_live
        __props__.__dict__["msg_retention_seconds"] = msg_retention_seconds
        __props__.__dict__["policy"] = policy
        __props__.__dict__["polling_wait_seconds"] = polling_wait_seconds
        __props__.__dict__["queue_name"] = queue_name
        __props__.__dict__["retention_size_in_mb"] = retention_size_in_mb
        __props__.__dict__["rewind_seconds"] = rewind_seconds
        __props__.__dict__["trace"] = trace
        __props__.__dict__["transaction"] = transaction
        __props__.__dict__["visibility_timeout"] = visibility_timeout
        return Queue(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deadLetterQueueName")
    def dead_letter_queue_name(self) -> pulumi.Output[Optional[str]]:
        """
        Dead letter queue name.
        """
        return pulumi.get(self, "dead_letter_queue_name")

    @property
    @pulumi.getter(name="firstQueryInterval")
    def first_query_interval(self) -> pulumi.Output[Optional[int]]:
        """
        First lookback interval.
        """
        return pulumi.get(self, "first_query_interval")

    @property
    @pulumi.getter(name="maxMsgHeapNum")
    def max_msg_heap_num(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of heaped messages. The value range is 1,000,000-10,000,000 during the beta test and can be 1,000,000-1,000,000,000 after the product is officially released. The default value is 10,000,000 during the beta test and will be 100,000,000 after the product is officially released.
        """
        return pulumi.get(self, "max_msg_heap_num")

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        """
        return pulumi.get(self, "max_msg_size")

    @property
    @pulumi.getter(name="maxQueryCount")
    def max_query_count(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum number of lookbacks.
        """
        return pulumi.get(self, "max_query_count")

    @property
    @pulumi.getter(name="maxReceiveCount")
    def max_receive_count(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum receipt times. Value range: 1-1000.
        """
        return pulumi.get(self, "max_receive_count")

    @property
    @pulumi.getter(name="maxTimeToLive")
    def max_time_to_live(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum period in seconds before an unconsumed message expires, which is required if `policy` is 1. Value range: 300-43200. This value should be smaller than `msgRetentionSeconds` (maximum message retention period).
        """
        return pulumi.get(self, "max_time_to_live")

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        The max period during which a message is retained before it is automatically acknowledged. Value range: 30-43,200 seconds (30 seconds to 12 hours). Default value: 3600 seconds (1 hour).
        """
        return pulumi.get(self, "msg_retention_seconds")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[Optional[int]]:
        """
        Dead letter policy. 0: message has been consumed multiple times but not deleted; 1: `Time-To-Live` has elapsed.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="pollingWaitSeconds")
    def polling_wait_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Long polling wait time for message reception. Value range: 0-30 seconds. Default value: 0.
        """
        return pulumi.get(self, "polling_wait_seconds")

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Output[str]:
        """
        Queue name, which must be unique under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        """
        return pulumi.get(self, "queue_name")

    @property
    @pulumi.getter(name="retentionSizeInMb")
    def retention_size_in_mb(self) -> pulumi.Output[Optional[int]]:
        """
        Queue storage space configured for message rewind. Value range: 10,240-512,000 MB (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "retention_size_in_mb")

    @property
    @pulumi.getter(name="rewindSeconds")
    def rewind_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Rewindable time of messages in the queue. Value range: 0-1,296,000s (if message rewind is enabled). The value `0` indicates that message rewind is not enabled.
        """
        return pulumi.get(self, "rewind_seconds")

    @property
    @pulumi.getter
    def trace(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable message trace. true: yes; false: no. If this field is not configured, the feature will not be enabled.
        """
        return pulumi.get(self, "trace")

    @property
    @pulumi.getter
    def transaction(self) -> pulumi.Output[Optional[int]]:
        """
        1: transaction queue; 0: general queue.
        """
        return pulumi.get(self, "transaction")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Message visibility timeout period. Value range: 1-43200 seconds (i.e., 12 hours). Default value: 30.
        """
        return pulumi.get(self, "visibility_timeout")

