# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TopicArgs', 'Topic']

@pulumi.input_type
class TopicArgs:
    def __init__(__self__, *,
                 topic_name: pulumi.Input[str],
                 filter_type: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 trace: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Topic resource.
        :param pulumi.Input[str] topic_name: Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[int] filter_type: Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] msg_retention_seconds: Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
        """
        pulumi.set(__self__, "topic_name", topic_name)
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if msg_retention_seconds is not None:
            pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        if trace is not None:
            pulumi.set(__self__, "trace", trace)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[int]]:
        """
        Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        """
        return pulumi.get(self, "max_msg_size")

    @max_msg_size.setter
    def max_msg_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_size", value)

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
        """
        return pulumi.get(self, "msg_retention_seconds")

    @msg_retention_seconds.setter
    def msg_retention_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_retention_seconds", value)

    @property
    @pulumi.getter
    def trace(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
        """
        return pulumi.get(self, "trace")

    @trace.setter
    def trace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trace", value)


@pulumi.input_type
class _TopicState:
    def __init__(__self__, *,
                 filter_type: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 trace: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Topic resources.
        :param pulumi.Input[int] filter_type: Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] msg_retention_seconds: Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
        :param pulumi.Input[str] topic_name: Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
        """
        if filter_type is not None:
            pulumi.set(__self__, "filter_type", filter_type)
        if max_msg_size is not None:
            pulumi.set(__self__, "max_msg_size", max_msg_size)
        if msg_retention_seconds is not None:
            pulumi.set(__self__, "msg_retention_seconds", msg_retention_seconds)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)
        if trace is not None:
            pulumi.set(__self__, "trace", trace)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[int]]:
        """
        Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
        """
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        """
        return pulumi.get(self, "max_msg_size")

    @max_msg_size.setter
    def max_msg_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_msg_size", value)

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
        """
        return pulumi.get(self, "msg_retention_seconds")

    @msg_retention_seconds.setter
    def msg_retention_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "msg_retention_seconds", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter
    def trace(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
        """
        return pulumi.get(self, "trace")

    @trace.setter
    def trace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trace", value)


class Topic(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filter_type: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 trace: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a tcmq topic

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        topic = tencentcloud.tcmq.Topic("topic", topic_name="topic_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcmq topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcmq/topic:Topic topic topic_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] filter_type: Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] msg_retention_seconds: Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
        :param pulumi.Input[str] topic_name: Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tcmq topic

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        topic = tencentcloud.tcmq.Topic("topic", topic_name="topic_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tcmq topic can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tcmq/topic:Topic topic topic_id
        ```

        :param str resource_name: The name of the resource.
        :param TopicArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 filter_type: Optional[pulumi.Input[int]] = None,
                 max_msg_size: Optional[pulumi.Input[int]] = None,
                 msg_retention_seconds: Optional[pulumi.Input[int]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 trace: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicArgs.__new__(TopicArgs)

            __props__.__dict__["filter_type"] = filter_type
            __props__.__dict__["max_msg_size"] = max_msg_size
            __props__.__dict__["msg_retention_seconds"] = msg_retention_seconds
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["trace"] = trace
        super(Topic, __self__).__init__(
            'tencentcloud:Tcmq/topic:Topic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            filter_type: Optional[pulumi.Input[int]] = None,
            max_msg_size: Optional[pulumi.Input[int]] = None,
            msg_retention_seconds: Optional[pulumi.Input[int]] = None,
            topic_name: Optional[pulumi.Input[str]] = None,
            trace: Optional[pulumi.Input[bool]] = None) -> 'Topic':
        """
        Get an existing Topic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] filter_type: Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
        :param pulumi.Input[int] max_msg_size: Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        :param pulumi.Input[int] msg_retention_seconds: Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
        :param pulumi.Input[str] topic_name: Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        :param pulumi.Input[bool] trace: Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicState.__new__(_TopicState)

        __props__.__dict__["filter_type"] = filter_type
        __props__.__dict__["max_msg_size"] = max_msg_size
        __props__.__dict__["msg_retention_seconds"] = msg_retention_seconds
        __props__.__dict__["topic_name"] = topic_name
        __props__.__dict__["trace"] = trace
        return Topic(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> pulumi.Output[Optional[int]]:
        """
        Used to specify the message match policy for the topic. `1`: tag match policy (default value); `2`: routing match policy.
        """
        return pulumi.get(self, "filter_type")

    @property
    @pulumi.getter(name="maxMsgSize")
    def max_msg_size(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum message length. Value range: 1024-65536 bytes (i.e., 1-64 KB). Default value: 65536.
        """
        return pulumi.get(self, "max_msg_size")

    @property
    @pulumi.getter(name="msgRetentionSeconds")
    def msg_retention_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Message retention period. Value range: 60-86400 seconds (i.e., 1 minute-1 day). Default value: 86400.
        """
        return pulumi.get(self, "msg_retention_seconds")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        Topic name, which must be unique in the same topic under the same account in the same region. It can contain up to 64 letters, digits, and hyphens and must begin with a letter.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter
    def trace(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable message trace. true: yes; false: no. If this field is left empty, the feature will not be enabled.
        """
        return pulumi.get(self, "trace")

