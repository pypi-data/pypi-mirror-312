# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupsResult',
    'AwaitableGetGroupsResult',
    'get_groups',
    'get_groups_output',
]

@pulumi.output_type
class GetGroupsResult:
    """
    A collection of values returned by getGroups.
    """
    def __init__(__self__, application_id=None, cluster_id=None, group_id_lists=None, group_resource_type_lists=None, id=None, namespace_id=None, order_by=None, order_type=None, result_output_file=None, results=None, search_word=None, status=None):
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if group_id_lists and not isinstance(group_id_lists, list):
            raise TypeError("Expected argument 'group_id_lists' to be a list")
        pulumi.set(__self__, "group_id_lists", group_id_lists)
        if group_resource_type_lists and not isinstance(group_resource_type_lists, list):
            raise TypeError("Expected argument 'group_resource_type_lists' to be a list")
        pulumi.set(__self__, "group_resource_type_lists", group_resource_type_lists)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        pulumi.set(__self__, "namespace_id", namespace_id)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_type and not isinstance(order_type, int):
            raise TypeError("Expected argument 'order_type' to be a int")
        pulumi.set(__self__, "order_type", order_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if search_word and not isinstance(search_word, str):
            raise TypeError("Expected argument 'search_word' to be a str")
        pulumi.set(__self__, "search_word", search_word)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        """
        Application ID. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        Cluster ID. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="groupIdLists")
    def group_id_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_id_lists")

    @property
    @pulumi.getter(name="groupResourceTypeLists")
    def group_resource_type_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "group_resource_type_lists")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        """
        Namespace ID. Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderType")
    def order_type(self) -> Optional[int]:
        return pulumi.get(self, "order_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetGroupsResultResult']:
        """
        Pagination information of the virtual machine deployment group.Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="searchWord")
    def search_word(self) -> Optional[str]:
        return pulumi.get(self, "search_word")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


class AwaitableGetGroupsResult(GetGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupsResult(
            application_id=self.application_id,
            cluster_id=self.cluster_id,
            group_id_lists=self.group_id_lists,
            group_resource_type_lists=self.group_resource_type_lists,
            id=self.id,
            namespace_id=self.namespace_id,
            order_by=self.order_by,
            order_type=self.order_type,
            result_output_file=self.result_output_file,
            results=self.results,
            search_word=self.search_word,
            status=self.status)


def get_groups(application_id: Optional[str] = None,
               cluster_id: Optional[str] = None,
               group_id_lists: Optional[Sequence[str]] = None,
               group_resource_type_lists: Optional[Sequence[str]] = None,
               namespace_id: Optional[str] = None,
               order_by: Optional[str] = None,
               order_type: Optional[int] = None,
               result_output_file: Optional[str] = None,
               search_word: Optional[str] = None,
               status: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupsResult:
    """
    Use this data source to query detailed information of tsf groups

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    groups = tencentcloud.Tsf.get_groups(application_id="application-a24x29xv",
        cluster_id="cluster-vwgj5e6y",
        group_id_lists=["group-yrjkln9v"],
        group_resource_type_lists=["DEF"],
        namespace_id="namespace-aemrg36v",
        order_by="createTime",
        order_type=0,
        search_word="keep",
        status="Running")
    ```
    <!--End PulumiCodeChooser -->


    :param str application_id: applicationId.
    :param str cluster_id: clusterId.
    :param Sequence[str] group_id_lists: group Id list.
    :param Sequence[str] group_resource_type_lists: Group resourceType list.
    :param str namespace_id: namespace Id.
    :param str order_by: sort term.
    :param int order_type: order type, 0 desc, 1 asc.
    :param str result_output_file: Used to save results.
    :param str search_word: searchWord, support groupName.
    :param str status: group status filter, `Running`: running, `Unknown`: unknown.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['clusterId'] = cluster_id
    __args__['groupIdLists'] = group_id_lists
    __args__['groupResourceTypeLists'] = group_resource_type_lists
    __args__['namespaceId'] = namespace_id
    __args__['orderBy'] = order_by
    __args__['orderType'] = order_type
    __args__['resultOutputFile'] = result_output_file
    __args__['searchWord'] = search_word
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tsf/getGroups:getGroups', __args__, opts=opts, typ=GetGroupsResult).value

    return AwaitableGetGroupsResult(
        application_id=pulumi.get(__ret__, 'application_id'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        group_id_lists=pulumi.get(__ret__, 'group_id_lists'),
        group_resource_type_lists=pulumi.get(__ret__, 'group_resource_type_lists'),
        id=pulumi.get(__ret__, 'id'),
        namespace_id=pulumi.get(__ret__, 'namespace_id'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_type=pulumi.get(__ret__, 'order_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        search_word=pulumi.get(__ret__, 'search_word'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_groups)
def get_groups_output(application_id: Optional[pulumi.Input[Optional[str]]] = None,
                      cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                      group_id_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      group_resource_type_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      namespace_id: Optional[pulumi.Input[Optional[str]]] = None,
                      order_by: Optional[pulumi.Input[Optional[str]]] = None,
                      order_type: Optional[pulumi.Input[Optional[int]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      search_word: Optional[pulumi.Input[Optional[str]]] = None,
                      status: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupsResult]:
    """
    Use this data source to query detailed information of tsf groups

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    groups = tencentcloud.Tsf.get_groups(application_id="application-a24x29xv",
        cluster_id="cluster-vwgj5e6y",
        group_id_lists=["group-yrjkln9v"],
        group_resource_type_lists=["DEF"],
        namespace_id="namespace-aemrg36v",
        order_by="createTime",
        order_type=0,
        search_word="keep",
        status="Running")
    ```
    <!--End PulumiCodeChooser -->


    :param str application_id: applicationId.
    :param str cluster_id: clusterId.
    :param Sequence[str] group_id_lists: group Id list.
    :param Sequence[str] group_resource_type_lists: Group resourceType list.
    :param str namespace_id: namespace Id.
    :param str order_by: sort term.
    :param int order_type: order type, 0 desc, 1 asc.
    :param str result_output_file: Used to save results.
    :param str search_word: searchWord, support groupName.
    :param str status: group status filter, `Running`: running, `Unknown`: unknown.
    """
    ...
