# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ApplicationFileConfigReleaseArgs', 'ApplicationFileConfigRelease']

@pulumi.input_type
class ApplicationFileConfigReleaseArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[str],
                 group_id: pulumi.Input[str],
                 release_desc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApplicationFileConfigRelease resource.
        :param pulumi.Input[str] config_id: File config id.
        :param pulumi.Input[str] group_id: Group Id.
        :param pulumi.Input[str] release_desc: release Description.
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "group_id", group_id)
        if release_desc is not None:
            pulumi.set(__self__, "release_desc", release_desc)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[str]:
        """
        File config id.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        Group Id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="releaseDesc")
    def release_desc(self) -> Optional[pulumi.Input[str]]:
        """
        release Description.
        """
        return pulumi.get(self, "release_desc")

    @release_desc.setter
    def release_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_desc", value)


@pulumi.input_type
class _ApplicationFileConfigReleaseState:
    def __init__(__self__, *,
                 config_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 release_desc: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApplicationFileConfigRelease resources.
        :param pulumi.Input[str] config_id: File config id.
        :param pulumi.Input[str] group_id: Group Id.
        :param pulumi.Input[str] release_desc: release Description.
        """
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if release_desc is not None:
            pulumi.set(__self__, "release_desc", release_desc)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[str]]:
        """
        File config id.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Group Id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="releaseDesc")
    def release_desc(self) -> Optional[pulumi.Input[str]]:
        """
        release Description.
        """
        return pulumi.get(self, "release_desc")

    @release_desc.setter
    def release_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_desc", value)


class ApplicationFileConfigRelease(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 release_desc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf application_file_config_release

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application_file_config_release = tencentcloud.tsf.ApplicationFileConfigRelease("applicationFileConfigRelease",
            config_id="dcfg-f-123456",
            group_id="group-123456",
            release_desc="product release")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf applicationfile_config_release can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/applicationFileConfigRelease:ApplicationFileConfigRelease application_file_config_release application_file_config_release_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_id: File config id.
        :param pulumi.Input[str] group_id: Group Id.
        :param pulumi.Input[str] release_desc: release Description.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationFileConfigReleaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf application_file_config_release

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application_file_config_release = tencentcloud.tsf.ApplicationFileConfigRelease("applicationFileConfigRelease",
            config_id="dcfg-f-123456",
            group_id="group-123456",
            release_desc="product release")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf applicationfile_config_release can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/applicationFileConfigRelease:ApplicationFileConfigRelease application_file_config_release application_file_config_release_id
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationFileConfigReleaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationFileConfigReleaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 release_desc: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationFileConfigReleaseArgs.__new__(ApplicationFileConfigReleaseArgs)

            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["release_desc"] = release_desc
        super(ApplicationFileConfigRelease, __self__).__init__(
            'tencentcloud:Tsf/applicationFileConfigRelease:ApplicationFileConfigRelease',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_id: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            release_desc: Optional[pulumi.Input[str]] = None) -> 'ApplicationFileConfigRelease':
        """
        Get an existing ApplicationFileConfigRelease resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_id: File config id.
        :param pulumi.Input[str] group_id: Group Id.
        :param pulumi.Input[str] release_desc: release Description.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationFileConfigReleaseState.__new__(_ApplicationFileConfigReleaseState)

        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["release_desc"] = release_desc
        return ApplicationFileConfigRelease(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[str]:
        """
        File config id.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        Group Id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="releaseDesc")
    def release_desc(self) -> pulumi.Output[Optional[str]]:
        """
        release Description.
        """
        return pulumi.get(self, "release_desc")

