# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPublicConfigSummaryResult',
    'AwaitableGetPublicConfigSummaryResult',
    'get_public_config_summary',
    'get_public_config_summary_output',
]

@pulumi.output_type
class GetPublicConfigSummaryResult:
    """
    A collection of values returned by getPublicConfigSummary.
    """
    def __init__(__self__, config_id_lists=None, config_tag_lists=None, disable_program_auth_check=None, id=None, order_by=None, order_type=None, result_output_file=None, results=None, search_word=None):
        if config_id_lists and not isinstance(config_id_lists, list):
            raise TypeError("Expected argument 'config_id_lists' to be a list")
        pulumi.set(__self__, "config_id_lists", config_id_lists)
        if config_tag_lists and not isinstance(config_tag_lists, list):
            raise TypeError("Expected argument 'config_tag_lists' to be a list")
        pulumi.set(__self__, "config_tag_lists", config_tag_lists)
        if disable_program_auth_check and not isinstance(disable_program_auth_check, bool):
            raise TypeError("Expected argument 'disable_program_auth_check' to be a bool")
        pulumi.set(__self__, "disable_program_auth_check", disable_program_auth_check)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_type and not isinstance(order_type, int):
            raise TypeError("Expected argument 'order_type' to be a int")
        pulumi.set(__self__, "order_type", order_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if search_word and not isinstance(search_word, str):
            raise TypeError("Expected argument 'search_word' to be a str")
        pulumi.set(__self__, "search_word", search_word)

    @property
    @pulumi.getter(name="configIdLists")
    def config_id_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "config_id_lists")

    @property
    @pulumi.getter(name="configTagLists")
    def config_tag_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "config_tag_lists")

    @property
    @pulumi.getter(name="disableProgramAuthCheck")
    def disable_program_auth_check(self) -> Optional[bool]:
        return pulumi.get(self, "disable_program_auth_check")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderType")
    def order_type(self) -> Optional[int]:
        return pulumi.get(self, "order_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetPublicConfigSummaryResultResult']:
        """
        Public config Page Item.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="searchWord")
    def search_word(self) -> Optional[str]:
        return pulumi.get(self, "search_word")


class AwaitableGetPublicConfigSummaryResult(GetPublicConfigSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicConfigSummaryResult(
            config_id_lists=self.config_id_lists,
            config_tag_lists=self.config_tag_lists,
            disable_program_auth_check=self.disable_program_auth_check,
            id=self.id,
            order_by=self.order_by,
            order_type=self.order_type,
            result_output_file=self.result_output_file,
            results=self.results,
            search_word=self.search_word)


def get_public_config_summary(config_id_lists: Optional[Sequence[str]] = None,
                              config_tag_lists: Optional[Sequence[str]] = None,
                              disable_program_auth_check: Optional[bool] = None,
                              order_by: Optional[str] = None,
                              order_type: Optional[int] = None,
                              result_output_file: Optional[str] = None,
                              search_word: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicConfigSummaryResult:
    """
    Use this data source to query detailed information of tsf public_config_summary


    :param Sequence[str] config_id_lists: Config Id List.
    :param Sequence[str] config_tag_lists: config tag list.
    :param bool disable_program_auth_check: Whether to disable dataset authentication.
    :param str order_by: Sort by time: creation_time; Sort by name: config_name.
    :param int order_type: Pass 0 for ascending order and 1 for descending order.
    :param str result_output_file: Used to save results.
    :param str search_word: Query keyword for fuzzy search: configuration item name. If not passed in, the full set will be queried.
    """
    __args__ = dict()
    __args__['configIdLists'] = config_id_lists
    __args__['configTagLists'] = config_tag_lists
    __args__['disableProgramAuthCheck'] = disable_program_auth_check
    __args__['orderBy'] = order_by
    __args__['orderType'] = order_type
    __args__['resultOutputFile'] = result_output_file
    __args__['searchWord'] = search_word
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tsf/getPublicConfigSummary:getPublicConfigSummary', __args__, opts=opts, typ=GetPublicConfigSummaryResult).value

    return AwaitableGetPublicConfigSummaryResult(
        config_id_lists=pulumi.get(__ret__, 'config_id_lists'),
        config_tag_lists=pulumi.get(__ret__, 'config_tag_lists'),
        disable_program_auth_check=pulumi.get(__ret__, 'disable_program_auth_check'),
        id=pulumi.get(__ret__, 'id'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_type=pulumi.get(__ret__, 'order_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        search_word=pulumi.get(__ret__, 'search_word'))


@_utilities.lift_output_func(get_public_config_summary)
def get_public_config_summary_output(config_id_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     config_tag_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     disable_program_auth_check: Optional[pulumi.Input[Optional[bool]]] = None,
                                     order_by: Optional[pulumi.Input[Optional[str]]] = None,
                                     order_type: Optional[pulumi.Input[Optional[int]]] = None,
                                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                     search_word: Optional[pulumi.Input[Optional[str]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPublicConfigSummaryResult]:
    """
    Use this data source to query detailed information of tsf public_config_summary


    :param Sequence[str] config_id_lists: Config Id List.
    :param Sequence[str] config_tag_lists: config tag list.
    :param bool disable_program_auth_check: Whether to disable dataset authentication.
    :param str order_by: Sort by time: creation_time; Sort by name: config_name.
    :param int order_type: Pass 0 for ascending order and 1 for descending order.
    :param str result_output_file: Used to save results.
    :param str search_word: Query keyword for fuzzy search: configuration item name. If not passed in, the full set will be queried.
    """
    ...
