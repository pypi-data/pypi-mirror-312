# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationArgs', 'Application']

@pulumi.input_type
class ApplicationArgs:
    def __init__(__self__, *,
                 application_name: pulumi.Input[str],
                 application_type: pulumi.Input[str],
                 microservice_type: pulumi.Input[str],
                 application_desc: Optional[pulumi.Input[str]] = None,
                 application_log_config: Optional[pulumi.Input[str]] = None,
                 application_resource_type: Optional[pulumi.Input[str]] = None,
                 application_runtime_type: Optional[pulumi.Input[str]] = None,
                 ignore_create_image_repository: Optional[pulumi.Input[bool]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_config_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]]] = None):
        """
        The set of arguments for constructing a Application resource.
        :param pulumi.Input[str] application_name: Application name.
        :param pulumi.Input[str] application_type: Application type: V for virtual machine, C for container, S for serverless.
        :param pulumi.Input[str] microservice_type: Application microservice type: M for service mesh, N for normal application, G for gateway application.
        :param pulumi.Input[str] application_desc: Application description.
        :param pulumi.Input[str] application_log_config: Application log configuration, deprecated parameter.
        :param pulumi.Input[str] application_resource_type: Application resource type, deprecated parameter.
        :param pulumi.Input[str] application_runtime_type: Application runtime type.
        :param pulumi.Input[bool] ignore_create_image_repository: Ignore creating image repository.
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: N/A.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]] service_config_lists: List of service configuration information.
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "application_type", application_type)
        pulumi.set(__self__, "microservice_type", microservice_type)
        if application_desc is not None:
            pulumi.set(__self__, "application_desc", application_desc)
        if application_log_config is not None:
            pulumi.set(__self__, "application_log_config", application_log_config)
        if application_resource_type is not None:
            pulumi.set(__self__, "application_resource_type", application_resource_type)
        if application_runtime_type is not None:
            pulumi.set(__self__, "application_runtime_type", application_runtime_type)
        if ignore_create_image_repository is not None:
            pulumi.set(__self__, "ignore_create_image_repository", ignore_create_image_repository)
        if program_id is not None:
            pulumi.set(__self__, "program_id", program_id)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if service_config_lists is not None:
            pulumi.set(__self__, "service_config_lists", service_config_lists)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Input[str]:
        """
        Application name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> pulumi.Input[str]:
        """
        Application type: V for virtual machine, C for container, S for serverless.
        """
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_type", value)

    @property
    @pulumi.getter(name="microserviceType")
    def microservice_type(self) -> pulumi.Input[str]:
        """
        Application microservice type: M for service mesh, N for normal application, G for gateway application.
        """
        return pulumi.get(self, "microservice_type")

    @microservice_type.setter
    def microservice_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "microservice_type", value)

    @property
    @pulumi.getter(name="applicationDesc")
    def application_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Application description.
        """
        return pulumi.get(self, "application_desc")

    @application_desc.setter
    def application_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_desc", value)

    @property
    @pulumi.getter(name="applicationLogConfig")
    def application_log_config(self) -> Optional[pulumi.Input[str]]:
        """
        Application log configuration, deprecated parameter.
        """
        return pulumi.get(self, "application_log_config")

    @application_log_config.setter
    def application_log_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_log_config", value)

    @property
    @pulumi.getter(name="applicationResourceType")
    def application_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application resource type, deprecated parameter.
        """
        return pulumi.get(self, "application_resource_type")

    @application_resource_type.setter
    def application_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_resource_type", value)

    @property
    @pulumi.getter(name="applicationRuntimeType")
    def application_runtime_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application runtime type.
        """
        return pulumi.get(self, "application_runtime_type")

    @application_runtime_type.setter
    def application_runtime_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_runtime_type", value)

    @property
    @pulumi.getter(name="ignoreCreateImageRepository")
    def ignore_create_image_repository(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore creating image repository.
        """
        return pulumi.get(self, "ignore_create_image_repository")

    @ignore_create_image_repository.setter
    def ignore_create_image_repository(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_create_image_repository", value)

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the dataset to be bound.
        """
        return pulumi.get(self, "program_id")

    @program_id.setter
    def program_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_id", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        N/A.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="serviceConfigLists")
    def service_config_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]]]:
        """
        List of service configuration information.
        """
        return pulumi.get(self, "service_config_lists")

    @service_config_lists.setter
    def service_config_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]]]):
        pulumi.set(self, "service_config_lists", value)


@pulumi.input_type
class _ApplicationState:
    def __init__(__self__, *,
                 application_desc: Optional[pulumi.Input[str]] = None,
                 application_log_config: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_resource_type: Optional[pulumi.Input[str]] = None,
                 application_runtime_type: Optional[pulumi.Input[str]] = None,
                 application_type: Optional[pulumi.Input[str]] = None,
                 ignore_create_image_repository: Optional[pulumi.Input[bool]] = None,
                 microservice_type: Optional[pulumi.Input[str]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_config_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]]] = None):
        """
        Input properties used for looking up and filtering Application resources.
        :param pulumi.Input[str] application_desc: Application description.
        :param pulumi.Input[str] application_log_config: Application log configuration, deprecated parameter.
        :param pulumi.Input[str] application_name: Application name.
        :param pulumi.Input[str] application_resource_type: Application resource type, deprecated parameter.
        :param pulumi.Input[str] application_runtime_type: Application runtime type.
        :param pulumi.Input[str] application_type: Application type: V for virtual machine, C for container, S for serverless.
        :param pulumi.Input[bool] ignore_create_image_repository: Ignore creating image repository.
        :param pulumi.Input[str] microservice_type: Application microservice type: M for service mesh, N for normal application, G for gateway application.
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: N/A.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]] service_config_lists: List of service configuration information.
        """
        if application_desc is not None:
            pulumi.set(__self__, "application_desc", application_desc)
        if application_log_config is not None:
            pulumi.set(__self__, "application_log_config", application_log_config)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_resource_type is not None:
            pulumi.set(__self__, "application_resource_type", application_resource_type)
        if application_runtime_type is not None:
            pulumi.set(__self__, "application_runtime_type", application_runtime_type)
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if ignore_create_image_repository is not None:
            pulumi.set(__self__, "ignore_create_image_repository", ignore_create_image_repository)
        if microservice_type is not None:
            pulumi.set(__self__, "microservice_type", microservice_type)
        if program_id is not None:
            pulumi.set(__self__, "program_id", program_id)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if service_config_lists is not None:
            pulumi.set(__self__, "service_config_lists", service_config_lists)

    @property
    @pulumi.getter(name="applicationDesc")
    def application_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Application description.
        """
        return pulumi.get(self, "application_desc")

    @application_desc.setter
    def application_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_desc", value)

    @property
    @pulumi.getter(name="applicationLogConfig")
    def application_log_config(self) -> Optional[pulumi.Input[str]]:
        """
        Application log configuration, deprecated parameter.
        """
        return pulumi.get(self, "application_log_config")

    @application_log_config.setter
    def application_log_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_log_config", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Application name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="applicationResourceType")
    def application_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application resource type, deprecated parameter.
        """
        return pulumi.get(self, "application_resource_type")

    @application_resource_type.setter
    def application_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_resource_type", value)

    @property
    @pulumi.getter(name="applicationRuntimeType")
    def application_runtime_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application runtime type.
        """
        return pulumi.get(self, "application_runtime_type")

    @application_runtime_type.setter
    def application_runtime_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_runtime_type", value)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application type: V for virtual machine, C for container, S for serverless.
        """
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_type", value)

    @property
    @pulumi.getter(name="ignoreCreateImageRepository")
    def ignore_create_image_repository(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore creating image repository.
        """
        return pulumi.get(self, "ignore_create_image_repository")

    @ignore_create_image_repository.setter
    def ignore_create_image_repository(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_create_image_repository", value)

    @property
    @pulumi.getter(name="microserviceType")
    def microservice_type(self) -> Optional[pulumi.Input[str]]:
        """
        Application microservice type: M for service mesh, N for normal application, G for gateway application.
        """
        return pulumi.get(self, "microservice_type")

    @microservice_type.setter
    def microservice_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microservice_type", value)

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the dataset to be bound.
        """
        return pulumi.get(self, "program_id")

    @program_id.setter
    def program_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_id", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        N/A.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="serviceConfigLists")
    def service_config_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]]]:
        """
        List of service configuration information.
        """
        return pulumi.get(self, "service_config_lists")

    @service_config_lists.setter
    def service_config_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceConfigListArgs']]]]):
        pulumi.set(self, "service_config_lists", value)


class Application(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_desc: Optional[pulumi.Input[str]] = None,
                 application_log_config: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_resource_type: Optional[pulumi.Input[str]] = None,
                 application_runtime_type: Optional[pulumi.Input[str]] = None,
                 application_type: Optional[pulumi.Input[str]] = None,
                 ignore_create_image_repository: Optional[pulumi.Input[bool]] = None,
                 microservice_type: Optional[pulumi.Input[str]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_config_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationServiceConfigListArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf application

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application = tencentcloud.tsf.Application("application",
            application_desc="This is my application",
            application_name="my-app",
            application_runtime_type="Java",
            application_type="C",
            ignore_create_image_repository=True,
            microservice_type="M",
            service_config_lists=[tencentcloud.tsf.ApplicationServiceConfigListArgs(
                health_check=tencentcloud.tsf.ApplicationServiceConfigListHealthCheckArgs(
                    path="/health",
                ),
                name="my-service",
                ports=[tencentcloud.tsf.ApplicationServiceConfigListPortArgs(
                    protocol="HTTP",
                    target_port=8080,
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_desc: Application description.
        :param pulumi.Input[str] application_log_config: Application log configuration, deprecated parameter.
        :param pulumi.Input[str] application_name: Application name.
        :param pulumi.Input[str] application_resource_type: Application resource type, deprecated parameter.
        :param pulumi.Input[str] application_runtime_type: Application runtime type.
        :param pulumi.Input[str] application_type: Application type: V for virtual machine, C for container, S for serverless.
        :param pulumi.Input[bool] ignore_create_image_repository: Ignore creating image repository.
        :param pulumi.Input[str] microservice_type: Application microservice type: M for service mesh, N for normal application, G for gateway application.
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: N/A.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationServiceConfigListArgs']]]] service_config_lists: List of service configuration information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf application

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application = tencentcloud.tsf.Application("application",
            application_desc="This is my application",
            application_name="my-app",
            application_runtime_type="Java",
            application_type="C",
            ignore_create_image_repository=True,
            microservice_type="M",
            service_config_lists=[tencentcloud.tsf.ApplicationServiceConfigListArgs(
                health_check=tencentcloud.tsf.ApplicationServiceConfigListHealthCheckArgs(
                    path="/health",
                ),
                name="my-service",
                ports=[tencentcloud.tsf.ApplicationServiceConfigListPortArgs(
                    protocol="HTTP",
                    target_port=8080,
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_desc: Optional[pulumi.Input[str]] = None,
                 application_log_config: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_resource_type: Optional[pulumi.Input[str]] = None,
                 application_runtime_type: Optional[pulumi.Input[str]] = None,
                 application_type: Optional[pulumi.Input[str]] = None,
                 ignore_create_image_repository: Optional[pulumi.Input[bool]] = None,
                 microservice_type: Optional[pulumi.Input[str]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_config_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationServiceConfigListArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationArgs.__new__(ApplicationArgs)

            __props__.__dict__["application_desc"] = application_desc
            __props__.__dict__["application_log_config"] = application_log_config
            if application_name is None and not opts.urn:
                raise TypeError("Missing required property 'application_name'")
            __props__.__dict__["application_name"] = application_name
            __props__.__dict__["application_resource_type"] = application_resource_type
            __props__.__dict__["application_runtime_type"] = application_runtime_type
            if application_type is None and not opts.urn:
                raise TypeError("Missing required property 'application_type'")
            __props__.__dict__["application_type"] = application_type
            __props__.__dict__["ignore_create_image_repository"] = ignore_create_image_repository
            if microservice_type is None and not opts.urn:
                raise TypeError("Missing required property 'microservice_type'")
            __props__.__dict__["microservice_type"] = microservice_type
            __props__.__dict__["program_id"] = program_id
            __props__.__dict__["program_id_lists"] = program_id_lists
            __props__.__dict__["service_config_lists"] = service_config_lists
        super(Application, __self__).__init__(
            'tencentcloud:Tsf/application:Application',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_desc: Optional[pulumi.Input[str]] = None,
            application_log_config: Optional[pulumi.Input[str]] = None,
            application_name: Optional[pulumi.Input[str]] = None,
            application_resource_type: Optional[pulumi.Input[str]] = None,
            application_runtime_type: Optional[pulumi.Input[str]] = None,
            application_type: Optional[pulumi.Input[str]] = None,
            ignore_create_image_repository: Optional[pulumi.Input[bool]] = None,
            microservice_type: Optional[pulumi.Input[str]] = None,
            program_id: Optional[pulumi.Input[str]] = None,
            program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_config_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationServiceConfigListArgs']]]]] = None) -> 'Application':
        """
        Get an existing Application resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_desc: Application description.
        :param pulumi.Input[str] application_log_config: Application log configuration, deprecated parameter.
        :param pulumi.Input[str] application_name: Application name.
        :param pulumi.Input[str] application_resource_type: Application resource type, deprecated parameter.
        :param pulumi.Input[str] application_runtime_type: Application runtime type.
        :param pulumi.Input[str] application_type: Application type: V for virtual machine, C for container, S for serverless.
        :param pulumi.Input[bool] ignore_create_image_repository: Ignore creating image repository.
        :param pulumi.Input[str] microservice_type: Application microservice type: M for service mesh, N for normal application, G for gateway application.
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: N/A.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApplicationServiceConfigListArgs']]]] service_config_lists: List of service configuration information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationState.__new__(_ApplicationState)

        __props__.__dict__["application_desc"] = application_desc
        __props__.__dict__["application_log_config"] = application_log_config
        __props__.__dict__["application_name"] = application_name
        __props__.__dict__["application_resource_type"] = application_resource_type
        __props__.__dict__["application_runtime_type"] = application_runtime_type
        __props__.__dict__["application_type"] = application_type
        __props__.__dict__["ignore_create_image_repository"] = ignore_create_image_repository
        __props__.__dict__["microservice_type"] = microservice_type
        __props__.__dict__["program_id"] = program_id
        __props__.__dict__["program_id_lists"] = program_id_lists
        __props__.__dict__["service_config_lists"] = service_config_lists
        return Application(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationDesc")
    def application_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Application description.
        """
        return pulumi.get(self, "application_desc")

    @property
    @pulumi.getter(name="applicationLogConfig")
    def application_log_config(self) -> pulumi.Output[Optional[str]]:
        """
        Application log configuration, deprecated parameter.
        """
        return pulumi.get(self, "application_log_config")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Output[str]:
        """
        Application name.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationResourceType")
    def application_resource_type(self) -> pulumi.Output[Optional[str]]:
        """
        Application resource type, deprecated parameter.
        """
        return pulumi.get(self, "application_resource_type")

    @property
    @pulumi.getter(name="applicationRuntimeType")
    def application_runtime_type(self) -> pulumi.Output[Optional[str]]:
        """
        Application runtime type.
        """
        return pulumi.get(self, "application_runtime_type")

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> pulumi.Output[str]:
        """
        Application type: V for virtual machine, C for container, S for serverless.
        """
        return pulumi.get(self, "application_type")

    @property
    @pulumi.getter(name="ignoreCreateImageRepository")
    def ignore_create_image_repository(self) -> pulumi.Output[Optional[bool]]:
        """
        Ignore creating image repository.
        """
        return pulumi.get(self, "ignore_create_image_repository")

    @property
    @pulumi.getter(name="microserviceType")
    def microservice_type(self) -> pulumi.Output[str]:
        """
        Application microservice type: M for service mesh, N for normal application, G for gateway application.
        """
        return pulumi.get(self, "microservice_type")

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the dataset to be bound.
        """
        return pulumi.get(self, "program_id")

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        N/A.
        """
        return pulumi.get(self, "program_id_lists")

    @property
    @pulumi.getter(name="serviceConfigLists")
    def service_config_lists(self) -> pulumi.Output[Optional[Sequence['outputs.ApplicationServiceConfigList']]]:
        """
        List of service configuration information.
        """
        return pulumi.get(self, "service_config_lists")

