# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['NamespaceArgs', 'Namespace']

@pulumi.input_type
class NamespaceArgs:
    def __init__(__self__, *,
                 namespace_name: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 is_ha_enable: Optional[pulumi.Input[str]] = None,
                 namespace_desc: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 namespace_resource_type: Optional[pulumi.Input[str]] = None,
                 namespace_type: Optional[pulumi.Input[str]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Namespace resource.
        :param pulumi.Input[str] namespace_name: namespace name.
        :param pulumi.Input[str] cluster_id: cluster ID.
        :param pulumi.Input[str] is_ha_enable: whether to enable high availability.
        :param pulumi.Input[str] namespace_desc: namespace description.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[str] namespace_resource_type: namespace resource type (default is DEF).
        :param pulumi.Input[str] namespace_type: Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        """
        pulumi.set(__self__, "namespace_name", namespace_name)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if is_ha_enable is not None:
            pulumi.set(__self__, "is_ha_enable", is_ha_enable)
        if namespace_desc is not None:
            pulumi.set(__self__, "namespace_desc", namespace_desc)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_resource_type is not None:
            pulumi.set(__self__, "namespace_resource_type", namespace_resource_type)
        if namespace_type is not None:
            pulumi.set(__self__, "namespace_type", namespace_type)
        if program_id is not None:
            pulumi.set(__self__, "program_id", program_id)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Input[str]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="isHaEnable")
    def is_ha_enable(self) -> Optional[pulumi.Input[str]]:
        """
        whether to enable high availability.
        """
        return pulumi.get(self, "is_ha_enable")

    @is_ha_enable.setter
    def is_ha_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_ha_enable", value)

    @property
    @pulumi.getter(name="namespaceDesc")
    def namespace_desc(self) -> Optional[pulumi.Input[str]]:
        """
        namespace description.
        """
        return pulumi.get(self, "namespace_desc")

    @namespace_desc.setter
    def namespace_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_desc", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="namespaceResourceType")
    def namespace_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        namespace resource type (default is DEF).
        """
        return pulumi.get(self, "namespace_resource_type")

    @namespace_resource_type.setter
    def namespace_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_resource_type", value)

    @property
    @pulumi.getter(name="namespaceType")
    def namespace_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        """
        return pulumi.get(self, "namespace_type")

    @namespace_type.setter
    def namespace_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_type", value)

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the dataset to be bound.
        """
        return pulumi.get(self, "program_id")

    @program_id.setter
    def program_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_id", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)


@pulumi.input_type
class _NamespaceState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 delete_flag: Optional[pulumi.Input[bool]] = None,
                 is_default: Optional[pulumi.Input[str]] = None,
                 is_ha_enable: Optional[pulumi.Input[str]] = None,
                 kube_inject_enable: Optional[pulumi.Input[bool]] = None,
                 namespace_code: Optional[pulumi.Input[str]] = None,
                 namespace_desc: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 namespace_resource_type: Optional[pulumi.Input[str]] = None,
                 namespace_status: Optional[pulumi.Input[str]] = None,
                 namespace_type: Optional[pulumi.Input[str]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Namespace resources.
        :param pulumi.Input[str] cluster_id: cluster ID.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[bool] delete_flag: Delete ID.
        :param pulumi.Input[str] is_default: default namespace.
        :param pulumi.Input[str] is_ha_enable: whether to enable high availability.
        :param pulumi.Input[bool] kube_inject_enable: KubeInjectEnable value.
        :param pulumi.Input[str] namespace_code: Namespace encoding.
        :param pulumi.Input[str] namespace_desc: namespace description.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[str] namespace_name: namespace name.
        :param pulumi.Input[str] namespace_resource_type: namespace resource type (default is DEF).
        :param pulumi.Input[str] namespace_status: namespace status.
        :param pulumi.Input[str] namespace_type: Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] update_time: update time.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if delete_flag is not None:
            pulumi.set(__self__, "delete_flag", delete_flag)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if is_ha_enable is not None:
            pulumi.set(__self__, "is_ha_enable", is_ha_enable)
        if kube_inject_enable is not None:
            pulumi.set(__self__, "kube_inject_enable", kube_inject_enable)
        if namespace_code is not None:
            pulumi.set(__self__, "namespace_code", namespace_code)
        if namespace_desc is not None:
            pulumi.set(__self__, "namespace_desc", namespace_desc)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if namespace_resource_type is not None:
            pulumi.set(__self__, "namespace_resource_type", namespace_resource_type)
        if namespace_status is not None:
            pulumi.set(__self__, "namespace_status", namespace_status)
        if namespace_type is not None:
            pulumi.set(__self__, "namespace_type", namespace_type)
        if program_id is not None:
            pulumi.set(__self__, "program_id", program_id)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete ID.
        """
        return pulumi.get(self, "delete_flag")

    @delete_flag.setter
    def delete_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_flag", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[str]]:
        """
        default namespace.
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="isHaEnable")
    def is_ha_enable(self) -> Optional[pulumi.Input[str]]:
        """
        whether to enable high availability.
        """
        return pulumi.get(self, "is_ha_enable")

    @is_ha_enable.setter
    def is_ha_enable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_ha_enable", value)

    @property
    @pulumi.getter(name="kubeInjectEnable")
    def kube_inject_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        KubeInjectEnable value.
        """
        return pulumi.get(self, "kube_inject_enable")

    @kube_inject_enable.setter
    def kube_inject_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kube_inject_enable", value)

    @property
    @pulumi.getter(name="namespaceCode")
    def namespace_code(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace encoding.
        """
        return pulumi.get(self, "namespace_code")

    @namespace_code.setter
    def namespace_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_code", value)

    @property
    @pulumi.getter(name="namespaceDesc")
    def namespace_desc(self) -> Optional[pulumi.Input[str]]:
        """
        namespace description.
        """
        return pulumi.get(self, "namespace_desc")

    @namespace_desc.setter
    def namespace_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_desc", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[str]]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="namespaceResourceType")
    def namespace_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        namespace resource type (default is DEF).
        """
        return pulumi.get(self, "namespace_resource_type")

    @namespace_resource_type.setter
    def namespace_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_resource_type", value)

    @property
    @pulumi.getter(name="namespaceStatus")
    def namespace_status(self) -> Optional[pulumi.Input[str]]:
        """
        namespace status.
        """
        return pulumi.get(self, "namespace_status")

    @namespace_status.setter
    def namespace_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_status", value)

    @property
    @pulumi.getter(name="namespaceType")
    def namespace_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        """
        return pulumi.get(self, "namespace_type")

    @namespace_type.setter
    def namespace_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_type", value)

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the dataset to be bound.
        """
        return pulumi.get(self, "program_id")

    @program_id.setter
    def program_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_id", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class Namespace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 is_ha_enable: Optional[pulumi.Input[str]] = None,
                 namespace_desc: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 namespace_resource_type: Optional[pulumi.Input[str]] = None,
                 namespace_type: Optional[pulumi.Input[str]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf namespace

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        namespace = tencentcloud.tsf.Namespace("namespace",
            is_ha_enable="0",
            namespace_desc="namespace desc",
            namespace_name="namespace-name",
            namespace_type="DEF")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: cluster ID.
        :param pulumi.Input[str] is_ha_enable: whether to enable high availability.
        :param pulumi.Input[str] namespace_desc: namespace description.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[str] namespace_name: namespace name.
        :param pulumi.Input[str] namespace_resource_type: namespace resource type (default is DEF).
        :param pulumi.Input[str] namespace_type: Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf namespace

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        namespace = tencentcloud.tsf.Namespace("namespace",
            is_ha_enable="0",
            namespace_desc="namespace desc",
            namespace_name="namespace-name",
            namespace_type="DEF")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param NamespaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 is_ha_enable: Optional[pulumi.Input[str]] = None,
                 namespace_desc: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 namespace_resource_type: Optional[pulumi.Input[str]] = None,
                 namespace_type: Optional[pulumi.Input[str]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceArgs.__new__(NamespaceArgs)

            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["is_ha_enable"] = is_ha_enable
            __props__.__dict__["namespace_desc"] = namespace_desc
            __props__.__dict__["namespace_id"] = namespace_id
            if namespace_name is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_name'")
            __props__.__dict__["namespace_name"] = namespace_name
            __props__.__dict__["namespace_resource_type"] = namespace_resource_type
            __props__.__dict__["namespace_type"] = namespace_type
            __props__.__dict__["program_id"] = program_id
            __props__.__dict__["program_id_lists"] = program_id_lists
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_flag"] = None
            __props__.__dict__["is_default"] = None
            __props__.__dict__["kube_inject_enable"] = None
            __props__.__dict__["namespace_code"] = None
            __props__.__dict__["namespace_status"] = None
            __props__.__dict__["update_time"] = None
        super(Namespace, __self__).__init__(
            'tencentcloud:Tsf/namespace:Namespace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            delete_flag: Optional[pulumi.Input[bool]] = None,
            is_default: Optional[pulumi.Input[str]] = None,
            is_ha_enable: Optional[pulumi.Input[str]] = None,
            kube_inject_enable: Optional[pulumi.Input[bool]] = None,
            namespace_code: Optional[pulumi.Input[str]] = None,
            namespace_desc: Optional[pulumi.Input[str]] = None,
            namespace_id: Optional[pulumi.Input[str]] = None,
            namespace_name: Optional[pulumi.Input[str]] = None,
            namespace_resource_type: Optional[pulumi.Input[str]] = None,
            namespace_status: Optional[pulumi.Input[str]] = None,
            namespace_type: Optional[pulumi.Input[str]] = None,
            program_id: Optional[pulumi.Input[str]] = None,
            program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'Namespace':
        """
        Get an existing Namespace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: cluster ID.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[bool] delete_flag: Delete ID.
        :param pulumi.Input[str] is_default: default namespace.
        :param pulumi.Input[str] is_ha_enable: whether to enable high availability.
        :param pulumi.Input[bool] kube_inject_enable: KubeInjectEnable value.
        :param pulumi.Input[str] namespace_code: Namespace encoding.
        :param pulumi.Input[str] namespace_desc: namespace description.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[str] namespace_name: namespace name.
        :param pulumi.Input[str] namespace_resource_type: namespace resource type (default is DEF).
        :param pulumi.Input[str] namespace_status: namespace status.
        :param pulumi.Input[str] namespace_type: Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        :param pulumi.Input[str] program_id: ID of the dataset to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] update_time: update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceState.__new__(_NamespaceState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["delete_flag"] = delete_flag
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["is_ha_enable"] = is_ha_enable
        __props__.__dict__["kube_inject_enable"] = kube_inject_enable
        __props__.__dict__["namespace_code"] = namespace_code
        __props__.__dict__["namespace_desc"] = namespace_desc
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["namespace_name"] = namespace_name
        __props__.__dict__["namespace_resource_type"] = namespace_resource_type
        __props__.__dict__["namespace_status"] = namespace_status
        __props__.__dict__["namespace_type"] = namespace_type
        __props__.__dict__["program_id"] = program_id
        __props__.__dict__["program_id_lists"] = program_id_lists
        __props__.__dict__["update_time"] = update_time
        return Namespace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> pulumi.Output[bool]:
        """
        Delete ID.
        """
        return pulumi.get(self, "delete_flag")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[str]:
        """
        default namespace.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isHaEnable")
    def is_ha_enable(self) -> pulumi.Output[str]:
        """
        whether to enable high availability.
        """
        return pulumi.get(self, "is_ha_enable")

    @property
    @pulumi.getter(name="kubeInjectEnable")
    def kube_inject_enable(self) -> pulumi.Output[bool]:
        """
        KubeInjectEnable value.
        """
        return pulumi.get(self, "kube_inject_enable")

    @property
    @pulumi.getter(name="namespaceCode")
    def namespace_code(self) -> pulumi.Output[str]:
        """
        Namespace encoding.
        """
        return pulumi.get(self, "namespace_code")

    @property
    @pulumi.getter(name="namespaceDesc")
    def namespace_desc(self) -> pulumi.Output[str]:
        """
        namespace description.
        """
        return pulumi.get(self, "namespace_desc")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[str]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Output[str]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="namespaceResourceType")
    def namespace_resource_type(self) -> pulumi.Output[str]:
        """
        namespace resource type (default is DEF).
        """
        return pulumi.get(self, "namespace_resource_type")

    @property
    @pulumi.getter(name="namespaceStatus")
    def namespace_status(self) -> pulumi.Output[str]:
        """
        namespace status.
        """
        return pulumi.get(self, "namespace_status")

    @property
    @pulumi.getter(name="namespaceType")
    def namespace_type(self) -> pulumi.Output[str]:
        """
        Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
        """
        return pulumi.get(self, "namespace_type")

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the dataset to be bound.
        """
        return pulumi.get(self, "program_id")

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

