# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UnitRuleArgs', 'UnitRule']

@pulumi.input_type
class UnitRuleArgs:
    def __init__(__self__, *,
                 gateway_instance_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unit_rule_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]]] = None):
        """
        The set of arguments for constructing a UnitRule resource.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[str] name: rule name.
        :param pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]] unit_rule_item_lists: list of rule items.
        """
        pulumi.set(__self__, "gateway_instance_id", gateway_instance_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if unit_rule_item_lists is not None:
            pulumi.set(__self__, "unit_rule_item_lists", unit_rule_item_lists)

    @property
    @pulumi.getter(name="gatewayInstanceId")
    def gateway_instance_id(self) -> pulumi.Input[str]:
        """
        gateway entity ID.
        """
        return pulumi.get(self, "gateway_instance_id")

    @gateway_instance_id.setter
    def gateway_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_instance_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="unitRuleItemLists")
    def unit_rule_item_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]]]:
        """
        list of rule items.
        """
        return pulumi.get(self, "unit_rule_item_lists")

    @unit_rule_item_lists.setter
    def unit_rule_item_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]]]):
        pulumi.set(self, "unit_rule_item_lists", value)


@pulumi.input_type
class _UnitRuleState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 unit_rule_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]]] = None):
        """
        Input properties used for looking up and filtering UnitRule resources.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] name: rule name.
        :param pulumi.Input[str] rule_id: rule item ID.
        :param pulumi.Input[str] status: usage status: enabled/disabled.
        :param pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]] unit_rule_item_lists: list of rule items.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_instance_id is not None:
            pulumi.set(__self__, "gateway_instance_id", gateway_instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if unit_rule_item_lists is not None:
            pulumi.set(__self__, "unit_rule_item_lists", unit_rule_item_lists)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewayInstanceId")
    def gateway_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway entity ID.
        """
        return pulumi.get(self, "gateway_instance_id")

    @gateway_instance_id.setter
    def gateway_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_instance_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        rule item ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        usage status: enabled/disabled.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="unitRuleItemLists")
    def unit_rule_item_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]]]:
        """
        list of rule items.
        """
        return pulumi.get(self, "unit_rule_item_lists")

    @unit_rule_item_lists.setter
    def unit_rule_item_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UnitRuleUnitRuleItemListArgs']]]]):
        pulumi.set(self, "unit_rule_item_lists", value)


class UnitRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unit_rule_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UnitRuleUnitRuleItemListArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf unit_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        unit_rule = tencentcloud.tsf.UnitRule("unitRule",
            description="terraform-desc",
            gateway_instance_id="gw-ins-rug79a70",
            unit_rule_item_lists=[tencentcloud.tsf.UnitRuleUnitRuleItemListArgs(
                description="rule1-desc",
                dest_namespace_id="namespace-y8p88eka",
                dest_namespace_name="garden-test_default",
                name="Rule1",
                relationship="AND",
                unit_rule_tag_lists=[tencentcloud.tsf.UnitRuleUnitRuleItemListUnitRuleTagListArgs(
                    tag_field="aaa",
                    tag_operator="IN",
                    tag_type="U",
                    tag_value="1",
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf unit_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/unitRule:UnitRule unit_rule unit-rl-zbywqeca
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] name: rule name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UnitRuleUnitRuleItemListArgs']]]] unit_rule_item_lists: list of rule items.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UnitRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf unit_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        unit_rule = tencentcloud.tsf.UnitRule("unitRule",
            description="terraform-desc",
            gateway_instance_id="gw-ins-rug79a70",
            unit_rule_item_lists=[tencentcloud.tsf.UnitRuleUnitRuleItemListArgs(
                description="rule1-desc",
                dest_namespace_id="namespace-y8p88eka",
                dest_namespace_name="garden-test_default",
                name="Rule1",
                relationship="AND",
                unit_rule_tag_lists=[tencentcloud.tsf.UnitRuleUnitRuleItemListUnitRuleTagListArgs(
                    tag_field="aaa",
                    tag_operator="IN",
                    tag_type="U",
                    tag_value="1",
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf unit_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/unitRule:UnitRule unit_rule unit-rl-zbywqeca
        ```

        :param str resource_name: The name of the resource.
        :param UnitRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UnitRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_instance_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 unit_rule_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UnitRuleUnitRuleItemListArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UnitRuleArgs.__new__(UnitRuleArgs)

            __props__.__dict__["description"] = description
            if gateway_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_instance_id'")
            __props__.__dict__["gateway_instance_id"] = gateway_instance_id
            __props__.__dict__["name"] = name
            __props__.__dict__["unit_rule_item_lists"] = unit_rule_item_lists
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["status"] = None
        super(UnitRule, __self__).__init__(
            'tencentcloud:Tsf/unitRule:UnitRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            gateway_instance_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            unit_rule_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UnitRuleUnitRuleItemListArgs']]]]] = None) -> 'UnitRule':
        """
        Get an existing UnitRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: rule description.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] name: rule name.
        :param pulumi.Input[str] rule_id: rule item ID.
        :param pulumi.Input[str] status: usage status: enabled/disabled.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UnitRuleUnitRuleItemListArgs']]]] unit_rule_item_lists: list of rule items.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UnitRuleState.__new__(_UnitRuleState)

        __props__.__dict__["description"] = description
        __props__.__dict__["gateway_instance_id"] = gateway_instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["status"] = status
        __props__.__dict__["unit_rule_item_lists"] = unit_rule_item_lists
        return UnitRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        rule description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayInstanceId")
    def gateway_instance_id(self) -> pulumi.Output[str]:
        """
        gateway entity ID.
        """
        return pulumi.get(self, "gateway_instance_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        rule item ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        usage status: enabled/disabled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="unitRuleItemLists")
    def unit_rule_item_lists(self) -> pulumi.Output[Optional[Sequence['outputs.UnitRuleUnitRuleItemList']]]:
        """
        list of rule items.
        """
        return pulumi.get(self, "unit_rule_item_lists")

