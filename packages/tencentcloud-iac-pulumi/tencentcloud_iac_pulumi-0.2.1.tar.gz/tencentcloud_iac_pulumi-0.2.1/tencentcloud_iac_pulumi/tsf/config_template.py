# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ConfigTemplateArgs', 'ConfigTemplate']

@pulumi.input_type
class ConfigTemplateArgs:
    def __init__(__self__, *,
                 config_template_name: pulumi.Input[str],
                 config_template_type: pulumi.Input[str],
                 config_template_value: pulumi.Input[str],
                 config_template_desc: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ConfigTemplate resource.
        :param pulumi.Input[str] config_template_name: Configuration template name.
        :param pulumi.Input[str] config_template_type: Configure the microservice framework corresponding to the template.
        :param pulumi.Input[str] config_template_value: Configure template data.
        :param pulumi.Input[str] config_template_desc: Configuration template description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        """
        pulumi.set(__self__, "config_template_name", config_template_name)
        pulumi.set(__self__, "config_template_type", config_template_type)
        pulumi.set(__self__, "config_template_value", config_template_value)
        if config_template_desc is not None:
            pulumi.set(__self__, "config_template_desc", config_template_desc)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)

    @property
    @pulumi.getter(name="configTemplateName")
    def config_template_name(self) -> pulumi.Input[str]:
        """
        Configuration template name.
        """
        return pulumi.get(self, "config_template_name")

    @config_template_name.setter
    def config_template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_template_name", value)

    @property
    @pulumi.getter(name="configTemplateType")
    def config_template_type(self) -> pulumi.Input[str]:
        """
        Configure the microservice framework corresponding to the template.
        """
        return pulumi.get(self, "config_template_type")

    @config_template_type.setter
    def config_template_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_template_type", value)

    @property
    @pulumi.getter(name="configTemplateValue")
    def config_template_value(self) -> pulumi.Input[str]:
        """
        Configure template data.
        """
        return pulumi.get(self, "config_template_value")

    @config_template_value.setter
    def config_template_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_template_value", value)

    @property
    @pulumi.getter(name="configTemplateDesc")
    def config_template_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration template description.
        """
        return pulumi.get(self, "config_template_desc")

    @config_template_desc.setter
    def config_template_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_template_desc", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)


@pulumi.input_type
class _ConfigTemplateState:
    def __init__(__self__, *,
                 config_template_desc: Optional[pulumi.Input[str]] = None,
                 config_template_id: Optional[pulumi.Input[str]] = None,
                 config_template_name: Optional[pulumi.Input[str]] = None,
                 config_template_type: Optional[pulumi.Input[str]] = None,
                 config_template_value: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConfigTemplate resources.
        :param pulumi.Input[str] config_template_desc: Configuration template description.
        :param pulumi.Input[str] config_template_id: Template Id.
        :param pulumi.Input[str] config_template_name: Configuration template name.
        :param pulumi.Input[str] config_template_type: Configure the microservice framework corresponding to the template.
        :param pulumi.Input[str] config_template_value: Configure template data.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] update_time: update time.
        """
        if config_template_desc is not None:
            pulumi.set(__self__, "config_template_desc", config_template_desc)
        if config_template_id is not None:
            pulumi.set(__self__, "config_template_id", config_template_id)
        if config_template_name is not None:
            pulumi.set(__self__, "config_template_name", config_template_name)
        if config_template_type is not None:
            pulumi.set(__self__, "config_template_type", config_template_type)
        if config_template_value is not None:
            pulumi.set(__self__, "config_template_value", config_template_value)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="configTemplateDesc")
    def config_template_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration template description.
        """
        return pulumi.get(self, "config_template_desc")

    @config_template_desc.setter
    def config_template_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_template_desc", value)

    @property
    @pulumi.getter(name="configTemplateId")
    def config_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Template Id.
        """
        return pulumi.get(self, "config_template_id")

    @config_template_id.setter
    def config_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_template_id", value)

    @property
    @pulumi.getter(name="configTemplateName")
    def config_template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Configuration template name.
        """
        return pulumi.get(self, "config_template_name")

    @config_template_name.setter
    def config_template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_template_name", value)

    @property
    @pulumi.getter(name="configTemplateType")
    def config_template_type(self) -> Optional[pulumi.Input[str]]:
        """
        Configure the microservice framework corresponding to the template.
        """
        return pulumi.get(self, "config_template_type")

    @config_template_type.setter
    def config_template_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_template_type", value)

    @property
    @pulumi.getter(name="configTemplateValue")
    def config_template_value(self) -> Optional[pulumi.Input[str]]:
        """
        Configure template data.
        """
        return pulumi.get(self, "config_template_value")

    @config_template_value.setter
    def config_template_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_template_value", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class ConfigTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_template_desc: Optional[pulumi.Input[str]] = None,
                 config_template_name: Optional[pulumi.Input[str]] = None,
                 config_template_type: Optional[pulumi.Input[str]] = None,
                 config_template_value: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf config_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config_template = tencentcloud.tsf.ConfigTemplate("configTemplate",
            config_template_desc="terraform-test",
            config_template_name="terraform-template-name",
            config_template_type="Ribbon",
            config_template_value=\"\"\"  ribbon.ReadTimeout: 5000
          ribbon.ConnectTimeout: 2000
          ribbon.MaxAutoRetries: 0
          ribbon.MaxAutoRetriesNextServer: 1
          ribbon.OkToRetryOnAllOperations: true

        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_template_desc: Configuration template description.
        :param pulumi.Input[str] config_template_name: Configuration template name.
        :param pulumi.Input[str] config_template_type: Configure the microservice framework corresponding to the template.
        :param pulumi.Input[str] config_template_value: Configure template data.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf config_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config_template = tencentcloud.tsf.ConfigTemplate("configTemplate",
            config_template_desc="terraform-test",
            config_template_name="terraform-template-name",
            config_template_type="Ribbon",
            config_template_value=\"\"\"  ribbon.ReadTimeout: 5000
          ribbon.ConnectTimeout: 2000
          ribbon.MaxAutoRetries: 0
          ribbon.MaxAutoRetriesNextServer: 1
          ribbon.OkToRetryOnAllOperations: true

        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ConfigTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_template_desc: Optional[pulumi.Input[str]] = None,
                 config_template_name: Optional[pulumi.Input[str]] = None,
                 config_template_type: Optional[pulumi.Input[str]] = None,
                 config_template_value: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigTemplateArgs.__new__(ConfigTemplateArgs)

            __props__.__dict__["config_template_desc"] = config_template_desc
            if config_template_name is None and not opts.urn:
                raise TypeError("Missing required property 'config_template_name'")
            __props__.__dict__["config_template_name"] = config_template_name
            if config_template_type is None and not opts.urn:
                raise TypeError("Missing required property 'config_template_type'")
            __props__.__dict__["config_template_type"] = config_template_type
            if config_template_value is None and not opts.urn:
                raise TypeError("Missing required property 'config_template_value'")
            __props__.__dict__["config_template_value"] = config_template_value
            __props__.__dict__["program_id_lists"] = program_id_lists
            __props__.__dict__["config_template_id"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(ConfigTemplate, __self__).__init__(
            'tencentcloud:Tsf/configTemplate:ConfigTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_template_desc: Optional[pulumi.Input[str]] = None,
            config_template_id: Optional[pulumi.Input[str]] = None,
            config_template_name: Optional[pulumi.Input[str]] = None,
            config_template_type: Optional[pulumi.Input[str]] = None,
            config_template_value: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'ConfigTemplate':
        """
        Get an existing ConfigTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_template_desc: Configuration template description.
        :param pulumi.Input[str] config_template_id: Template Id.
        :param pulumi.Input[str] config_template_name: Configuration template name.
        :param pulumi.Input[str] config_template_type: Configure the microservice framework corresponding to the template.
        :param pulumi.Input[str] config_template_value: Configure template data.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] update_time: update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigTemplateState.__new__(_ConfigTemplateState)

        __props__.__dict__["config_template_desc"] = config_template_desc
        __props__.__dict__["config_template_id"] = config_template_id
        __props__.__dict__["config_template_name"] = config_template_name
        __props__.__dict__["config_template_type"] = config_template_type
        __props__.__dict__["config_template_value"] = config_template_value
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["program_id_lists"] = program_id_lists
        __props__.__dict__["update_time"] = update_time
        return ConfigTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configTemplateDesc")
    def config_template_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Configuration template description.
        """
        return pulumi.get(self, "config_template_desc")

    @property
    @pulumi.getter(name="configTemplateId")
    def config_template_id(self) -> pulumi.Output[str]:
        """
        Template Id.
        """
        return pulumi.get(self, "config_template_id")

    @property
    @pulumi.getter(name="configTemplateName")
    def config_template_name(self) -> pulumi.Output[str]:
        """
        Configuration template name.
        """
        return pulumi.get(self, "config_template_name")

    @property
    @pulumi.getter(name="configTemplateType")
    def config_template_type(self) -> pulumi.Output[str]:
        """
        Configure the microservice framework corresponding to the template.
        """
        return pulumi.get(self, "config_template_type")

    @property
    @pulumi.getter(name="configTemplateValue")
    def config_template_value(self) -> pulumi.Output[str]:
        """
        Configure template data.
        """
        return pulumi.get(self, "config_template_value")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

