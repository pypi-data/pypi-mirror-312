# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstancesAttachmentArgs', 'InstancesAttachment']

@pulumi.input_type
class InstancesAttachmentArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 feature_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_advanced_settings: Optional[pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs']] = None,
                 instance_import_mode: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 os_customize_type: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InstancesAttachment resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] instance_id: Cloud server ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] feature_id_lists: Image feature ID list.
        :param pulumi.Input[str] image_id: Operating system image ID.
        :param pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs'] instance_advanced_settings: Additional instance parameter information.
        :param pulumi.Input[str] instance_import_mode: Cloud server import mode, required for virtual machine clusters, not required for container clusters. R: Reinstall TSF system image, M: Manual installation of agent.
        :param pulumi.Input[str] key_id: Associated key for system reinstallation.
        :param pulumi.Input[str] os_customize_type: Image customization type.
        :param pulumi.Input[str] os_name: Operating system name.
        :param pulumi.Input[str] password: Reset system password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group.
        :param pulumi.Input[str] sg_id: Security group setting.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if feature_id_lists is not None:
            pulumi.set(__self__, "feature_id_lists", feature_id_lists)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_advanced_settings is not None:
            pulumi.set(__self__, "instance_advanced_settings", instance_advanced_settings)
        if instance_import_mode is not None:
            pulumi.set(__self__, "instance_import_mode", instance_import_mode)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if os_customize_type is not None:
            pulumi.set(__self__, "os_customize_type", os_customize_type)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if sg_id is not None:
            pulumi.set(__self__, "sg_id", sg_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Cloud server ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="featureIdLists")
    def feature_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Image feature ID list.
        """
        return pulumi.get(self, "feature_id_lists")

    @feature_id_lists.setter
    def feature_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "feature_id_lists", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceAdvancedSettings")
    def instance_advanced_settings(self) -> Optional[pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs']]:
        """
        Additional instance parameter information.
        """
        return pulumi.get(self, "instance_advanced_settings")

    @instance_advanced_settings.setter
    def instance_advanced_settings(self, value: Optional[pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs']]):
        pulumi.set(self, "instance_advanced_settings", value)

    @property
    @pulumi.getter(name="instanceImportMode")
    def instance_import_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud server import mode, required for virtual machine clusters, not required for container clusters. R: Reinstall TSF system image, M: Manual installation of agent.
        """
        return pulumi.get(self, "instance_import_mode")

    @instance_import_mode.setter
    def instance_import_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_import_mode", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Associated key for system reinstallation.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="osCustomizeType")
    def os_customize_type(self) -> Optional[pulumi.Input[str]]:
        """
        Image customization type.
        """
        return pulumi.get(self, "os_customize_type")

    @os_customize_type.setter
    def os_customize_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_customize_type", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system name.
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Reset system password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> Optional[pulumi.Input[str]]:
        """
        Security group setting.
        """
        return pulumi.get(self, "sg_id")

    @sg_id.setter
    def sg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sg_id", value)


@pulumi.input_type
class _InstancesAttachmentState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 feature_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_advanced_settings: Optional[pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs']] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_import_mode: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 os_customize_type: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InstancesAttachment resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] feature_id_lists: Image feature ID list.
        :param pulumi.Input[str] image_id: Operating system image ID.
        :param pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs'] instance_advanced_settings: Additional instance parameter information.
        :param pulumi.Input[str] instance_id: Cloud server ID.
        :param pulumi.Input[str] instance_import_mode: Cloud server import mode, required for virtual machine clusters, not required for container clusters. R: Reinstall TSF system image, M: Manual installation of agent.
        :param pulumi.Input[str] key_id: Associated key for system reinstallation.
        :param pulumi.Input[str] os_customize_type: Image customization type.
        :param pulumi.Input[str] os_name: Operating system name.
        :param pulumi.Input[str] password: Reset system password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group.
        :param pulumi.Input[str] sg_id: Security group setting.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if feature_id_lists is not None:
            pulumi.set(__self__, "feature_id_lists", feature_id_lists)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_advanced_settings is not None:
            pulumi.set(__self__, "instance_advanced_settings", instance_advanced_settings)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_import_mode is not None:
            pulumi.set(__self__, "instance_import_mode", instance_import_mode)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if os_customize_type is not None:
            pulumi.set(__self__, "os_customize_type", os_customize_type)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if sg_id is not None:
            pulumi.set(__self__, "sg_id", sg_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="featureIdLists")
    def feature_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Image feature ID list.
        """
        return pulumi.get(self, "feature_id_lists")

    @feature_id_lists.setter
    def feature_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "feature_id_lists", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceAdvancedSettings")
    def instance_advanced_settings(self) -> Optional[pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs']]:
        """
        Additional instance parameter information.
        """
        return pulumi.get(self, "instance_advanced_settings")

    @instance_advanced_settings.setter
    def instance_advanced_settings(self, value: Optional[pulumi.Input['InstancesAttachmentInstanceAdvancedSettingsArgs']]):
        pulumi.set(self, "instance_advanced_settings", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud server ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceImportMode")
    def instance_import_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud server import mode, required for virtual machine clusters, not required for container clusters. R: Reinstall TSF system image, M: Manual installation of agent.
        """
        return pulumi.get(self, "instance_import_mode")

    @instance_import_mode.setter
    def instance_import_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_import_mode", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Associated key for system reinstallation.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="osCustomizeType")
    def os_customize_type(self) -> Optional[pulumi.Input[str]]:
        """
        Image customization type.
        """
        return pulumi.get(self, "os_customize_type")

    @os_customize_type.setter
    def os_customize_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_customize_type", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system name.
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Reset system password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> Optional[pulumi.Input[str]]:
        """
        Security group setting.
        """
        return pulumi.get(self, "sg_id")

    @sg_id.setter
    def sg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sg_id", value)


class InstancesAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 feature_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_advanced_settings: Optional[pulumi.Input[pulumi.InputType['InstancesAttachmentInstanceAdvancedSettingsArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_import_mode: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 os_customize_type: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf instances_attachment

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] feature_id_lists: Image feature ID list.
        :param pulumi.Input[str] image_id: Operating system image ID.
        :param pulumi.Input[pulumi.InputType['InstancesAttachmentInstanceAdvancedSettingsArgs']] instance_advanced_settings: Additional instance parameter information.
        :param pulumi.Input[str] instance_id: Cloud server ID.
        :param pulumi.Input[str] instance_import_mode: Cloud server import mode, required for virtual machine clusters, not required for container clusters. R: Reinstall TSF system image, M: Manual installation of agent.
        :param pulumi.Input[str] key_id: Associated key for system reinstallation.
        :param pulumi.Input[str] os_customize_type: Image customization type.
        :param pulumi.Input[str] os_name: Operating system name.
        :param pulumi.Input[str] password: Reset system password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group.
        :param pulumi.Input[str] sg_id: Security group setting.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstancesAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf instances_attachment

        :param str resource_name: The name of the resource.
        :param InstancesAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstancesAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 feature_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_advanced_settings: Optional[pulumi.Input[pulumi.InputType['InstancesAttachmentInstanceAdvancedSettingsArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 instance_import_mode: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 os_customize_type: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sg_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstancesAttachmentArgs.__new__(InstancesAttachmentArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["feature_id_lists"] = feature_id_lists
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["instance_advanced_settings"] = instance_advanced_settings
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["instance_import_mode"] = instance_import_mode
            __props__.__dict__["key_id"] = key_id
            __props__.__dict__["os_customize_type"] = os_customize_type
            __props__.__dict__["os_name"] = os_name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["sg_id"] = sg_id
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(InstancesAttachment, __self__).__init__(
            'tencentcloud:Tsf/instancesAttachment:InstancesAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            feature_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            instance_advanced_settings: Optional[pulumi.Input[pulumi.InputType['InstancesAttachmentInstanceAdvancedSettingsArgs']]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            instance_import_mode: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[str]] = None,
            os_customize_type: Optional[pulumi.Input[str]] = None,
            os_name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sg_id: Optional[pulumi.Input[str]] = None) -> 'InstancesAttachment':
        """
        Get an existing InstancesAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] feature_id_lists: Image feature ID list.
        :param pulumi.Input[str] image_id: Operating system image ID.
        :param pulumi.Input[pulumi.InputType['InstancesAttachmentInstanceAdvancedSettingsArgs']] instance_advanced_settings: Additional instance parameter information.
        :param pulumi.Input[str] instance_id: Cloud server ID.
        :param pulumi.Input[str] instance_import_mode: Cloud server import mode, required for virtual machine clusters, not required for container clusters. R: Reinstall TSF system image, M: Manual installation of agent.
        :param pulumi.Input[str] key_id: Associated key for system reinstallation.
        :param pulumi.Input[str] os_customize_type: Image customization type.
        :param pulumi.Input[str] os_name: Operating system name.
        :param pulumi.Input[str] password: Reset system password.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: Security group.
        :param pulumi.Input[str] sg_id: Security group setting.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstancesAttachmentState.__new__(_InstancesAttachmentState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["feature_id_lists"] = feature_id_lists
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["instance_advanced_settings"] = instance_advanced_settings
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_import_mode"] = instance_import_mode
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["os_customize_type"] = os_customize_type
        __props__.__dict__["os_name"] = os_name
        __props__.__dict__["password"] = password
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["sg_id"] = sg_id
        return InstancesAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="featureIdLists")
    def feature_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Image feature ID list.
        """
        return pulumi.get(self, "feature_id_lists")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[Optional[str]]:
        """
        Operating system image ID.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceAdvancedSettings")
    def instance_advanced_settings(self) -> pulumi.Output[Optional['outputs.InstancesAttachmentInstanceAdvancedSettings']]:
        """
        Additional instance parameter information.
        """
        return pulumi.get(self, "instance_advanced_settings")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Cloud server ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceImportMode")
    def instance_import_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Cloud server import mode, required for virtual machine clusters, not required for container clusters. R: Reinstall TSF system image, M: Manual installation of agent.
        """
        return pulumi.get(self, "instance_import_mode")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[str]]:
        """
        Associated key for system reinstallation.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="osCustomizeType")
    def os_customize_type(self) -> pulumi.Output[Optional[str]]:
        """
        Image customization type.
        """
        return pulumi.get(self, "os_customize_type")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Output[Optional[str]]:
        """
        Operating system name.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Reset system password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security group.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="sgId")
    def sg_id(self) -> pulumi.Output[Optional[str]]:
        """
        Security group setting.
        """
        return pulumi.get(self, "sg_id")

