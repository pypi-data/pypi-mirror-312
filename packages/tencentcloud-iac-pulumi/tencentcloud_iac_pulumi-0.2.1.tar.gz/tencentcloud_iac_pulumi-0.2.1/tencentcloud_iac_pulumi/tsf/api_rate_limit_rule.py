# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ApiRateLimitRuleArgs', 'ApiRateLimitRule']

@pulumi.input_type
class ApiRateLimitRuleArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[str],
                 max_qps: pulumi.Input[int],
                 usable_status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApiRateLimitRule resource.
        :param pulumi.Input[str] api_id: Api Id.
        :param pulumi.Input[int] max_qps: qps value.
        :param pulumi.Input[str] usable_status: Enabled/disabled, enabled/disabled, if not passed, it is enabled by default.
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "max_qps", max_qps)
        if usable_status is not None:
            pulumi.set(__self__, "usable_status", usable_status)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[str]:
        """
        Api Id.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="maxQps")
    def max_qps(self) -> pulumi.Input[int]:
        """
        qps value.
        """
        return pulumi.get(self, "max_qps")

    @max_qps.setter
    def max_qps(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_qps", value)

    @property
    @pulumi.getter(name="usableStatus")
    def usable_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enabled/disabled, enabled/disabled, if not passed, it is enabled by default.
        """
        return pulumi.get(self, "usable_status")

    @usable_status.setter
    def usable_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usable_status", value)


@pulumi.input_type
class _ApiRateLimitRuleState:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[str]] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 max_qps: Optional[pulumi.Input[int]] = None,
                 rule_content: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 tsf_rule_id: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 usable_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiRateLimitRule resources.
        :param pulumi.Input[str] api_id: Api Id.
        :param pulumi.Input[str] created_time: creation time.
        :param pulumi.Input[str] description: describe.
        :param pulumi.Input[int] max_qps: qps value.
        :param pulumi.Input[str] rule_content: Rule content.
        :param pulumi.Input[str] rule_id: rule Id.
        :param pulumi.Input[str] rule_name: Current limit name.
        :param pulumi.Input[str] tsf_rule_id: Tsf Rule ID.
        :param pulumi.Input[str] updated_time: update time.
        :param pulumi.Input[str] usable_status: Enabled/disabled, enabled/disabled, if not passed, it is enabled by default.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max_qps is not None:
            pulumi.set(__self__, "max_qps", max_qps)
        if rule_content is not None:
            pulumi.set(__self__, "rule_content", rule_content)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if tsf_rule_id is not None:
            pulumi.set(__self__, "tsf_rule_id", tsf_rule_id)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if usable_status is not None:
            pulumi.set(__self__, "usable_status", usable_status)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[str]]:
        """
        Api Id.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        creation time.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        describe.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="maxQps")
    def max_qps(self) -> Optional[pulumi.Input[int]]:
        """
        qps value.
        """
        return pulumi.get(self, "max_qps")

    @max_qps.setter
    def max_qps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_qps", value)

    @property
    @pulumi.getter(name="ruleContent")
    def rule_content(self) -> Optional[pulumi.Input[str]]:
        """
        Rule content.
        """
        return pulumi.get(self, "rule_content")

    @rule_content.setter
    def rule_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_content", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        rule Id.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        Current limit name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="tsfRuleId")
    def tsf_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tsf Rule ID.
        """
        return pulumi.get(self, "tsf_rule_id")

    @tsf_rule_id.setter
    def tsf_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsf_rule_id", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[str]]:
        """
        update time.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter(name="usableStatus")
    def usable_status(self) -> Optional[pulumi.Input[str]]:
        """
        Enabled/disabled, enabled/disabled, if not passed, it is enabled by default.
        """
        return pulumi.get(self, "usable_status")

    @usable_status.setter
    def usable_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usable_status", value)


class ApiRateLimitRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 max_qps: Optional[pulumi.Input[int]] = None,
                 usable_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf api_rate_limit_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        api_rate_limit_rule = tencentcloud.tsf.ApiRateLimitRule("apiRateLimitRule",
            api_id="api-xxxxxx",
            max_qps=10,
            usable_status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf api_rate_limit_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/apiRateLimitRule:ApiRateLimitRule api_rate_limit_rule api_rate_limit_rule_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_id: Api Id.
        :param pulumi.Input[int] max_qps: qps value.
        :param pulumi.Input[str] usable_status: Enabled/disabled, enabled/disabled, if not passed, it is enabled by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiRateLimitRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf api_rate_limit_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        api_rate_limit_rule = tencentcloud.tsf.ApiRateLimitRule("apiRateLimitRule",
            api_id="api-xxxxxx",
            max_qps=10,
            usable_status="enable")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf api_rate_limit_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/apiRateLimitRule:ApiRateLimitRule api_rate_limit_rule api_rate_limit_rule_id
        ```

        :param str resource_name: The name of the resource.
        :param ApiRateLimitRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiRateLimitRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 max_qps: Optional[pulumi.Input[int]] = None,
                 usable_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiRateLimitRuleArgs.__new__(ApiRateLimitRuleArgs)

            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            if max_qps is None and not opts.urn:
                raise TypeError("Missing required property 'max_qps'")
            __props__.__dict__["max_qps"] = max_qps
            __props__.__dict__["usable_status"] = usable_status
            __props__.__dict__["created_time"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["rule_content"] = None
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["rule_name"] = None
            __props__.__dict__["tsf_rule_id"] = None
            __props__.__dict__["updated_time"] = None
        super(ApiRateLimitRule, __self__).__init__(
            'tencentcloud:Tsf/apiRateLimitRule:ApiRateLimitRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_id: Optional[pulumi.Input[str]] = None,
            created_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            max_qps: Optional[pulumi.Input[int]] = None,
            rule_content: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            tsf_rule_id: Optional[pulumi.Input[str]] = None,
            updated_time: Optional[pulumi.Input[str]] = None,
            usable_status: Optional[pulumi.Input[str]] = None) -> 'ApiRateLimitRule':
        """
        Get an existing ApiRateLimitRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_id: Api Id.
        :param pulumi.Input[str] created_time: creation time.
        :param pulumi.Input[str] description: describe.
        :param pulumi.Input[int] max_qps: qps value.
        :param pulumi.Input[str] rule_content: Rule content.
        :param pulumi.Input[str] rule_id: rule Id.
        :param pulumi.Input[str] rule_name: Current limit name.
        :param pulumi.Input[str] tsf_rule_id: Tsf Rule ID.
        :param pulumi.Input[str] updated_time: update time.
        :param pulumi.Input[str] usable_status: Enabled/disabled, enabled/disabled, if not passed, it is enabled by default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiRateLimitRuleState.__new__(_ApiRateLimitRuleState)

        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["max_qps"] = max_qps
        __props__.__dict__["rule_content"] = rule_content
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["tsf_rule_id"] = tsf_rule_id
        __props__.__dict__["updated_time"] = updated_time
        __props__.__dict__["usable_status"] = usable_status
        return ApiRateLimitRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[str]:
        """
        Api Id.
        """
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        creation time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        describe.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="maxQps")
    def max_qps(self) -> pulumi.Output[int]:
        """
        qps value.
        """
        return pulumi.get(self, "max_qps")

    @property
    @pulumi.getter(name="ruleContent")
    def rule_content(self) -> pulumi.Output[str]:
        """
        Rule content.
        """
        return pulumi.get(self, "rule_content")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        rule Id.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        Current limit name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="tsfRuleId")
    def tsf_rule_id(self) -> pulumi.Output[str]:
        """
        Tsf Rule ID.
        """
        return pulumi.get(self, "tsf_rule_id")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[str]:
        """
        update time.
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="usableStatus")
    def usable_status(self) -> pulumi.Output[str]:
        """
        Enabled/disabled, enabled/disabled, if not passed, it is enabled by default.
        """
        return pulumi.get(self, "usable_status")

