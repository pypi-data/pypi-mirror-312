# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiDetailResult',
    'AwaitableGetApiDetailResult',
    'get_api_detail',
    'get_api_detail_output',
]

@pulumi.output_type
class GetApiDetailResult:
    """
    A collection of values returned by getApiDetail.
    """
    def __init__(__self__, application_id=None, id=None, method=None, microservice_id=None, path=None, pkg_version=None, result_output_file=None, results=None):
        if application_id and not isinstance(application_id, str):
            raise TypeError("Expected argument 'application_id' to be a str")
        pulumi.set(__self__, "application_id", application_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if method and not isinstance(method, str):
            raise TypeError("Expected argument 'method' to be a str")
        pulumi.set(__self__, "method", method)
        if microservice_id and not isinstance(microservice_id, str):
            raise TypeError("Expected argument 'microservice_id' to be a str")
        pulumi.set(__self__, "microservice_id", microservice_id)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if pkg_version and not isinstance(pkg_version, str):
            raise TypeError("Expected argument 'pkg_version' to be a str")
        pulumi.set(__self__, "pkg_version", pkg_version)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> str:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def method(self) -> str:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="microserviceId")
    def microservice_id(self) -> str:
        return pulumi.get(self, "microservice_id")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="pkgVersion")
    def pkg_version(self) -> str:
        return pulumi.get(self, "pkg_version")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetApiDetailResultResult']:
        """
        api detail.
        """
        return pulumi.get(self, "results")


class AwaitableGetApiDetailResult(GetApiDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiDetailResult(
            application_id=self.application_id,
            id=self.id,
            method=self.method,
            microservice_id=self.microservice_id,
            path=self.path,
            pkg_version=self.pkg_version,
            result_output_file=self.result_output_file,
            results=self.results)


def get_api_detail(application_id: Optional[str] = None,
                   method: Optional[str] = None,
                   microservice_id: Optional[str] = None,
                   path: Optional[str] = None,
                   pkg_version: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiDetailResult:
    """
    Use this data source to query detailed information of tsf api_detail

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    api_detail = tencentcloud.Tsf.get_api_detail(application_id="application-a24x29xv",
        method="GET",
        microservice_id="ms-yq3jo6jd",
        path="/printRequest",
        pkg_version="20210625192923")
    ```
    <!--End PulumiCodeChooser -->


    :param str application_id: application id.
    :param str method: request method.
    :param str microservice_id: microservice id.
    :param str path: api path.
    :param str pkg_version: pkg version.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['method'] = method
    __args__['microserviceId'] = microservice_id
    __args__['path'] = path
    __args__['pkgVersion'] = pkg_version
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tsf/getApiDetail:getApiDetail', __args__, opts=opts, typ=GetApiDetailResult).value

    return AwaitableGetApiDetailResult(
        application_id=pulumi.get(__ret__, 'application_id'),
        id=pulumi.get(__ret__, 'id'),
        method=pulumi.get(__ret__, 'method'),
        microservice_id=pulumi.get(__ret__, 'microservice_id'),
        path=pulumi.get(__ret__, 'path'),
        pkg_version=pulumi.get(__ret__, 'pkg_version'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'))


@_utilities.lift_output_func(get_api_detail)
def get_api_detail_output(application_id: Optional[pulumi.Input[str]] = None,
                          method: Optional[pulumi.Input[str]] = None,
                          microservice_id: Optional[pulumi.Input[str]] = None,
                          path: Optional[pulumi.Input[str]] = None,
                          pkg_version: Optional[pulumi.Input[str]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiDetailResult]:
    """
    Use this data source to query detailed information of tsf api_detail

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    api_detail = tencentcloud.Tsf.get_api_detail(application_id="application-a24x29xv",
        method="GET",
        microservice_id="ms-yq3jo6jd",
        path="/printRequest",
        pkg_version="20210625192923")
    ```
    <!--End PulumiCodeChooser -->


    :param str application_id: application id.
    :param str method: request method.
    :param str microservice_id: microservice id.
    :param str path: api path.
    :param str pkg_version: pkg version.
    :param str result_output_file: Used to save results.
    """
    ...
