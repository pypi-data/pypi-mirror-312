# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployVmGroupArgs', 'DeployVmGroup']

@pulumi.input_type
class DeployVmGroupArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 pkg_id: pulumi.Input[str],
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]]] = None,
                 deploy_batches: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 deploy_beta_enable: Optional[pulumi.Input[bool]] = None,
                 deploy_desc: Optional[pulumi.Input[str]] = None,
                 deploy_exe_mode: Optional[pulumi.Input[str]] = None,
                 deploy_wait_time: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 force_start: Optional[pulumi.Input[bool]] = None,
                 health_check_settings: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsArgs']] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 jdk_name: Optional[pulumi.Input[str]] = None,
                 jdk_version: Optional[pulumi.Input[str]] = None,
                 start_script: Optional[pulumi.Input[str]] = None,
                 startup_parameters: Optional[pulumi.Input[str]] = None,
                 stop_script: Optional[pulumi.Input[str]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 warmup_setting: Optional[pulumi.Input['DeployVmGroupWarmupSettingArgs']] = None):
        """
        The set of arguments for constructing a DeployVmGroup resource.
        :param pulumi.Input[str] group_id: group id.
        :param pulumi.Input[str] pkg_id: program package ID.
        :param pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] deploy_batches: The ratio of instances participating in each batch during rolling release.
        :param pulumi.Input[bool] deploy_beta_enable: Whether to enable beta batch.
        :param pulumi.Input[str] deploy_desc: group description.
        :param pulumi.Input[str] deploy_exe_mode: The execution method of rolling release.
        :param pulumi.Input[int] deploy_wait_time: The time interval for each batch during rolling release.
        :param pulumi.Input[bool] enable_health_check: Whether to enable health check.
        :param pulumi.Input[bool] force_start: Whether to allow forced start.
        :param pulumi.Input['DeployVmGroupHealthCheckSettingsArgs'] health_check_settings: When enabling health check, configure the health check settings.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[str] jdk_name: JDK name: konaJDK or openJDK.
        :param pulumi.Input[str] jdk_version: JDK version: 8 or 11(openJDK only support 8).
        :param pulumi.Input[str] start_script: The base64-encoded startup script.
        :param pulumi.Input[str] startup_parameters: start args of group.
        :param pulumi.Input[str] stop_script: The base64-encoded stop script.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input['DeployVmGroupWarmupSettingArgs'] warmup_setting: warmup setting.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "pkg_id", pkg_id)
        if agent_profile_lists is not None:
            pulumi.set(__self__, "agent_profile_lists", agent_profile_lists)
        if deploy_batches is not None:
            pulumi.set(__self__, "deploy_batches", deploy_batches)
        if deploy_beta_enable is not None:
            pulumi.set(__self__, "deploy_beta_enable", deploy_beta_enable)
        if deploy_desc is not None:
            pulumi.set(__self__, "deploy_desc", deploy_desc)
        if deploy_exe_mode is not None:
            pulumi.set(__self__, "deploy_exe_mode", deploy_exe_mode)
        if deploy_wait_time is not None:
            pulumi.set(__self__, "deploy_wait_time", deploy_wait_time)
        if enable_health_check is not None:
            pulumi.set(__self__, "enable_health_check", enable_health_check)
        if force_start is not None:
            pulumi.set(__self__, "force_start", force_start)
        if health_check_settings is not None:
            pulumi.set(__self__, "health_check_settings", health_check_settings)
        if incremental_deployment is not None:
            pulumi.set(__self__, "incremental_deployment", incremental_deployment)
        if jdk_name is not None:
            pulumi.set(__self__, "jdk_name", jdk_name)
        if jdk_version is not None:
            pulumi.set(__self__, "jdk_version", jdk_version)
        if start_script is not None:
            pulumi.set(__self__, "start_script", start_script)
        if startup_parameters is not None:
            pulumi.set(__self__, "startup_parameters", startup_parameters)
        if stop_script is not None:
            pulumi.set(__self__, "stop_script", stop_script)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if warmup_setting is not None:
            pulumi.set(__self__, "warmup_setting", warmup_setting)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        group id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="pkgId")
    def pkg_id(self) -> pulumi.Input[str]:
        """
        program package ID.
        """
        return pulumi.get(self, "pkg_id")

    @pkg_id.setter
    def pkg_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pkg_id", value)

    @property
    @pulumi.getter(name="agentProfileLists")
    def agent_profile_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]]]:
        """
        javaagent info: SERVICE_AGENT/OT_AGENT.
        """
        return pulumi.get(self, "agent_profile_lists")

    @agent_profile_lists.setter
    def agent_profile_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]]]):
        pulumi.set(self, "agent_profile_lists", value)

    @property
    @pulumi.getter(name="deployBatches")
    def deploy_batches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The ratio of instances participating in each batch during rolling release.
        """
        return pulumi.get(self, "deploy_batches")

    @deploy_batches.setter
    def deploy_batches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "deploy_batches", value)

    @property
    @pulumi.getter(name="deployBetaEnable")
    def deploy_beta_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable beta batch.
        """
        return pulumi.get(self, "deploy_beta_enable")

    @deploy_beta_enable.setter
    def deploy_beta_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_beta_enable", value)

    @property
    @pulumi.getter(name="deployDesc")
    def deploy_desc(self) -> Optional[pulumi.Input[str]]:
        """
        group description.
        """
        return pulumi.get(self, "deploy_desc")

    @deploy_desc.setter
    def deploy_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_desc", value)

    @property
    @pulumi.getter(name="deployExeMode")
    def deploy_exe_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method of rolling release.
        """
        return pulumi.get(self, "deploy_exe_mode")

    @deploy_exe_mode.setter
    def deploy_exe_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_exe_mode", value)

    @property
    @pulumi.getter(name="deployWaitTime")
    def deploy_wait_time(self) -> Optional[pulumi.Input[int]]:
        """
        The time interval for each batch during rolling release.
        """
        return pulumi.get(self, "deploy_wait_time")

    @deploy_wait_time.setter
    def deploy_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deploy_wait_time", value)

    @property
    @pulumi.getter(name="enableHealthCheck")
    def enable_health_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable health check.
        """
        return pulumi.get(self, "enable_health_check")

    @enable_health_check.setter
    def enable_health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_health_check", value)

    @property
    @pulumi.getter(name="forceStart")
    def force_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow forced start.
        """
        return pulumi.get(self, "force_start")

    @force_start.setter
    def force_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_start", value)

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsArgs']]:
        """
        When enabling health check, configure the health check settings.
        """
        return pulumi.get(self, "health_check_settings")

    @health_check_settings.setter
    def health_check_settings(self, value: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsArgs']]):
        pulumi.set(self, "health_check_settings", value)

    @property
    @pulumi.getter(name="incrementalDeployment")
    def incremental_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to perform incremental deployment. The default value is false, which means full update.
        """
        return pulumi.get(self, "incremental_deployment")

    @incremental_deployment.setter
    def incremental_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incremental_deployment", value)

    @property
    @pulumi.getter(name="jdkName")
    def jdk_name(self) -> Optional[pulumi.Input[str]]:
        """
        JDK name: konaJDK or openJDK.
        """
        return pulumi.get(self, "jdk_name")

    @jdk_name.setter
    def jdk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdk_name", value)

    @property
    @pulumi.getter(name="jdkVersion")
    def jdk_version(self) -> Optional[pulumi.Input[str]]:
        """
        JDK version: 8 or 11(openJDK only support 8).
        """
        return pulumi.get(self, "jdk_version")

    @jdk_version.setter
    def jdk_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdk_version", value)

    @property
    @pulumi.getter(name="startScript")
    def start_script(self) -> Optional[pulumi.Input[str]]:
        """
        The base64-encoded startup script.
        """
        return pulumi.get(self, "start_script")

    @start_script.setter
    def start_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_script", value)

    @property
    @pulumi.getter(name="startupParameters")
    def startup_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        start args of group.
        """
        return pulumi.get(self, "startup_parameters")

    @startup_parameters.setter
    def startup_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startup_parameters", value)

    @property
    @pulumi.getter(name="stopScript")
    def stop_script(self) -> Optional[pulumi.Input[str]]:
        """
        The base64-encoded stop script.
        """
        return pulumi.get(self, "stop_script")

    @stop_script.setter
    def stop_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stop_script", value)

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[pulumi.Input[int]]:
        """
        Update method: 0 for fast update, 1 for rolling update.
        """
        return pulumi.get(self, "update_type")

    @update_type.setter
    def update_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_type", value)

    @property
    @pulumi.getter(name="warmupSetting")
    def warmup_setting(self) -> Optional[pulumi.Input['DeployVmGroupWarmupSettingArgs']]:
        """
        warmup setting.
        """
        return pulumi.get(self, "warmup_setting")

    @warmup_setting.setter
    def warmup_setting(self, value: Optional[pulumi.Input['DeployVmGroupWarmupSettingArgs']]):
        pulumi.set(self, "warmup_setting", value)


@pulumi.input_type
class _DeployVmGroupState:
    def __init__(__self__, *,
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]]] = None,
                 deploy_batches: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 deploy_beta_enable: Optional[pulumi.Input[bool]] = None,
                 deploy_desc: Optional[pulumi.Input[str]] = None,
                 deploy_exe_mode: Optional[pulumi.Input[str]] = None,
                 deploy_wait_time: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 force_start: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 health_check_settings: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsArgs']] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 jdk_name: Optional[pulumi.Input[str]] = None,
                 jdk_version: Optional[pulumi.Input[str]] = None,
                 pkg_id: Optional[pulumi.Input[str]] = None,
                 start_script: Optional[pulumi.Input[str]] = None,
                 startup_parameters: Optional[pulumi.Input[str]] = None,
                 stop_script: Optional[pulumi.Input[str]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 warmup_setting: Optional[pulumi.Input['DeployVmGroupWarmupSettingArgs']] = None):
        """
        Input properties used for looking up and filtering DeployVmGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] deploy_batches: The ratio of instances participating in each batch during rolling release.
        :param pulumi.Input[bool] deploy_beta_enable: Whether to enable beta batch.
        :param pulumi.Input[str] deploy_desc: group description.
        :param pulumi.Input[str] deploy_exe_mode: The execution method of rolling release.
        :param pulumi.Input[int] deploy_wait_time: The time interval for each batch during rolling release.
        :param pulumi.Input[bool] enable_health_check: Whether to enable health check.
        :param pulumi.Input[bool] force_start: Whether to allow forced start.
        :param pulumi.Input[str] group_id: group id.
        :param pulumi.Input['DeployVmGroupHealthCheckSettingsArgs'] health_check_settings: When enabling health check, configure the health check settings.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[str] jdk_name: JDK name: konaJDK or openJDK.
        :param pulumi.Input[str] jdk_version: JDK version: 8 or 11(openJDK only support 8).
        :param pulumi.Input[str] pkg_id: program package ID.
        :param pulumi.Input[str] start_script: The base64-encoded startup script.
        :param pulumi.Input[str] startup_parameters: start args of group.
        :param pulumi.Input[str] stop_script: The base64-encoded stop script.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input['DeployVmGroupWarmupSettingArgs'] warmup_setting: warmup setting.
        """
        if agent_profile_lists is not None:
            pulumi.set(__self__, "agent_profile_lists", agent_profile_lists)
        if deploy_batches is not None:
            pulumi.set(__self__, "deploy_batches", deploy_batches)
        if deploy_beta_enable is not None:
            pulumi.set(__self__, "deploy_beta_enable", deploy_beta_enable)
        if deploy_desc is not None:
            pulumi.set(__self__, "deploy_desc", deploy_desc)
        if deploy_exe_mode is not None:
            pulumi.set(__self__, "deploy_exe_mode", deploy_exe_mode)
        if deploy_wait_time is not None:
            pulumi.set(__self__, "deploy_wait_time", deploy_wait_time)
        if enable_health_check is not None:
            pulumi.set(__self__, "enable_health_check", enable_health_check)
        if force_start is not None:
            pulumi.set(__self__, "force_start", force_start)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if health_check_settings is not None:
            pulumi.set(__self__, "health_check_settings", health_check_settings)
        if incremental_deployment is not None:
            pulumi.set(__self__, "incremental_deployment", incremental_deployment)
        if jdk_name is not None:
            pulumi.set(__self__, "jdk_name", jdk_name)
        if jdk_version is not None:
            pulumi.set(__self__, "jdk_version", jdk_version)
        if pkg_id is not None:
            pulumi.set(__self__, "pkg_id", pkg_id)
        if start_script is not None:
            pulumi.set(__self__, "start_script", start_script)
        if startup_parameters is not None:
            pulumi.set(__self__, "startup_parameters", startup_parameters)
        if stop_script is not None:
            pulumi.set(__self__, "stop_script", stop_script)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if warmup_setting is not None:
            pulumi.set(__self__, "warmup_setting", warmup_setting)

    @property
    @pulumi.getter(name="agentProfileLists")
    def agent_profile_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]]]:
        """
        javaagent info: SERVICE_AGENT/OT_AGENT.
        """
        return pulumi.get(self, "agent_profile_lists")

    @agent_profile_lists.setter
    def agent_profile_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployVmGroupAgentProfileListArgs']]]]):
        pulumi.set(self, "agent_profile_lists", value)

    @property
    @pulumi.getter(name="deployBatches")
    def deploy_batches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        The ratio of instances participating in each batch during rolling release.
        """
        return pulumi.get(self, "deploy_batches")

    @deploy_batches.setter
    def deploy_batches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "deploy_batches", value)

    @property
    @pulumi.getter(name="deployBetaEnable")
    def deploy_beta_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable beta batch.
        """
        return pulumi.get(self, "deploy_beta_enable")

    @deploy_beta_enable.setter
    def deploy_beta_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_beta_enable", value)

    @property
    @pulumi.getter(name="deployDesc")
    def deploy_desc(self) -> Optional[pulumi.Input[str]]:
        """
        group description.
        """
        return pulumi.get(self, "deploy_desc")

    @deploy_desc.setter
    def deploy_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_desc", value)

    @property
    @pulumi.getter(name="deployExeMode")
    def deploy_exe_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method of rolling release.
        """
        return pulumi.get(self, "deploy_exe_mode")

    @deploy_exe_mode.setter
    def deploy_exe_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_exe_mode", value)

    @property
    @pulumi.getter(name="deployWaitTime")
    def deploy_wait_time(self) -> Optional[pulumi.Input[int]]:
        """
        The time interval for each batch during rolling release.
        """
        return pulumi.get(self, "deploy_wait_time")

    @deploy_wait_time.setter
    def deploy_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deploy_wait_time", value)

    @property
    @pulumi.getter(name="enableHealthCheck")
    def enable_health_check(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable health check.
        """
        return pulumi.get(self, "enable_health_check")

    @enable_health_check.setter
    def enable_health_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_health_check", value)

    @property
    @pulumi.getter(name="forceStart")
    def force_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to allow forced start.
        """
        return pulumi.get(self, "force_start")

    @force_start.setter
    def force_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_start", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        group id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsArgs']]:
        """
        When enabling health check, configure the health check settings.
        """
        return pulumi.get(self, "health_check_settings")

    @health_check_settings.setter
    def health_check_settings(self, value: Optional[pulumi.Input['DeployVmGroupHealthCheckSettingsArgs']]):
        pulumi.set(self, "health_check_settings", value)

    @property
    @pulumi.getter(name="incrementalDeployment")
    def incremental_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to perform incremental deployment. The default value is false, which means full update.
        """
        return pulumi.get(self, "incremental_deployment")

    @incremental_deployment.setter
    def incremental_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incremental_deployment", value)

    @property
    @pulumi.getter(name="jdkName")
    def jdk_name(self) -> Optional[pulumi.Input[str]]:
        """
        JDK name: konaJDK or openJDK.
        """
        return pulumi.get(self, "jdk_name")

    @jdk_name.setter
    def jdk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdk_name", value)

    @property
    @pulumi.getter(name="jdkVersion")
    def jdk_version(self) -> Optional[pulumi.Input[str]]:
        """
        JDK version: 8 or 11(openJDK only support 8).
        """
        return pulumi.get(self, "jdk_version")

    @jdk_version.setter
    def jdk_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdk_version", value)

    @property
    @pulumi.getter(name="pkgId")
    def pkg_id(self) -> Optional[pulumi.Input[str]]:
        """
        program package ID.
        """
        return pulumi.get(self, "pkg_id")

    @pkg_id.setter
    def pkg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pkg_id", value)

    @property
    @pulumi.getter(name="startScript")
    def start_script(self) -> Optional[pulumi.Input[str]]:
        """
        The base64-encoded startup script.
        """
        return pulumi.get(self, "start_script")

    @start_script.setter
    def start_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_script", value)

    @property
    @pulumi.getter(name="startupParameters")
    def startup_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        start args of group.
        """
        return pulumi.get(self, "startup_parameters")

    @startup_parameters.setter
    def startup_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "startup_parameters", value)

    @property
    @pulumi.getter(name="stopScript")
    def stop_script(self) -> Optional[pulumi.Input[str]]:
        """
        The base64-encoded stop script.
        """
        return pulumi.get(self, "stop_script")

    @stop_script.setter
    def stop_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stop_script", value)

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[pulumi.Input[int]]:
        """
        Update method: 0 for fast update, 1 for rolling update.
        """
        return pulumi.get(self, "update_type")

    @update_type.setter
    def update_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_type", value)

    @property
    @pulumi.getter(name="warmupSetting")
    def warmup_setting(self) -> Optional[pulumi.Input['DeployVmGroupWarmupSettingArgs']]:
        """
        warmup setting.
        """
        return pulumi.get(self, "warmup_setting")

    @warmup_setting.setter
    def warmup_setting(self, value: Optional[pulumi.Input['DeployVmGroupWarmupSettingArgs']]):
        pulumi.set(self, "warmup_setting", value)


class DeployVmGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployVmGroupAgentProfileListArgs']]]]] = None,
                 deploy_batches: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 deploy_beta_enable: Optional[pulumi.Input[bool]] = None,
                 deploy_desc: Optional[pulumi.Input[str]] = None,
                 deploy_exe_mode: Optional[pulumi.Input[str]] = None,
                 deploy_wait_time: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 force_start: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 health_check_settings: Optional[pulumi.Input[pulumi.InputType['DeployVmGroupHealthCheckSettingsArgs']]] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 jdk_name: Optional[pulumi.Input[str]] = None,
                 jdk_version: Optional[pulumi.Input[str]] = None,
                 pkg_id: Optional[pulumi.Input[str]] = None,
                 start_script: Optional[pulumi.Input[str]] = None,
                 startup_parameters: Optional[pulumi.Input[str]] = None,
                 stop_script: Optional[pulumi.Input[str]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 warmup_setting: Optional[pulumi.Input[pulumi.InputType['DeployVmGroupWarmupSettingArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf deploy_vm_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        deploy_vm_group = tencentcloud.tsf.DeployVmGroup("deployVmGroup",
            deploy_desc="deploy test",
            enable_health_check=True,
            force_start=False,
            group_id="group-vzd97zpy",
            health_check_settings=tencentcloud.tsf.DeployVmGroupHealthCheckSettingsArgs(
                readiness_probe=tencentcloud.tsf.DeployVmGroupHealthCheckSettingsReadinessProbeArgs(
                    action_type="HTTP",
                    failure_threshold=3,
                    initial_delay_seconds=10,
                    path="/",
                    period_seconds=10,
                    port=80,
                    scheme="HTTP",
                    success_threshold=1,
                    timeout_seconds=2,
                ),
            ),
            jdk_name="konaJDK",
            jdk_version="8",
            pkg_id="pkg-131bc1d3",
            startup_parameters="-Xms128m -Xmx512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m",
            update_type=0)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployVmGroupAgentProfileListArgs']]]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] deploy_batches: The ratio of instances participating in each batch during rolling release.
        :param pulumi.Input[bool] deploy_beta_enable: Whether to enable beta batch.
        :param pulumi.Input[str] deploy_desc: group description.
        :param pulumi.Input[str] deploy_exe_mode: The execution method of rolling release.
        :param pulumi.Input[int] deploy_wait_time: The time interval for each batch during rolling release.
        :param pulumi.Input[bool] enable_health_check: Whether to enable health check.
        :param pulumi.Input[bool] force_start: Whether to allow forced start.
        :param pulumi.Input[str] group_id: group id.
        :param pulumi.Input[pulumi.InputType['DeployVmGroupHealthCheckSettingsArgs']] health_check_settings: When enabling health check, configure the health check settings.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[str] jdk_name: JDK name: konaJDK or openJDK.
        :param pulumi.Input[str] jdk_version: JDK version: 8 or 11(openJDK only support 8).
        :param pulumi.Input[str] pkg_id: program package ID.
        :param pulumi.Input[str] start_script: The base64-encoded startup script.
        :param pulumi.Input[str] startup_parameters: start args of group.
        :param pulumi.Input[str] stop_script: The base64-encoded stop script.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input[pulumi.InputType['DeployVmGroupWarmupSettingArgs']] warmup_setting: warmup setting.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployVmGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf deploy_vm_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        deploy_vm_group = tencentcloud.tsf.DeployVmGroup("deployVmGroup",
            deploy_desc="deploy test",
            enable_health_check=True,
            force_start=False,
            group_id="group-vzd97zpy",
            health_check_settings=tencentcloud.tsf.DeployVmGroupHealthCheckSettingsArgs(
                readiness_probe=tencentcloud.tsf.DeployVmGroupHealthCheckSettingsReadinessProbeArgs(
                    action_type="HTTP",
                    failure_threshold=3,
                    initial_delay_seconds=10,
                    path="/",
                    period_seconds=10,
                    port=80,
                    scheme="HTTP",
                    success_threshold=1,
                    timeout_seconds=2,
                ),
            ),
            jdk_name="konaJDK",
            jdk_version="8",
            pkg_id="pkg-131bc1d3",
            startup_parameters="-Xms128m -Xmx512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m",
            update_type=0)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param DeployVmGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployVmGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployVmGroupAgentProfileListArgs']]]]] = None,
                 deploy_batches: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 deploy_beta_enable: Optional[pulumi.Input[bool]] = None,
                 deploy_desc: Optional[pulumi.Input[str]] = None,
                 deploy_exe_mode: Optional[pulumi.Input[str]] = None,
                 deploy_wait_time: Optional[pulumi.Input[int]] = None,
                 enable_health_check: Optional[pulumi.Input[bool]] = None,
                 force_start: Optional[pulumi.Input[bool]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 health_check_settings: Optional[pulumi.Input[pulumi.InputType['DeployVmGroupHealthCheckSettingsArgs']]] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 jdk_name: Optional[pulumi.Input[str]] = None,
                 jdk_version: Optional[pulumi.Input[str]] = None,
                 pkg_id: Optional[pulumi.Input[str]] = None,
                 start_script: Optional[pulumi.Input[str]] = None,
                 startup_parameters: Optional[pulumi.Input[str]] = None,
                 stop_script: Optional[pulumi.Input[str]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 warmup_setting: Optional[pulumi.Input[pulumi.InputType['DeployVmGroupWarmupSettingArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployVmGroupArgs.__new__(DeployVmGroupArgs)

            __props__.__dict__["agent_profile_lists"] = agent_profile_lists
            __props__.__dict__["deploy_batches"] = deploy_batches
            __props__.__dict__["deploy_beta_enable"] = deploy_beta_enable
            __props__.__dict__["deploy_desc"] = deploy_desc
            __props__.__dict__["deploy_exe_mode"] = deploy_exe_mode
            __props__.__dict__["deploy_wait_time"] = deploy_wait_time
            __props__.__dict__["enable_health_check"] = enable_health_check
            __props__.__dict__["force_start"] = force_start
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["health_check_settings"] = health_check_settings
            __props__.__dict__["incremental_deployment"] = incremental_deployment
            __props__.__dict__["jdk_name"] = jdk_name
            __props__.__dict__["jdk_version"] = jdk_version
            if pkg_id is None and not opts.urn:
                raise TypeError("Missing required property 'pkg_id'")
            __props__.__dict__["pkg_id"] = pkg_id
            __props__.__dict__["start_script"] = start_script
            __props__.__dict__["startup_parameters"] = startup_parameters
            __props__.__dict__["stop_script"] = stop_script
            __props__.__dict__["update_type"] = update_type
            __props__.__dict__["warmup_setting"] = warmup_setting
        super(DeployVmGroup, __self__).__init__(
            'tencentcloud:Tsf/deployVmGroup:DeployVmGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployVmGroupAgentProfileListArgs']]]]] = None,
            deploy_batches: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
            deploy_beta_enable: Optional[pulumi.Input[bool]] = None,
            deploy_desc: Optional[pulumi.Input[str]] = None,
            deploy_exe_mode: Optional[pulumi.Input[str]] = None,
            deploy_wait_time: Optional[pulumi.Input[int]] = None,
            enable_health_check: Optional[pulumi.Input[bool]] = None,
            force_start: Optional[pulumi.Input[bool]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            health_check_settings: Optional[pulumi.Input[pulumi.InputType['DeployVmGroupHealthCheckSettingsArgs']]] = None,
            incremental_deployment: Optional[pulumi.Input[bool]] = None,
            jdk_name: Optional[pulumi.Input[str]] = None,
            jdk_version: Optional[pulumi.Input[str]] = None,
            pkg_id: Optional[pulumi.Input[str]] = None,
            start_script: Optional[pulumi.Input[str]] = None,
            startup_parameters: Optional[pulumi.Input[str]] = None,
            stop_script: Optional[pulumi.Input[str]] = None,
            update_type: Optional[pulumi.Input[int]] = None,
            warmup_setting: Optional[pulumi.Input[pulumi.InputType['DeployVmGroupWarmupSettingArgs']]] = None) -> 'DeployVmGroup':
        """
        Get an existing DeployVmGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployVmGroupAgentProfileListArgs']]]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[Sequence[pulumi.Input[float]]] deploy_batches: The ratio of instances participating in each batch during rolling release.
        :param pulumi.Input[bool] deploy_beta_enable: Whether to enable beta batch.
        :param pulumi.Input[str] deploy_desc: group description.
        :param pulumi.Input[str] deploy_exe_mode: The execution method of rolling release.
        :param pulumi.Input[int] deploy_wait_time: The time interval for each batch during rolling release.
        :param pulumi.Input[bool] enable_health_check: Whether to enable health check.
        :param pulumi.Input[bool] force_start: Whether to allow forced start.
        :param pulumi.Input[str] group_id: group id.
        :param pulumi.Input[pulumi.InputType['DeployVmGroupHealthCheckSettingsArgs']] health_check_settings: When enabling health check, configure the health check settings.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[str] jdk_name: JDK name: konaJDK or openJDK.
        :param pulumi.Input[str] jdk_version: JDK version: 8 or 11(openJDK only support 8).
        :param pulumi.Input[str] pkg_id: program package ID.
        :param pulumi.Input[str] start_script: The base64-encoded startup script.
        :param pulumi.Input[str] startup_parameters: start args of group.
        :param pulumi.Input[str] stop_script: The base64-encoded stop script.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input[pulumi.InputType['DeployVmGroupWarmupSettingArgs']] warmup_setting: warmup setting.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployVmGroupState.__new__(_DeployVmGroupState)

        __props__.__dict__["agent_profile_lists"] = agent_profile_lists
        __props__.__dict__["deploy_batches"] = deploy_batches
        __props__.__dict__["deploy_beta_enable"] = deploy_beta_enable
        __props__.__dict__["deploy_desc"] = deploy_desc
        __props__.__dict__["deploy_exe_mode"] = deploy_exe_mode
        __props__.__dict__["deploy_wait_time"] = deploy_wait_time
        __props__.__dict__["enable_health_check"] = enable_health_check
        __props__.__dict__["force_start"] = force_start
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["health_check_settings"] = health_check_settings
        __props__.__dict__["incremental_deployment"] = incremental_deployment
        __props__.__dict__["jdk_name"] = jdk_name
        __props__.__dict__["jdk_version"] = jdk_version
        __props__.__dict__["pkg_id"] = pkg_id
        __props__.__dict__["start_script"] = start_script
        __props__.__dict__["startup_parameters"] = startup_parameters
        __props__.__dict__["stop_script"] = stop_script
        __props__.__dict__["update_type"] = update_type
        __props__.__dict__["warmup_setting"] = warmup_setting
        return DeployVmGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agentProfileLists")
    def agent_profile_lists(self) -> pulumi.Output[Sequence['outputs.DeployVmGroupAgentProfileList']]:
        """
        javaagent info: SERVICE_AGENT/OT_AGENT.
        """
        return pulumi.get(self, "agent_profile_lists")

    @property
    @pulumi.getter(name="deployBatches")
    def deploy_batches(self) -> pulumi.Output[Sequence[float]]:
        """
        The ratio of instances participating in each batch during rolling release.
        """
        return pulumi.get(self, "deploy_batches")

    @property
    @pulumi.getter(name="deployBetaEnable")
    def deploy_beta_enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable beta batch.
        """
        return pulumi.get(self, "deploy_beta_enable")

    @property
    @pulumi.getter(name="deployDesc")
    def deploy_desc(self) -> pulumi.Output[str]:
        """
        group description.
        """
        return pulumi.get(self, "deploy_desc")

    @property
    @pulumi.getter(name="deployExeMode")
    def deploy_exe_mode(self) -> pulumi.Output[str]:
        """
        The execution method of rolling release.
        """
        return pulumi.get(self, "deploy_exe_mode")

    @property
    @pulumi.getter(name="deployWaitTime")
    def deploy_wait_time(self) -> pulumi.Output[int]:
        """
        The time interval for each batch during rolling release.
        """
        return pulumi.get(self, "deploy_wait_time")

    @property
    @pulumi.getter(name="enableHealthCheck")
    def enable_health_check(self) -> pulumi.Output[bool]:
        """
        Whether to enable health check.
        """
        return pulumi.get(self, "enable_health_check")

    @property
    @pulumi.getter(name="forceStart")
    def force_start(self) -> pulumi.Output[bool]:
        """
        Whether to allow forced start.
        """
        return pulumi.get(self, "force_start")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        group id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> pulumi.Output['outputs.DeployVmGroupHealthCheckSettings']:
        """
        When enabling health check, configure the health check settings.
        """
        return pulumi.get(self, "health_check_settings")

    @property
    @pulumi.getter(name="incrementalDeployment")
    def incremental_deployment(self) -> pulumi.Output[bool]:
        """
        Whether to perform incremental deployment. The default value is false, which means full update.
        """
        return pulumi.get(self, "incremental_deployment")

    @property
    @pulumi.getter(name="jdkName")
    def jdk_name(self) -> pulumi.Output[str]:
        """
        JDK name: konaJDK or openJDK.
        """
        return pulumi.get(self, "jdk_name")

    @property
    @pulumi.getter(name="jdkVersion")
    def jdk_version(self) -> pulumi.Output[str]:
        """
        JDK version: 8 or 11(openJDK only support 8).
        """
        return pulumi.get(self, "jdk_version")

    @property
    @pulumi.getter(name="pkgId")
    def pkg_id(self) -> pulumi.Output[str]:
        """
        program package ID.
        """
        return pulumi.get(self, "pkg_id")

    @property
    @pulumi.getter(name="startScript")
    def start_script(self) -> pulumi.Output[str]:
        """
        The base64-encoded startup script.
        """
        return pulumi.get(self, "start_script")

    @property
    @pulumi.getter(name="startupParameters")
    def startup_parameters(self) -> pulumi.Output[str]:
        """
        start args of group.
        """
        return pulumi.get(self, "startup_parameters")

    @property
    @pulumi.getter(name="stopScript")
    def stop_script(self) -> pulumi.Output[str]:
        """
        The base64-encoded stop script.
        """
        return pulumi.get(self, "stop_script")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> pulumi.Output[int]:
        """
        Update method: 0 for fast update, 1 for rolling update.
        """
        return pulumi.get(self, "update_type")

    @property
    @pulumi.getter(name="warmupSetting")
    def warmup_setting(self) -> pulumi.Output['outputs.DeployVmGroupWarmupSetting']:
        """
        warmup setting.
        """
        return pulumi.get(self, "warmup_setting")

