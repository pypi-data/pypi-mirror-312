# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LaneRuleArgs', 'LaneRule']

@pulumi.input_type
class LaneRuleArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[bool],
                 lane_id: pulumi.Input[str],
                 remark: pulumi.Input[str],
                 rule_name: pulumi.Input[str],
                 rule_tag_lists: pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]],
                 rule_tag_relationship: pulumi.Input[str],
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a LaneRule resource.
        :param pulumi.Input[bool] enable: open state, true/false, default: false.
        :param pulumi.Input[str] lane_id: lane ID.
        :param pulumi.Input[str] remark: Lane rule notes.
        :param pulumi.Input[str] rule_name: lane rule name.
        :param pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]] rule_tag_lists: list of swimlane rule labels.
        :param pulumi.Input[str] rule_tag_relationship: lane rule label relationship.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "lane_id", lane_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_tag_lists", rule_tag_lists)
        pulumi.set(__self__, "rule_tag_relationship", rule_tag_relationship)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        open state, true/false, default: false.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> pulumi.Input[str]:
        """
        lane ID.
        """
        return pulumi.get(self, "lane_id")

    @lane_id.setter
    def lane_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lane_id", value)

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Input[str]:
        """
        Lane rule notes.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: pulumi.Input[str]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        lane rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleTagLists")
    def rule_tag_lists(self) -> pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]]:
        """
        list of swimlane rule labels.
        """
        return pulumi.get(self, "rule_tag_lists")

    @rule_tag_lists.setter
    def rule_tag_lists(self, value: pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]]):
        pulumi.set(self, "rule_tag_lists", value)

    @property
    @pulumi.getter(name="ruleTagRelationship")
    def rule_tag_relationship(self) -> pulumi.Input[str]:
        """
        lane rule label relationship.
        """
        return pulumi.get(self, "rule_tag_relationship")

    @rule_tag_relationship.setter
    def rule_tag_relationship(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_tag_relationship", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)


@pulumi.input_type
class _LaneRuleState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 lane_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]]] = None,
                 rule_tag_relationship: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering LaneRule resources.
        :param pulumi.Input[int] create_time: creation time.
        :param pulumi.Input[bool] enable: open state, true/false, default: false.
        :param pulumi.Input[str] lane_id: lane ID.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] remark: Lane rule notes.
        :param pulumi.Input[str] rule_id: Rule id.
        :param pulumi.Input[str] rule_name: lane rule name.
        :param pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]] rule_tag_lists: list of swimlane rule labels.
        :param pulumi.Input[str] rule_tag_relationship: lane rule label relationship.
        :param pulumi.Input[int] update_time: update time.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if lane_id is not None:
            pulumi.set(__self__, "lane_id", lane_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if rule_name is not None:
            pulumi.set(__self__, "rule_name", rule_name)
        if rule_tag_lists is not None:
            pulumi.set(__self__, "rule_tag_lists", rule_tag_lists)
        if rule_tag_relationship is not None:
            pulumi.set(__self__, "rule_tag_relationship", rule_tag_relationship)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[int]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        open state, true/false, default: false.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> Optional[pulumi.Input[str]]:
        """
        lane ID.
        """
        return pulumi.get(self, "lane_id")

    @lane_id.setter
    def lane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Lane rule notes.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule id.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        lane rule name.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleTagLists")
    def rule_tag_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]]]:
        """
        list of swimlane rule labels.
        """
        return pulumi.get(self, "rule_tag_lists")

    @rule_tag_lists.setter
    def rule_tag_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LaneRuleRuleTagListArgs']]]]):
        pulumi.set(self, "rule_tag_lists", value)

    @property
    @pulumi.getter(name="ruleTagRelationship")
    def rule_tag_relationship(self) -> Optional[pulumi.Input[str]]:
        """
        lane rule label relationship.
        """
        return pulumi.get(self, "rule_tag_relationship")

    @rule_tag_relationship.setter
    def rule_tag_relationship(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_tag_relationship", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


class LaneRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 lane_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneRuleRuleTagListArgs']]]]] = None,
                 rule_tag_relationship: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf lane_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        lane_rule = tencentcloud.tsf.LaneRule("laneRule",
            enable=False,
            lane_id="lane-abw5oo5a",
            remark="terraform-test",
            rule_name="terraform-rule-name",
            rule_tag_lists=[tencentcloud.tsf.LaneRuleRuleTagListArgs(
                tag_name="xxx",
                tag_operator="EQUAL",
                tag_value="222",
            )],
            rule_tag_relationship="RELEATION_AND")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable: open state, true/false, default: false.
        :param pulumi.Input[str] lane_id: lane ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] remark: Lane rule notes.
        :param pulumi.Input[str] rule_name: lane rule name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneRuleRuleTagListArgs']]]] rule_tag_lists: list of swimlane rule labels.
        :param pulumi.Input[str] rule_tag_relationship: lane rule label relationship.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LaneRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf lane_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        lane_rule = tencentcloud.tsf.LaneRule("laneRule",
            enable=False,
            lane_id="lane-abw5oo5a",
            remark="terraform-test",
            rule_name="terraform-rule-name",
            rule_tag_lists=[tencentcloud.tsf.LaneRuleRuleTagListArgs(
                tag_name="xxx",
                tag_operator="EQUAL",
                tag_value="222",
            )],
            rule_tag_relationship="RELEATION_AND")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param LaneRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LaneRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 lane_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rule_name: Optional[pulumi.Input[str]] = None,
                 rule_tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneRuleRuleTagListArgs']]]]] = None,
                 rule_tag_relationship: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LaneRuleArgs.__new__(LaneRuleArgs)

            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            if lane_id is None and not opts.urn:
                raise TypeError("Missing required property 'lane_id'")
            __props__.__dict__["lane_id"] = lane_id
            __props__.__dict__["program_id_lists"] = program_id_lists
            if remark is None and not opts.urn:
                raise TypeError("Missing required property 'remark'")
            __props__.__dict__["remark"] = remark
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            if rule_tag_lists is None and not opts.urn:
                raise TypeError("Missing required property 'rule_tag_lists'")
            __props__.__dict__["rule_tag_lists"] = rule_tag_lists
            if rule_tag_relationship is None and not opts.urn:
                raise TypeError("Missing required property 'rule_tag_relationship'")
            __props__.__dict__["rule_tag_relationship"] = rule_tag_relationship
            __props__.__dict__["create_time"] = None
            __props__.__dict__["priority"] = None
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["update_time"] = None
        super(LaneRule, __self__).__init__(
            'tencentcloud:Tsf/laneRule:LaneRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[int]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            lane_id: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            rule_name: Optional[pulumi.Input[str]] = None,
            rule_tag_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneRuleRuleTagListArgs']]]]] = None,
            rule_tag_relationship: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[int]] = None) -> 'LaneRule':
        """
        Get an existing LaneRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] create_time: creation time.
        :param pulumi.Input[bool] enable: open state, true/false, default: false.
        :param pulumi.Input[str] lane_id: lane ID.
        :param pulumi.Input[int] priority: Priority.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] remark: Lane rule notes.
        :param pulumi.Input[str] rule_id: Rule id.
        :param pulumi.Input[str] rule_name: lane rule name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneRuleRuleTagListArgs']]]] rule_tag_lists: list of swimlane rule labels.
        :param pulumi.Input[str] rule_tag_relationship: lane rule label relationship.
        :param pulumi.Input[int] update_time: update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LaneRuleState.__new__(_LaneRuleState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable"] = enable
        __props__.__dict__["lane_id"] = lane_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["program_id_lists"] = program_id_lists
        __props__.__dict__["remark"] = remark
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["rule_name"] = rule_name
        __props__.__dict__["rule_tag_lists"] = rule_tag_lists
        __props__.__dict__["rule_tag_relationship"] = rule_tag_relationship
        __props__.__dict__["update_time"] = update_time
        return LaneRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[int]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        open state, true/false, default: false.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> pulumi.Output[str]:
        """
        lane ID.
        """
        return pulumi.get(self, "lane_id")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        Lane rule notes.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        Rule id.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[str]:
        """
        lane rule name.
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleTagLists")
    def rule_tag_lists(self) -> pulumi.Output[Sequence['outputs.LaneRuleRuleTagList']]:
        """
        list of swimlane rule labels.
        """
        return pulumi.get(self, "rule_tag_lists")

    @property
    @pulumi.getter(name="ruleTagRelationship")
    def rule_tag_relationship(self) -> pulumi.Output[str]:
        """
        lane rule label relationship.
        """
        return pulumi.get(self, "rule_tag_relationship")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[int]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

