# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 cluster_type: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_remark_name: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 kubernete_api_server: Optional[pulumi.Input[str]] = None,
                 kubernete_native_secret: Optional[pulumi.Input[str]] = None,
                 kubernete_native_type: Optional[pulumi.Input[str]] = None,
                 max_cluster_service_num: Optional[pulumi.Input[int]] = None,
                 max_node_pod_num: Optional[pulumi.Input[int]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tsf_region_id: Optional[pulumi.Input[str]] = None,
                 tsf_zone_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[str] cluster_name: Cluster name.
        :param pulumi.Input[str] cluster_type: Cluster type.
        :param pulumi.Input[str] vpc_id: Vpc id.
        :param pulumi.Input[str] cluster_cidr: CIDR assigned to cluster containers and service IP.
        :param pulumi.Input[str] cluster_desc: cluster notes.
        :param pulumi.Input[str] cluster_remark_name: cluster remark name.
        :param pulumi.Input[str] cluster_version: cluster version.
        :param pulumi.Input[str] kubernete_api_server: api address.
        :param pulumi.Input[str] kubernete_native_secret: native secret.
        :param pulumi.Input[str] kubernete_native_type: `K`:kubeconfig, `S`:service account.
        :param pulumi.Input[int] max_cluster_service_num: The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[int] max_node_pod_num: The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[str] program_id: The dataset ID to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] tsf_region_id: The TSF region to which the cluster belongs.
        :param pulumi.Input[str] tsf_zone_id: The TSF availability zone to which the cluster belongs.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if cluster_desc is not None:
            pulumi.set(__self__, "cluster_desc", cluster_desc)
        if cluster_remark_name is not None:
            pulumi.set(__self__, "cluster_remark_name", cluster_remark_name)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if kubernete_api_server is not None:
            pulumi.set(__self__, "kubernete_api_server", kubernete_api_server)
        if kubernete_native_secret is not None:
            pulumi.set(__self__, "kubernete_native_secret", kubernete_native_secret)
        if kubernete_native_type is not None:
            pulumi.set(__self__, "kubernete_native_type", kubernete_native_type)
        if max_cluster_service_num is not None:
            pulumi.set(__self__, "max_cluster_service_num", max_cluster_service_num)
        if max_node_pod_num is not None:
            pulumi.set(__self__, "max_node_pod_num", max_node_pod_num)
        if program_id is not None:
            pulumi.set(__self__, "program_id", program_id)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tsf_region_id is not None:
            pulumi.set(__self__, "tsf_region_id", tsf_region_id)
        if tsf_zone_id is not None:
            pulumi.set(__self__, "tsf_zone_id", tsf_zone_id)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[str]:
        """
        Cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR assigned to cluster containers and service IP.
        """
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> Optional[pulumi.Input[str]]:
        """
        cluster notes.
        """
        return pulumi.get(self, "cluster_desc")

    @cluster_desc.setter
    def cluster_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_desc", value)

    @property
    @pulumi.getter(name="clusterRemarkName")
    def cluster_remark_name(self) -> Optional[pulumi.Input[str]]:
        """
        cluster remark name.
        """
        return pulumi.get(self, "cluster_remark_name")

    @cluster_remark_name.setter
    def cluster_remark_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_remark_name", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        cluster version.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="kuberneteApiServer")
    def kubernete_api_server(self) -> Optional[pulumi.Input[str]]:
        """
        api address.
        """
        return pulumi.get(self, "kubernete_api_server")

    @kubernete_api_server.setter
    def kubernete_api_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernete_api_server", value)

    @property
    @pulumi.getter(name="kuberneteNativeSecret")
    def kubernete_native_secret(self) -> Optional[pulumi.Input[str]]:
        """
        native secret.
        """
        return pulumi.get(self, "kubernete_native_secret")

    @kubernete_native_secret.setter
    def kubernete_native_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernete_native_secret", value)

    @property
    @pulumi.getter(name="kuberneteNativeType")
    def kubernete_native_type(self) -> Optional[pulumi.Input[str]]:
        """
        `K`:kubeconfig, `S`:service account.
        """
        return pulumi.get(self, "kubernete_native_type")

    @kubernete_native_type.setter
    def kubernete_native_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernete_native_type", value)

    @property
    @pulumi.getter(name="maxClusterServiceNum")
    def max_cluster_service_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
        """
        return pulumi.get(self, "max_cluster_service_num")

    @max_cluster_service_num.setter
    def max_cluster_service_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cluster_service_num", value)

    @property
    @pulumi.getter(name="maxNodePodNum")
    def max_node_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
        """
        return pulumi.get(self, "max_node_pod_num")

    @max_node_pod_num.setter
    def max_node_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_pod_num", value)

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> Optional[pulumi.Input[str]]:
        """
        The dataset ID to be bound.
        """
        return pulumi.get(self, "program_id")

    @program_id.setter
    def program_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_id", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tsfRegionId")
    def tsf_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The TSF region to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_region_id")

    @tsf_region_id.setter
    def tsf_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsf_region_id", value)

    @property
    @pulumi.getter(name="tsfZoneId")
    def tsf_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The TSF availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_zone_id")

    @tsf_zone_id.setter
    def tsf_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsf_zone_id", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 abnormal_group_count: Optional[pulumi.Input[int]] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_limit_cpu: Optional[pulumi.Input[str]] = None,
                 cluster_limit_mem: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_remark_name: Optional[pulumi.Input[str]] = None,
                 cluster_status: Optional[pulumi.Input[str]] = None,
                 cluster_total_cpu: Optional[pulumi.Input[float]] = None,
                 cluster_total_mem: Optional[pulumi.Input[float]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 cluster_used_cpu: Optional[pulumi.Input[float]] = None,
                 cluster_used_mem: Optional[pulumi.Input[float]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 delete_flag: Optional[pulumi.Input[bool]] = None,
                 delete_flag_reason: Optional[pulumi.Input[str]] = None,
                 group_count: Optional[pulumi.Input[int]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 kubernete_api_server: Optional[pulumi.Input[str]] = None,
                 kubernete_native_secret: Optional[pulumi.Input[str]] = None,
                 kubernete_native_type: Optional[pulumi.Input[str]] = None,
                 max_cluster_service_num: Optional[pulumi.Input[int]] = None,
                 max_node_pod_num: Optional[pulumi.Input[int]] = None,
                 normal_instance_count: Optional[pulumi.Input[int]] = None,
                 operation_infos: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoArgs']]]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_group_count: Optional[pulumi.Input[int]] = None,
                 run_instance_count: Optional[pulumi.Input[int]] = None,
                 run_service_instance_count: Optional[pulumi.Input[int]] = None,
                 stop_group_count: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tsf_region_id: Optional[pulumi.Input[str]] = None,
                 tsf_region_name: Optional[pulumi.Input[str]] = None,
                 tsf_zone_id: Optional[pulumi.Input[str]] = None,
                 tsf_zone_name: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[int] abnormal_group_count: Abnormal number of deployment groups.
        :param pulumi.Input[str] cluster_cidr: CIDR assigned to cluster containers and service IP.
        :param pulumi.Input[str] cluster_desc: cluster notes.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cluster_limit_cpu: Cluster remaining cpu limit.
        :param pulumi.Input[str] cluster_limit_mem: Cluster remaining memory limit.
        :param pulumi.Input[str] cluster_name: Cluster name.
        :param pulumi.Input[str] cluster_remark_name: cluster remark name.
        :param pulumi.Input[str] cluster_status: cluster status.
        :param pulumi.Input[float] cluster_total_cpu: The total CPU of the cluster, unit: core.
        :param pulumi.Input[float] cluster_total_mem: The total memory of the cluster, unit: G.
        :param pulumi.Input[str] cluster_type: Cluster type.
        :param pulumi.Input[float] cluster_used_cpu: CPU used by the cluster, unit: core.
        :param pulumi.Input[float] cluster_used_mem: The memory used by the cluster, unit: G.
        :param pulumi.Input[str] cluster_version: cluster version.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[bool] delete_flag: Delete flag: `true`: can be deleted; `false`: can not be deleted.
        :param pulumi.Input[str] delete_flag_reason: Reasons why clusters cannot be deleted.
        :param pulumi.Input[int] group_count: Total number of deployment groups.
        :param pulumi.Input[int] instance_count: Number of cluster machine instances.
        :param pulumi.Input[str] kubernete_api_server: api address.
        :param pulumi.Input[str] kubernete_native_secret: native secret.
        :param pulumi.Input[str] kubernete_native_type: `K`:kubeconfig, `S`:service account.
        :param pulumi.Input[int] max_cluster_service_num: The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[int] max_node_pod_num: The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[int] normal_instance_count: The number of machine instances in the normal state of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoArgs']]] operation_infos: Control information for buttons on the front end.
        :param pulumi.Input[str] program_id: The dataset ID to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[int] run_group_count: Number of Deployment Groups in progress.
        :param pulumi.Input[int] run_instance_count: Number of machine instances running in the cluster.
        :param pulumi.Input[int] run_service_instance_count: Number of running service instances.
        :param pulumi.Input[int] stop_group_count: Number of deployment groups in stop.
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] tsf_region_id: The TSF region to which the cluster belongs.
        :param pulumi.Input[str] tsf_region_name: Name of the TSF region to which the cluster belongs.
        :param pulumi.Input[str] tsf_zone_id: The TSF availability zone to which the cluster belongs.
        :param pulumi.Input[str] tsf_zone_name: The name of the TSF availability zone to which the cluster belongs.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] vpc_id: Vpc id.
        """
        if abnormal_group_count is not None:
            pulumi.set(__self__, "abnormal_group_count", abnormal_group_count)
        if cluster_cidr is not None:
            pulumi.set(__self__, "cluster_cidr", cluster_cidr)
        if cluster_desc is not None:
            pulumi.set(__self__, "cluster_desc", cluster_desc)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_limit_cpu is not None:
            pulumi.set(__self__, "cluster_limit_cpu", cluster_limit_cpu)
        if cluster_limit_mem is not None:
            pulumi.set(__self__, "cluster_limit_mem", cluster_limit_mem)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cluster_remark_name is not None:
            pulumi.set(__self__, "cluster_remark_name", cluster_remark_name)
        if cluster_status is not None:
            pulumi.set(__self__, "cluster_status", cluster_status)
        if cluster_total_cpu is not None:
            pulumi.set(__self__, "cluster_total_cpu", cluster_total_cpu)
        if cluster_total_mem is not None:
            pulumi.set(__self__, "cluster_total_mem", cluster_total_mem)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if cluster_used_cpu is not None:
            pulumi.set(__self__, "cluster_used_cpu", cluster_used_cpu)
        if cluster_used_mem is not None:
            pulumi.set(__self__, "cluster_used_mem", cluster_used_mem)
        if cluster_version is not None:
            pulumi.set(__self__, "cluster_version", cluster_version)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if delete_flag is not None:
            pulumi.set(__self__, "delete_flag", delete_flag)
        if delete_flag_reason is not None:
            pulumi.set(__self__, "delete_flag_reason", delete_flag_reason)
        if group_count is not None:
            pulumi.set(__self__, "group_count", group_count)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if kubernete_api_server is not None:
            pulumi.set(__self__, "kubernete_api_server", kubernete_api_server)
        if kubernete_native_secret is not None:
            pulumi.set(__self__, "kubernete_native_secret", kubernete_native_secret)
        if kubernete_native_type is not None:
            pulumi.set(__self__, "kubernete_native_type", kubernete_native_type)
        if max_cluster_service_num is not None:
            pulumi.set(__self__, "max_cluster_service_num", max_cluster_service_num)
        if max_node_pod_num is not None:
            pulumi.set(__self__, "max_node_pod_num", max_node_pod_num)
        if normal_instance_count is not None:
            pulumi.set(__self__, "normal_instance_count", normal_instance_count)
        if operation_infos is not None:
            pulumi.set(__self__, "operation_infos", operation_infos)
        if program_id is not None:
            pulumi.set(__self__, "program_id", program_id)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if run_group_count is not None:
            pulumi.set(__self__, "run_group_count", run_group_count)
        if run_instance_count is not None:
            pulumi.set(__self__, "run_instance_count", run_instance_count)
        if run_service_instance_count is not None:
            pulumi.set(__self__, "run_service_instance_count", run_service_instance_count)
        if stop_group_count is not None:
            pulumi.set(__self__, "stop_group_count", stop_group_count)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tsf_region_id is not None:
            pulumi.set(__self__, "tsf_region_id", tsf_region_id)
        if tsf_region_name is not None:
            pulumi.set(__self__, "tsf_region_name", tsf_region_name)
        if tsf_zone_id is not None:
            pulumi.set(__self__, "tsf_zone_id", tsf_zone_id)
        if tsf_zone_name is not None:
            pulumi.set(__self__, "tsf_zone_name", tsf_zone_name)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="abnormalGroupCount")
    def abnormal_group_count(self) -> Optional[pulumi.Input[int]]:
        """
        Abnormal number of deployment groups.
        """
        return pulumi.get(self, "abnormal_group_count")

    @abnormal_group_count.setter
    def abnormal_group_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "abnormal_group_count", value)

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR assigned to cluster containers and service IP.
        """
        return pulumi.get(self, "cluster_cidr")

    @cluster_cidr.setter
    def cluster_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_cidr", value)

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> Optional[pulumi.Input[str]]:
        """
        cluster notes.
        """
        return pulumi.get(self, "cluster_desc")

    @cluster_desc.setter
    def cluster_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_desc", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterLimitCpu")
    def cluster_limit_cpu(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster remaining cpu limit.
        """
        return pulumi.get(self, "cluster_limit_cpu")

    @cluster_limit_cpu.setter
    def cluster_limit_cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_limit_cpu", value)

    @property
    @pulumi.getter(name="clusterLimitMem")
    def cluster_limit_mem(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster remaining memory limit.
        """
        return pulumi.get(self, "cluster_limit_mem")

    @cluster_limit_mem.setter
    def cluster_limit_mem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_limit_mem", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="clusterRemarkName")
    def cluster_remark_name(self) -> Optional[pulumi.Input[str]]:
        """
        cluster remark name.
        """
        return pulumi.get(self, "cluster_remark_name")

    @cluster_remark_name.setter
    def cluster_remark_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_remark_name", value)

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> Optional[pulumi.Input[str]]:
        """
        cluster status.
        """
        return pulumi.get(self, "cluster_status")

    @cluster_status.setter
    def cluster_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_status", value)

    @property
    @pulumi.getter(name="clusterTotalCpu")
    def cluster_total_cpu(self) -> Optional[pulumi.Input[float]]:
        """
        The total CPU of the cluster, unit: core.
        """
        return pulumi.get(self, "cluster_total_cpu")

    @cluster_total_cpu.setter
    def cluster_total_cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cluster_total_cpu", value)

    @property
    @pulumi.getter(name="clusterTotalMem")
    def cluster_total_mem(self) -> Optional[pulumi.Input[float]]:
        """
        The total memory of the cluster, unit: G.
        """
        return pulumi.get(self, "cluster_total_mem")

    @cluster_total_mem.setter
    def cluster_total_mem(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cluster_total_mem", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="clusterUsedCpu")
    def cluster_used_cpu(self) -> Optional[pulumi.Input[float]]:
        """
        CPU used by the cluster, unit: core.
        """
        return pulumi.get(self, "cluster_used_cpu")

    @cluster_used_cpu.setter
    def cluster_used_cpu(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cluster_used_cpu", value)

    @property
    @pulumi.getter(name="clusterUsedMem")
    def cluster_used_mem(self) -> Optional[pulumi.Input[float]]:
        """
        The memory used by the cluster, unit: G.
        """
        return pulumi.get(self, "cluster_used_mem")

    @cluster_used_mem.setter
    def cluster_used_mem(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cluster_used_mem", value)

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> Optional[pulumi.Input[str]]:
        """
        cluster version.
        """
        return pulumi.get(self, "cluster_version")

    @cluster_version.setter
    def cluster_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_version", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete flag: `true`: can be deleted; `false`: can not be deleted.
        """
        return pulumi.get(self, "delete_flag")

    @delete_flag.setter
    def delete_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_flag", value)

    @property
    @pulumi.getter(name="deleteFlagReason")
    def delete_flag_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reasons why clusters cannot be deleted.
        """
        return pulumi.get(self, "delete_flag_reason")

    @delete_flag_reason.setter
    def delete_flag_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_flag_reason", value)

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of deployment groups.
        """
        return pulumi.get(self, "group_count")

    @group_count.setter
    def group_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_count", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cluster machine instances.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="kuberneteApiServer")
    def kubernete_api_server(self) -> Optional[pulumi.Input[str]]:
        """
        api address.
        """
        return pulumi.get(self, "kubernete_api_server")

    @kubernete_api_server.setter
    def kubernete_api_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernete_api_server", value)

    @property
    @pulumi.getter(name="kuberneteNativeSecret")
    def kubernete_native_secret(self) -> Optional[pulumi.Input[str]]:
        """
        native secret.
        """
        return pulumi.get(self, "kubernete_native_secret")

    @kubernete_native_secret.setter
    def kubernete_native_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernete_native_secret", value)

    @property
    @pulumi.getter(name="kuberneteNativeType")
    def kubernete_native_type(self) -> Optional[pulumi.Input[str]]:
        """
        `K`:kubeconfig, `S`:service account.
        """
        return pulumi.get(self, "kubernete_native_type")

    @kubernete_native_type.setter
    def kubernete_native_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kubernete_native_type", value)

    @property
    @pulumi.getter(name="maxClusterServiceNum")
    def max_cluster_service_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
        """
        return pulumi.get(self, "max_cluster_service_num")

    @max_cluster_service_num.setter
    def max_cluster_service_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_cluster_service_num", value)

    @property
    @pulumi.getter(name="maxNodePodNum")
    def max_node_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
        """
        return pulumi.get(self, "max_node_pod_num")

    @max_node_pod_num.setter
    def max_node_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_node_pod_num", value)

    @property
    @pulumi.getter(name="normalInstanceCount")
    def normal_instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of machine instances in the normal state of the cluster.
        """
        return pulumi.get(self, "normal_instance_count")

    @normal_instance_count.setter
    def normal_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "normal_instance_count", value)

    @property
    @pulumi.getter(name="operationInfos")
    def operation_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoArgs']]]]:
        """
        Control information for buttons on the front end.
        """
        return pulumi.get(self, "operation_infos")

    @operation_infos.setter
    def operation_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterOperationInfoArgs']]]]):
        pulumi.set(self, "operation_infos", value)

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> Optional[pulumi.Input[str]]:
        """
        The dataset ID to be bound.
        """
        return pulumi.get(self, "program_id")

    @program_id.setter
    def program_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_id", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="runGroupCount")
    def run_group_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Deployment Groups in progress.
        """
        return pulumi.get(self, "run_group_count")

    @run_group_count.setter
    def run_group_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_group_count", value)

    @property
    @pulumi.getter(name="runInstanceCount")
    def run_instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of machine instances running in the cluster.
        """
        return pulumi.get(self, "run_instance_count")

    @run_instance_count.setter
    def run_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_instance_count", value)

    @property
    @pulumi.getter(name="runServiceInstanceCount")
    def run_service_instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of running service instances.
        """
        return pulumi.get(self, "run_service_instance_count")

    @run_service_instance_count.setter
    def run_service_instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "run_service_instance_count", value)

    @property
    @pulumi.getter(name="stopGroupCount")
    def stop_group_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of deployment groups in stop.
        """
        return pulumi.get(self, "stop_group_count")

    @stop_group_count.setter
    def stop_group_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stop_group_count", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tsfRegionId")
    def tsf_region_id(self) -> Optional[pulumi.Input[str]]:
        """
        The TSF region to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_region_id")

    @tsf_region_id.setter
    def tsf_region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsf_region_id", value)

    @property
    @pulumi.getter(name="tsfRegionName")
    def tsf_region_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the TSF region to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_region_name")

    @tsf_region_name.setter
    def tsf_region_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsf_region_name", value)

    @property
    @pulumi.getter(name="tsfZoneId")
    def tsf_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        The TSF availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_zone_id")

    @tsf_zone_id.setter
    def tsf_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsf_zone_id", value)

    @property
    @pulumi.getter(name="tsfZoneName")
    def tsf_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the TSF availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_zone_name")

    @tsf_zone_name.setter
    def tsf_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsf_zone_name", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_remark_name: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 kubernete_api_server: Optional[pulumi.Input[str]] = None,
                 kubernete_native_secret: Optional[pulumi.Input[str]] = None,
                 kubernete_native_type: Optional[pulumi.Input[str]] = None,
                 max_cluster_service_num: Optional[pulumi.Input[int]] = None,
                 max_node_pod_num: Optional[pulumi.Input[int]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tsf_region_id: Optional[pulumi.Input[str]] = None,
                 tsf_zone_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf cluster

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster = tencentcloud.tsf.Cluster("cluster",
            cluster_cidr="9.165.120.0/24",
            cluster_desc="test",
            cluster_name="terraform-test",
            cluster_type="C",
            cluster_version="1.18.4",
            max_cluster_service_num=128,
            max_node_pod_num=32,
            tags={
                "createdBy": "terraform",
            },
            tsf_region_id="ap-guangzhou",
            vpc_id="vpc-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_cidr: CIDR assigned to cluster containers and service IP.
        :param pulumi.Input[str] cluster_desc: cluster notes.
        :param pulumi.Input[str] cluster_name: Cluster name.
        :param pulumi.Input[str] cluster_remark_name: cluster remark name.
        :param pulumi.Input[str] cluster_type: Cluster type.
        :param pulumi.Input[str] cluster_version: cluster version.
        :param pulumi.Input[str] kubernete_api_server: api address.
        :param pulumi.Input[str] kubernete_native_secret: native secret.
        :param pulumi.Input[str] kubernete_native_type: `K`:kubeconfig, `S`:service account.
        :param pulumi.Input[int] max_cluster_service_num: The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[int] max_node_pod_num: The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[str] program_id: The dataset ID to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] tsf_region_id: The TSF region to which the cluster belongs.
        :param pulumi.Input[str] tsf_zone_id: The TSF availability zone to which the cluster belongs.
        :param pulumi.Input[str] vpc_id: Vpc id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf cluster

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster = tencentcloud.tsf.Cluster("cluster",
            cluster_cidr="9.165.120.0/24",
            cluster_desc="test",
            cluster_name="terraform-test",
            cluster_type="C",
            cluster_version="1.18.4",
            max_cluster_service_num=128,
            max_node_pod_num=32,
            tags={
                "createdBy": "terraform",
            },
            tsf_region_id="ap-guangzhou",
            vpc_id="vpc-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_cidr: Optional[pulumi.Input[str]] = None,
                 cluster_desc: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cluster_remark_name: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 cluster_version: Optional[pulumi.Input[str]] = None,
                 kubernete_api_server: Optional[pulumi.Input[str]] = None,
                 kubernete_native_secret: Optional[pulumi.Input[str]] = None,
                 kubernete_native_type: Optional[pulumi.Input[str]] = None,
                 max_cluster_service_num: Optional[pulumi.Input[int]] = None,
                 max_node_pod_num: Optional[pulumi.Input[int]] = None,
                 program_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 tsf_region_id: Optional[pulumi.Input[str]] = None,
                 tsf_zone_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["cluster_cidr"] = cluster_cidr
            __props__.__dict__["cluster_desc"] = cluster_desc
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["cluster_remark_name"] = cluster_remark_name
            if cluster_type is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_type'")
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["cluster_version"] = cluster_version
            __props__.__dict__["kubernete_api_server"] = kubernete_api_server
            __props__.__dict__["kubernete_native_secret"] = kubernete_native_secret
            __props__.__dict__["kubernete_native_type"] = kubernete_native_type
            __props__.__dict__["max_cluster_service_num"] = max_cluster_service_num
            __props__.__dict__["max_node_pod_num"] = max_node_pod_num
            __props__.__dict__["program_id"] = program_id
            __props__.__dict__["program_id_lists"] = program_id_lists
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tsf_region_id"] = tsf_region_id
            __props__.__dict__["tsf_zone_id"] = tsf_zone_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["abnormal_group_count"] = None
            __props__.__dict__["cluster_id"] = None
            __props__.__dict__["cluster_limit_cpu"] = None
            __props__.__dict__["cluster_limit_mem"] = None
            __props__.__dict__["cluster_status"] = None
            __props__.__dict__["cluster_total_cpu"] = None
            __props__.__dict__["cluster_total_mem"] = None
            __props__.__dict__["cluster_used_cpu"] = None
            __props__.__dict__["cluster_used_mem"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["delete_flag"] = None
            __props__.__dict__["delete_flag_reason"] = None
            __props__.__dict__["group_count"] = None
            __props__.__dict__["instance_count"] = None
            __props__.__dict__["normal_instance_count"] = None
            __props__.__dict__["operation_infos"] = None
            __props__.__dict__["run_group_count"] = None
            __props__.__dict__["run_instance_count"] = None
            __props__.__dict__["run_service_instance_count"] = None
            __props__.__dict__["stop_group_count"] = None
            __props__.__dict__["tsf_region_name"] = None
            __props__.__dict__["tsf_zone_name"] = None
            __props__.__dict__["update_time"] = None
        super(Cluster, __self__).__init__(
            'tencentcloud:Tsf/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abnormal_group_count: Optional[pulumi.Input[int]] = None,
            cluster_cidr: Optional[pulumi.Input[str]] = None,
            cluster_desc: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cluster_limit_cpu: Optional[pulumi.Input[str]] = None,
            cluster_limit_mem: Optional[pulumi.Input[str]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            cluster_remark_name: Optional[pulumi.Input[str]] = None,
            cluster_status: Optional[pulumi.Input[str]] = None,
            cluster_total_cpu: Optional[pulumi.Input[float]] = None,
            cluster_total_mem: Optional[pulumi.Input[float]] = None,
            cluster_type: Optional[pulumi.Input[str]] = None,
            cluster_used_cpu: Optional[pulumi.Input[float]] = None,
            cluster_used_mem: Optional[pulumi.Input[float]] = None,
            cluster_version: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            delete_flag: Optional[pulumi.Input[bool]] = None,
            delete_flag_reason: Optional[pulumi.Input[str]] = None,
            group_count: Optional[pulumi.Input[int]] = None,
            instance_count: Optional[pulumi.Input[int]] = None,
            kubernete_api_server: Optional[pulumi.Input[str]] = None,
            kubernete_native_secret: Optional[pulumi.Input[str]] = None,
            kubernete_native_type: Optional[pulumi.Input[str]] = None,
            max_cluster_service_num: Optional[pulumi.Input[int]] = None,
            max_node_pod_num: Optional[pulumi.Input[int]] = None,
            normal_instance_count: Optional[pulumi.Input[int]] = None,
            operation_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterOperationInfoArgs']]]]] = None,
            program_id: Optional[pulumi.Input[str]] = None,
            program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            run_group_count: Optional[pulumi.Input[int]] = None,
            run_instance_count: Optional[pulumi.Input[int]] = None,
            run_service_instance_count: Optional[pulumi.Input[int]] = None,
            stop_group_count: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            tsf_region_id: Optional[pulumi.Input[str]] = None,
            tsf_region_name: Optional[pulumi.Input[str]] = None,
            tsf_zone_id: Optional[pulumi.Input[str]] = None,
            tsf_zone_name: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] abnormal_group_count: Abnormal number of deployment groups.
        :param pulumi.Input[str] cluster_cidr: CIDR assigned to cluster containers and service IP.
        :param pulumi.Input[str] cluster_desc: cluster notes.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cluster_limit_cpu: Cluster remaining cpu limit.
        :param pulumi.Input[str] cluster_limit_mem: Cluster remaining memory limit.
        :param pulumi.Input[str] cluster_name: Cluster name.
        :param pulumi.Input[str] cluster_remark_name: cluster remark name.
        :param pulumi.Input[str] cluster_status: cluster status.
        :param pulumi.Input[float] cluster_total_cpu: The total CPU of the cluster, unit: core.
        :param pulumi.Input[float] cluster_total_mem: The total memory of the cluster, unit: G.
        :param pulumi.Input[str] cluster_type: Cluster type.
        :param pulumi.Input[float] cluster_used_cpu: CPU used by the cluster, unit: core.
        :param pulumi.Input[float] cluster_used_mem: The memory used by the cluster, unit: G.
        :param pulumi.Input[str] cluster_version: cluster version.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[bool] delete_flag: Delete flag: `true`: can be deleted; `false`: can not be deleted.
        :param pulumi.Input[str] delete_flag_reason: Reasons why clusters cannot be deleted.
        :param pulumi.Input[int] group_count: Total number of deployment groups.
        :param pulumi.Input[int] instance_count: Number of cluster machine instances.
        :param pulumi.Input[str] kubernete_api_server: api address.
        :param pulumi.Input[str] kubernete_native_secret: native secret.
        :param pulumi.Input[str] kubernete_native_type: `K`:kubeconfig, `S`:service account.
        :param pulumi.Input[int] max_cluster_service_num: The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[int] max_node_pod_num: The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
        :param pulumi.Input[int] normal_instance_count: The number of machine instances in the normal state of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClusterOperationInfoArgs']]]] operation_infos: Control information for buttons on the front end.
        :param pulumi.Input[str] program_id: The dataset ID to be bound.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[int] run_group_count: Number of Deployment Groups in progress.
        :param pulumi.Input[int] run_instance_count: Number of machine instances running in the cluster.
        :param pulumi.Input[int] run_service_instance_count: Number of running service instances.
        :param pulumi.Input[int] stop_group_count: Number of deployment groups in stop.
        :param pulumi.Input[str] subnet_id: Subnet id.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] tsf_region_id: The TSF region to which the cluster belongs.
        :param pulumi.Input[str] tsf_region_name: Name of the TSF region to which the cluster belongs.
        :param pulumi.Input[str] tsf_zone_id: The TSF availability zone to which the cluster belongs.
        :param pulumi.Input[str] tsf_zone_name: The name of the TSF availability zone to which the cluster belongs.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] vpc_id: Vpc id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["abnormal_group_count"] = abnormal_group_count
        __props__.__dict__["cluster_cidr"] = cluster_cidr
        __props__.__dict__["cluster_desc"] = cluster_desc
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_limit_cpu"] = cluster_limit_cpu
        __props__.__dict__["cluster_limit_mem"] = cluster_limit_mem
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cluster_remark_name"] = cluster_remark_name
        __props__.__dict__["cluster_status"] = cluster_status
        __props__.__dict__["cluster_total_cpu"] = cluster_total_cpu
        __props__.__dict__["cluster_total_mem"] = cluster_total_mem
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["cluster_used_cpu"] = cluster_used_cpu
        __props__.__dict__["cluster_used_mem"] = cluster_used_mem
        __props__.__dict__["cluster_version"] = cluster_version
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["delete_flag"] = delete_flag
        __props__.__dict__["delete_flag_reason"] = delete_flag_reason
        __props__.__dict__["group_count"] = group_count
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["kubernete_api_server"] = kubernete_api_server
        __props__.__dict__["kubernete_native_secret"] = kubernete_native_secret
        __props__.__dict__["kubernete_native_type"] = kubernete_native_type
        __props__.__dict__["max_cluster_service_num"] = max_cluster_service_num
        __props__.__dict__["max_node_pod_num"] = max_node_pod_num
        __props__.__dict__["normal_instance_count"] = normal_instance_count
        __props__.__dict__["operation_infos"] = operation_infos
        __props__.__dict__["program_id"] = program_id
        __props__.__dict__["program_id_lists"] = program_id_lists
        __props__.__dict__["run_group_count"] = run_group_count
        __props__.__dict__["run_instance_count"] = run_instance_count
        __props__.__dict__["run_service_instance_count"] = run_service_instance_count
        __props__.__dict__["stop_group_count"] = stop_group_count
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tsf_region_id"] = tsf_region_id
        __props__.__dict__["tsf_region_name"] = tsf_region_name
        __props__.__dict__["tsf_zone_id"] = tsf_zone_id
        __props__.__dict__["tsf_zone_name"] = tsf_zone_name
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["vpc_id"] = vpc_id
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abnormalGroupCount")
    def abnormal_group_count(self) -> pulumi.Output[int]:
        """
        Abnormal number of deployment groups.
        """
        return pulumi.get(self, "abnormal_group_count")

    @property
    @pulumi.getter(name="clusterCidr")
    def cluster_cidr(self) -> pulumi.Output[Optional[str]]:
        """
        CIDR assigned to cluster containers and service IP.
        """
        return pulumi.get(self, "cluster_cidr")

    @property
    @pulumi.getter(name="clusterDesc")
    def cluster_desc(self) -> pulumi.Output[Optional[str]]:
        """
        cluster notes.
        """
        return pulumi.get(self, "cluster_desc")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterLimitCpu")
    def cluster_limit_cpu(self) -> pulumi.Output[str]:
        """
        Cluster remaining cpu limit.
        """
        return pulumi.get(self, "cluster_limit_cpu")

    @property
    @pulumi.getter(name="clusterLimitMem")
    def cluster_limit_mem(self) -> pulumi.Output[str]:
        """
        Cluster remaining memory limit.
        """
        return pulumi.get(self, "cluster_limit_mem")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="clusterRemarkName")
    def cluster_remark_name(self) -> pulumi.Output[str]:
        """
        cluster remark name.
        """
        return pulumi.get(self, "cluster_remark_name")

    @property
    @pulumi.getter(name="clusterStatus")
    def cluster_status(self) -> pulumi.Output[str]:
        """
        cluster status.
        """
        return pulumi.get(self, "cluster_status")

    @property
    @pulumi.getter(name="clusterTotalCpu")
    def cluster_total_cpu(self) -> pulumi.Output[float]:
        """
        The total CPU of the cluster, unit: core.
        """
        return pulumi.get(self, "cluster_total_cpu")

    @property
    @pulumi.getter(name="clusterTotalMem")
    def cluster_total_mem(self) -> pulumi.Output[float]:
        """
        The total memory of the cluster, unit: G.
        """
        return pulumi.get(self, "cluster_total_mem")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[str]:
        """
        Cluster type.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="clusterUsedCpu")
    def cluster_used_cpu(self) -> pulumi.Output[float]:
        """
        CPU used by the cluster, unit: core.
        """
        return pulumi.get(self, "cluster_used_cpu")

    @property
    @pulumi.getter(name="clusterUsedMem")
    def cluster_used_mem(self) -> pulumi.Output[float]:
        """
        The memory used by the cluster, unit: G.
        """
        return pulumi.get(self, "cluster_used_mem")

    @property
    @pulumi.getter(name="clusterVersion")
    def cluster_version(self) -> pulumi.Output[Optional[str]]:
        """
        cluster version.
        """
        return pulumi.get(self, "cluster_version")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deleteFlag")
    def delete_flag(self) -> pulumi.Output[bool]:
        """
        Delete flag: `true`: can be deleted; `false`: can not be deleted.
        """
        return pulumi.get(self, "delete_flag")

    @property
    @pulumi.getter(name="deleteFlagReason")
    def delete_flag_reason(self) -> pulumi.Output[str]:
        """
        Reasons why clusters cannot be deleted.
        """
        return pulumi.get(self, "delete_flag_reason")

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> pulumi.Output[int]:
        """
        Total number of deployment groups.
        """
        return pulumi.get(self, "group_count")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[int]:
        """
        Number of cluster machine instances.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="kuberneteApiServer")
    def kubernete_api_server(self) -> pulumi.Output[Optional[str]]:
        """
        api address.
        """
        return pulumi.get(self, "kubernete_api_server")

    @property
    @pulumi.getter(name="kuberneteNativeSecret")
    def kubernete_native_secret(self) -> pulumi.Output[Optional[str]]:
        """
        native secret.
        """
        return pulumi.get(self, "kubernete_native_secret")

    @property
    @pulumi.getter(name="kuberneteNativeType")
    def kubernete_native_type(self) -> pulumi.Output[Optional[str]]:
        """
        `K`:kubeconfig, `S`:service account.
        """
        return pulumi.get(self, "kubernete_native_type")

    @property
    @pulumi.getter(name="maxClusterServiceNum")
    def max_cluster_service_num(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
        """
        return pulumi.get(self, "max_cluster_service_num")

    @property
    @pulumi.getter(name="maxNodePodNum")
    def max_node_pod_num(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
        """
        return pulumi.get(self, "max_node_pod_num")

    @property
    @pulumi.getter(name="normalInstanceCount")
    def normal_instance_count(self) -> pulumi.Output[int]:
        """
        The number of machine instances in the normal state of the cluster.
        """
        return pulumi.get(self, "normal_instance_count")

    @property
    @pulumi.getter(name="operationInfos")
    def operation_infos(self) -> pulumi.Output[Sequence['outputs.ClusterOperationInfo']]:
        """
        Control information for buttons on the front end.
        """
        return pulumi.get(self, "operation_infos")

    @property
    @pulumi.getter(name="programId")
    def program_id(self) -> pulumi.Output[Optional[str]]:
        """
        The dataset ID to be bound.
        """
        return pulumi.get(self, "program_id")

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @property
    @pulumi.getter(name="runGroupCount")
    def run_group_count(self) -> pulumi.Output[int]:
        """
        Number of Deployment Groups in progress.
        """
        return pulumi.get(self, "run_group_count")

    @property
    @pulumi.getter(name="runInstanceCount")
    def run_instance_count(self) -> pulumi.Output[int]:
        """
        Number of machine instances running in the cluster.
        """
        return pulumi.get(self, "run_instance_count")

    @property
    @pulumi.getter(name="runServiceInstanceCount")
    def run_service_instance_count(self) -> pulumi.Output[int]:
        """
        Number of running service instances.
        """
        return pulumi.get(self, "run_service_instance_count")

    @property
    @pulumi.getter(name="stopGroupCount")
    def stop_group_count(self) -> pulumi.Output[int]:
        """
        Number of deployment groups in stop.
        """
        return pulumi.get(self, "stop_group_count")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        Subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tsfRegionId")
    def tsf_region_id(self) -> pulumi.Output[Optional[str]]:
        """
        The TSF region to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_region_id")

    @property
    @pulumi.getter(name="tsfRegionName")
    def tsf_region_name(self) -> pulumi.Output[str]:
        """
        Name of the TSF region to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_region_name")

    @property
    @pulumi.getter(name="tsfZoneId")
    def tsf_zone_id(self) -> pulumi.Output[Optional[str]]:
        """
        The TSF availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_zone_id")

    @property
    @pulumi.getter(name="tsfZoneName")
    def tsf_zone_name(self) -> pulumi.Output[str]:
        """
        The name of the TSF availability zone to which the cluster belongs.
        """
        return pulumi.get(self, "tsf_zone_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Vpc id.
        """
        return pulumi.get(self, "vpc_id")

