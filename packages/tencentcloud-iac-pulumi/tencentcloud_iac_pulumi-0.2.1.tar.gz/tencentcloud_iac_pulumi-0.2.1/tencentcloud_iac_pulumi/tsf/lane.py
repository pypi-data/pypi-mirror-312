# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LaneArgs', 'Lane']

@pulumi.input_type
class LaneArgs:
    def __init__(__self__, *,
                 lane_group_lists: pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]],
                 lane_name: pulumi.Input[str],
                 remark: pulumi.Input[str],
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Lane resource.
        :param pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]] lane_group_lists: Swimlane Deployment Group Information.
        :param pulumi.Input[str] lane_name: Lane name.
        :param pulumi.Input[str] remark: Lane Remarks.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        """
        pulumi.set(__self__, "lane_group_lists", lane_group_lists)
        pulumi.set(__self__, "lane_name", lane_name)
        pulumi.set(__self__, "remark", remark)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)

    @property
    @pulumi.getter(name="laneGroupLists")
    def lane_group_lists(self) -> pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]]:
        """
        Swimlane Deployment Group Information.
        """
        return pulumi.get(self, "lane_group_lists")

    @lane_group_lists.setter
    def lane_group_lists(self, value: pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]]):
        pulumi.set(self, "lane_group_lists", value)

    @property
    @pulumi.getter(name="laneName")
    def lane_name(self) -> pulumi.Input[str]:
        """
        Lane name.
        """
        return pulumi.get(self, "lane_name")

    @lane_name.setter
    def lane_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "lane_name", value)

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Input[str]:
        """
        Lane Remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: pulumi.Input[str]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)


@pulumi.input_type
class _LaneState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[int]] = None,
                 entrance: Optional[pulumi.Input[bool]] = None,
                 lane_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]]] = None,
                 lane_id: Optional[pulumi.Input[str]] = None,
                 lane_name: Optional[pulumi.Input[str]] = None,
                 namespace_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Lane resources.
        :param pulumi.Input[int] create_time: creation time.
        :param pulumi.Input[bool] entrance: Whether to enter the application.
        :param pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]] lane_group_lists: Swimlane Deployment Group Information.
        :param pulumi.Input[str] lane_id: Lane ID.
        :param pulumi.Input[str] lane_name: Lane name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespace_id_lists: A list of namespaces to which the swimlane has associated deployment groups.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] remark: Lane Remarks.
        :param pulumi.Input[int] update_time: update time.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if entrance is not None:
            pulumi.set(__self__, "entrance", entrance)
        if lane_group_lists is not None:
            pulumi.set(__self__, "lane_group_lists", lane_group_lists)
        if lane_id is not None:
            pulumi.set(__self__, "lane_id", lane_id)
        if lane_name is not None:
            pulumi.set(__self__, "lane_name", lane_name)
        if namespace_id_lists is not None:
            pulumi.set(__self__, "namespace_id_lists", namespace_id_lists)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[int]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def entrance(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enter the application.
        """
        return pulumi.get(self, "entrance")

    @entrance.setter
    def entrance(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "entrance", value)

    @property
    @pulumi.getter(name="laneGroupLists")
    def lane_group_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]]]:
        """
        Swimlane Deployment Group Information.
        """
        return pulumi.get(self, "lane_group_lists")

    @lane_group_lists.setter
    def lane_group_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LaneLaneGroupListArgs']]]]):
        pulumi.set(self, "lane_group_lists", value)

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> Optional[pulumi.Input[str]]:
        """
        Lane ID.
        """
        return pulumi.get(self, "lane_id")

    @lane_id.setter
    def lane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_id", value)

    @property
    @pulumi.getter(name="laneName")
    def lane_name(self) -> Optional[pulumi.Input[str]]:
        """
        Lane name.
        """
        return pulumi.get(self, "lane_name")

    @lane_name.setter
    def lane_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lane_name", value)

    @property
    @pulumi.getter(name="namespaceIdLists")
    def namespace_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of namespaces to which the swimlane has associated deployment groups.
        """
        return pulumi.get(self, "namespace_id_lists")

    @namespace_id_lists.setter
    def namespace_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespace_id_lists", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Lane Remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[int]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_time", value)


class Lane(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lane_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneLaneGroupListArgs']]]]] = None,
                 lane_name: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf lane

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        lane = tencentcloud.tsf.Lane("lane",
            lane_group_lists=[tencentcloud.tsf.LaneLaneGroupListArgs(
                entrance=True,
                group_id="group-yn7j5l8a",
            )],
            lane_name="lane-name-1",
            remark="lane desc1")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneLaneGroupListArgs']]]] lane_group_lists: Swimlane Deployment Group Information.
        :param pulumi.Input[str] lane_name: Lane name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] remark: Lane Remarks.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LaneArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf lane

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        lane = tencentcloud.tsf.Lane("lane",
            lane_group_lists=[tencentcloud.tsf.LaneLaneGroupListArgs(
                entrance=True,
                group_id="group-yn7j5l8a",
            )],
            lane_name="lane-name-1",
            remark="lane desc1")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param LaneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LaneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lane_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneLaneGroupListArgs']]]]] = None,
                 lane_name: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LaneArgs.__new__(LaneArgs)

            if lane_group_lists is None and not opts.urn:
                raise TypeError("Missing required property 'lane_group_lists'")
            __props__.__dict__["lane_group_lists"] = lane_group_lists
            if lane_name is None and not opts.urn:
                raise TypeError("Missing required property 'lane_name'")
            __props__.__dict__["lane_name"] = lane_name
            __props__.__dict__["program_id_lists"] = program_id_lists
            if remark is None and not opts.urn:
                raise TypeError("Missing required property 'remark'")
            __props__.__dict__["remark"] = remark
            __props__.__dict__["create_time"] = None
            __props__.__dict__["entrance"] = None
            __props__.__dict__["lane_id"] = None
            __props__.__dict__["namespace_id_lists"] = None
            __props__.__dict__["update_time"] = None
        super(Lane, __self__).__init__(
            'tencentcloud:Tsf/lane:Lane',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[int]] = None,
            entrance: Optional[pulumi.Input[bool]] = None,
            lane_group_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneLaneGroupListArgs']]]]] = None,
            lane_id: Optional[pulumi.Input[str]] = None,
            lane_name: Optional[pulumi.Input[str]] = None,
            namespace_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[int]] = None) -> 'Lane':
        """
        Get an existing Lane resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] create_time: creation time.
        :param pulumi.Input[bool] entrance: Whether to enter the application.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaneLaneGroupListArgs']]]] lane_group_lists: Swimlane Deployment Group Information.
        :param pulumi.Input[str] lane_id: Lane ID.
        :param pulumi.Input[str] lane_name: Lane name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespace_id_lists: A list of namespaces to which the swimlane has associated deployment groups.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[str] remark: Lane Remarks.
        :param pulumi.Input[int] update_time: update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LaneState.__new__(_LaneState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["entrance"] = entrance
        __props__.__dict__["lane_group_lists"] = lane_group_lists
        __props__.__dict__["lane_id"] = lane_id
        __props__.__dict__["lane_name"] = lane_name
        __props__.__dict__["namespace_id_lists"] = namespace_id_lists
        __props__.__dict__["program_id_lists"] = program_id_lists
        __props__.__dict__["remark"] = remark
        __props__.__dict__["update_time"] = update_time
        return Lane(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[int]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def entrance(self) -> pulumi.Output[bool]:
        """
        Whether to enter the application.
        """
        return pulumi.get(self, "entrance")

    @property
    @pulumi.getter(name="laneGroupLists")
    def lane_group_lists(self) -> pulumi.Output[Sequence['outputs.LaneLaneGroupList']]:
        """
        Swimlane Deployment Group Information.
        """
        return pulumi.get(self, "lane_group_lists")

    @property
    @pulumi.getter(name="laneId")
    def lane_id(self) -> pulumi.Output[str]:
        """
        Lane ID.
        """
        return pulumi.get(self, "lane_id")

    @property
    @pulumi.getter(name="laneName")
    def lane_name(self) -> pulumi.Output[str]:
        """
        Lane name.
        """
        return pulumi.get(self, "lane_name")

    @property
    @pulumi.getter(name="namespaceIdLists")
    def namespace_id_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of namespaces to which the swimlane has associated deployment groups.
        """
        return pulumi.get(self, "namespace_id_lists")

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        Lane Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[int]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

