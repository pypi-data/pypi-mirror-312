# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TaskArgs', 'Task']

@pulumi.input_type
class TaskArgs:
    def __init__(__self__, *,
                 execute_type: pulumi.Input[str],
                 group_id: pulumi.Input[str],
                 task_content: pulumi.Input[str],
                 task_name: pulumi.Input[str],
                 task_type: pulumi.Input[str],
                 time_out: pulumi.Input[int],
                 advance_settings: Optional[pulumi.Input['TaskAdvanceSettingsArgs']] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 shard_arguments: Optional[pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 success_operator: Optional[pulumi.Input[str]] = None,
                 success_ratio: Optional[pulumi.Input[str]] = None,
                 task_argument: Optional[pulumi.Input[str]] = None,
                 task_rule: Optional[pulumi.Input['TaskTaskRuleArgs']] = None):
        """
        The set of arguments for constructing a Task resource.
        :param pulumi.Input[str] execute_type: execution type, unicast/broadcast.
        :param pulumi.Input[str] group_id: deployment group ID.
        :param pulumi.Input[str] task_content: task content, length limit 65536 bytes.
        :param pulumi.Input[str] task_name: task name, task length 64 characters.
        :param pulumi.Input[str] task_type: task type, java.
        :param pulumi.Input[int] time_out: task timeout, time unit ms.
        :param pulumi.Input['TaskAdvanceSettingsArgs'] advance_settings: advanced settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[int] retry_count: number of retries, 0 &amp;lt;= RetryCount&amp;lt;= 10.
        :param pulumi.Input[int] retry_interval: retry interval, 0 &amp;lt;= RetryInterval &amp;lt;= 600000, time unit ms.
        :param pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]] shard_arguments: Fragmentation parameters.
        :param pulumi.Input[int] shard_count: number of shards.
        :param pulumi.Input[str] success_operator: the operator to judge the success of the task.
        :param pulumi.Input[str] success_ratio: The threshold for judging the success rate of the task, such as 100.
        :param pulumi.Input[str] task_argument: task parameters, the length limit is 10000 characters.
        :param pulumi.Input['TaskTaskRuleArgs'] task_rule: trigger rule.
        """
        pulumi.set(__self__, "execute_type", execute_type)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "task_content", task_content)
        pulumi.set(__self__, "task_name", task_name)
        pulumi.set(__self__, "task_type", task_type)
        pulumi.set(__self__, "time_out", time_out)
        if advance_settings is not None:
            pulumi.set(__self__, "advance_settings", advance_settings)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if shard_arguments is not None:
            pulumi.set(__self__, "shard_arguments", shard_arguments)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if success_operator is not None:
            pulumi.set(__self__, "success_operator", success_operator)
        if success_ratio is not None:
            pulumi.set(__self__, "success_ratio", success_ratio)
        if task_argument is not None:
            pulumi.set(__self__, "task_argument", task_argument)
        if task_rule is not None:
            pulumi.set(__self__, "task_rule", task_rule)

    @property
    @pulumi.getter(name="executeType")
    def execute_type(self) -> pulumi.Input[str]:
        """
        execution type, unicast/broadcast.
        """
        return pulumi.get(self, "execute_type")

    @execute_type.setter
    def execute_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "execute_type", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        deployment group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="taskContent")
    def task_content(self) -> pulumi.Input[str]:
        """
        task content, length limit 65536 bytes.
        """
        return pulumi.get(self, "task_content")

    @task_content.setter
    def task_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_content", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Input[str]:
        """
        task name, task length 64 characters.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input[str]:
        """
        task type, java.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="timeOut")
    def time_out(self) -> pulumi.Input[int]:
        """
        task timeout, time unit ms.
        """
        return pulumi.get(self, "time_out")

    @time_out.setter
    def time_out(self, value: pulumi.Input[int]):
        pulumi.set(self, "time_out", value)

    @property
    @pulumi.getter(name="advanceSettings")
    def advance_settings(self) -> Optional[pulumi.Input['TaskAdvanceSettingsArgs']]:
        """
        advanced settings.
        """
        return pulumi.get(self, "advance_settings")

    @advance_settings.setter
    def advance_settings(self, value: Optional[pulumi.Input['TaskAdvanceSettingsArgs']]):
        pulumi.set(self, "advance_settings", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        number of retries, 0 &amp;lt;= RetryCount&amp;lt;= 10.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[int]]:
        """
        retry interval, 0 &amp;lt;= RetryInterval &amp;lt;= 600000, time unit ms.
        """
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="shardArguments")
    def shard_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]]]:
        """
        Fragmentation parameters.
        """
        return pulumi.get(self, "shard_arguments")

    @shard_arguments.setter
    def shard_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]]]):
        pulumi.set(self, "shard_arguments", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[pulumi.Input[int]]:
        """
        number of shards.
        """
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter(name="successOperator")
    def success_operator(self) -> Optional[pulumi.Input[str]]:
        """
        the operator to judge the success of the task.
        """
        return pulumi.get(self, "success_operator")

    @success_operator.setter
    def success_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_operator", value)

    @property
    @pulumi.getter(name="successRatio")
    def success_ratio(self) -> Optional[pulumi.Input[str]]:
        """
        The threshold for judging the success rate of the task, such as 100.
        """
        return pulumi.get(self, "success_ratio")

    @success_ratio.setter
    def success_ratio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_ratio", value)

    @property
    @pulumi.getter(name="taskArgument")
    def task_argument(self) -> Optional[pulumi.Input[str]]:
        """
        task parameters, the length limit is 10000 characters.
        """
        return pulumi.get(self, "task_argument")

    @task_argument.setter
    def task_argument(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_argument", value)

    @property
    @pulumi.getter(name="taskRule")
    def task_rule(self) -> Optional[pulumi.Input['TaskTaskRuleArgs']]:
        """
        trigger rule.
        """
        return pulumi.get(self, "task_rule")

    @task_rule.setter
    def task_rule(self, value: Optional[pulumi.Input['TaskTaskRuleArgs']]):
        pulumi.set(self, "task_rule", value)


@pulumi.input_type
class _TaskState:
    def __init__(__self__, *,
                 advance_settings: Optional[pulumi.Input['TaskAdvanceSettingsArgs']] = None,
                 belong_flow_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 execute_type: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 shard_arguments: Optional[pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 success_operator: Optional[pulumi.Input[str]] = None,
                 success_ratio: Optional[pulumi.Input[str]] = None,
                 task_argument: Optional[pulumi.Input[str]] = None,
                 task_content: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 task_log_id: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_rule: Optional[pulumi.Input['TaskTaskRuleArgs']] = None,
                 task_state: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 time_out: Optional[pulumi.Input[int]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Task resources.
        :param pulumi.Input['TaskAdvanceSettingsArgs'] advance_settings: advanced settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] belong_flow_ids: ID of the workflow to which it belongs.
        :param pulumi.Input[str] execute_type: execution type, unicast/broadcast.
        :param pulumi.Input[str] group_id: deployment group ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[int] retry_count: number of retries, 0 &amp;lt;= RetryCount&amp;lt;= 10.
        :param pulumi.Input[int] retry_interval: retry interval, 0 &amp;lt;= RetryInterval &amp;lt;= 600000, time unit ms.
        :param pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]] shard_arguments: Fragmentation parameters.
        :param pulumi.Input[int] shard_count: number of shards.
        :param pulumi.Input[str] success_operator: the operator to judge the success of the task.
        :param pulumi.Input[str] success_ratio: The threshold for judging the success rate of the task, such as 100.
        :param pulumi.Input[str] task_argument: task parameters, the length limit is 10000 characters.
        :param pulumi.Input[str] task_content: task content, length limit 65536 bytes.
        :param pulumi.Input[str] task_id: task ID.
        :param pulumi.Input[str] task_log_id: task history ID.
        :param pulumi.Input[str] task_name: task name, task length 64 characters.
        :param pulumi.Input['TaskTaskRuleArgs'] task_rule: trigger rule.
        :param pulumi.Input[str] task_state: Whether to enable the task, ENABLED/DISABLED.
        :param pulumi.Input[str] task_type: task type, java.
        :param pulumi.Input[int] time_out: task timeout, time unit ms.
        :param pulumi.Input[str] trigger_type: trigger type.
        """
        if advance_settings is not None:
            pulumi.set(__self__, "advance_settings", advance_settings)
        if belong_flow_ids is not None:
            pulumi.set(__self__, "belong_flow_ids", belong_flow_ids)
        if execute_type is not None:
            pulumi.set(__self__, "execute_type", execute_type)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if program_id_lists is not None:
            pulumi.set(__self__, "program_id_lists", program_id_lists)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if shard_arguments is not None:
            pulumi.set(__self__, "shard_arguments", shard_arguments)
        if shard_count is not None:
            pulumi.set(__self__, "shard_count", shard_count)
        if success_operator is not None:
            pulumi.set(__self__, "success_operator", success_operator)
        if success_ratio is not None:
            pulumi.set(__self__, "success_ratio", success_ratio)
        if task_argument is not None:
            pulumi.set(__self__, "task_argument", task_argument)
        if task_content is not None:
            pulumi.set(__self__, "task_content", task_content)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if task_log_id is not None:
            pulumi.set(__self__, "task_log_id", task_log_id)
        if task_name is not None:
            pulumi.set(__self__, "task_name", task_name)
        if task_rule is not None:
            pulumi.set(__self__, "task_rule", task_rule)
        if task_state is not None:
            pulumi.set(__self__, "task_state", task_state)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if time_out is not None:
            pulumi.set(__self__, "time_out", time_out)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter(name="advanceSettings")
    def advance_settings(self) -> Optional[pulumi.Input['TaskAdvanceSettingsArgs']]:
        """
        advanced settings.
        """
        return pulumi.get(self, "advance_settings")

    @advance_settings.setter
    def advance_settings(self, value: Optional[pulumi.Input['TaskAdvanceSettingsArgs']]):
        pulumi.set(self, "advance_settings", value)

    @property
    @pulumi.getter(name="belongFlowIds")
    def belong_flow_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of the workflow to which it belongs.
        """
        return pulumi.get(self, "belong_flow_ids")

    @belong_flow_ids.setter
    def belong_flow_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "belong_flow_ids", value)

    @property
    @pulumi.getter(name="executeType")
    def execute_type(self) -> Optional[pulumi.Input[str]]:
        """
        execution type, unicast/broadcast.
        """
        return pulumi.get(self, "execute_type")

    @execute_type.setter
    def execute_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execute_type", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        deployment group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @program_id_lists.setter
    def program_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "program_id_lists", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        """
        number of retries, 0 &amp;lt;= RetryCount&amp;lt;= 10.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[pulumi.Input[int]]:
        """
        retry interval, 0 &amp;lt;= RetryInterval &amp;lt;= 600000, time unit ms.
        """
        return pulumi.get(self, "retry_interval")

    @retry_interval.setter
    def retry_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_interval", value)

    @property
    @pulumi.getter(name="shardArguments")
    def shard_arguments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]]]:
        """
        Fragmentation parameters.
        """
        return pulumi.get(self, "shard_arguments")

    @shard_arguments.setter
    def shard_arguments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskShardArgumentArgs']]]]):
        pulumi.set(self, "shard_arguments", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> Optional[pulumi.Input[int]]:
        """
        number of shards.
        """
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shard_count", value)

    @property
    @pulumi.getter(name="successOperator")
    def success_operator(self) -> Optional[pulumi.Input[str]]:
        """
        the operator to judge the success of the task.
        """
        return pulumi.get(self, "success_operator")

    @success_operator.setter
    def success_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_operator", value)

    @property
    @pulumi.getter(name="successRatio")
    def success_ratio(self) -> Optional[pulumi.Input[str]]:
        """
        The threshold for judging the success rate of the task, such as 100.
        """
        return pulumi.get(self, "success_ratio")

    @success_ratio.setter
    def success_ratio(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_ratio", value)

    @property
    @pulumi.getter(name="taskArgument")
    def task_argument(self) -> Optional[pulumi.Input[str]]:
        """
        task parameters, the length limit is 10000 characters.
        """
        return pulumi.get(self, "task_argument")

    @task_argument.setter
    def task_argument(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_argument", value)

    @property
    @pulumi.getter(name="taskContent")
    def task_content(self) -> Optional[pulumi.Input[str]]:
        """
        task content, length limit 65536 bytes.
        """
        return pulumi.get(self, "task_content")

    @task_content.setter
    def task_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_content", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="taskLogId")
    def task_log_id(self) -> Optional[pulumi.Input[str]]:
        """
        task history ID.
        """
        return pulumi.get(self, "task_log_id")

    @task_log_id.setter
    def task_log_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_log_id", value)

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> Optional[pulumi.Input[str]]:
        """
        task name, task length 64 characters.
        """
        return pulumi.get(self, "task_name")

    @task_name.setter
    def task_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_name", value)

    @property
    @pulumi.getter(name="taskRule")
    def task_rule(self) -> Optional[pulumi.Input['TaskTaskRuleArgs']]:
        """
        trigger rule.
        """
        return pulumi.get(self, "task_rule")

    @task_rule.setter
    def task_rule(self, value: Optional[pulumi.Input['TaskTaskRuleArgs']]):
        pulumi.set(self, "task_rule", value)

    @property
    @pulumi.getter(name="taskState")
    def task_state(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable the task, ENABLED/DISABLED.
        """
        return pulumi.get(self, "task_state")

    @task_state.setter
    def task_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_state", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        task type, java.
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="timeOut")
    def time_out(self) -> Optional[pulumi.Input[int]]:
        """
        task timeout, time unit ms.
        """
        return pulumi.get(self, "time_out")

    @time_out.setter
    def time_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_out", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        trigger type.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)


class Task(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advance_settings: Optional[pulumi.Input[pulumi.InputType['TaskAdvanceSettingsArgs']]] = None,
                 execute_type: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 shard_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TaskShardArgumentArgs']]]]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 success_operator: Optional[pulumi.Input[str]] = None,
                 success_ratio: Optional[pulumi.Input[str]] = None,
                 task_argument: Optional[pulumi.Input[str]] = None,
                 task_content: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_rule: Optional[pulumi.Input[pulumi.InputType['TaskTaskRuleArgs']]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 time_out: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        task = tencentcloud.tsf.Task("task",
            advance_settings=tencentcloud.tsf.TaskAdvanceSettingsArgs(
                sub_task_concurrency=2,
            ),
            execute_type="unicast",
            group_id="group-y8pnmoga",
            retry_count=0,
            retry_interval=0,
            success_operator="GTE",
            success_ratio="100",
            task_argument="a=c",
            task_content="/test",
            task_name="terraform-test",
            task_rule=tencentcloud.tsf.TaskTaskRuleArgs(
                expression="0 * 1 * * ? ",
                rule_type="Cron",
            ),
            task_type="java",
            time_out=60000)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/task:Task task task-y37eqq95
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TaskAdvanceSettingsArgs']] advance_settings: advanced settings.
        :param pulumi.Input[str] execute_type: execution type, unicast/broadcast.
        :param pulumi.Input[str] group_id: deployment group ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[int] retry_count: number of retries, 0 &amp;lt;= RetryCount&amp;lt;= 10.
        :param pulumi.Input[int] retry_interval: retry interval, 0 &amp;lt;= RetryInterval &amp;lt;= 600000, time unit ms.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TaskShardArgumentArgs']]]] shard_arguments: Fragmentation parameters.
        :param pulumi.Input[int] shard_count: number of shards.
        :param pulumi.Input[str] success_operator: the operator to judge the success of the task.
        :param pulumi.Input[str] success_ratio: The threshold for judging the success rate of the task, such as 100.
        :param pulumi.Input[str] task_argument: task parameters, the length limit is 10000 characters.
        :param pulumi.Input[str] task_content: task content, length limit 65536 bytes.
        :param pulumi.Input[str] task_name: task name, task length 64 characters.
        :param pulumi.Input[pulumi.InputType['TaskTaskRuleArgs']] task_rule: trigger rule.
        :param pulumi.Input[str] task_type: task type, java.
        :param pulumi.Input[int] time_out: task timeout, time unit ms.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        task = tencentcloud.tsf.Task("task",
            advance_settings=tencentcloud.tsf.TaskAdvanceSettingsArgs(
                sub_task_concurrency=2,
            ),
            execute_type="unicast",
            group_id="group-y8pnmoga",
            retry_count=0,
            retry_interval=0,
            success_operator="GTE",
            success_ratio="100",
            task_argument="a=c",
            task_content="/test",
            task_name="terraform-test",
            task_rule=tencentcloud.tsf.TaskTaskRuleArgs(
                expression="0 * 1 * * ? ",
                rule_type="Cron",
            ),
            task_type="java",
            time_out=60000)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/task:Task task task-y37eqq95
        ```

        :param str resource_name: The name of the resource.
        :param TaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 advance_settings: Optional[pulumi.Input[pulumi.InputType['TaskAdvanceSettingsArgs']]] = None,
                 execute_type: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 retry_interval: Optional[pulumi.Input[int]] = None,
                 shard_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TaskShardArgumentArgs']]]]] = None,
                 shard_count: Optional[pulumi.Input[int]] = None,
                 success_operator: Optional[pulumi.Input[str]] = None,
                 success_ratio: Optional[pulumi.Input[str]] = None,
                 task_argument: Optional[pulumi.Input[str]] = None,
                 task_content: Optional[pulumi.Input[str]] = None,
                 task_name: Optional[pulumi.Input[str]] = None,
                 task_rule: Optional[pulumi.Input[pulumi.InputType['TaskTaskRuleArgs']]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 time_out: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TaskArgs.__new__(TaskArgs)

            __props__.__dict__["advance_settings"] = advance_settings
            if execute_type is None and not opts.urn:
                raise TypeError("Missing required property 'execute_type'")
            __props__.__dict__["execute_type"] = execute_type
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["program_id_lists"] = program_id_lists
            __props__.__dict__["retry_count"] = retry_count
            __props__.__dict__["retry_interval"] = retry_interval
            __props__.__dict__["shard_arguments"] = shard_arguments
            __props__.__dict__["shard_count"] = shard_count
            __props__.__dict__["success_operator"] = success_operator
            __props__.__dict__["success_ratio"] = success_ratio
            __props__.__dict__["task_argument"] = task_argument
            if task_content is None and not opts.urn:
                raise TypeError("Missing required property 'task_content'")
            __props__.__dict__["task_content"] = task_content
            if task_name is None and not opts.urn:
                raise TypeError("Missing required property 'task_name'")
            __props__.__dict__["task_name"] = task_name
            __props__.__dict__["task_rule"] = task_rule
            if task_type is None and not opts.urn:
                raise TypeError("Missing required property 'task_type'")
            __props__.__dict__["task_type"] = task_type
            if time_out is None and not opts.urn:
                raise TypeError("Missing required property 'time_out'")
            __props__.__dict__["time_out"] = time_out
            __props__.__dict__["belong_flow_ids"] = None
            __props__.__dict__["task_id"] = None
            __props__.__dict__["task_log_id"] = None
            __props__.__dict__["task_state"] = None
            __props__.__dict__["trigger_type"] = None
        super(Task, __self__).__init__(
            'tencentcloud:Tsf/task:Task',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            advance_settings: Optional[pulumi.Input[pulumi.InputType['TaskAdvanceSettingsArgs']]] = None,
            belong_flow_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            execute_type: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            program_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            retry_count: Optional[pulumi.Input[int]] = None,
            retry_interval: Optional[pulumi.Input[int]] = None,
            shard_arguments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TaskShardArgumentArgs']]]]] = None,
            shard_count: Optional[pulumi.Input[int]] = None,
            success_operator: Optional[pulumi.Input[str]] = None,
            success_ratio: Optional[pulumi.Input[str]] = None,
            task_argument: Optional[pulumi.Input[str]] = None,
            task_content: Optional[pulumi.Input[str]] = None,
            task_id: Optional[pulumi.Input[str]] = None,
            task_log_id: Optional[pulumi.Input[str]] = None,
            task_name: Optional[pulumi.Input[str]] = None,
            task_rule: Optional[pulumi.Input[pulumi.InputType['TaskTaskRuleArgs']]] = None,
            task_state: Optional[pulumi.Input[str]] = None,
            task_type: Optional[pulumi.Input[str]] = None,
            time_out: Optional[pulumi.Input[int]] = None,
            trigger_type: Optional[pulumi.Input[str]] = None) -> 'Task':
        """
        Get an existing Task resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TaskAdvanceSettingsArgs']] advance_settings: advanced settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] belong_flow_ids: ID of the workflow to which it belongs.
        :param pulumi.Input[str] execute_type: execution type, unicast/broadcast.
        :param pulumi.Input[str] group_id: deployment group ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] program_id_lists: Program id list.
        :param pulumi.Input[int] retry_count: number of retries, 0 &amp;lt;= RetryCount&amp;lt;= 10.
        :param pulumi.Input[int] retry_interval: retry interval, 0 &amp;lt;= RetryInterval &amp;lt;= 600000, time unit ms.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TaskShardArgumentArgs']]]] shard_arguments: Fragmentation parameters.
        :param pulumi.Input[int] shard_count: number of shards.
        :param pulumi.Input[str] success_operator: the operator to judge the success of the task.
        :param pulumi.Input[str] success_ratio: The threshold for judging the success rate of the task, such as 100.
        :param pulumi.Input[str] task_argument: task parameters, the length limit is 10000 characters.
        :param pulumi.Input[str] task_content: task content, length limit 65536 bytes.
        :param pulumi.Input[str] task_id: task ID.
        :param pulumi.Input[str] task_log_id: task history ID.
        :param pulumi.Input[str] task_name: task name, task length 64 characters.
        :param pulumi.Input[pulumi.InputType['TaskTaskRuleArgs']] task_rule: trigger rule.
        :param pulumi.Input[str] task_state: Whether to enable the task, ENABLED/DISABLED.
        :param pulumi.Input[str] task_type: task type, java.
        :param pulumi.Input[int] time_out: task timeout, time unit ms.
        :param pulumi.Input[str] trigger_type: trigger type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TaskState.__new__(_TaskState)

        __props__.__dict__["advance_settings"] = advance_settings
        __props__.__dict__["belong_flow_ids"] = belong_flow_ids
        __props__.__dict__["execute_type"] = execute_type
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["program_id_lists"] = program_id_lists
        __props__.__dict__["retry_count"] = retry_count
        __props__.__dict__["retry_interval"] = retry_interval
        __props__.__dict__["shard_arguments"] = shard_arguments
        __props__.__dict__["shard_count"] = shard_count
        __props__.__dict__["success_operator"] = success_operator
        __props__.__dict__["success_ratio"] = success_ratio
        __props__.__dict__["task_argument"] = task_argument
        __props__.__dict__["task_content"] = task_content
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["task_log_id"] = task_log_id
        __props__.__dict__["task_name"] = task_name
        __props__.__dict__["task_rule"] = task_rule
        __props__.__dict__["task_state"] = task_state
        __props__.__dict__["task_type"] = task_type
        __props__.__dict__["time_out"] = time_out
        __props__.__dict__["trigger_type"] = trigger_type
        return Task(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="advanceSettings")
    def advance_settings(self) -> pulumi.Output['outputs.TaskAdvanceSettings']:
        """
        advanced settings.
        """
        return pulumi.get(self, "advance_settings")

    @property
    @pulumi.getter(name="belongFlowIds")
    def belong_flow_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        ID of the workflow to which it belongs.
        """
        return pulumi.get(self, "belong_flow_ids")

    @property
    @pulumi.getter(name="executeType")
    def execute_type(self) -> pulumi.Output[str]:
        """
        execution type, unicast/broadcast.
        """
        return pulumi.get(self, "execute_type")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        deployment group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="programIdLists")
    def program_id_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Program id list.
        """
        return pulumi.get(self, "program_id_lists")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> pulumi.Output[int]:
        """
        number of retries, 0 &amp;lt;= RetryCount&amp;lt;= 10.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> pulumi.Output[int]:
        """
        retry interval, 0 &amp;lt;= RetryInterval &amp;lt;= 600000, time unit ms.
        """
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="shardArguments")
    def shard_arguments(self) -> pulumi.Output[Sequence['outputs.TaskShardArgument']]:
        """
        Fragmentation parameters.
        """
        return pulumi.get(self, "shard_arguments")

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> pulumi.Output[int]:
        """
        number of shards.
        """
        return pulumi.get(self, "shard_count")

    @property
    @pulumi.getter(name="successOperator")
    def success_operator(self) -> pulumi.Output[str]:
        """
        the operator to judge the success of the task.
        """
        return pulumi.get(self, "success_operator")

    @property
    @pulumi.getter(name="successRatio")
    def success_ratio(self) -> pulumi.Output[str]:
        """
        The threshold for judging the success rate of the task, such as 100.
        """
        return pulumi.get(self, "success_ratio")

    @property
    @pulumi.getter(name="taskArgument")
    def task_argument(self) -> pulumi.Output[str]:
        """
        task parameters, the length limit is 10000 characters.
        """
        return pulumi.get(self, "task_argument")

    @property
    @pulumi.getter(name="taskContent")
    def task_content(self) -> pulumi.Output[str]:
        """
        task content, length limit 65536 bytes.
        """
        return pulumi.get(self, "task_content")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[str]:
        """
        task ID.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter(name="taskLogId")
    def task_log_id(self) -> pulumi.Output[str]:
        """
        task history ID.
        """
        return pulumi.get(self, "task_log_id")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> pulumi.Output[str]:
        """
        task name, task length 64 characters.
        """
        return pulumi.get(self, "task_name")

    @property
    @pulumi.getter(name="taskRule")
    def task_rule(self) -> pulumi.Output['outputs.TaskTaskRule']:
        """
        trigger rule.
        """
        return pulumi.get(self, "task_rule")

    @property
    @pulumi.getter(name="taskState")
    def task_state(self) -> pulumi.Output[str]:
        """
        Whether to enable the task, ENABLED/DISABLED.
        """
        return pulumi.get(self, "task_state")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[str]:
        """
        task type, java.
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="timeOut")
    def time_out(self) -> pulumi.Output[int]:
        """
        task timeout, time unit ms.
        """
        return pulumi.get(self, "time_out")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Output[str]:
        """
        trigger type.
        """
        return pulumi.get(self, "trigger_type")

