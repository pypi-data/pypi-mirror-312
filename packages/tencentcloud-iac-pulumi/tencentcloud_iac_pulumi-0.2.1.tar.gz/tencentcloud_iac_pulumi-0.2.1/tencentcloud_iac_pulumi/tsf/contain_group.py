# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ContainGroupArgs', 'ContainGroup']

@pulumi.input_type
class ContainGroupArgs:
    def __init__(__self__, *,
                 access_type: pulumi.Input[int],
                 application_id: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 group_name: pulumi.Input[str],
                 instance_num: pulumi.Input[int],
                 namespace_id: pulumi.Input[str],
                 protocol_ports: pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]],
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 group_comment: Optional[pulumi.Input[str]] = None,
                 group_resource_type: Optional[pulumi.Input[str]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ContainGroup resource.
        :param pulumi.Input[int] access_type: 0: public network 1: access within the cluster 2: NodePort.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[int] instance_num: number of instances.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]] protocol_ports: Protocol Ports array.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] agent_mem_limit: The maximum memory MiB of the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_mem_request: The number of memory MiB allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] cpu_limit: The maximum number of allocated CPU cores, corresponding to the K8S limit.
        :param pulumi.Input[str] cpu_request: Initially allocated CPU cores, corresponding to K8S request.
        :param pulumi.Input[str] group_comment: Group remarks field, the length should not exceed 200 characters.
        :param pulumi.Input[str] group_resource_type: Deployment Group Resource Type.
        :param pulumi.Input[str] istio_cpu_limit: The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] istio_mem_limit: The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_mem_request: The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] mem_limit: Maximum allocated memory MiB, corresponding to K8S limit.
        :param pulumi.Input[str] mem_request: Initially allocated memory MiB, corresponding to K8S request.
        :param pulumi.Input[str] subnet_id: subnet ID.
        :param pulumi.Input[int] update_ivl: Rolling update is required, update interval.
        :param pulumi.Input[int] update_type: Update method: 0: fast update 1: rolling update.
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "instance_num", instance_num)
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "protocol_ports", protocol_ports)
        if agent_cpu_limit is not None:
            pulumi.set(__self__, "agent_cpu_limit", agent_cpu_limit)
        if agent_cpu_request is not None:
            pulumi.set(__self__, "agent_cpu_request", agent_cpu_request)
        if agent_mem_limit is not None:
            pulumi.set(__self__, "agent_mem_limit", agent_mem_limit)
        if agent_mem_request is not None:
            pulumi.set(__self__, "agent_mem_request", agent_mem_request)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if group_comment is not None:
            pulumi.set(__self__, "group_comment", group_comment)
        if group_resource_type is not None:
            pulumi.set(__self__, "group_resource_type", group_resource_type)
        if istio_cpu_limit is not None:
            pulumi.set(__self__, "istio_cpu_limit", istio_cpu_limit)
        if istio_cpu_request is not None:
            pulumi.set(__self__, "istio_cpu_request", istio_cpu_request)
        if istio_mem_limit is not None:
            pulumi.set(__self__, "istio_mem_limit", istio_mem_limit)
        if istio_mem_request is not None:
            pulumi.set(__self__, "istio_mem_request", istio_mem_request)
        if mem_limit is not None:
            pulumi.set(__self__, "mem_limit", mem_limit)
        if mem_request is not None:
            pulumi.set(__self__, "mem_request", mem_request)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if update_ivl is not None:
            pulumi.set(__self__, "update_ivl", update_ivl)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> pulumi.Input[int]:
        """
        0: public network 1: access within the cluster 2: NodePort.
        """
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The application ID to which the group belongs.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="instanceNum")
    def instance_num(self) -> pulumi.Input[int]:
        """
        number of instances.
        """
        return pulumi.get(self, "instance_num")

    @instance_num.setter
    def instance_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_num", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        ID of the namespace to which the group belongs.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]]:
        """
        Protocol Ports array.
        """
        return pulumi.get(self, "protocol_ports")

    @protocol_ports.setter
    def protocol_ports(self, value: pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]]):
        pulumi.set(self, "protocol_ports", value)

    @property
    @pulumi.getter(name="agentCpuLimit")
    def agent_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
        """
        return pulumi.get(self, "agent_cpu_limit")

    @agent_cpu_limit.setter
    def agent_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_limit", value)

    @property
    @pulumi.getter(name="agentCpuRequest")
    def agent_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated by the agent container, corresponding to the K8S request.
        """
        return pulumi.get(self, "agent_cpu_request")

    @agent_cpu_request.setter
    def agent_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_request", value)

    @property
    @pulumi.getter(name="agentMemLimit")
    def agent_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory MiB of the agent container, corresponding to the limit of K8S.
        """
        return pulumi.get(self, "agent_mem_limit")

    @agent_mem_limit.setter
    def agent_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_limit", value)

    @property
    @pulumi.getter(name="agentMemRequest")
    def agent_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of memory MiB allocated by the agent container, corresponding to the K8S request.
        """
        return pulumi.get(self, "agent_mem_request")

    @agent_mem_request.setter
    def agent_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_request", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of allocated CPU cores, corresponding to the K8S limit.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        Initially allocated CPU cores, corresponding to K8S request.
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="groupComment")
    def group_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Group remarks field, the length should not exceed 200 characters.
        """
        return pulumi.get(self, "group_comment")

    @group_comment.setter
    def group_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_comment", value)

    @property
    @pulumi.getter(name="groupResourceType")
    def group_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment Group Resource Type.
        """
        return pulumi.get(self, "group_resource_type")

    @group_resource_type.setter
    def group_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_resource_type", value)

    @property
    @pulumi.getter(name="istioCpuLimit")
    def istio_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
        """
        return pulumi.get(self, "istio_cpu_limit")

    @istio_cpu_limit.setter
    def istio_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_limit", value)

    @property
    @pulumi.getter(name="istioCpuRequest")
    def istio_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
        """
        return pulumi.get(self, "istio_cpu_request")

    @istio_cpu_request.setter
    def istio_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_request", value)

    @property
    @pulumi.getter(name="istioMemLimit")
    def istio_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
        """
        return pulumi.get(self, "istio_mem_limit")

    @istio_mem_limit.setter
    def istio_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_limit", value)

    @property
    @pulumi.getter(name="istioMemRequest")
    def istio_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
        """
        return pulumi.get(self, "istio_mem_request")

    @istio_mem_request.setter
    def istio_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_request", value)

    @property
    @pulumi.getter(name="memLimit")
    def mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum allocated memory MiB, corresponding to K8S limit.
        """
        return pulumi.get(self, "mem_limit")

    @mem_limit.setter
    def mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_limit", value)

    @property
    @pulumi.getter(name="memRequest")
    def mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        Initially allocated memory MiB, corresponding to K8S request.
        """
        return pulumi.get(self, "mem_request")

    @mem_request.setter
    def mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_request", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="updateIvl")
    def update_ivl(self) -> Optional[pulumi.Input[int]]:
        """
        Rolling update is required, update interval.
        """
        return pulumi.get(self, "update_ivl")

    @update_ivl.setter
    def update_ivl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_ivl", value)

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[pulumi.Input[int]]:
        """
        Update method: 0: fast update 1: rolling update.
        """
        return pulumi.get(self, "update_type")

    @update_type.setter
    def update_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_type", value)


@pulumi.input_type
class _ContainGroupState:
    def __init__(__self__, *,
                 access_type: Optional[pulumi.Input[int]] = None,
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 application_type: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_ip: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 current_num: Optional[pulumi.Input[int]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvArgs']]]] = None,
                 group_comment: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_resource_type: Optional[pulumi.Input[str]] = None,
                 health_check_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingArgs']]]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_num: Optional[pulumi.Input[int]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 lb_ip: Optional[pulumi.Input[str]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 microservice_type: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 namespace_name: Optional[pulumi.Input[str]] = None,
                 protocol_ports: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]]] = None,
                 reponame: Optional[pulumi.Input[str]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 updated_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ContainGroup resources.
        :param pulumi.Input[int] access_type: 0: public network 1: access within the cluster 2: NodePort.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] agent_mem_limit: The maximum memory MiB of the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_mem_request: The number of memory MiB allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] application_name: Application Name.
        :param pulumi.Input[str] application_type: App types.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cluster_ip: Service ip.
        :param pulumi.Input[str] cluster_name: cluster name.
        :param pulumi.Input[str] cpu_limit: The maximum number of allocated CPU cores, corresponding to the K8S limit.
        :param pulumi.Input[str] cpu_request: Initially allocated CPU cores, corresponding to K8S request.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[int] current_num: Total number of instances launched.
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvArgs']]] envs: environment variable array object.
        :param pulumi.Input[str] group_comment: Group remarks field, the length should not exceed 200 characters.
        :param pulumi.Input[str] group_id: Deployment group ID.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[str] group_resource_type: Deployment Group Resource Type.
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingArgs']]] health_check_settings: Deployment group health check settings.
        :param pulumi.Input[int] instance_count: Number of deployment group instances.
        :param pulumi.Input[int] instance_num: number of instances.
        :param pulumi.Input[str] istio_cpu_limit: The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] istio_mem_limit: The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_mem_request: The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] lb_ip: load balancing ip.
        :param pulumi.Input[str] max_surge: The MaxSurge parameter of the kubernetes rolling update policy.
        :param pulumi.Input[str] max_unavailable: The MaxUnavailable parameter of the kubernetes rolling update policy.
        :param pulumi.Input[str] mem_limit: Maximum allocated memory MiB, corresponding to K8S limit.
        :param pulumi.Input[str] mem_request: Initially allocated memory MiB, corresponding to K8S request.
        :param pulumi.Input[str] message: pod error message description.
        :param pulumi.Input[str] microservice_type: Service type.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[str] namespace_name: namespace name.
        :param pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]] protocol_ports: Protocol Ports array.
        :param pulumi.Input[str] reponame: Mirror name, such as /tsf/nginx.
        :param pulumi.Input[str] server: mirror server.
        :param pulumi.Input[str] status: Deployment group status.
        :param pulumi.Input[str] subnet_id: subnet ID.
        :param pulumi.Input[str] tag_name: Image version name.
        :param pulumi.Input[int] update_ivl: Rolling update is required, update interval.
        :param pulumi.Input[int] update_type: Update method: 0: fast update 1: rolling update.
        :param pulumi.Input[int] updated_time: Deployment group update timestamp.
        """
        if access_type is not None:
            pulumi.set(__self__, "access_type", access_type)
        if agent_cpu_limit is not None:
            pulumi.set(__self__, "agent_cpu_limit", agent_cpu_limit)
        if agent_cpu_request is not None:
            pulumi.set(__self__, "agent_cpu_request", agent_cpu_request)
        if agent_mem_limit is not None:
            pulumi.set(__self__, "agent_mem_limit", agent_mem_limit)
        if agent_mem_request is not None:
            pulumi.set(__self__, "agent_mem_request", agent_mem_request)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if application_type is not None:
            pulumi.set(__self__, "application_type", application_type)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_ip is not None:
            pulumi.set(__self__, "cluster_ip", cluster_ip)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if current_num is not None:
            pulumi.set(__self__, "current_num", current_num)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if group_comment is not None:
            pulumi.set(__self__, "group_comment", group_comment)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_resource_type is not None:
            pulumi.set(__self__, "group_resource_type", group_resource_type)
        if health_check_settings is not None:
            pulumi.set(__self__, "health_check_settings", health_check_settings)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_num is not None:
            pulumi.set(__self__, "instance_num", instance_num)
        if istio_cpu_limit is not None:
            pulumi.set(__self__, "istio_cpu_limit", istio_cpu_limit)
        if istio_cpu_request is not None:
            pulumi.set(__self__, "istio_cpu_request", istio_cpu_request)
        if istio_mem_limit is not None:
            pulumi.set(__self__, "istio_mem_limit", istio_mem_limit)
        if istio_mem_request is not None:
            pulumi.set(__self__, "istio_mem_request", istio_mem_request)
        if lb_ip is not None:
            pulumi.set(__self__, "lb_ip", lb_ip)
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if mem_limit is not None:
            pulumi.set(__self__, "mem_limit", mem_limit)
        if mem_request is not None:
            pulumi.set(__self__, "mem_request", mem_request)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if microservice_type is not None:
            pulumi.set(__self__, "microservice_type", microservice_type)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if protocol_ports is not None:
            pulumi.set(__self__, "protocol_ports", protocol_ports)
        if reponame is not None:
            pulumi.set(__self__, "reponame", reponame)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if update_ivl is not None:
            pulumi.set(__self__, "update_ivl", update_ivl)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional[pulumi.Input[int]]:
        """
        0: public network 1: access within the cluster 2: NodePort.
        """
        return pulumi.get(self, "access_type")

    @access_type.setter
    def access_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_type", value)

    @property
    @pulumi.getter(name="agentCpuLimit")
    def agent_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
        """
        return pulumi.get(self, "agent_cpu_limit")

    @agent_cpu_limit.setter
    def agent_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_limit", value)

    @property
    @pulumi.getter(name="agentCpuRequest")
    def agent_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated by the agent container, corresponding to the K8S request.
        """
        return pulumi.get(self, "agent_cpu_request")

    @agent_cpu_request.setter
    def agent_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_request", value)

    @property
    @pulumi.getter(name="agentMemLimit")
    def agent_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory MiB of the agent container, corresponding to the limit of K8S.
        """
        return pulumi.get(self, "agent_mem_limit")

    @agent_mem_limit.setter
    def agent_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_limit", value)

    @property
    @pulumi.getter(name="agentMemRequest")
    def agent_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of memory MiB allocated by the agent container, corresponding to the K8S request.
        """
        return pulumi.get(self, "agent_mem_request")

    @agent_mem_request.setter
    def agent_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_request", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The application ID to which the group belongs.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        Application Name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> Optional[pulumi.Input[str]]:
        """
        App types.
        """
        return pulumi.get(self, "application_type")

    @application_type.setter
    def application_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_type", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterIp")
    def cluster_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Service ip.
        """
        return pulumi.get(self, "cluster_ip")

    @cluster_ip.setter
    def cluster_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ip", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of allocated CPU cores, corresponding to the K8S limit.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        Initially allocated CPU cores, corresponding to K8S request.
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="currentNum")
    def current_num(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of instances launched.
        """
        return pulumi.get(self, "current_num")

    @current_num.setter
    def current_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "current_num", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvArgs']]]]:
        """
        environment variable array object.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="groupComment")
    def group_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Group remarks field, the length should not exceed 200 characters.
        """
        return pulumi.get(self, "group_comment")

    @group_comment.setter
    def group_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_comment", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupResourceType")
    def group_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment Group Resource Type.
        """
        return pulumi.get(self, "group_resource_type")

    @group_resource_type.setter
    def group_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_resource_type", value)

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingArgs']]]]:
        """
        Deployment group health check settings.
        """
        return pulumi.get(self, "health_check_settings")

    @health_check_settings.setter
    def health_check_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupHealthCheckSettingArgs']]]]):
        pulumi.set(self, "health_check_settings", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of deployment group instances.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceNum")
    def instance_num(self) -> Optional[pulumi.Input[int]]:
        """
        number of instances.
        """
        return pulumi.get(self, "instance_num")

    @instance_num.setter
    def instance_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_num", value)

    @property
    @pulumi.getter(name="istioCpuLimit")
    def istio_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
        """
        return pulumi.get(self, "istio_cpu_limit")

    @istio_cpu_limit.setter
    def istio_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_limit", value)

    @property
    @pulumi.getter(name="istioCpuRequest")
    def istio_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
        """
        return pulumi.get(self, "istio_cpu_request")

    @istio_cpu_request.setter
    def istio_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_request", value)

    @property
    @pulumi.getter(name="istioMemLimit")
    def istio_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
        """
        return pulumi.get(self, "istio_mem_limit")

    @istio_mem_limit.setter
    def istio_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_limit", value)

    @property
    @pulumi.getter(name="istioMemRequest")
    def istio_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
        """
        return pulumi.get(self, "istio_mem_request")

    @istio_mem_request.setter
    def istio_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_request", value)

    @property
    @pulumi.getter(name="lbIp")
    def lb_ip(self) -> Optional[pulumi.Input[str]]:
        """
        load balancing ip.
        """
        return pulumi.get(self, "lb_ip")

    @lb_ip.setter
    def lb_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lb_ip", value)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[str]]:
        """
        The MaxSurge parameter of the kubernetes rolling update policy.
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[str]]:
        """
        The MaxUnavailable parameter of the kubernetes rolling update policy.
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="memLimit")
    def mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        Maximum allocated memory MiB, corresponding to K8S limit.
        """
        return pulumi.get(self, "mem_limit")

    @mem_limit.setter
    def mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_limit", value)

    @property
    @pulumi.getter(name="memRequest")
    def mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        Initially allocated memory MiB, corresponding to K8S request.
        """
        return pulumi.get(self, "mem_request")

    @mem_request.setter
    def mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_request", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        pod error message description.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="microserviceType")
    def microservice_type(self) -> Optional[pulumi.Input[str]]:
        """
        Service type.
        """
        return pulumi.get(self, "microservice_type")

    @microservice_type.setter
    def microservice_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microservice_type", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the namespace to which the group belongs.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[pulumi.Input[str]]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @namespace_name.setter
    def namespace_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name", value)

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]]]:
        """
        Protocol Ports array.
        """
        return pulumi.get(self, "protocol_ports")

    @protocol_ports.setter
    def protocol_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainGroupProtocolPortArgs']]]]):
        pulumi.set(self, "protocol_ports", value)

    @property
    @pulumi.getter
    def reponame(self) -> Optional[pulumi.Input[str]]:
        """
        Mirror name, such as /tsf/nginx.
        """
        return pulumi.get(self, "reponame")

    @reponame.setter
    def reponame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reponame", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        mirror server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment group status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        Image version name.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter(name="updateIvl")
    def update_ivl(self) -> Optional[pulumi.Input[int]]:
        """
        Rolling update is required, update interval.
        """
        return pulumi.get(self, "update_ivl")

    @update_ivl.setter
    def update_ivl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_ivl", value)

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[pulumi.Input[int]]:
        """
        Update method: 0: fast update 1: rolling update.
        """
        return pulumi.get(self, "update_type")

    @update_type.setter
    def update_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_type", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment group update timestamp.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_time", value)


class ContainGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_type: Optional[pulumi.Input[int]] = None,
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 group_comment: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_resource_type: Optional[pulumi.Input[str]] = None,
                 instance_num: Optional[pulumi.Input[int]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 protocol_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupProtocolPortArgs']]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf contain_group

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        contain_group = tencentcloud.tsf.ContainGroup("containGroup",
            access_type=0,
            application_id="application-y5r4nejv",
            cluster_id="cls-2yu5kxr8",
            cpu_limit="0.5",
            cpu_request="0.25",
            group_name="terraform-test",
            group_resource_type="DEF",
            instance_num=1,
            mem_limit="1280",
            mem_request="640",
            namespace_id="namespace-ydlezgxa",
            protocol_ports=[tencentcloud.tsf.ContainGroupProtocolPortArgs(
                node_port=0,
                port=333,
                protocol="TCP",
                target_port=333,
            )],
            update_ivl=10,
            update_type=1)
        ```

        ## Import

        tsf contain_group can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Tsf/containGroup:ContainGroup contain_group contain_group_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] access_type: 0: public network 1: access within the cluster 2: NodePort.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] agent_mem_limit: The maximum memory MiB of the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_mem_request: The number of memory MiB allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cpu_limit: The maximum number of allocated CPU cores, corresponding to the K8S limit.
        :param pulumi.Input[str] cpu_request: Initially allocated CPU cores, corresponding to K8S request.
        :param pulumi.Input[str] group_comment: Group remarks field, the length should not exceed 200 characters.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[str] group_resource_type: Deployment Group Resource Type.
        :param pulumi.Input[int] instance_num: number of instances.
        :param pulumi.Input[str] istio_cpu_limit: The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] istio_mem_limit: The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_mem_request: The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] mem_limit: Maximum allocated memory MiB, corresponding to K8S limit.
        :param pulumi.Input[str] mem_request: Initially allocated memory MiB, corresponding to K8S request.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupProtocolPortArgs']]]] protocol_ports: Protocol Ports array.
        :param pulumi.Input[str] subnet_id: subnet ID.
        :param pulumi.Input[int] update_ivl: Rolling update is required, update interval.
        :param pulumi.Input[int] update_type: Update method: 0: fast update 1: rolling update.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContainGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf contain_group

        ## Example Usage

        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        contain_group = tencentcloud.tsf.ContainGroup("containGroup",
            access_type=0,
            application_id="application-y5r4nejv",
            cluster_id="cls-2yu5kxr8",
            cpu_limit="0.5",
            cpu_request="0.25",
            group_name="terraform-test",
            group_resource_type="DEF",
            instance_num=1,
            mem_limit="1280",
            mem_request="640",
            namespace_id="namespace-ydlezgxa",
            protocol_ports=[tencentcloud.tsf.ContainGroupProtocolPortArgs(
                node_port=0,
                port=333,
                protocol="TCP",
                target_port=333,
            )],
            update_ivl=10,
            update_type=1)
        ```

        ## Import

        tsf contain_group can be imported using the id, e.g.

        ```sh
         $ pulumi import tencentcloud:Tsf/containGroup:ContainGroup contain_group contain_group_id
        ```

        :param str resource_name: The name of the resource.
        :param ContainGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContainGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_type: Optional[pulumi.Input[int]] = None,
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 group_comment: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_resource_type: Optional[pulumi.Input[str]] = None,
                 instance_num: Optional[pulumi.Input[int]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 protocol_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupProtocolPortArgs']]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContainGroupArgs.__new__(ContainGroupArgs)

            if access_type is None and not opts.urn:
                raise TypeError("Missing required property 'access_type'")
            __props__.__dict__["access_type"] = access_type
            __props__.__dict__["agent_cpu_limit"] = agent_cpu_limit
            __props__.__dict__["agent_cpu_request"] = agent_cpu_request
            __props__.__dict__["agent_mem_limit"] = agent_mem_limit
            __props__.__dict__["agent_mem_request"] = agent_mem_request
            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["cpu_limit"] = cpu_limit
            __props__.__dict__["cpu_request"] = cpu_request
            __props__.__dict__["group_comment"] = group_comment
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["group_resource_type"] = group_resource_type
            if instance_num is None and not opts.urn:
                raise TypeError("Missing required property 'instance_num'")
            __props__.__dict__["instance_num"] = instance_num
            __props__.__dict__["istio_cpu_limit"] = istio_cpu_limit
            __props__.__dict__["istio_cpu_request"] = istio_cpu_request
            __props__.__dict__["istio_mem_limit"] = istio_mem_limit
            __props__.__dict__["istio_mem_request"] = istio_mem_request
            __props__.__dict__["mem_limit"] = mem_limit
            __props__.__dict__["mem_request"] = mem_request
            if namespace_id is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_id'")
            __props__.__dict__["namespace_id"] = namespace_id
            if protocol_ports is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_ports'")
            __props__.__dict__["protocol_ports"] = protocol_ports
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["update_ivl"] = update_ivl
            __props__.__dict__["update_type"] = update_type
            __props__.__dict__["application_name"] = None
            __props__.__dict__["application_type"] = None
            __props__.__dict__["cluster_ip"] = None
            __props__.__dict__["cluster_name"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["current_num"] = None
            __props__.__dict__["envs"] = None
            __props__.__dict__["group_id"] = None
            __props__.__dict__["health_check_settings"] = None
            __props__.__dict__["instance_count"] = None
            __props__.__dict__["lb_ip"] = None
            __props__.__dict__["max_surge"] = None
            __props__.__dict__["max_unavailable"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["microservice_type"] = None
            __props__.__dict__["namespace_name"] = None
            __props__.__dict__["reponame"] = None
            __props__.__dict__["server"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["tag_name"] = None
            __props__.__dict__["updated_time"] = None
        super(ContainGroup, __self__).__init__(
            'tencentcloud:Tsf/containGroup:ContainGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_type: Optional[pulumi.Input[int]] = None,
            agent_cpu_limit: Optional[pulumi.Input[str]] = None,
            agent_cpu_request: Optional[pulumi.Input[str]] = None,
            agent_mem_limit: Optional[pulumi.Input[str]] = None,
            agent_mem_request: Optional[pulumi.Input[str]] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            application_name: Optional[pulumi.Input[str]] = None,
            application_type: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cluster_ip: Optional[pulumi.Input[str]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            cpu_limit: Optional[pulumi.Input[str]] = None,
            cpu_request: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            current_num: Optional[pulumi.Input[int]] = None,
            envs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupEnvArgs']]]]] = None,
            group_comment: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            group_resource_type: Optional[pulumi.Input[str]] = None,
            health_check_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupHealthCheckSettingArgs']]]]] = None,
            instance_count: Optional[pulumi.Input[int]] = None,
            instance_num: Optional[pulumi.Input[int]] = None,
            istio_cpu_limit: Optional[pulumi.Input[str]] = None,
            istio_cpu_request: Optional[pulumi.Input[str]] = None,
            istio_mem_limit: Optional[pulumi.Input[str]] = None,
            istio_mem_request: Optional[pulumi.Input[str]] = None,
            lb_ip: Optional[pulumi.Input[str]] = None,
            max_surge: Optional[pulumi.Input[str]] = None,
            max_unavailable: Optional[pulumi.Input[str]] = None,
            mem_limit: Optional[pulumi.Input[str]] = None,
            mem_request: Optional[pulumi.Input[str]] = None,
            message: Optional[pulumi.Input[str]] = None,
            microservice_type: Optional[pulumi.Input[str]] = None,
            namespace_id: Optional[pulumi.Input[str]] = None,
            namespace_name: Optional[pulumi.Input[str]] = None,
            protocol_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupProtocolPortArgs']]]]] = None,
            reponame: Optional[pulumi.Input[str]] = None,
            server: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tag_name: Optional[pulumi.Input[str]] = None,
            update_ivl: Optional[pulumi.Input[int]] = None,
            update_type: Optional[pulumi.Input[int]] = None,
            updated_time: Optional[pulumi.Input[int]] = None) -> 'ContainGroup':
        """
        Get an existing ContainGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] access_type: 0: public network 1: access within the cluster 2: NodePort.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] agent_mem_limit: The maximum memory MiB of the agent container, corresponding to the limit of K8S.
        :param pulumi.Input[str] agent_mem_request: The number of memory MiB allocated by the agent container, corresponding to the K8S request.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] application_name: Application Name.
        :param pulumi.Input[str] application_type: App types.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] cluster_ip: Service ip.
        :param pulumi.Input[str] cluster_name: cluster name.
        :param pulumi.Input[str] cpu_limit: The maximum number of allocated CPU cores, corresponding to the K8S limit.
        :param pulumi.Input[str] cpu_request: Initially allocated CPU cores, corresponding to K8S request.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[int] current_num: Total number of instances launched.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupEnvArgs']]]] envs: environment variable array object.
        :param pulumi.Input[str] group_comment: Group remarks field, the length should not exceed 200 characters.
        :param pulumi.Input[str] group_id: Deployment group ID.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[str] group_resource_type: Deployment Group Resource Type.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupHealthCheckSettingArgs']]]] health_check_settings: Deployment group health check settings.
        :param pulumi.Input[int] instance_count: Number of deployment group instances.
        :param pulumi.Input[int] instance_num: number of instances.
        :param pulumi.Input[str] istio_cpu_limit: The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] istio_mem_limit: The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
        :param pulumi.Input[str] istio_mem_request: The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
        :param pulumi.Input[str] lb_ip: load balancing ip.
        :param pulumi.Input[str] max_surge: The MaxSurge parameter of the kubernetes rolling update policy.
        :param pulumi.Input[str] max_unavailable: The MaxUnavailable parameter of the kubernetes rolling update policy.
        :param pulumi.Input[str] mem_limit: Maximum allocated memory MiB, corresponding to K8S limit.
        :param pulumi.Input[str] mem_request: Initially allocated memory MiB, corresponding to K8S request.
        :param pulumi.Input[str] message: pod error message description.
        :param pulumi.Input[str] microservice_type: Service type.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[str] namespace_name: namespace name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ContainGroupProtocolPortArgs']]]] protocol_ports: Protocol Ports array.
        :param pulumi.Input[str] reponame: Mirror name, such as /tsf/nginx.
        :param pulumi.Input[str] server: mirror server.
        :param pulumi.Input[str] status: Deployment group status.
        :param pulumi.Input[str] subnet_id: subnet ID.
        :param pulumi.Input[str] tag_name: Image version name.
        :param pulumi.Input[int] update_ivl: Rolling update is required, update interval.
        :param pulumi.Input[int] update_type: Update method: 0: fast update 1: rolling update.
        :param pulumi.Input[int] updated_time: Deployment group update timestamp.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContainGroupState.__new__(_ContainGroupState)

        __props__.__dict__["access_type"] = access_type
        __props__.__dict__["agent_cpu_limit"] = agent_cpu_limit
        __props__.__dict__["agent_cpu_request"] = agent_cpu_request
        __props__.__dict__["agent_mem_limit"] = agent_mem_limit
        __props__.__dict__["agent_mem_request"] = agent_mem_request
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["application_name"] = application_name
        __props__.__dict__["application_type"] = application_type
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_ip"] = cluster_ip
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cpu_limit"] = cpu_limit
        __props__.__dict__["cpu_request"] = cpu_request
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["current_num"] = current_num
        __props__.__dict__["envs"] = envs
        __props__.__dict__["group_comment"] = group_comment
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["group_resource_type"] = group_resource_type
        __props__.__dict__["health_check_settings"] = health_check_settings
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["instance_num"] = instance_num
        __props__.__dict__["istio_cpu_limit"] = istio_cpu_limit
        __props__.__dict__["istio_cpu_request"] = istio_cpu_request
        __props__.__dict__["istio_mem_limit"] = istio_mem_limit
        __props__.__dict__["istio_mem_request"] = istio_mem_request
        __props__.__dict__["lb_ip"] = lb_ip
        __props__.__dict__["max_surge"] = max_surge
        __props__.__dict__["max_unavailable"] = max_unavailable
        __props__.__dict__["mem_limit"] = mem_limit
        __props__.__dict__["mem_request"] = mem_request
        __props__.__dict__["message"] = message
        __props__.__dict__["microservice_type"] = microservice_type
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["namespace_name"] = namespace_name
        __props__.__dict__["protocol_ports"] = protocol_ports
        __props__.__dict__["reponame"] = reponame
        __props__.__dict__["server"] = server
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tag_name"] = tag_name
        __props__.__dict__["update_ivl"] = update_ivl
        __props__.__dict__["update_type"] = update_type
        __props__.__dict__["updated_time"] = updated_time
        return ContainGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> pulumi.Output[int]:
        """
        0: public network 1: access within the cluster 2: NodePort.
        """
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="agentCpuLimit")
    def agent_cpu_limit(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum number of CPU cores for the agent container, corresponding to the limit of K8S.
        """
        return pulumi.get(self, "agent_cpu_limit")

    @property
    @pulumi.getter(name="agentCpuRequest")
    def agent_cpu_request(self) -> pulumi.Output[Optional[str]]:
        """
        The number of CPU cores allocated by the agent container, corresponding to the K8S request.
        """
        return pulumi.get(self, "agent_cpu_request")

    @property
    @pulumi.getter(name="agentMemLimit")
    def agent_mem_limit(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum memory MiB of the agent container, corresponding to the limit of K8S.
        """
        return pulumi.get(self, "agent_mem_limit")

    @property
    @pulumi.getter(name="agentMemRequest")
    def agent_mem_request(self) -> pulumi.Output[Optional[str]]:
        """
        The number of memory MiB allocated by the agent container, corresponding to the K8S request.
        """
        return pulumi.get(self, "agent_mem_request")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        The application ID to which the group belongs.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Output[str]:
        """
        Application Name.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="applicationType")
    def application_type(self) -> pulumi.Output[str]:
        """
        App types.
        """
        return pulumi.get(self, "application_type")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterIp")
    def cluster_ip(self) -> pulumi.Output[str]:
        """
        Service ip.
        """
        return pulumi.get(self, "cluster_ip")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> pulumi.Output[Optional[str]]:
        """
        The maximum number of allocated CPU cores, corresponding to the K8S limit.
        """
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> pulumi.Output[Optional[str]]:
        """
        Initially allocated CPU cores, corresponding to K8S request.
        """
        return pulumi.get(self, "cpu_request")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="currentNum")
    def current_num(self) -> pulumi.Output[int]:
        """
        Total number of instances launched.
        """
        return pulumi.get(self, "current_num")

    @property
    @pulumi.getter
    def envs(self) -> pulumi.Output[Sequence['outputs.ContainGroupEnv']]:
        """
        environment variable array object.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="groupComment")
    def group_comment(self) -> pulumi.Output[Optional[str]]:
        """
        Group remarks field, the length should not exceed 200 characters.
        """
        return pulumi.get(self, "group_comment")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        Deployment group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupResourceType")
    def group_resource_type(self) -> pulumi.Output[str]:
        """
        Deployment Group Resource Type.
        """
        return pulumi.get(self, "group_resource_type")

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> pulumi.Output[Sequence['outputs.ContainGroupHealthCheckSetting']]:
        """
        Deployment group health check settings.
        """
        return pulumi.get(self, "health_check_settings")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[int]:
        """
        Number of deployment group instances.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceNum")
    def instance_num(self) -> pulumi.Output[int]:
        """
        number of instances.
        """
        return pulumi.get(self, "instance_num")

    @property
    @pulumi.getter(name="istioCpuLimit")
    def istio_cpu_limit(self) -> pulumi.Output[str]:
        """
        The maximum number of CPU cores for the istioproxy container corresponds to the limit of K8S.
        """
        return pulumi.get(self, "istio_cpu_limit")

    @property
    @pulumi.getter(name="istioCpuRequest")
    def istio_cpu_request(self) -> pulumi.Output[str]:
        """
        The number of CPU cores allocated by the istioproxy container, corresponding to the K8S request.
        """
        return pulumi.get(self, "istio_cpu_request")

    @property
    @pulumi.getter(name="istioMemLimit")
    def istio_mem_limit(self) -> pulumi.Output[str]:
        """
        The maximum memory MiB of the istioproxy container corresponds to the limit of K8S.
        """
        return pulumi.get(self, "istio_mem_limit")

    @property
    @pulumi.getter(name="istioMemRequest")
    def istio_mem_request(self) -> pulumi.Output[str]:
        """
        The number of memory MiB allocated by the istioproxy container, corresponding to the K8S request.
        """
        return pulumi.get(self, "istio_mem_request")

    @property
    @pulumi.getter(name="lbIp")
    def lb_ip(self) -> pulumi.Output[str]:
        """
        load balancing ip.
        """
        return pulumi.get(self, "lb_ip")

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> pulumi.Output[str]:
        """
        The MaxSurge parameter of the kubernetes rolling update policy.
        """
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> pulumi.Output[str]:
        """
        The MaxUnavailable parameter of the kubernetes rolling update policy.
        """
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="memLimit")
    def mem_limit(self) -> pulumi.Output[Optional[str]]:
        """
        Maximum allocated memory MiB, corresponding to K8S limit.
        """
        return pulumi.get(self, "mem_limit")

    @property
    @pulumi.getter(name="memRequest")
    def mem_request(self) -> pulumi.Output[Optional[str]]:
        """
        Initially allocated memory MiB, corresponding to K8S request.
        """
        return pulumi.get(self, "mem_request")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        pod error message description.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="microserviceType")
    def microservice_type(self) -> pulumi.Output[str]:
        """
        Service type.
        """
        return pulumi.get(self, "microservice_type")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[str]:
        """
        ID of the namespace to which the group belongs.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> pulumi.Output[str]:
        """
        namespace name.
        """
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter(name="protocolPorts")
    def protocol_ports(self) -> pulumi.Output[Sequence['outputs.ContainGroupProtocolPort']]:
        """
        Protocol Ports array.
        """
        return pulumi.get(self, "protocol_ports")

    @property
    @pulumi.getter
    def reponame(self) -> pulumi.Output[str]:
        """
        Mirror name, such as /tsf/nginx.
        """
        return pulumi.get(self, "reponame")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        mirror server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Deployment group status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> pulumi.Output[str]:
        """
        Image version name.
        """
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter(name="updateIvl")
    def update_ivl(self) -> pulumi.Output[int]:
        """
        Rolling update is required, update interval.
        """
        return pulumi.get(self, "update_ivl")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> pulumi.Output[int]:
        """
        Update method: 0: fast update 1: rolling update.
        """
        return pulumi.get(self, "update_type")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[int]:
        """
        Deployment group update timestamp.
        """
        return pulumi.get(self, "updated_time")

