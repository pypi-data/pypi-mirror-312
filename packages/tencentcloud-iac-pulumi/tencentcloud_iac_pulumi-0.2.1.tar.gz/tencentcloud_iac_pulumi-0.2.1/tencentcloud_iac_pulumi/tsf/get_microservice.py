# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMicroserviceResult',
    'AwaitableGetMicroserviceResult',
    'get_microservice',
    'get_microservice_output',
]

@pulumi.output_type
class GetMicroserviceResult:
    """
    A collection of values returned by getMicroservice.
    """
    def __init__(__self__, id=None, microservice_id_lists=None, microservice_name_lists=None, namespace_id=None, result_output_file=None, results=None, statuses=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if microservice_id_lists and not isinstance(microservice_id_lists, list):
            raise TypeError("Expected argument 'microservice_id_lists' to be a list")
        pulumi.set(__self__, "microservice_id_lists", microservice_id_lists)
        if microservice_name_lists and not isinstance(microservice_name_lists, list):
            raise TypeError("Expected argument 'microservice_name_lists' to be a list")
        pulumi.set(__self__, "microservice_name_lists", microservice_name_lists)
        if namespace_id and not isinstance(namespace_id, str):
            raise TypeError("Expected argument 'namespace_id' to be a str")
        pulumi.set(__self__, "namespace_id", namespace_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="microserviceIdLists")
    def microservice_id_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "microservice_id_lists")

    @property
    @pulumi.getter(name="microserviceNameLists")
    def microservice_name_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "microservice_name_lists")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        Namespace Id.  Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetMicroserviceResultResult']:
        """
        Microservice paging list information. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "statuses")


class AwaitableGetMicroserviceResult(GetMicroserviceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMicroserviceResult(
            id=self.id,
            microservice_id_lists=self.microservice_id_lists,
            microservice_name_lists=self.microservice_name_lists,
            namespace_id=self.namespace_id,
            result_output_file=self.result_output_file,
            results=self.results,
            statuses=self.statuses)


def get_microservice(microservice_id_lists: Optional[Sequence[str]] = None,
                     microservice_name_lists: Optional[Sequence[str]] = None,
                     namespace_id: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     statuses: Optional[Sequence[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMicroserviceResult:
    """
    Use this data source to query detailed information of tsf microservice

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    microservice = tencentcloud.Tsf.get_microservice(namespace_id=var["namespace_id"],
        microservice_id_lists=["ms-yq3jo6jd"],
        microservice_name_lists=["provider-demo"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] microservice_id_lists: microservice id list.
    :param Sequence[str] microservice_name_lists: List of service names for search.
    :param str namespace_id: namespace id.
    :param str result_output_file: Used to save results.
    :param Sequence[str] statuses: status filter, online, offline, single_online.
    """
    __args__ = dict()
    __args__['microserviceIdLists'] = microservice_id_lists
    __args__['microserviceNameLists'] = microservice_name_lists
    __args__['namespaceId'] = namespace_id
    __args__['resultOutputFile'] = result_output_file
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tsf/getMicroservice:getMicroservice', __args__, opts=opts, typ=GetMicroserviceResult).value

    return AwaitableGetMicroserviceResult(
        id=pulumi.get(__ret__, 'id'),
        microservice_id_lists=pulumi.get(__ret__, 'microservice_id_lists'),
        microservice_name_lists=pulumi.get(__ret__, 'microservice_name_lists'),
        namespace_id=pulumi.get(__ret__, 'namespace_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        statuses=pulumi.get(__ret__, 'statuses'))


@_utilities.lift_output_func(get_microservice)
def get_microservice_output(microservice_id_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            microservice_name_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            namespace_id: Optional[pulumi.Input[str]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMicroserviceResult]:
    """
    Use this data source to query detailed information of tsf microservice

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    microservice = tencentcloud.Tsf.get_microservice(namespace_id=var["namespace_id"],
        microservice_id_lists=["ms-yq3jo6jd"],
        microservice_name_lists=["provider-demo"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] microservice_id_lists: microservice id list.
    :param Sequence[str] microservice_name_lists: List of service names for search.
    :param str namespace_id: namespace id.
    :param str result_output_file: Used to save results.
    :param Sequence[str] statuses: status filter, online, offline, single_online.
    """
    ...
