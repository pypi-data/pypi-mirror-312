# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 cluster_id: pulumi.Input[str],
                 group_name: pulumi.Input[str],
                 namespace_id: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 group_desc: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[str] alias: Deployment Group Notes.
        :param pulumi.Input[str] group_desc: Group description.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "namespace_id", namespace_id)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if group_desc is not None:
            pulumi.set(__self__, "group_desc", group_desc)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        The application ID to which the group belongs.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        ID of the namespace to which the group belongs.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment Group Notes.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="groupDesc")
    def group_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Group description.
        """
        return pulumi.get(self, "group_desc")

    @group_desc.setter
    def group_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_desc", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 group_desc: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_resource_type: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[str] alias: Deployment Group Notes.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] group_desc: Group description.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[str] group_resource_type: Deployment Group Resource Type.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if group_desc is not None:
            pulumi.set(__self__, "group_desc", group_desc)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_resource_type is not None:
            pulumi.set(__self__, "group_resource_type", group_resource_type)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment Group Notes.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        The application ID to which the group belongs.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="groupDesc")
    def group_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Group description.
        """
        return pulumi.get(self, "group_desc")

    @group_desc.setter
    def group_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_desc", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupResourceType")
    def group_resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment Group Resource Type.
        """
        return pulumi.get(self, "group_resource_type")

    @group_resource_type.setter
    def group_resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_resource_type", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the namespace to which the group belongs.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 group_desc: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.tsf.Group("group",
            alias="terraform test",
            application_id="application-xxx",
            cluster_id="cluster-vwgjxxxx",
            group_desc="terraform desc",
            group_name="terraform-test",
            namespace_id="namespace-aemrxxx",
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/group:Group group group-axxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias: Deployment Group Notes.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] group_desc: Group description.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.tsf.Group("group",
            alias="terraform test",
            application_id="application-xxx",
            cluster_id="cluster-vwgjxxxx",
            group_desc="terraform desc",
            group_name="terraform-test",
            namespace_id="namespace-aemrxxx",
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/group:Group group group-axxx
        ```

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 group_desc: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["alias"] = alias
            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["group_desc"] = group_desc
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            if namespace_id is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_id'")
            __props__.__dict__["namespace_id"] = namespace_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["group_resource_type"] = None
        super(Group, __self__).__init__(
            'tencentcloud:Tsf/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[str]] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            group_desc: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            group_resource_type: Optional[pulumi.Input[str]] = None,
            namespace_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias: Deployment Group Notes.
        :param pulumi.Input[str] application_id: The application ID to which the group belongs.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] group_desc: Group description.
        :param pulumi.Input[str] group_name: Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        :param pulumi.Input[str] group_resource_type: Deployment Group Resource Type.
        :param pulumi.Input[str] namespace_id: ID of the namespace to which the group belongs.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["group_desc"] = group_desc
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["group_resource_type"] = group_resource_type
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["tags"] = tags
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[Optional[str]]:
        """
        Deployment Group Notes.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        The application ID to which the group belongs.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="groupDesc")
    def group_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Group description.
        """
        return pulumi.get(self, "group_desc")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Group name field, length 1~60, beginning with a letter or underscore, can contain alphanumeric underscore.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupResourceType")
    def group_resource_type(self) -> pulumi.Output[str]:
        """
        Deployment Group Resource Type.
        """
        return pulumi.get(self, "group_resource_type")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[str]:
        """
        ID of the namespace to which the group belongs.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

