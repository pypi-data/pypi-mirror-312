# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['MicroserviceArgs', 'Microservice']

@pulumi.input_type
class MicroserviceArgs:
    def __init__(__self__, *,
                 microservice_name: pulumi.Input[str],
                 namespace_id: pulumi.Input[str],
                 microservice_desc: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Microservice resource.
        :param pulumi.Input[str] microservice_name: Microservice name.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[str] microservice_desc: Microservice description information.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        pulumi.set(__self__, "microservice_name", microservice_name)
        pulumi.set(__self__, "namespace_id", namespace_id)
        if microservice_desc is not None:
            pulumi.set(__self__, "microservice_desc", microservice_desc)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="microserviceName")
    def microservice_name(self) -> pulumi.Input[str]:
        """
        Microservice name.
        """
        return pulumi.get(self, "microservice_name")

    @microservice_name.setter
    def microservice_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "microservice_name", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Input[str]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter(name="microserviceDesc")
    def microservice_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Microservice description information.
        """
        return pulumi.get(self, "microservice_desc")

    @microservice_desc.setter
    def microservice_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microservice_desc", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _MicroserviceState:
    def __init__(__self__, *,
                 microservice_desc: Optional[pulumi.Input[str]] = None,
                 microservice_name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Input properties used for looking up and filtering Microservice resources.
        :param pulumi.Input[str] microservice_desc: Microservice description information.
        :param pulumi.Input[str] microservice_name: Microservice name.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        if microservice_desc is not None:
            pulumi.set(__self__, "microservice_desc", microservice_desc)
        if microservice_name is not None:
            pulumi.set(__self__, "microservice_name", microservice_name)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="microserviceDesc")
    def microservice_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Microservice description information.
        """
        return pulumi.get(self, "microservice_desc")

    @microservice_desc.setter
    def microservice_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microservice_desc", value)

    @property
    @pulumi.getter(name="microserviceName")
    def microservice_name(self) -> Optional[pulumi.Input[str]]:
        """
        Microservice name.
        """
        return pulumi.get(self, "microservice_name")

    @microservice_name.setter
    def microservice_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "microservice_name", value)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @namespace_id.setter
    def namespace_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


class Microservice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 microservice_desc: Optional[pulumi.Input[str]] = None,
                 microservice_name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf microservice

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        microservice = tencentcloud.tsf.Microservice("microservice",
            microservice_desc="desc-microservice",
            microservice_name="test-microservice",
            namespace_id="namespace-vjlkzkgy",
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf microservice can be imported using the namespaceId#microserviceId, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/microservice:Microservice microservice namespace-vjlkzkgy#ms-vjeb43lw
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] microservice_desc: Microservice description information.
        :param pulumi.Input[str] microservice_name: Microservice name.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MicroserviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf microservice

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        microservice = tencentcloud.tsf.Microservice("microservice",
            microservice_desc="desc-microservice",
            microservice_name="test-microservice",
            namespace_id="namespace-vjlkzkgy",
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf microservice can be imported using the namespaceId#microserviceId, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/microservice:Microservice microservice namespace-vjlkzkgy#ms-vjeb43lw
        ```

        :param str resource_name: The name of the resource.
        :param MicroserviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MicroserviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 microservice_desc: Optional[pulumi.Input[str]] = None,
                 microservice_name: Optional[pulumi.Input[str]] = None,
                 namespace_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MicroserviceArgs.__new__(MicroserviceArgs)

            __props__.__dict__["microservice_desc"] = microservice_desc
            if microservice_name is None and not opts.urn:
                raise TypeError("Missing required property 'microservice_name'")
            __props__.__dict__["microservice_name"] = microservice_name
            if namespace_id is None and not opts.urn:
                raise TypeError("Missing required property 'namespace_id'")
            __props__.__dict__["namespace_id"] = namespace_id
            __props__.__dict__["tags"] = tags
        super(Microservice, __self__).__init__(
            'tencentcloud:Tsf/microservice:Microservice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            microservice_desc: Optional[pulumi.Input[str]] = None,
            microservice_name: Optional[pulumi.Input[str]] = None,
            namespace_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None) -> 'Microservice':
        """
        Get an existing Microservice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] microservice_desc: Microservice description information.
        :param pulumi.Input[str] microservice_name: Microservice name.
        :param pulumi.Input[str] namespace_id: Namespace ID.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MicroserviceState.__new__(_MicroserviceState)

        __props__.__dict__["microservice_desc"] = microservice_desc
        __props__.__dict__["microservice_name"] = microservice_name
        __props__.__dict__["namespace_id"] = namespace_id
        __props__.__dict__["tags"] = tags
        return Microservice(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="microserviceDesc")
    def microservice_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Microservice description information.
        """
        return pulumi.get(self, "microservice_desc")

    @property
    @pulumi.getter(name="microserviceName")
    def microservice_name(self) -> pulumi.Output[str]:
        """
        Microservice name.
        """
        return pulumi.get(self, "microservice_name")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> pulumi.Output[str]:
        """
        Namespace ID.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

