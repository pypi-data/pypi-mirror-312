# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApiGroupArgs', 'ApiGroup']

@pulumi.input_type
class ApiGroupArgs:
    def __init__(__self__, *,
                 group_context: pulumi.Input[str],
                 group_name: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_instance_id: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 namespace_name_key: Optional[pulumi.Input[str]] = None,
                 namespace_name_key_position: Optional[pulumi.Input[str]] = None,
                 service_name_key: Optional[pulumi.Input[str]] = None,
                 service_name_key_position: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApiGroup resource.
        :param pulumi.Input[str] group_context: grouping context.
        :param pulumi.Input[str] group_name: group name, cannot contain Chinese.
        :param pulumi.Input[str] auth_type: authentication type. secret: key authentication; none: no authentication.
        :param pulumi.Input[str] description: remarks.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] group_type: grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        :param pulumi.Input[str] namespace_name_key: namespace parameter key value.
        :param pulumi.Input[str] namespace_name_key_position: namespace parameter position, path, header or query, the default is path.
        :param pulumi.Input[str] service_name_key: microservice name parameter key value.
        :param pulumi.Input[str] service_name_key_position: microservice name parameter position, path, header or query, the default is path.
        """
        pulumi.set(__self__, "group_context", group_context)
        pulumi.set(__self__, "group_name", group_name)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_instance_id is not None:
            pulumi.set(__self__, "gateway_instance_id", gateway_instance_id)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if namespace_name_key is not None:
            pulumi.set(__self__, "namespace_name_key", namespace_name_key)
        if namespace_name_key_position is not None:
            pulumi.set(__self__, "namespace_name_key_position", namespace_name_key_position)
        if service_name_key is not None:
            pulumi.set(__self__, "service_name_key", service_name_key)
        if service_name_key_position is not None:
            pulumi.set(__self__, "service_name_key_position", service_name_key_position)

    @property
    @pulumi.getter(name="groupContext")
    def group_context(self) -> pulumi.Input[str]:
        """
        grouping context.
        """
        return pulumi.get(self, "group_context")

    @group_context.setter
    def group_context(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_context", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        group name, cannot contain Chinese.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        authentication type. secret: key authentication; none: no authentication.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        remarks.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewayInstanceId")
    def gateway_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway entity ID.
        """
        return pulumi.get(self, "gateway_instance_id")

    @gateway_instance_id.setter
    def gateway_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_instance_id", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="namespaceNameKey")
    def namespace_name_key(self) -> Optional[pulumi.Input[str]]:
        """
        namespace parameter key value.
        """
        return pulumi.get(self, "namespace_name_key")

    @namespace_name_key.setter
    def namespace_name_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name_key", value)

    @property
    @pulumi.getter(name="namespaceNameKeyPosition")
    def namespace_name_key_position(self) -> Optional[pulumi.Input[str]]:
        """
        namespace parameter position, path, header or query, the default is path.
        """
        return pulumi.get(self, "namespace_name_key_position")

    @namespace_name_key_position.setter
    def namespace_name_key_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name_key_position", value)

    @property
    @pulumi.getter(name="serviceNameKey")
    def service_name_key(self) -> Optional[pulumi.Input[str]]:
        """
        microservice name parameter key value.
        """
        return pulumi.get(self, "service_name_key")

    @service_name_key.setter
    def service_name_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name_key", value)

    @property
    @pulumi.getter(name="serviceNameKeyPosition")
    def service_name_key_position(self) -> Optional[pulumi.Input[str]]:
        """
        microservice name parameter position, path, header or query, the default is path.
        """
        return pulumi.get(self, "service_name_key_position")

    @service_name_key_position.setter
    def service_name_key_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name_key_position", value)


@pulumi.input_type
class _ApiGroupState:
    def __init__(__self__, *,
                 acl_mode: Optional[pulumi.Input[str]] = None,
                 api_count: Optional[pulumi.Input[int]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 binded_gateway_deploy_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ApiGroupBindedGatewayDeployGroupArgs']]]] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_instance_id: Optional[pulumi.Input[str]] = None,
                 gateway_instance_type: Optional[pulumi.Input[str]] = None,
                 group_context: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 namespace_name_key: Optional[pulumi.Input[str]] = None,
                 namespace_name_key_position: Optional[pulumi.Input[str]] = None,
                 service_name_key: Optional[pulumi.Input[str]] = None,
                 service_name_key_position: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiGroup resources.
        :param pulumi.Input[str] acl_mode: Access group ACL type.
        :param pulumi.Input[int] api_count: number of APIs.
        :param pulumi.Input[str] auth_type: authentication type. secret: key authentication; none: no authentication.
        :param pulumi.Input[Sequence[pulumi.Input['ApiGroupBindedGatewayDeployGroupArgs']]] binded_gateway_deploy_groups: api group bound gateway deployment group.
        :param pulumi.Input[str] created_time: Group creation time such as: 2019-06-20 15:51:28.
        :param pulumi.Input[str] description: remarks.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] gateway_instance_type: Type of gateway instance.
        :param pulumi.Input[str] group_context: grouping context.
        :param pulumi.Input[str] group_id: Api Group Id.
        :param pulumi.Input[str] group_name: group name, cannot contain Chinese.
        :param pulumi.Input[str] group_type: grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        :param pulumi.Input[str] namespace_name_key: namespace parameter key value.
        :param pulumi.Input[str] namespace_name_key_position: namespace parameter position, path, header or query, the default is path.
        :param pulumi.Input[str] service_name_key: microservice name parameter key value.
        :param pulumi.Input[str] service_name_key_position: microservice name parameter position, path, header or query, the default is path.
        :param pulumi.Input[str] status: Release status, drafted: Not published. released: released.
        :param pulumi.Input[str] updated_time: Group update time such as: 2019-06-20 15:51:28.
        """
        if acl_mode is not None:
            pulumi.set(__self__, "acl_mode", acl_mode)
        if api_count is not None:
            pulumi.set(__self__, "api_count", api_count)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if binded_gateway_deploy_groups is not None:
            pulumi.set(__self__, "binded_gateway_deploy_groups", binded_gateway_deploy_groups)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_instance_id is not None:
            pulumi.set(__self__, "gateway_instance_id", gateway_instance_id)
        if gateway_instance_type is not None:
            pulumi.set(__self__, "gateway_instance_type", gateway_instance_type)
        if group_context is not None:
            pulumi.set(__self__, "group_context", group_context)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if namespace_name_key is not None:
            pulumi.set(__self__, "namespace_name_key", namespace_name_key)
        if namespace_name_key_position is not None:
            pulumi.set(__self__, "namespace_name_key_position", namespace_name_key_position)
        if service_name_key is not None:
            pulumi.set(__self__, "service_name_key", service_name_key)
        if service_name_key_position is not None:
            pulumi.set(__self__, "service_name_key_position", service_name_key_position)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter(name="aclMode")
    def acl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Access group ACL type.
        """
        return pulumi.get(self, "acl_mode")

    @acl_mode.setter
    def acl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl_mode", value)

    @property
    @pulumi.getter(name="apiCount")
    def api_count(self) -> Optional[pulumi.Input[int]]:
        """
        number of APIs.
        """
        return pulumi.get(self, "api_count")

    @api_count.setter
    def api_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_count", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        authentication type. secret: key authentication; none: no authentication.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="bindedGatewayDeployGroups")
    def binded_gateway_deploy_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiGroupBindedGatewayDeployGroupArgs']]]]:
        """
        api group bound gateway deployment group.
        """
        return pulumi.get(self, "binded_gateway_deploy_groups")

    @binded_gateway_deploy_groups.setter
    def binded_gateway_deploy_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiGroupBindedGatewayDeployGroupArgs']]]]):
        pulumi.set(self, "binded_gateway_deploy_groups", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        Group creation time such as: 2019-06-20 15:51:28.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        remarks.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewayInstanceId")
    def gateway_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway entity ID.
        """
        return pulumi.get(self, "gateway_instance_id")

    @gateway_instance_id.setter
    def gateway_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_instance_id", value)

    @property
    @pulumi.getter(name="gatewayInstanceType")
    def gateway_instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of gateway instance.
        """
        return pulumi.get(self, "gateway_instance_type")

    @gateway_instance_type.setter
    def gateway_instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_instance_type", value)

    @property
    @pulumi.getter(name="groupContext")
    def group_context(self) -> Optional[pulumi.Input[str]]:
        """
        grouping context.
        """
        return pulumi.get(self, "group_context")

    @group_context.setter
    def group_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_context", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Api Group Id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        group name, cannot contain Chinese.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input[str]]:
        """
        grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="namespaceNameKey")
    def namespace_name_key(self) -> Optional[pulumi.Input[str]]:
        """
        namespace parameter key value.
        """
        return pulumi.get(self, "namespace_name_key")

    @namespace_name_key.setter
    def namespace_name_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name_key", value)

    @property
    @pulumi.getter(name="namespaceNameKeyPosition")
    def namespace_name_key_position(self) -> Optional[pulumi.Input[str]]:
        """
        namespace parameter position, path, header or query, the default is path.
        """
        return pulumi.get(self, "namespace_name_key_position")

    @namespace_name_key_position.setter
    def namespace_name_key_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace_name_key_position", value)

    @property
    @pulumi.getter(name="serviceNameKey")
    def service_name_key(self) -> Optional[pulumi.Input[str]]:
        """
        microservice name parameter key value.
        """
        return pulumi.get(self, "service_name_key")

    @service_name_key.setter
    def service_name_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name_key", value)

    @property
    @pulumi.getter(name="serviceNameKeyPosition")
    def service_name_key_position(self) -> Optional[pulumi.Input[str]]:
        """
        microservice name parameter position, path, header or query, the default is path.
        """
        return pulumi.get(self, "service_name_key_position")

    @service_name_key_position.setter
    def service_name_key_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name_key_position", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Release status, drafted: Not published. released: released.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[str]]:
        """
        Group update time such as: 2019-06-20 15:51:28.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_time", value)


class ApiGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_instance_id: Optional[pulumi.Input[str]] = None,
                 group_context: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 namespace_name_key: Optional[pulumi.Input[str]] = None,
                 namespace_name_key_position: Optional[pulumi.Input[str]] = None,
                 service_name_key: Optional[pulumi.Input[str]] = None,
                 service_name_key_position: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf api_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        api_group = tencentcloud.tsf.ApiGroup("apiGroup",
            auth_type="none",
            description="terraform-test",
            gateway_instance_id="gw-ins-i6mjpgm8",
            group_context="/terraform-test",
            group_name="terraform_test_group",
            group_type="ms",
            namespace_name_key_position="path",
            service_name_key_position="path")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf api_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/apiGroup:ApiGroup api_group api_group_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_type: authentication type. secret: key authentication; none: no authentication.
        :param pulumi.Input[str] description: remarks.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] group_context: grouping context.
        :param pulumi.Input[str] group_name: group name, cannot contain Chinese.
        :param pulumi.Input[str] group_type: grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        :param pulumi.Input[str] namespace_name_key: namespace parameter key value.
        :param pulumi.Input[str] namespace_name_key_position: namespace parameter position, path, header or query, the default is path.
        :param pulumi.Input[str] service_name_key: microservice name parameter key value.
        :param pulumi.Input[str] service_name_key_position: microservice name parameter position, path, header or query, the default is path.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf api_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        api_group = tencentcloud.tsf.ApiGroup("apiGroup",
            auth_type="none",
            description="terraform-test",
            gateway_instance_id="gw-ins-i6mjpgm8",
            group_context="/terraform-test",
            group_name="terraform_test_group",
            group_type="ms",
            namespace_name_key_position="path",
            service_name_key_position="path")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tsf api_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tsf/apiGroup:ApiGroup api_group api_group_id
        ```

        :param str resource_name: The name of the resource.
        :param ApiGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_instance_id: Optional[pulumi.Input[str]] = None,
                 group_context: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 group_type: Optional[pulumi.Input[str]] = None,
                 namespace_name_key: Optional[pulumi.Input[str]] = None,
                 namespace_name_key_position: Optional[pulumi.Input[str]] = None,
                 service_name_key: Optional[pulumi.Input[str]] = None,
                 service_name_key_position: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiGroupArgs.__new__(ApiGroupArgs)

            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["description"] = description
            __props__.__dict__["gateway_instance_id"] = gateway_instance_id
            if group_context is None and not opts.urn:
                raise TypeError("Missing required property 'group_context'")
            __props__.__dict__["group_context"] = group_context
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["group_type"] = group_type
            __props__.__dict__["namespace_name_key"] = namespace_name_key
            __props__.__dict__["namespace_name_key_position"] = namespace_name_key_position
            __props__.__dict__["service_name_key"] = service_name_key
            __props__.__dict__["service_name_key_position"] = service_name_key_position
            __props__.__dict__["acl_mode"] = None
            __props__.__dict__["api_count"] = None
            __props__.__dict__["binded_gateway_deploy_groups"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["gateway_instance_type"] = None
            __props__.__dict__["group_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_time"] = None
        super(ApiGroup, __self__).__init__(
            'tencentcloud:Tsf/apiGroup:ApiGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl_mode: Optional[pulumi.Input[str]] = None,
            api_count: Optional[pulumi.Input[int]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            binded_gateway_deploy_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiGroupBindedGatewayDeployGroupArgs']]]]] = None,
            created_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            gateway_instance_id: Optional[pulumi.Input[str]] = None,
            gateway_instance_type: Optional[pulumi.Input[str]] = None,
            group_context: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            group_type: Optional[pulumi.Input[str]] = None,
            namespace_name_key: Optional[pulumi.Input[str]] = None,
            namespace_name_key_position: Optional[pulumi.Input[str]] = None,
            service_name_key: Optional[pulumi.Input[str]] = None,
            service_name_key_position: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            updated_time: Optional[pulumi.Input[str]] = None) -> 'ApiGroup':
        """
        Get an existing ApiGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acl_mode: Access group ACL type.
        :param pulumi.Input[int] api_count: number of APIs.
        :param pulumi.Input[str] auth_type: authentication type. secret: key authentication; none: no authentication.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ApiGroupBindedGatewayDeployGroupArgs']]]] binded_gateway_deploy_groups: api group bound gateway deployment group.
        :param pulumi.Input[str] created_time: Group creation time such as: 2019-06-20 15:51:28.
        :param pulumi.Input[str] description: remarks.
        :param pulumi.Input[str] gateway_instance_id: gateway entity ID.
        :param pulumi.Input[str] gateway_instance_type: Type of gateway instance.
        :param pulumi.Input[str] group_context: grouping context.
        :param pulumi.Input[str] group_id: Api Group Id.
        :param pulumi.Input[str] group_name: group name, cannot contain Chinese.
        :param pulumi.Input[str] group_type: grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        :param pulumi.Input[str] namespace_name_key: namespace parameter key value.
        :param pulumi.Input[str] namespace_name_key_position: namespace parameter position, path, header or query, the default is path.
        :param pulumi.Input[str] service_name_key: microservice name parameter key value.
        :param pulumi.Input[str] service_name_key_position: microservice name parameter position, path, header or query, the default is path.
        :param pulumi.Input[str] status: Release status, drafted: Not published. released: released.
        :param pulumi.Input[str] updated_time: Group update time such as: 2019-06-20 15:51:28.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiGroupState.__new__(_ApiGroupState)

        __props__.__dict__["acl_mode"] = acl_mode
        __props__.__dict__["api_count"] = api_count
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["binded_gateway_deploy_groups"] = binded_gateway_deploy_groups
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["gateway_instance_id"] = gateway_instance_id
        __props__.__dict__["gateway_instance_type"] = gateway_instance_type
        __props__.__dict__["group_context"] = group_context
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["group_type"] = group_type
        __props__.__dict__["namespace_name_key"] = namespace_name_key
        __props__.__dict__["namespace_name_key_position"] = namespace_name_key_position
        __props__.__dict__["service_name_key"] = service_name_key
        __props__.__dict__["service_name_key_position"] = service_name_key_position
        __props__.__dict__["status"] = status
        __props__.__dict__["updated_time"] = updated_time
        return ApiGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aclMode")
    def acl_mode(self) -> pulumi.Output[str]:
        """
        Access group ACL type.
        """
        return pulumi.get(self, "acl_mode")

    @property
    @pulumi.getter(name="apiCount")
    def api_count(self) -> pulumi.Output[int]:
        """
        number of APIs.
        """
        return pulumi.get(self, "api_count")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        """
        authentication type. secret: key authentication; none: no authentication.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="bindedGatewayDeployGroups")
    def binded_gateway_deploy_groups(self) -> pulumi.Output[Sequence['outputs.ApiGroupBindedGatewayDeployGroup']]:
        """
        api group bound gateway deployment group.
        """
        return pulumi.get(self, "binded_gateway_deploy_groups")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        Group creation time such as: 2019-06-20 15:51:28.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        remarks.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayInstanceId")
    def gateway_instance_id(self) -> pulumi.Output[str]:
        """
        gateway entity ID.
        """
        return pulumi.get(self, "gateway_instance_id")

    @property
    @pulumi.getter(name="gatewayInstanceType")
    def gateway_instance_type(self) -> pulumi.Output[str]:
        """
        Type of gateway instance.
        """
        return pulumi.get(self, "gateway_instance_type")

    @property
    @pulumi.getter(name="groupContext")
    def group_context(self) -> pulumi.Output[str]:
        """
        grouping context.
        """
        return pulumi.get(self, "group_context")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        Api Group Id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        group name, cannot contain Chinese.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> pulumi.Output[str]:
        """
        grouping type, default ms. ms: microservice grouping; external: external Api grouping.
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter(name="namespaceNameKey")
    def namespace_name_key(self) -> pulumi.Output[str]:
        """
        namespace parameter key value.
        """
        return pulumi.get(self, "namespace_name_key")

    @property
    @pulumi.getter(name="namespaceNameKeyPosition")
    def namespace_name_key_position(self) -> pulumi.Output[str]:
        """
        namespace parameter position, path, header or query, the default is path.
        """
        return pulumi.get(self, "namespace_name_key_position")

    @property
    @pulumi.getter(name="serviceNameKey")
    def service_name_key(self) -> pulumi.Output[str]:
        """
        microservice name parameter key value.
        """
        return pulumi.get(self, "service_name_key")

    @property
    @pulumi.getter(name="serviceNameKeyPosition")
    def service_name_key_position(self) -> pulumi.Output[str]:
        """
        microservice name parameter position, path, header or query, the default is path.
        """
        return pulumi.get(self, "service_name_key_position")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Release status, drafted: Not published. released: released.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[str]:
        """
        Group update time such as: 2019-06-20 15:51:28.
        """
        return pulumi.get(self, "updated_time")

