# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DeployContainerGroupArgs', 'DeployContainerGroup']

@pulumi.input_type
class DeployContainerGroupArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 instance_num: pulumi.Input[int],
                 tag_name: pulumi.Input[str],
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 deploy_agent: Optional[pulumi.Input[bool]] = None,
                 do_not_start: Optional[pulumi.Input[bool]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]]] = None,
                 health_check_settings: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs']] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 jvm_opts: Optional[pulumi.Input[str]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[str]] = None,
                 reponame: Optional[pulumi.Input[str]] = None,
                 scheduling_strategy: Optional[pulumi.Input['DeployContainerGroupSchedulingStrategyArgs']] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 service_setting: Optional[pulumi.Input['DeployContainerGroupServiceSettingArgs']] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 volume_clean: Optional[pulumi.Input[bool]] = None,
                 volume_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]]] = None,
                 volume_mount_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]]] = None,
                 warmup_setting: Optional[pulumi.Input['DeployContainerGroupWarmupSettingArgs']] = None):
        """
        The set of arguments for constructing a DeployContainerGroup resource.
        :param pulumi.Input[str] group_id: group Id.
        :param pulumi.Input[int] instance_num: instance number.
        :param pulumi.Input[str] tag_name: image version name, v1.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores allocated to the agent container corresponds to the limit field in Kubernetes.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] agent_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] agent_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[str] cpu_limit: The maximum number of CPU cores for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] cpu_request: The number of CPU cores allocated to the business container, corresponding to the request in K8S. The default value is 0.25.
        :param pulumi.Input[bool] deploy_agent: Whether to deploy the agent container. If this parameter is not specified, the agent container will not be deployed by default.
        :param pulumi.Input[bool] do_not_start: Not start right away.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]] envs: The environment variables that the application runs in the deployment group. If this parameter is not specified, no additional environment variables are set by default.
        :param pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs'] health_check_settings: The configuration information for health checks. If this parameter is not specified, the health check is not set by default.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[str] istio_cpu_limit: The maximum amount of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;request&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] istio_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] jvm_opts: jvm options.
        :param pulumi.Input[str] max_surge: MaxSurge parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] max_unavailable: MaxUnavailable parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] mem_limit: The maximum memory size in MiB for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] mem_request: The amount of memory in MiB allocated to the business container, corresponding to the request in K8S. The default value is 640 MiB.
        :param pulumi.Input[str] repo_name: (Priority use) New image name, such as /tsf/nginx.
        :param pulumi.Input[str] repo_type: repo type, tcr or leave it blank.
        :param pulumi.Input[str] reponame: old image name, eg: /tsf/server.
        :param pulumi.Input['DeployContainerGroupSchedulingStrategyArgs'] scheduling_strategy: Node scheduling strategy. If this parameter is not specified, the node scheduling strategy will not be used by default.
        :param pulumi.Input[str] server: image server.
        :param pulumi.Input['DeployContainerGroupServiceSettingArgs'] service_setting: Network settings for container deployment groups.
        :param pulumi.Input[int] update_ivl: update Interval, is required when rolling update.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input[bool] volume_clean: Whether to clear the volume information. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]] volume_info_lists: Volume information, as a list.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]] volume_mount_info_lists: Volume mount point information, list type.
        :param pulumi.Input['DeployContainerGroupWarmupSettingArgs'] warmup_setting: warmup setting.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "instance_num", instance_num)
        pulumi.set(__self__, "tag_name", tag_name)
        if agent_cpu_limit is not None:
            pulumi.set(__self__, "agent_cpu_limit", agent_cpu_limit)
        if agent_cpu_request is not None:
            pulumi.set(__self__, "agent_cpu_request", agent_cpu_request)
        if agent_mem_limit is not None:
            pulumi.set(__self__, "agent_mem_limit", agent_mem_limit)
        if agent_mem_request is not None:
            pulumi.set(__self__, "agent_mem_request", agent_mem_request)
        if agent_profile_lists is not None:
            pulumi.set(__self__, "agent_profile_lists", agent_profile_lists)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if deploy_agent is not None:
            pulumi.set(__self__, "deploy_agent", deploy_agent)
        if do_not_start is not None:
            pulumi.set(__self__, "do_not_start", do_not_start)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if health_check_settings is not None:
            pulumi.set(__self__, "health_check_settings", health_check_settings)
        if incremental_deployment is not None:
            pulumi.set(__self__, "incremental_deployment", incremental_deployment)
        if istio_cpu_limit is not None:
            pulumi.set(__self__, "istio_cpu_limit", istio_cpu_limit)
        if istio_cpu_request is not None:
            pulumi.set(__self__, "istio_cpu_request", istio_cpu_request)
        if istio_mem_limit is not None:
            pulumi.set(__self__, "istio_mem_limit", istio_mem_limit)
        if istio_mem_request is not None:
            pulumi.set(__self__, "istio_mem_request", istio_mem_request)
        if jvm_opts is not None:
            pulumi.set(__self__, "jvm_opts", jvm_opts)
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if mem_limit is not None:
            pulumi.set(__self__, "mem_limit", mem_limit)
        if mem_request is not None:
            pulumi.set(__self__, "mem_request", mem_request)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if reponame is not None:
            pulumi.set(__self__, "reponame", reponame)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_setting is not None:
            pulumi.set(__self__, "service_setting", service_setting)
        if update_ivl is not None:
            pulumi.set(__self__, "update_ivl", update_ivl)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if volume_clean is not None:
            pulumi.set(__self__, "volume_clean", volume_clean)
        if volume_info_lists is not None:
            pulumi.set(__self__, "volume_info_lists", volume_info_lists)
        if volume_mount_info_lists is not None:
            pulumi.set(__self__, "volume_mount_info_lists", volume_mount_info_lists)
        if warmup_setting is not None:
            pulumi.set(__self__, "warmup_setting", warmup_setting)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        group Id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="instanceNum")
    def instance_num(self) -> pulumi.Input[int]:
        """
        instance number.
        """
        return pulumi.get(self, "instance_num")

    @instance_num.setter
    def instance_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "instance_num", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> pulumi.Input[str]:
        """
        image version name, v1.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter(name="agentCpuLimit")
    def agent_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores allocated to the agent container corresponds to the limit field in Kubernetes.
        """
        return pulumi.get(self, "agent_cpu_limit")

    @agent_cpu_limit.setter
    def agent_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_limit", value)

    @property
    @pulumi.getter(name="agentCpuRequest")
    def agent_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "agent_cpu_request")

    @agent_cpu_request.setter
    def agent_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_request", value)

    @property
    @pulumi.getter(name="agentMemLimit")
    def agent_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of memory in MiB allocated to the agent container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "agent_mem_limit")

    @agent_mem_limit.setter
    def agent_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_limit", value)

    @property
    @pulumi.getter(name="agentMemRequest")
    def agent_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "agent_mem_request")

    @agent_mem_request.setter
    def agent_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_request", value)

    @property
    @pulumi.getter(name="agentProfileLists")
    def agent_profile_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]]]:
        """
        javaagent info: SERVICE_AGENT/OT_AGENT.
        """
        return pulumi.get(self, "agent_profile_lists")

    @agent_profile_lists.setter
    def agent_profile_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]]]):
        pulumi.set(self, "agent_profile_lists", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated to the business container, corresponding to the request in K8S. The default value is 0.25.
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="deployAgent")
    def deploy_agent(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to deploy the agent container. If this parameter is not specified, the agent container will not be deployed by default.
        """
        return pulumi.get(self, "deploy_agent")

    @deploy_agent.setter
    def deploy_agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_agent", value)

    @property
    @pulumi.getter(name="doNotStart")
    def do_not_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Not start right away.
        """
        return pulumi.get(self, "do_not_start")

    @do_not_start.setter
    def do_not_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "do_not_start", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]]]:
        """
        The environment variables that the application runs in the deployment group. If this parameter is not specified, no additional environment variables are set by default.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs']]:
        """
        The configuration information for health checks. If this parameter is not specified, the health check is not set by default.
        """
        return pulumi.get(self, "health_check_settings")

    @health_check_settings.setter
    def health_check_settings(self, value: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs']]):
        pulumi.set(self, "health_check_settings", value)

    @property
    @pulumi.getter(name="incrementalDeployment")
    def incremental_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to perform incremental deployment. The default value is false, which means full update.
        """
        return pulumi.get(self, "incremental_deployment")

    @incremental_deployment.setter
    def incremental_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incremental_deployment", value)

    @property
    @pulumi.getter(name="istioCpuLimit")
    def istio_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "istio_cpu_limit")

    @istio_cpu_limit.setter
    def istio_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_limit", value)

    @property
    @pulumi.getter(name="istioCpuRequest")
    def istio_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;request&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "istio_cpu_request")

    @istio_cpu_request.setter
    def istio_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_request", value)

    @property
    @pulumi.getter(name="istioMemLimit")
    def istio_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "istio_mem_limit")

    @istio_mem_limit.setter
    def istio_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_limit", value)

    @property
    @pulumi.getter(name="istioMemRequest")
    def istio_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "istio_mem_request")

    @istio_mem_request.setter
    def istio_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_request", value)

    @property
    @pulumi.getter(name="jvmOpts")
    def jvm_opts(self) -> Optional[pulumi.Input[str]]:
        """
        jvm options.
        """
        return pulumi.get(self, "jvm_opts")

    @jvm_opts.setter
    def jvm_opts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jvm_opts", value)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[str]]:
        """
        MaxSurge parameter in Kubernetes rolling update strategy.
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[str]]:
        """
        MaxUnavailable parameter in Kubernetes rolling update strategy.
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="memLimit")
    def mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory size in MiB for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        """
        return pulumi.get(self, "mem_limit")

    @mem_limit.setter
    def mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_limit", value)

    @property
    @pulumi.getter(name="memRequest")
    def mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of memory in MiB allocated to the business container, corresponding to the request in K8S. The default value is 640 MiB.
        """
        return pulumi.get(self, "mem_request")

    @mem_request.setter
    def mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_request", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Priority use) New image name, such as /tsf/nginx.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[str]]:
        """
        repo type, tcr or leave it blank.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_type", value)

    @property
    @pulumi.getter
    def reponame(self) -> Optional[pulumi.Input[str]]:
        """
        old image name, eg: /tsf/server.
        """
        return pulumi.get(self, "reponame")

    @reponame.setter
    def reponame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reponame", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[pulumi.Input['DeployContainerGroupSchedulingStrategyArgs']]:
        """
        Node scheduling strategy. If this parameter is not specified, the node scheduling strategy will not be used by default.
        """
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: Optional[pulumi.Input['DeployContainerGroupSchedulingStrategyArgs']]):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        image server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serviceSetting")
    def service_setting(self) -> Optional[pulumi.Input['DeployContainerGroupServiceSettingArgs']]:
        """
        Network settings for container deployment groups.
        """
        return pulumi.get(self, "service_setting")

    @service_setting.setter
    def service_setting(self, value: Optional[pulumi.Input['DeployContainerGroupServiceSettingArgs']]):
        pulumi.set(self, "service_setting", value)

    @property
    @pulumi.getter(name="updateIvl")
    def update_ivl(self) -> Optional[pulumi.Input[int]]:
        """
        update Interval, is required when rolling update.
        """
        return pulumi.get(self, "update_ivl")

    @update_ivl.setter
    def update_ivl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_ivl", value)

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[pulumi.Input[int]]:
        """
        Update method: 0 for fast update, 1 for rolling update.
        """
        return pulumi.get(self, "update_type")

    @update_type.setter
    def update_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_type", value)

    @property
    @pulumi.getter(name="volumeClean")
    def volume_clean(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to clear the volume information. Default is false.
        """
        return pulumi.get(self, "volume_clean")

    @volume_clean.setter
    def volume_clean(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "volume_clean", value)

    @property
    @pulumi.getter(name="volumeInfoLists")
    def volume_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]]]:
        """
        Volume information, as a list.
        """
        return pulumi.get(self, "volume_info_lists")

    @volume_info_lists.setter
    def volume_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]]]):
        pulumi.set(self, "volume_info_lists", value)

    @property
    @pulumi.getter(name="volumeMountInfoLists")
    def volume_mount_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]]]:
        """
        Volume mount point information, list type.
        """
        return pulumi.get(self, "volume_mount_info_lists")

    @volume_mount_info_lists.setter
    def volume_mount_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]]]):
        pulumi.set(self, "volume_mount_info_lists", value)

    @property
    @pulumi.getter(name="warmupSetting")
    def warmup_setting(self) -> Optional[pulumi.Input['DeployContainerGroupWarmupSettingArgs']]:
        """
        warmup setting.
        """
        return pulumi.get(self, "warmup_setting")

    @warmup_setting.setter
    def warmup_setting(self, value: Optional[pulumi.Input['DeployContainerGroupWarmupSettingArgs']]):
        pulumi.set(self, "warmup_setting", value)


@pulumi.input_type
class _DeployContainerGroupState:
    def __init__(__self__, *,
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 deploy_agent: Optional[pulumi.Input[bool]] = None,
                 do_not_start: Optional[pulumi.Input[bool]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 health_check_settings: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs']] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 instance_num: Optional[pulumi.Input[int]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 jvm_opts: Optional[pulumi.Input[str]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[str]] = None,
                 reponame: Optional[pulumi.Input[str]] = None,
                 scheduling_strategy: Optional[pulumi.Input['DeployContainerGroupSchedulingStrategyArgs']] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 service_setting: Optional[pulumi.Input['DeployContainerGroupServiceSettingArgs']] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 volume_clean: Optional[pulumi.Input[bool]] = None,
                 volume_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]]] = None,
                 volume_mount_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]]] = None,
                 warmup_setting: Optional[pulumi.Input['DeployContainerGroupWarmupSettingArgs']] = None):
        """
        Input properties used for looking up and filtering DeployContainerGroup resources.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores allocated to the agent container corresponds to the limit field in Kubernetes.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] agent_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] agent_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[str] cpu_limit: The maximum number of CPU cores for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] cpu_request: The number of CPU cores allocated to the business container, corresponding to the request in K8S. The default value is 0.25.
        :param pulumi.Input[bool] deploy_agent: Whether to deploy the agent container. If this parameter is not specified, the agent container will not be deployed by default.
        :param pulumi.Input[bool] do_not_start: Not start right away.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]] envs: The environment variables that the application runs in the deployment group. If this parameter is not specified, no additional environment variables are set by default.
        :param pulumi.Input[str] group_id: group Id.
        :param pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs'] health_check_settings: The configuration information for health checks. If this parameter is not specified, the health check is not set by default.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[int] instance_num: instance number.
        :param pulumi.Input[str] istio_cpu_limit: The maximum amount of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;request&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] istio_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] jvm_opts: jvm options.
        :param pulumi.Input[str] max_surge: MaxSurge parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] max_unavailable: MaxUnavailable parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] mem_limit: The maximum memory size in MiB for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] mem_request: The amount of memory in MiB allocated to the business container, corresponding to the request in K8S. The default value is 640 MiB.
        :param pulumi.Input[str] repo_name: (Priority use) New image name, such as /tsf/nginx.
        :param pulumi.Input[str] repo_type: repo type, tcr or leave it blank.
        :param pulumi.Input[str] reponame: old image name, eg: /tsf/server.
        :param pulumi.Input['DeployContainerGroupSchedulingStrategyArgs'] scheduling_strategy: Node scheduling strategy. If this parameter is not specified, the node scheduling strategy will not be used by default.
        :param pulumi.Input[str] server: image server.
        :param pulumi.Input['DeployContainerGroupServiceSettingArgs'] service_setting: Network settings for container deployment groups.
        :param pulumi.Input[str] tag_name: image version name, v1.
        :param pulumi.Input[int] update_ivl: update Interval, is required when rolling update.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input[bool] volume_clean: Whether to clear the volume information. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]] volume_info_lists: Volume information, as a list.
        :param pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]] volume_mount_info_lists: Volume mount point information, list type.
        :param pulumi.Input['DeployContainerGroupWarmupSettingArgs'] warmup_setting: warmup setting.
        """
        if agent_cpu_limit is not None:
            pulumi.set(__self__, "agent_cpu_limit", agent_cpu_limit)
        if agent_cpu_request is not None:
            pulumi.set(__self__, "agent_cpu_request", agent_cpu_request)
        if agent_mem_limit is not None:
            pulumi.set(__self__, "agent_mem_limit", agent_mem_limit)
        if agent_mem_request is not None:
            pulumi.set(__self__, "agent_mem_request", agent_mem_request)
        if agent_profile_lists is not None:
            pulumi.set(__self__, "agent_profile_lists", agent_profile_lists)
        if cpu_limit is not None:
            pulumi.set(__self__, "cpu_limit", cpu_limit)
        if cpu_request is not None:
            pulumi.set(__self__, "cpu_request", cpu_request)
        if deploy_agent is not None:
            pulumi.set(__self__, "deploy_agent", deploy_agent)
        if do_not_start is not None:
            pulumi.set(__self__, "do_not_start", do_not_start)
        if envs is not None:
            pulumi.set(__self__, "envs", envs)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if health_check_settings is not None:
            pulumi.set(__self__, "health_check_settings", health_check_settings)
        if incremental_deployment is not None:
            pulumi.set(__self__, "incremental_deployment", incremental_deployment)
        if instance_num is not None:
            pulumi.set(__self__, "instance_num", instance_num)
        if istio_cpu_limit is not None:
            pulumi.set(__self__, "istio_cpu_limit", istio_cpu_limit)
        if istio_cpu_request is not None:
            pulumi.set(__self__, "istio_cpu_request", istio_cpu_request)
        if istio_mem_limit is not None:
            pulumi.set(__self__, "istio_mem_limit", istio_mem_limit)
        if istio_mem_request is not None:
            pulumi.set(__self__, "istio_mem_request", istio_mem_request)
        if jvm_opts is not None:
            pulumi.set(__self__, "jvm_opts", jvm_opts)
        if max_surge is not None:
            pulumi.set(__self__, "max_surge", max_surge)
        if max_unavailable is not None:
            pulumi.set(__self__, "max_unavailable", max_unavailable)
        if mem_limit is not None:
            pulumi.set(__self__, "mem_limit", mem_limit)
        if mem_request is not None:
            pulumi.set(__self__, "mem_request", mem_request)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if reponame is not None:
            pulumi.set(__self__, "reponame", reponame)
        if scheduling_strategy is not None:
            pulumi.set(__self__, "scheduling_strategy", scheduling_strategy)
        if server is not None:
            pulumi.set(__self__, "server", server)
        if service_setting is not None:
            pulumi.set(__self__, "service_setting", service_setting)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)
        if update_ivl is not None:
            pulumi.set(__self__, "update_ivl", update_ivl)
        if update_type is not None:
            pulumi.set(__self__, "update_type", update_type)
        if volume_clean is not None:
            pulumi.set(__self__, "volume_clean", volume_clean)
        if volume_info_lists is not None:
            pulumi.set(__self__, "volume_info_lists", volume_info_lists)
        if volume_mount_info_lists is not None:
            pulumi.set(__self__, "volume_mount_info_lists", volume_mount_info_lists)
        if warmup_setting is not None:
            pulumi.set(__self__, "warmup_setting", warmup_setting)

    @property
    @pulumi.getter(name="agentCpuLimit")
    def agent_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores allocated to the agent container corresponds to the limit field in Kubernetes.
        """
        return pulumi.get(self, "agent_cpu_limit")

    @agent_cpu_limit.setter
    def agent_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_limit", value)

    @property
    @pulumi.getter(name="agentCpuRequest")
    def agent_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "agent_cpu_request")

    @agent_cpu_request.setter
    def agent_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_cpu_request", value)

    @property
    @pulumi.getter(name="agentMemLimit")
    def agent_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of memory in MiB allocated to the agent container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "agent_mem_limit")

    @agent_mem_limit.setter
    def agent_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_limit", value)

    @property
    @pulumi.getter(name="agentMemRequest")
    def agent_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "agent_mem_request")

    @agent_mem_request.setter
    def agent_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "agent_mem_request", value)

    @property
    @pulumi.getter(name="agentProfileLists")
    def agent_profile_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]]]:
        """
        javaagent info: SERVICE_AGENT/OT_AGENT.
        """
        return pulumi.get(self, "agent_profile_lists")

    @agent_profile_lists.setter
    def agent_profile_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupAgentProfileListArgs']]]]):
        pulumi.set(self, "agent_profile_lists", value)

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum number of CPU cores for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        """
        return pulumi.get(self, "cpu_limit")

    @cpu_limit.setter
    def cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_limit", value)

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated to the business container, corresponding to the request in K8S. The default value is 0.25.
        """
        return pulumi.get(self, "cpu_request")

    @cpu_request.setter
    def cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu_request", value)

    @property
    @pulumi.getter(name="deployAgent")
    def deploy_agent(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to deploy the agent container. If this parameter is not specified, the agent container will not be deployed by default.
        """
        return pulumi.get(self, "deploy_agent")

    @deploy_agent.setter
    def deploy_agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deploy_agent", value)

    @property
    @pulumi.getter(name="doNotStart")
    def do_not_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Not start right away.
        """
        return pulumi.get(self, "do_not_start")

    @do_not_start.setter
    def do_not_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "do_not_start", value)

    @property
    @pulumi.getter
    def envs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]]]:
        """
        The environment variables that the application runs in the deployment group. If this parameter is not specified, no additional environment variables are set by default.
        """
        return pulumi.get(self, "envs")

    @envs.setter
    def envs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupEnvArgs']]]]):
        pulumi.set(self, "envs", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        group Id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs']]:
        """
        The configuration information for health checks. If this parameter is not specified, the health check is not set by default.
        """
        return pulumi.get(self, "health_check_settings")

    @health_check_settings.setter
    def health_check_settings(self, value: Optional[pulumi.Input['DeployContainerGroupHealthCheckSettingsArgs']]):
        pulumi.set(self, "health_check_settings", value)

    @property
    @pulumi.getter(name="incrementalDeployment")
    def incremental_deployment(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to perform incremental deployment. The default value is false, which means full update.
        """
        return pulumi.get(self, "incremental_deployment")

    @incremental_deployment.setter
    def incremental_deployment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incremental_deployment", value)

    @property
    @pulumi.getter(name="instanceNum")
    def instance_num(self) -> Optional[pulumi.Input[int]]:
        """
        instance number.
        """
        return pulumi.get(self, "instance_num")

    @instance_num.setter
    def instance_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_num", value)

    @property
    @pulumi.getter(name="istioCpuLimit")
    def istio_cpu_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "istio_cpu_limit")

    @istio_cpu_limit.setter
    def istio_cpu_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_limit", value)

    @property
    @pulumi.getter(name="istioCpuRequest")
    def istio_cpu_request(self) -> Optional[pulumi.Input[str]]:
        """
        The number of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;request&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "istio_cpu_request")

    @istio_cpu_request.setter
    def istio_cpu_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_cpu_request", value)

    @property
    @pulumi.getter(name="istioMemLimit")
    def istio_mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "istio_mem_limit")

    @istio_mem_limit.setter
    def istio_mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_limit", value)

    @property
    @pulumi.getter(name="istioMemRequest")
    def istio_mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "istio_mem_request")

    @istio_mem_request.setter
    def istio_mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "istio_mem_request", value)

    @property
    @pulumi.getter(name="jvmOpts")
    def jvm_opts(self) -> Optional[pulumi.Input[str]]:
        """
        jvm options.
        """
        return pulumi.get(self, "jvm_opts")

    @jvm_opts.setter
    def jvm_opts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jvm_opts", value)

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> Optional[pulumi.Input[str]]:
        """
        MaxSurge parameter in Kubernetes rolling update strategy.
        """
        return pulumi.get(self, "max_surge")

    @max_surge.setter
    def max_surge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_surge", value)

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> Optional[pulumi.Input[str]]:
        """
        MaxUnavailable parameter in Kubernetes rolling update strategy.
        """
        return pulumi.get(self, "max_unavailable")

    @max_unavailable.setter
    def max_unavailable(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_unavailable", value)

    @property
    @pulumi.getter(name="memLimit")
    def mem_limit(self) -> Optional[pulumi.Input[str]]:
        """
        The maximum memory size in MiB for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        """
        return pulumi.get(self, "mem_limit")

    @mem_limit.setter
    def mem_limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_limit", value)

    @property
    @pulumi.getter(name="memRequest")
    def mem_request(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of memory in MiB allocated to the business container, corresponding to the request in K8S. The default value is 640 MiB.
        """
        return pulumi.get(self, "mem_request")

    @mem_request.setter
    def mem_request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mem_request", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        (Priority use) New image name, such as /tsf/nginx.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[str]]:
        """
        repo type, tcr or leave it blank.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_type", value)

    @property
    @pulumi.getter
    def reponame(self) -> Optional[pulumi.Input[str]]:
        """
        old image name, eg: /tsf/server.
        """
        return pulumi.get(self, "reponame")

    @reponame.setter
    def reponame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reponame", value)

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> Optional[pulumi.Input['DeployContainerGroupSchedulingStrategyArgs']]:
        """
        Node scheduling strategy. If this parameter is not specified, the node scheduling strategy will not be used by default.
        """
        return pulumi.get(self, "scheduling_strategy")

    @scheduling_strategy.setter
    def scheduling_strategy(self, value: Optional[pulumi.Input['DeployContainerGroupSchedulingStrategyArgs']]):
        pulumi.set(self, "scheduling_strategy", value)

    @property
    @pulumi.getter
    def server(self) -> Optional[pulumi.Input[str]]:
        """
        image server.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="serviceSetting")
    def service_setting(self) -> Optional[pulumi.Input['DeployContainerGroupServiceSettingArgs']]:
        """
        Network settings for container deployment groups.
        """
        return pulumi.get(self, "service_setting")

    @service_setting.setter
    def service_setting(self, value: Optional[pulumi.Input['DeployContainerGroupServiceSettingArgs']]):
        pulumi.set(self, "service_setting", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        image version name, v1.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)

    @property
    @pulumi.getter(name="updateIvl")
    def update_ivl(self) -> Optional[pulumi.Input[int]]:
        """
        update Interval, is required when rolling update.
        """
        return pulumi.get(self, "update_ivl")

    @update_ivl.setter
    def update_ivl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_ivl", value)

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> Optional[pulumi.Input[int]]:
        """
        Update method: 0 for fast update, 1 for rolling update.
        """
        return pulumi.get(self, "update_type")

    @update_type.setter
    def update_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "update_type", value)

    @property
    @pulumi.getter(name="volumeClean")
    def volume_clean(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to clear the volume information. Default is false.
        """
        return pulumi.get(self, "volume_clean")

    @volume_clean.setter
    def volume_clean(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "volume_clean", value)

    @property
    @pulumi.getter(name="volumeInfoLists")
    def volume_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]]]:
        """
        Volume information, as a list.
        """
        return pulumi.get(self, "volume_info_lists")

    @volume_info_lists.setter
    def volume_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeInfoListArgs']]]]):
        pulumi.set(self, "volume_info_lists", value)

    @property
    @pulumi.getter(name="volumeMountInfoLists")
    def volume_mount_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]]]:
        """
        Volume mount point information, list type.
        """
        return pulumi.get(self, "volume_mount_info_lists")

    @volume_mount_info_lists.setter
    def volume_mount_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DeployContainerGroupVolumeMountInfoListArgs']]]]):
        pulumi.set(self, "volume_mount_info_lists", value)

    @property
    @pulumi.getter(name="warmupSetting")
    def warmup_setting(self) -> Optional[pulumi.Input['DeployContainerGroupWarmupSettingArgs']]:
        """
        warmup setting.
        """
        return pulumi.get(self, "warmup_setting")

    @warmup_setting.setter
    def warmup_setting(self, value: Optional[pulumi.Input['DeployContainerGroupWarmupSettingArgs']]):
        pulumi.set(self, "warmup_setting", value)


class DeployContainerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupAgentProfileListArgs']]]]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 deploy_agent: Optional[pulumi.Input[bool]] = None,
                 do_not_start: Optional[pulumi.Input[bool]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupEnvArgs']]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 health_check_settings: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupHealthCheckSettingsArgs']]] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 instance_num: Optional[pulumi.Input[int]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 jvm_opts: Optional[pulumi.Input[str]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[str]] = None,
                 reponame: Optional[pulumi.Input[str]] = None,
                 scheduling_strategy: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupSchedulingStrategyArgs']]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 service_setting: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupServiceSettingArgs']]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 volume_clean: Optional[pulumi.Input[bool]] = None,
                 volume_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeInfoListArgs']]]]] = None,
                 volume_mount_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeMountInfoListArgs']]]]] = None,
                 warmup_setting: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupWarmupSettingArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tsf deploy_container_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        deploy_container_group = tencentcloud.tsf.DeployContainerGroup("deployContainerGroup",
            agent_cpu_limit="0.2",
            agent_cpu_request="0.1",
            agent_mem_limit="400",
            agent_mem_request="125",
            cpu_limit="0.5",
            cpu_request="0.25",
            deploy_agent=True,
            do_not_start=False,
            group_id="group-yqml6w3a",
            health_check_settings=tencentcloud.tsf.DeployContainerGroupHealthCheckSettingsArgs(
                readiness_probe=tencentcloud.tsf.DeployContainerGroupHealthCheckSettingsReadinessProbeArgs(
                    action_type="TCP",
                    failure_threshold=3,
                    initial_delay_seconds=0,
                    path="/",
                    period_seconds=30,
                    port=80,
                    scheme="HTTP",
                    success_threshold=1,
                    timeout_seconds=3,
                    type="TSF_DEFAULT",
                ),
            ),
            instance_num=1,
            jvm_opts="-Xms128m -Xmx512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m",
            max_surge="25%",
            max_unavailable="0",
            mem_limit="1280",
            mem_request="640",
            repo_type="personal",
            reponame="tsf_100011913960/terraform",
            scheduling_strategy=tencentcloud.tsf.DeployContainerGroupSchedulingStrategyArgs(
                type="NONE",
            ),
            server="ccr.ccs.tencentyun.com",
            service_setting=tencentcloud.tsf.DeployContainerGroupServiceSettingArgs(
                access_type=1,
                allow_delete_service=True,
                disable_service=False,
                headless_service=False,
                open_session_affinity=False,
                protocol_ports=[tencentcloud.tsf.DeployContainerGroupServiceSettingProtocolPortArgs(
                    node_port=30001,
                    port=18081,
                    protocol="TCP",
                    target_port=18081,
                )],
                session_affinity_timeout_seconds=10800,
                subnet_id="",
            ),
            tag_name="terraform-only-1",
            update_ivl=10,
            update_type=1,
            volume_clean=False,
            warmup_setting=tencentcloud.tsf.DeployContainerGroupWarmupSettingArgs(
                enabled=False,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores allocated to the agent container corresponds to the limit field in Kubernetes.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] agent_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] agent_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupAgentProfileListArgs']]]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[str] cpu_limit: The maximum number of CPU cores for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] cpu_request: The number of CPU cores allocated to the business container, corresponding to the request in K8S. The default value is 0.25.
        :param pulumi.Input[bool] deploy_agent: Whether to deploy the agent container. If this parameter is not specified, the agent container will not be deployed by default.
        :param pulumi.Input[bool] do_not_start: Not start right away.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupEnvArgs']]]] envs: The environment variables that the application runs in the deployment group. If this parameter is not specified, no additional environment variables are set by default.
        :param pulumi.Input[str] group_id: group Id.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupHealthCheckSettingsArgs']] health_check_settings: The configuration information for health checks. If this parameter is not specified, the health check is not set by default.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[int] instance_num: instance number.
        :param pulumi.Input[str] istio_cpu_limit: The maximum amount of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;request&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] istio_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] jvm_opts: jvm options.
        :param pulumi.Input[str] max_surge: MaxSurge parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] max_unavailable: MaxUnavailable parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] mem_limit: The maximum memory size in MiB for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] mem_request: The amount of memory in MiB allocated to the business container, corresponding to the request in K8S. The default value is 640 MiB.
        :param pulumi.Input[str] repo_name: (Priority use) New image name, such as /tsf/nginx.
        :param pulumi.Input[str] repo_type: repo type, tcr or leave it blank.
        :param pulumi.Input[str] reponame: old image name, eg: /tsf/server.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupSchedulingStrategyArgs']] scheduling_strategy: Node scheduling strategy. If this parameter is not specified, the node scheduling strategy will not be used by default.
        :param pulumi.Input[str] server: image server.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupServiceSettingArgs']] service_setting: Network settings for container deployment groups.
        :param pulumi.Input[str] tag_name: image version name, v1.
        :param pulumi.Input[int] update_ivl: update Interval, is required when rolling update.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input[bool] volume_clean: Whether to clear the volume information. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeInfoListArgs']]]] volume_info_lists: Volume information, as a list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeMountInfoListArgs']]]] volume_mount_info_lists: Volume mount point information, list type.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupWarmupSettingArgs']] warmup_setting: warmup setting.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployContainerGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tsf deploy_container_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        deploy_container_group = tencentcloud.tsf.DeployContainerGroup("deployContainerGroup",
            agent_cpu_limit="0.2",
            agent_cpu_request="0.1",
            agent_mem_limit="400",
            agent_mem_request="125",
            cpu_limit="0.5",
            cpu_request="0.25",
            deploy_agent=True,
            do_not_start=False,
            group_id="group-yqml6w3a",
            health_check_settings=tencentcloud.tsf.DeployContainerGroupHealthCheckSettingsArgs(
                readiness_probe=tencentcloud.tsf.DeployContainerGroupHealthCheckSettingsReadinessProbeArgs(
                    action_type="TCP",
                    failure_threshold=3,
                    initial_delay_seconds=0,
                    path="/",
                    period_seconds=30,
                    port=80,
                    scheme="HTTP",
                    success_threshold=1,
                    timeout_seconds=3,
                    type="TSF_DEFAULT",
                ),
            ),
            instance_num=1,
            jvm_opts="-Xms128m -Xmx512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m",
            max_surge="25%",
            max_unavailable="0",
            mem_limit="1280",
            mem_request="640",
            repo_type="personal",
            reponame="tsf_100011913960/terraform",
            scheduling_strategy=tencentcloud.tsf.DeployContainerGroupSchedulingStrategyArgs(
                type="NONE",
            ),
            server="ccr.ccs.tencentyun.com",
            service_setting=tencentcloud.tsf.DeployContainerGroupServiceSettingArgs(
                access_type=1,
                allow_delete_service=True,
                disable_service=False,
                headless_service=False,
                open_session_affinity=False,
                protocol_ports=[tencentcloud.tsf.DeployContainerGroupServiceSettingProtocolPortArgs(
                    node_port=30001,
                    port=18081,
                    protocol="TCP",
                    target_port=18081,
                )],
                session_affinity_timeout_seconds=10800,
                subnet_id="",
            ),
            tag_name="terraform-only-1",
            update_ivl=10,
            update_type=1,
            volume_clean=False,
            warmup_setting=tencentcloud.tsf.DeployContainerGroupWarmupSettingArgs(
                enabled=False,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param DeployContainerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployContainerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_cpu_limit: Optional[pulumi.Input[str]] = None,
                 agent_cpu_request: Optional[pulumi.Input[str]] = None,
                 agent_mem_limit: Optional[pulumi.Input[str]] = None,
                 agent_mem_request: Optional[pulumi.Input[str]] = None,
                 agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupAgentProfileListArgs']]]]] = None,
                 cpu_limit: Optional[pulumi.Input[str]] = None,
                 cpu_request: Optional[pulumi.Input[str]] = None,
                 deploy_agent: Optional[pulumi.Input[bool]] = None,
                 do_not_start: Optional[pulumi.Input[bool]] = None,
                 envs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupEnvArgs']]]]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 health_check_settings: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupHealthCheckSettingsArgs']]] = None,
                 incremental_deployment: Optional[pulumi.Input[bool]] = None,
                 instance_num: Optional[pulumi.Input[int]] = None,
                 istio_cpu_limit: Optional[pulumi.Input[str]] = None,
                 istio_cpu_request: Optional[pulumi.Input[str]] = None,
                 istio_mem_limit: Optional[pulumi.Input[str]] = None,
                 istio_mem_request: Optional[pulumi.Input[str]] = None,
                 jvm_opts: Optional[pulumi.Input[str]] = None,
                 max_surge: Optional[pulumi.Input[str]] = None,
                 max_unavailable: Optional[pulumi.Input[str]] = None,
                 mem_limit: Optional[pulumi.Input[str]] = None,
                 mem_request: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[str]] = None,
                 reponame: Optional[pulumi.Input[str]] = None,
                 scheduling_strategy: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupSchedulingStrategyArgs']]] = None,
                 server: Optional[pulumi.Input[str]] = None,
                 service_setting: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupServiceSettingArgs']]] = None,
                 tag_name: Optional[pulumi.Input[str]] = None,
                 update_ivl: Optional[pulumi.Input[int]] = None,
                 update_type: Optional[pulumi.Input[int]] = None,
                 volume_clean: Optional[pulumi.Input[bool]] = None,
                 volume_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeInfoListArgs']]]]] = None,
                 volume_mount_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeMountInfoListArgs']]]]] = None,
                 warmup_setting: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupWarmupSettingArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployContainerGroupArgs.__new__(DeployContainerGroupArgs)

            __props__.__dict__["agent_cpu_limit"] = agent_cpu_limit
            __props__.__dict__["agent_cpu_request"] = agent_cpu_request
            __props__.__dict__["agent_mem_limit"] = agent_mem_limit
            __props__.__dict__["agent_mem_request"] = agent_mem_request
            __props__.__dict__["agent_profile_lists"] = agent_profile_lists
            __props__.__dict__["cpu_limit"] = cpu_limit
            __props__.__dict__["cpu_request"] = cpu_request
            __props__.__dict__["deploy_agent"] = deploy_agent
            __props__.__dict__["do_not_start"] = do_not_start
            __props__.__dict__["envs"] = envs
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["health_check_settings"] = health_check_settings
            __props__.__dict__["incremental_deployment"] = incremental_deployment
            if instance_num is None and not opts.urn:
                raise TypeError("Missing required property 'instance_num'")
            __props__.__dict__["instance_num"] = instance_num
            __props__.__dict__["istio_cpu_limit"] = istio_cpu_limit
            __props__.__dict__["istio_cpu_request"] = istio_cpu_request
            __props__.__dict__["istio_mem_limit"] = istio_mem_limit
            __props__.__dict__["istio_mem_request"] = istio_mem_request
            __props__.__dict__["jvm_opts"] = jvm_opts
            __props__.__dict__["max_surge"] = max_surge
            __props__.__dict__["max_unavailable"] = max_unavailable
            __props__.__dict__["mem_limit"] = mem_limit
            __props__.__dict__["mem_request"] = mem_request
            __props__.__dict__["repo_name"] = repo_name
            __props__.__dict__["repo_type"] = repo_type
            __props__.__dict__["reponame"] = reponame
            __props__.__dict__["scheduling_strategy"] = scheduling_strategy
            __props__.__dict__["server"] = server
            __props__.__dict__["service_setting"] = service_setting
            if tag_name is None and not opts.urn:
                raise TypeError("Missing required property 'tag_name'")
            __props__.__dict__["tag_name"] = tag_name
            __props__.__dict__["update_ivl"] = update_ivl
            __props__.__dict__["update_type"] = update_type
            __props__.__dict__["volume_clean"] = volume_clean
            __props__.__dict__["volume_info_lists"] = volume_info_lists
            __props__.__dict__["volume_mount_info_lists"] = volume_mount_info_lists
            __props__.__dict__["warmup_setting"] = warmup_setting
        super(DeployContainerGroup, __self__).__init__(
            'tencentcloud:Tsf/deployContainerGroup:DeployContainerGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            agent_cpu_limit: Optional[pulumi.Input[str]] = None,
            agent_cpu_request: Optional[pulumi.Input[str]] = None,
            agent_mem_limit: Optional[pulumi.Input[str]] = None,
            agent_mem_request: Optional[pulumi.Input[str]] = None,
            agent_profile_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupAgentProfileListArgs']]]]] = None,
            cpu_limit: Optional[pulumi.Input[str]] = None,
            cpu_request: Optional[pulumi.Input[str]] = None,
            deploy_agent: Optional[pulumi.Input[bool]] = None,
            do_not_start: Optional[pulumi.Input[bool]] = None,
            envs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupEnvArgs']]]]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            health_check_settings: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupHealthCheckSettingsArgs']]] = None,
            incremental_deployment: Optional[pulumi.Input[bool]] = None,
            instance_num: Optional[pulumi.Input[int]] = None,
            istio_cpu_limit: Optional[pulumi.Input[str]] = None,
            istio_cpu_request: Optional[pulumi.Input[str]] = None,
            istio_mem_limit: Optional[pulumi.Input[str]] = None,
            istio_mem_request: Optional[pulumi.Input[str]] = None,
            jvm_opts: Optional[pulumi.Input[str]] = None,
            max_surge: Optional[pulumi.Input[str]] = None,
            max_unavailable: Optional[pulumi.Input[str]] = None,
            mem_limit: Optional[pulumi.Input[str]] = None,
            mem_request: Optional[pulumi.Input[str]] = None,
            repo_name: Optional[pulumi.Input[str]] = None,
            repo_type: Optional[pulumi.Input[str]] = None,
            reponame: Optional[pulumi.Input[str]] = None,
            scheduling_strategy: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupSchedulingStrategyArgs']]] = None,
            server: Optional[pulumi.Input[str]] = None,
            service_setting: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupServiceSettingArgs']]] = None,
            tag_name: Optional[pulumi.Input[str]] = None,
            update_ivl: Optional[pulumi.Input[int]] = None,
            update_type: Optional[pulumi.Input[int]] = None,
            volume_clean: Optional[pulumi.Input[bool]] = None,
            volume_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeInfoListArgs']]]]] = None,
            volume_mount_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeMountInfoListArgs']]]]] = None,
            warmup_setting: Optional[pulumi.Input[pulumi.InputType['DeployContainerGroupWarmupSettingArgs']]] = None) -> 'DeployContainerGroup':
        """
        Get an existing DeployContainerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] agent_cpu_limit: The maximum number of CPU cores allocated to the agent container corresponds to the limit field in Kubernetes.
        :param pulumi.Input[str] agent_cpu_request: The number of CPU cores allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] agent_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] agent_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupAgentProfileListArgs']]]] agent_profile_lists: javaagent info: SERVICE_AGENT/OT_AGENT.
        :param pulumi.Input[str] cpu_limit: The maximum number of CPU cores for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] cpu_request: The number of CPU cores allocated to the business container, corresponding to the request in K8S. The default value is 0.25.
        :param pulumi.Input[bool] deploy_agent: Whether to deploy the agent container. If this parameter is not specified, the agent container will not be deployed by default.
        :param pulumi.Input[bool] do_not_start: Not start right away.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupEnvArgs']]]] envs: The environment variables that the application runs in the deployment group. If this parameter is not specified, no additional environment variables are set by default.
        :param pulumi.Input[str] group_id: group Id.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupHealthCheckSettingsArgs']] health_check_settings: The configuration information for health checks. If this parameter is not specified, the health check is not set by default.
        :param pulumi.Input[bool] incremental_deployment: Whether to perform incremental deployment. The default value is false, which means full update.
        :param pulumi.Input[int] instance_num: instance number.
        :param pulumi.Input[str] istio_cpu_limit: The maximum amount of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_cpu_request: The number of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;request&amp;#39; field in Kubernetes.
        :param pulumi.Input[str] istio_mem_limit: The maximum amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] istio_mem_request: The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        :param pulumi.Input[str] jvm_opts: jvm options.
        :param pulumi.Input[str] max_surge: MaxSurge parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] max_unavailable: MaxUnavailable parameter in Kubernetes rolling update strategy.
        :param pulumi.Input[str] mem_limit: The maximum memory size in MiB for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        :param pulumi.Input[str] mem_request: The amount of memory in MiB allocated to the business container, corresponding to the request in K8S. The default value is 640 MiB.
        :param pulumi.Input[str] repo_name: (Priority use) New image name, such as /tsf/nginx.
        :param pulumi.Input[str] repo_type: repo type, tcr or leave it blank.
        :param pulumi.Input[str] reponame: old image name, eg: /tsf/server.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupSchedulingStrategyArgs']] scheduling_strategy: Node scheduling strategy. If this parameter is not specified, the node scheduling strategy will not be used by default.
        :param pulumi.Input[str] server: image server.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupServiceSettingArgs']] service_setting: Network settings for container deployment groups.
        :param pulumi.Input[str] tag_name: image version name, v1.
        :param pulumi.Input[int] update_ivl: update Interval, is required when rolling update.
        :param pulumi.Input[int] update_type: Update method: 0 for fast update, 1 for rolling update.
        :param pulumi.Input[bool] volume_clean: Whether to clear the volume information. Default is false.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeInfoListArgs']]]] volume_info_lists: Volume information, as a list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DeployContainerGroupVolumeMountInfoListArgs']]]] volume_mount_info_lists: Volume mount point information, list type.
        :param pulumi.Input[pulumi.InputType['DeployContainerGroupWarmupSettingArgs']] warmup_setting: warmup setting.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployContainerGroupState.__new__(_DeployContainerGroupState)

        __props__.__dict__["agent_cpu_limit"] = agent_cpu_limit
        __props__.__dict__["agent_cpu_request"] = agent_cpu_request
        __props__.__dict__["agent_mem_limit"] = agent_mem_limit
        __props__.__dict__["agent_mem_request"] = agent_mem_request
        __props__.__dict__["agent_profile_lists"] = agent_profile_lists
        __props__.__dict__["cpu_limit"] = cpu_limit
        __props__.__dict__["cpu_request"] = cpu_request
        __props__.__dict__["deploy_agent"] = deploy_agent
        __props__.__dict__["do_not_start"] = do_not_start
        __props__.__dict__["envs"] = envs
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["health_check_settings"] = health_check_settings
        __props__.__dict__["incremental_deployment"] = incremental_deployment
        __props__.__dict__["instance_num"] = instance_num
        __props__.__dict__["istio_cpu_limit"] = istio_cpu_limit
        __props__.__dict__["istio_cpu_request"] = istio_cpu_request
        __props__.__dict__["istio_mem_limit"] = istio_mem_limit
        __props__.__dict__["istio_mem_request"] = istio_mem_request
        __props__.__dict__["jvm_opts"] = jvm_opts
        __props__.__dict__["max_surge"] = max_surge
        __props__.__dict__["max_unavailable"] = max_unavailable
        __props__.__dict__["mem_limit"] = mem_limit
        __props__.__dict__["mem_request"] = mem_request
        __props__.__dict__["repo_name"] = repo_name
        __props__.__dict__["repo_type"] = repo_type
        __props__.__dict__["reponame"] = reponame
        __props__.__dict__["scheduling_strategy"] = scheduling_strategy
        __props__.__dict__["server"] = server
        __props__.__dict__["service_setting"] = service_setting
        __props__.__dict__["tag_name"] = tag_name
        __props__.__dict__["update_ivl"] = update_ivl
        __props__.__dict__["update_type"] = update_type
        __props__.__dict__["volume_clean"] = volume_clean
        __props__.__dict__["volume_info_lists"] = volume_info_lists
        __props__.__dict__["volume_mount_info_lists"] = volume_mount_info_lists
        __props__.__dict__["warmup_setting"] = warmup_setting
        return DeployContainerGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="agentCpuLimit")
    def agent_cpu_limit(self) -> pulumi.Output[str]:
        """
        The maximum number of CPU cores allocated to the agent container corresponds to the limit field in Kubernetes.
        """
        return pulumi.get(self, "agent_cpu_limit")

    @property
    @pulumi.getter(name="agentCpuRequest")
    def agent_cpu_request(self) -> pulumi.Output[str]:
        """
        The number of CPU cores allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "agent_cpu_request")

    @property
    @pulumi.getter(name="agentMemLimit")
    def agent_mem_limit(self) -> pulumi.Output[str]:
        """
        The maximum amount of memory in MiB allocated to the agent container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "agent_mem_limit")

    @property
    @pulumi.getter(name="agentMemRequest")
    def agent_mem_request(self) -> pulumi.Output[str]:
        """
        The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "agent_mem_request")

    @property
    @pulumi.getter(name="agentProfileLists")
    def agent_profile_lists(self) -> pulumi.Output[Sequence['outputs.DeployContainerGroupAgentProfileList']]:
        """
        javaagent info: SERVICE_AGENT/OT_AGENT.
        """
        return pulumi.get(self, "agent_profile_lists")

    @property
    @pulumi.getter(name="cpuLimit")
    def cpu_limit(self) -> pulumi.Output[str]:
        """
        The maximum number of CPU cores for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        """
        return pulumi.get(self, "cpu_limit")

    @property
    @pulumi.getter(name="cpuRequest")
    def cpu_request(self) -> pulumi.Output[str]:
        """
        The number of CPU cores allocated to the business container, corresponding to the request in K8S. The default value is 0.25.
        """
        return pulumi.get(self, "cpu_request")

    @property
    @pulumi.getter(name="deployAgent")
    def deploy_agent(self) -> pulumi.Output[bool]:
        """
        Whether to deploy the agent container. If this parameter is not specified, the agent container will not be deployed by default.
        """
        return pulumi.get(self, "deploy_agent")

    @property
    @pulumi.getter(name="doNotStart")
    def do_not_start(self) -> pulumi.Output[bool]:
        """
        Not start right away.
        """
        return pulumi.get(self, "do_not_start")

    @property
    @pulumi.getter
    def envs(self) -> pulumi.Output[Sequence['outputs.DeployContainerGroupEnv']]:
        """
        The environment variables that the application runs in the deployment group. If this parameter is not specified, no additional environment variables are set by default.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        group Id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="healthCheckSettings")
    def health_check_settings(self) -> pulumi.Output[Optional['outputs.DeployContainerGroupHealthCheckSettings']]:
        """
        The configuration information for health checks. If this parameter is not specified, the health check is not set by default.
        """
        return pulumi.get(self, "health_check_settings")

    @property
    @pulumi.getter(name="incrementalDeployment")
    def incremental_deployment(self) -> pulumi.Output[bool]:
        """
        Whether to perform incremental deployment. The default value is false, which means full update.
        """
        return pulumi.get(self, "incremental_deployment")

    @property
    @pulumi.getter(name="instanceNum")
    def instance_num(self) -> pulumi.Output[int]:
        """
        instance number.
        """
        return pulumi.get(self, "instance_num")

    @property
    @pulumi.getter(name="istioCpuLimit")
    def istio_cpu_limit(self) -> pulumi.Output[str]:
        """
        The maximum amount of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;limit&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "istio_cpu_limit")

    @property
    @pulumi.getter(name="istioCpuRequest")
    def istio_cpu_request(self) -> pulumi.Output[str]:
        """
        The number of CPU cores allocated to the istio proxy container corresponds to the &amp;#39;request&amp;#39; field in Kubernetes.
        """
        return pulumi.get(self, "istio_cpu_request")

    @property
    @pulumi.getter(name="istioMemLimit")
    def istio_mem_limit(self) -> pulumi.Output[str]:
        """
        The maximum amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "istio_mem_limit")

    @property
    @pulumi.getter(name="istioMemRequest")
    def istio_mem_request(self) -> pulumi.Output[str]:
        """
        The amount of memory in MiB allocated to the agent container corresponds to the request field in Kubernetes.
        """
        return pulumi.get(self, "istio_mem_request")

    @property
    @pulumi.getter(name="jvmOpts")
    def jvm_opts(self) -> pulumi.Output[str]:
        """
        jvm options.
        """
        return pulumi.get(self, "jvm_opts")

    @property
    @pulumi.getter(name="maxSurge")
    def max_surge(self) -> pulumi.Output[str]:
        """
        MaxSurge parameter in Kubernetes rolling update strategy.
        """
        return pulumi.get(self, "max_surge")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> pulumi.Output[str]:
        """
        MaxUnavailable parameter in Kubernetes rolling update strategy.
        """
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="memLimit")
    def mem_limit(self) -> pulumi.Output[str]:
        """
        The maximum memory size in MiB for the business container, corresponding to the limit in K8S. If not specified, it defaults to twice the request.
        """
        return pulumi.get(self, "mem_limit")

    @property
    @pulumi.getter(name="memRequest")
    def mem_request(self) -> pulumi.Output[str]:
        """
        The amount of memory in MiB allocated to the business container, corresponding to the request in K8S. The default value is 640 MiB.
        """
        return pulumi.get(self, "mem_request")

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> pulumi.Output[str]:
        """
        (Priority use) New image name, such as /tsf/nginx.
        """
        return pulumi.get(self, "repo_name")

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> pulumi.Output[str]:
        """
        repo type, tcr or leave it blank.
        """
        return pulumi.get(self, "repo_type")

    @property
    @pulumi.getter
    def reponame(self) -> pulumi.Output[str]:
        """
        old image name, eg: /tsf/server.
        """
        return pulumi.get(self, "reponame")

    @property
    @pulumi.getter(name="schedulingStrategy")
    def scheduling_strategy(self) -> pulumi.Output['outputs.DeployContainerGroupSchedulingStrategy']:
        """
        Node scheduling strategy. If this parameter is not specified, the node scheduling strategy will not be used by default.
        """
        return pulumi.get(self, "scheduling_strategy")

    @property
    @pulumi.getter
    def server(self) -> pulumi.Output[str]:
        """
        image server.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="serviceSetting")
    def service_setting(self) -> pulumi.Output['outputs.DeployContainerGroupServiceSetting']:
        """
        Network settings for container deployment groups.
        """
        return pulumi.get(self, "service_setting")

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> pulumi.Output[str]:
        """
        image version name, v1.
        """
        return pulumi.get(self, "tag_name")

    @property
    @pulumi.getter(name="updateIvl")
    def update_ivl(self) -> pulumi.Output[int]:
        """
        update Interval, is required when rolling update.
        """
        return pulumi.get(self, "update_ivl")

    @property
    @pulumi.getter(name="updateType")
    def update_type(self) -> pulumi.Output[int]:
        """
        Update method: 0 for fast update, 1 for rolling update.
        """
        return pulumi.get(self, "update_type")

    @property
    @pulumi.getter(name="volumeClean")
    def volume_clean(self) -> pulumi.Output[bool]:
        """
        Whether to clear the volume information. Default is false.
        """
        return pulumi.get(self, "volume_clean")

    @property
    @pulumi.getter(name="volumeInfoLists")
    def volume_info_lists(self) -> pulumi.Output[Sequence['outputs.DeployContainerGroupVolumeInfoList']]:
        """
        Volume information, as a list.
        """
        return pulumi.get(self, "volume_info_lists")

    @property
    @pulumi.getter(name="volumeMountInfoLists")
    def volume_mount_info_lists(self) -> pulumi.Output[Sequence['outputs.DeployContainerGroupVolumeMountInfoList']]:
        """
        Volume mount point information, list type.
        """
        return pulumi.get(self, "volume_mount_info_lists")

    @property
    @pulumi.getter(name="warmupSetting")
    def warmup_setting(self) -> pulumi.Output['outputs.DeployContainerGroupWarmupSetting']:
        """
        warmup setting.
        """
        return pulumi.get(self, "warmup_setting")

