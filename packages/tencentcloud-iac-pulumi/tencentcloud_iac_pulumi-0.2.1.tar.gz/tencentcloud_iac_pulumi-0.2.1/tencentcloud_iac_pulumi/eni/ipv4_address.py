# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Ipv4AddressArgs', 'Ipv4Address']

@pulumi.input_type
class Ipv4AddressArgs:
    def __init__(__self__, *,
                 network_interface_id: pulumi.Input[str],
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 secondary_private_ip_address_count: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Ipv4Address resource.
        :param pulumi.Input[str] network_interface_id: The ID of the ENI instance, such as `eni-m6dyj72l`.
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]] private_ip_addresses: The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either this parameter or SecondaryPrivateIpAddressCount, or both.
        :param pulumi.Input[str] qos_level: IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG `(Bronze) and DEFAULT (Default).
        :param pulumi.Input[int] secondary_private_ip_address_count: The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or both. The total number of private IP addresses cannot exceed the quota.
        """
        pulumi.set(__self__, "network_interface_id", network_interface_id)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        if qos_level is not None:
            pulumi.set(__self__, "qos_level", qos_level)
        if secondary_private_ip_address_count is not None:
            pulumi.set(__self__, "secondary_private_ip_address_count", secondary_private_ip_address_count)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> pulumi.Input[str]:
        """
        The ID of the ENI instance, such as `eni-m6dyj72l`.
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_interface_id", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]]]:
        """
        The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either this parameter or SecondaryPrivateIpAddressCount, or both.
        """
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]]]):
        pulumi.set(self, "private_ip_addresses", value)

    @property
    @pulumi.getter(name="qosLevel")
    def qos_level(self) -> Optional[pulumi.Input[str]]:
        """
        IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG `(Bronze) and DEFAULT (Default).
        """
        return pulumi.get(self, "qos_level")

    @qos_level.setter
    def qos_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_level", value)

    @property
    @pulumi.getter(name="secondaryPrivateIpAddressCount")
    def secondary_private_ip_address_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or both. The total number of private IP addresses cannot exceed the quota.
        """
        return pulumi.get(self, "secondary_private_ip_address_count")

    @secondary_private_ip_address_count.setter
    def secondary_private_ip_address_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secondary_private_ip_address_count", value)


@pulumi.input_type
class _Ipv4AddressState:
    def __init__(__self__, *,
                 network_interface_id: Optional[pulumi.Input[str]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 secondary_private_ip_address_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Ipv4Address resources.
        :param pulumi.Input[str] network_interface_id: The ID of the ENI instance, such as `eni-m6dyj72l`.
        :param pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]] private_ip_addresses: The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either this parameter or SecondaryPrivateIpAddressCount, or both.
        :param pulumi.Input[str] qos_level: IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG `(Bronze) and DEFAULT (Default).
        :param pulumi.Input[int] secondary_private_ip_address_count: The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or both. The total number of private IP addresses cannot exceed the quota.
        """
        if network_interface_id is not None:
            pulumi.set(__self__, "network_interface_id", network_interface_id)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        if qos_level is not None:
            pulumi.set(__self__, "qos_level", qos_level)
        if secondary_private_ip_address_count is not None:
            pulumi.set(__self__, "secondary_private_ip_address_count", secondary_private_ip_address_count)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the ENI instance, such as `eni-m6dyj72l`.
        """
        return pulumi.get(self, "network_interface_id")

    @network_interface_id.setter
    def network_interface_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_interface_id", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]]]:
        """
        The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either this parameter or SecondaryPrivateIpAddressCount, or both.
        """
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Ipv4AddressPrivateIpAddressArgs']]]]):
        pulumi.set(self, "private_ip_addresses", value)

    @property
    @pulumi.getter(name="qosLevel")
    def qos_level(self) -> Optional[pulumi.Input[str]]:
        """
        IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG `(Bronze) and DEFAULT (Default).
        """
        return pulumi.get(self, "qos_level")

    @qos_level.setter
    def qos_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qos_level", value)

    @property
    @pulumi.getter(name="secondaryPrivateIpAddressCount")
    def secondary_private_ip_address_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or both. The total number of private IP addresses cannot exceed the quota.
        """
        return pulumi.get(self, "secondary_private_ip_address_count")

    @secondary_private_ip_address_count.setter
    def secondary_private_ip_address_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secondary_private_ip_address_count", value)


class Ipv4Address(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_interface_id: Optional[pulumi.Input[str]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4AddressPrivateIpAddressArgs']]]]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 secondary_private_ip_address_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a vpc eni_ipv4_address

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        eni = tencentcloud.Enis.get_instance(name="Primary ENI")
        eni_ipv4_address = tencentcloud.eni.Ipv4Address("eniIpv4Address",
            network_interface_id=eni.enis[0].id,
            secondary_private_ip_address_count=3)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc eni_ipv4_address can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Eni/ipv4Address:Ipv4Address eni_ipv4_address eni_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] network_interface_id: The ID of the ENI instance, such as `eni-m6dyj72l`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4AddressPrivateIpAddressArgs']]]] private_ip_addresses: The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either this parameter or SecondaryPrivateIpAddressCount, or both.
        :param pulumi.Input[str] qos_level: IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG `(Bronze) and DEFAULT (Default).
        :param pulumi.Input[int] secondary_private_ip_address_count: The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or both. The total number of private IP addresses cannot exceed the quota.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Ipv4AddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a vpc eni_ipv4_address

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        eni = tencentcloud.Enis.get_instance(name="Primary ENI")
        eni_ipv4_address = tencentcloud.eni.Ipv4Address("eniIpv4Address",
            network_interface_id=eni.enis[0].id,
            secondary_private_ip_address_count=3)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        vpc eni_ipv4_address can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Eni/ipv4Address:Ipv4Address eni_ipv4_address eni_id
        ```

        :param str resource_name: The name of the resource.
        :param Ipv4AddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Ipv4AddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 network_interface_id: Optional[pulumi.Input[str]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4AddressPrivateIpAddressArgs']]]]] = None,
                 qos_level: Optional[pulumi.Input[str]] = None,
                 secondary_private_ip_address_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Ipv4AddressArgs.__new__(Ipv4AddressArgs)

            if network_interface_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_interface_id'")
            __props__.__dict__["network_interface_id"] = network_interface_id
            __props__.__dict__["private_ip_addresses"] = private_ip_addresses
            __props__.__dict__["qos_level"] = qos_level
            __props__.__dict__["secondary_private_ip_address_count"] = secondary_private_ip_address_count
        super(Ipv4Address, __self__).__init__(
            'tencentcloud:Eni/ipv4Address:Ipv4Address',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            network_interface_id: Optional[pulumi.Input[str]] = None,
            private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4AddressPrivateIpAddressArgs']]]]] = None,
            qos_level: Optional[pulumi.Input[str]] = None,
            secondary_private_ip_address_count: Optional[pulumi.Input[int]] = None) -> 'Ipv4Address':
        """
        Get an existing Ipv4Address resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] network_interface_id: The ID of the ENI instance, such as `eni-m6dyj72l`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Ipv4AddressPrivateIpAddressArgs']]]] private_ip_addresses: The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either this parameter or SecondaryPrivateIpAddressCount, or both.
        :param pulumi.Input[str] qos_level: IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG `(Bronze) and DEFAULT (Default).
        :param pulumi.Input[int] secondary_private_ip_address_count: The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or both. The total number of private IP addresses cannot exceed the quota.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Ipv4AddressState.__new__(_Ipv4AddressState)

        __props__.__dict__["network_interface_id"] = network_interface_id
        __props__.__dict__["private_ip_addresses"] = private_ip_addresses
        __props__.__dict__["qos_level"] = qos_level
        __props__.__dict__["secondary_private_ip_address_count"] = secondary_private_ip_address_count
        return Ipv4Address(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="networkInterfaceId")
    def network_interface_id(self) -> pulumi.Output[str]:
        """
        The ID of the ENI instance, such as `eni-m6dyj72l`.
        """
        return pulumi.get(self, "network_interface_id")

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> pulumi.Output[Sequence['outputs.Ipv4AddressPrivateIpAddress']]:
        """
        The information on private IP addresses, of which you can specify a maximum of 10 at a time. You should provide either this parameter or SecondaryPrivateIpAddressCount, or both.
        """
        return pulumi.get(self, "private_ip_addresses")

    @property
    @pulumi.getter(name="qosLevel")
    def qos_level(self) -> pulumi.Output[str]:
        """
        IP service level. It is used together with `SecondaryPrivateIpAddressCount`. Values: PT`(Gold), `AU`(Silver), `AG `(Bronze) and DEFAULT (Default).
        """
        return pulumi.get(self, "qos_level")

    @property
    @pulumi.getter(name="secondaryPrivateIpAddressCount")
    def secondary_private_ip_address_count(self) -> pulumi.Output[int]:
        """
        The number of newly-applied private IP addresses. You should provide either this parameter or PrivateIpAddresses, or both. The total number of private IP addresses cannot exceed the quota.
        """
        return pulumi.get(self, "secondary_private_ip_address_count")

