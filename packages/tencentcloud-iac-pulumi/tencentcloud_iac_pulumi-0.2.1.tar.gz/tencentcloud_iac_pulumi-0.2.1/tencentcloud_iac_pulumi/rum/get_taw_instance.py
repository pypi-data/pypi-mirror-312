# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTawInstanceResult',
    'AwaitableGetTawInstanceResult',
    'get_taw_instance',
    'get_taw_instance_output',
]

@pulumi.output_type
class GetTawInstanceResult:
    """
    A collection of values returned by getTawInstance.
    """
    def __init__(__self__, area_ids=None, charge_statuses=None, charge_types=None, id=None, instance_ids=None, instance_sets=None, instance_statuses=None, result_output_file=None):
        if area_ids and not isinstance(area_ids, list):
            raise TypeError("Expected argument 'area_ids' to be a list")
        pulumi.set(__self__, "area_ids", area_ids)
        if charge_statuses and not isinstance(charge_statuses, list):
            raise TypeError("Expected argument 'charge_statuses' to be a list")
        pulumi.set(__self__, "charge_statuses", charge_statuses)
        if charge_types and not isinstance(charge_types, list):
            raise TypeError("Expected argument 'charge_types' to be a list")
        pulumi.set(__self__, "charge_types", charge_types)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if instance_sets and not isinstance(instance_sets, list):
            raise TypeError("Expected argument 'instance_sets' to be a list")
        pulumi.set(__self__, "instance_sets", instance_sets)
        if instance_statuses and not isinstance(instance_statuses, list):
            raise TypeError("Expected argument 'instance_statuses' to be a list")
        pulumi.set(__self__, "instance_statuses", instance_statuses)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="areaIds")
    def area_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "area_ids")

    @property
    @pulumi.getter(name="chargeStatuses")
    def charge_statuses(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "charge_statuses")

    @property
    @pulumi.getter(name="chargeTypes")
    def charge_types(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "charge_types")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="instanceSets")
    def instance_sets(self) -> Sequence['outputs.GetTawInstanceInstanceSetResult']:
        """
        Instance list.
        """
        return pulumi.get(self, "instance_sets")

    @property
    @pulumi.getter(name="instanceStatuses")
    def instance_statuses(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "instance_statuses")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetTawInstanceResult(GetTawInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTawInstanceResult(
            area_ids=self.area_ids,
            charge_statuses=self.charge_statuses,
            charge_types=self.charge_types,
            id=self.id,
            instance_ids=self.instance_ids,
            instance_sets=self.instance_sets,
            instance_statuses=self.instance_statuses,
            result_output_file=self.result_output_file)


def get_taw_instance(area_ids: Optional[Sequence[int]] = None,
                     charge_statuses: Optional[Sequence[int]] = None,
                     charge_types: Optional[Sequence[int]] = None,
                     instance_ids: Optional[Sequence[str]] = None,
                     instance_statuses: Optional[Sequence[int]] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTawInstanceResult:
    """
    Use this data source to query detailed information of rum tawInstance

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    taw_instance = tencentcloud.Rum.get_taw_instance(area_ids=[1],
        charge_statuses=[1],
        charge_types=[1],
        instance_ids=["rum-pasZKEI3RLgakj"],
        instance_statuses=[2])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] area_ids: Region ID.
    :param Sequence[int] charge_statuses: Billing status.
    :param Sequence[int] charge_types: Billing type.
    :param Sequence[str] instance_ids: Instance ID.
    :param Sequence[int] instance_statuses: Instance status (`1`: creating; `2`: running; `3`: exceptional; `4`: restarting; `5`: stopping; `6`: stopped; `7`: terminating; `8`: terminated).
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['areaIds'] = area_ids
    __args__['chargeStatuses'] = charge_statuses
    __args__['chargeTypes'] = charge_types
    __args__['instanceIds'] = instance_ids
    __args__['instanceStatuses'] = instance_statuses
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Rum/getTawInstance:getTawInstance', __args__, opts=opts, typ=GetTawInstanceResult).value

    return AwaitableGetTawInstanceResult(
        area_ids=pulumi.get(__ret__, 'area_ids'),
        charge_statuses=pulumi.get(__ret__, 'charge_statuses'),
        charge_types=pulumi.get(__ret__, 'charge_types'),
        id=pulumi.get(__ret__, 'id'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        instance_sets=pulumi.get(__ret__, 'instance_sets'),
        instance_statuses=pulumi.get(__ret__, 'instance_statuses'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_taw_instance)
def get_taw_instance_output(area_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            charge_statuses: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            charge_types: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            instance_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            instance_statuses: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTawInstanceResult]:
    """
    Use this data source to query detailed information of rum tawInstance

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    taw_instance = tencentcloud.Rum.get_taw_instance(area_ids=[1],
        charge_statuses=[1],
        charge_types=[1],
        instance_ids=["rum-pasZKEI3RLgakj"],
        instance_statuses=[2])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] area_ids: Region ID.
    :param Sequence[int] charge_statuses: Billing status.
    :param Sequence[int] charge_types: Billing type.
    :param Sequence[str] instance_ids: Instance ID.
    :param Sequence[int] instance_statuses: Instance status (`1`: creating; `2`: running; `3`: exceptional; `4`: restarting; `5`: stopping; `6`: stopped; `7`: terminating; `8`: terminated).
    :param str result_output_file: Used to save results.
    """
    ...
