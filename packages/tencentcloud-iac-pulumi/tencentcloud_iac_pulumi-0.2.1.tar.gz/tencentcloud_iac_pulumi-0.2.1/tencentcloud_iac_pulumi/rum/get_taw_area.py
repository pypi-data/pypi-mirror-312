# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTawAreaResult',
    'AwaitableGetTawAreaResult',
    'get_taw_area',
    'get_taw_area_output',
]

@pulumi.output_type
class GetTawAreaResult:
    """
    A collection of values returned by getTawArea.
    """
    def __init__(__self__, area_ids=None, area_keys=None, area_sets=None, area_statuses=None, id=None, result_output_file=None):
        if area_ids and not isinstance(area_ids, list):
            raise TypeError("Expected argument 'area_ids' to be a list")
        pulumi.set(__self__, "area_ids", area_ids)
        if area_keys and not isinstance(area_keys, list):
            raise TypeError("Expected argument 'area_keys' to be a list")
        pulumi.set(__self__, "area_keys", area_keys)
        if area_sets and not isinstance(area_sets, list):
            raise TypeError("Expected argument 'area_sets' to be a list")
        pulumi.set(__self__, "area_sets", area_sets)
        if area_statuses and not isinstance(area_statuses, list):
            raise TypeError("Expected argument 'area_statuses' to be a list")
        pulumi.set(__self__, "area_statuses", area_statuses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="areaIds")
    def area_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "area_ids")

    @property
    @pulumi.getter(name="areaKeys")
    def area_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "area_keys")

    @property
    @pulumi.getter(name="areaSets")
    def area_sets(self) -> Sequence['outputs.GetTawAreaAreaSetResult']:
        return pulumi.get(self, "area_sets")

    @property
    @pulumi.getter(name="areaStatuses")
    def area_statuses(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "area_statuses")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetTawAreaResult(GetTawAreaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTawAreaResult(
            area_ids=self.area_ids,
            area_keys=self.area_keys,
            area_sets=self.area_sets,
            area_statuses=self.area_statuses,
            id=self.id,
            result_output_file=self.result_output_file)


def get_taw_area(area_ids: Optional[Sequence[int]] = None,
                 area_keys: Optional[Sequence[str]] = None,
                 area_statuses: Optional[Sequence[int]] = None,
                 result_output_file: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTawAreaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['areaIds'] = area_ids
    __args__['areaKeys'] = area_keys
    __args__['areaStatuses'] = area_statuses
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Rum/getTawArea:getTawArea', __args__, opts=opts, typ=GetTawAreaResult).value

    return AwaitableGetTawAreaResult(
        area_ids=pulumi.get(__ret__, 'area_ids'),
        area_keys=pulumi.get(__ret__, 'area_keys'),
        area_sets=pulumi.get(__ret__, 'area_sets'),
        area_statuses=pulumi.get(__ret__, 'area_statuses'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_taw_area)
def get_taw_area_output(area_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                        area_keys: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                        area_statuses: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTawAreaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
