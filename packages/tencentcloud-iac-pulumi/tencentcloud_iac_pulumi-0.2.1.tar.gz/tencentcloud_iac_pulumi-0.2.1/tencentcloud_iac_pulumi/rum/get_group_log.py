# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetGroupLogResult',
    'AwaitableGetGroupLogResult',
    'get_group_log',
    'get_group_log_output',
]

@pulumi.output_type
class GetGroupLogResult:
    """
    A collection of values returned by getGroupLog.
    """
    def __init__(__self__, end_time=None, group_field=None, id=None, order_by=None, project_id=None, query=None, result=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if group_field and not isinstance(group_field, str):
            raise TypeError("Expected argument 'group_field' to be a str")
        pulumi.set(__self__, "group_field", group_field)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if query and not isinstance(query, str):
            raise TypeError("Expected argument 'query' to be a str")
        pulumi.set(__self__, "query", query)
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="groupField")
    def group_field(self) -> str:
        return pulumi.get(self, "group_field")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> str:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def query(self) -> str:
        return pulumi.get(self, "query")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Return value.
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetGroupLogResult(GetGroupLogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupLogResult(
            end_time=self.end_time,
            group_field=self.group_field,
            id=self.id,
            order_by=self.order_by,
            project_id=self.project_id,
            query=self.query,
            result=self.result,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_group_log(end_time: Optional[str] = None,
                  group_field: Optional[str] = None,
                  order_by: Optional[str] = None,
                  project_id: Optional[int] = None,
                  query: Optional[str] = None,
                  result_output_file: Optional[str] = None,
                  start_time: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupLogResult:
    """
    Use this data source to query detailed information of rum group_log

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    group_log = tencentcloud.Rum.get_group_log(end_time="1625454840000",
        group_field="level",
        order_by="desc",
        project_id=1,
        query="id:123 AND type:\\"log\\"",
        start_time="1625444040000")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time but is represented using a timestamp in milliseconds.
    :param str group_field: The field used for group.
    :param str order_by: Sorting method. `desc`:Descending order; `asc`: Ascending order.
    :param int project_id: Project ID.
    :param str query: Log Query syntax statement.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time but is represented using a timestamp in milliseconds.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['groupField'] = group_field
    __args__['orderBy'] = order_by
    __args__['projectId'] = project_id
    __args__['query'] = query
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Rum/getGroupLog:getGroupLog', __args__, opts=opts, typ=GetGroupLogResult).value

    return AwaitableGetGroupLogResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        group_field=pulumi.get(__ret__, 'group_field'),
        id=pulumi.get(__ret__, 'id'),
        order_by=pulumi.get(__ret__, 'order_by'),
        project_id=pulumi.get(__ret__, 'project_id'),
        query=pulumi.get(__ret__, 'query'),
        result=pulumi.get(__ret__, 'result'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_group_log)
def get_group_log_output(end_time: Optional[pulumi.Input[str]] = None,
                         group_field: Optional[pulumi.Input[str]] = None,
                         order_by: Optional[pulumi.Input[str]] = None,
                         project_id: Optional[pulumi.Input[int]] = None,
                         query: Optional[pulumi.Input[str]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         start_time: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupLogResult]:
    """
    Use this data source to query detailed information of rum group_log

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    group_log = tencentcloud.Rum.get_group_log(end_time="1625454840000",
        group_field="level",
        order_by="desc",
        project_id=1,
        query="id:123 AND type:\\"log\\"",
        start_time="1625444040000")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time but is represented using a timestamp in milliseconds.
    :param str group_field: The field used for group.
    :param str order_by: Sorting method. `desc`:Descending order; `asc`: Ascending order.
    :param int project_id: Project ID.
    :param str query: Log Query syntax statement.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time but is represented using a timestamp in milliseconds.
    """
    ...
