# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ReleaseFileArgs', 'ReleaseFile']

@pulumi.input_type
class ReleaseFileArgs:
    def __init__(__self__, *,
                 file_hash: pulumi.Input[str],
                 file_key: pulumi.Input[str],
                 file_name: pulumi.Input[str],
                 project_id: pulumi.Input[int],
                 release_file_id: pulumi.Input[int],
                 version: pulumi.Input[str]):
        """
        The set of arguments for constructing a ReleaseFile resource.
        :param pulumi.Input[str] file_hash: Release file hash.
        :param pulumi.Input[str] file_key: Release file unique key.
        :param pulumi.Input[str] file_name: Release file name.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[int] release_file_id: Release file id.
        :param pulumi.Input[str] version: Release File version.
        """
        pulumi.set(__self__, "file_hash", file_hash)
        pulumi.set(__self__, "file_key", file_key)
        pulumi.set(__self__, "file_name", file_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "release_file_id", release_file_id)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> pulumi.Input[str]:
        """
        Release file hash.
        """
        return pulumi.get(self, "file_hash")

    @file_hash.setter
    def file_hash(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_hash", value)

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> pulumi.Input[str]:
        """
        Release file unique key.
        """
        return pulumi.get(self, "file_key")

    @file_key.setter
    def file_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_key", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Input[str]:
        """
        Release file name.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="releaseFileId")
    def release_file_id(self) -> pulumi.Input[int]:
        """
        Release file id.
        """
        return pulumi.get(self, "release_file_id")

    @release_file_id.setter
    def release_file_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "release_file_id", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Release File version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _ReleaseFileState:
    def __init__(__self__, *,
                 file_hash: Optional[pulumi.Input[str]] = None,
                 file_key: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 release_file_id: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReleaseFile resources.
        :param pulumi.Input[str] file_hash: Release file hash.
        :param pulumi.Input[str] file_key: Release file unique key.
        :param pulumi.Input[str] file_name: Release file name.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[int] release_file_id: Release file id.
        :param pulumi.Input[str] version: Release File version.
        """
        if file_hash is not None:
            pulumi.set(__self__, "file_hash", file_hash)
        if file_key is not None:
            pulumi.set(__self__, "file_key", file_key)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if release_file_id is not None:
            pulumi.set(__self__, "release_file_id", release_file_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Release file hash.
        """
        return pulumi.get(self, "file_hash")

    @file_hash.setter
    def file_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_hash", value)

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> Optional[pulumi.Input[str]]:
        """
        Release file unique key.
        """
        return pulumi.get(self, "file_key")

    @file_key.setter
    def file_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_key", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        Release file name.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="releaseFileId")
    def release_file_id(self) -> Optional[pulumi.Input[int]]:
        """
        Release file id.
        """
        return pulumi.get(self, "release_file_id")

    @release_file_id.setter
    def release_file_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release_file_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Release File version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class ReleaseFile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_hash: Optional[pulumi.Input[str]] = None,
                 file_key: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 release_file_id: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ReleaseFile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_hash: Release file hash.
        :param pulumi.Input[str] file_key: Release file unique key.
        :param pulumi.Input[str] file_name: Release file name.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[int] release_file_id: Release file id.
        :param pulumi.Input[str] version: Release File version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReleaseFileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ReleaseFile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ReleaseFileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReleaseFileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_hash: Optional[pulumi.Input[str]] = None,
                 file_key: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 release_file_id: Optional[pulumi.Input[int]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReleaseFileArgs.__new__(ReleaseFileArgs)

            if file_hash is None and not opts.urn:
                raise TypeError("Missing required property 'file_hash'")
            __props__.__dict__["file_hash"] = file_hash
            if file_key is None and not opts.urn:
                raise TypeError("Missing required property 'file_key'")
            __props__.__dict__["file_key"] = file_key
            if file_name is None and not opts.urn:
                raise TypeError("Missing required property 'file_name'")
            __props__.__dict__["file_name"] = file_name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if release_file_id is None and not opts.urn:
                raise TypeError("Missing required property 'release_file_id'")
            __props__.__dict__["release_file_id"] = release_file_id
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
        super(ReleaseFile, __self__).__init__(
            'tencentcloud:Rum/releaseFile:ReleaseFile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            file_hash: Optional[pulumi.Input[str]] = None,
            file_key: Optional[pulumi.Input[str]] = None,
            file_name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            release_file_id: Optional[pulumi.Input[int]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'ReleaseFile':
        """
        Get an existing ReleaseFile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_hash: Release file hash.
        :param pulumi.Input[str] file_key: Release file unique key.
        :param pulumi.Input[str] file_name: Release file name.
        :param pulumi.Input[int] project_id: Project ID.
        :param pulumi.Input[int] release_file_id: Release file id.
        :param pulumi.Input[str] version: Release File version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReleaseFileState.__new__(_ReleaseFileState)

        __props__.__dict__["file_hash"] = file_hash
        __props__.__dict__["file_key"] = file_key
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["release_file_id"] = release_file_id
        __props__.__dict__["version"] = version
        return ReleaseFile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fileHash")
    def file_hash(self) -> pulumi.Output[str]:
        """
        Release file hash.
        """
        return pulumi.get(self, "file_hash")

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> pulumi.Output[str]:
        """
        Release file unique key.
        """
        return pulumi.get(self, "file_key")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[str]:
        """
        Release file name.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="releaseFileId")
    def release_file_id(self) -> pulumi.Output[int]:
        """
        Release file id.
        """
        return pulumi.get(self, "release_file_id")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Release File version.
        """
        return pulumi.get(self, "version")

