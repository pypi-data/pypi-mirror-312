# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetLogUrlStatisticsResult',
    'AwaitableGetLogUrlStatisticsResult',
    'get_log_url_statistics',
    'get_log_url_statistics_output',
]

@pulumi.output_type
class GetLogUrlStatisticsResult:
    """
    A collection of values returned by getLogUrlStatistics.
    """
    def __init__(__self__, area=None, brand=None, browser=None, device=None, end_time=None, engine=None, env=None, ext_first=None, ext_second=None, ext_third=None, from_=None, id=None, is_abroad=None, isp=None, level=None, net_type=None, os=None, platform=None, project_id=None, result=None, result_output_file=None, start_time=None, type=None, version_num=None):
        if area and not isinstance(area, str):
            raise TypeError("Expected argument 'area' to be a str")
        pulumi.set(__self__, "area", area)
        if brand and not isinstance(brand, str):
            raise TypeError("Expected argument 'brand' to be a str")
        pulumi.set(__self__, "brand", brand)
        if browser and not isinstance(browser, str):
            raise TypeError("Expected argument 'browser' to be a str")
        pulumi.set(__self__, "browser", browser)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if env and not isinstance(env, str):
            raise TypeError("Expected argument 'env' to be a str")
        pulumi.set(__self__, "env", env)
        if ext_first and not isinstance(ext_first, str):
            raise TypeError("Expected argument 'ext_first' to be a str")
        pulumi.set(__self__, "ext_first", ext_first)
        if ext_second and not isinstance(ext_second, str):
            raise TypeError("Expected argument 'ext_second' to be a str")
        pulumi.set(__self__, "ext_second", ext_second)
        if ext_third and not isinstance(ext_third, str):
            raise TypeError("Expected argument 'ext_third' to be a str")
        pulumi.set(__self__, "ext_third", ext_third)
        if from_ and not isinstance(from_, str):
            raise TypeError("Expected argument 'from_' to be a str")
        pulumi.set(__self__, "from_", from_)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_abroad and not isinstance(is_abroad, str):
            raise TypeError("Expected argument 'is_abroad' to be a str")
        pulumi.set(__self__, "is_abroad", is_abroad)
        if isp and not isinstance(isp, str):
            raise TypeError("Expected argument 'isp' to be a str")
        pulumi.set(__self__, "isp", isp)
        if level and not isinstance(level, str):
            raise TypeError("Expected argument 'level' to be a str")
        pulumi.set(__self__, "level", level)
        if net_type and not isinstance(net_type, str):
            raise TypeError("Expected argument 'net_type' to be a str")
        pulumi.set(__self__, "net_type", net_type)
        if os and not isinstance(os, str):
            raise TypeError("Expected argument 'os' to be a str")
        pulumi.set(__self__, "os", os)
        if platform and not isinstance(platform, str):
            raise TypeError("Expected argument 'platform' to be a str")
        pulumi.set(__self__, "platform", platform)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if version_num and not isinstance(version_num, str):
            raise TypeError("Expected argument 'version_num' to be a str")
        pulumi.set(__self__, "version_num", version_num)

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def brand(self) -> Optional[str]:
        return pulumi.get(self, "brand")

    @property
    @pulumi.getter
    def browser(self) -> Optional[str]:
        return pulumi.get(self, "browser")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter
    def env(self) -> Optional[str]:
        return pulumi.get(self, "env")

    @property
    @pulumi.getter(name="extFirst")
    def ext_first(self) -> Optional[str]:
        return pulumi.get(self, "ext_first")

    @property
    @pulumi.getter(name="extSecond")
    def ext_second(self) -> Optional[str]:
        return pulumi.get(self, "ext_second")

    @property
    @pulumi.getter(name="extThird")
    def ext_third(self) -> Optional[str]:
        return pulumi.get(self, "ext_third")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isAbroad")
    def is_abroad(self) -> Optional[str]:
        return pulumi.get(self, "is_abroad")

    @property
    @pulumi.getter
    def isp(self) -> Optional[str]:
        return pulumi.get(self, "isp")

    @property
    @pulumi.getter
    def level(self) -> Optional[str]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> Optional[str]:
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def platform(self) -> Optional[str]:
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Return value.
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="versionNum")
    def version_num(self) -> Optional[str]:
        return pulumi.get(self, "version_num")


class AwaitableGetLogUrlStatisticsResult(GetLogUrlStatisticsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogUrlStatisticsResult(
            area=self.area,
            brand=self.brand,
            browser=self.browser,
            device=self.device,
            end_time=self.end_time,
            engine=self.engine,
            env=self.env,
            ext_first=self.ext_first,
            ext_second=self.ext_second,
            ext_third=self.ext_third,
            from_=self.from_,
            id=self.id,
            is_abroad=self.is_abroad,
            isp=self.isp,
            level=self.level,
            net_type=self.net_type,
            os=self.os,
            platform=self.platform,
            project_id=self.project_id,
            result=self.result,
            result_output_file=self.result_output_file,
            start_time=self.start_time,
            type=self.type,
            version_num=self.version_num)


def get_log_url_statistics(area: Optional[str] = None,
                           brand: Optional[str] = None,
                           browser: Optional[str] = None,
                           device: Optional[str] = None,
                           end_time: Optional[int] = None,
                           engine: Optional[str] = None,
                           env: Optional[str] = None,
                           ext_first: Optional[str] = None,
                           ext_second: Optional[str] = None,
                           ext_third: Optional[str] = None,
                           from_: Optional[str] = None,
                           is_abroad: Optional[str] = None,
                           isp: Optional[str] = None,
                           level: Optional[str] = None,
                           net_type: Optional[str] = None,
                           os: Optional[str] = None,
                           platform: Optional[str] = None,
                           project_id: Optional[int] = None,
                           result_output_file: Optional[str] = None,
                           start_time: Optional[int] = None,
                           type: Optional[str] = None,
                           version_num: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogUrlStatisticsResult:
    """
    Use this data source to query detailed information of rum log_url_statistics

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    log_url_statistics = tencentcloud.Rum.get_log_url_statistics(end_time=1625454840,
        project_id=1,
        start_time=1625444040,
        type="analysis")
    ```
    <!--End PulumiCodeChooser -->


    :param str area: The region where the data reporting takes place.
    :param str brand: The mobile phone brand used for data reporting.
    :param str browser: The browser type used for data reporting.
    :param str device: The device used for data reporting.
    :param int end_time: End time but is represented using a timestamp in seconds.
    :param str engine: The browser engine used for data reporting.
    :param str env: The code environment where the data reporting takes place.(`production`: production env, `development`: development env, `gray`: gray env, `pre`: pre env, `daily`: daily env, `local`: local env, `others`: others env).
    :param str ext_first: First Expansion parameter.
    :param str ext_second: Second Expansion parameter.
    :param str ext_third: Third Expansion parameter.
    :param str from_: The source page of the data reporting.
    :param str is_abroad: Whether it is non-China region.`1`: yes; `0`: no.
    :param str isp: The internet service provider used for data reporting.
    :param str level: Log level for data reporting(`1`: whitelist, `2`: normal, `4`: error, `8`: promise error, `16`: ajax request error, `32`: js resource load error, `64`: image resource load error, `128`: css resource load error, `256`: console.error, `512`: video resource load error, `1024`: request retcode error, `2048`: sdk self monitor error, `4096`: pv log, `8192`: event log).
    :param str net_type: The network type used for data reporting.(`1`: Wifi, `2`: 2G, `3`: 3G, `4`: 4G, `5`: 5G, `6`: 6G, `100`: Unknown).
    :param str os: The operating system used for data reporting.
    :param str platform: The platform where the data reporting takes place.(`1`: Android, `2`: IOS, `3`: Windows, `4`: Mac, `5`: Linux, `100`: Other).
    :param int project_id: Project ID.
    :param str result_output_file: Used to save results.
    :param int start_time: Start time but is represented using a timestamp in seconds.
    :param str type: Query Data Type. `analysis`:query analysis data, `compare`:query compare data, `allcount`:query allcount, `condition`:query in condition, `nettype`: CostType sort by nettype, `version`: CostType sort by version, `platform`: CostType sort by platform, `isp`: CostType sort by isp, `region`: CostType sort by region, `device`: CostType sort by device, `browser`: CostType sort by browser, `ext1`: CostType sort by ext1, `ext2`: CostType sort by ext2, `ext3`: CostType sort by ext3, `ret`: CostType sort by ret, `status`: CostType sort by status, `from`: CostType sort by from, `url`: CostType sort by url, `env`: CostType sort by env.
    :param str version_num: The SDK version used for data reporting.
    """
    __args__ = dict()
    __args__['area'] = area
    __args__['brand'] = brand
    __args__['browser'] = browser
    __args__['device'] = device
    __args__['endTime'] = end_time
    __args__['engine'] = engine
    __args__['env'] = env
    __args__['extFirst'] = ext_first
    __args__['extSecond'] = ext_second
    __args__['extThird'] = ext_third
    __args__['from'] = from_
    __args__['isAbroad'] = is_abroad
    __args__['isp'] = isp
    __args__['level'] = level
    __args__['netType'] = net_type
    __args__['os'] = os
    __args__['platform'] = platform
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    __args__['type'] = type
    __args__['versionNum'] = version_num
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Rum/getLogUrlStatistics:getLogUrlStatistics', __args__, opts=opts, typ=GetLogUrlStatisticsResult).value

    return AwaitableGetLogUrlStatisticsResult(
        area=pulumi.get(__ret__, 'area'),
        brand=pulumi.get(__ret__, 'brand'),
        browser=pulumi.get(__ret__, 'browser'),
        device=pulumi.get(__ret__, 'device'),
        end_time=pulumi.get(__ret__, 'end_time'),
        engine=pulumi.get(__ret__, 'engine'),
        env=pulumi.get(__ret__, 'env'),
        ext_first=pulumi.get(__ret__, 'ext_first'),
        ext_second=pulumi.get(__ret__, 'ext_second'),
        ext_third=pulumi.get(__ret__, 'ext_third'),
        from_=pulumi.get(__ret__, 'from_'),
        id=pulumi.get(__ret__, 'id'),
        is_abroad=pulumi.get(__ret__, 'is_abroad'),
        isp=pulumi.get(__ret__, 'isp'),
        level=pulumi.get(__ret__, 'level'),
        net_type=pulumi.get(__ret__, 'net_type'),
        os=pulumi.get(__ret__, 'os'),
        platform=pulumi.get(__ret__, 'platform'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result=pulumi.get(__ret__, 'result'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'),
        type=pulumi.get(__ret__, 'type'),
        version_num=pulumi.get(__ret__, 'version_num'))


@_utilities.lift_output_func(get_log_url_statistics)
def get_log_url_statistics_output(area: Optional[pulumi.Input[Optional[str]]] = None,
                                  brand: Optional[pulumi.Input[Optional[str]]] = None,
                                  browser: Optional[pulumi.Input[Optional[str]]] = None,
                                  device: Optional[pulumi.Input[Optional[str]]] = None,
                                  end_time: Optional[pulumi.Input[int]] = None,
                                  engine: Optional[pulumi.Input[Optional[str]]] = None,
                                  env: Optional[pulumi.Input[Optional[str]]] = None,
                                  ext_first: Optional[pulumi.Input[Optional[str]]] = None,
                                  ext_second: Optional[pulumi.Input[Optional[str]]] = None,
                                  ext_third: Optional[pulumi.Input[Optional[str]]] = None,
                                  from_: Optional[pulumi.Input[Optional[str]]] = None,
                                  is_abroad: Optional[pulumi.Input[Optional[str]]] = None,
                                  isp: Optional[pulumi.Input[Optional[str]]] = None,
                                  level: Optional[pulumi.Input[Optional[str]]] = None,
                                  net_type: Optional[pulumi.Input[Optional[str]]] = None,
                                  os: Optional[pulumi.Input[Optional[str]]] = None,
                                  platform: Optional[pulumi.Input[Optional[str]]] = None,
                                  project_id: Optional[pulumi.Input[int]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  start_time: Optional[pulumi.Input[int]] = None,
                                  type: Optional[pulumi.Input[str]] = None,
                                  version_num: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLogUrlStatisticsResult]:
    """
    Use this data source to query detailed information of rum log_url_statistics

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    log_url_statistics = tencentcloud.Rum.get_log_url_statistics(end_time=1625454840,
        project_id=1,
        start_time=1625444040,
        type="analysis")
    ```
    <!--End PulumiCodeChooser -->


    :param str area: The region where the data reporting takes place.
    :param str brand: The mobile phone brand used for data reporting.
    :param str browser: The browser type used for data reporting.
    :param str device: The device used for data reporting.
    :param int end_time: End time but is represented using a timestamp in seconds.
    :param str engine: The browser engine used for data reporting.
    :param str env: The code environment where the data reporting takes place.(`production`: production env, `development`: development env, `gray`: gray env, `pre`: pre env, `daily`: daily env, `local`: local env, `others`: others env).
    :param str ext_first: First Expansion parameter.
    :param str ext_second: Second Expansion parameter.
    :param str ext_third: Third Expansion parameter.
    :param str from_: The source page of the data reporting.
    :param str is_abroad: Whether it is non-China region.`1`: yes; `0`: no.
    :param str isp: The internet service provider used for data reporting.
    :param str level: Log level for data reporting(`1`: whitelist, `2`: normal, `4`: error, `8`: promise error, `16`: ajax request error, `32`: js resource load error, `64`: image resource load error, `128`: css resource load error, `256`: console.error, `512`: video resource load error, `1024`: request retcode error, `2048`: sdk self monitor error, `4096`: pv log, `8192`: event log).
    :param str net_type: The network type used for data reporting.(`1`: Wifi, `2`: 2G, `3`: 3G, `4`: 4G, `5`: 5G, `6`: 6G, `100`: Unknown).
    :param str os: The operating system used for data reporting.
    :param str platform: The platform where the data reporting takes place.(`1`: Android, `2`: IOS, `3`: Windows, `4`: Mac, `5`: Linux, `100`: Other).
    :param int project_id: Project ID.
    :param str result_output_file: Used to save results.
    :param int start_time: Start time but is represented using a timestamp in seconds.
    :param str type: Query Data Type. `analysis`:query analysis data, `compare`:query compare data, `allcount`:query allcount, `condition`:query in condition, `nettype`: CostType sort by nettype, `version`: CostType sort by version, `platform`: CostType sort by platform, `isp`: CostType sort by isp, `region`: CostType sort by region, `device`: CostType sort by device, `browser`: CostType sort by browser, `ext1`: CostType sort by ext1, `ext2`: CostType sort by ext2, `ext3`: CostType sort by ext3, `ret`: CostType sort by ret, `status`: CostType sort by status, `from`: CostType sort by from, `url`: CostType sort by url, `env`: CostType sort by env.
    :param str version_num: The SDK version used for data reporting.
    """
    ...
