# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WhitelistArgs', 'Whitelist']

@pulumi.input_type
class WhitelistArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 remark: pulumi.Input[str],
                 whitelist_uin: pulumi.Input[str],
                 aid: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Whitelist resource.
        :param pulumi.Input[str] instance_id: Instance ID, such as taw-123.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[str] whitelist_uin: uin: business identifier.
        :param pulumi.Input[str] aid: Business identifier.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "whitelist_uin", whitelist_uin)
        if aid is not None:
            pulumi.set(__self__, "aid", aid)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID, such as taw-123.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Input[str]:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: pulumi.Input[str]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="whitelistUin")
    def whitelist_uin(self) -> pulumi.Input[str]:
        """
        uin: business identifier.
        """
        return pulumi.get(self, "whitelist_uin")

    @whitelist_uin.setter
    def whitelist_uin(self, value: pulumi.Input[str]):
        pulumi.set(self, "whitelist_uin", value)

    @property
    @pulumi.getter
    def aid(self) -> Optional[pulumi.Input[str]]:
        """
        Business identifier.
        """
        return pulumi.get(self, "aid")

    @aid.setter
    def aid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aid", value)


@pulumi.input_type
class _WhitelistState:
    def __init__(__self__, *,
                 aid: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 create_user: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[str]] = None,
                 whitelist_uin: Optional[pulumi.Input[str]] = None,
                 wid: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Whitelist resources.
        :param pulumi.Input[str] aid: Business identifier.
        :param pulumi.Input[str] create_time: Creation time.
        :param pulumi.Input[str] create_user: Creator ID.
        :param pulumi.Input[str] instance_id: Instance ID, such as taw-123.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[str] ttl: End time.
        :param pulumi.Input[str] whitelist_uin: uin: business identifier.
        :param pulumi.Input[str] wid: Auto-Increment allowlist ID.
        """
        if aid is not None:
            pulumi.set(__self__, "aid", aid)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if create_user is not None:
            pulumi.set(__self__, "create_user", create_user)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if whitelist_uin is not None:
            pulumi.set(__self__, "whitelist_uin", whitelist_uin)
        if wid is not None:
            pulumi.set(__self__, "wid", wid)

    @property
    @pulumi.getter
    def aid(self) -> Optional[pulumi.Input[str]]:
        """
        Business identifier.
        """
        return pulumi.get(self, "aid")

    @aid.setter
    def aid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aid", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="createUser")
    def create_user(self) -> Optional[pulumi.Input[str]]:
        """
        Creator ID.
        """
        return pulumi.get(self, "create_user")

    @create_user.setter
    def create_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_user", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID, such as taw-123.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[str]]:
        """
        End time.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter(name="whitelistUin")
    def whitelist_uin(self) -> Optional[pulumi.Input[str]]:
        """
        uin: business identifier.
        """
        return pulumi.get(self, "whitelist_uin")

    @whitelist_uin.setter
    def whitelist_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "whitelist_uin", value)

    @property
    @pulumi.getter
    def wid(self) -> Optional[pulumi.Input[str]]:
        """
        Auto-Increment allowlist ID.
        """
        return pulumi.get(self, "wid")

    @wid.setter
    def wid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wid", value)


class Whitelist(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aid: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 whitelist_uin: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a rum whitelist

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        whitelist = tencentcloud.rum.Whitelist("whitelist",
            instance_id="rum-pasZKEI3RLgakj",
            remark="white list remark",
            whitelist_uin="20221122")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        rum whitelist can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Rum/whitelist:Whitelist whitelist whitelist_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aid: Business identifier.
        :param pulumi.Input[str] instance_id: Instance ID, such as taw-123.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[str] whitelist_uin: uin: business identifier.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WhitelistArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a rum whitelist

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        whitelist = tencentcloud.rum.Whitelist("whitelist",
            instance_id="rum-pasZKEI3RLgakj",
            remark="white list remark",
            whitelist_uin="20221122")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        rum whitelist can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Rum/whitelist:Whitelist whitelist whitelist_id
        ```

        :param str resource_name: The name of the resource.
        :param WhitelistArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WhitelistArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aid: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 whitelist_uin: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WhitelistArgs.__new__(WhitelistArgs)

            __props__.__dict__["aid"] = aid
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if remark is None and not opts.urn:
                raise TypeError("Missing required property 'remark'")
            __props__.__dict__["remark"] = remark
            if whitelist_uin is None and not opts.urn:
                raise TypeError("Missing required property 'whitelist_uin'")
            __props__.__dict__["whitelist_uin"] = whitelist_uin
            __props__.__dict__["create_time"] = None
            __props__.__dict__["create_user"] = None
            __props__.__dict__["ttl"] = None
            __props__.__dict__["wid"] = None
        super(Whitelist, __self__).__init__(
            'tencentcloud:Rum/whitelist:Whitelist',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aid: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            create_user: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[str]] = None,
            whitelist_uin: Optional[pulumi.Input[str]] = None,
            wid: Optional[pulumi.Input[str]] = None) -> 'Whitelist':
        """
        Get an existing Whitelist resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aid: Business identifier.
        :param pulumi.Input[str] create_time: Creation time.
        :param pulumi.Input[str] create_user: Creator ID.
        :param pulumi.Input[str] instance_id: Instance ID, such as taw-123.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[str] ttl: End time.
        :param pulumi.Input[str] whitelist_uin: uin: business identifier.
        :param pulumi.Input[str] wid: Auto-Increment allowlist ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WhitelistState.__new__(_WhitelistState)

        __props__.__dict__["aid"] = aid
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["create_user"] = create_user
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["remark"] = remark
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["whitelist_uin"] = whitelist_uin
        __props__.__dict__["wid"] = wid
        return Whitelist(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aid(self) -> pulumi.Output[Optional[str]]:
        """
        Business identifier.
        """
        return pulumi.get(self, "aid")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="createUser")
    def create_user(self) -> pulumi.Output[str]:
        """
        Creator ID.
        """
        return pulumi.get(self, "create_user")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID, such as taw-123.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[str]:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[str]:
        """
        End time.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="whitelistUin")
    def whitelist_uin(self) -> pulumi.Output[str]:
        """
        uin: business identifier.
        """
        return pulumi.get(self, "whitelist_uin")

    @property
    @pulumi.getter
    def wid(self) -> pulumi.Output[str]:
        """
        Auto-Increment allowlist ID.
        """
        return pulumi.get(self, "wid")

