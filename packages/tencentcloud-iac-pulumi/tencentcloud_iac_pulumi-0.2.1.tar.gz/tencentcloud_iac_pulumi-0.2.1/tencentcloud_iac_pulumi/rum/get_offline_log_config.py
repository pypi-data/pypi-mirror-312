# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOfflineLogConfigResult',
    'AwaitableGetOfflineLogConfigResult',
    'get_offline_log_config',
    'get_offline_log_config_output',
]

@pulumi.output_type
class GetOfflineLogConfigResult:
    """
    A collection of values returned by getOfflineLogConfig.
    """
    def __init__(__self__, id=None, msg=None, project_key=None, result_output_file=None, unique_id_sets=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if msg and not isinstance(msg, str):
            raise TypeError("Expected argument 'msg' to be a str")
        pulumi.set(__self__, "msg", msg)
        if project_key and not isinstance(project_key, str):
            raise TypeError("Expected argument 'project_key' to be a str")
        pulumi.set(__self__, "project_key", project_key)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if unique_id_sets and not isinstance(unique_id_sets, list):
            raise TypeError("Expected argument 'unique_id_sets' to be a list")
        pulumi.set(__self__, "unique_id_sets", unique_id_sets)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def msg(self) -> str:
        """
        API call information.
        """
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> str:
        return pulumi.get(self, "project_key")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="uniqueIdSets")
    def unique_id_sets(self) -> Sequence[str]:
        """
        Unique identifier of the user to be listened on(aid or uin).
        """
        return pulumi.get(self, "unique_id_sets")


class AwaitableGetOfflineLogConfigResult(GetOfflineLogConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOfflineLogConfigResult(
            id=self.id,
            msg=self.msg,
            project_key=self.project_key,
            result_output_file=self.result_output_file,
            unique_id_sets=self.unique_id_sets)


def get_offline_log_config(project_key: Optional[str] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOfflineLogConfigResult:
    """
    Use this data source to query detailed information of rum offlineLogConfig

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    offline_log_config = tencentcloud.Rum.get_offline_log_config(project_key="ZEYrYfvaYQ30jRdmPx")
    ```
    <!--End PulumiCodeChooser -->


    :param str project_key: Unique project key for reporting.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['projectKey'] = project_key
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Rum/getOfflineLogConfig:getOfflineLogConfig', __args__, opts=opts, typ=GetOfflineLogConfigResult).value

    return AwaitableGetOfflineLogConfigResult(
        id=pulumi.get(__ret__, 'id'),
        msg=pulumi.get(__ret__, 'msg'),
        project_key=pulumi.get(__ret__, 'project_key'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        unique_id_sets=pulumi.get(__ret__, 'unique_id_sets'))


@_utilities.lift_output_func(get_offline_log_config)
def get_offline_log_config_output(project_key: Optional[pulumi.Input[str]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOfflineLogConfigResult]:
    """
    Use this data source to query detailed information of rum offlineLogConfig

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    offline_log_config = tencentcloud.Rum.get_offline_log_config(project_key="ZEYrYfvaYQ30jRdmPx")
    ```
    <!--End PulumiCodeChooser -->


    :param str project_key: Unique project key for reporting.
    :param str result_output_file: Used to save results.
    """
    ...
