# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetReportCountResult',
    'AwaitableGetReportCountResult',
    'get_report_count',
    'get_report_count_output',
]

@pulumi.output_type
class GetReportCountResult:
    """
    A collection of values returned by getReportCount.
    """
    def __init__(__self__, end_time=None, id=None, instance_id=None, project_id=None, report_type=None, result=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if report_type and not isinstance(report_type, str):
            raise TypeError("Expected argument 'report_type' to be a str")
        pulumi.set(__self__, "report_type", report_type)
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="reportType")
    def report_type(self) -> Optional[str]:
        return pulumi.get(self, "report_type")

    @property
    @pulumi.getter
    def result(self) -> str:
        """
        Return value.
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")


class AwaitableGetReportCountResult(GetReportCountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReportCountResult(
            end_time=self.end_time,
            id=self.id,
            instance_id=self.instance_id,
            project_id=self.project_id,
            report_type=self.report_type,
            result=self.result,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_report_count(end_time: Optional[int] = None,
                     instance_id: Optional[str] = None,
                     project_id: Optional[int] = None,
                     report_type: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     start_time: Optional[int] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReportCountResult:
    """
    Use this data source to query detailed information of rum report_count

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    report_count = tencentcloud.Rum.get_report_count(end_time=1625454840,
        project_id=1,
        report_type="log",
        start_time=1625444040)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: End time but is represented using a timestamp in seconds.
    :param str instance_id: Instance ID.
    :param int project_id: Project ID.
    :param str report_type: Report type, empty is meaning all type count. `log`:log report count, `pv`:pv report count, `event`:event report count, `speed`:speed report count, `performance`:performance report count, `custom`:custom report count, `webvitals`:webvitals report count, `miniProgramData`:miniProgramData report count.
    :param str result_output_file: Used to save results.
    :param int start_time: Start time but is represented using a timestamp in seconds.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instanceId'] = instance_id
    __args__['projectId'] = project_id
    __args__['reportType'] = report_type
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Rum/getReportCount:getReportCount', __args__, opts=opts, typ=GetReportCountResult).value

    return AwaitableGetReportCountResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        report_type=pulumi.get(__ret__, 'report_type'),
        result=pulumi.get(__ret__, 'result'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_report_count)
def get_report_count_output(end_time: Optional[pulumi.Input[int]] = None,
                            instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                            project_id: Optional[pulumi.Input[int]] = None,
                            report_type: Optional[pulumi.Input[Optional[str]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            start_time: Optional[pulumi.Input[int]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReportCountResult]:
    """
    Use this data source to query detailed information of rum report_count

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    report_count = tencentcloud.Rum.get_report_count(end_time=1625454840,
        project_id=1,
        report_type="log",
        start_time=1625444040)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: End time but is represented using a timestamp in seconds.
    :param str instance_id: Instance ID.
    :param int project_id: Project ID.
    :param str report_type: Report type, empty is meaning all type count. `log`:log report count, `pv`:pv report count, `event`:event report count, `speed`:speed report count, `performance`:performance report count, `custom`:custom report count, `webvitals`:webvitals report count, `miniProgramData`:miniProgramData report count.
    :param str result_output_file: Used to save results.
    :param int start_time: Start time but is represented using a timestamp in seconds.
    """
    ...
