# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetScoresResult',
    'AwaitableGetScoresResult',
    'get_scores',
    'get_scores_output',
]

@pulumi.output_type
class GetScoresResult:
    """
    A collection of values returned by getScores.
    """
    def __init__(__self__, end_time=None, id=None, is_demo=None, project_id=None, result_output_file=None, score_sets=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_demo and not isinstance(is_demo, int):
            raise TypeError("Expected argument 'is_demo' to be a int")
        pulumi.set(__self__, "is_demo", is_demo)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if score_sets and not isinstance(score_sets, list):
            raise TypeError("Expected argument 'score_sets' to be a list")
        pulumi.set(__self__, "score_sets", score_sets)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isDemo")
    def is_demo(self) -> Optional[int]:
        return pulumi.get(self, "is_demo")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="scoreSets")
    def score_sets(self) -> Sequence['outputs.GetScoresScoreSetResult']:
        """
        Score list.
        """
        return pulumi.get(self, "score_sets")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetScoresResult(GetScoresResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScoresResult(
            end_time=self.end_time,
            id=self.id,
            is_demo=self.is_demo,
            project_id=self.project_id,
            result_output_file=self.result_output_file,
            score_sets=self.score_sets,
            start_time=self.start_time)


def get_scores(end_time: Optional[str] = None,
               is_demo: Optional[int] = None,
               project_id: Optional[int] = None,
               result_output_file: Optional[str] = None,
               start_time: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScoresResult:
    """
    Use this data source to query detailed information of rum scores

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    scores = tencentcloud.Rum.get_scores(end_time="2023082215",
        is_demo=1,
        project_id=1,
        start_time="2023082214")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time.
    :param int is_demo: Get data from demo. This parameter is deprecated.
    :param int project_id: Project ID.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['isDemo'] = is_demo
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Rum/getScores:getScores', __args__, opts=opts, typ=GetScoresResult).value

    return AwaitableGetScoresResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        is_demo=pulumi.get(__ret__, 'is_demo'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        score_sets=pulumi.get(__ret__, 'score_sets'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_scores)
def get_scores_output(end_time: Optional[pulumi.Input[str]] = None,
                      is_demo: Optional[pulumi.Input[Optional[int]]] = None,
                      project_id: Optional[pulumi.Input[Optional[int]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      start_time: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetScoresResult]:
    """
    Use this data source to query detailed information of rum scores

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    scores = tencentcloud.Rum.get_scores(end_time="2023082215",
        is_demo=1,
        project_id=1,
        start_time="2023082214")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time.
    :param int is_demo: Get data from demo. This parameter is deprecated.
    :param int project_id: Project ID.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time.
    """
    ...
