# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ModuleStatusArgs', 'ModuleStatus']

@pulumi.input_type
class ModuleStatusArgs:
    def __init__(__self__, *,
                 access_control: pulumi.Input[int],
                 api_protection: pulumi.Input[int],
                 cc_protection: pulumi.Input[int],
                 domain: pulumi.Input[str],
                 web_security: pulumi.Input[int],
                 anti_leakage: Optional[pulumi.Input[int]] = None,
                 anti_tamper: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ModuleStatus resource.
        :param pulumi.Input[int] access_control: ACL module status, 0:closed, 1:opened.
        :param pulumi.Input[int] api_protection: API security module status, 0:closed, 1:opened.
        :param pulumi.Input[int] cc_protection: CC module status, 0:closed, 1:opened.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] web_security: WEB security module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_leakage: Anti leakage module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_tamper: Anti tamper module status, 0:closed, 1:opened.
        """
        pulumi.set(__self__, "access_control", access_control)
        pulumi.set(__self__, "api_protection", api_protection)
        pulumi.set(__self__, "cc_protection", cc_protection)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "web_security", web_security)
        if anti_leakage is not None:
            pulumi.set(__self__, "anti_leakage", anti_leakage)
        if anti_tamper is not None:
            pulumi.set(__self__, "anti_tamper", anti_tamper)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> pulumi.Input[int]:
        """
        ACL module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: pulumi.Input[int]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter(name="apiProtection")
    def api_protection(self) -> pulumi.Input[int]:
        """
        API security module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "api_protection")

    @api_protection.setter
    def api_protection(self, value: pulumi.Input[int]):
        pulumi.set(self, "api_protection", value)

    @property
    @pulumi.getter(name="ccProtection")
    def cc_protection(self) -> pulumi.Input[int]:
        """
        CC module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "cc_protection")

    @cc_protection.setter
    def cc_protection(self, value: pulumi.Input[int]):
        pulumi.set(self, "cc_protection", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="webSecurity")
    def web_security(self) -> pulumi.Input[int]:
        """
        WEB security module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "web_security")

    @web_security.setter
    def web_security(self, value: pulumi.Input[int]):
        pulumi.set(self, "web_security", value)

    @property
    @pulumi.getter(name="antiLeakage")
    def anti_leakage(self) -> Optional[pulumi.Input[int]]:
        """
        Anti leakage module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "anti_leakage")

    @anti_leakage.setter
    def anti_leakage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anti_leakage", value)

    @property
    @pulumi.getter(name="antiTamper")
    def anti_tamper(self) -> Optional[pulumi.Input[int]]:
        """
        Anti tamper module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "anti_tamper")

    @anti_tamper.setter
    def anti_tamper(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anti_tamper", value)


@pulumi.input_type
class _ModuleStatusState:
    def __init__(__self__, *,
                 access_control: Optional[pulumi.Input[int]] = None,
                 anti_leakage: Optional[pulumi.Input[int]] = None,
                 anti_tamper: Optional[pulumi.Input[int]] = None,
                 api_protection: Optional[pulumi.Input[int]] = None,
                 cc_protection: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 web_security: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ModuleStatus resources.
        :param pulumi.Input[int] access_control: ACL module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_leakage: Anti leakage module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_tamper: Anti tamper module status, 0:closed, 1:opened.
        :param pulumi.Input[int] api_protection: API security module status, 0:closed, 1:opened.
        :param pulumi.Input[int] cc_protection: CC module status, 0:closed, 1:opened.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] web_security: WEB security module status, 0:closed, 1:opened.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if anti_leakage is not None:
            pulumi.set(__self__, "anti_leakage", anti_leakage)
        if anti_tamper is not None:
            pulumi.set(__self__, "anti_tamper", anti_tamper)
        if api_protection is not None:
            pulumi.set(__self__, "api_protection", api_protection)
        if cc_protection is not None:
            pulumi.set(__self__, "cc_protection", cc_protection)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if web_security is not None:
            pulumi.set(__self__, "web_security", web_security)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input[int]]:
        """
        ACL module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter(name="antiLeakage")
    def anti_leakage(self) -> Optional[pulumi.Input[int]]:
        """
        Anti leakage module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "anti_leakage")

    @anti_leakage.setter
    def anti_leakage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anti_leakage", value)

    @property
    @pulumi.getter(name="antiTamper")
    def anti_tamper(self) -> Optional[pulumi.Input[int]]:
        """
        Anti tamper module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "anti_tamper")

    @anti_tamper.setter
    def anti_tamper(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "anti_tamper", value)

    @property
    @pulumi.getter(name="apiProtection")
    def api_protection(self) -> Optional[pulumi.Input[int]]:
        """
        API security module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "api_protection")

    @api_protection.setter
    def api_protection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_protection", value)

    @property
    @pulumi.getter(name="ccProtection")
    def cc_protection(self) -> Optional[pulumi.Input[int]]:
        """
        CC module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "cc_protection")

    @cc_protection.setter
    def cc_protection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cc_protection", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="webSecurity")
    def web_security(self) -> Optional[pulumi.Input[int]]:
        """
        WEB security module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "web_security")

    @web_security.setter
    def web_security(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "web_security", value)


class ModuleStatus(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[int]] = None,
                 anti_leakage: Optional[pulumi.Input[int]] = None,
                 anti_tamper: Optional[pulumi.Input[int]] = None,
                 api_protection: Optional[pulumi.Input[int]] = None,
                 cc_protection: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 web_security: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf module_status

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ModuleStatus("example",
            access_control=0,
            anti_leakage=0,
            anti_tamper=1,
            api_protection=1,
            cc_protection=1,
            domain="demo.waf.com",
            web_security=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf module_status can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/moduleStatus:ModuleStatus example demo.waf.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] access_control: ACL module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_leakage: Anti leakage module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_tamper: Anti tamper module status, 0:closed, 1:opened.
        :param pulumi.Input[int] api_protection: API security module status, 0:closed, 1:opened.
        :param pulumi.Input[int] cc_protection: CC module status, 0:closed, 1:opened.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] web_security: WEB security module status, 0:closed, 1:opened.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModuleStatusArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf module_status

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ModuleStatus("example",
            access_control=0,
            anti_leakage=0,
            anti_tamper=1,
            api_protection=1,
            cc_protection=1,
            domain="demo.waf.com",
            web_security=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf module_status can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/moduleStatus:ModuleStatus example demo.waf.com
        ```

        :param str resource_name: The name of the resource.
        :param ModuleStatusArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModuleStatusArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[int]] = None,
                 anti_leakage: Optional[pulumi.Input[int]] = None,
                 anti_tamper: Optional[pulumi.Input[int]] = None,
                 api_protection: Optional[pulumi.Input[int]] = None,
                 cc_protection: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 web_security: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModuleStatusArgs.__new__(ModuleStatusArgs)

            if access_control is None and not opts.urn:
                raise TypeError("Missing required property 'access_control'")
            __props__.__dict__["access_control"] = access_control
            __props__.__dict__["anti_leakage"] = anti_leakage
            __props__.__dict__["anti_tamper"] = anti_tamper
            if api_protection is None and not opts.urn:
                raise TypeError("Missing required property 'api_protection'")
            __props__.__dict__["api_protection"] = api_protection
            if cc_protection is None and not opts.urn:
                raise TypeError("Missing required property 'cc_protection'")
            __props__.__dict__["cc_protection"] = cc_protection
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if web_security is None and not opts.urn:
                raise TypeError("Missing required property 'web_security'")
            __props__.__dict__["web_security"] = web_security
        super(ModuleStatus, __self__).__init__(
            'tencentcloud:Waf/moduleStatus:ModuleStatus',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control: Optional[pulumi.Input[int]] = None,
            anti_leakage: Optional[pulumi.Input[int]] = None,
            anti_tamper: Optional[pulumi.Input[int]] = None,
            api_protection: Optional[pulumi.Input[int]] = None,
            cc_protection: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            web_security: Optional[pulumi.Input[int]] = None) -> 'ModuleStatus':
        """
        Get an existing ModuleStatus resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] access_control: ACL module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_leakage: Anti leakage module status, 0:closed, 1:opened.
        :param pulumi.Input[int] anti_tamper: Anti tamper module status, 0:closed, 1:opened.
        :param pulumi.Input[int] api_protection: API security module status, 0:closed, 1:opened.
        :param pulumi.Input[int] cc_protection: CC module status, 0:closed, 1:opened.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] web_security: WEB security module status, 0:closed, 1:opened.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModuleStatusState.__new__(_ModuleStatusState)

        __props__.__dict__["access_control"] = access_control
        __props__.__dict__["anti_leakage"] = anti_leakage
        __props__.__dict__["anti_tamper"] = anti_tamper
        __props__.__dict__["api_protection"] = api_protection
        __props__.__dict__["cc_protection"] = cc_protection
        __props__.__dict__["domain"] = domain
        __props__.__dict__["web_security"] = web_security
        return ModuleStatus(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> pulumi.Output[int]:
        """
        ACL module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="antiLeakage")
    def anti_leakage(self) -> pulumi.Output[Optional[int]]:
        """
        Anti leakage module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "anti_leakage")

    @property
    @pulumi.getter(name="antiTamper")
    def anti_tamper(self) -> pulumi.Output[Optional[int]]:
        """
        Anti tamper module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "anti_tamper")

    @property
    @pulumi.getter(name="apiProtection")
    def api_protection(self) -> pulumi.Output[int]:
        """
        API security module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "api_protection")

    @property
    @pulumi.getter(name="ccProtection")
    def cc_protection(self) -> pulumi.Output[int]:
        """
        CC module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "cc_protection")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="webSecurity")
    def web_security(self) -> pulumi.Output[int]:
        """
        WEB security module status, 0:closed, 1:opened.
        """
        return pulumi.get(self, "web_security")

