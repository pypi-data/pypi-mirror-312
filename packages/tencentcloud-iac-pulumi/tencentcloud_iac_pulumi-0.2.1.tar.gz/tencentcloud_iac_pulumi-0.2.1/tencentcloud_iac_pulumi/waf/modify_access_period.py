# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ModifyAccessPeriodArgs', 'ModifyAccessPeriod']

@pulumi.input_type
class ModifyAccessPeriodArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[int],
                 topic_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ModifyAccessPeriod resource.
        :param pulumi.Input[int] period: Access log retention period, range is [1, 180].
        :param pulumi.Input[str] topic_id: Log topic, new version does not need to be uploaded.
        """
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        """
        Access log retention period, range is [1, 180].
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        Log topic, new version does not need to be uploaded.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)


@pulumi.input_type
class _ModifyAccessPeriodState:
    def __init__(__self__, *,
                 period: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ModifyAccessPeriod resources.
        :param pulumi.Input[int] period: Access log retention period, range is [1, 180].
        :param pulumi.Input[str] topic_id: Log topic, new version does not need to be uploaded.
        """
        if period is not None:
            pulumi.set(__self__, "period", period)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        Access log retention period, range is [1, 180].
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic, new version does not need to be uploaded.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


class ModifyAccessPeriod(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf modify_access_period

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ModifyAccessPeriod("example",
            period=30,
            topic_id="1ae37c76-df99-4e2b-998c-20f39eba6226")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] period: Access log retention period, range is [1, 180].
        :param pulumi.Input[str] topic_id: Log topic, new version does not need to be uploaded.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModifyAccessPeriodArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf modify_access_period

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ModifyAccessPeriod("example",
            period=30,
            topic_id="1ae37c76-df99-4e2b-998c-20f39eba6226")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ModifyAccessPeriodArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModifyAccessPeriodArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModifyAccessPeriodArgs.__new__(ModifyAccessPeriodArgs)

            if period is None and not opts.urn:
                raise TypeError("Missing required property 'period'")
            __props__.__dict__["period"] = period
            if topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id'")
            __props__.__dict__["topic_id"] = topic_id
        super(ModifyAccessPeriod, __self__).__init__(
            'tencentcloud:Waf/modifyAccessPeriod:ModifyAccessPeriod',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            period: Optional[pulumi.Input[int]] = None,
            topic_id: Optional[pulumi.Input[str]] = None) -> 'ModifyAccessPeriod':
        """
        Get an existing ModifyAccessPeriod resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] period: Access log retention period, range is [1, 180].
        :param pulumi.Input[str] topic_id: Log topic, new version does not need to be uploaded.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModifyAccessPeriodState.__new__(_ModifyAccessPeriodState)

        __props__.__dict__["period"] = period
        __props__.__dict__["topic_id"] = topic_id
        return ModifyAccessPeriod(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[int]:
        """
        Access log retention period, range is [1, 180].
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        Log topic, new version does not need to be uploaded.
        """
        return pulumi.get(self, "topic_id")

