# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomWhiteRuleArgs', 'CustomWhiteRule']

@pulumi.input_type
class CustomWhiteRuleArgs:
    def __init__(__self__, *,
                 bypass: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 expire_time: pulumi.Input[str],
                 sort_id: pulumi.Input[str],
                 strategies: pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]],
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomWhiteRule resource.
        :param pulumi.Input[str] bypass: Details of bypass.
        :param pulumi.Input[str] domain: Domain name that needs to add policy.
        :param pulumi.Input[str] expire_time: Expiration time, measured in seconds, such as 1677254399, which means the expiration time is 2023-02-24 23:59:59 0 means never expires.
        :param pulumi.Input[str] sort_id: Priority, value range 1-100, The smaller the number, the higher the execution priority of this rule.
        :param pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]] strategies: Strategies detail.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[str] status: The status of the switch, 1 is on, 0 is off, default 1.
        """
        pulumi.set(__self__, "bypass", bypass)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "sort_id", sort_id)
        pulumi.set(__self__, "strategies", strategies)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def bypass(self) -> pulumi.Input[str]:
        """
        Details of bypass.
        """
        return pulumi.get(self, "bypass")

    @bypass.setter
    def bypass(self, value: pulumi.Input[str]):
        pulumi.set(self, "bypass", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain name that needs to add policy.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Input[str]:
        """
        Expiration time, measured in seconds, such as 1677254399, which means the expiration time is 2023-02-24 23:59:59 0 means never expires.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> pulumi.Input[str]:
        """
        Priority, value range 1-100, The smaller the number, the higher the execution priority of this rule.
        """
        return pulumi.get(self, "sort_id")

    @sort_id.setter
    def sort_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sort_id", value)

    @property
    @pulumi.getter
    def strategies(self) -> pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]]:
        """
        Strategies detail.
        """
        return pulumi.get(self, "strategies")

    @strategies.setter
    def strategies(self, value: pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]]):
        pulumi.set(self, "strategies", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the switch, 1 is on, 0 is off, default 1.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _CustomWhiteRuleState:
    def __init__(__self__, *,
                 bypass: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 sort_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strategies: Optional[pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]]] = None):
        """
        Input properties used for looking up and filtering CustomWhiteRule resources.
        :param pulumi.Input[str] bypass: Details of bypass.
        :param pulumi.Input[str] domain: Domain name that needs to add policy.
        :param pulumi.Input[str] expire_time: Expiration time, measured in seconds, such as 1677254399, which means the expiration time is 2023-02-24 23:59:59 0 means never expires.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[str] rule_id: rule ID.
        :param pulumi.Input[str] sort_id: Priority, value range 1-100, The smaller the number, the higher the execution priority of this rule.
        :param pulumi.Input[str] status: The status of the switch, 1 is on, 0 is off, default 1.
        :param pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]] strategies: Strategies detail.
        """
        if bypass is not None:
            pulumi.set(__self__, "bypass", bypass)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if expire_time is not None:
            pulumi.set(__self__, "expire_time", expire_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if sort_id is not None:
            pulumi.set(__self__, "sort_id", sort_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strategies is not None:
            pulumi.set(__self__, "strategies", strategies)

    @property
    @pulumi.getter
    def bypass(self) -> Optional[pulumi.Input[str]]:
        """
        Details of bypass.
        """
        return pulumi.get(self, "bypass")

    @bypass.setter
    def bypass(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bypass", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name that needs to add policy.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expiration time, measured in seconds, such as 1677254399, which means the expiration time is 2023-02-24 23:59:59 0 means never expires.
        """
        return pulumi.get(self, "expire_time")

    @expire_time.setter
    def expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expire_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> Optional[pulumi.Input[str]]:
        """
        Priority, value range 1-100, The smaller the number, the higher the execution priority of this rule.
        """
        return pulumi.get(self, "sort_id")

    @sort_id.setter
    def sort_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the switch, 1 is on, 0 is off, default 1.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]]]:
        """
        Strategies detail.
        """
        return pulumi.get(self, "strategies")

    @strategies.setter
    def strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomWhiteRuleStrategyArgs']]]]):
        pulumi.set(self, "strategies", value)


class CustomWhiteRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomWhiteRuleStrategyArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf custom_white_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.CustomWhiteRule("example",
            bypass="geoip,cc,owasp",
            domain="test.com",
            expire_time="0",
            sort_id="30",
            status="1",
            strategies=[tencentcloud.waf.CustomWhiteRuleStrategyArgs(
                arg="",
                compare_func="ipmatch",
                content="1.1.1.1",
                field="IP",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf custom_white_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/customWhiteRule:CustomWhiteRule example test.com#1100310837
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bypass: Details of bypass.
        :param pulumi.Input[str] domain: Domain name that needs to add policy.
        :param pulumi.Input[str] expire_time: Expiration time, measured in seconds, such as 1677254399, which means the expiration time is 2023-02-24 23:59:59 0 means never expires.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[str] sort_id: Priority, value range 1-100, The smaller the number, the higher the execution priority of this rule.
        :param pulumi.Input[str] status: The status of the switch, 1 is on, 0 is off, default 1.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomWhiteRuleStrategyArgs']]]] strategies: Strategies detail.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomWhiteRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf custom_white_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.CustomWhiteRule("example",
            bypass="geoip,cc,owasp",
            domain="test.com",
            expire_time="0",
            sort_id="30",
            status="1",
            strategies=[tencentcloud.waf.CustomWhiteRuleStrategyArgs(
                arg="",
                compare_func="ipmatch",
                content="1.1.1.1",
                field="IP",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf custom_white_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/customWhiteRule:CustomWhiteRule example test.com#1100310837
        ```

        :param str resource_name: The name of the resource.
        :param CustomWhiteRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomWhiteRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bypass: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 expire_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomWhiteRuleStrategyArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomWhiteRuleArgs.__new__(CustomWhiteRuleArgs)

            if bypass is None and not opts.urn:
                raise TypeError("Missing required property 'bypass'")
            __props__.__dict__["bypass"] = bypass
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if expire_time is None and not opts.urn:
                raise TypeError("Missing required property 'expire_time'")
            __props__.__dict__["expire_time"] = expire_time
            __props__.__dict__["name"] = name
            if sort_id is None and not opts.urn:
                raise TypeError("Missing required property 'sort_id'")
            __props__.__dict__["sort_id"] = sort_id
            __props__.__dict__["status"] = status
            if strategies is None and not opts.urn:
                raise TypeError("Missing required property 'strategies'")
            __props__.__dict__["strategies"] = strategies
            __props__.__dict__["rule_id"] = None
        super(CustomWhiteRule, __self__).__init__(
            'tencentcloud:Waf/customWhiteRule:CustomWhiteRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bypass: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            expire_time: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            sort_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomWhiteRuleStrategyArgs']]]]] = None) -> 'CustomWhiteRule':
        """
        Get an existing CustomWhiteRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bypass: Details of bypass.
        :param pulumi.Input[str] domain: Domain name that needs to add policy.
        :param pulumi.Input[str] expire_time: Expiration time, measured in seconds, such as 1677254399, which means the expiration time is 2023-02-24 23:59:59 0 means never expires.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[str] rule_id: rule ID.
        :param pulumi.Input[str] sort_id: Priority, value range 1-100, The smaller the number, the higher the execution priority of this rule.
        :param pulumi.Input[str] status: The status of the switch, 1 is on, 0 is off, default 1.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomWhiteRuleStrategyArgs']]]] strategies: Strategies detail.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomWhiteRuleState.__new__(_CustomWhiteRuleState)

        __props__.__dict__["bypass"] = bypass
        __props__.__dict__["domain"] = domain
        __props__.__dict__["expire_time"] = expire_time
        __props__.__dict__["name"] = name
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["sort_id"] = sort_id
        __props__.__dict__["status"] = status
        __props__.__dict__["strategies"] = strategies
        return CustomWhiteRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bypass(self) -> pulumi.Output[str]:
        """
        Details of bypass.
        """
        return pulumi.get(self, "bypass")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name that needs to add policy.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> pulumi.Output[str]:
        """
        Expiration time, measured in seconds, such as 1677254399, which means the expiration time is 2023-02-24 23:59:59 0 means never expires.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="sortId")
    def sort_id(self) -> pulumi.Output[str]:
        """
        Priority, value range 1-100, The smaller the number, the higher the execution priority of this rule.
        """
        return pulumi.get(self, "sort_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        The status of the switch, 1 is on, 0 is off, default 1.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def strategies(self) -> pulumi.Output[Sequence['outputs.CustomWhiteRuleStrategy']]:
        """
        Strategies detail.
        """
        return pulumi.get(self, "strategies")

