# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CcArgs', 'Cc']

@pulumi.input_type
class CcArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[str],
                 advance: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 edition: pulumi.Input[str],
                 interval: pulumi.Input[str],
                 limit: pulumi.Input[str],
                 match_func: pulumi.Input[int],
                 priority: pulumi.Input[int],
                 status: pulumi.Input[int],
                 url: pulumi.Input[str],
                 valid_time: pulumi.Input[int],
                 event_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 session_applieds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 type: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Cc resource.
        :param pulumi.Input[str] action_type: Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
        :param pulumi.Input[str] advance: Session match mode, 0 use session, 1 use ip.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] edition: WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
        :param pulumi.Input[str] interval: Interval.
        :param pulumi.Input[str] limit: CC detection threshold.
        :param pulumi.Input[int] match_func: Match method, 0 equal, 1 contains, 2 prefix.
        :param pulumi.Input[int] priority: Rule Priority.
        :param pulumi.Input[int] status: Rule Status, 0 rule close, 1 rule open.
        :param pulumi.Input[str] url: Check URL.
        :param pulumi.Input[int] valid_time: Action ValidTime, minute unit. Min: 60, Max: 604800.
        :param pulumi.Input[str] event_id: Event ID.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] session_applieds: Advance mode use session id.
        :param pulumi.Input[int] type: Operate Type.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "advance", advance)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "match_func", match_func)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "valid_time", valid_time)
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session_applieds is not None:
            pulumi.set(__self__, "session_applieds", session_applieds)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[str]:
        """
        Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def advance(self) -> pulumi.Input[str]:
        """
        Session match mode, 0 use session, 1 use ip.
        """
        return pulumi.get(self, "advance")

    @advance.setter
    def advance(self, value: pulumi.Input[str]):
        pulumi.set(self, "advance", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def edition(self) -> pulumi.Input[str]:
        """
        WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: pulumi.Input[str]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[str]:
        """
        Interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Input[str]:
        """
        CC detection threshold.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: pulumi.Input[str]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="matchFunc")
    def match_func(self) -> pulumi.Input[int]:
        """
        Match method, 0 equal, 1 contains, 2 prefix.
        """
        return pulumi.get(self, "match_func")

    @match_func.setter
    def match_func(self, value: pulumi.Input[int]):
        pulumi.set(self, "match_func", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        Rule Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[int]:
        """
        Rule Status, 0 rule close, 1 rule open.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[int]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Check URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="validTime")
    def valid_time(self) -> pulumi.Input[int]:
        """
        Action ValidTime, minute unit. Min: 60, Max: 604800.
        """
        return pulumi.get(self, "valid_time")

    @valid_time.setter
    def valid_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "valid_time", value)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[pulumi.Input[str]]:
        """
        Event ID.
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sessionApplieds")
    def session_applieds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Advance mode use session id.
        """
        return pulumi.get(self, "session_applieds")

    @session_applieds.setter
    def session_applieds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "session_applieds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        Operate Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _CcState:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[str]] = None,
                 advance: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 edition: Optional[pulumi.Input[str]] = None,
                 event_id: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[str]] = None,
                 match_func: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 session_applieds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 valid_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Cc resources.
        :param pulumi.Input[str] action_type: Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
        :param pulumi.Input[str] advance: Session match mode, 0 use session, 1 use ip.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] edition: WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
        :param pulumi.Input[str] event_id: Event ID.
        :param pulumi.Input[str] interval: Interval.
        :param pulumi.Input[str] limit: CC detection threshold.
        :param pulumi.Input[int] match_func: Match method, 0 equal, 1 contains, 2 prefix.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[int] priority: Rule Priority.
        :param pulumi.Input[str] rule_id: Rule ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] session_applieds: Advance mode use session id.
        :param pulumi.Input[int] status: Rule Status, 0 rule close, 1 rule open.
        :param pulumi.Input[int] type: Operate Type.
        :param pulumi.Input[str] url: Check URL.
        :param pulumi.Input[int] valid_time: Action ValidTime, minute unit. Min: 60, Max: 604800.
        """
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if advance is not None:
            pulumi.set(__self__, "advance", advance)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if match_func is not None:
            pulumi.set(__self__, "match_func", match_func)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if session_applieds is not None:
            pulumi.set(__self__, "session_applieds", session_applieds)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if valid_time is not None:
            pulumi.set(__self__, "valid_time", valid_time)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[str]]:
        """
        Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def advance(self) -> Optional[pulumi.Input[str]]:
        """
        Session match mode, 0 use session, 1 use ip.
        """
        return pulumi.get(self, "advance")

    @advance.setter
    def advance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advance", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def edition(self) -> Optional[pulumi.Input[str]]:
        """
        WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
        """
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[pulumi.Input[str]]:
        """
        Event ID.
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_id", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        """
        Interval.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[str]]:
        """
        CC detection threshold.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="matchFunc")
    def match_func(self) -> Optional[pulumi.Input[int]]:
        """
        Match method, 0 equal, 1 contains, 2 prefix.
        """
        return pulumi.get(self, "match_func")

    @match_func.setter
    def match_func(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_func", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        Rule Priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="sessionApplieds")
    def session_applieds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Advance mode use session id.
        """
        return pulumi.get(self, "session_applieds")

    @session_applieds.setter
    def session_applieds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "session_applieds", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Rule Status, 0 rule close, 1 rule open.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        Operate Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Check URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="validTime")
    def valid_time(self) -> Optional[pulumi.Input[int]]:
        """
        Action ValidTime, minute unit. Min: 60, Max: 604800.
        """
        return pulumi.get(self, "valid_time")

    @valid_time.setter
    def valid_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "valid_time", value)


class Cc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 advance: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 edition: Optional[pulumi.Input[str]] = None,
                 event_id: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[str]] = None,
                 match_func: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 session_applieds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 valid_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf cc

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.Cc("example",
            action_type="22",
            advance="0",
            domain="www.demo.com",
            edition="sparta-waf",
            interval="60",
            limit="60",
            match_func=0,
            priority=50,
            status=1,
            type=1,
            url="/cc_demo",
            valid_time=600)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_type: Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
        :param pulumi.Input[str] advance: Session match mode, 0 use session, 1 use ip.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] edition: WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
        :param pulumi.Input[str] event_id: Event ID.
        :param pulumi.Input[str] interval: Interval.
        :param pulumi.Input[str] limit: CC detection threshold.
        :param pulumi.Input[int] match_func: Match method, 0 equal, 1 contains, 2 prefix.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[int] priority: Rule Priority.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] session_applieds: Advance mode use session id.
        :param pulumi.Input[int] status: Rule Status, 0 rule close, 1 rule open.
        :param pulumi.Input[int] type: Operate Type.
        :param pulumi.Input[str] url: Check URL.
        :param pulumi.Input[int] valid_time: Action ValidTime, minute unit. Min: 60, Max: 604800.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf cc

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.Cc("example",
            action_type="22",
            advance="0",
            domain="www.demo.com",
            edition="sparta-waf",
            interval="60",
            limit="60",
            match_func=0,
            priority=50,
            status=1,
            type=1,
            url="/cc_demo",
            valid_time=600)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param CcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_type: Optional[pulumi.Input[str]] = None,
                 advance: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 edition: Optional[pulumi.Input[str]] = None,
                 event_id: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[str]] = None,
                 match_func: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None,
                 session_applieds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 valid_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CcArgs.__new__(CcArgs)

            if action_type is None and not opts.urn:
                raise TypeError("Missing required property 'action_type'")
            __props__.__dict__["action_type"] = action_type
            if advance is None and not opts.urn:
                raise TypeError("Missing required property 'advance'")
            __props__.__dict__["advance"] = advance
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if edition is None and not opts.urn:
                raise TypeError("Missing required property 'edition'")
            __props__.__dict__["edition"] = edition
            __props__.__dict__["event_id"] = event_id
            if interval is None and not opts.urn:
                raise TypeError("Missing required property 'interval'")
            __props__.__dict__["interval"] = interval
            if limit is None and not opts.urn:
                raise TypeError("Missing required property 'limit'")
            __props__.__dict__["limit"] = limit
            if match_func is None and not opts.urn:
                raise TypeError("Missing required property 'match_func'")
            __props__.__dict__["match_func"] = match_func
            __props__.__dict__["name"] = name
            if priority is None and not opts.urn:
                raise TypeError("Missing required property 'priority'")
            __props__.__dict__["priority"] = priority
            __props__.__dict__["session_applieds"] = session_applieds
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["type"] = type
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            if valid_time is None and not opts.urn:
                raise TypeError("Missing required property 'valid_time'")
            __props__.__dict__["valid_time"] = valid_time
            __props__.__dict__["rule_id"] = None
        super(Cc, __self__).__init__(
            'tencentcloud:Waf/cc:Cc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_type: Optional[pulumi.Input[str]] = None,
            advance: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            edition: Optional[pulumi.Input[str]] = None,
            event_id: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[str]] = None,
            limit: Optional[pulumi.Input[str]] = None,
            match_func: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[int]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            session_applieds: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            status: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[int]] = None,
            url: Optional[pulumi.Input[str]] = None,
            valid_time: Optional[pulumi.Input[int]] = None) -> 'Cc':
        """
        Get an existing Cc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action_type: Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
        :param pulumi.Input[str] advance: Session match mode, 0 use session, 1 use ip.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] edition: WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
        :param pulumi.Input[str] event_id: Event ID.
        :param pulumi.Input[str] interval: Interval.
        :param pulumi.Input[str] limit: CC detection threshold.
        :param pulumi.Input[int] match_func: Match method, 0 equal, 1 contains, 2 prefix.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[int] priority: Rule Priority.
        :param pulumi.Input[str] rule_id: Rule ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] session_applieds: Advance mode use session id.
        :param pulumi.Input[int] status: Rule Status, 0 rule close, 1 rule open.
        :param pulumi.Input[int] type: Operate Type.
        :param pulumi.Input[str] url: Check URL.
        :param pulumi.Input[int] valid_time: Action ValidTime, minute unit. Min: 60, Max: 604800.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CcState.__new__(_CcState)

        __props__.__dict__["action_type"] = action_type
        __props__.__dict__["advance"] = advance
        __props__.__dict__["domain"] = domain
        __props__.__dict__["edition"] = edition
        __props__.__dict__["event_id"] = event_id
        __props__.__dict__["interval"] = interval
        __props__.__dict__["limit"] = limit
        __props__.__dict__["match_func"] = match_func
        __props__.__dict__["name"] = name
        __props__.__dict__["priority"] = priority
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["session_applieds"] = session_applieds
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["valid_time"] = valid_time
        return Cc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[str]:
        """
        Rule Action, 20 log, 21 captcha, 22 deny, 23 accurate deny.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def advance(self) -> pulumi.Output[str]:
        """
        Session match mode, 0 use session, 1 use ip.
        """
        return pulumi.get(self, "advance")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def edition(self) -> pulumi.Output[str]:
        """
        WAF edition. clb-waf means clb-waf, sparta-waf means saas-waf.
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> pulumi.Output[Optional[str]]:
        """
        Event ID.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[str]:
        """
        Interval.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def limit(self) -> pulumi.Output[str]:
        """
        CC detection threshold.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="matchFunc")
    def match_func(self) -> pulumi.Output[int]:
        """
        Match method, 0 equal, 1 contains, 2 prefix.
        """
        return pulumi.get(self, "match_func")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[int]:
        """
        Rule Priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        Rule ID.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="sessionApplieds")
    def session_applieds(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Advance mode use session id.
        """
        return pulumi.get(self, "session_applieds")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Rule Status, 0 rule close, 1 rule open.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[int]]:
        """
        Operate Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Check URL.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="validTime")
    def valid_time(self) -> pulumi.Output[int]:
        """
        Action ValidTime, minute unit. Min: 60, Max: 604800.
        """
        return pulumi.get(self, "valid_time")

