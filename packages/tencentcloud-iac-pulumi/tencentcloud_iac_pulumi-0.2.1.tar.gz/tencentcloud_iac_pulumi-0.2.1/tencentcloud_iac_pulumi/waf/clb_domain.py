# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClbDomainArgs', 'ClbDomain']

@pulumi.input_type
class ClbDomainArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 alb_type: Optional[pulumi.Input[str]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 engine: Optional[pulumi.Input[int]] = None,
                 flow_mode: Optional[pulumi.Input[int]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 load_balancer_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ClbDomain resource.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] instance_id: Instance unique ID.
        :param pulumi.Input[str] region: Regions of LB bound by domain.
        :param pulumi.Input[str] alb_type: Load balancer type: clb, apisix or tsegw, default clb.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[int] engine: Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22: Rule Interception&&AI Interception Mode, Default 20.
        :param pulumi.Input[int] flow_mode: WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]] load_balancer_sets: List of bound LB.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "region", region)
        if alb_type is not None:
            pulumi.set(__self__, "alb_type", alb_type)
        if api_safe_status is not None:
            pulumi.set(__self__, "api_safe_status", api_safe_status)
        if bot_status is not None:
            pulumi.set(__self__, "bot_status", bot_status)
        if cls_status is not None:
            pulumi.set(__self__, "cls_status", cls_status)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if flow_mode is not None:
            pulumi.set(__self__, "flow_mode", flow_mode)
        if ip_headers is not None:
            pulumi.set(__self__, "ip_headers", ip_headers)
        if is_cdn is not None:
            pulumi.set(__self__, "is_cdn", is_cdn)
        if load_balancer_sets is not None:
            pulumi.set(__self__, "load_balancer_sets", load_balancer_sets)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance unique ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Regions of LB bound by domain.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="albType")
    def alb_type(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancer type: clb, apisix or tsegw, default clb.
        """
        return pulumi.get(self, "alb_type")

    @alb_type.setter
    def alb_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alb_type", value)

    @property
    @pulumi.getter(name="apiSafeStatus")
    def api_safe_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable api safe, 1 enable, 0 disable.
        """
        return pulumi.get(self, "api_safe_status")

    @api_safe_status.setter
    def api_safe_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_safe_status", value)

    @property
    @pulumi.getter(name="botStatus")
    def bot_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable bot, 1 enable, 0 disable.
        """
        return pulumi.get(self, "bot_status")

    @bot_status.setter
    def bot_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_status", value)

    @property
    @pulumi.getter(name="clsStatus")
    def cls_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable access logs, 1 enable, 0 disable.
        """
        return pulumi.get(self, "cls_status")

    @cls_status.setter
    def cls_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cls_status", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[int]]:
        """
        Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22: Rule Interception&&AI Interception Mode, Default 20.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="flowMode")
    def flow_mode(self) -> Optional[pulumi.Input[int]]:
        """
        WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
        """
        return pulumi.get(self, "flow_mode")

    @flow_mode.setter
    def flow_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flow_mode", value)

    @property
    @pulumi.getter(name="ipHeaders")
    def ip_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        """
        return pulumi.get(self, "ip_headers")

    @ip_headers.setter
    def ip_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_headers", value)

    @property
    @pulumi.getter(name="isCdn")
    def is_cdn(self) -> Optional[pulumi.Input[int]]:
        """
        Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        """
        return pulumi.get(self, "is_cdn")

    @is_cdn.setter
    def is_cdn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_cdn", value)

    @property
    @pulumi.getter(name="loadBalancerSets")
    def load_balancer_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]]]:
        """
        List of bound LB.
        """
        return pulumi.get(self, "load_balancer_sets")

    @load_balancer_sets.setter
    def load_balancer_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]]]):
        pulumi.set(self, "load_balancer_sets", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Binding status between waf and LB, 0:not bind, 1:binding.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _ClbDomainState:
    def __init__(__self__, *,
                 alb_type: Optional[pulumi.Input[str]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[int]] = None,
                 flow_mode: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 load_balancer_sets: Optional[pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ClbDomain resources.
        :param pulumi.Input[str] alb_type: Load balancer type: clb, apisix or tsegw, default clb.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] domain_id: Domain id.
        :param pulumi.Input[int] engine: Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22: Rule Interception&&AI Interception Mode, Default 20.
        :param pulumi.Input[int] flow_mode: WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
        :param pulumi.Input[str] instance_id: Instance unique ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]] load_balancer_sets: List of bound LB.
        :param pulumi.Input[str] region: Regions of LB bound by domain.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        """
        if alb_type is not None:
            pulumi.set(__self__, "alb_type", alb_type)
        if api_safe_status is not None:
            pulumi.set(__self__, "api_safe_status", api_safe_status)
        if bot_status is not None:
            pulumi.set(__self__, "bot_status", bot_status)
        if cls_status is not None:
            pulumi.set(__self__, "cls_status", cls_status)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if flow_mode is not None:
            pulumi.set(__self__, "flow_mode", flow_mode)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_headers is not None:
            pulumi.set(__self__, "ip_headers", ip_headers)
        if is_cdn is not None:
            pulumi.set(__self__, "is_cdn", is_cdn)
        if load_balancer_sets is not None:
            pulumi.set(__self__, "load_balancer_sets", load_balancer_sets)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="albType")
    def alb_type(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancer type: clb, apisix or tsegw, default clb.
        """
        return pulumi.get(self, "alb_type")

    @alb_type.setter
    def alb_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alb_type", value)

    @property
    @pulumi.getter(name="apiSafeStatus")
    def api_safe_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable api safe, 1 enable, 0 disable.
        """
        return pulumi.get(self, "api_safe_status")

    @api_safe_status.setter
    def api_safe_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_safe_status", value)

    @property
    @pulumi.getter(name="botStatus")
    def bot_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable bot, 1 enable, 0 disable.
        """
        return pulumi.get(self, "bot_status")

    @bot_status.setter
    def bot_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_status", value)

    @property
    @pulumi.getter(name="clsStatus")
    def cls_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable access logs, 1 enable, 0 disable.
        """
        return pulumi.get(self, "cls_status")

    @cls_status.setter
    def cls_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cls_status", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        Domain id.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[int]]:
        """
        Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22: Rule Interception&&AI Interception Mode, Default 20.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="flowMode")
    def flow_mode(self) -> Optional[pulumi.Input[int]]:
        """
        WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
        """
        return pulumi.get(self, "flow_mode")

    @flow_mode.setter
    def flow_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flow_mode", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance unique ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="ipHeaders")
    def ip_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        """
        return pulumi.get(self, "ip_headers")

    @ip_headers.setter
    def ip_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_headers", value)

    @property
    @pulumi.getter(name="isCdn")
    def is_cdn(self) -> Optional[pulumi.Input[int]]:
        """
        Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        """
        return pulumi.get(self, "is_cdn")

    @is_cdn.setter
    def is_cdn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_cdn", value)

    @property
    @pulumi.getter(name="loadBalancerSets")
    def load_balancer_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]]]:
        """
        List of bound LB.
        """
        return pulumi.get(self, "load_balancer_sets")

    @load_balancer_sets.setter
    def load_balancer_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClbDomainLoadBalancerSetArgs']]]]):
        pulumi.set(self, "load_balancer_sets", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Regions of LB bound by domain.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Binding status between waf and LB, 0:not bind, 1:binding.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


class ClbDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_type: Optional[pulumi.Input[str]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[int]] = None,
                 flow_mode: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 load_balancer_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClbDomainLoadBalancerSetArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf clb_domain

        ## Example Usage

        ### Create a basic waf clb domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="clb",
            domain="test.com",
            instance_id="waf_2kxtlbky00b2v1fn",
            load_balancer_sets=[tencentcloud.waf.ClbDomainLoadBalancerSetArgs(
                listener_id="lbl-nonkgvc2",
                listener_name="dsadasd",
                load_balancer_id="lb-5dnrkgry",
                load_balancer_name="keep-listener-clb",
                load_balancer_type="OPEN",
                numerical_vpc_id=5232945,
                protocol="HTTP",
                region="gz",
                vip="106.55.220.8",
                vport=80,
                zone="ap-guangzhou-6",
            )],
            region="gz")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf clb domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="clb",
            api_safe_status=1,
            bot_status=1,
            domain="test.com",
            engine=21,
            flow_mode=1,
            instance_id="waf_2kxtlbky00b2v1fn",
            ip_headers=[
                "headers_1",
                "headers_2",
                "headers_3",
            ],
            is_cdn=3,
            load_balancer_sets=[tencentcloud.waf.ClbDomainLoadBalancerSetArgs(
                listener_id="lbl-nonkgvc2",
                listener_name="dsadasd",
                load_balancer_id="lb-5dnrkgry",
                load_balancer_name="keep-listener-clb",
                load_balancer_type="OPEN",
                numerical_vpc_id=5232945,
                protocol="HTTP",
                region="gz",
                vip="106.55.220.8",
                vport=80,
                zone="ap-guangzhou-6",
            )],
            region="gz",
            status=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf tsegw domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="tsegw",
            api_safe_status=0,
            bot_status=0,
            domain="xxx.com",
            engine=12,
            flow_mode=0,
            instance_id="waf_2kxtlbky00b2v1fn",
            is_cdn=0,
            region="gz",
            status=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf apisix domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="apisix",
            api_safe_status=0,
            bot_status=0,
            domain="xxx.com",
            engine=12,
            flow_mode=0,
            instance_id="waf_2kxtlbky00b2v1fn",
            is_cdn=0,
            region="gz",
            status=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf clb_domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/clbDomain:ClbDomain example waf_2kxtlbky00b2v1fn#test.com#waf-0FSehoRU
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alb_type: Load balancer type: clb, apisix or tsegw, default clb.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[int] engine: Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22: Rule Interception&&AI Interception Mode, Default 20.
        :param pulumi.Input[int] flow_mode: WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
        :param pulumi.Input[str] instance_id: Instance unique ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClbDomainLoadBalancerSetArgs']]]] load_balancer_sets: List of bound LB.
        :param pulumi.Input[str] region: Regions of LB bound by domain.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClbDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf clb_domain

        ## Example Usage

        ### Create a basic waf clb domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="clb",
            domain="test.com",
            instance_id="waf_2kxtlbky00b2v1fn",
            load_balancer_sets=[tencentcloud.waf.ClbDomainLoadBalancerSetArgs(
                listener_id="lbl-nonkgvc2",
                listener_name="dsadasd",
                load_balancer_id="lb-5dnrkgry",
                load_balancer_name="keep-listener-clb",
                load_balancer_type="OPEN",
                numerical_vpc_id=5232945,
                protocol="HTTP",
                region="gz",
                vip="106.55.220.8",
                vport=80,
                zone="ap-guangzhou-6",
            )],
            region="gz")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf clb domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="clb",
            api_safe_status=1,
            bot_status=1,
            domain="test.com",
            engine=21,
            flow_mode=1,
            instance_id="waf_2kxtlbky00b2v1fn",
            ip_headers=[
                "headers_1",
                "headers_2",
                "headers_3",
            ],
            is_cdn=3,
            load_balancer_sets=[tencentcloud.waf.ClbDomainLoadBalancerSetArgs(
                listener_id="lbl-nonkgvc2",
                listener_name="dsadasd",
                load_balancer_id="lb-5dnrkgry",
                load_balancer_name="keep-listener-clb",
                load_balancer_type="OPEN",
                numerical_vpc_id=5232945,
                protocol="HTTP",
                region="gz",
                vip="106.55.220.8",
                vport=80,
                zone="ap-guangzhou-6",
            )],
            region="gz",
            status=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf tsegw domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="tsegw",
            api_safe_status=0,
            bot_status=0,
            domain="xxx.com",
            engine=12,
            flow_mode=0,
            instance_id="waf_2kxtlbky00b2v1fn",
            is_cdn=0,
            region="gz",
            status=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf apisix domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.ClbDomain("example",
            alb_type="apisix",
            api_safe_status=0,
            bot_status=0,
            domain="xxx.com",
            engine=12,
            flow_mode=0,
            instance_id="waf_2kxtlbky00b2v1fn",
            is_cdn=0,
            region="gz",
            status=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf clb_domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/clbDomain:ClbDomain example waf_2kxtlbky00b2v1fn#test.com#waf-0FSehoRU
        ```

        :param str resource_name: The name of the resource.
        :param ClbDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClbDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alb_type: Optional[pulumi.Input[str]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[int]] = None,
                 flow_mode: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 load_balancer_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClbDomainLoadBalancerSetArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClbDomainArgs.__new__(ClbDomainArgs)

            __props__.__dict__["alb_type"] = alb_type
            __props__.__dict__["api_safe_status"] = api_safe_status
            __props__.__dict__["bot_status"] = bot_status
            __props__.__dict__["cls_status"] = cls_status
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["engine"] = engine
            __props__.__dict__["flow_mode"] = flow_mode
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["ip_headers"] = ip_headers
            __props__.__dict__["is_cdn"] = is_cdn
            __props__.__dict__["load_balancer_sets"] = load_balancer_sets
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["status"] = status
            __props__.__dict__["domain_id"] = None
        super(ClbDomain, __self__).__init__(
            'tencentcloud:Waf/clbDomain:ClbDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alb_type: Optional[pulumi.Input[str]] = None,
            api_safe_status: Optional[pulumi.Input[int]] = None,
            bot_status: Optional[pulumi.Input[int]] = None,
            cls_status: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            domain_id: Optional[pulumi.Input[str]] = None,
            engine: Optional[pulumi.Input[int]] = None,
            flow_mode: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_cdn: Optional[pulumi.Input[int]] = None,
            load_balancer_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClbDomainLoadBalancerSetArgs']]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None) -> 'ClbDomain':
        """
        Get an existing ClbDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alb_type: Load balancer type: clb, apisix or tsegw, default clb.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[str] domain: Domain name.
        :param pulumi.Input[str] domain_id: Domain id.
        :param pulumi.Input[int] engine: Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22: Rule Interception&&AI Interception Mode, Default 20.
        :param pulumi.Input[int] flow_mode: WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
        :param pulumi.Input[str] instance_id: Instance unique ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClbDomainLoadBalancerSetArgs']]]] load_balancer_sets: List of bound LB.
        :param pulumi.Input[str] region: Regions of LB bound by domain.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClbDomainState.__new__(_ClbDomainState)

        __props__.__dict__["alb_type"] = alb_type
        __props__.__dict__["api_safe_status"] = api_safe_status
        __props__.__dict__["bot_status"] = bot_status
        __props__.__dict__["cls_status"] = cls_status
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["engine"] = engine
        __props__.__dict__["flow_mode"] = flow_mode
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip_headers"] = ip_headers
        __props__.__dict__["is_cdn"] = is_cdn
        __props__.__dict__["load_balancer_sets"] = load_balancer_sets
        __props__.__dict__["region"] = region
        __props__.__dict__["status"] = status
        return ClbDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="albType")
    def alb_type(self) -> pulumi.Output[Optional[str]]:
        """
        Load balancer type: clb, apisix or tsegw, default clb.
        """
        return pulumi.get(self, "alb_type")

    @property
    @pulumi.getter(name="apiSafeStatus")
    def api_safe_status(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable api safe, 1 enable, 0 disable.
        """
        return pulumi.get(self, "api_safe_status")

    @property
    @pulumi.getter(name="botStatus")
    def bot_status(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable bot, 1 enable, 0 disable.
        """
        return pulumi.get(self, "bot_status")

    @property
    @pulumi.getter(name="clsStatus")
    def cls_status(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable access logs, 1 enable, 0 disable.
        """
        return pulumi.get(self, "cls_status")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[str]:
        """
        Domain id.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[Optional[int]]:
        """
        Protection Status: 10: Rule Observation&&AI Off Mode, 11: Rule Observation&&AI Observation Mode, 12: Rule Observation&&AI Interception Mode, 20: Rule Interception&&AI Off Mode, 21: Rule Interception&&AI Observation Mode, 22: Rule Interception&&AI Interception Mode, Default 20.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="flowMode")
    def flow_mode(self) -> pulumi.Output[Optional[int]]:
        """
        WAF traffic mode, 1 cleaning mode, 0 mirroring mode.
        """
        return pulumi.get(self, "flow_mode")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance unique ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipHeaders")
    def ip_headers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        """
        return pulumi.get(self, "ip_headers")

    @property
    @pulumi.getter(name="isCdn")
    def is_cdn(self) -> pulumi.Output[Optional[int]]:
        """
        Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        """
        return pulumi.get(self, "is_cdn")

    @property
    @pulumi.getter(name="loadBalancerSets")
    def load_balancer_sets(self) -> pulumi.Output[Optional[Sequence['outputs.ClbDomainLoadBalancerSet']]]:
        """
        List of bound LB.
        """
        return pulumi.get(self, "load_balancer_sets")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Regions of LB bound by domain.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        Binding status between waf and LB, 0:not bind, 1:binding.
        """
        return pulumi.get(self, "status")

