# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPortsResult',
    'AwaitableGetPortsResult',
    'get_ports',
    'get_ports_output',
]

@pulumi.output_type
class GetPortsResult:
    """
    A collection of values returned by getPorts.
    """
    def __init__(__self__, edition=None, http_ports=None, https_ports=None, id=None, instance_id=None, result_output_file=None):
        if edition and not isinstance(edition, str):
            raise TypeError("Expected argument 'edition' to be a str")
        pulumi.set(__self__, "edition", edition)
        if http_ports and not isinstance(http_ports, list):
            raise TypeError("Expected argument 'http_ports' to be a list")
        pulumi.set(__self__, "http_ports", http_ports)
        if https_ports and not isinstance(https_ports, list):
            raise TypeError("Expected argument 'https_ports' to be a list")
        pulumi.set(__self__, "https_ports", https_ports)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def edition(self) -> Optional[str]:
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="httpPorts")
    def http_ports(self) -> Sequence[str]:
        """
        Http port list for instance.
        """
        return pulumi.get(self, "http_ports")

    @property
    @pulumi.getter(name="httpsPorts")
    def https_ports(self) -> Sequence[str]:
        """
        Https port list for instance.
        """
        return pulumi.get(self, "https_ports")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetPortsResult(GetPortsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortsResult(
            edition=self.edition,
            http_ports=self.http_ports,
            https_ports=self.https_ports,
            id=self.id,
            instance_id=self.instance_id,
            result_output_file=self.result_output_file)


def get_ports(edition: Optional[str] = None,
              instance_id: Optional[str] = None,
              result_output_file: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortsResult:
    """
    Use this data source to query detailed information of waf ports

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_ports()
    ```
    <!--End PulumiCodeChooser -->

    ### Or

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_ports(edition="clb-waf",
        instance_id="waf_2kxtlbky00b2v1fn")
    ```
    <!--End PulumiCodeChooser -->


    :param str edition: Instance type, sparta-waf represents SAAS WAF, clb-waf represents CLB WAF.
    :param str instance_id: Instance unique ID.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['edition'] = edition
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Waf/getPorts:getPorts', __args__, opts=opts, typ=GetPortsResult).value

    return AwaitableGetPortsResult(
        edition=pulumi.get(__ret__, 'edition'),
        http_ports=pulumi.get(__ret__, 'http_ports'),
        https_ports=pulumi.get(__ret__, 'https_ports'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_ports)
def get_ports_output(edition: Optional[pulumi.Input[Optional[str]]] = None,
                     instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPortsResult]:
    """
    Use this data source to query detailed information of waf ports

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_ports()
    ```
    <!--End PulumiCodeChooser -->

    ### Or

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_ports(edition="clb-waf",
        instance_id="waf_2kxtlbky00b2v1fn")
    ```
    <!--End PulumiCodeChooser -->


    :param str edition: Instance type, sparta-waf represents SAAS WAF, clb-waf represents CLB WAF.
    :param str instance_id: Instance unique ID.
    :param str result_output_file: Used to save results.
    """
    ...
