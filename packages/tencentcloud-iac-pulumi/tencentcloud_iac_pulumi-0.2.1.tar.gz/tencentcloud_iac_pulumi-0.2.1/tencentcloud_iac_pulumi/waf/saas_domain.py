# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SaasDomainArgs', 'SaasDomain']

@pulumi.input_type
class SaasDomainArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 ports: pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]],
                 active_check: Optional[pulumi.Input[int]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[int]] = None,
                 cipher_template: Optional[pulumi.Input[int]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 https_rewrite: Optional[pulumi.Input[int]] = None,
                 https_upstream_port: Optional[pulumi.Input[str]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 is_http2: Optional[pulumi.Input[int]] = None,
                 is_keep_alive: Optional[pulumi.Input[str]] = None,
                 is_websocket: Optional[pulumi.Input[int]] = None,
                 load_balance: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_send_timeout: Optional[pulumi.Input[int]] = None,
                 sni_host: Optional[pulumi.Input[str]] = None,
                 sni_type: Optional[pulumi.Input[int]] = None,
                 src_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 tls_version: Optional[pulumi.Input[int]] = None,
                 upstream_domain: Optional[pulumi.Input[str]] = None,
                 upstream_scheme: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[int]] = None,
                 weights: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 xff_reset: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SaasDomain resource.
        :param pulumi.Input[str] domain: Domain names that require defense.
        :param pulumi.Input[str] instance_id: Unique ID of Instance.
        :param pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]] ports: This field needs to be set for multiple ports in the upstream server.
        :param pulumi.Input[int] active_check: Whether to enable active health detection, 0 represents disable and 1 represents enable.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[str] cert: Certificate content, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] cert_type: Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
        :param pulumi.Input[int] cipher_template: Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ciphers: Encryption Suite Information.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[int] https_rewrite: Whether redirect to https, 1 will redirect and 0 will not.
        :param pulumi.Input[str] https_upstream_port: Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[int] is_http2: Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        :param pulumi.Input[str] is_keep_alive: Whether to enable keep-alive, 0 disable, 1 enable.
        :param pulumi.Input[int] is_websocket: Is WebSocket support enabled. 1 means enabled, 0 does not.
        :param pulumi.Input[str] load_balance: Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        :param pulumi.Input[str] private_key: Certificate key, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] proxy_read_timeout: 300s.
        :param pulumi.Input[int] proxy_send_timeout: 300s.
        :param pulumi.Input[str] sni_host: When SniType=3, this parameter needs to be filled in to represent a custom host.
        :param pulumi.Input[int] sni_type: Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_lists: Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        :param pulumi.Input[str] ssl_id: Certificate ID, When CertType=2, this parameter needs to be filled.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        :param pulumi.Input[int] tls_version: Version of TLS Protocol.
        :param pulumi.Input[str] upstream_domain: Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        :param pulumi.Input[str] upstream_scheme: Upstream scheme for https, http or https.
        :param pulumi.Input[int] upstream_type: Upstream type, 0 represents IP, 1 represents domain name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weights: Weight of each upstream.
        :param pulumi.Input[int] xff_reset: 0:disable xff reset; 1:enable xff reset.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ports", ports)
        if active_check is not None:
            pulumi.set(__self__, "active_check", active_check)
        if api_safe_status is not None:
            pulumi.set(__self__, "api_safe_status", api_safe_status)
        if bot_status is not None:
            pulumi.set(__self__, "bot_status", bot_status)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if cipher_template is not None:
            pulumi.set(__self__, "cipher_template", cipher_template)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if cls_status is not None:
            pulumi.set(__self__, "cls_status", cls_status)
        if https_rewrite is not None:
            pulumi.set(__self__, "https_rewrite", https_rewrite)
        if https_upstream_port is not None:
            pulumi.set(__self__, "https_upstream_port", https_upstream_port)
        if ip_headers is not None:
            pulumi.set(__self__, "ip_headers", ip_headers)
        if is_cdn is not None:
            pulumi.set(__self__, "is_cdn", is_cdn)
        if is_http2 is not None:
            pulumi.set(__self__, "is_http2", is_http2)
        if is_keep_alive is not None:
            pulumi.set(__self__, "is_keep_alive", is_keep_alive)
        if is_websocket is not None:
            pulumi.set(__self__, "is_websocket", is_websocket)
        if load_balance is not None:
            pulumi.set(__self__, "load_balance", load_balance)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if proxy_read_timeout is not None:
            pulumi.set(__self__, "proxy_read_timeout", proxy_read_timeout)
        if proxy_send_timeout is not None:
            pulumi.set(__self__, "proxy_send_timeout", proxy_send_timeout)
        if sni_host is not None:
            pulumi.set(__self__, "sni_host", sni_host)
        if sni_type is not None:
            pulumi.set(__self__, "sni_type", sni_type)
        if src_lists is not None:
            pulumi.set(__self__, "src_lists", src_lists)
        if ssl_id is not None:
            pulumi.set(__self__, "ssl_id", ssl_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if upstream_domain is not None:
            pulumi.set(__self__, "upstream_domain", upstream_domain)
        if upstream_scheme is not None:
            pulumi.set(__self__, "upstream_scheme", upstream_scheme)
        if upstream_type is not None:
            pulumi.set(__self__, "upstream_type", upstream_type)
        if weights is not None:
            pulumi.set(__self__, "weights", weights)
        if xff_reset is not None:
            pulumi.set(__self__, "xff_reset", xff_reset)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain names that require defense.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Unique ID of Instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]]:
        """
        This field needs to be set for multiple ports in the upstream server.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="activeCheck")
    def active_check(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable active health detection, 0 represents disable and 1 represents enable.
        """
        return pulumi.get(self, "active_check")

    @active_check.setter
    def active_check(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_check", value)

    @property
    @pulumi.getter(name="apiSafeStatus")
    def api_safe_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable api safe, 1 enable, 0 disable.
        """
        return pulumi.get(self, "api_safe_status")

    @api_safe_status.setter
    def api_safe_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_safe_status", value)

    @property
    @pulumi.getter(name="botStatus")
    def bot_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable bot, 1 enable, 0 disable.
        """
        return pulumi.get(self, "bot_status")

    @bot_status.setter
    def bot_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_status", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate content, When CertType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[int]]:
        """
        Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="cipherTemplate")
    def cipher_template(self) -> Optional[pulumi.Input[int]]:
        """
        Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
        """
        return pulumi.get(self, "cipher_template")

    @cipher_template.setter
    def cipher_template(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cipher_template", value)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Encryption Suite Information.
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter(name="clsStatus")
    def cls_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable access logs, 1 enable, 0 disable.
        """
        return pulumi.get(self, "cls_status")

    @cls_status.setter
    def cls_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cls_status", value)

    @property
    @pulumi.getter(name="httpsRewrite")
    def https_rewrite(self) -> Optional[pulumi.Input[int]]:
        """
        Whether redirect to https, 1 will redirect and 0 will not.
        """
        return pulumi.get(self, "https_rewrite")

    @https_rewrite.setter
    def https_rewrite(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_rewrite", value)

    @property
    @pulumi.getter(name="httpsUpstreamPort")
    def https_upstream_port(self) -> Optional[pulumi.Input[str]]:
        """
        Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
        """
        return pulumi.get(self, "https_upstream_port")

    @https_upstream_port.setter
    def https_upstream_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_upstream_port", value)

    @property
    @pulumi.getter(name="ipHeaders")
    def ip_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        """
        return pulumi.get(self, "ip_headers")

    @ip_headers.setter
    def ip_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_headers", value)

    @property
    @pulumi.getter(name="isCdn")
    def is_cdn(self) -> Optional[pulumi.Input[int]]:
        """
        Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        """
        return pulumi.get(self, "is_cdn")

    @is_cdn.setter
    def is_cdn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_cdn", value)

    @property
    @pulumi.getter(name="isHttp2")
    def is_http2(self) -> Optional[pulumi.Input[int]]:
        """
        Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        """
        return pulumi.get(self, "is_http2")

    @is_http2.setter
    def is_http2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_http2", value)

    @property
    @pulumi.getter(name="isKeepAlive")
    def is_keep_alive(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable keep-alive, 0 disable, 1 enable.
        """
        return pulumi.get(self, "is_keep_alive")

    @is_keep_alive.setter
    def is_keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_keep_alive", value)

    @property
    @pulumi.getter(name="isWebsocket")
    def is_websocket(self) -> Optional[pulumi.Input[int]]:
        """
        Is WebSocket support enabled. 1 means enabled, 0 does not.
        """
        return pulumi.get(self, "is_websocket")

    @is_websocket.setter
    def is_websocket(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_websocket", value)

    @property
    @pulumi.getter(name="loadBalance")
    def load_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        """
        return pulumi.get(self, "load_balance")

    @load_balance.setter
    def load_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate key, When CertType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        300s.
        """
        return pulumi.get(self, "proxy_read_timeout")

    @proxy_read_timeout.setter
    def proxy_read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_read_timeout", value)

    @property
    @pulumi.getter(name="proxySendTimeout")
    def proxy_send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        300s.
        """
        return pulumi.get(self, "proxy_send_timeout")

    @proxy_send_timeout.setter
    def proxy_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_send_timeout", value)

    @property
    @pulumi.getter(name="sniHost")
    def sni_host(self) -> Optional[pulumi.Input[str]]:
        """
        When SniType=3, this parameter needs to be filled in to represent a custom host.
        """
        return pulumi.get(self, "sni_host")

    @sni_host.setter
    def sni_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_host", value)

    @property
    @pulumi.getter(name="sniType")
    def sni_type(self) -> Optional[pulumi.Input[int]]:
        """
        Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
        """
        return pulumi.get(self, "sni_type")

    @sni_type.setter
    def sni_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sni_type", value)

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        """
        return pulumi.get(self, "src_lists")

    @src_lists.setter
    def src_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_lists", value)

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID, When CertType=2, this parameter needs to be filled.
        """
        return pulumi.get(self, "ssl_id")

    @ssl_id.setter
    def ssl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Binding status between waf and LB, 0:not bind, 1:binding.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[pulumi.Input[int]]:
        """
        Version of TLS Protocol.
        """
        return pulumi.get(self, "tls_version")

    @tls_version.setter
    def tls_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tls_version", value)

    @property
    @pulumi.getter(name="upstreamDomain")
    def upstream_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "upstream_domain")

    @upstream_domain.setter
    def upstream_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_domain", value)

    @property
    @pulumi.getter(name="upstreamScheme")
    def upstream_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Upstream scheme for https, http or https.
        """
        return pulumi.get(self, "upstream_scheme")

    @upstream_scheme.setter
    def upstream_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_scheme", value)

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> Optional[pulumi.Input[int]]:
        """
        Upstream type, 0 represents IP, 1 represents domain name.
        """
        return pulumi.get(self, "upstream_type")

    @upstream_type.setter
    def upstream_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upstream_type", value)

    @property
    @pulumi.getter
    def weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Weight of each upstream.
        """
        return pulumi.get(self, "weights")

    @weights.setter
    def weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "weights", value)

    @property
    @pulumi.getter(name="xffReset")
    def xff_reset(self) -> Optional[pulumi.Input[int]]:
        """
        0:disable xff reset; 1:enable xff reset.
        """
        return pulumi.get(self, "xff_reset")

    @xff_reset.setter
    def xff_reset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "xff_reset", value)


@pulumi.input_type
class _SaasDomainState:
    def __init__(__self__, *,
                 active_check: Optional[pulumi.Input[int]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[int]] = None,
                 cipher_template: Optional[pulumi.Input[int]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_id: Optional[pulumi.Input[str]] = None,
                 https_rewrite: Optional[pulumi.Input[int]] = None,
                 https_upstream_port: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 is_http2: Optional[pulumi.Input[int]] = None,
                 is_keep_alive: Optional[pulumi.Input[str]] = None,
                 is_websocket: Optional[pulumi.Input[int]] = None,
                 load_balance: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_send_timeout: Optional[pulumi.Input[int]] = None,
                 sni_host: Optional[pulumi.Input[str]] = None,
                 sni_type: Optional[pulumi.Input[int]] = None,
                 src_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 tls_version: Optional[pulumi.Input[int]] = None,
                 upstream_domain: Optional[pulumi.Input[str]] = None,
                 upstream_scheme: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[int]] = None,
                 weights: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 xff_reset: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SaasDomain resources.
        :param pulumi.Input[int] active_check: Whether to enable active health detection, 0 represents disable and 1 represents enable.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[str] cert: Certificate content, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] cert_type: Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
        :param pulumi.Input[int] cipher_template: Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ciphers: Encryption Suite Information.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[str] domain: Domain names that require defense.
        :param pulumi.Input[str] domain_id: Domain id.
        :param pulumi.Input[int] https_rewrite: Whether redirect to https, 1 will redirect and 0 will not.
        :param pulumi.Input[str] https_upstream_port: Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
        :param pulumi.Input[str] instance_id: Unique ID of Instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[int] is_http2: Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        :param pulumi.Input[str] is_keep_alive: Whether to enable keep-alive, 0 disable, 1 enable.
        :param pulumi.Input[int] is_websocket: Is WebSocket support enabled. 1 means enabled, 0 does not.
        :param pulumi.Input[str] load_balance: Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        :param pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]] ports: This field needs to be set for multiple ports in the upstream server.
        :param pulumi.Input[str] private_key: Certificate key, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] proxy_read_timeout: 300s.
        :param pulumi.Input[int] proxy_send_timeout: 300s.
        :param pulumi.Input[str] sni_host: When SniType=3, this parameter needs to be filled in to represent a custom host.
        :param pulumi.Input[int] sni_type: Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_lists: Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        :param pulumi.Input[str] ssl_id: Certificate ID, When CertType=2, this parameter needs to be filled.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        :param pulumi.Input[int] tls_version: Version of TLS Protocol.
        :param pulumi.Input[str] upstream_domain: Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        :param pulumi.Input[str] upstream_scheme: Upstream scheme for https, http or https.
        :param pulumi.Input[int] upstream_type: Upstream type, 0 represents IP, 1 represents domain name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weights: Weight of each upstream.
        :param pulumi.Input[int] xff_reset: 0:disable xff reset; 1:enable xff reset.
        """
        if active_check is not None:
            pulumi.set(__self__, "active_check", active_check)
        if api_safe_status is not None:
            pulumi.set(__self__, "api_safe_status", api_safe_status)
        if bot_status is not None:
            pulumi.set(__self__, "bot_status", bot_status)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if cipher_template is not None:
            pulumi.set(__self__, "cipher_template", cipher_template)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if cls_status is not None:
            pulumi.set(__self__, "cls_status", cls_status)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)
        if https_rewrite is not None:
            pulumi.set(__self__, "https_rewrite", https_rewrite)
        if https_upstream_port is not None:
            pulumi.set(__self__, "https_upstream_port", https_upstream_port)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_headers is not None:
            pulumi.set(__self__, "ip_headers", ip_headers)
        if is_cdn is not None:
            pulumi.set(__self__, "is_cdn", is_cdn)
        if is_http2 is not None:
            pulumi.set(__self__, "is_http2", is_http2)
        if is_keep_alive is not None:
            pulumi.set(__self__, "is_keep_alive", is_keep_alive)
        if is_websocket is not None:
            pulumi.set(__self__, "is_websocket", is_websocket)
        if load_balance is not None:
            pulumi.set(__self__, "load_balance", load_balance)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if proxy_read_timeout is not None:
            pulumi.set(__self__, "proxy_read_timeout", proxy_read_timeout)
        if proxy_send_timeout is not None:
            pulumi.set(__self__, "proxy_send_timeout", proxy_send_timeout)
        if sni_host is not None:
            pulumi.set(__self__, "sni_host", sni_host)
        if sni_type is not None:
            pulumi.set(__self__, "sni_type", sni_type)
        if src_lists is not None:
            pulumi.set(__self__, "src_lists", src_lists)
        if ssl_id is not None:
            pulumi.set(__self__, "ssl_id", ssl_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tls_version is not None:
            pulumi.set(__self__, "tls_version", tls_version)
        if upstream_domain is not None:
            pulumi.set(__self__, "upstream_domain", upstream_domain)
        if upstream_scheme is not None:
            pulumi.set(__self__, "upstream_scheme", upstream_scheme)
        if upstream_type is not None:
            pulumi.set(__self__, "upstream_type", upstream_type)
        if weights is not None:
            pulumi.set(__self__, "weights", weights)
        if xff_reset is not None:
            pulumi.set(__self__, "xff_reset", xff_reset)

    @property
    @pulumi.getter(name="activeCheck")
    def active_check(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable active health detection, 0 represents disable and 1 represents enable.
        """
        return pulumi.get(self, "active_check")

    @active_check.setter
    def active_check(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_check", value)

    @property
    @pulumi.getter(name="apiSafeStatus")
    def api_safe_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable api safe, 1 enable, 0 disable.
        """
        return pulumi.get(self, "api_safe_status")

    @api_safe_status.setter
    def api_safe_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "api_safe_status", value)

    @property
    @pulumi.getter(name="botStatus")
    def bot_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable bot, 1 enable, 0 disable.
        """
        return pulumi.get(self, "bot_status")

    @bot_status.setter
    def bot_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bot_status", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate content, When CertType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[int]]:
        """
        Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="cipherTemplate")
    def cipher_template(self) -> Optional[pulumi.Input[int]]:
        """
        Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
        """
        return pulumi.get(self, "cipher_template")

    @cipher_template.setter
    def cipher_template(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cipher_template", value)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Encryption Suite Information.
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter(name="clsStatus")
    def cls_status(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable access logs, 1 enable, 0 disable.
        """
        return pulumi.get(self, "cls_status")

    @cls_status.setter
    def cls_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cls_status", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain names that require defense.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[pulumi.Input[str]]:
        """
        Domain id.
        """
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="httpsRewrite")
    def https_rewrite(self) -> Optional[pulumi.Input[int]]:
        """
        Whether redirect to https, 1 will redirect and 0 will not.
        """
        return pulumi.get(self, "https_rewrite")

    @https_rewrite.setter
    def https_rewrite(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_rewrite", value)

    @property
    @pulumi.getter(name="httpsUpstreamPort")
    def https_upstream_port(self) -> Optional[pulumi.Input[str]]:
        """
        Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
        """
        return pulumi.get(self, "https_upstream_port")

    @https_upstream_port.setter
    def https_upstream_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_upstream_port", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique ID of Instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="ipHeaders")
    def ip_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        """
        return pulumi.get(self, "ip_headers")

    @ip_headers.setter
    def ip_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_headers", value)

    @property
    @pulumi.getter(name="isCdn")
    def is_cdn(self) -> Optional[pulumi.Input[int]]:
        """
        Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        """
        return pulumi.get(self, "is_cdn")

    @is_cdn.setter
    def is_cdn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_cdn", value)

    @property
    @pulumi.getter(name="isHttp2")
    def is_http2(self) -> Optional[pulumi.Input[int]]:
        """
        Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        """
        return pulumi.get(self, "is_http2")

    @is_http2.setter
    def is_http2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_http2", value)

    @property
    @pulumi.getter(name="isKeepAlive")
    def is_keep_alive(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable keep-alive, 0 disable, 1 enable.
        """
        return pulumi.get(self, "is_keep_alive")

    @is_keep_alive.setter
    def is_keep_alive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_keep_alive", value)

    @property
    @pulumi.getter(name="isWebsocket")
    def is_websocket(self) -> Optional[pulumi.Input[int]]:
        """
        Is WebSocket support enabled. 1 means enabled, 0 does not.
        """
        return pulumi.get(self, "is_websocket")

    @is_websocket.setter
    def is_websocket(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_websocket", value)

    @property
    @pulumi.getter(name="loadBalance")
    def load_balance(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        """
        return pulumi.get(self, "load_balance")

    @load_balance.setter
    def load_balance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balance", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]]]:
        """
        This field needs to be set for multiple ports in the upstream server.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SaasDomainPortArgs']]]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate key, When CertType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        300s.
        """
        return pulumi.get(self, "proxy_read_timeout")

    @proxy_read_timeout.setter
    def proxy_read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_read_timeout", value)

    @property
    @pulumi.getter(name="proxySendTimeout")
    def proxy_send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        300s.
        """
        return pulumi.get(self, "proxy_send_timeout")

    @proxy_send_timeout.setter
    def proxy_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proxy_send_timeout", value)

    @property
    @pulumi.getter(name="sniHost")
    def sni_host(self) -> Optional[pulumi.Input[str]]:
        """
        When SniType=3, this parameter needs to be filled in to represent a custom host.
        """
        return pulumi.get(self, "sni_host")

    @sni_host.setter
    def sni_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_host", value)

    @property
    @pulumi.getter(name="sniType")
    def sni_type(self) -> Optional[pulumi.Input[int]]:
        """
        Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
        """
        return pulumi.get(self, "sni_type")

    @sni_type.setter
    def sni_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sni_type", value)

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        """
        return pulumi.get(self, "src_lists")

    @src_lists.setter
    def src_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_lists", value)

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID, When CertType=2, this parameter needs to be filled.
        """
        return pulumi.get(self, "ssl_id")

    @ssl_id.setter
    def ssl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Binding status between waf and LB, 0:not bind, 1:binding.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> Optional[pulumi.Input[int]]:
        """
        Version of TLS Protocol.
        """
        return pulumi.get(self, "tls_version")

    @tls_version.setter
    def tls_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tls_version", value)

    @property
    @pulumi.getter(name="upstreamDomain")
    def upstream_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "upstream_domain")

    @upstream_domain.setter
    def upstream_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_domain", value)

    @property
    @pulumi.getter(name="upstreamScheme")
    def upstream_scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Upstream scheme for https, http or https.
        """
        return pulumi.get(self, "upstream_scheme")

    @upstream_scheme.setter
    def upstream_scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_scheme", value)

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> Optional[pulumi.Input[int]]:
        """
        Upstream type, 0 represents IP, 1 represents domain name.
        """
        return pulumi.get(self, "upstream_type")

    @upstream_type.setter
    def upstream_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "upstream_type", value)

    @property
    @pulumi.getter
    def weights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Weight of each upstream.
        """
        return pulumi.get(self, "weights")

    @weights.setter
    def weights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "weights", value)

    @property
    @pulumi.getter(name="xffReset")
    def xff_reset(self) -> Optional[pulumi.Input[int]]:
        """
        0:disable xff reset; 1:enable xff reset.
        """
        return pulumi.get(self, "xff_reset")

    @xff_reset.setter
    def xff_reset(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "xff_reset", value)


class SaasDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_check: Optional[pulumi.Input[int]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[int]] = None,
                 cipher_template: Optional[pulumi.Input[int]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 https_rewrite: Optional[pulumi.Input[int]] = None,
                 https_upstream_port: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 is_http2: Optional[pulumi.Input[int]] = None,
                 is_keep_alive: Optional[pulumi.Input[str]] = None,
                 is_websocket: Optional[pulumi.Input[int]] = None,
                 load_balance: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SaasDomainPortArgs']]]]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_send_timeout: Optional[pulumi.Input[int]] = None,
                 sni_host: Optional[pulumi.Input[str]] = None,
                 sni_type: Optional[pulumi.Input[int]] = None,
                 src_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 tls_version: Optional[pulumi.Input[int]] = None,
                 upstream_domain: Optional[pulumi.Input[str]] = None,
                 upstream_scheme: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[int]] = None,
                 weights: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 xff_reset: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf saas_domain

        ## Example Usage

        ### If upstream_type is 0

        Create a basic waf saas domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            domain="tf.example.com",
            instance_id="waf_2kxtlbky01b3wceb",
            ports=[tencentcloud.waf.SaasDomainPortArgs(
                port="80",
                protocol="http",
                upstream_port="80",
                upstream_protocol="http",
            )],
            src_lists=["1.1.1.1"])
        ```
        <!--End PulumiCodeChooser -->

        ### Create a load balancing strategy is weighted polling saas domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            domain="tf.example.com",
            instance_id="waf_2kxtlbky01b3wceb",
            load_balance="2",
            ports=[tencentcloud.waf.SaasDomainPortArgs(
                port="80",
                protocol="http",
                upstream_port="80",
                upstream_protocol="http",
            )],
            src_lists=[
                "1.1.1.1",
                "2.2.2.2",
            ],
            weights=[
                30,
                50,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ### If upstream_type is 1

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            domain="tf.example.com",
            instance_id="waf_2kxtlbky01b3wceb",
            ports=[tencentcloud.waf.SaasDomainPortArgs(
                port="80",
                protocol="http",
                upstream_port="80",
                upstream_protocol="http",
            )],
            upstream_domain="test.com",
            upstream_type=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a waf saas domain with set Http&Https

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            cert_type=2,
            domain="tf.example.com",
            https_rewrite=1,
            instance_id="waf_2kxtlbky01b3wceb",
            ip_headers=[
                "headers_1",
                "headers_2",
                "headers_3",
            ],
            is_cdn=3,
            load_balance="2",
            ports=[
                tencentcloud.waf.SaasDomainPortArgs(
                    port="80",
                    protocol="http",
                    upstream_port="80",
                    upstream_protocol="http",
                ),
                tencentcloud.waf.SaasDomainPortArgs(
                    port="443",
                    protocol="https",
                    upstream_port="443",
                    upstream_protocol="https",
                ),
            ],
            src_lists=[
                "1.1.1.1",
                "2.2.2.2",
            ],
            ssl_id="3a6B5y8v",
            upstream_scheme="https",
            weights=[
                50,
                60,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf saas domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            active_check=1,
            api_safe_status=1,
            bot_status=1,
            cert_type=2,
            cipher_template=1,
            domain="tf.example.com",
            https_rewrite=1,
            instance_id="waf_2kxtlbky01b3wceb",
            ip_headers=[
                "headers_1",
                "headers_2",
                "headers_3",
            ],
            is_cdn=3,
            is_http2=1,
            is_keep_alive="1",
            load_balance="2",
            ports=[
                tencentcloud.waf.SaasDomainPortArgs(
                    port="80",
                    protocol="http",
                    upstream_port="80",
                    upstream_protocol="http",
                ),
                tencentcloud.waf.SaasDomainPortArgs(
                    port="443",
                    protocol="https",
                    upstream_port="443",
                    upstream_protocol="https",
                ),
            ],
            proxy_read_timeout=500,
            proxy_send_timeout=500,
            sni_host="3.3.3.3",
            sni_type=3,
            src_lists=[
                "1.1.1.1",
                "2.2.2.2",
            ],
            ssl_id="3a6B5y8v",
            tls_version=3,
            upstream_scheme="https",
            weights=[
                50,
                60,
            ],
            xff_reset=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf saas_domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/saasDomain:SaasDomain example waf_2kxtlbky01b3wceb#tf.example.com#9647c91da0aa5f5aaa49d0ca40e2af24
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] active_check: Whether to enable active health detection, 0 represents disable and 1 represents enable.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[str] cert: Certificate content, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] cert_type: Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
        :param pulumi.Input[int] cipher_template: Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ciphers: Encryption Suite Information.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[str] domain: Domain names that require defense.
        :param pulumi.Input[int] https_rewrite: Whether redirect to https, 1 will redirect and 0 will not.
        :param pulumi.Input[str] https_upstream_port: Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
        :param pulumi.Input[str] instance_id: Unique ID of Instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[int] is_http2: Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        :param pulumi.Input[str] is_keep_alive: Whether to enable keep-alive, 0 disable, 1 enable.
        :param pulumi.Input[int] is_websocket: Is WebSocket support enabled. 1 means enabled, 0 does not.
        :param pulumi.Input[str] load_balance: Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SaasDomainPortArgs']]]] ports: This field needs to be set for multiple ports in the upstream server.
        :param pulumi.Input[str] private_key: Certificate key, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] proxy_read_timeout: 300s.
        :param pulumi.Input[int] proxy_send_timeout: 300s.
        :param pulumi.Input[str] sni_host: When SniType=3, this parameter needs to be filled in to represent a custom host.
        :param pulumi.Input[int] sni_type: Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_lists: Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        :param pulumi.Input[str] ssl_id: Certificate ID, When CertType=2, this parameter needs to be filled.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        :param pulumi.Input[int] tls_version: Version of TLS Protocol.
        :param pulumi.Input[str] upstream_domain: Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        :param pulumi.Input[str] upstream_scheme: Upstream scheme for https, http or https.
        :param pulumi.Input[int] upstream_type: Upstream type, 0 represents IP, 1 represents domain name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weights: Weight of each upstream.
        :param pulumi.Input[int] xff_reset: 0:disable xff reset; 1:enable xff reset.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SaasDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf saas_domain

        ## Example Usage

        ### If upstream_type is 0

        Create a basic waf saas domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            domain="tf.example.com",
            instance_id="waf_2kxtlbky01b3wceb",
            ports=[tencentcloud.waf.SaasDomainPortArgs(
                port="80",
                protocol="http",
                upstream_port="80",
                upstream_protocol="http",
            )],
            src_lists=["1.1.1.1"])
        ```
        <!--End PulumiCodeChooser -->

        ### Create a load balancing strategy is weighted polling saas domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            domain="tf.example.com",
            instance_id="waf_2kxtlbky01b3wceb",
            load_balance="2",
            ports=[tencentcloud.waf.SaasDomainPortArgs(
                port="80",
                protocol="http",
                upstream_port="80",
                upstream_protocol="http",
            )],
            src_lists=[
                "1.1.1.1",
                "2.2.2.2",
            ],
            weights=[
                30,
                50,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ### If upstream_type is 1

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            domain="tf.example.com",
            instance_id="waf_2kxtlbky01b3wceb",
            ports=[tencentcloud.waf.SaasDomainPortArgs(
                port="80",
                protocol="http",
                upstream_port="80",
                upstream_protocol="http",
            )],
            upstream_domain="test.com",
            upstream_type=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a waf saas domain with set Http&Https

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            cert_type=2,
            domain="tf.example.com",
            https_rewrite=1,
            instance_id="waf_2kxtlbky01b3wceb",
            ip_headers=[
                "headers_1",
                "headers_2",
                "headers_3",
            ],
            is_cdn=3,
            load_balance="2",
            ports=[
                tencentcloud.waf.SaasDomainPortArgs(
                    port="80",
                    protocol="http",
                    upstream_port="80",
                    upstream_protocol="http",
                ),
                tencentcloud.waf.SaasDomainPortArgs(
                    port="443",
                    protocol="https",
                    upstream_port="443",
                    upstream_protocol="https",
                ),
            ],
            src_lists=[
                "1.1.1.1",
                "2.2.2.2",
            ],
            ssl_id="3a6B5y8v",
            upstream_scheme="https",
            weights=[
                50,
                60,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete waf saas domain

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.SaasDomain("example",
            active_check=1,
            api_safe_status=1,
            bot_status=1,
            cert_type=2,
            cipher_template=1,
            domain="tf.example.com",
            https_rewrite=1,
            instance_id="waf_2kxtlbky01b3wceb",
            ip_headers=[
                "headers_1",
                "headers_2",
                "headers_3",
            ],
            is_cdn=3,
            is_http2=1,
            is_keep_alive="1",
            load_balance="2",
            ports=[
                tencentcloud.waf.SaasDomainPortArgs(
                    port="80",
                    protocol="http",
                    upstream_port="80",
                    upstream_protocol="http",
                ),
                tencentcloud.waf.SaasDomainPortArgs(
                    port="443",
                    protocol="https",
                    upstream_port="443",
                    upstream_protocol="https",
                ),
            ],
            proxy_read_timeout=500,
            proxy_send_timeout=500,
            sni_host="3.3.3.3",
            sni_type=3,
            src_lists=[
                "1.1.1.1",
                "2.2.2.2",
            ],
            ssl_id="3a6B5y8v",
            tls_version=3,
            upstream_scheme="https",
            weights=[
                50,
                60,
            ],
            xff_reset=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf saas_domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/saasDomain:SaasDomain example waf_2kxtlbky01b3wceb#tf.example.com#9647c91da0aa5f5aaa49d0ca40e2af24
        ```

        :param str resource_name: The name of the resource.
        :param SaasDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SaasDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 active_check: Optional[pulumi.Input[int]] = None,
                 api_safe_status: Optional[pulumi.Input[int]] = None,
                 bot_status: Optional[pulumi.Input[int]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_type: Optional[pulumi.Input[int]] = None,
                 cipher_template: Optional[pulumi.Input[int]] = None,
                 ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 cls_status: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 https_rewrite: Optional[pulumi.Input[int]] = None,
                 https_upstream_port: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_cdn: Optional[pulumi.Input[int]] = None,
                 is_http2: Optional[pulumi.Input[int]] = None,
                 is_keep_alive: Optional[pulumi.Input[str]] = None,
                 is_websocket: Optional[pulumi.Input[int]] = None,
                 load_balance: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SaasDomainPortArgs']]]]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 proxy_read_timeout: Optional[pulumi.Input[int]] = None,
                 proxy_send_timeout: Optional[pulumi.Input[int]] = None,
                 sni_host: Optional[pulumi.Input[str]] = None,
                 sni_type: Optional[pulumi.Input[int]] = None,
                 src_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 tls_version: Optional[pulumi.Input[int]] = None,
                 upstream_domain: Optional[pulumi.Input[str]] = None,
                 upstream_scheme: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[int]] = None,
                 weights: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 xff_reset: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SaasDomainArgs.__new__(SaasDomainArgs)

            __props__.__dict__["active_check"] = active_check
            __props__.__dict__["api_safe_status"] = api_safe_status
            __props__.__dict__["bot_status"] = bot_status
            __props__.__dict__["cert"] = cert
            __props__.__dict__["cert_type"] = cert_type
            __props__.__dict__["cipher_template"] = cipher_template
            __props__.__dict__["ciphers"] = ciphers
            __props__.__dict__["cls_status"] = cls_status
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["https_rewrite"] = https_rewrite
            __props__.__dict__["https_upstream_port"] = https_upstream_port
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["ip_headers"] = ip_headers
            __props__.__dict__["is_cdn"] = is_cdn
            __props__.__dict__["is_http2"] = is_http2
            __props__.__dict__["is_keep_alive"] = is_keep_alive
            __props__.__dict__["is_websocket"] = is_websocket
            __props__.__dict__["load_balance"] = load_balance
            if ports is None and not opts.urn:
                raise TypeError("Missing required property 'ports'")
            __props__.__dict__["ports"] = ports
            __props__.__dict__["private_key"] = private_key
            __props__.__dict__["proxy_read_timeout"] = proxy_read_timeout
            __props__.__dict__["proxy_send_timeout"] = proxy_send_timeout
            __props__.__dict__["sni_host"] = sni_host
            __props__.__dict__["sni_type"] = sni_type
            __props__.__dict__["src_lists"] = src_lists
            __props__.__dict__["ssl_id"] = ssl_id
            __props__.__dict__["status"] = status
            __props__.__dict__["tls_version"] = tls_version
            __props__.__dict__["upstream_domain"] = upstream_domain
            __props__.__dict__["upstream_scheme"] = upstream_scheme
            __props__.__dict__["upstream_type"] = upstream_type
            __props__.__dict__["weights"] = weights
            __props__.__dict__["xff_reset"] = xff_reset
            __props__.__dict__["domain_id"] = None
        super(SaasDomain, __self__).__init__(
            'tencentcloud:Waf/saasDomain:SaasDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            active_check: Optional[pulumi.Input[int]] = None,
            api_safe_status: Optional[pulumi.Input[int]] = None,
            bot_status: Optional[pulumi.Input[int]] = None,
            cert: Optional[pulumi.Input[str]] = None,
            cert_type: Optional[pulumi.Input[int]] = None,
            cipher_template: Optional[pulumi.Input[int]] = None,
            ciphers: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            cls_status: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            domain_id: Optional[pulumi.Input[str]] = None,
            https_rewrite: Optional[pulumi.Input[int]] = None,
            https_upstream_port: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            ip_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_cdn: Optional[pulumi.Input[int]] = None,
            is_http2: Optional[pulumi.Input[int]] = None,
            is_keep_alive: Optional[pulumi.Input[str]] = None,
            is_websocket: Optional[pulumi.Input[int]] = None,
            load_balance: Optional[pulumi.Input[str]] = None,
            ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SaasDomainPortArgs']]]]] = None,
            private_key: Optional[pulumi.Input[str]] = None,
            proxy_read_timeout: Optional[pulumi.Input[int]] = None,
            proxy_send_timeout: Optional[pulumi.Input[int]] = None,
            sni_host: Optional[pulumi.Input[str]] = None,
            sni_type: Optional[pulumi.Input[int]] = None,
            src_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ssl_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            tls_version: Optional[pulumi.Input[int]] = None,
            upstream_domain: Optional[pulumi.Input[str]] = None,
            upstream_scheme: Optional[pulumi.Input[str]] = None,
            upstream_type: Optional[pulumi.Input[int]] = None,
            weights: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            xff_reset: Optional[pulumi.Input[int]] = None) -> 'SaasDomain':
        """
        Get an existing SaasDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] active_check: Whether to enable active health detection, 0 represents disable and 1 represents enable.
        :param pulumi.Input[int] api_safe_status: Whether to enable api safe, 1 enable, 0 disable.
        :param pulumi.Input[int] bot_status: Whether to enable bot, 1 enable, 0 disable.
        :param pulumi.Input[str] cert: Certificate content, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] cert_type: Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
        :param pulumi.Input[int] cipher_template: Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ciphers: Encryption Suite Information.
        :param pulumi.Input[int] cls_status: Whether to enable access logs, 1 enable, 0 disable.
        :param pulumi.Input[str] domain: Domain names that require defense.
        :param pulumi.Input[str] domain_id: Domain id.
        :param pulumi.Input[int] https_rewrite: Whether redirect to https, 1 will redirect and 0 will not.
        :param pulumi.Input[str] https_upstream_port: Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
        :param pulumi.Input[str] instance_id: Unique ID of Instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_headers: When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        :param pulumi.Input[int] is_cdn: Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        :param pulumi.Input[int] is_http2: Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        :param pulumi.Input[str] is_keep_alive: Whether to enable keep-alive, 0 disable, 1 enable.
        :param pulumi.Input[int] is_websocket: Is WebSocket support enabled. 1 means enabled, 0 does not.
        :param pulumi.Input[str] load_balance: Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SaasDomainPortArgs']]]] ports: This field needs to be set for multiple ports in the upstream server.
        :param pulumi.Input[str] private_key: Certificate key, When CertType=1, this parameter needs to be filled.
        :param pulumi.Input[int] proxy_read_timeout: 300s.
        :param pulumi.Input[int] proxy_send_timeout: 300s.
        :param pulumi.Input[str] sni_host: When SniType=3, this parameter needs to be filled in to represent a custom host.
        :param pulumi.Input[int] sni_type: Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_lists: Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        :param pulumi.Input[str] ssl_id: Certificate ID, When CertType=2, this parameter needs to be filled.
        :param pulumi.Input[int] status: Binding status between waf and LB, 0:not bind, 1:binding.
        :param pulumi.Input[int] tls_version: Version of TLS Protocol.
        :param pulumi.Input[str] upstream_domain: Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        :param pulumi.Input[str] upstream_scheme: Upstream scheme for https, http or https.
        :param pulumi.Input[int] upstream_type: Upstream type, 0 represents IP, 1 represents domain name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] weights: Weight of each upstream.
        :param pulumi.Input[int] xff_reset: 0:disable xff reset; 1:enable xff reset.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SaasDomainState.__new__(_SaasDomainState)

        __props__.__dict__["active_check"] = active_check
        __props__.__dict__["api_safe_status"] = api_safe_status
        __props__.__dict__["bot_status"] = bot_status
        __props__.__dict__["cert"] = cert
        __props__.__dict__["cert_type"] = cert_type
        __props__.__dict__["cipher_template"] = cipher_template
        __props__.__dict__["ciphers"] = ciphers
        __props__.__dict__["cls_status"] = cls_status
        __props__.__dict__["domain"] = domain
        __props__.__dict__["domain_id"] = domain_id
        __props__.__dict__["https_rewrite"] = https_rewrite
        __props__.__dict__["https_upstream_port"] = https_upstream_port
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip_headers"] = ip_headers
        __props__.__dict__["is_cdn"] = is_cdn
        __props__.__dict__["is_http2"] = is_http2
        __props__.__dict__["is_keep_alive"] = is_keep_alive
        __props__.__dict__["is_websocket"] = is_websocket
        __props__.__dict__["load_balance"] = load_balance
        __props__.__dict__["ports"] = ports
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["proxy_read_timeout"] = proxy_read_timeout
        __props__.__dict__["proxy_send_timeout"] = proxy_send_timeout
        __props__.__dict__["sni_host"] = sni_host
        __props__.__dict__["sni_type"] = sni_type
        __props__.__dict__["src_lists"] = src_lists
        __props__.__dict__["ssl_id"] = ssl_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tls_version"] = tls_version
        __props__.__dict__["upstream_domain"] = upstream_domain
        __props__.__dict__["upstream_scheme"] = upstream_scheme
        __props__.__dict__["upstream_type"] = upstream_type
        __props__.__dict__["weights"] = weights
        __props__.__dict__["xff_reset"] = xff_reset
        return SaasDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activeCheck")
    def active_check(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable active health detection, 0 represents disable and 1 represents enable.
        """
        return pulumi.get(self, "active_check")

    @property
    @pulumi.getter(name="apiSafeStatus")
    def api_safe_status(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable api safe, 1 enable, 0 disable.
        """
        return pulumi.get(self, "api_safe_status")

    @property
    @pulumi.getter(name="botStatus")
    def bot_status(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable bot, 1 enable, 0 disable.
        """
        return pulumi.get(self, "bot_status")

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate content, When CertType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Output[Optional[int]]:
        """
        Certificate type, 0 represents no certificate, CertType=1 represents self owned certificate, and 2 represents managed certificate.
        """
        return pulumi.get(self, "cert_type")

    @property
    @pulumi.getter(name="cipherTemplate")
    def cipher_template(self) -> pulumi.Output[Optional[int]]:
        """
        Encryption Suite Template, 0:default  1:Universal template 2:Security template 3:Custom template.
        """
        return pulumi.get(self, "cipher_template")

    @property
    @pulumi.getter
    def ciphers(self) -> pulumi.Output[Sequence[int]]:
        """
        Encryption Suite Information.
        """
        return pulumi.get(self, "ciphers")

    @property
    @pulumi.getter(name="clsStatus")
    def cls_status(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable access logs, 1 enable, 0 disable.
        """
        return pulumi.get(self, "cls_status")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain names that require defense.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[str]:
        """
        Domain id.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="httpsRewrite")
    def https_rewrite(self) -> pulumi.Output[Optional[int]]:
        """
        Whether redirect to https, 1 will redirect and 0 will not.
        """
        return pulumi.get(self, "https_rewrite")

    @property
    @pulumi.getter(name="httpsUpstreamPort")
    def https_upstream_port(self) -> pulumi.Output[Optional[str]]:
        """
        Upstream port for https, When listen ports has https port and UpstreamScheme is HTTP, the current field needs to be filled.
        """
        return pulumi.get(self, "https_upstream_port")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Unique ID of Instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="ipHeaders")
    def ip_headers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        When is_cdn=3, this parameter needs to be filled in to indicate a custom header.
        """
        return pulumi.get(self, "ip_headers")

    @property
    @pulumi.getter(name="isCdn")
    def is_cdn(self) -> pulumi.Output[Optional[int]]:
        """
        Whether a proxy has been enabled before WAF, 0 no deployment, 1 deployment and use first IP in X-Forwarded-For as client IP, 2 deployment and use remote_addr as client IP, 3 deployment and use values of custom headers as client IP.
        """
        return pulumi.get(self, "is_cdn")

    @property
    @pulumi.getter(name="isHttp2")
    def is_http2(self) -> pulumi.Output[Optional[int]]:
        """
        Whether enable HTTP2, Enabling HTTP2 requires HTTPS support, 1 means enabled, 0 does not.
        """
        return pulumi.get(self, "is_http2")

    @property
    @pulumi.getter(name="isKeepAlive")
    def is_keep_alive(self) -> pulumi.Output[Optional[str]]:
        """
        Whether to enable keep-alive, 0 disable, 1 enable.
        """
        return pulumi.get(self, "is_keep_alive")

    @property
    @pulumi.getter(name="isWebsocket")
    def is_websocket(self) -> pulumi.Output[Optional[int]]:
        """
        Is WebSocket support enabled. 1 means enabled, 0 does not.
        """
        return pulumi.get(self, "is_websocket")

    @property
    @pulumi.getter(name="loadBalance")
    def load_balance(self) -> pulumi.Output[Optional[str]]:
        """
        Load balancing strategy, where 0 represents polling and 1 represents IP hash and 2 weighted round robin.
        """
        return pulumi.get(self, "load_balance")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Sequence['outputs.SaasDomainPort']]:
        """
        This field needs to be set for multiple ports in the upstream server.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate key, When CertType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="proxyReadTimeout")
    def proxy_read_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        300s.
        """
        return pulumi.get(self, "proxy_read_timeout")

    @property
    @pulumi.getter(name="proxySendTimeout")
    def proxy_send_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        300s.
        """
        return pulumi.get(self, "proxy_send_timeout")

    @property
    @pulumi.getter(name="sniHost")
    def sni_host(self) -> pulumi.Output[Optional[str]]:
        """
        When SniType=3, this parameter needs to be filled in to represent a custom host.
        """
        return pulumi.get(self, "sni_host")

    @property
    @pulumi.getter(name="sniType")
    def sni_type(self) -> pulumi.Output[Optional[int]]:
        """
        Sni type fo upstream, 0:disable SNI; 1:enable SNI and SNI equal original request host; 2:and SNI equal upstream host 3:enable SNI and equal customize host.
        """
        return pulumi.get(self, "sni_type")

    @property
    @pulumi.getter(name="srcLists")
    def src_lists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Upstream IP List, When UpstreamType=0, this parameter needs to be filled.
        """
        return pulumi.get(self, "src_lists")

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> pulumi.Output[Optional[str]]:
        """
        Certificate ID, When CertType=2, this parameter needs to be filled.
        """
        return pulumi.get(self, "ssl_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        Binding status between waf and LB, 0:not bind, 1:binding.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tlsVersion")
    def tls_version(self) -> pulumi.Output[Optional[int]]:
        """
        Version of TLS Protocol.
        """
        return pulumi.get(self, "tls_version")

    @property
    @pulumi.getter(name="upstreamDomain")
    def upstream_domain(self) -> pulumi.Output[Optional[str]]:
        """
        Upstream domain, When UpstreamType=1, this parameter needs to be filled.
        """
        return pulumi.get(self, "upstream_domain")

    @property
    @pulumi.getter(name="upstreamScheme")
    def upstream_scheme(self) -> pulumi.Output[Optional[str]]:
        """
        Upstream scheme for https, http or https.
        """
        return pulumi.get(self, "upstream_scheme")

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> pulumi.Output[Optional[int]]:
        """
        Upstream type, 0 represents IP, 1 represents domain name.
        """
        return pulumi.get(self, "upstream_type")

    @property
    @pulumi.getter
    def weights(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Weight of each upstream.
        """
        return pulumi.get(self, "weights")

    @property
    @pulumi.getter(name="xffReset")
    def xff_reset(self) -> pulumi.Output[Optional[int]]:
        """
        0:disable xff reset; 1:enable xff reset.
        """
        return pulumi.get(self, "xff_reset")

