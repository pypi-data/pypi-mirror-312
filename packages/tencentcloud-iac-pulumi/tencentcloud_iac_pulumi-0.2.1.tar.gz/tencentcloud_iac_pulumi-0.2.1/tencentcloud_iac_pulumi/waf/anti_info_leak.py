# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AntiInfoLeakArgs', 'AntiInfoLeak']

@pulumi.input_type
class AntiInfoLeakArgs:
    def __init__(__self__, *,
                 action_type: pulumi.Input[int],
                 domain: pulumi.Input[str],
                 strategies: pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]],
                 uri: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a AntiInfoLeak resource.
        :param pulumi.Input[int] action_type: Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]] strategies: Strategies detail.
        :param pulumi.Input[str] uri: Uri.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[int] status: status.
        """
        pulumi.set(__self__, "action_type", action_type)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "strategies", strategies)
        pulumi.set(__self__, "uri", uri)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Input[int]:
        """
        Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def strategies(self) -> pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]]:
        """
        Strategies detail.
        """
        return pulumi.get(self, "strategies")

    @strategies.setter
    def strategies(self, value: pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]]):
        pulumi.set(self, "strategies", value)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        """
        Uri.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _AntiInfoLeakState:
    def __init__(__self__, *,
                 action_type: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 strategies: Optional[pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AntiInfoLeak resources.
        :param pulumi.Input[int] action_type: Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[int] status: status.
        :param pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]] strategies: Strategies detail.
        :param pulumi.Input[str] uri: Uri.
        """
        if action_type is not None:
            pulumi.set(__self__, "action_type", action_type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strategies is not None:
            pulumi.set(__self__, "strategies", strategies)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> Optional[pulumi.Input[int]]:
        """
        Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
        """
        return pulumi.get(self, "action_type")

    @action_type.setter
    def action_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "action_type", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]]]:
        """
        Strategies detail.
        """
        return pulumi.get(self, "strategies")

    @strategies.setter
    def strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AntiInfoLeakStrategyArgs']]]]):
        pulumi.set(self, "strategies", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        Uri.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


class AntiInfoLeak(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_type: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntiInfoLeakStrategyArgs']]]]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf anti_info_leak

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.AntiInfoLeak("example",
            action_type=0,
            domain="tf.example.com",
            status=1,
            strategies=[tencentcloud.waf.AntiInfoLeakStrategyArgs(
                content="phone",
                field="information",
            )],
            uri="/anti_info_leak_url")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf anti_info_leak can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/antiInfoLeak:AntiInfoLeak example 3100077499#tf.example.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] action_type: Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[int] status: status.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntiInfoLeakStrategyArgs']]]] strategies: Strategies detail.
        :param pulumi.Input[str] uri: Uri.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AntiInfoLeakArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf anti_info_leak

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.AntiInfoLeak("example",
            action_type=0,
            domain="tf.example.com",
            status=1,
            strategies=[tencentcloud.waf.AntiInfoLeakStrategyArgs(
                content="phone",
                field="information",
            )],
            uri="/anti_info_leak_url")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf anti_info_leak can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/antiInfoLeak:AntiInfoLeak example 3100077499#tf.example.com
        ```

        :param str resource_name: The name of the resource.
        :param AntiInfoLeakArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AntiInfoLeakArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_type: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntiInfoLeakStrategyArgs']]]]] = None,
                 uri: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AntiInfoLeakArgs.__new__(AntiInfoLeakArgs)

            if action_type is None and not opts.urn:
                raise TypeError("Missing required property 'action_type'")
            __props__.__dict__["action_type"] = action_type
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["name"] = name
            __props__.__dict__["status"] = status
            if strategies is None and not opts.urn:
                raise TypeError("Missing required property 'strategies'")
            __props__.__dict__["strategies"] = strategies
            if uri is None and not opts.urn:
                raise TypeError("Missing required property 'uri'")
            __props__.__dict__["uri"] = uri
        super(AntiInfoLeak, __self__).__init__(
            'tencentcloud:Waf/antiInfoLeak:AntiInfoLeak',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_type: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntiInfoLeakStrategyArgs']]]]] = None,
            uri: Optional[pulumi.Input[str]] = None) -> 'AntiInfoLeak':
        """
        Get an existing AntiInfoLeak resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] action_type: Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] name: Rule Name.
        :param pulumi.Input[int] status: status.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AntiInfoLeakStrategyArgs']]]] strategies: Strategies detail.
        :param pulumi.Input[str] uri: Uri.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AntiInfoLeakState.__new__(_AntiInfoLeakState)

        __props__.__dict__["action_type"] = action_type
        __props__.__dict__["domain"] = domain
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["strategies"] = strategies
        __props__.__dict__["uri"] = uri
        return AntiInfoLeak(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionType")
    def action_type(self) -> pulumi.Output[int]:
        """
        Rule Action. 0: alarm; 1: replacement; 2: only displaying the first four digits; 3: only displaying the last four digits; 4: blocking.
        """
        return pulumi.get(self, "action_type")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Rule Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def strategies(self) -> pulumi.Output[Sequence['outputs.AntiInfoLeakStrategy']]:
        """
        Strategies detail.
        """
        return pulumi.get(self, "strategies")

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Output[str]:
        """
        Uri.
        """
        return pulumi.get(self, "uri")

