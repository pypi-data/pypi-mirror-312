# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AutoDenyRulesArgs', 'AutoDenyRules']

@pulumi.input_type
class AutoDenyRulesArgs:
    def __init__(__self__, *,
                 attack_threshold: pulumi.Input[int],
                 deny_time_threshold: pulumi.Input[int],
                 domain: pulumi.Input[str],
                 time_threshold: pulumi.Input[int]):
        """
        The set of arguments for constructing a AutoDenyRules resource.
        :param pulumi.Input[int] attack_threshold: The threshold number of attacks that triggers IP autodeny, ranging from 2 to 100 times.
        :param pulumi.Input[int] deny_time_threshold: The IP autodeny time after triggering the IP autodeny, ranging from 5 to 360 minutes.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] time_threshold: IP autodeny statistical time, ranging from 1-60 minutes.
        """
        pulumi.set(__self__, "attack_threshold", attack_threshold)
        pulumi.set(__self__, "deny_time_threshold", deny_time_threshold)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "time_threshold", time_threshold)

    @property
    @pulumi.getter(name="attackThreshold")
    def attack_threshold(self) -> pulumi.Input[int]:
        """
        The threshold number of attacks that triggers IP autodeny, ranging from 2 to 100 times.
        """
        return pulumi.get(self, "attack_threshold")

    @attack_threshold.setter
    def attack_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "attack_threshold", value)

    @property
    @pulumi.getter(name="denyTimeThreshold")
    def deny_time_threshold(self) -> pulumi.Input[int]:
        """
        The IP autodeny time after triggering the IP autodeny, ranging from 5 to 360 minutes.
        """
        return pulumi.get(self, "deny_time_threshold")

    @deny_time_threshold.setter
    def deny_time_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "deny_time_threshold", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="timeThreshold")
    def time_threshold(self) -> pulumi.Input[int]:
        """
        IP autodeny statistical time, ranging from 1-60 minutes.
        """
        return pulumi.get(self, "time_threshold")

    @time_threshold.setter
    def time_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "time_threshold", value)


@pulumi.input_type
class _AutoDenyRulesState:
    def __init__(__self__, *,
                 attack_threshold: Optional[pulumi.Input[int]] = None,
                 deny_time_threshold: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 time_threshold: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AutoDenyRules resources.
        :param pulumi.Input[int] attack_threshold: The threshold number of attacks that triggers IP autodeny, ranging from 2 to 100 times.
        :param pulumi.Input[int] deny_time_threshold: The IP autodeny time after triggering the IP autodeny, ranging from 5 to 360 minutes.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] time_threshold: IP autodeny statistical time, ranging from 1-60 minutes.
        """
        if attack_threshold is not None:
            pulumi.set(__self__, "attack_threshold", attack_threshold)
        if deny_time_threshold is not None:
            pulumi.set(__self__, "deny_time_threshold", deny_time_threshold)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if time_threshold is not None:
            pulumi.set(__self__, "time_threshold", time_threshold)

    @property
    @pulumi.getter(name="attackThreshold")
    def attack_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The threshold number of attacks that triggers IP autodeny, ranging from 2 to 100 times.
        """
        return pulumi.get(self, "attack_threshold")

    @attack_threshold.setter
    def attack_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attack_threshold", value)

    @property
    @pulumi.getter(name="denyTimeThreshold")
    def deny_time_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        The IP autodeny time after triggering the IP autodeny, ranging from 5 to 360 minutes.
        """
        return pulumi.get(self, "deny_time_threshold")

    @deny_time_threshold.setter
    def deny_time_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deny_time_threshold", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="timeThreshold")
    def time_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        IP autodeny statistical time, ranging from 1-60 minutes.
        """
        return pulumi.get(self, "time_threshold")

    @time_threshold.setter
    def time_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_threshold", value)


class AutoDenyRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attack_threshold: Optional[pulumi.Input[int]] = None,
                 deny_time_threshold: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 time_threshold: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a waf auto_deny_rules

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.AutoDenyRules("example",
            attack_threshold=20,
            deny_time_threshold=5,
            domain="demo.waf.com",
            time_threshold=12)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf auto_deny_rules can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/autoDenyRules:AutoDenyRules example demo.waf.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] attack_threshold: The threshold number of attacks that triggers IP autodeny, ranging from 2 to 100 times.
        :param pulumi.Input[int] deny_time_threshold: The IP autodeny time after triggering the IP autodeny, ranging from 5 to 360 minutes.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] time_threshold: IP autodeny statistical time, ranging from 1-60 minutes.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoDenyRulesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a waf auto_deny_rules

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.waf.AutoDenyRules("example",
            attack_threshold=20,
            deny_time_threshold=5,
            domain="demo.waf.com",
            time_threshold=12)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        waf auto_deny_rules can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Waf/autoDenyRules:AutoDenyRules example demo.waf.com
        ```

        :param str resource_name: The name of the resource.
        :param AutoDenyRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoDenyRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attack_threshold: Optional[pulumi.Input[int]] = None,
                 deny_time_threshold: Optional[pulumi.Input[int]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 time_threshold: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoDenyRulesArgs.__new__(AutoDenyRulesArgs)

            if attack_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'attack_threshold'")
            __props__.__dict__["attack_threshold"] = attack_threshold
            if deny_time_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'deny_time_threshold'")
            __props__.__dict__["deny_time_threshold"] = deny_time_threshold
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if time_threshold is None and not opts.urn:
                raise TypeError("Missing required property 'time_threshold'")
            __props__.__dict__["time_threshold"] = time_threshold
        super(AutoDenyRules, __self__).__init__(
            'tencentcloud:Waf/autoDenyRules:AutoDenyRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attack_threshold: Optional[pulumi.Input[int]] = None,
            deny_time_threshold: Optional[pulumi.Input[int]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            time_threshold: Optional[pulumi.Input[int]] = None) -> 'AutoDenyRules':
        """
        Get an existing AutoDenyRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] attack_threshold: The threshold number of attacks that triggers IP autodeny, ranging from 2 to 100 times.
        :param pulumi.Input[int] deny_time_threshold: The IP autodeny time after triggering the IP autodeny, ranging from 5 to 360 minutes.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[int] time_threshold: IP autodeny statistical time, ranging from 1-60 minutes.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AutoDenyRulesState.__new__(_AutoDenyRulesState)

        __props__.__dict__["attack_threshold"] = attack_threshold
        __props__.__dict__["deny_time_threshold"] = deny_time_threshold
        __props__.__dict__["domain"] = domain
        __props__.__dict__["time_threshold"] = time_threshold
        return AutoDenyRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attackThreshold")
    def attack_threshold(self) -> pulumi.Output[int]:
        """
        The threshold number of attacks that triggers IP autodeny, ranging from 2 to 100 times.
        """
        return pulumi.get(self, "attack_threshold")

    @property
    @pulumi.getter(name="denyTimeThreshold")
    def deny_time_threshold(self) -> pulumi.Output[int]:
        """
        The IP autodeny time after triggering the IP autodeny, ranging from 5 to 360 minutes.
        """
        return pulumi.get(self, "deny_time_threshold")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="timeThreshold")
    def time_threshold(self) -> pulumi.Output[int]:
        """
        IP autodeny statistical time, ranging from 1-60 minutes.
        """
        return pulumi.get(self, "time_threshold")

