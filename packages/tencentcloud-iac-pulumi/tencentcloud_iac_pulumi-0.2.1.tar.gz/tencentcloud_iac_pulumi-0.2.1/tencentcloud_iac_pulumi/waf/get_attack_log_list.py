# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAttackLogListResult',
    'AwaitableGetAttackLogListResult',
    'get_attack_log_list',
    'get_attack_log_list_output',
]

@pulumi.output_type
class GetAttackLogListResult:
    """
    A collection of values returned by getAttackLogList.
    """
    def __init__(__self__, datas=None, domain=None, end_time=None, id=None, page=None, query_count=None, query_string=None, result_output_file=None, sort=None, start_time=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if page and not isinstance(page, int):
            raise TypeError("Expected argument 'page' to be a int")
        pulumi.set(__self__, "page", page)
        if query_count and not isinstance(query_count, int):
            raise TypeError("Expected argument 'query_count' to be a int")
        pulumi.set(__self__, "query_count", query_count)
        if query_string and not isinstance(query_string, str):
            raise TypeError("Expected argument 'query_string' to be a str")
        pulumi.set(__self__, "query_string", query_string)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sort and not isinstance(sort, str):
            raise TypeError("Expected argument 'sort' to be a str")
        pulumi.set(__self__, "sort", sort)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetAttackLogListDataResult']:
        """
        Attack log array.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def page(self) -> Optional[int]:
        return pulumi.get(self, "page")

    @property
    @pulumi.getter(name="queryCount")
    def query_count(self) -> Optional[int]:
        return pulumi.get(self, "query_count")

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> str:
        return pulumi.get(self, "query_string")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def sort(self) -> Optional[str]:
        return pulumi.get(self, "sort")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetAttackLogListResult(GetAttackLogListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAttackLogListResult(
            datas=self.datas,
            domain=self.domain,
            end_time=self.end_time,
            id=self.id,
            page=self.page,
            query_count=self.query_count,
            query_string=self.query_string,
            result_output_file=self.result_output_file,
            sort=self.sort,
            start_time=self.start_time)


def get_attack_log_list(domain: Optional[str] = None,
                        end_time: Optional[str] = None,
                        page: Optional[int] = None,
                        query_count: Optional[int] = None,
                        query_string: Optional[str] = None,
                        result_output_file: Optional[str] = None,
                        sort: Optional[str] = None,
                        start_time: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAttackLogListResult:
    """
    Use this data source to query detailed information of waf attack_log_list

    ## Example Usage

    ### Obtain the specified domain name attack log list

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_attack_log_list(domain="domain.com",
        end_time="2023-09-07 00:00:00",
        page=0,
        query_count=10,
        query_string="method:GET",
        sort="desc",
        start_time="2023-09-01 00:00:00")
    ```
    <!--End PulumiCodeChooser -->

    ### Obtain all domain name attack log list

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_attack_log_list(domain="all",
        end_time="2023-09-07 00:00:00",
        page=1,
        query_count=20,
        query_string="method:GET",
        sort="asc",
        start_time="2023-09-01 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: Domain for query, all domain use all.
    :param str end_time: End time.
    :param int page: Number of pages, starting from 0 by default.
    :param int query_count: Number of queries, default to 10, maximum of 100.
    :param str query_string: Lucene grammar.
    :param str result_output_file: Used to save results.
    :param str sort: Default desc, support desc, asc.
    :param str start_time: Begin time.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['endTime'] = end_time
    __args__['page'] = page
    __args__['queryCount'] = query_count
    __args__['queryString'] = query_string
    __args__['resultOutputFile'] = result_output_file
    __args__['sort'] = sort
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Waf/getAttackLogList:getAttackLogList', __args__, opts=opts, typ=GetAttackLogListResult).value

    return AwaitableGetAttackLogListResult(
        datas=pulumi.get(__ret__, 'datas'),
        domain=pulumi.get(__ret__, 'domain'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        page=pulumi.get(__ret__, 'page'),
        query_count=pulumi.get(__ret__, 'query_count'),
        query_string=pulumi.get(__ret__, 'query_string'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sort=pulumi.get(__ret__, 'sort'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_attack_log_list)
def get_attack_log_list_output(domain: Optional[pulumi.Input[str]] = None,
                               end_time: Optional[pulumi.Input[str]] = None,
                               page: Optional[pulumi.Input[Optional[int]]] = None,
                               query_count: Optional[pulumi.Input[Optional[int]]] = None,
                               query_string: Optional[pulumi.Input[str]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               sort: Optional[pulumi.Input[Optional[str]]] = None,
                               start_time: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAttackLogListResult]:
    """
    Use this data source to query detailed information of waf attack_log_list

    ## Example Usage

    ### Obtain the specified domain name attack log list

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_attack_log_list(domain="domain.com",
        end_time="2023-09-07 00:00:00",
        page=0,
        query_count=10,
        query_string="method:GET",
        sort="desc",
        start_time="2023-09-01 00:00:00")
    ```
    <!--End PulumiCodeChooser -->

    ### Obtain all domain name attack log list

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_attack_log_list(domain="all",
        end_time="2023-09-07 00:00:00",
        page=1,
        query_count=20,
        query_string="method:GET",
        sort="asc",
        start_time="2023-09-01 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: Domain for query, all domain use all.
    :param str end_time: End time.
    :param int page: Number of pages, starting from 0 by default.
    :param int query_count: Number of queries, default to 10, maximum of 100.
    :param str query_string: Lucene grammar.
    :param str result_output_file: Used to save results.
    :param str sort: Default desc, support desc, asc.
    :param str start_time: Begin time.
    """
    ...
