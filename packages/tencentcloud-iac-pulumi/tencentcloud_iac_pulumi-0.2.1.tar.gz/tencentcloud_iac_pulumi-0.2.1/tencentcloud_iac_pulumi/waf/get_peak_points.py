# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPeakPointsResult',
    'AwaitableGetPeakPointsResult',
    'get_peak_points',
    'get_peak_points_output',
]

@pulumi.output_type
class GetPeakPointsResult:
    """
    A collection of values returned by getPeakPoints.
    """
    def __init__(__self__, domain=None, edition=None, from_time=None, id=None, instance_id=None, metric_name=None, points=None, result_output_file=None, to_time=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if edition and not isinstance(edition, str):
            raise TypeError("Expected argument 'edition' to be a str")
        pulumi.set(__self__, "edition", edition)
        if from_time and not isinstance(from_time, str):
            raise TypeError("Expected argument 'from_time' to be a str")
        pulumi.set(__self__, "from_time", from_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if points and not isinstance(points, list):
            raise TypeError("Expected argument 'points' to be a list")
        pulumi.set(__self__, "points", points)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if to_time and not isinstance(to_time, str):
            raise TypeError("Expected argument 'to_time' to be a str")
        pulumi.set(__self__, "to_time", to_time)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def edition(self) -> Optional[str]:
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="fromTime")
    def from_time(self) -> str:
        return pulumi.get(self, "from_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def points(self) -> Sequence['outputs.GetPeakPointsPointResult']:
        """
        point list.
        """
        return pulumi.get(self, "points")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="toTime")
    def to_time(self) -> str:
        return pulumi.get(self, "to_time")


class AwaitableGetPeakPointsResult(GetPeakPointsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPeakPointsResult(
            domain=self.domain,
            edition=self.edition,
            from_time=self.from_time,
            id=self.id,
            instance_id=self.instance_id,
            metric_name=self.metric_name,
            points=self.points,
            result_output_file=self.result_output_file,
            to_time=self.to_time)


def get_peak_points(domain: Optional[str] = None,
                    edition: Optional[str] = None,
                    from_time: Optional[str] = None,
                    instance_id: Optional[str] = None,
                    metric_name: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    to_time: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPeakPointsResult:
    """
    Use this data source to query detailed information of waf peak_points

    ## Example Usage

    ### Basic Query

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_peak_points(from_time="2023-09-01 00:00:00",
        to_time="2023-09-07 00:00:00")
    ```
    <!--End PulumiCodeChooser -->

    ### Query by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_peak_points(domain="domain.com",
        edition="clb-waf",
        from_time="2023-09-01 00:00:00",
        instance_id="waf_2kxtlbky00b2v1fn",
        metric_name="access",
        to_time="2023-09-07 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: The domain name to be queried. If all domain name data is queried, this parameter is not filled in.
    :param str edition: Only support sparta-waf and clb-waf. If not passed, there will be no filtering.
    :param str from_time: Begin time.
    :param str instance_id: WAF instance ID, if not passed, there will be no filtering.
    :param str metric_name: Thirteen values are available: access-Peak qps trend chart; botAccess- bot peak qps trend chart; down-Downstream peak bandwidth trend chart; up-Upstream peak bandwidth trend chart; attack-Trend chart of total number of web attacks; cc-Trend chart of total number of CC attacks; StatusServerError-Trend chart of the number of status codes returned by WAF to the server; StatusClientError-Trend chart of the number of status codes returned by WAF to the client; StatusRedirect-Trend chart of the number of status codes returned by WAF to the client; StatusOk-Trend chart of the number of status codes returned by WAF to the client; UpstreamServerError-Trend chart of the number of status codes returned to WAF by the origin site; UpstreamClientError-Trend chart of the number of status codes returned to WAF by the origin site; UpstreamRedirect-Trend chart of the number of status codes returned to WAF by the origin site.
    :param str result_output_file: Used to save results.
    :param str to_time: End time.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['edition'] = edition
    __args__['fromTime'] = from_time
    __args__['instanceId'] = instance_id
    __args__['metricName'] = metric_name
    __args__['resultOutputFile'] = result_output_file
    __args__['toTime'] = to_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Waf/getPeakPoints:getPeakPoints', __args__, opts=opts, typ=GetPeakPointsResult).value

    return AwaitableGetPeakPointsResult(
        domain=pulumi.get(__ret__, 'domain'),
        edition=pulumi.get(__ret__, 'edition'),
        from_time=pulumi.get(__ret__, 'from_time'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        points=pulumi.get(__ret__, 'points'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        to_time=pulumi.get(__ret__, 'to_time'))


@_utilities.lift_output_func(get_peak_points)
def get_peak_points_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                           edition: Optional[pulumi.Input[Optional[str]]] = None,
                           from_time: Optional[pulumi.Input[str]] = None,
                           instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                           metric_name: Optional[pulumi.Input[Optional[str]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           to_time: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPeakPointsResult]:
    """
    Use this data source to query detailed information of waf peak_points

    ## Example Usage

    ### Basic Query

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_peak_points(from_time="2023-09-01 00:00:00",
        to_time="2023-09-07 00:00:00")
    ```
    <!--End PulumiCodeChooser -->

    ### Query by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Waf.get_peak_points(domain="domain.com",
        edition="clb-waf",
        from_time="2023-09-01 00:00:00",
        instance_id="waf_2kxtlbky00b2v1fn",
        metric_name="access",
        to_time="2023-09-07 00:00:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: The domain name to be queried. If all domain name data is queried, this parameter is not filled in.
    :param str edition: Only support sparta-waf and clb-waf. If not passed, there will be no filtering.
    :param str from_time: Begin time.
    :param str instance_id: WAF instance ID, if not passed, there will be no filtering.
    :param str metric_name: Thirteen values are available: access-Peak qps trend chart; botAccess- bot peak qps trend chart; down-Downstream peak bandwidth trend chart; up-Upstream peak bandwidth trend chart; attack-Trend chart of total number of web attacks; cc-Trend chart of total number of CC attacks; StatusServerError-Trend chart of the number of status codes returned by WAF to the server; StatusClientError-Trend chart of the number of status codes returned by WAF to the client; StatusRedirect-Trend chart of the number of status codes returned by WAF to the client; StatusOk-Trend chart of the number of status codes returned by WAF to the client; UpstreamServerError-Trend chart of the number of status codes returned to WAF by the origin site; UpstreamClientError-Trend chart of the number of status codes returned to WAF by the origin site; UpstreamRedirect-Trend chart of the number of status codes returned to WAF by the origin site.
    :param str result_output_file: Used to save results.
    :param str to_time: End time.
    """
    ...
