# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CkafkaConsumerArgs', 'CkafkaConsumer']

@pulumi.input_type
class CkafkaConsumerArgs:
    def __init__(__self__, *,
                 topic_id: pulumi.Input[str],
                 ckafka: Optional[pulumi.Input['CkafkaConsumerCkafkaArgs']] = None,
                 compression: Optional[pulumi.Input[int]] = None,
                 content: Optional[pulumi.Input['CkafkaConsumerContentArgs']] = None,
                 need_content: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a CkafkaConsumer resource.
        :param pulumi.Input[str] topic_id: topic id.
        :param pulumi.Input['CkafkaConsumerCkafkaArgs'] ckafka: ckafka info.
        :param pulumi.Input[int] compression: compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
        :param pulumi.Input['CkafkaConsumerContentArgs'] content: metadata information.
        :param pulumi.Input[bool] need_content: whether to deliver the metadata information of the log.
        """
        pulumi.set(__self__, "topic_id", topic_id)
        if ckafka is not None:
            pulumi.set(__self__, "ckafka", ckafka)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if need_content is not None:
            pulumi.set(__self__, "need_content", need_content)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        topic id.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter
    def ckafka(self) -> Optional[pulumi.Input['CkafkaConsumerCkafkaArgs']]:
        """
        ckafka info.
        """
        return pulumi.get(self, "ckafka")

    @ckafka.setter
    def ckafka(self, value: Optional[pulumi.Input['CkafkaConsumerCkafkaArgs']]):
        pulumi.set(self, "ckafka", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[int]]:
        """
        compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input['CkafkaConsumerContentArgs']]:
        """
        metadata information.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input['CkafkaConsumerContentArgs']]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="needContent")
    def need_content(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to deliver the metadata information of the log.
        """
        return pulumi.get(self, "need_content")

    @need_content.setter
    def need_content(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_content", value)


@pulumi.input_type
class _CkafkaConsumerState:
    def __init__(__self__, *,
                 ckafka: Optional[pulumi.Input['CkafkaConsumerCkafkaArgs']] = None,
                 compression: Optional[pulumi.Input[int]] = None,
                 content: Optional[pulumi.Input['CkafkaConsumerContentArgs']] = None,
                 need_content: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CkafkaConsumer resources.
        :param pulumi.Input['CkafkaConsumerCkafkaArgs'] ckafka: ckafka info.
        :param pulumi.Input[int] compression: compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
        :param pulumi.Input['CkafkaConsumerContentArgs'] content: metadata information.
        :param pulumi.Input[bool] need_content: whether to deliver the metadata information of the log.
        :param pulumi.Input[str] topic_id: topic id.
        """
        if ckafka is not None:
            pulumi.set(__self__, "ckafka", ckafka)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if need_content is not None:
            pulumi.set(__self__, "need_content", need_content)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def ckafka(self) -> Optional[pulumi.Input['CkafkaConsumerCkafkaArgs']]:
        """
        ckafka info.
        """
        return pulumi.get(self, "ckafka")

    @ckafka.setter
    def ckafka(self, value: Optional[pulumi.Input['CkafkaConsumerCkafkaArgs']]):
        pulumi.set(self, "ckafka", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input[int]]:
        """
        compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
        """
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input['CkafkaConsumerContentArgs']]:
        """
        metadata information.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input['CkafkaConsumerContentArgs']]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="needContent")
    def need_content(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to deliver the metadata information of the log.
        """
        return pulumi.get(self, "need_content")

    @need_content.setter
    def need_content(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "need_content", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        topic id.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


class CkafkaConsumer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ckafka: Optional[pulumi.Input[pulumi.InputType['CkafkaConsumerCkafkaArgs']]] = None,
                 compression: Optional[pulumi.Input[int]] = None,
                 content: Optional[pulumi.Input[pulumi.InputType['CkafkaConsumerContentArgs']]] = None,
                 need_content: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls ckafka_consumer

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        ckafka_consumer = tencentcloud.cls.CkafkaConsumer("ckafkaConsumer",
            ckafka=tencentcloud.cls.CkafkaConsumerCkafkaArgs(
                instance_id="ckafka-qzoeaqx8",
                instance_name="ckafka-instance",
                topic_id="topic-c6tm4kpm",
                topic_name="name",
                vip="172.16.112.23",
                vport="9092",
            ),
            compression=1,
            content=tencentcloud.cls.CkafkaConsumerContentArgs(
                enable_tag=True,
                meta_fields=[
                    "__FILENAME__",
                    "__HOSTNAME__",
                    "__PKGID__",
                    "__SOURCE__",
                    "__TIMESTAMP__",
                ],
                tag_json_not_tiled=True,
                timestamp_accuracy=2,
            ),
            need_content=True,
            topic_id="7e34a3a7-635e-4da8-9005-88106c1fde69")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls ckafka_consumer can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/ckafkaConsumer:CkafkaConsumer ckafka_consumer topic_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CkafkaConsumerCkafkaArgs']] ckafka: ckafka info.
        :param pulumi.Input[int] compression: compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
        :param pulumi.Input[pulumi.InputType['CkafkaConsumerContentArgs']] content: metadata information.
        :param pulumi.Input[bool] need_content: whether to deliver the metadata information of the log.
        :param pulumi.Input[str] topic_id: topic id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CkafkaConsumerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls ckafka_consumer

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        ckafka_consumer = tencentcloud.cls.CkafkaConsumer("ckafkaConsumer",
            ckafka=tencentcloud.cls.CkafkaConsumerCkafkaArgs(
                instance_id="ckafka-qzoeaqx8",
                instance_name="ckafka-instance",
                topic_id="topic-c6tm4kpm",
                topic_name="name",
                vip="172.16.112.23",
                vport="9092",
            ),
            compression=1,
            content=tencentcloud.cls.CkafkaConsumerContentArgs(
                enable_tag=True,
                meta_fields=[
                    "__FILENAME__",
                    "__HOSTNAME__",
                    "__PKGID__",
                    "__SOURCE__",
                    "__TIMESTAMP__",
                ],
                tag_json_not_tiled=True,
                timestamp_accuracy=2,
            ),
            need_content=True,
            topic_id="7e34a3a7-635e-4da8-9005-88106c1fde69")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls ckafka_consumer can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/ckafkaConsumer:CkafkaConsumer ckafka_consumer topic_id
        ```

        :param str resource_name: The name of the resource.
        :param CkafkaConsumerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CkafkaConsumerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ckafka: Optional[pulumi.Input[pulumi.InputType['CkafkaConsumerCkafkaArgs']]] = None,
                 compression: Optional[pulumi.Input[int]] = None,
                 content: Optional[pulumi.Input[pulumi.InputType['CkafkaConsumerContentArgs']]] = None,
                 need_content: Optional[pulumi.Input[bool]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CkafkaConsumerArgs.__new__(CkafkaConsumerArgs)

            __props__.__dict__["ckafka"] = ckafka
            __props__.__dict__["compression"] = compression
            __props__.__dict__["content"] = content
            __props__.__dict__["need_content"] = need_content
            if topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id'")
            __props__.__dict__["topic_id"] = topic_id
        super(CkafkaConsumer, __self__).__init__(
            'tencentcloud:Cls/ckafkaConsumer:CkafkaConsumer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ckafka: Optional[pulumi.Input[pulumi.InputType['CkafkaConsumerCkafkaArgs']]] = None,
            compression: Optional[pulumi.Input[int]] = None,
            content: Optional[pulumi.Input[pulumi.InputType['CkafkaConsumerContentArgs']]] = None,
            need_content: Optional[pulumi.Input[bool]] = None,
            topic_id: Optional[pulumi.Input[str]] = None) -> 'CkafkaConsumer':
        """
        Get an existing CkafkaConsumer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CkafkaConsumerCkafkaArgs']] ckafka: ckafka info.
        :param pulumi.Input[int] compression: compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
        :param pulumi.Input[pulumi.InputType['CkafkaConsumerContentArgs']] content: metadata information.
        :param pulumi.Input[bool] need_content: whether to deliver the metadata information of the log.
        :param pulumi.Input[str] topic_id: topic id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CkafkaConsumerState.__new__(_CkafkaConsumerState)

        __props__.__dict__["ckafka"] = ckafka
        __props__.__dict__["compression"] = compression
        __props__.__dict__["content"] = content
        __props__.__dict__["need_content"] = need_content
        __props__.__dict__["topic_id"] = topic_id
        return CkafkaConsumer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ckafka(self) -> pulumi.Output[Optional['outputs.CkafkaConsumerCkafka']]:
        """
        ckafka info.
        """
        return pulumi.get(self, "ckafka")

    @property
    @pulumi.getter
    def compression(self) -> pulumi.Output[Optional[int]]:
        """
        compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
        """
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[Optional['outputs.CkafkaConsumerContent']]:
        """
        metadata information.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="needContent")
    def need_content(self) -> pulumi.Output[Optional[bool]]:
        """
        whether to deliver the metadata information of the log.
        """
        return pulumi.get(self, "need_content")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        topic id.
        """
        return pulumi.get(self, "topic_id")

