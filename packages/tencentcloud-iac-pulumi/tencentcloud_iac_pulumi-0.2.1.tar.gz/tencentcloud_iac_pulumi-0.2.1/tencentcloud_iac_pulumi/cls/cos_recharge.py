# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CosRechargeArgs', 'CosRecharge']

@pulumi.input_type
class CosRechargeArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 bucket_region: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 logset_id: pulumi.Input[str],
                 prefix: pulumi.Input[str],
                 topic_id: pulumi.Input[str],
                 compress: Optional[pulumi.Input[str]] = None,
                 extract_rule_info: Optional[pulumi.Input['CosRechargeExtractRuleInfoArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CosRecharge resource.
        :param pulumi.Input[str] bucket: cos bucket.
        :param pulumi.Input[str] bucket_region: cos bucket region.
        :param pulumi.Input[str] log_type: log type.
        :param pulumi.Input[str] logset_id: logset id.
        :param pulumi.Input[str] prefix: cos file prefix.
        :param pulumi.Input[str] topic_id: topic id.
        :param pulumi.Input[str] compress: supported gzip, lzop, snappy.
        :param pulumi.Input['CosRechargeExtractRuleInfoArgs'] extract_rule_info: extract rule info.
        :param pulumi.Input[str] name: recharge name.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "bucket_region", bucket_region)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "logset_id", logset_id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "topic_id", topic_id)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if extract_rule_info is not None:
            pulumi.set(__self__, "extract_rule_info", extract_rule_info)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        cos bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketRegion")
    def bucket_region(self) -> pulumi.Input[str]:
        """
        cos bucket region.
        """
        return pulumi.get(self, "bucket_region")

    @bucket_region.setter
    def bucket_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_region", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        log type.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Input[str]:
        """
        logset id.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        cos file prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        topic id.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter
    def compress(self) -> Optional[pulumi.Input[str]]:
        """
        supported gzip, lzop, snappy.
        """
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="extractRuleInfo")
    def extract_rule_info(self) -> Optional[pulumi.Input['CosRechargeExtractRuleInfoArgs']]:
        """
        extract rule info.
        """
        return pulumi.get(self, "extract_rule_info")

    @extract_rule_info.setter
    def extract_rule_info(self, value: Optional[pulumi.Input['CosRechargeExtractRuleInfoArgs']]):
        pulumi.set(self, "extract_rule_info", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        recharge name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CosRechargeState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_region: Optional[pulumi.Input[str]] = None,
                 compress: Optional[pulumi.Input[str]] = None,
                 extract_rule_info: Optional[pulumi.Input['CosRechargeExtractRuleInfoArgs']] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CosRecharge resources.
        :param pulumi.Input[str] bucket: cos bucket.
        :param pulumi.Input[str] bucket_region: cos bucket region.
        :param pulumi.Input[str] compress: supported gzip, lzop, snappy.
        :param pulumi.Input['CosRechargeExtractRuleInfoArgs'] extract_rule_info: extract rule info.
        :param pulumi.Input[str] log_type: log type.
        :param pulumi.Input[str] logset_id: logset id.
        :param pulumi.Input[str] name: recharge name.
        :param pulumi.Input[str] prefix: cos file prefix.
        :param pulumi.Input[str] topic_id: topic id.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_region is not None:
            pulumi.set(__self__, "bucket_region", bucket_region)
        if compress is not None:
            pulumi.set(__self__, "compress", compress)
        if extract_rule_info is not None:
            pulumi.set(__self__, "extract_rule_info", extract_rule_info)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        cos bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketRegion")
    def bucket_region(self) -> Optional[pulumi.Input[str]]:
        """
        cos bucket region.
        """
        return pulumi.get(self, "bucket_region")

    @bucket_region.setter
    def bucket_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_region", value)

    @property
    @pulumi.getter
    def compress(self) -> Optional[pulumi.Input[str]]:
        """
        supported gzip, lzop, snappy.
        """
        return pulumi.get(self, "compress")

    @compress.setter
    def compress(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compress", value)

    @property
    @pulumi.getter(name="extractRuleInfo")
    def extract_rule_info(self) -> Optional[pulumi.Input['CosRechargeExtractRuleInfoArgs']]:
        """
        extract rule info.
        """
        return pulumi.get(self, "extract_rule_info")

    @extract_rule_info.setter
    def extract_rule_info(self, value: Optional[pulumi.Input['CosRechargeExtractRuleInfoArgs']]):
        pulumi.set(self, "extract_rule_info", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        log type.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        logset id.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        recharge name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        cos file prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        topic id.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)


class CosRecharge(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_region: Optional[pulumi.Input[str]] = None,
                 compress: Optional[pulumi.Input[str]] = None,
                 extract_rule_info: Optional[pulumi.Input[pulumi.InputType['CosRechargeExtractRuleInfoArgs']]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cos_recharge = tencentcloud.cls.CosRecharge("cosRecharge",
            bucket="cos-lock-1308919341",
            bucket_region="ap-guangzhou",
            extract_rule_info=tencentcloud.cls.CosRechargeExtractRuleInfoArgs(
                backtracking=0,
                filter_key_regexes=[tencentcloud.cls.CosRechargeExtractRuleInfoFilterKeyRegexArgs(
                    key="__CONTENT__",
                    regex="dasd",
                )],
                is_gbk=0,
                json_standard=0,
                keys=[],
                metadata_type=0,
                un_match_up_load_switch=False,
            ),
            log_type="minimalist_log",
            logset_id="dd426d1a-95bc-4bca-b8c2-baa169261812",
            prefix="test",
            topic_id="7e34a3a7-635e-4da8-9005-88106c1fde69")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls cos_recharge can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/cosRecharge:CosRecharge cos_recharge topic_id#cos_recharge_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: cos bucket.
        :param pulumi.Input[str] bucket_region: cos bucket region.
        :param pulumi.Input[str] compress: supported gzip, lzop, snappy.
        :param pulumi.Input[pulumi.InputType['CosRechargeExtractRuleInfoArgs']] extract_rule_info: extract rule info.
        :param pulumi.Input[str] log_type: log type.
        :param pulumi.Input[str] logset_id: logset id.
        :param pulumi.Input[str] name: recharge name.
        :param pulumi.Input[str] prefix: cos file prefix.
        :param pulumi.Input[str] topic_id: topic id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CosRechargeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cos_recharge = tencentcloud.cls.CosRecharge("cosRecharge",
            bucket="cos-lock-1308919341",
            bucket_region="ap-guangzhou",
            extract_rule_info=tencentcloud.cls.CosRechargeExtractRuleInfoArgs(
                backtracking=0,
                filter_key_regexes=[tencentcloud.cls.CosRechargeExtractRuleInfoFilterKeyRegexArgs(
                    key="__CONTENT__",
                    regex="dasd",
                )],
                is_gbk=0,
                json_standard=0,
                keys=[],
                metadata_type=0,
                un_match_up_load_switch=False,
            ),
            log_type="minimalist_log",
            logset_id="dd426d1a-95bc-4bca-b8c2-baa169261812",
            prefix="test",
            topic_id="7e34a3a7-635e-4da8-9005-88106c1fde69")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls cos_recharge can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/cosRecharge:CosRecharge cos_recharge topic_id#cos_recharge_id
        ```

        :param str resource_name: The name of the resource.
        :param CosRechargeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CosRechargeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_region: Optional[pulumi.Input[str]] = None,
                 compress: Optional[pulumi.Input[str]] = None,
                 extract_rule_info: Optional[pulumi.Input[pulumi.InputType['CosRechargeExtractRuleInfoArgs']]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CosRechargeArgs.__new__(CosRechargeArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if bucket_region is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_region'")
            __props__.__dict__["bucket_region"] = bucket_region
            __props__.__dict__["compress"] = compress
            __props__.__dict__["extract_rule_info"] = extract_rule_info
            if log_type is None and not opts.urn:
                raise TypeError("Missing required property 'log_type'")
            __props__.__dict__["log_type"] = log_type
            if logset_id is None and not opts.urn:
                raise TypeError("Missing required property 'logset_id'")
            __props__.__dict__["logset_id"] = logset_id
            __props__.__dict__["name"] = name
            if prefix is None and not opts.urn:
                raise TypeError("Missing required property 'prefix'")
            __props__.__dict__["prefix"] = prefix
            if topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id'")
            __props__.__dict__["topic_id"] = topic_id
        super(CosRecharge, __self__).__init__(
            'tencentcloud:Cls/cosRecharge:CosRecharge',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            bucket_region: Optional[pulumi.Input[str]] = None,
            compress: Optional[pulumi.Input[str]] = None,
            extract_rule_info: Optional[pulumi.Input[pulumi.InputType['CosRechargeExtractRuleInfoArgs']]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            logset_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            prefix: Optional[pulumi.Input[str]] = None,
            topic_id: Optional[pulumi.Input[str]] = None) -> 'CosRecharge':
        """
        Get an existing CosRecharge resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: cos bucket.
        :param pulumi.Input[str] bucket_region: cos bucket region.
        :param pulumi.Input[str] compress: supported gzip, lzop, snappy.
        :param pulumi.Input[pulumi.InputType['CosRechargeExtractRuleInfoArgs']] extract_rule_info: extract rule info.
        :param pulumi.Input[str] log_type: log type.
        :param pulumi.Input[str] logset_id: logset id.
        :param pulumi.Input[str] name: recharge name.
        :param pulumi.Input[str] prefix: cos file prefix.
        :param pulumi.Input[str] topic_id: topic id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CosRechargeState.__new__(_CosRechargeState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["bucket_region"] = bucket_region
        __props__.__dict__["compress"] = compress
        __props__.__dict__["extract_rule_info"] = extract_rule_info
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["logset_id"] = logset_id
        __props__.__dict__["name"] = name
        __props__.__dict__["prefix"] = prefix
        __props__.__dict__["topic_id"] = topic_id
        return CosRecharge(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        cos bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketRegion")
    def bucket_region(self) -> pulumi.Output[str]:
        """
        cos bucket region.
        """
        return pulumi.get(self, "bucket_region")

    @property
    @pulumi.getter
    def compress(self) -> pulumi.Output[Optional[str]]:
        """
        supported gzip, lzop, snappy.
        """
        return pulumi.get(self, "compress")

    @property
    @pulumi.getter(name="extractRuleInfo")
    def extract_rule_info(self) -> pulumi.Output['outputs.CosRechargeExtractRuleInfo']:
        """
        extract rule info.
        """
        return pulumi.get(self, "extract_rule_info")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[str]:
        """
        log type.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Output[str]:
        """
        logset id.
        """
        return pulumi.get(self, "logset_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        recharge name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Output[str]:
        """
        cos file prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        topic id.
        """
        return pulumi.get(self, "topic_id")

