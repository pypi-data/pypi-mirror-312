# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmNoticeArgs', 'AlarmNotice']

@pulumi.input_type
class AlarmNoticeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 notice_receivers: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 web_callbacks: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]]] = None):
        """
        The set of arguments for constructing a AlarmNotice resource.
        :param pulumi.Input[str] type: notice type.
        :param pulumi.Input[str] name: alarm notice name.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]] notice_receivers: notice receivers.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]] web_callbacks: callback info.
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notice_receivers is not None:
            pulumi.set(__self__, "notice_receivers", notice_receivers)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if web_callbacks is not None:
            pulumi.set(__self__, "web_callbacks", web_callbacks)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        notice type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        alarm notice name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noticeReceivers")
    def notice_receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]]]:
        """
        notice receivers.
        """
        return pulumi.get(self, "notice_receivers")

    @notice_receivers.setter
    def notice_receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]]]):
        pulumi.set(self, "notice_receivers", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="webCallbacks")
    def web_callbacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]]]:
        """
        callback info.
        """
        return pulumi.get(self, "web_callbacks")

    @web_callbacks.setter
    def web_callbacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]]]):
        pulumi.set(self, "web_callbacks", value)


@pulumi.input_type
class _AlarmNoticeState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 notice_receivers: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 web_callbacks: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]]] = None):
        """
        Input properties used for looking up and filtering AlarmNotice resources.
        :param pulumi.Input[str] name: alarm notice name.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]] notice_receivers: notice receivers.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] type: notice type.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]] web_callbacks: callback info.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notice_receivers is not None:
            pulumi.set(__self__, "notice_receivers", notice_receivers)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if web_callbacks is not None:
            pulumi.set(__self__, "web_callbacks", web_callbacks)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        alarm notice name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="noticeReceivers")
    def notice_receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]]]:
        """
        notice receivers.
        """
        return pulumi.get(self, "notice_receivers")

    @notice_receivers.setter
    def notice_receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeNoticeReceiverArgs']]]]):
        pulumi.set(self, "notice_receivers", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        notice type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="webCallbacks")
    def web_callbacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]]]:
        """
        callback info.
        """
        return pulumi.get(self, "web_callbacks")

    @web_callbacks.setter
    def web_callbacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmNoticeWebCallbackArgs']]]]):
        pulumi.set(self, "web_callbacks", value)


class AlarmNotice(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notice_receivers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeNoticeReceiverArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 web_callbacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeWebCallbackArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls alarm_notice

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        alarm_notice = tencentcloud.cls.AlarmNotice("alarmNotice",
            notice_receivers=[tencentcloud.cls.AlarmNoticeNoticeReceiverArgs(
                end_time="23:59:59",
                index=0,
                receiver_channels=["Sms"],
                receiver_ids=[
                    13478043,
                    15972111,
                ],
                receiver_type="Uin",
                start_time="00:00:00",
            )],
            tags={
                "createdBy": "terraform",
            },
            type="All")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls alarm_notice can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/alarmNotice:AlarmNotice alarm_notice alarm_notice_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: alarm notice name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeNoticeReceiverArgs']]]] notice_receivers: notice receivers.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] type: notice type.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeWebCallbackArgs']]]] web_callbacks: callback info.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmNoticeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls alarm_notice

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        alarm_notice = tencentcloud.cls.AlarmNotice("alarmNotice",
            notice_receivers=[tencentcloud.cls.AlarmNoticeNoticeReceiverArgs(
                end_time="23:59:59",
                index=0,
                receiver_channels=["Sms"],
                receiver_ids=[
                    13478043,
                    15972111,
                ],
                receiver_type="Uin",
                start_time="00:00:00",
            )],
            tags={
                "createdBy": "terraform",
            },
            type="All")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls alarm_notice can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/alarmNotice:AlarmNotice alarm_notice alarm_notice_id
        ```

        :param str resource_name: The name of the resource.
        :param AlarmNoticeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmNoticeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notice_receivers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeNoticeReceiverArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 web_callbacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeWebCallbackArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmNoticeArgs.__new__(AlarmNoticeArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["notice_receivers"] = notice_receivers
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["web_callbacks"] = web_callbacks
        super(AlarmNotice, __self__).__init__(
            'tencentcloud:Cls/alarmNotice:AlarmNotice',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            notice_receivers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeNoticeReceiverArgs']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            web_callbacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeWebCallbackArgs']]]]] = None) -> 'AlarmNotice':
        """
        Get an existing AlarmNotice resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: alarm notice name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeNoticeReceiverArgs']]]] notice_receivers: notice receivers.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] type: notice type.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmNoticeWebCallbackArgs']]]] web_callbacks: callback info.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmNoticeState.__new__(_AlarmNoticeState)

        __props__.__dict__["name"] = name
        __props__.__dict__["notice_receivers"] = notice_receivers
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["web_callbacks"] = web_callbacks
        return AlarmNotice(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        alarm notice name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noticeReceivers")
    def notice_receivers(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmNoticeNoticeReceiver']]]:
        """
        notice receivers.
        """
        return pulumi.get(self, "notice_receivers")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        notice type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="webCallbacks")
    def web_callbacks(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmNoticeWebCallback']]]:
        """
        callback info.
        """
        return pulumi.get(self, "web_callbacks")

