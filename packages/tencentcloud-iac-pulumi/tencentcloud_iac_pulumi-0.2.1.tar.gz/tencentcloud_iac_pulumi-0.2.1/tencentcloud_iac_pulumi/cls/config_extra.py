# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConfigExtraArgs', 'ConfigExtra']

@pulumi.input_type
class ConfigExtraArgs:
    def __init__(__self__, *,
                 config_flag: pulumi.Input[str],
                 log_type: pulumi.Input[str],
                 logset_id: pulumi.Input[str],
                 logset_name: pulumi.Input[str],
                 topic_id: pulumi.Input[str],
                 topic_name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 container_file: Optional[pulumi.Input['ConfigExtraContainerFileArgs']] = None,
                 container_stdout: Optional[pulumi.Input['ConfigExtraContainerStdoutArgs']] = None,
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]]] = None,
                 extract_rule: Optional[pulumi.Input['ConfigExtraExtractRuleArgs']] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_file: Optional[pulumi.Input['ConfigExtraHostFileArgs']] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ConfigExtra resource.
        :param pulumi.Input[str] config_flag: Collection configuration flag.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] logset_id: Logset Id.
        :param pulumi.Input[str] logset_name: Logset Name.
        :param pulumi.Input[str] topic_id: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] topic_name: Topic Name.
        :param pulumi.Input[str] type: Type. Valid values: container_stdout; container_file; host_file.
        :param pulumi.Input['ConfigExtraContainerFileArgs'] container_file: Container file path info.
        :param pulumi.Input['ConfigExtraContainerStdoutArgs'] container_stdout: Container stdout info.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]] exclude_paths: Collection path blocklist.
        :param pulumi.Input['ConfigExtraExtractRuleArgs'] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[str] group_id: Binding group id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: Binding group ids.
        :param pulumi.Input['ConfigExtraHostFileArgs'] host_file: Node file config info.
        :param pulumi.Input[str] log_format: Log format.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        pulumi.set(__self__, "config_flag", config_flag)
        pulumi.set(__self__, "log_type", log_type)
        pulumi.set(__self__, "logset_id", logset_id)
        pulumi.set(__self__, "logset_name", logset_name)
        pulumi.set(__self__, "topic_id", topic_id)
        pulumi.set(__self__, "topic_name", topic_name)
        pulumi.set(__self__, "type", type)
        if container_file is not None:
            pulumi.set(__self__, "container_file", container_file)
        if container_stdout is not None:
            pulumi.set(__self__, "container_stdout", container_stdout)
        if exclude_paths is not None:
            pulumi.set(__self__, "exclude_paths", exclude_paths)
        if extract_rule is not None:
            pulumi.set(__self__, "extract_rule", extract_rule)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if host_file is not None:
            pulumi.set(__self__, "host_file", host_file)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_define_rule is not None:
            pulumi.set(__self__, "user_define_rule", user_define_rule)

    @property
    @pulumi.getter(name="configFlag")
    def config_flag(self) -> pulumi.Input[str]:
        """
        Collection configuration flag.
        """
        return pulumi.get(self, "config_flag")

    @config_flag.setter
    def config_flag(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_flag", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input[str]:
        """
        Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Input[str]:
        """
        Logset Id.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> pulumi.Input[str]:
        """
        Logset Name.
        """
        return pulumi.get(self, "logset_name")

    @logset_name.setter
    def logset_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "logset_name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        """
        Log topic ID (TopicId) of collection configuration.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        Topic Name.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type. Valid values: container_stdout; container_file; host_file.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="containerFile")
    def container_file(self) -> Optional[pulumi.Input['ConfigExtraContainerFileArgs']]:
        """
        Container file path info.
        """
        return pulumi.get(self, "container_file")

    @container_file.setter
    def container_file(self, value: Optional[pulumi.Input['ConfigExtraContainerFileArgs']]):
        pulumi.set(self, "container_file", value)

    @property
    @pulumi.getter(name="containerStdout")
    def container_stdout(self) -> Optional[pulumi.Input['ConfigExtraContainerStdoutArgs']]:
        """
        Container stdout info.
        """
        return pulumi.get(self, "container_stdout")

    @container_stdout.setter
    def container_stdout(self, value: Optional[pulumi.Input['ConfigExtraContainerStdoutArgs']]):
        pulumi.set(self, "container_stdout", value)

    @property
    @pulumi.getter(name="excludePaths")
    def exclude_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]]]:
        """
        Collection path blocklist.
        """
        return pulumi.get(self, "exclude_paths")

    @exclude_paths.setter
    def exclude_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]]]):
        pulumi.set(self, "exclude_paths", value)

    @property
    @pulumi.getter(name="extractRule")
    def extract_rule(self) -> Optional[pulumi.Input['ConfigExtraExtractRuleArgs']]:
        """
        Extraction rule. If ExtractRule is set, LogType must be set.
        """
        return pulumi.get(self, "extract_rule")

    @extract_rule.setter
    def extract_rule(self, value: Optional[pulumi.Input['ConfigExtraExtractRuleArgs']]):
        pulumi.set(self, "extract_rule", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Binding group id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Binding group ids.
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="hostFile")
    def host_file(self) -> Optional[pulumi.Input['ConfigExtraHostFileArgs']]:
        """
        Node file config info.
        """
        return pulumi.get(self, "host_file")

    @host_file.setter
    def host_file(self, value: Optional[pulumi.Input['ConfigExtraHostFileArgs']]):
        pulumi.set(self, "host_file", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Collection configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userDefineRule")
    def user_define_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Custom collection rule, which is a serialized JSON string.
        """
        return pulumi.get(self, "user_define_rule")

    @user_define_rule.setter
    def user_define_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_define_rule", value)


@pulumi.input_type
class _ConfigExtraState:
    def __init__(__self__, *,
                 config_flag: Optional[pulumi.Input[str]] = None,
                 container_file: Optional[pulumi.Input['ConfigExtraContainerFileArgs']] = None,
                 container_stdout: Optional[pulumi.Input['ConfigExtraContainerStdoutArgs']] = None,
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]]] = None,
                 extract_rule: Optional[pulumi.Input['ConfigExtraExtractRuleArgs']] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_file: Optional[pulumi.Input['ConfigExtraHostFileArgs']] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ConfigExtra resources.
        :param pulumi.Input[str] config_flag: Collection configuration flag.
        :param pulumi.Input['ConfigExtraContainerFileArgs'] container_file: Container file path info.
        :param pulumi.Input['ConfigExtraContainerStdoutArgs'] container_stdout: Container stdout info.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]] exclude_paths: Collection path blocklist.
        :param pulumi.Input['ConfigExtraExtractRuleArgs'] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[str] group_id: Binding group id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: Binding group ids.
        :param pulumi.Input['ConfigExtraHostFileArgs'] host_file: Node file config info.
        :param pulumi.Input[str] log_format: Log format.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] logset_id: Logset Id.
        :param pulumi.Input[str] logset_name: Logset Name.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] topic_id: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] topic_name: Topic Name.
        :param pulumi.Input[str] type: Type. Valid values: container_stdout; container_file; host_file.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        if config_flag is not None:
            pulumi.set(__self__, "config_flag", config_flag)
        if container_file is not None:
            pulumi.set(__self__, "container_file", container_file)
        if container_stdout is not None:
            pulumi.set(__self__, "container_stdout", container_stdout)
        if exclude_paths is not None:
            pulumi.set(__self__, "exclude_paths", exclude_paths)
        if extract_rule is not None:
            pulumi.set(__self__, "extract_rule", extract_rule)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if host_file is not None:
            pulumi.set(__self__, "host_file", host_file)
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if logset_id is not None:
            pulumi.set(__self__, "logset_id", logset_id)
        if logset_name is not None:
            pulumi.set(__self__, "logset_name", logset_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if topic_id is not None:
            pulumi.set(__self__, "topic_id", topic_id)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_define_rule is not None:
            pulumi.set(__self__, "user_define_rule", user_define_rule)

    @property
    @pulumi.getter(name="configFlag")
    def config_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Collection configuration flag.
        """
        return pulumi.get(self, "config_flag")

    @config_flag.setter
    def config_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_flag", value)

    @property
    @pulumi.getter(name="containerFile")
    def container_file(self) -> Optional[pulumi.Input['ConfigExtraContainerFileArgs']]:
        """
        Container file path info.
        """
        return pulumi.get(self, "container_file")

    @container_file.setter
    def container_file(self, value: Optional[pulumi.Input['ConfigExtraContainerFileArgs']]):
        pulumi.set(self, "container_file", value)

    @property
    @pulumi.getter(name="containerStdout")
    def container_stdout(self) -> Optional[pulumi.Input['ConfigExtraContainerStdoutArgs']]:
        """
        Container stdout info.
        """
        return pulumi.get(self, "container_stdout")

    @container_stdout.setter
    def container_stdout(self, value: Optional[pulumi.Input['ConfigExtraContainerStdoutArgs']]):
        pulumi.set(self, "container_stdout", value)

    @property
    @pulumi.getter(name="excludePaths")
    def exclude_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]]]:
        """
        Collection path blocklist.
        """
        return pulumi.get(self, "exclude_paths")

    @exclude_paths.setter
    def exclude_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExtraExcludePathArgs']]]]):
        pulumi.set(self, "exclude_paths", value)

    @property
    @pulumi.getter(name="extractRule")
    def extract_rule(self) -> Optional[pulumi.Input['ConfigExtraExtractRuleArgs']]:
        """
        Extraction rule. If ExtractRule is set, LogType must be set.
        """
        return pulumi.get(self, "extract_rule")

    @extract_rule.setter
    def extract_rule(self, value: Optional[pulumi.Input['ConfigExtraExtractRuleArgs']]):
        pulumi.set(self, "extract_rule", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Binding group id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Binding group ids.
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="hostFile")
    def host_file(self) -> Optional[pulumi.Input['ConfigExtraHostFileArgs']]:
        """
        Node file config info.
        """
        return pulumi.get(self, "host_file")

    @host_file.setter
    def host_file(self, value: Optional[pulumi.Input['ConfigExtraHostFileArgs']]):
        pulumi.set(self, "host_file", value)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        Logset Id.
        """
        return pulumi.get(self, "logset_id")

    @logset_id.setter
    def logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_id", value)

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> Optional[pulumi.Input[str]]:
        """
        Logset Name.
        """
        return pulumi.get(self, "logset_name")

    @logset_name.setter
    def logset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logset_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Collection configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic ID (TopicId) of collection configuration.
        """
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        Topic Name.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type. Valid values: container_stdout; container_file; host_file.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userDefineRule")
    def user_define_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Custom collection rule, which is a serialized JSON string.
        """
        return pulumi.get(self, "user_define_rule")

    @user_define_rule.setter
    def user_define_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_define_rule", value)


class ConfigExtra(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_flag: Optional[pulumi.Input[str]] = None,
                 container_file: Optional[pulumi.Input[pulumi.InputType['ConfigExtraContainerFileArgs']]] = None,
                 container_stdout: Optional[pulumi.Input[pulumi.InputType['ConfigExtraContainerStdoutArgs']]] = None,
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExtraExcludePathArgs']]]]] = None,
                 extract_rule: Optional[pulumi.Input[pulumi.InputType['ConfigExtraExtractRuleArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_file: Optional[pulumi.Input[pulumi.InputType['ConfigExtraHostFileArgs']]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls config extra

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logset = tencentcloud.cls.Logset("logset",
            logset_name="tf-config-extra-test",
            tags={
                "test": "test",
            })
        topic = tencentcloud.cls.Topic("topic",
            auto_split=True,
            logset_id=logset.id,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "test": "test",
            },
            topic_name="tf-config-extra-test")
        group = tencentcloud.cls.MachineGroup("group",
            group_name="tf-config-extra-test",
            service_logging=True,
            auto_update=True,
            update_end_time="19:05:00",
            update_start_time="17:05:00",
            machine_group_type=tencentcloud.cls.MachineGroupMachineGroupTypeArgs(
                type="ip",
                values=[
                    "192.168.1.1",
                    "192.168.1.2",
                ],
            ))
        extra = tencentcloud.cls.ConfigExtra("extra",
            topic_id=topic.id,
            type="container_file",
            log_type="json_log",
            config_flag="label_k8s",
            logset_id=logset.id,
            logset_name=logset.logset_name,
            topic_name=topic.topic_name,
            container_file=tencentcloud.cls.ConfigExtraContainerFileArgs(
                container="nginx",
                file_pattern="log",
                log_path="/nginx",
                namespace="default",
                workload=tencentcloud.cls.ConfigExtraContainerFileWorkloadArgs(
                    container="nginx",
                    kind="deployment",
                    name="nginx",
                    namespace="default",
                ),
            ),
            group_id=group.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls config_extra can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/configExtra:ConfigExtra config_extra config_extra_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_flag: Collection configuration flag.
        :param pulumi.Input[pulumi.InputType['ConfigExtraContainerFileArgs']] container_file: Container file path info.
        :param pulumi.Input[pulumi.InputType['ConfigExtraContainerStdoutArgs']] container_stdout: Container stdout info.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExtraExcludePathArgs']]]] exclude_paths: Collection path blocklist.
        :param pulumi.Input[pulumi.InputType['ConfigExtraExtractRuleArgs']] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[str] group_id: Binding group id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: Binding group ids.
        :param pulumi.Input[pulumi.InputType['ConfigExtraHostFileArgs']] host_file: Node file config info.
        :param pulumi.Input[str] log_format: Log format.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] logset_id: Logset Id.
        :param pulumi.Input[str] logset_name: Logset Name.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] topic_id: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] topic_name: Topic Name.
        :param pulumi.Input[str] type: Type. Valid values: container_stdout; container_file; host_file.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigExtraArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls config extra

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logset = tencentcloud.cls.Logset("logset",
            logset_name="tf-config-extra-test",
            tags={
                "test": "test",
            })
        topic = tencentcloud.cls.Topic("topic",
            auto_split=True,
            logset_id=logset.id,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "test": "test",
            },
            topic_name="tf-config-extra-test")
        group = tencentcloud.cls.MachineGroup("group",
            group_name="tf-config-extra-test",
            service_logging=True,
            auto_update=True,
            update_end_time="19:05:00",
            update_start_time="17:05:00",
            machine_group_type=tencentcloud.cls.MachineGroupMachineGroupTypeArgs(
                type="ip",
                values=[
                    "192.168.1.1",
                    "192.168.1.2",
                ],
            ))
        extra = tencentcloud.cls.ConfigExtra("extra",
            topic_id=topic.id,
            type="container_file",
            log_type="json_log",
            config_flag="label_k8s",
            logset_id=logset.id,
            logset_name=logset.logset_name,
            topic_name=topic.topic_name,
            container_file=tencentcloud.cls.ConfigExtraContainerFileArgs(
                container="nginx",
                file_pattern="log",
                log_path="/nginx",
                namespace="default",
                workload=tencentcloud.cls.ConfigExtraContainerFileWorkloadArgs(
                    container="nginx",
                    kind="deployment",
                    name="nginx",
                    namespace="default",
                ),
            ),
            group_id=group.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls config_extra can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/configExtra:ConfigExtra config_extra config_extra_id
        ```

        :param str resource_name: The name of the resource.
        :param ConfigExtraArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigExtraArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_flag: Optional[pulumi.Input[str]] = None,
                 container_file: Optional[pulumi.Input[pulumi.InputType['ConfigExtraContainerFileArgs']]] = None,
                 container_stdout: Optional[pulumi.Input[pulumi.InputType['ConfigExtraContainerStdoutArgs']]] = None,
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExtraExcludePathArgs']]]]] = None,
                 extract_rule: Optional[pulumi.Input[pulumi.InputType['ConfigExtraExtractRuleArgs']]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 host_file: Optional[pulumi.Input[pulumi.InputType['ConfigExtraHostFileArgs']]] = None,
                 log_format: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 logset_id: Optional[pulumi.Input[str]] = None,
                 logset_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 topic_id: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigExtraArgs.__new__(ConfigExtraArgs)

            if config_flag is None and not opts.urn:
                raise TypeError("Missing required property 'config_flag'")
            __props__.__dict__["config_flag"] = config_flag
            __props__.__dict__["container_file"] = container_file
            __props__.__dict__["container_stdout"] = container_stdout
            __props__.__dict__["exclude_paths"] = exclude_paths
            __props__.__dict__["extract_rule"] = extract_rule
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["group_ids"] = group_ids
            __props__.__dict__["host_file"] = host_file
            __props__.__dict__["log_format"] = log_format
            if log_type is None and not opts.urn:
                raise TypeError("Missing required property 'log_type'")
            __props__.__dict__["log_type"] = log_type
            if logset_id is None and not opts.urn:
                raise TypeError("Missing required property 'logset_id'")
            __props__.__dict__["logset_id"] = logset_id
            if logset_name is None and not opts.urn:
                raise TypeError("Missing required property 'logset_name'")
            __props__.__dict__["logset_name"] = logset_name
            __props__.__dict__["name"] = name
            if topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'topic_id'")
            __props__.__dict__["topic_id"] = topic_id
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["user_define_rule"] = user_define_rule
        super(ConfigExtra, __self__).__init__(
            'tencentcloud:Cls/configExtra:ConfigExtra',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_flag: Optional[pulumi.Input[str]] = None,
            container_file: Optional[pulumi.Input[pulumi.InputType['ConfigExtraContainerFileArgs']]] = None,
            container_stdout: Optional[pulumi.Input[pulumi.InputType['ConfigExtraContainerStdoutArgs']]] = None,
            exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExtraExcludePathArgs']]]]] = None,
            extract_rule: Optional[pulumi.Input[pulumi.InputType['ConfigExtraExtractRuleArgs']]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            host_file: Optional[pulumi.Input[pulumi.InputType['ConfigExtraHostFileArgs']]] = None,
            log_format: Optional[pulumi.Input[str]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            logset_id: Optional[pulumi.Input[str]] = None,
            logset_name: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            topic_id: Optional[pulumi.Input[str]] = None,
            topic_name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            user_define_rule: Optional[pulumi.Input[str]] = None) -> 'ConfigExtra':
        """
        Get an existing ConfigExtra resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config_flag: Collection configuration flag.
        :param pulumi.Input[pulumi.InputType['ConfigExtraContainerFileArgs']] container_file: Container file path info.
        :param pulumi.Input[pulumi.InputType['ConfigExtraContainerStdoutArgs']] container_stdout: Container stdout info.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExtraExcludePathArgs']]]] exclude_paths: Collection path blocklist.
        :param pulumi.Input[pulumi.InputType['ConfigExtraExtractRuleArgs']] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[str] group_id: Binding group id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: Binding group ids.
        :param pulumi.Input[pulumi.InputType['ConfigExtraHostFileArgs']] host_file: Node file config info.
        :param pulumi.Input[str] log_format: Log format.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] logset_id: Logset Id.
        :param pulumi.Input[str] logset_name: Logset Name.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] topic_id: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] topic_name: Topic Name.
        :param pulumi.Input[str] type: Type. Valid values: container_stdout; container_file; host_file.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigExtraState.__new__(_ConfigExtraState)

        __props__.__dict__["config_flag"] = config_flag
        __props__.__dict__["container_file"] = container_file
        __props__.__dict__["container_stdout"] = container_stdout
        __props__.__dict__["exclude_paths"] = exclude_paths
        __props__.__dict__["extract_rule"] = extract_rule
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["group_ids"] = group_ids
        __props__.__dict__["host_file"] = host_file
        __props__.__dict__["log_format"] = log_format
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["logset_id"] = logset_id
        __props__.__dict__["logset_name"] = logset_name
        __props__.__dict__["name"] = name
        __props__.__dict__["topic_id"] = topic_id
        __props__.__dict__["topic_name"] = topic_name
        __props__.__dict__["type"] = type
        __props__.__dict__["user_define_rule"] = user_define_rule
        return ConfigExtra(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configFlag")
    def config_flag(self) -> pulumi.Output[str]:
        """
        Collection configuration flag.
        """
        return pulumi.get(self, "config_flag")

    @property
    @pulumi.getter(name="containerFile")
    def container_file(self) -> pulumi.Output[Optional['outputs.ConfigExtraContainerFile']]:
        """
        Container file path info.
        """
        return pulumi.get(self, "container_file")

    @property
    @pulumi.getter(name="containerStdout")
    def container_stdout(self) -> pulumi.Output['outputs.ConfigExtraContainerStdout']:
        """
        Container stdout info.
        """
        return pulumi.get(self, "container_stdout")

    @property
    @pulumi.getter(name="excludePaths")
    def exclude_paths(self) -> pulumi.Output[Optional[Sequence['outputs.ConfigExtraExcludePath']]]:
        """
        Collection path blocklist.
        """
        return pulumi.get(self, "exclude_paths")

    @property
    @pulumi.getter(name="extractRule")
    def extract_rule(self) -> pulumi.Output['outputs.ConfigExtraExtractRule']:
        """
        Extraction rule. If ExtractRule is set, LogType must be set.
        """
        return pulumi.get(self, "extract_rule")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[str]]:
        """
        Binding group id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Binding group ids.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="hostFile")
    def host_file(self) -> pulumi.Output['outputs.ConfigExtraHostFile']:
        """
        Node file config info.
        """
        return pulumi.get(self, "host_file")

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> pulumi.Output[Optional[str]]:
        """
        Log format.
        """
        return pulumi.get(self, "log_format")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[str]:
        """
        Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter(name="logsetId")
    def logset_id(self) -> pulumi.Output[str]:
        """
        Logset Id.
        """
        return pulumi.get(self, "logset_id")

    @property
    @pulumi.getter(name="logsetName")
    def logset_name(self) -> pulumi.Output[str]:
        """
        Logset Name.
        """
        return pulumi.get(self, "logset_name")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Collection configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Output[str]:
        """
        Log topic ID (TopicId) of collection configuration.
        """
        return pulumi.get(self, "topic_id")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        Topic Name.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type. Valid values: container_stdout; container_file; host_file.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="userDefineRule")
    def user_define_rule(self) -> pulumi.Output[Optional[str]]:
        """
        Custom collection rule, which is a serialized JSON string.
        """
        return pulumi.get(self, "user_define_rule")

