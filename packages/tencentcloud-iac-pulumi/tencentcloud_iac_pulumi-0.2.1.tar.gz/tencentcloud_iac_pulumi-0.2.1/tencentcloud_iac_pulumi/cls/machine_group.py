# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MachineGroupArgs', 'MachineGroup']

@pulumi.input_type
class MachineGroupArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 machine_group_type: pulumi.Input['MachineGroupMachineGroupTypeArgs'],
                 auto_update: Optional[pulumi.Input[bool]] = None,
                 service_logging: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_end_time: Optional[pulumi.Input[str]] = None,
                 update_start_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MachineGroup resource.
        :param pulumi.Input[str] group_name: Machine group name, which must be unique.
        :param pulumi.Input['MachineGroupMachineGroupTypeArgs'] machine_group_type: Type of the machine group to be created.
        :param pulumi.Input[bool] auto_update: Whether to enable automatic update for the machine group.
        :param pulumi.Input[bool] service_logging: Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] update_end_time: Update end time. We recommend you update LogListener during off-peak hours.
        :param pulumi.Input[str] update_start_time: Update start time. We recommend you update LogListener during off-peak hours.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "machine_group_type", machine_group_type)
        if auto_update is not None:
            pulumi.set(__self__, "auto_update", auto_update)
        if service_logging is not None:
            pulumi.set(__self__, "service_logging", service_logging)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_end_time is not None:
            pulumi.set(__self__, "update_end_time", update_end_time)
        if update_start_time is not None:
            pulumi.set(__self__, "update_start_time", update_start_time)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        Machine group name, which must be unique.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="machineGroupType")
    def machine_group_type(self) -> pulumi.Input['MachineGroupMachineGroupTypeArgs']:
        """
        Type of the machine group to be created.
        """
        return pulumi.get(self, "machine_group_type")

    @machine_group_type.setter
    def machine_group_type(self, value: pulumi.Input['MachineGroupMachineGroupTypeArgs']):
        pulumi.set(self, "machine_group_type", value)

    @property
    @pulumi.getter(name="autoUpdate")
    def auto_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable automatic update for the machine group.
        """
        return pulumi.get(self, "auto_update")

    @auto_update.setter
    def auto_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_update", value)

    @property
    @pulumi.getter(name="serviceLogging")
    def service_logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
        """
        return pulumi.get(self, "service_logging")

    @service_logging.setter
    def service_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_logging", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateEndTime")
    def update_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update end time. We recommend you update LogListener during off-peak hours.
        """
        return pulumi.get(self, "update_end_time")

    @update_end_time.setter
    def update_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_end_time", value)

    @property
    @pulumi.getter(name="updateStartTime")
    def update_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update start time. We recommend you update LogListener during off-peak hours.
        """
        return pulumi.get(self, "update_start_time")

    @update_start_time.setter
    def update_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_start_time", value)


@pulumi.input_type
class _MachineGroupState:
    def __init__(__self__, *,
                 auto_update: Optional[pulumi.Input[bool]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 machine_group_type: Optional[pulumi.Input['MachineGroupMachineGroupTypeArgs']] = None,
                 service_logging: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_end_time: Optional[pulumi.Input[str]] = None,
                 update_start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MachineGroup resources.
        :param pulumi.Input[bool] auto_update: Whether to enable automatic update for the machine group.
        :param pulumi.Input[str] group_name: Machine group name, which must be unique.
        :param pulumi.Input['MachineGroupMachineGroupTypeArgs'] machine_group_type: Type of the machine group to be created.
        :param pulumi.Input[bool] service_logging: Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] update_end_time: Update end time. We recommend you update LogListener during off-peak hours.
        :param pulumi.Input[str] update_start_time: Update start time. We recommend you update LogListener during off-peak hours.
        """
        if auto_update is not None:
            pulumi.set(__self__, "auto_update", auto_update)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if machine_group_type is not None:
            pulumi.set(__self__, "machine_group_type", machine_group_type)
        if service_logging is not None:
            pulumi.set(__self__, "service_logging", service_logging)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_end_time is not None:
            pulumi.set(__self__, "update_end_time", update_end_time)
        if update_start_time is not None:
            pulumi.set(__self__, "update_start_time", update_start_time)

    @property
    @pulumi.getter(name="autoUpdate")
    def auto_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable automatic update for the machine group.
        """
        return pulumi.get(self, "auto_update")

    @auto_update.setter
    def auto_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_update", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Machine group name, which must be unique.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="machineGroupType")
    def machine_group_type(self) -> Optional[pulumi.Input['MachineGroupMachineGroupTypeArgs']]:
        """
        Type of the machine group to be created.
        """
        return pulumi.get(self, "machine_group_type")

    @machine_group_type.setter
    def machine_group_type(self, value: Optional[pulumi.Input['MachineGroupMachineGroupTypeArgs']]):
        pulumi.set(self, "machine_group_type", value)

    @property
    @pulumi.getter(name="serviceLogging")
    def service_logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
        """
        return pulumi.get(self, "service_logging")

    @service_logging.setter
    def service_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_logging", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateEndTime")
    def update_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update end time. We recommend you update LogListener during off-peak hours.
        """
        return pulumi.get(self, "update_end_time")

    @update_end_time.setter
    def update_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_end_time", value)

    @property
    @pulumi.getter(name="updateStartTime")
    def update_start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update start time. We recommend you update LogListener during off-peak hours.
        """
        return pulumi.get(self, "update_start_time")

    @update_start_time.setter
    def update_start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_start_time", value)


class MachineGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_update: Optional[pulumi.Input[bool]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 machine_group_type: Optional[pulumi.Input[pulumi.InputType['MachineGroupMachineGroupTypeArgs']]] = None,
                 service_logging: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_end_time: Optional[pulumi.Input[str]] = None,
                 update_start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls machine group.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.cls.MachineGroup("group",
            group_name="group",
            machine_group_type=tencentcloud.cls.MachineGroupMachineGroupTypeArgs(
                type="ip",
                values=[
                    "192.168.1.1",
                    "192.168.1.2",
                ],
            ),
            service_logging=True,
            tags={
                "test": "test1",
            },
            update_end_time="19:05:40",
            update_start_time="17:05:40")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls machine group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/machineGroup:MachineGroup group caf168e7-32cd-4ac6-bf89-1950a760e09c
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_update: Whether to enable automatic update for the machine group.
        :param pulumi.Input[str] group_name: Machine group name, which must be unique.
        :param pulumi.Input[pulumi.InputType['MachineGroupMachineGroupTypeArgs']] machine_group_type: Type of the machine group to be created.
        :param pulumi.Input[bool] service_logging: Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] update_end_time: Update end time. We recommend you update LogListener during off-peak hours.
        :param pulumi.Input[str] update_start_time: Update start time. We recommend you update LogListener during off-peak hours.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MachineGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls machine group.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        group = tencentcloud.cls.MachineGroup("group",
            group_name="group",
            machine_group_type=tencentcloud.cls.MachineGroupMachineGroupTypeArgs(
                type="ip",
                values=[
                    "192.168.1.1",
                    "192.168.1.2",
                ],
            ),
            service_logging=True,
            tags={
                "test": "test1",
            },
            update_end_time="19:05:40",
            update_start_time="17:05:40")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls machine group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/machineGroup:MachineGroup group caf168e7-32cd-4ac6-bf89-1950a760e09c
        ```

        :param str resource_name: The name of the resource.
        :param MachineGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MachineGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_update: Optional[pulumi.Input[bool]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 machine_group_type: Optional[pulumi.Input[pulumi.InputType['MachineGroupMachineGroupTypeArgs']]] = None,
                 service_logging: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 update_end_time: Optional[pulumi.Input[str]] = None,
                 update_start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MachineGroupArgs.__new__(MachineGroupArgs)

            __props__.__dict__["auto_update"] = auto_update
            if group_name is None and not opts.urn:
                raise TypeError("Missing required property 'group_name'")
            __props__.__dict__["group_name"] = group_name
            if machine_group_type is None and not opts.urn:
                raise TypeError("Missing required property 'machine_group_type'")
            __props__.__dict__["machine_group_type"] = machine_group_type
            __props__.__dict__["service_logging"] = service_logging
            __props__.__dict__["tags"] = tags
            __props__.__dict__["update_end_time"] = update_end_time
            __props__.__dict__["update_start_time"] = update_start_time
        super(MachineGroup, __self__).__init__(
            'tencentcloud:Cls/machineGroup:MachineGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_update: Optional[pulumi.Input[bool]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            machine_group_type: Optional[pulumi.Input[pulumi.InputType['MachineGroupMachineGroupTypeArgs']]] = None,
            service_logging: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            update_end_time: Optional[pulumi.Input[str]] = None,
            update_start_time: Optional[pulumi.Input[str]] = None) -> 'MachineGroup':
        """
        Get an existing MachineGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_update: Whether to enable automatic update for the machine group.
        :param pulumi.Input[str] group_name: Machine group name, which must be unique.
        :param pulumi.Input[pulumi.InputType['MachineGroupMachineGroupTypeArgs']] machine_group_type: Type of the machine group to be created.
        :param pulumi.Input[bool] service_logging: Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        :param pulumi.Input[str] update_end_time: Update end time. We recommend you update LogListener during off-peak hours.
        :param pulumi.Input[str] update_start_time: Update start time. We recommend you update LogListener during off-peak hours.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MachineGroupState.__new__(_MachineGroupState)

        __props__.__dict__["auto_update"] = auto_update
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["machine_group_type"] = machine_group_type
        __props__.__dict__["service_logging"] = service_logging
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_end_time"] = update_end_time
        __props__.__dict__["update_start_time"] = update_start_time
        return MachineGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoUpdate")
    def auto_update(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable automatic update for the machine group.
        """
        return pulumi.get(self, "auto_update")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[str]:
        """
        Machine group name, which must be unique.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="machineGroupType")
    def machine_group_type(self) -> pulumi.Output['outputs.MachineGroupMachineGroupType']:
        """
        Type of the machine group to be created.
        """
        return pulumi.get(self, "machine_group_type")

    @property
    @pulumi.getter(name="serviceLogging")
    def service_logging(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable the service log to record the logs generated by the LogListener service itself. After it is enabled, the internal logset cls_service_logging and the loglistener_status, loglistener_alarm, and loglistener_business log topics will be created, which will not incur fees.
        """
        return pulumi.get(self, "service_logging")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list. Up to 10 tag key-value pairs are supported and must be unique.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateEndTime")
    def update_end_time(self) -> pulumi.Output[Optional[str]]:
        """
        Update end time. We recommend you update LogListener during off-peak hours.
        """
        return pulumi.get(self, "update_end_time")

    @property
    @pulumi.getter(name="updateStartTime")
    def update_start_time(self) -> pulumi.Output[Optional[str]]:
        """
        Update start time. We recommend you update LogListener during off-peak hours.
        """
        return pulumi.get(self, "update_start_time")

