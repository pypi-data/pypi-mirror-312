# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmArgs', 'Alarm']

@pulumi.input_type
class AlarmArgs:
    def __init__(__self__, *,
                 alarm_notice_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 alarm_period: pulumi.Input[int],
                 alarm_targets: pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]],
                 condition: pulumi.Input[str],
                 monitor_time: pulumi.Input['AlarmMonitorTimeArgs'],
                 trigger_count: pulumi.Input[int],
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 analyses: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]]] = None,
                 call_back: Optional[pulumi.Input['AlarmCallBackArgs']] = None,
                 message_template: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Alarm resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_notice_ids: list of alarm notice id.
        :param pulumi.Input[int] alarm_period: alarm repeat cycle.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]] alarm_targets: list of alarm target.
        :param pulumi.Input[str] condition: triggering conditions.
        :param pulumi.Input['AlarmMonitorTimeArgs'] monitor_time: monitor task execution time.
        :param pulumi.Input[int] trigger_count: continuous cycle.
        :param pulumi.Input[int] alarm_level: Alarm level. 0: Warning; 1: Info; 2: Critical. Default is 0.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]] analyses: multidimensional analysis.
        :param pulumi.Input['AlarmCallBackArgs'] call_back: user define callback.
        :param pulumi.Input[str] message_template: user define alarm notice.
        :param pulumi.Input[str] name: log alarm name.
        :param pulumi.Input[bool] status: whether to enable the alarm policy.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        pulumi.set(__self__, "alarm_notice_ids", alarm_notice_ids)
        pulumi.set(__self__, "alarm_period", alarm_period)
        pulumi.set(__self__, "alarm_targets", alarm_targets)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "monitor_time", monitor_time)
        pulumi.set(__self__, "trigger_count", trigger_count)
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if analyses is not None:
            pulumi.set(__self__, "analyses", analyses)
        if call_back is not None:
            pulumi.set(__self__, "call_back", call_back)
        if message_template is not None:
            pulumi.set(__self__, "message_template", message_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="alarmNoticeIds")
    def alarm_notice_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        list of alarm notice id.
        """
        return pulumi.get(self, "alarm_notice_ids")

    @alarm_notice_ids.setter
    def alarm_notice_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "alarm_notice_ids", value)

    @property
    @pulumi.getter(name="alarmPeriod")
    def alarm_period(self) -> pulumi.Input[int]:
        """
        alarm repeat cycle.
        """
        return pulumi.get(self, "alarm_period")

    @alarm_period.setter
    def alarm_period(self, value: pulumi.Input[int]):
        pulumi.set(self, "alarm_period", value)

    @property
    @pulumi.getter(name="alarmTargets")
    def alarm_targets(self) -> pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]]:
        """
        list of alarm target.
        """
        return pulumi.get(self, "alarm_targets")

    @alarm_targets.setter
    def alarm_targets(self, value: pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]]):
        pulumi.set(self, "alarm_targets", value)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        """
        triggering conditions.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="monitorTime")
    def monitor_time(self) -> pulumi.Input['AlarmMonitorTimeArgs']:
        """
        monitor task execution time.
        """
        return pulumi.get(self, "monitor_time")

    @monitor_time.setter
    def monitor_time(self, value: pulumi.Input['AlarmMonitorTimeArgs']):
        pulumi.set(self, "monitor_time", value)

    @property
    @pulumi.getter(name="triggerCount")
    def trigger_count(self) -> pulumi.Input[int]:
        """
        continuous cycle.
        """
        return pulumi.get(self, "trigger_count")

    @trigger_count.setter
    def trigger_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "trigger_count", value)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[int]]:
        """
        Alarm level. 0: Warning; 1: Info; 2: Critical. Default is 0.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_level", value)

    @property
    @pulumi.getter
    def analyses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]]]:
        """
        multidimensional analysis.
        """
        return pulumi.get(self, "analyses")

    @analyses.setter
    def analyses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]]]):
        pulumi.set(self, "analyses", value)

    @property
    @pulumi.getter(name="callBack")
    def call_back(self) -> Optional[pulumi.Input['AlarmCallBackArgs']]:
        """
        user define callback.
        """
        return pulumi.get(self, "call_back")

    @call_back.setter
    def call_back(self, value: Optional[pulumi.Input['AlarmCallBackArgs']]):
        pulumi.set(self, "call_back", value)

    @property
    @pulumi.getter(name="messageTemplate")
    def message_template(self) -> Optional[pulumi.Input[str]]:
        """
        user define alarm notice.
        """
        return pulumi.get(self, "message_template")

    @message_template.setter
    def message_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        log alarm name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable the alarm policy.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _AlarmState:
    def __init__(__self__, *,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alarm_period: Optional[pulumi.Input[int]] = None,
                 alarm_targets: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]]] = None,
                 analyses: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]]] = None,
                 call_back: Optional[pulumi.Input['AlarmCallBackArgs']] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 message_template: Optional[pulumi.Input[str]] = None,
                 monitor_time: Optional[pulumi.Input['AlarmMonitorTimeArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trigger_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Alarm resources.
        :param pulumi.Input[int] alarm_level: Alarm level. 0: Warning; 1: Info; 2: Critical. Default is 0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_notice_ids: list of alarm notice id.
        :param pulumi.Input[int] alarm_period: alarm repeat cycle.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]] alarm_targets: list of alarm target.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]] analyses: multidimensional analysis.
        :param pulumi.Input['AlarmCallBackArgs'] call_back: user define callback.
        :param pulumi.Input[str] condition: triggering conditions.
        :param pulumi.Input[str] message_template: user define alarm notice.
        :param pulumi.Input['AlarmMonitorTimeArgs'] monitor_time: monitor task execution time.
        :param pulumi.Input[str] name: log alarm name.
        :param pulumi.Input[bool] status: whether to enable the alarm policy.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trigger_count: continuous cycle.
        """
        if alarm_level is not None:
            pulumi.set(__self__, "alarm_level", alarm_level)
        if alarm_notice_ids is not None:
            pulumi.set(__self__, "alarm_notice_ids", alarm_notice_ids)
        if alarm_period is not None:
            pulumi.set(__self__, "alarm_period", alarm_period)
        if alarm_targets is not None:
            pulumi.set(__self__, "alarm_targets", alarm_targets)
        if analyses is not None:
            pulumi.set(__self__, "analyses", analyses)
        if call_back is not None:
            pulumi.set(__self__, "call_back", call_back)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if message_template is not None:
            pulumi.set(__self__, "message_template", message_template)
        if monitor_time is not None:
            pulumi.set(__self__, "monitor_time", monitor_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trigger_count is not None:
            pulumi.set(__self__, "trigger_count", trigger_count)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> Optional[pulumi.Input[int]]:
        """
        Alarm level. 0: Warning; 1: Info; 2: Critical. Default is 0.
        """
        return pulumi.get(self, "alarm_level")

    @alarm_level.setter
    def alarm_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_level", value)

    @property
    @pulumi.getter(name="alarmNoticeIds")
    def alarm_notice_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of alarm notice id.
        """
        return pulumi.get(self, "alarm_notice_ids")

    @alarm_notice_ids.setter
    def alarm_notice_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alarm_notice_ids", value)

    @property
    @pulumi.getter(name="alarmPeriod")
    def alarm_period(self) -> Optional[pulumi.Input[int]]:
        """
        alarm repeat cycle.
        """
        return pulumi.get(self, "alarm_period")

    @alarm_period.setter
    def alarm_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "alarm_period", value)

    @property
    @pulumi.getter(name="alarmTargets")
    def alarm_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]]]:
        """
        list of alarm target.
        """
        return pulumi.get(self, "alarm_targets")

    @alarm_targets.setter
    def alarm_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAlarmTargetArgs']]]]):
        pulumi.set(self, "alarm_targets", value)

    @property
    @pulumi.getter
    def analyses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]]]:
        """
        multidimensional analysis.
        """
        return pulumi.get(self, "analyses")

    @analyses.setter
    def analyses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmAnalysisArgs']]]]):
        pulumi.set(self, "analyses", value)

    @property
    @pulumi.getter(name="callBack")
    def call_back(self) -> Optional[pulumi.Input['AlarmCallBackArgs']]:
        """
        user define callback.
        """
        return pulumi.get(self, "call_back")

    @call_back.setter
    def call_back(self, value: Optional[pulumi.Input['AlarmCallBackArgs']]):
        pulumi.set(self, "call_back", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        triggering conditions.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="messageTemplate")
    def message_template(self) -> Optional[pulumi.Input[str]]:
        """
        user define alarm notice.
        """
        return pulumi.get(self, "message_template")

    @message_template.setter
    def message_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_template", value)

    @property
    @pulumi.getter(name="monitorTime")
    def monitor_time(self) -> Optional[pulumi.Input['AlarmMonitorTimeArgs']]:
        """
        monitor task execution time.
        """
        return pulumi.get(self, "monitor_time")

    @monitor_time.setter
    def monitor_time(self, value: Optional[pulumi.Input['AlarmMonitorTimeArgs']]):
        pulumi.set(self, "monitor_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        log alarm name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to enable the alarm policy.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="triggerCount")
    def trigger_count(self) -> Optional[pulumi.Input[int]]:
        """
        continuous cycle.
        """
        return pulumi.get(self, "trigger_count")

    @trigger_count.setter
    def trigger_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_count", value)


class Alarm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alarm_period: Optional[pulumi.Input[int]] = None,
                 alarm_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAlarmTargetArgs']]]]] = None,
                 analyses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAnalysisArgs']]]]] = None,
                 call_back: Optional[pulumi.Input[pulumi.InputType['AlarmCallBackArgs']]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 message_template: Optional[pulumi.Input[str]] = None,
                 monitor_time: Optional[pulumi.Input[pulumi.InputType['AlarmMonitorTimeArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trigger_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls alarm

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cls.Alarm("example",
            alarm_level=0,
            alarm_notice_ids=["notice-0850756b-245d-4bc7-bb27-2a58fffc780b"],
            alarm_period=15,
            alarm_targets=[tencentcloud.cls.AlarmAlarmTargetArgs(
                end_time_offset=0,
                logset_id="33aaf0ae-6163-411b-a415-9f27450f68db",
                number=1,
                query="status:>500 | select count(*) as errorCounts",
                start_time_offset=-15,
                syntax_rule=1,
                topic_id="88735a07-bea4-4985-8763-e9deb6da4fad",
            )],
            analyses=[tencentcloud.cls.AlarmAnalysisArgs(
                config_infos=[tencentcloud.cls.AlarmAnalysisConfigInfoArgs(
                    key="QueryIndex",
                    value="1",
                )],
                content="__FILENAME__",
                name="terraform",
                type="field",
            )],
            condition="test",
            message_template="{{.Label}}",
            monitor_time=tencentcloud.cls.AlarmMonitorTimeArgs(
                time=1,
                type="Period",
            ),
            status=True,
            tags={
                "createdBy": "terraform",
            },
            trigger_count=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls alarm can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/alarm:Alarm example alarm-d8529662-e10f-440c-ba80-50f3dcf215a3
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] alarm_level: Alarm level. 0: Warning; 1: Info; 2: Critical. Default is 0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_notice_ids: list of alarm notice id.
        :param pulumi.Input[int] alarm_period: alarm repeat cycle.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAlarmTargetArgs']]]] alarm_targets: list of alarm target.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAnalysisArgs']]]] analyses: multidimensional analysis.
        :param pulumi.Input[pulumi.InputType['AlarmCallBackArgs']] call_back: user define callback.
        :param pulumi.Input[str] condition: triggering conditions.
        :param pulumi.Input[str] message_template: user define alarm notice.
        :param pulumi.Input[pulumi.InputType['AlarmMonitorTimeArgs']] monitor_time: monitor task execution time.
        :param pulumi.Input[str] name: log alarm name.
        :param pulumi.Input[bool] status: whether to enable the alarm policy.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trigger_count: continuous cycle.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls alarm

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cls.Alarm("example",
            alarm_level=0,
            alarm_notice_ids=["notice-0850756b-245d-4bc7-bb27-2a58fffc780b"],
            alarm_period=15,
            alarm_targets=[tencentcloud.cls.AlarmAlarmTargetArgs(
                end_time_offset=0,
                logset_id="33aaf0ae-6163-411b-a415-9f27450f68db",
                number=1,
                query="status:>500 | select count(*) as errorCounts",
                start_time_offset=-15,
                syntax_rule=1,
                topic_id="88735a07-bea4-4985-8763-e9deb6da4fad",
            )],
            analyses=[tencentcloud.cls.AlarmAnalysisArgs(
                config_infos=[tencentcloud.cls.AlarmAnalysisConfigInfoArgs(
                    key="QueryIndex",
                    value="1",
                )],
                content="__FILENAME__",
                name="terraform",
                type="field",
            )],
            condition="test",
            message_template="{{.Label}}",
            monitor_time=tencentcloud.cls.AlarmMonitorTimeArgs(
                time=1,
                type="Period",
            ),
            status=True,
            tags={
                "createdBy": "terraform",
            },
            trigger_count=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls alarm can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/alarm:Alarm example alarm-d8529662-e10f-440c-ba80-50f3dcf215a3
        ```

        :param str resource_name: The name of the resource.
        :param AlarmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alarm_level: Optional[pulumi.Input[int]] = None,
                 alarm_notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alarm_period: Optional[pulumi.Input[int]] = None,
                 alarm_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAlarmTargetArgs']]]]] = None,
                 analyses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAnalysisArgs']]]]] = None,
                 call_back: Optional[pulumi.Input[pulumi.InputType['AlarmCallBackArgs']]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 message_template: Optional[pulumi.Input[str]] = None,
                 monitor_time: Optional[pulumi.Input[pulumi.InputType['AlarmMonitorTimeArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trigger_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmArgs.__new__(AlarmArgs)

            __props__.__dict__["alarm_level"] = alarm_level
            if alarm_notice_ids is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_notice_ids'")
            __props__.__dict__["alarm_notice_ids"] = alarm_notice_ids
            if alarm_period is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_period'")
            __props__.__dict__["alarm_period"] = alarm_period
            if alarm_targets is None and not opts.urn:
                raise TypeError("Missing required property 'alarm_targets'")
            __props__.__dict__["alarm_targets"] = alarm_targets
            __props__.__dict__["analyses"] = analyses
            __props__.__dict__["call_back"] = call_back
            if condition is None and not opts.urn:
                raise TypeError("Missing required property 'condition'")
            __props__.__dict__["condition"] = condition
            __props__.__dict__["message_template"] = message_template
            if monitor_time is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_time'")
            __props__.__dict__["monitor_time"] = monitor_time
            __props__.__dict__["name"] = name
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            if trigger_count is None and not opts.urn:
                raise TypeError("Missing required property 'trigger_count'")
            __props__.__dict__["trigger_count"] = trigger_count
        super(Alarm, __self__).__init__(
            'tencentcloud:Cls/alarm:Alarm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alarm_level: Optional[pulumi.Input[int]] = None,
            alarm_notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            alarm_period: Optional[pulumi.Input[int]] = None,
            alarm_targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAlarmTargetArgs']]]]] = None,
            analyses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAnalysisArgs']]]]] = None,
            call_back: Optional[pulumi.Input[pulumi.InputType['AlarmCallBackArgs']]] = None,
            condition: Optional[pulumi.Input[str]] = None,
            message_template: Optional[pulumi.Input[str]] = None,
            monitor_time: Optional[pulumi.Input[pulumi.InputType['AlarmMonitorTimeArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[bool]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            trigger_count: Optional[pulumi.Input[int]] = None) -> 'Alarm':
        """
        Get an existing Alarm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] alarm_level: Alarm level. 0: Warning; 1: Info; 2: Critical. Default is 0.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] alarm_notice_ids: list of alarm notice id.
        :param pulumi.Input[int] alarm_period: alarm repeat cycle.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAlarmTargetArgs']]]] alarm_targets: list of alarm target.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmAnalysisArgs']]]] analyses: multidimensional analysis.
        :param pulumi.Input[pulumi.InputType['AlarmCallBackArgs']] call_back: user define callback.
        :param pulumi.Input[str] condition: triggering conditions.
        :param pulumi.Input[str] message_template: user define alarm notice.
        :param pulumi.Input[pulumi.InputType['AlarmMonitorTimeArgs']] monitor_time: monitor task execution time.
        :param pulumi.Input[str] name: log alarm name.
        :param pulumi.Input[bool] status: whether to enable the alarm policy.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trigger_count: continuous cycle.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmState.__new__(_AlarmState)

        __props__.__dict__["alarm_level"] = alarm_level
        __props__.__dict__["alarm_notice_ids"] = alarm_notice_ids
        __props__.__dict__["alarm_period"] = alarm_period
        __props__.__dict__["alarm_targets"] = alarm_targets
        __props__.__dict__["analyses"] = analyses
        __props__.__dict__["call_back"] = call_back
        __props__.__dict__["condition"] = condition
        __props__.__dict__["message_template"] = message_template
        __props__.__dict__["monitor_time"] = monitor_time
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trigger_count"] = trigger_count
        return Alarm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alarmLevel")
    def alarm_level(self) -> pulumi.Output[int]:
        """
        Alarm level. 0: Warning; 1: Info; 2: Critical. Default is 0.
        """
        return pulumi.get(self, "alarm_level")

    @property
    @pulumi.getter(name="alarmNoticeIds")
    def alarm_notice_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        list of alarm notice id.
        """
        return pulumi.get(self, "alarm_notice_ids")

    @property
    @pulumi.getter(name="alarmPeriod")
    def alarm_period(self) -> pulumi.Output[int]:
        """
        alarm repeat cycle.
        """
        return pulumi.get(self, "alarm_period")

    @property
    @pulumi.getter(name="alarmTargets")
    def alarm_targets(self) -> pulumi.Output[Sequence['outputs.AlarmAlarmTarget']]:
        """
        list of alarm target.
        """
        return pulumi.get(self, "alarm_targets")

    @property
    @pulumi.getter
    def analyses(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmAnalysis']]]:
        """
        multidimensional analysis.
        """
        return pulumi.get(self, "analyses")

    @property
    @pulumi.getter(name="callBack")
    def call_back(self) -> pulumi.Output['outputs.AlarmCallBack']:
        """
        user define callback.
        """
        return pulumi.get(self, "call_back")

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Output[str]:
        """
        triggering conditions.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="messageTemplate")
    def message_template(self) -> pulumi.Output[Optional[str]]:
        """
        user define alarm notice.
        """
        return pulumi.get(self, "message_template")

    @property
    @pulumi.getter(name="monitorTime")
    def monitor_time(self) -> pulumi.Output['outputs.AlarmMonitorTime']:
        """
        monitor task execution time.
        """
        return pulumi.get(self, "monitor_time")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        log alarm name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[bool]:
        """
        whether to enable the alarm policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="triggerCount")
    def trigger_count(self) -> pulumi.Output[int]:
        """
        continuous cycle.
        """
        return pulumi.get(self, "trigger_count")

