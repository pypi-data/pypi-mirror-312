# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetShipperTasksResult',
    'AwaitableGetShipperTasksResult',
    'get_shipper_tasks',
    'get_shipper_tasks_output',
]

@pulumi.output_type
class GetShipperTasksResult:
    """
    A collection of values returned by getShipperTasks.
    """
    def __init__(__self__, end_time=None, id=None, result_output_file=None, shipper_id=None, start_time=None, tasks=None):
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if shipper_id and not isinstance(shipper_id, str):
            raise TypeError("Expected argument 'shipper_id' to be a str")
        pulumi.set(__self__, "shipper_id", shipper_id)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        """
        end time(ms).
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="shipperId")
    def shipper_id(self) -> str:
        """
        shipper id.
        """
        return pulumi.get(self, "shipper_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        """
        start time(ms).
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetShipperTasksTaskResult']:
        """
        .
        """
        return pulumi.get(self, "tasks")


class AwaitableGetShipperTasksResult(GetShipperTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetShipperTasksResult(
            end_time=self.end_time,
            id=self.id,
            result_output_file=self.result_output_file,
            shipper_id=self.shipper_id,
            start_time=self.start_time,
            tasks=self.tasks)


def get_shipper_tasks(end_time: Optional[int] = None,
                      result_output_file: Optional[str] = None,
                      shipper_id: Optional[str] = None,
                      start_time: Optional[int] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetShipperTasksResult:
    """
    Use this data source to query detailed information of cls shipper_tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    shipper_tasks = tencentcloud.Cls.get_shipper_tasks(end_time=160749910800,
        shipper_id="dbde3c9b-ea16-4032-bc2a-d8fa65567a8e",
        start_time=160749910700)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: end time(ms).
    :param str result_output_file: Used to save results.
    :param str shipper_id: shipper id.
    :param int start_time: start time(ms).
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['resultOutputFile'] = result_output_file
    __args__['shipperId'] = shipper_id
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cls/getShipperTasks:getShipperTasks', __args__, opts=opts, typ=GetShipperTasksResult).value

    return AwaitableGetShipperTasksResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        shipper_id=pulumi.get(__ret__, 'shipper_id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        tasks=pulumi.get(__ret__, 'tasks'))


@_utilities.lift_output_func(get_shipper_tasks)
def get_shipper_tasks_output(end_time: Optional[pulumi.Input[int]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             shipper_id: Optional[pulumi.Input[str]] = None,
                             start_time: Optional[pulumi.Input[int]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetShipperTasksResult]:
    """
    Use this data source to query detailed information of cls shipper_tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    shipper_tasks = tencentcloud.Cls.get_shipper_tasks(end_time=160749910800,
        shipper_id="dbde3c9b-ea16-4032-bc2a-d8fa65567a8e",
        start_time=160749910700)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: end time(ms).
    :param str result_output_file: Used to save results.
    :param str shipper_id: shipper id.
    :param int start_time: start time(ms).
    """
    ...
