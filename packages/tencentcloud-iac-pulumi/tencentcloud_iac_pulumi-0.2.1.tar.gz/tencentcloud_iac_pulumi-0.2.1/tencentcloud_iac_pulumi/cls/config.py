# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ConfigArgs', 'Config']

@pulumi.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 extract_rule: pulumi.Input['ConfigExtractRuleArgs'],
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Config resource.
        :param pulumi.Input['ConfigExtractRuleArgs'] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]] exclude_paths: Collection path blocklist.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] output: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] path: Log collection path containing the filename.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        pulumi.set(__self__, "extract_rule", extract_rule)
        if exclude_paths is not None:
            pulumi.set(__self__, "exclude_paths", exclude_paths)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if user_define_rule is not None:
            pulumi.set(__self__, "user_define_rule", user_define_rule)

    @property
    @pulumi.getter(name="extractRule")
    def extract_rule(self) -> pulumi.Input['ConfigExtractRuleArgs']:
        """
        Extraction rule. If ExtractRule is set, LogType must be set.
        """
        return pulumi.get(self, "extract_rule")

    @extract_rule.setter
    def extract_rule(self, value: pulumi.Input['ConfigExtractRuleArgs']):
        pulumi.set(self, "extract_rule", value)

    @property
    @pulumi.getter(name="excludePaths")
    def exclude_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]]]:
        """
        Collection path blocklist.
        """
        return pulumi.get(self, "exclude_paths")

    @exclude_paths.setter
    def exclude_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]]]):
        pulumi.set(self, "exclude_paths", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Collection configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic ID (TopicId) of collection configuration.
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Log collection path containing the filename.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="userDefineRule")
    def user_define_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Custom collection rule, which is a serialized JSON string.
        """
        return pulumi.get(self, "user_define_rule")

    @user_define_rule.setter
    def user_define_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_define_rule", value)


@pulumi.input_type
class _ConfigState:
    def __init__(__self__, *,
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]]] = None,
                 extract_rule: Optional[pulumi.Input['ConfigExtractRuleArgs']] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Config resources.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]] exclude_paths: Collection path blocklist.
        :param pulumi.Input['ConfigExtractRuleArgs'] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] output: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] path: Log collection path containing the filename.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        if exclude_paths is not None:
            pulumi.set(__self__, "exclude_paths", exclude_paths)
        if extract_rule is not None:
            pulumi.set(__self__, "extract_rule", extract_rule)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if user_define_rule is not None:
            pulumi.set(__self__, "user_define_rule", user_define_rule)

    @property
    @pulumi.getter(name="excludePaths")
    def exclude_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]]]:
        """
        Collection path blocklist.
        """
        return pulumi.get(self, "exclude_paths")

    @exclude_paths.setter
    def exclude_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigExcludePathArgs']]]]):
        pulumi.set(self, "exclude_paths", value)

    @property
    @pulumi.getter(name="extractRule")
    def extract_rule(self) -> Optional[pulumi.Input['ConfigExtractRuleArgs']]:
        """
        Extraction rule. If ExtractRule is set, LogType must be set.
        """
        return pulumi.get(self, "extract_rule")

    @extract_rule.setter
    def extract_rule(self, value: Optional[pulumi.Input['ConfigExtractRuleArgs']]):
        pulumi.set(self, "extract_rule", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Collection configuration name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[str]]:
        """
        Log topic ID (TopicId) of collection configuration.
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Log collection path containing the filename.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="userDefineRule")
    def user_define_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Custom collection rule, which is a serialized JSON string.
        """
        return pulumi.get(self, "user_define_rule")

    @user_define_rule.setter
    def user_define_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_define_rule", value)


class Config(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExcludePathArgs']]]]] = None,
                 extract_rule: Optional[pulumi.Input[pulumi.InputType['ConfigExtractRuleArgs']]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = tencentcloud.cls.Config("config",
            exclude_paths=[
                tencentcloud.cls.ConfigExcludePathArgs(
                    type="Path",
                    value="/data",
                ),
                tencentcloud.cls.ConfigExcludePathArgs(
                    type="File",
                    value="/file",
                ),
            ],
            extract_rule=tencentcloud.cls.ConfigExtractRuleArgs(
                backtracking=-1,
                filter_key_regexes=[
                    tencentcloud.cls.ConfigExtractRuleFilterKeyRegexArgs(
                        key="key1",
                        regex="value1",
                    ),
                    tencentcloud.cls.ConfigExtractRuleFilterKeyRegexArgs(
                        key="key2",
                        regex="value2",
                    ),
                ],
                un_match_log_key="config",
                un_match_up_load_switch=True,
            ),
            log_type="json_log",
            output="4d07fba0-b93e-4e0b-9a7f-d58542560bbb",
            path="/var/log/kubernetes")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/config:Config config config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExcludePathArgs']]]] exclude_paths: Collection path blocklist.
        :param pulumi.Input[pulumi.InputType['ConfigExtractRuleArgs']] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] output: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] path: Log collection path containing the filename.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = tencentcloud.cls.Config("config",
            exclude_paths=[
                tencentcloud.cls.ConfigExcludePathArgs(
                    type="Path",
                    value="/data",
                ),
                tencentcloud.cls.ConfigExcludePathArgs(
                    type="File",
                    value="/file",
                ),
            ],
            extract_rule=tencentcloud.cls.ConfigExtractRuleArgs(
                backtracking=-1,
                filter_key_regexes=[
                    tencentcloud.cls.ConfigExtractRuleFilterKeyRegexArgs(
                        key="key1",
                        regex="value1",
                    ),
                    tencentcloud.cls.ConfigExtractRuleFilterKeyRegexArgs(
                        key="key2",
                        regex="value2",
                    ),
                ],
                un_match_log_key="config",
                un_match_up_load_switch=True,
            ),
            log_type="json_log",
            output="4d07fba0-b93e-4e0b-9a7f-d58542560bbb",
            path="/var/log/kubernetes")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/config:Config config config_id
        ```

        :param str resource_name: The name of the resource.
        :param ConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExcludePathArgs']]]]] = None,
                 extract_rule: Optional[pulumi.Input[pulumi.InputType['ConfigExtractRuleArgs']]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 output: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 user_define_rule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigArgs.__new__(ConfigArgs)

            __props__.__dict__["exclude_paths"] = exclude_paths
            if extract_rule is None and not opts.urn:
                raise TypeError("Missing required property 'extract_rule'")
            __props__.__dict__["extract_rule"] = extract_rule
            __props__.__dict__["log_type"] = log_type
            __props__.__dict__["name"] = name
            __props__.__dict__["output"] = output
            __props__.__dict__["path"] = path
            __props__.__dict__["user_define_rule"] = user_define_rule
        super(Config, __self__).__init__(
            'tencentcloud:Cls/config:Config',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            exclude_paths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExcludePathArgs']]]]] = None,
            extract_rule: Optional[pulumi.Input[pulumi.InputType['ConfigExtractRuleArgs']]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            output: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            user_define_rule: Optional[pulumi.Input[str]] = None) -> 'Config':
        """
        Get an existing Config resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfigExcludePathArgs']]]] exclude_paths: Collection path blocklist.
        :param pulumi.Input[pulumi.InputType['ConfigExtractRuleArgs']] extract_rule: Extraction rule. If ExtractRule is set, LogType must be set.
        :param pulumi.Input[str] log_type: Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        :param pulumi.Input[str] name: Collection configuration name.
        :param pulumi.Input[str] output: Log topic ID (TopicId) of collection configuration.
        :param pulumi.Input[str] path: Log collection path containing the filename.
        :param pulumi.Input[str] user_define_rule: Custom collection rule, which is a serialized JSON string.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConfigState.__new__(_ConfigState)

        __props__.__dict__["exclude_paths"] = exclude_paths
        __props__.__dict__["extract_rule"] = extract_rule
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["name"] = name
        __props__.__dict__["output"] = output
        __props__.__dict__["path"] = path
        __props__.__dict__["user_define_rule"] = user_define_rule
        return Config(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="excludePaths")
    def exclude_paths(self) -> pulumi.Output[Optional[Sequence['outputs.ConfigExcludePath']]]:
        """
        Collection path blocklist.
        """
        return pulumi.get(self, "exclude_paths")

    @property
    @pulumi.getter(name="extractRule")
    def extract_rule(self) -> pulumi.Output['outputs.ConfigExtractRule']:
        """
        Extraction rule. If ExtractRule is set, LogType must be set.
        """
        return pulumi.get(self, "extract_rule")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Collection configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def output(self) -> pulumi.Output[Optional[str]]:
        """
        Log topic ID (TopicId) of collection configuration.
        """
        return pulumi.get(self, "output")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[str]]:
        """
        Log collection path containing the filename.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="userDefineRule")
    def user_define_rule(self) -> pulumi.Output[Optional[str]]:
        """
        Custom collection rule, which is a serialized JSON string.
        """
        return pulumi.get(self, "user_define_rule")

