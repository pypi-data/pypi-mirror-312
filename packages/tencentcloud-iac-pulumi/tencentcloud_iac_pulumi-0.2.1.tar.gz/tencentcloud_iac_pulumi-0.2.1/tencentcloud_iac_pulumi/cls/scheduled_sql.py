# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScheduledSqlArgs', 'ScheduledSql']

@pulumi.input_type
class ScheduledSqlArgs:
    def __init__(__self__, *,
                 dst_resource: pulumi.Input['ScheduledSqlDstResourceArgs'],
                 enable_flag: pulumi.Input[int],
                 process_delay: pulumi.Input[int],
                 process_period: pulumi.Input[int],
                 process_start_time: pulumi.Input[int],
                 process_time_window: pulumi.Input[str],
                 process_type: pulumi.Input[int],
                 scheduled_sql_content: pulumi.Input[str],
                 src_topic_id: pulumi.Input[str],
                 src_topic_region: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None,
                 syntax_rule: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ScheduledSql resource.
        :param pulumi.Input['ScheduledSqlDstResourceArgs'] dst_resource: scheduled slq dst resource.
        :param pulumi.Input[int] enable_flag: task enable flag.
        :param pulumi.Input[int] process_delay: process delay.
        :param pulumi.Input[int] process_period: process period.
        :param pulumi.Input[int] process_start_time: process start timestamp.
        :param pulumi.Input[str] process_time_window: process time window.
        :param pulumi.Input[int] process_type: process type.
        :param pulumi.Input[str] scheduled_sql_content: scheduled sql content.
        :param pulumi.Input[str] src_topic_id: src topic id.
        :param pulumi.Input[str] src_topic_region: src topic region.
        :param pulumi.Input[str] name: task name.
        :param pulumi.Input[int] process_end_time: process end timestamp.
        :param pulumi.Input[int] syntax_rule: syntax rule.
        """
        pulumi.set(__self__, "dst_resource", dst_resource)
        pulumi.set(__self__, "enable_flag", enable_flag)
        pulumi.set(__self__, "process_delay", process_delay)
        pulumi.set(__self__, "process_period", process_period)
        pulumi.set(__self__, "process_start_time", process_start_time)
        pulumi.set(__self__, "process_time_window", process_time_window)
        pulumi.set(__self__, "process_type", process_type)
        pulumi.set(__self__, "scheduled_sql_content", scheduled_sql_content)
        pulumi.set(__self__, "src_topic_id", src_topic_id)
        pulumi.set(__self__, "src_topic_region", src_topic_region)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if process_end_time is not None:
            pulumi.set(__self__, "process_end_time", process_end_time)
        if syntax_rule is not None:
            pulumi.set(__self__, "syntax_rule", syntax_rule)

    @property
    @pulumi.getter(name="dstResource")
    def dst_resource(self) -> pulumi.Input['ScheduledSqlDstResourceArgs']:
        """
        scheduled slq dst resource.
        """
        return pulumi.get(self, "dst_resource")

    @dst_resource.setter
    def dst_resource(self, value: pulumi.Input['ScheduledSqlDstResourceArgs']):
        pulumi.set(self, "dst_resource", value)

    @property
    @pulumi.getter(name="enableFlag")
    def enable_flag(self) -> pulumi.Input[int]:
        """
        task enable flag.
        """
        return pulumi.get(self, "enable_flag")

    @enable_flag.setter
    def enable_flag(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable_flag", value)

    @property
    @pulumi.getter(name="processDelay")
    def process_delay(self) -> pulumi.Input[int]:
        """
        process delay.
        """
        return pulumi.get(self, "process_delay")

    @process_delay.setter
    def process_delay(self, value: pulumi.Input[int]):
        pulumi.set(self, "process_delay", value)

    @property
    @pulumi.getter(name="processPeriod")
    def process_period(self) -> pulumi.Input[int]:
        """
        process period.
        """
        return pulumi.get(self, "process_period")

    @process_period.setter
    def process_period(self, value: pulumi.Input[int]):
        pulumi.set(self, "process_period", value)

    @property
    @pulumi.getter(name="processStartTime")
    def process_start_time(self) -> pulumi.Input[int]:
        """
        process start timestamp.
        """
        return pulumi.get(self, "process_start_time")

    @process_start_time.setter
    def process_start_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "process_start_time", value)

    @property
    @pulumi.getter(name="processTimeWindow")
    def process_time_window(self) -> pulumi.Input[str]:
        """
        process time window.
        """
        return pulumi.get(self, "process_time_window")

    @process_time_window.setter
    def process_time_window(self, value: pulumi.Input[str]):
        pulumi.set(self, "process_time_window", value)

    @property
    @pulumi.getter(name="processType")
    def process_type(self) -> pulumi.Input[int]:
        """
        process type.
        """
        return pulumi.get(self, "process_type")

    @process_type.setter
    def process_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "process_type", value)

    @property
    @pulumi.getter(name="scheduledSqlContent")
    def scheduled_sql_content(self) -> pulumi.Input[str]:
        """
        scheduled sql content.
        """
        return pulumi.get(self, "scheduled_sql_content")

    @scheduled_sql_content.setter
    def scheduled_sql_content(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheduled_sql_content", value)

    @property
    @pulumi.getter(name="srcTopicId")
    def src_topic_id(self) -> pulumi.Input[str]:
        """
        src topic id.
        """
        return pulumi.get(self, "src_topic_id")

    @src_topic_id.setter
    def src_topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_topic_id", value)

    @property
    @pulumi.getter(name="srcTopicRegion")
    def src_topic_region(self) -> pulumi.Input[str]:
        """
        src topic region.
        """
        return pulumi.get(self, "src_topic_region")

    @src_topic_region.setter
    def src_topic_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_topic_region", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        task name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="processEndTime")
    def process_end_time(self) -> Optional[pulumi.Input[int]]:
        """
        process end timestamp.
        """
        return pulumi.get(self, "process_end_time")

    @process_end_time.setter
    def process_end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_end_time", value)

    @property
    @pulumi.getter(name="syntaxRule")
    def syntax_rule(self) -> Optional[pulumi.Input[int]]:
        """
        syntax rule.
        """
        return pulumi.get(self, "syntax_rule")

    @syntax_rule.setter
    def syntax_rule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "syntax_rule", value)


@pulumi.input_type
class _ScheduledSqlState:
    def __init__(__self__, *,
                 dst_resource: Optional[pulumi.Input['ScheduledSqlDstResourceArgs']] = None,
                 enable_flag: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 process_delay: Optional[pulumi.Input[int]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None,
                 process_period: Optional[pulumi.Input[int]] = None,
                 process_start_time: Optional[pulumi.Input[int]] = None,
                 process_time_window: Optional[pulumi.Input[str]] = None,
                 process_type: Optional[pulumi.Input[int]] = None,
                 scheduled_sql_content: Optional[pulumi.Input[str]] = None,
                 src_topic_id: Optional[pulumi.Input[str]] = None,
                 src_topic_region: Optional[pulumi.Input[str]] = None,
                 syntax_rule: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ScheduledSql resources.
        :param pulumi.Input['ScheduledSqlDstResourceArgs'] dst_resource: scheduled slq dst resource.
        :param pulumi.Input[int] enable_flag: task enable flag.
        :param pulumi.Input[str] name: task name.
        :param pulumi.Input[int] process_delay: process delay.
        :param pulumi.Input[int] process_end_time: process end timestamp.
        :param pulumi.Input[int] process_period: process period.
        :param pulumi.Input[int] process_start_time: process start timestamp.
        :param pulumi.Input[str] process_time_window: process time window.
        :param pulumi.Input[int] process_type: process type.
        :param pulumi.Input[str] scheduled_sql_content: scheduled sql content.
        :param pulumi.Input[str] src_topic_id: src topic id.
        :param pulumi.Input[str] src_topic_region: src topic region.
        :param pulumi.Input[int] syntax_rule: syntax rule.
        """
        if dst_resource is not None:
            pulumi.set(__self__, "dst_resource", dst_resource)
        if enable_flag is not None:
            pulumi.set(__self__, "enable_flag", enable_flag)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if process_delay is not None:
            pulumi.set(__self__, "process_delay", process_delay)
        if process_end_time is not None:
            pulumi.set(__self__, "process_end_time", process_end_time)
        if process_period is not None:
            pulumi.set(__self__, "process_period", process_period)
        if process_start_time is not None:
            pulumi.set(__self__, "process_start_time", process_start_time)
        if process_time_window is not None:
            pulumi.set(__self__, "process_time_window", process_time_window)
        if process_type is not None:
            pulumi.set(__self__, "process_type", process_type)
        if scheduled_sql_content is not None:
            pulumi.set(__self__, "scheduled_sql_content", scheduled_sql_content)
        if src_topic_id is not None:
            pulumi.set(__self__, "src_topic_id", src_topic_id)
        if src_topic_region is not None:
            pulumi.set(__self__, "src_topic_region", src_topic_region)
        if syntax_rule is not None:
            pulumi.set(__self__, "syntax_rule", syntax_rule)

    @property
    @pulumi.getter(name="dstResource")
    def dst_resource(self) -> Optional[pulumi.Input['ScheduledSqlDstResourceArgs']]:
        """
        scheduled slq dst resource.
        """
        return pulumi.get(self, "dst_resource")

    @dst_resource.setter
    def dst_resource(self, value: Optional[pulumi.Input['ScheduledSqlDstResourceArgs']]):
        pulumi.set(self, "dst_resource", value)

    @property
    @pulumi.getter(name="enableFlag")
    def enable_flag(self) -> Optional[pulumi.Input[int]]:
        """
        task enable flag.
        """
        return pulumi.get(self, "enable_flag")

    @enable_flag.setter
    def enable_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_flag", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        task name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="processDelay")
    def process_delay(self) -> Optional[pulumi.Input[int]]:
        """
        process delay.
        """
        return pulumi.get(self, "process_delay")

    @process_delay.setter
    def process_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_delay", value)

    @property
    @pulumi.getter(name="processEndTime")
    def process_end_time(self) -> Optional[pulumi.Input[int]]:
        """
        process end timestamp.
        """
        return pulumi.get(self, "process_end_time")

    @process_end_time.setter
    def process_end_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_end_time", value)

    @property
    @pulumi.getter(name="processPeriod")
    def process_period(self) -> Optional[pulumi.Input[int]]:
        """
        process period.
        """
        return pulumi.get(self, "process_period")

    @process_period.setter
    def process_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_period", value)

    @property
    @pulumi.getter(name="processStartTime")
    def process_start_time(self) -> Optional[pulumi.Input[int]]:
        """
        process start timestamp.
        """
        return pulumi.get(self, "process_start_time")

    @process_start_time.setter
    def process_start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_start_time", value)

    @property
    @pulumi.getter(name="processTimeWindow")
    def process_time_window(self) -> Optional[pulumi.Input[str]]:
        """
        process time window.
        """
        return pulumi.get(self, "process_time_window")

    @process_time_window.setter
    def process_time_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "process_time_window", value)

    @property
    @pulumi.getter(name="processType")
    def process_type(self) -> Optional[pulumi.Input[int]]:
        """
        process type.
        """
        return pulumi.get(self, "process_type")

    @process_type.setter
    def process_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "process_type", value)

    @property
    @pulumi.getter(name="scheduledSqlContent")
    def scheduled_sql_content(self) -> Optional[pulumi.Input[str]]:
        """
        scheduled sql content.
        """
        return pulumi.get(self, "scheduled_sql_content")

    @scheduled_sql_content.setter
    def scheduled_sql_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduled_sql_content", value)

    @property
    @pulumi.getter(name="srcTopicId")
    def src_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        src topic id.
        """
        return pulumi.get(self, "src_topic_id")

    @src_topic_id.setter
    def src_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_topic_id", value)

    @property
    @pulumi.getter(name="srcTopicRegion")
    def src_topic_region(self) -> Optional[pulumi.Input[str]]:
        """
        src topic region.
        """
        return pulumi.get(self, "src_topic_region")

    @src_topic_region.setter
    def src_topic_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_topic_region", value)

    @property
    @pulumi.getter(name="syntaxRule")
    def syntax_rule(self) -> Optional[pulumi.Input[int]]:
        """
        syntax rule.
        """
        return pulumi.get(self, "syntax_rule")

    @syntax_rule.setter
    def syntax_rule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "syntax_rule", value)


class ScheduledSql(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_resource: Optional[pulumi.Input[pulumi.InputType['ScheduledSqlDstResourceArgs']]] = None,
                 enable_flag: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 process_delay: Optional[pulumi.Input[int]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None,
                 process_period: Optional[pulumi.Input[int]] = None,
                 process_start_time: Optional[pulumi.Input[int]] = None,
                 process_time_window: Optional[pulumi.Input[str]] = None,
                 process_type: Optional[pulumi.Input[int]] = None,
                 scheduled_sql_content: Optional[pulumi.Input[str]] = None,
                 src_topic_id: Optional[pulumi.Input[str]] = None,
                 src_topic_region: Optional[pulumi.Input[str]] = None,
                 syntax_rule: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a cls scheduled_sql

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logset = tencentcloud.cls.Logset("logset",
            logset_name="tf-example-logset",
            tags={
                "createdBy": "terraform",
            })
        topic = tencentcloud.cls.Topic("topic",
            topic_name="tf-example-topic",
            logset_id=logset.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "test": "test",
            })
        scheduled_sql = tencentcloud.cls.ScheduledSql("scheduledSql",
            src_topic_id=topic.id,
            enable_flag=1,
            dst_resource=tencentcloud.cls.ScheduledSqlDstResourceArgs(
                topic_id=topic.id,
                region="ap-guangzhou",
                biz_type=0,
                metric_name="test",
            ),
            scheduled_sql_content="xxx",
            process_start_time=1690515360000,
            process_type=1,
            process_period=10,
            process_time_window="@m-15m,@m",
            process_delay=5,
            src_topic_region="ap-guangzhou",
            process_end_time=1690515360000,
            syntax_rule=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls scheduled_sql can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/scheduledSql:ScheduledSql scheduled_sql scheduled_sql_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ScheduledSqlDstResourceArgs']] dst_resource: scheduled slq dst resource.
        :param pulumi.Input[int] enable_flag: task enable flag.
        :param pulumi.Input[str] name: task name.
        :param pulumi.Input[int] process_delay: process delay.
        :param pulumi.Input[int] process_end_time: process end timestamp.
        :param pulumi.Input[int] process_period: process period.
        :param pulumi.Input[int] process_start_time: process start timestamp.
        :param pulumi.Input[str] process_time_window: process time window.
        :param pulumi.Input[int] process_type: process type.
        :param pulumi.Input[str] scheduled_sql_content: scheduled sql content.
        :param pulumi.Input[str] src_topic_id: src topic id.
        :param pulumi.Input[str] src_topic_region: src topic region.
        :param pulumi.Input[int] syntax_rule: syntax rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScheduledSqlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cls scheduled_sql

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        logset = tencentcloud.cls.Logset("logset",
            logset_name="tf-example-logset",
            tags={
                "createdBy": "terraform",
            })
        topic = tencentcloud.cls.Topic("topic",
            topic_name="tf-example-topic",
            logset_id=logset.id,
            auto_split=False,
            max_split_partitions=20,
            partition_count=1,
            period=10,
            storage_type="hot",
            tags={
                "test": "test",
            })
        scheduled_sql = tencentcloud.cls.ScheduledSql("scheduledSql",
            src_topic_id=topic.id,
            enable_flag=1,
            dst_resource=tencentcloud.cls.ScheduledSqlDstResourceArgs(
                topic_id=topic.id,
                region="ap-guangzhou",
                biz_type=0,
                metric_name="test",
            ),
            scheduled_sql_content="xxx",
            process_start_time=1690515360000,
            process_type=1,
            process_period=10,
            process_time_window="@m-15m,@m",
            process_delay=5,
            src_topic_region="ap-guangzhou",
            process_end_time=1690515360000,
            syntax_rule=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cls scheduled_sql can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cls/scheduledSql:ScheduledSql scheduled_sql scheduled_sql_id
        ```

        :param str resource_name: The name of the resource.
        :param ScheduledSqlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScheduledSqlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_resource: Optional[pulumi.Input[pulumi.InputType['ScheduledSqlDstResourceArgs']]] = None,
                 enable_flag: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 process_delay: Optional[pulumi.Input[int]] = None,
                 process_end_time: Optional[pulumi.Input[int]] = None,
                 process_period: Optional[pulumi.Input[int]] = None,
                 process_start_time: Optional[pulumi.Input[int]] = None,
                 process_time_window: Optional[pulumi.Input[str]] = None,
                 process_type: Optional[pulumi.Input[int]] = None,
                 scheduled_sql_content: Optional[pulumi.Input[str]] = None,
                 src_topic_id: Optional[pulumi.Input[str]] = None,
                 src_topic_region: Optional[pulumi.Input[str]] = None,
                 syntax_rule: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScheduledSqlArgs.__new__(ScheduledSqlArgs)

            if dst_resource is None and not opts.urn:
                raise TypeError("Missing required property 'dst_resource'")
            __props__.__dict__["dst_resource"] = dst_resource
            if enable_flag is None and not opts.urn:
                raise TypeError("Missing required property 'enable_flag'")
            __props__.__dict__["enable_flag"] = enable_flag
            __props__.__dict__["name"] = name
            if process_delay is None and not opts.urn:
                raise TypeError("Missing required property 'process_delay'")
            __props__.__dict__["process_delay"] = process_delay
            __props__.__dict__["process_end_time"] = process_end_time
            if process_period is None and not opts.urn:
                raise TypeError("Missing required property 'process_period'")
            __props__.__dict__["process_period"] = process_period
            if process_start_time is None and not opts.urn:
                raise TypeError("Missing required property 'process_start_time'")
            __props__.__dict__["process_start_time"] = process_start_time
            if process_time_window is None and not opts.urn:
                raise TypeError("Missing required property 'process_time_window'")
            __props__.__dict__["process_time_window"] = process_time_window
            if process_type is None and not opts.urn:
                raise TypeError("Missing required property 'process_type'")
            __props__.__dict__["process_type"] = process_type
            if scheduled_sql_content is None and not opts.urn:
                raise TypeError("Missing required property 'scheduled_sql_content'")
            __props__.__dict__["scheduled_sql_content"] = scheduled_sql_content
            if src_topic_id is None and not opts.urn:
                raise TypeError("Missing required property 'src_topic_id'")
            __props__.__dict__["src_topic_id"] = src_topic_id
            if src_topic_region is None and not opts.urn:
                raise TypeError("Missing required property 'src_topic_region'")
            __props__.__dict__["src_topic_region"] = src_topic_region
            __props__.__dict__["syntax_rule"] = syntax_rule
        super(ScheduledSql, __self__).__init__(
            'tencentcloud:Cls/scheduledSql:ScheduledSql',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dst_resource: Optional[pulumi.Input[pulumi.InputType['ScheduledSqlDstResourceArgs']]] = None,
            enable_flag: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            process_delay: Optional[pulumi.Input[int]] = None,
            process_end_time: Optional[pulumi.Input[int]] = None,
            process_period: Optional[pulumi.Input[int]] = None,
            process_start_time: Optional[pulumi.Input[int]] = None,
            process_time_window: Optional[pulumi.Input[str]] = None,
            process_type: Optional[pulumi.Input[int]] = None,
            scheduled_sql_content: Optional[pulumi.Input[str]] = None,
            src_topic_id: Optional[pulumi.Input[str]] = None,
            src_topic_region: Optional[pulumi.Input[str]] = None,
            syntax_rule: Optional[pulumi.Input[int]] = None) -> 'ScheduledSql':
        """
        Get an existing ScheduledSql resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ScheduledSqlDstResourceArgs']] dst_resource: scheduled slq dst resource.
        :param pulumi.Input[int] enable_flag: task enable flag.
        :param pulumi.Input[str] name: task name.
        :param pulumi.Input[int] process_delay: process delay.
        :param pulumi.Input[int] process_end_time: process end timestamp.
        :param pulumi.Input[int] process_period: process period.
        :param pulumi.Input[int] process_start_time: process start timestamp.
        :param pulumi.Input[str] process_time_window: process time window.
        :param pulumi.Input[int] process_type: process type.
        :param pulumi.Input[str] scheduled_sql_content: scheduled sql content.
        :param pulumi.Input[str] src_topic_id: src topic id.
        :param pulumi.Input[str] src_topic_region: src topic region.
        :param pulumi.Input[int] syntax_rule: syntax rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScheduledSqlState.__new__(_ScheduledSqlState)

        __props__.__dict__["dst_resource"] = dst_resource
        __props__.__dict__["enable_flag"] = enable_flag
        __props__.__dict__["name"] = name
        __props__.__dict__["process_delay"] = process_delay
        __props__.__dict__["process_end_time"] = process_end_time
        __props__.__dict__["process_period"] = process_period
        __props__.__dict__["process_start_time"] = process_start_time
        __props__.__dict__["process_time_window"] = process_time_window
        __props__.__dict__["process_type"] = process_type
        __props__.__dict__["scheduled_sql_content"] = scheduled_sql_content
        __props__.__dict__["src_topic_id"] = src_topic_id
        __props__.__dict__["src_topic_region"] = src_topic_region
        __props__.__dict__["syntax_rule"] = syntax_rule
        return ScheduledSql(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dstResource")
    def dst_resource(self) -> pulumi.Output['outputs.ScheduledSqlDstResource']:
        """
        scheduled slq dst resource.
        """
        return pulumi.get(self, "dst_resource")

    @property
    @pulumi.getter(name="enableFlag")
    def enable_flag(self) -> pulumi.Output[int]:
        """
        task enable flag.
        """
        return pulumi.get(self, "enable_flag")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        task name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="processDelay")
    def process_delay(self) -> pulumi.Output[int]:
        """
        process delay.
        """
        return pulumi.get(self, "process_delay")

    @property
    @pulumi.getter(name="processEndTime")
    def process_end_time(self) -> pulumi.Output[int]:
        """
        process end timestamp.
        """
        return pulumi.get(self, "process_end_time")

    @property
    @pulumi.getter(name="processPeriod")
    def process_period(self) -> pulumi.Output[int]:
        """
        process period.
        """
        return pulumi.get(self, "process_period")

    @property
    @pulumi.getter(name="processStartTime")
    def process_start_time(self) -> pulumi.Output[int]:
        """
        process start timestamp.
        """
        return pulumi.get(self, "process_start_time")

    @property
    @pulumi.getter(name="processTimeWindow")
    def process_time_window(self) -> pulumi.Output[str]:
        """
        process time window.
        """
        return pulumi.get(self, "process_time_window")

    @property
    @pulumi.getter(name="processType")
    def process_type(self) -> pulumi.Output[int]:
        """
        process type.
        """
        return pulumi.get(self, "process_type")

    @property
    @pulumi.getter(name="scheduledSqlContent")
    def scheduled_sql_content(self) -> pulumi.Output[str]:
        """
        scheduled sql content.
        """
        return pulumi.get(self, "scheduled_sql_content")

    @property
    @pulumi.getter(name="srcTopicId")
    def src_topic_id(self) -> pulumi.Output[str]:
        """
        src topic id.
        """
        return pulumi.get(self, "src_topic_id")

    @property
    @pulumi.getter(name="srcTopicRegion")
    def src_topic_region(self) -> pulumi.Output[str]:
        """
        src topic region.
        """
        return pulumi.get(self, "src_topic_region")

    @property
    @pulumi.getter(name="syntaxRule")
    def syntax_rule(self) -> pulumi.Output[Optional[int]]:
        """
        syntax rule.
        """
        return pulumi.get(self, "syntax_rule")

