# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetScenarioWithJobsResult',
    'AwaitableGetScenarioWithJobsResult',
    'get_scenario_with_jobs',
    'get_scenario_with_jobs_output',
]

@pulumi.output_type
class GetScenarioWithJobsResult:
    """
    A collection of values returned by getScenarioWithJobs.
    """
    def __init__(__self__, ascend=None, id=None, ignore_dataset=None, ignore_script=None, order_by=None, owner=None, project_ids=None, result_output_file=None, scenario_ids=None, scenario_name=None, scenario_type=None, scenario_with_jobs_sets=None):
        if ascend and not isinstance(ascend, bool):
            raise TypeError("Expected argument 'ascend' to be a bool")
        pulumi.set(__self__, "ascend", ascend)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ignore_dataset and not isinstance(ignore_dataset, bool):
            raise TypeError("Expected argument 'ignore_dataset' to be a bool")
        pulumi.set(__self__, "ignore_dataset", ignore_dataset)
        if ignore_script and not isinstance(ignore_script, bool):
            raise TypeError("Expected argument 'ignore_script' to be a bool")
        pulumi.set(__self__, "ignore_script", ignore_script)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if scenario_ids and not isinstance(scenario_ids, list):
            raise TypeError("Expected argument 'scenario_ids' to be a list")
        pulumi.set(__self__, "scenario_ids", scenario_ids)
        if scenario_name and not isinstance(scenario_name, str):
            raise TypeError("Expected argument 'scenario_name' to be a str")
        pulumi.set(__self__, "scenario_name", scenario_name)
        if scenario_type and not isinstance(scenario_type, str):
            raise TypeError("Expected argument 'scenario_type' to be a str")
        pulumi.set(__self__, "scenario_type", scenario_type)
        if scenario_with_jobs_sets and not isinstance(scenario_with_jobs_sets, list):
            raise TypeError("Expected argument 'scenario_with_jobs_sets' to be a list")
        pulumi.set(__self__, "scenario_with_jobs_sets", scenario_with_jobs_sets)

    @property
    @pulumi.getter
    def ascend(self) -> Optional[bool]:
        return pulumi.get(self, "ascend")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ignoreDataset")
    def ignore_dataset(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_dataset")

    @property
    @pulumi.getter(name="ignoreScript")
    def ignore_script(self) -> Optional[bool]:
        return pulumi.get(self, "ignore_script")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter
    def owner(self) -> Optional[str]:
        """
        The owner.
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Sequence[str]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="scenarioIds")
    def scenario_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scenario_ids")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> Optional[str]:
        """
        Scenario name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter(name="scenarioType")
    def scenario_type(self) -> Optional[str]:
        return pulumi.get(self, "scenario_type")

    @property
    @pulumi.getter(name="scenarioWithJobsSets")
    def scenario_with_jobs_sets(self) -> Sequence['outputs.GetScenarioWithJobsScenarioWithJobsSetResult']:
        """
        The scenario configuration and its jobs.
        """
        return pulumi.get(self, "scenario_with_jobs_sets")


class AwaitableGetScenarioWithJobsResult(GetScenarioWithJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScenarioWithJobsResult(
            ascend=self.ascend,
            id=self.id,
            ignore_dataset=self.ignore_dataset,
            ignore_script=self.ignore_script,
            order_by=self.order_by,
            owner=self.owner,
            project_ids=self.project_ids,
            result_output_file=self.result_output_file,
            scenario_ids=self.scenario_ids,
            scenario_name=self.scenario_name,
            scenario_type=self.scenario_type,
            scenario_with_jobs_sets=self.scenario_with_jobs_sets)


def get_scenario_with_jobs(ascend: Optional[bool] = None,
                           ignore_dataset: Optional[bool] = None,
                           ignore_script: Optional[bool] = None,
                           order_by: Optional[str] = None,
                           owner: Optional[str] = None,
                           project_ids: Optional[Sequence[str]] = None,
                           result_output_file: Optional[str] = None,
                           scenario_ids: Optional[Sequence[str]] = None,
                           scenario_name: Optional[str] = None,
                           scenario_type: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScenarioWithJobsResult:
    """
    Use this data source to query detailed information of pts scenario_with_jobs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    scenario_with_jobs = tencentcloud.Pts.get_scenario_with_jobs(ascend=True,
        ignore_dataset=True,
        ignore_script=True,
        project_ids=["project-45vw7v82"],
        scenario_ids=["scenario-koakp3h6"],
        scenario_name="pts-jmeter",
        scenario_type="pts-jmeter")
    ```
    <!--End PulumiCodeChooser -->


    :param bool ascend: Whether to use ascending order.
    :param bool ignore_dataset: Whether to ignore the dataset.
    :param bool ignore_script: Whether to ignore the script content.
    :param str order_by: The field column used for ordering.
    :param str owner: The job owner.
    :param Sequence[str] project_ids: Project ID list.
    :param str result_output_file: Used to save results.
    :param Sequence[str] scenario_ids: Scenario ID list.
    :param str scenario_name: Scenario name.
    :param str scenario_type: Scenario type, e.g.: pts-http, pts-js, pts-trpc, pts-jmeter.
    """
    __args__ = dict()
    __args__['ascend'] = ascend
    __args__['ignoreDataset'] = ignore_dataset
    __args__['ignoreScript'] = ignore_script
    __args__['orderBy'] = order_by
    __args__['owner'] = owner
    __args__['projectIds'] = project_ids
    __args__['resultOutputFile'] = result_output_file
    __args__['scenarioIds'] = scenario_ids
    __args__['scenarioName'] = scenario_name
    __args__['scenarioType'] = scenario_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Pts/getScenarioWithJobs:getScenarioWithJobs', __args__, opts=opts, typ=GetScenarioWithJobsResult).value

    return AwaitableGetScenarioWithJobsResult(
        ascend=pulumi.get(__ret__, 'ascend'),
        id=pulumi.get(__ret__, 'id'),
        ignore_dataset=pulumi.get(__ret__, 'ignore_dataset'),
        ignore_script=pulumi.get(__ret__, 'ignore_script'),
        order_by=pulumi.get(__ret__, 'order_by'),
        owner=pulumi.get(__ret__, 'owner'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        scenario_ids=pulumi.get(__ret__, 'scenario_ids'),
        scenario_name=pulumi.get(__ret__, 'scenario_name'),
        scenario_type=pulumi.get(__ret__, 'scenario_type'),
        scenario_with_jobs_sets=pulumi.get(__ret__, 'scenario_with_jobs_sets'))


@_utilities.lift_output_func(get_scenario_with_jobs)
def get_scenario_with_jobs_output(ascend: Optional[pulumi.Input[Optional[bool]]] = None,
                                  ignore_dataset: Optional[pulumi.Input[Optional[bool]]] = None,
                                  ignore_script: Optional[pulumi.Input[Optional[bool]]] = None,
                                  order_by: Optional[pulumi.Input[Optional[str]]] = None,
                                  owner: Optional[pulumi.Input[Optional[str]]] = None,
                                  project_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  scenario_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  scenario_name: Optional[pulumi.Input[Optional[str]]] = None,
                                  scenario_type: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetScenarioWithJobsResult]:
    """
    Use this data source to query detailed information of pts scenario_with_jobs

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    scenario_with_jobs = tencentcloud.Pts.get_scenario_with_jobs(ascend=True,
        ignore_dataset=True,
        ignore_script=True,
        project_ids=["project-45vw7v82"],
        scenario_ids=["scenario-koakp3h6"],
        scenario_name="pts-jmeter",
        scenario_type="pts-jmeter")
    ```
    <!--End PulumiCodeChooser -->


    :param bool ascend: Whether to use ascending order.
    :param bool ignore_dataset: Whether to ignore the dataset.
    :param bool ignore_script: Whether to ignore the script content.
    :param str order_by: The field column used for ordering.
    :param str owner: The job owner.
    :param Sequence[str] project_ids: Project ID list.
    :param str result_output_file: Used to save results.
    :param Sequence[str] scenario_ids: Scenario ID list.
    :param str scenario_name: Scenario name.
    :param str scenario_type: Scenario type, e.g.: pts-http, pts-js, pts-trpc, pts-jmeter.
    """
    ...
