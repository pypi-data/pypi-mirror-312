# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ScenarioArgs', 'Scenario']

@pulumi.input_type
class ScenarioArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 cron_id: Optional[pulumi.Input[str]] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_name_config: Optional[pulumi.Input['ScenarioDomainNameConfigArgs']] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load: Optional[pulumi.Input['ScenarioLoadArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]]] = None,
                 request_files: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]]] = None,
                 sla_policy: Optional[pulumi.Input['ScenarioSlaPolicyArgs']] = None,
                 test_scripts: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]]] = None):
        """
        The set of arguments for constructing a Scenario resource.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[str] type: Pressure test engine type.
        :param pulumi.Input[str] cron_id: cron job ID.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]] datasets: Test data set.
        :param pulumi.Input[str] description: Pts Scenario Description.
        :param pulumi.Input['ScenarioDomainNameConfigArgs'] domain_name_config: Domain name resolution configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extensions: deprecated.
        :param pulumi.Input['ScenarioLoadArgs'] load: Pressure allocation.
        :param pulumi.Input[str] name: Pts Scenario name.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]] plugins: SLA strategy.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]] protocols: Protocol file path.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]] request_files: Request file path.
        :param pulumi.Input['ScenarioSlaPolicyArgs'] sla_policy: SLA strategy.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]] test_scripts: Test script file information.
        """
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "type", type)
        if cron_id is not None:
            pulumi.set(__self__, "cron_id", cron_id)
        if datasets is not None:
            pulumi.set(__self__, "datasets", datasets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_name_config is not None:
            pulumi.set(__self__, "domain_name_config", domain_name_config)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if load is not None:
            pulumi.set(__self__, "load", load)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if request_files is not None:
            pulumi.set(__self__, "request_files", request_files)
        if sla_policy is not None:
            pulumi.set(__self__, "sla_policy", sla_policy)
        if test_scripts is not None:
            pulumi.set(__self__, "test_scripts", test_scripts)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Pressure test engine type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="cronId")
    def cron_id(self) -> Optional[pulumi.Input[str]]:
        """
        cron job ID.
        """
        return pulumi.get(self, "cron_id")

    @cron_id.setter
    def cron_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_id", value)

    @property
    @pulumi.getter
    def datasets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]]]:
        """
        Test data set.
        """
        return pulumi.get(self, "datasets")

    @datasets.setter
    def datasets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]]]):
        pulumi.set(self, "datasets", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Pts Scenario Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainNameConfig")
    def domain_name_config(self) -> Optional[pulumi.Input['ScenarioDomainNameConfigArgs']]:
        """
        Domain name resolution configuration.
        """
        return pulumi.get(self, "domain_name_config")

    @domain_name_config.setter
    def domain_name_config(self, value: Optional[pulumi.Input['ScenarioDomainNameConfigArgs']]):
        pulumi.set(self, "domain_name_config", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        deprecated.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def load(self) -> Optional[pulumi.Input['ScenarioLoadArgs']]:
        """
        Pressure allocation.
        """
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: Optional[pulumi.Input['ScenarioLoadArgs']]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Pts Scenario name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]]]:
        """
        SLA strategy.
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]]]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]]]:
        """
        Protocol file path.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="requestFiles")
    def request_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]]]:
        """
        Request file path.
        """
        return pulumi.get(self, "request_files")

    @request_files.setter
    def request_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]]]):
        pulumi.set(self, "request_files", value)

    @property
    @pulumi.getter(name="slaPolicy")
    def sla_policy(self) -> Optional[pulumi.Input['ScenarioSlaPolicyArgs']]:
        """
        SLA strategy.
        """
        return pulumi.get(self, "sla_policy")

    @sla_policy.setter
    def sla_policy(self, value: Optional[pulumi.Input['ScenarioSlaPolicyArgs']]):
        pulumi.set(self, "sla_policy", value)

    @property
    @pulumi.getter(name="testScripts")
    def test_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]]]:
        """
        Test script file information.
        """
        return pulumi.get(self, "test_scripts")

    @test_scripts.setter
    def test_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]]]):
        pulumi.set(self, "test_scripts", value)


@pulumi.input_type
class _ScenarioState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 cron_id: Optional[pulumi.Input[str]] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_name_config: Optional[pulumi.Input['ScenarioDomainNameConfigArgs']] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load: Optional[pulumi.Input['ScenarioLoadArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]]] = None,
                 request_files: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]]] = None,
                 sla_policy: Optional[pulumi.Input['ScenarioSlaPolicyArgs']] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 sub_account_uin: Optional[pulumi.Input[str]] = None,
                 test_scripts: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 uin: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Scenario resources.
        :param pulumi.Input[int] app_id: App ID Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] created_at: Scene creation time.
        :param pulumi.Input[str] cron_id: cron job ID.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]] datasets: Test data set.
        :param pulumi.Input[str] description: Pts Scenario Description.
        :param pulumi.Input['ScenarioDomainNameConfigArgs'] domain_name_config: Domain name resolution configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extensions: deprecated.
        :param pulumi.Input['ScenarioLoadArgs'] load: Pressure allocation.
        :param pulumi.Input[str] name: Pts Scenario name.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]] plugins: SLA strategy.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]] protocols: Protocol file path.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]] request_files: Request file path.
        :param pulumi.Input['ScenarioSlaPolicyArgs'] sla_policy: SLA strategy.
        :param pulumi.Input[int] status: Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] sub_account_uin: Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]] test_scripts: Test script file information.
        :param pulumi.Input[str] type: Pressure test engine type.
        :param pulumi.Input[str] uin: User ID Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cron_id is not None:
            pulumi.set(__self__, "cron_id", cron_id)
        if datasets is not None:
            pulumi.set(__self__, "datasets", datasets)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_name_config is not None:
            pulumi.set(__self__, "domain_name_config", domain_name_config)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if load is not None:
            pulumi.set(__self__, "load", load)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if request_files is not None:
            pulumi.set(__self__, "request_files", request_files)
        if sla_policy is not None:
            pulumi.set(__self__, "sla_policy", sla_policy)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sub_account_uin is not None:
            pulumi.set(__self__, "sub_account_uin", sub_account_uin)
        if test_scripts is not None:
            pulumi.set(__self__, "test_scripts", test_scripts)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uin is not None:
            pulumi.set(__self__, "uin", uin)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[int]]:
        """
        App ID Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Scene creation time.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="cronId")
    def cron_id(self) -> Optional[pulumi.Input[str]]:
        """
        cron job ID.
        """
        return pulumi.get(self, "cron_id")

    @cron_id.setter
    def cron_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_id", value)

    @property
    @pulumi.getter
    def datasets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]]]:
        """
        Test data set.
        """
        return pulumi.get(self, "datasets")

    @datasets.setter
    def datasets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDatasetArgs']]]]):
        pulumi.set(self, "datasets", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Pts Scenario Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainNameConfig")
    def domain_name_config(self) -> Optional[pulumi.Input['ScenarioDomainNameConfigArgs']]:
        """
        Domain name resolution configuration.
        """
        return pulumi.get(self, "domain_name_config")

    @domain_name_config.setter
    def domain_name_config(self, value: Optional[pulumi.Input['ScenarioDomainNameConfigArgs']]):
        pulumi.set(self, "domain_name_config", value)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        deprecated.
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def load(self) -> Optional[pulumi.Input['ScenarioLoadArgs']]:
        """
        Pressure allocation.
        """
        return pulumi.get(self, "load")

    @load.setter
    def load(self, value: Optional[pulumi.Input['ScenarioLoadArgs']]):
        pulumi.set(self, "load", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Pts Scenario name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]]]:
        """
        SLA strategy.
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioPluginArgs']]]]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]]]:
        """
        Protocol file path.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioProtocolArgs']]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="requestFiles")
    def request_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]]]:
        """
        Request file path.
        """
        return pulumi.get(self, "request_files")

    @request_files.setter
    def request_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioRequestFileArgs']]]]):
        pulumi.set(self, "request_files", value)

    @property
    @pulumi.getter(name="slaPolicy")
    def sla_policy(self) -> Optional[pulumi.Input['ScenarioSlaPolicyArgs']]:
        """
        SLA strategy.
        """
        return pulumi.get(self, "sla_policy")

    @sla_policy.setter
    def sla_policy(self, value: Optional[pulumi.Input['ScenarioSlaPolicyArgs']]):
        pulumi.set(self, "sla_policy", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subAccountUin")
    def sub_account_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "sub_account_uin")

    @sub_account_uin.setter
    def sub_account_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_account_uin", value)

    @property
    @pulumi.getter(name="testScripts")
    def test_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]]]:
        """
        Test script file information.
        """
        return pulumi.get(self, "test_scripts")

    @test_scripts.setter
    def test_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioTestScriptArgs']]]]):
        pulumi.set(self, "test_scripts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Pressure test engine type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def uin(self) -> Optional[pulumi.Input[str]]:
        """
        User ID Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "uin")

    @uin.setter
    def uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uin", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class Scenario(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_id: Optional[pulumi.Input[str]] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioDatasetArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_name_config: Optional[pulumi.Input[pulumi.InputType['ScenarioDomainNameConfigArgs']]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load: Optional[pulumi.Input[pulumi.InputType['ScenarioLoadArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioPluginArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioProtocolArgs']]]]] = None,
                 request_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioRequestFileArgs']]]]] = None,
                 sla_policy: Optional[pulumi.Input[pulumi.InputType['ScenarioSlaPolicyArgs']]] = None,
                 test_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioTestScriptArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a pts scenario

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        scenario = tencentcloud.pts.Scenario("scenario",
            domain_name_config=tencentcloud.pts.ScenarioDomainNameConfigArgs(),
            load=tencentcloud.pts.ScenarioLoadArgs(
                geo_regions_load_distributions=[tencentcloud.pts.ScenarioLoadGeoRegionsLoadDistributionArgs(
                    percentage=100,
                    region="ap-guangzhou",
                    region_id=1,
                )],
                load_spec=tencentcloud.pts.ScenarioLoadLoadSpecArgs(
                    concurrency=tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyArgs(
                        graceful_stop_seconds=3,
                        iteration_count=0,
                        max_requests_per_second=0,
                        stages=[
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=120,
                                target_virtual_users=2,
                            ),
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=120,
                                target_virtual_users=4,
                            ),
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=120,
                                target_virtual_users=5,
                            ),
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=240,
                                target_virtual_users=5,
                            ),
                        ],
                    ),
                ),
            ),
            project_id="project-45vw7v82",
            sla_policy=tencentcloud.pts.ScenarioSlaPolicyArgs(),
            test_scripts=[tencentcloud.pts.ScenarioTestScriptArgs(
                encoded_content=\"\"\"            // Send a http get request
                    import http from 'pts/http';
                    import { check, sleep } from 'pts';

                    export default function () {
                      // simple get request
                      const resp1 = http.get('http://httpbin.org/get');
                      console.log(resp1.body);
                      // if resp1.body is a json string, resp1.json() transfer json format body to a json object
                      console.log(resp1.json());
                      check('status is 200', () => resp1.statusCode === 200);

                      // sleep 1 second
                      sleep(1);

                      // get request with headers and parameters
                      const resp2 = http.get('http://httpbin.org/get', {
                        headers: {
                          Connection: 'keep-alive',
                          'User-Agent': 'pts-engine',
                        },
                        query: {
                          name1: 'value1',
                          name2: 'value2',
                        },
                      });

                      console.log(resp2.json().args.name1); // 'value1'
                      check('body.args.name1 equals value1', () => resp2.json().args.name1 === 'value1');
                    }

        \"\"\",
                load_weight=100,
                name="script.js",
                size=838,
                type="js",
                updated_at="2022-11-11T16:18:37+08:00",
            )],
            type="pts-js")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        pts scenario can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Pts/scenario:Scenario scenario scenario_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cron_id: cron job ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioDatasetArgs']]]] datasets: Test data set.
        :param pulumi.Input[str] description: Pts Scenario Description.
        :param pulumi.Input[pulumi.InputType['ScenarioDomainNameConfigArgs']] domain_name_config: Domain name resolution configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extensions: deprecated.
        :param pulumi.Input[pulumi.InputType['ScenarioLoadArgs']] load: Pressure allocation.
        :param pulumi.Input[str] name: Pts Scenario name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioPluginArgs']]]] plugins: SLA strategy.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioProtocolArgs']]]] protocols: Protocol file path.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioRequestFileArgs']]]] request_files: Request file path.
        :param pulumi.Input[pulumi.InputType['ScenarioSlaPolicyArgs']] sla_policy: SLA strategy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioTestScriptArgs']]]] test_scripts: Test script file information.
        :param pulumi.Input[str] type: Pressure test engine type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScenarioArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a pts scenario

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        scenario = tencentcloud.pts.Scenario("scenario",
            domain_name_config=tencentcloud.pts.ScenarioDomainNameConfigArgs(),
            load=tencentcloud.pts.ScenarioLoadArgs(
                geo_regions_load_distributions=[tencentcloud.pts.ScenarioLoadGeoRegionsLoadDistributionArgs(
                    percentage=100,
                    region="ap-guangzhou",
                    region_id=1,
                )],
                load_spec=tencentcloud.pts.ScenarioLoadLoadSpecArgs(
                    concurrency=tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyArgs(
                        graceful_stop_seconds=3,
                        iteration_count=0,
                        max_requests_per_second=0,
                        stages=[
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=120,
                                target_virtual_users=2,
                            ),
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=120,
                                target_virtual_users=4,
                            ),
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=120,
                                target_virtual_users=5,
                            ),
                            tencentcloud.pts.ScenarioLoadLoadSpecConcurrencyStageArgs(
                                duration_seconds=240,
                                target_virtual_users=5,
                            ),
                        ],
                    ),
                ),
            ),
            project_id="project-45vw7v82",
            sla_policy=tencentcloud.pts.ScenarioSlaPolicyArgs(),
            test_scripts=[tencentcloud.pts.ScenarioTestScriptArgs(
                encoded_content=\"\"\"            // Send a http get request
                    import http from 'pts/http';
                    import { check, sleep } from 'pts';

                    export default function () {
                      // simple get request
                      const resp1 = http.get('http://httpbin.org/get');
                      console.log(resp1.body);
                      // if resp1.body is a json string, resp1.json() transfer json format body to a json object
                      console.log(resp1.json());
                      check('status is 200', () => resp1.statusCode === 200);

                      // sleep 1 second
                      sleep(1);

                      // get request with headers and parameters
                      const resp2 = http.get('http://httpbin.org/get', {
                        headers: {
                          Connection: 'keep-alive',
                          'User-Agent': 'pts-engine',
                        },
                        query: {
                          name1: 'value1',
                          name2: 'value2',
                        },
                      });

                      console.log(resp2.json().args.name1); // 'value1'
                      check('body.args.name1 equals value1', () => resp2.json().args.name1 === 'value1');
                    }

        \"\"\",
                load_weight=100,
                name="script.js",
                size=838,
                type="js",
                updated_at="2022-11-11T16:18:37+08:00",
            )],
            type="pts-js")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        pts scenario can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Pts/scenario:Scenario scenario scenario_id
        ```

        :param str resource_name: The name of the resource.
        :param ScenarioArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScenarioArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_id: Optional[pulumi.Input[str]] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioDatasetArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain_name_config: Optional[pulumi.Input[pulumi.InputType['ScenarioDomainNameConfigArgs']]] = None,
                 extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load: Optional[pulumi.Input[pulumi.InputType['ScenarioLoadArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioPluginArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioProtocolArgs']]]]] = None,
                 request_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioRequestFileArgs']]]]] = None,
                 sla_policy: Optional[pulumi.Input[pulumi.InputType['ScenarioSlaPolicyArgs']]] = None,
                 test_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioTestScriptArgs']]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScenarioArgs.__new__(ScenarioArgs)

            __props__.__dict__["cron_id"] = cron_id
            __props__.__dict__["datasets"] = datasets
            __props__.__dict__["description"] = description
            __props__.__dict__["domain_name_config"] = domain_name_config
            __props__.__dict__["extensions"] = extensions
            __props__.__dict__["load"] = load
            __props__.__dict__["name"] = name
            __props__.__dict__["plugins"] = plugins
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["request_files"] = request_files
            __props__.__dict__["sla_policy"] = sla_policy
            __props__.__dict__["test_scripts"] = test_scripts
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["app_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["sub_account_uin"] = None
            __props__.__dict__["uin"] = None
            __props__.__dict__["updated_at"] = None
        super(Scenario, __self__).__init__(
            'tencentcloud:Pts/scenario:Scenario',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[int]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            cron_id: Optional[pulumi.Input[str]] = None,
            datasets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioDatasetArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain_name_config: Optional[pulumi.Input[pulumi.InputType['ScenarioDomainNameConfigArgs']]] = None,
            extensions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            load: Optional[pulumi.Input[pulumi.InputType['ScenarioLoadArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            plugins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioPluginArgs']]]]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioProtocolArgs']]]]] = None,
            request_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioRequestFileArgs']]]]] = None,
            sla_policy: Optional[pulumi.Input[pulumi.InputType['ScenarioSlaPolicyArgs']]] = None,
            status: Optional[pulumi.Input[int]] = None,
            sub_account_uin: Optional[pulumi.Input[str]] = None,
            test_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioTestScriptArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            uin: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'Scenario':
        """
        Get an existing Scenario resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] app_id: App ID Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] created_at: Scene creation time.
        :param pulumi.Input[str] cron_id: cron job ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioDatasetArgs']]]] datasets: Test data set.
        :param pulumi.Input[str] description: Pts Scenario Description.
        :param pulumi.Input[pulumi.InputType['ScenarioDomainNameConfigArgs']] domain_name_config: Domain name resolution configuration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extensions: deprecated.
        :param pulumi.Input[pulumi.InputType['ScenarioLoadArgs']] load: Pressure allocation.
        :param pulumi.Input[str] name: Pts Scenario name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioPluginArgs']]]] plugins: SLA strategy.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioProtocolArgs']]]] protocols: Protocol file path.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioRequestFileArgs']]]] request_files: Request file path.
        :param pulumi.Input[pulumi.InputType['ScenarioSlaPolicyArgs']] sla_policy: SLA strategy.
        :param pulumi.Input[int] status: Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] sub_account_uin: Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ScenarioTestScriptArgs']]]] test_scripts: Test script file information.
        :param pulumi.Input[str] type: Pressure test engine type.
        :param pulumi.Input[str] uin: User ID Note: this field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] updated_at: Update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScenarioState.__new__(_ScenarioState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cron_id"] = cron_id
        __props__.__dict__["datasets"] = datasets
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_name_config"] = domain_name_config
        __props__.__dict__["extensions"] = extensions
        __props__.__dict__["load"] = load
        __props__.__dict__["name"] = name
        __props__.__dict__["plugins"] = plugins
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["request_files"] = request_files
        __props__.__dict__["sla_policy"] = sla_policy
        __props__.__dict__["status"] = status
        __props__.__dict__["sub_account_uin"] = sub_account_uin
        __props__.__dict__["test_scripts"] = test_scripts
        __props__.__dict__["type"] = type
        __props__.__dict__["uin"] = uin
        __props__.__dict__["updated_at"] = updated_at
        return Scenario(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[int]:
        """
        App ID Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Scene creation time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="cronId")
    def cron_id(self) -> pulumi.Output[Optional[str]]:
        """
        cron job ID.
        """
        return pulumi.get(self, "cron_id")

    @property
    @pulumi.getter
    def datasets(self) -> pulumi.Output[Optional[Sequence['outputs.ScenarioDataset']]]:
        """
        Test data set.
        """
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Pts Scenario Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainNameConfig")
    def domain_name_config(self) -> pulumi.Output[Optional['outputs.ScenarioDomainNameConfig']]:
        """
        Domain name resolution configuration.
        """
        return pulumi.get(self, "domain_name_config")

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        deprecated.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def load(self) -> pulumi.Output[Optional['outputs.ScenarioLoad']]:
        """
        Pressure allocation.
        """
        return pulumi.get(self, "load")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Pts Scenario name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def plugins(self) -> pulumi.Output[Optional[Sequence['outputs.ScenarioPlugin']]]:
        """
        SLA strategy.
        """
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Optional[Sequence['outputs.ScenarioProtocol']]]:
        """
        Protocol file path.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="requestFiles")
    def request_files(self) -> pulumi.Output[Optional[Sequence['outputs.ScenarioRequestFile']]]:
        """
        Request file path.
        """
        return pulumi.get(self, "request_files")

    @property
    @pulumi.getter(name="slaPolicy")
    def sla_policy(self) -> pulumi.Output[Optional['outputs.ScenarioSlaPolicy']]:
        """
        SLA strategy.
        """
        return pulumi.get(self, "sla_policy")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subAccountUin")
    def sub_account_uin(self) -> pulumi.Output[str]:
        """
        Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "sub_account_uin")

    @property
    @pulumi.getter(name="testScripts")
    def test_scripts(self) -> pulumi.Output[Optional[Sequence['outputs.ScenarioTestScript']]]:
        """
        Test script file information.
        """
        return pulumi.get(self, "test_scripts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Pressure test engine type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uin(self) -> pulumi.Output[str]:
        """
        User ID Note: this field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

