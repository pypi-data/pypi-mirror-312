# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'FileFileInfoArgs',
    'JobDatasetArgs',
    'JobDomainNameConfigArgs',
    'JobDomainNameConfigDnsConfigArgs',
    'JobDomainNameConfigHostAliasArgs',
    'JobLoadArgs',
    'JobLoadGeoRegionsLoadDistributionArgs',
    'JobLoadLoadSpecArgs',
    'JobLoadLoadSpecConcurrencyArgs',
    'JobLoadLoadSpecConcurrencyStageArgs',
    'JobLoadLoadSpecRequestsPerSecondArgs',
    'JobLoadLoadSpecScriptOriginArgs',
    'JobLoadVpcLoadDistributionArgs',
    'JobPluginArgs',
    'JobProtocolArgs',
    'JobRequestFileArgs',
    'JobTestScriptArgs',
    'ProjectTagArgs',
    'ScenarioDatasetArgs',
    'ScenarioDomainNameConfigArgs',
    'ScenarioDomainNameConfigDnsConfigArgs',
    'ScenarioDomainNameConfigHostAliasArgs',
    'ScenarioLoadArgs',
    'ScenarioLoadGeoRegionsLoadDistributionArgs',
    'ScenarioLoadLoadSpecArgs',
    'ScenarioLoadLoadSpecConcurrencyArgs',
    'ScenarioLoadLoadSpecConcurrencyStageArgs',
    'ScenarioLoadLoadSpecRequestsPerSecondArgs',
    'ScenarioLoadLoadSpecScriptOriginArgs',
    'ScenarioLoadVpcLoadDistributionArgs',
    'ScenarioPluginArgs',
    'ScenarioProtocolArgs',
    'ScenarioRequestFileArgs',
    'ScenarioSlaPolicyArgs',
    'ScenarioSlaPolicyAlertChannelArgs',
    'ScenarioSlaPolicySlaRuleArgs',
    'ScenarioSlaPolicySlaRuleLabelFilterArgs',
    'ScenarioTestScriptArgs',
    'TmpKeyGenerateCredentialArgs',
]

@pulumi.input_type
class FileFileInfoArgs:
    def __init__(__self__, *,
                 file_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: File id.
        :param pulumi.Input[str] name: File name.
        :param pulumi.Input[int] size: File size.
        :param pulumi.Input[str] type: File type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class JobDatasetArgs:
    def __init__(__self__, *,
                 header_in_file: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 split: pulumi.Input[bool],
                 file_id: Optional[pulumi.Input[str]] = None,
                 head_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 header_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 line_count: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 tail_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] header_in_file: Whether the first line is the parameter name.
        :param pulumi.Input[str] name: The file name where the test dataset is located.
        :param pulumi.Input[bool] split: Test whether the dataset is fragmented.
        :param pulumi.Input[str] file_id: File ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] head_lines: Header data row.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] header_columns: Parameter name array.
        :param pulumi.Input[int] line_count: Number of file lines.
        :param pulumi.Input[int] size: Number of file bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tail_lines: Trailing data row.
        :param pulumi.Input[str] type: Scene Type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        pulumi.set(__self__, "header_in_file", header_in_file)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "split", split)
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if head_lines is not None:
            pulumi.set(__self__, "head_lines", head_lines)
        if header_columns is not None:
            pulumi.set(__self__, "header_columns", header_columns)
        if line_count is not None:
            pulumi.set(__self__, "line_count", line_count)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tail_lines is not None:
            pulumi.set(__self__, "tail_lines", tail_lines)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="headerInFile")
    def header_in_file(self) -> pulumi.Input[bool]:
        """
        Whether the first line is the parameter name.
        """
        return pulumi.get(self, "header_in_file")

    @header_in_file.setter
    def header_in_file(self, value: pulumi.Input[bool]):
        pulumi.set(self, "header_in_file", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The file name where the test dataset is located.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def split(self) -> pulumi.Input[bool]:
        """
        Test whether the dataset is fragmented.
        """
        return pulumi.get(self, "split")

    @split.setter
    def split(self, value: pulumi.Input[bool]):
        pulumi.set(self, "split", value)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File ID.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter(name="headLines")
    def head_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Header data row.
        """
        return pulumi.get(self, "head_lines")

    @head_lines.setter
    def head_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "head_lines", value)

    @property
    @pulumi.getter(name="headerColumns")
    def header_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Parameter name array.
        """
        return pulumi.get(self, "header_columns")

    @header_columns.setter
    def header_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "header_columns", value)

    @property
    @pulumi.getter(name="lineCount")
    def line_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of file lines.
        """
        return pulumi.get(self, "line_count")

    @line_count.setter
    def line_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line_count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Number of file bytes.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="tailLines")
    def tail_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Trailing data row.
        """
        return pulumi.get(self, "tail_lines")

    @tail_lines.setter
    def tail_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tail_lines", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class JobDomainNameConfigArgs:
    def __init__(__self__, *,
                 dns_config: Optional[pulumi.Input['JobDomainNameConfigDnsConfigArgs']] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigHostAliasArgs']]]] = None):
        """
        :param pulumi.Input['JobDomainNameConfigDnsConfigArgs'] dns_config: DNS configuration.
        :param pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigHostAliasArgs']]] host_aliases: Domain name binding configuration.
        """
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['JobDomainNameConfigDnsConfigArgs']]:
        """
        DNS configuration.
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['JobDomainNameConfigDnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigHostAliasArgs']]]]:
        """
        Domain name binding configuration.
        """
        return pulumi.get(self, "host_aliases")

    @host_aliases.setter
    def host_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigHostAliasArgs']]]]):
        pulumi.set(self, "host_aliases", value)


@pulumi.input_type
class JobDomainNameConfigDnsConfigArgs:
    def __init__(__self__, *,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers: DNS IP List.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNS IP List.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)


@pulumi.input_type
class JobDomainNameConfigHostAliasArgs:
    def __init__(__self__, *,
                 host_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_names: List of domain names to be bound.
        :param pulumi.Input[str] ip: The IP address to be bound.
        """
        if host_names is not None:
            pulumi.set(__self__, "host_names", host_names)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="hostNames")
    def host_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of domain names to be bound.
        """
        return pulumi.get(self, "host_names")

    @host_names.setter
    def host_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_names", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address to be bound.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class JobLoadArgs:
    def __init__(__self__, *,
                 geo_regions_load_distributions: Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadGeoRegionsLoadDistributionArgs']]]] = None,
                 load_spec: Optional[pulumi.Input['JobLoadLoadSpecArgs']] = None,
                 vpc_load_distribution: Optional[pulumi.Input['JobLoadVpcLoadDistributionArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['JobLoadGeoRegionsLoadDistributionArgs']]] geo_regions_load_distributions: Pressure distribution.
        :param pulumi.Input['JobLoadLoadSpecArgs'] load_spec: Pressure allocation.
        :param pulumi.Input['JobLoadVpcLoadDistributionArgs'] vpc_load_distribution: Source of stress.
        """
        if geo_regions_load_distributions is not None:
            pulumi.set(__self__, "geo_regions_load_distributions", geo_regions_load_distributions)
        if load_spec is not None:
            pulumi.set(__self__, "load_spec", load_spec)
        if vpc_load_distribution is not None:
            pulumi.set(__self__, "vpc_load_distribution", vpc_load_distribution)

    @property
    @pulumi.getter(name="geoRegionsLoadDistributions")
    def geo_regions_load_distributions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadGeoRegionsLoadDistributionArgs']]]]:
        """
        Pressure distribution.
        """
        return pulumi.get(self, "geo_regions_load_distributions")

    @geo_regions_load_distributions.setter
    def geo_regions_load_distributions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadGeoRegionsLoadDistributionArgs']]]]):
        pulumi.set(self, "geo_regions_load_distributions", value)

    @property
    @pulumi.getter(name="loadSpec")
    def load_spec(self) -> Optional[pulumi.Input['JobLoadLoadSpecArgs']]:
        """
        Pressure allocation.
        """
        return pulumi.get(self, "load_spec")

    @load_spec.setter
    def load_spec(self, value: Optional[pulumi.Input['JobLoadLoadSpecArgs']]):
        pulumi.set(self, "load_spec", value)

    @property
    @pulumi.getter(name="vpcLoadDistribution")
    def vpc_load_distribution(self) -> Optional[pulumi.Input['JobLoadVpcLoadDistributionArgs']]:
        """
        Source of stress.
        """
        return pulumi.get(self, "vpc_load_distribution")

    @vpc_load_distribution.setter
    def vpc_load_distribution(self, value: Optional[pulumi.Input['JobLoadVpcLoadDistributionArgs']]):
        pulumi.set(self, "vpc_load_distribution", value)


@pulumi.input_type
class JobLoadGeoRegionsLoadDistributionArgs:
    def __init__(__self__, *,
                 region_id: pulumi.Input[int],
                 percentage: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] region_id: Regional ID.
        :param pulumi.Input[int] percentage: Percentage.
        :param pulumi.Input[str] region: Region.
        """
        pulumi.set(__self__, "region_id", region_id)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[int]:
        """
        Regional ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class JobLoadLoadSpecArgs:
    def __init__(__self__, *,
                 concurrency: Optional[pulumi.Input['JobLoadLoadSpecConcurrencyArgs']] = None,
                 requests_per_second: Optional[pulumi.Input['JobLoadLoadSpecRequestsPerSecondArgs']] = None,
                 script_origin: Optional[pulumi.Input['JobLoadLoadSpecScriptOriginArgs']] = None):
        """
        :param pulumi.Input['JobLoadLoadSpecConcurrencyArgs'] concurrency: Configuration of concurrent pressure mode.
        :param pulumi.Input['JobLoadLoadSpecRequestsPerSecondArgs'] requests_per_second: Average number of requests per second.
        :param pulumi.Input['JobLoadLoadSpecScriptOriginArgs'] script_origin: Built-in stress mode in script.
        """
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if requests_per_second is not None:
            pulumi.set(__self__, "requests_per_second", requests_per_second)
        if script_origin is not None:
            pulumi.set(__self__, "script_origin", script_origin)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input['JobLoadLoadSpecConcurrencyArgs']]:
        """
        Configuration of concurrent pressure mode.
        """
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input['JobLoadLoadSpecConcurrencyArgs']]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter(name="requestsPerSecond")
    def requests_per_second(self) -> Optional[pulumi.Input['JobLoadLoadSpecRequestsPerSecondArgs']]:
        """
        Average number of requests per second.
        """
        return pulumi.get(self, "requests_per_second")

    @requests_per_second.setter
    def requests_per_second(self, value: Optional[pulumi.Input['JobLoadLoadSpecRequestsPerSecondArgs']]):
        pulumi.set(self, "requests_per_second", value)

    @property
    @pulumi.getter(name="scriptOrigin")
    def script_origin(self) -> Optional[pulumi.Input['JobLoadLoadSpecScriptOriginArgs']]:
        """
        Built-in stress mode in script.
        """
        return pulumi.get(self, "script_origin")

    @script_origin.setter
    def script_origin(self, value: Optional[pulumi.Input['JobLoadLoadSpecScriptOriginArgs']]):
        pulumi.set(self, "script_origin", value)


@pulumi.input_type
class JobLoadLoadSpecConcurrencyArgs:
    def __init__(__self__, *,
                 graceful_stop_seconds: Optional[pulumi.Input[int]] = None,
                 iteration_count: Optional[pulumi.Input[int]] = None,
                 max_requests_per_second: Optional[pulumi.Input[int]] = None,
                 stages: Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadLoadSpecConcurrencyStageArgs']]]] = None):
        """
        :param pulumi.Input[int] graceful_stop_seconds: Wait time for graceful termination of the task.
        :param pulumi.Input[int] iteration_count: Number of runs.
        :param pulumi.Input[int] max_requests_per_second: Maximum requests per second.
        :param pulumi.Input[Sequence[pulumi.Input['JobLoadLoadSpecConcurrencyStageArgs']]] stages: Multi-phase configuration array.
        """
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if iteration_count is not None:
            pulumi.set(__self__, "iteration_count", iteration_count)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Wait time for graceful termination of the task.
        """
        return pulumi.get(self, "graceful_stop_seconds")

    @graceful_stop_seconds.setter
    def graceful_stop_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_stop_seconds", value)

    @property
    @pulumi.getter(name="iterationCount")
    def iteration_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of runs.
        """
        return pulumi.get(self, "iteration_count")

    @iteration_count.setter
    def iteration_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration_count", value)

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per second.
        """
        return pulumi.get(self, "max_requests_per_second")

    @max_requests_per_second.setter
    def max_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_requests_per_second", value)

    @property
    @pulumi.getter
    def stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadLoadSpecConcurrencyStageArgs']]]]:
        """
        Multi-phase configuration array.
        """
        return pulumi.get(self, "stages")

    @stages.setter
    def stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadLoadSpecConcurrencyStageArgs']]]]):
        pulumi.set(self, "stages", value)


@pulumi.input_type
class JobLoadLoadSpecConcurrencyStageArgs:
    def __init__(__self__, *,
                 duration_seconds: Optional[pulumi.Input[int]] = None,
                 target_virtual_users: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration_seconds: Pressure time.
        :param pulumi.Input[int] target_virtual_users: Number of virtual users.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if target_virtual_users is not None:
            pulumi.set(__self__, "target_virtual_users", target_virtual_users)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Pressure time.
        """
        return pulumi.get(self, "duration_seconds")

    @duration_seconds.setter
    def duration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_seconds", value)

    @property
    @pulumi.getter(name="targetVirtualUsers")
    def target_virtual_users(self) -> Optional[pulumi.Input[int]]:
        """
        Number of virtual users.
        """
        return pulumi.get(self, "target_virtual_users")

    @target_virtual_users.setter
    def target_virtual_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_virtual_users", value)


@pulumi.input_type
class JobLoadLoadSpecRequestsPerSecondArgs:
    def __init__(__self__, *,
                 duration_seconds: Optional[pulumi.Input[int]] = None,
                 graceful_stop_seconds: Optional[pulumi.Input[int]] = None,
                 max_requests_per_second: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[int]] = None,
                 start_requests_per_second: Optional[pulumi.Input[int]] = None,
                 target_requests_per_second: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration_seconds: Pressure time.
        :param pulumi.Input[int] graceful_stop_seconds: Elegant shutdown waiting time.
        :param pulumi.Input[int] max_requests_per_second: Maximum requests per second.
        :param pulumi.Input[int] resources: Number of resources.
        :param pulumi.Input[int] start_requests_per_second: Initial RPS.
        :param pulumi.Input[int] target_requests_per_second: Target RPS, invalid input parameter.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if start_requests_per_second is not None:
            pulumi.set(__self__, "start_requests_per_second", start_requests_per_second)
        if target_requests_per_second is not None:
            pulumi.set(__self__, "target_requests_per_second", target_requests_per_second)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Pressure time.
        """
        return pulumi.get(self, "duration_seconds")

    @duration_seconds.setter
    def duration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_seconds", value)

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Elegant shutdown waiting time.
        """
        return pulumi.get(self, "graceful_stop_seconds")

    @graceful_stop_seconds.setter
    def graceful_stop_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_stop_seconds", value)

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per second.
        """
        return pulumi.get(self, "max_requests_per_second")

    @max_requests_per_second.setter
    def max_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_requests_per_second", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[int]]:
        """
        Number of resources.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="startRequestsPerSecond")
    def start_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Initial RPS.
        """
        return pulumi.get(self, "start_requests_per_second")

    @start_requests_per_second.setter
    def start_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_requests_per_second", value)

    @property
    @pulumi.getter(name="targetRequestsPerSecond")
    def target_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Target RPS, invalid input parameter.
        """
        return pulumi.get(self, "target_requests_per_second")

    @target_requests_per_second.setter
    def target_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_requests_per_second", value)


@pulumi.input_type
class JobLoadLoadSpecScriptOriginArgs:
    def __init__(__self__, *,
                 duration_seconds: pulumi.Input[int],
                 machine_number: pulumi.Input[int],
                 machine_specification: pulumi.Input[str]):
        """
        :param pulumi.Input[int] duration_seconds: Pressure testing time.
        :param pulumi.Input[int] machine_number: Number of machines.
        :param pulumi.Input[str] machine_specification: Machine specification.
        """
        pulumi.set(__self__, "duration_seconds", duration_seconds)
        pulumi.set(__self__, "machine_number", machine_number)
        pulumi.set(__self__, "machine_specification", machine_specification)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> pulumi.Input[int]:
        """
        Pressure testing time.
        """
        return pulumi.get(self, "duration_seconds")

    @duration_seconds.setter
    def duration_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration_seconds", value)

    @property
    @pulumi.getter(name="machineNumber")
    def machine_number(self) -> pulumi.Input[int]:
        """
        Number of machines.
        """
        return pulumi.get(self, "machine_number")

    @machine_number.setter
    def machine_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "machine_number", value)

    @property
    @pulumi.getter(name="machineSpecification")
    def machine_specification(self) -> pulumi.Input[str]:
        """
        Machine specification.
        """
        return pulumi.get(self, "machine_specification")

    @machine_specification.setter
    def machine_specification(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_specification", value)


@pulumi.input_type
class JobLoadVpcLoadDistributionArgs:
    def __init__(__self__, *,
                 region_id: pulumi.Input[int],
                 region: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] region_id: Regional ID.
        :param pulumi.Input[str] region: Region.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet ID list.
        :param pulumi.Input[str] vpc_id: VPC ID.
        """
        pulumi.set(__self__, "region_id", region_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[int]:
        """
        Regional ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnet ID list.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class JobPluginArgs:
    def __init__(__self__, *,
                 file_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: File id.
        :param pulumi.Input[str] name: File name.
        :param pulumi.Input[int] size: File size.
        :param pulumi.Input[str] type: Scene Type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class JobProtocolArgs:
    def __init__(__self__, *,
                 file_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: File ID.
        :param pulumi.Input[str] name: Protocol name.
        :param pulumi.Input[int] size: File name.
        :param pulumi.Input[str] type: Scene Type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File ID.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File name.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class JobRequestFileArgs:
    def __init__(__self__, *,
                 file_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: File id.
        :param pulumi.Input[str] name: File name.
        :param pulumi.Input[int] size: File size.
        :param pulumi.Input[str] type: Scene Type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class JobTestScriptArgs:
    def __init__(__self__, *,
                 encoded_content: Optional[pulumi.Input[str]] = None,
                 encoded_http_archive: Optional[pulumi.Input[str]] = None,
                 load_weight: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] encoded_content: Base64 encoded file content.
        :param pulumi.Input[str] encoded_http_archive: Base64 encoded har structure.
        :param pulumi.Input[int] load_weight: Script weight, range 1-100.
        :param pulumi.Input[str] name: File name.
        :param pulumi.Input[int] size: File size.
        :param pulumi.Input[str] type: Scene Type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if encoded_content is not None:
            pulumi.set(__self__, "encoded_content", encoded_content)
        if encoded_http_archive is not None:
            pulumi.set(__self__, "encoded_http_archive", encoded_http_archive)
        if load_weight is not None:
            pulumi.set(__self__, "load_weight", load_weight)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="encodedContent")
    def encoded_content(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded file content.
        """
        return pulumi.get(self, "encoded_content")

    @encoded_content.setter
    def encoded_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_content", value)

    @property
    @pulumi.getter(name="encodedHttpArchive")
    def encoded_http_archive(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded har structure.
        """
        return pulumi.get(self, "encoded_http_archive")

    @encoded_http_archive.setter
    def encoded_http_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_http_archive", value)

    @property
    @pulumi.getter(name="loadWeight")
    def load_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Script weight, range 1-100.
        """
        return pulumi.get(self, "load_weight")

    @load_weight.setter
    def load_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_weight", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ProjectTagArgs:
    def __init__(__self__, *,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tag_key: tag key.
        :param pulumi.Input[str] tag_value: tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class ScenarioDatasetArgs:
    def __init__(__self__, *,
                 header_in_file: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 split: pulumi.Input[bool],
                 file_id: Optional[pulumi.Input[str]] = None,
                 head_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 header_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 line_count: Optional[pulumi.Input[int]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 tail_lines: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] header_in_file: Whether the first line is the parameter name.
        :param pulumi.Input[str] name: The file name where the test dataset is located.
        :param pulumi.Input[bool] split: Test whether the dataset is fragmented.
        :param pulumi.Input[str] file_id: File ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] head_lines: Header data row.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] header_columns: Parameter name array.
        :param pulumi.Input[int] line_count: Number of file lines.
        :param pulumi.Input[int] size: Number of file bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tail_lines: Trailing data row.
        :param pulumi.Input[str] type: File type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        pulumi.set(__self__, "header_in_file", header_in_file)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "split", split)
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if head_lines is not None:
            pulumi.set(__self__, "head_lines", head_lines)
        if header_columns is not None:
            pulumi.set(__self__, "header_columns", header_columns)
        if line_count is not None:
            pulumi.set(__self__, "line_count", line_count)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if tail_lines is not None:
            pulumi.set(__self__, "tail_lines", tail_lines)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="headerInFile")
    def header_in_file(self) -> pulumi.Input[bool]:
        """
        Whether the first line is the parameter name.
        """
        return pulumi.get(self, "header_in_file")

    @header_in_file.setter
    def header_in_file(self, value: pulumi.Input[bool]):
        pulumi.set(self, "header_in_file", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The file name where the test dataset is located.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def split(self) -> pulumi.Input[bool]:
        """
        Test whether the dataset is fragmented.
        """
        return pulumi.get(self, "split")

    @split.setter
    def split(self, value: pulumi.Input[bool]):
        pulumi.set(self, "split", value)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File ID.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter(name="headLines")
    def head_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Header data row.
        """
        return pulumi.get(self, "head_lines")

    @head_lines.setter
    def head_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "head_lines", value)

    @property
    @pulumi.getter(name="headerColumns")
    def header_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Parameter name array.
        """
        return pulumi.get(self, "header_columns")

    @header_columns.setter
    def header_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "header_columns", value)

    @property
    @pulumi.getter(name="lineCount")
    def line_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of file lines.
        """
        return pulumi.get(self, "line_count")

    @line_count.setter
    def line_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line_count", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Number of file bytes.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="tailLines")
    def tail_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Trailing data row.
        """
        return pulumi.get(self, "tail_lines")

    @tail_lines.setter
    def tail_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tail_lines", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ScenarioDomainNameConfigArgs:
    def __init__(__self__, *,
                 dns_config: Optional[pulumi.Input['ScenarioDomainNameConfigDnsConfigArgs']] = None,
                 host_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDomainNameConfigHostAliasArgs']]]] = None):
        """
        :param pulumi.Input['ScenarioDomainNameConfigDnsConfigArgs'] dns_config: DNS configuration.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioDomainNameConfigHostAliasArgs']]] host_aliases: Domain name binding configuration.
        """
        if dns_config is not None:
            pulumi.set(__self__, "dns_config", dns_config)
        if host_aliases is not None:
            pulumi.set(__self__, "host_aliases", host_aliases)

    @property
    @pulumi.getter(name="dnsConfig")
    def dns_config(self) -> Optional[pulumi.Input['ScenarioDomainNameConfigDnsConfigArgs']]:
        """
        DNS configuration.
        """
        return pulumi.get(self, "dns_config")

    @dns_config.setter
    def dns_config(self, value: Optional[pulumi.Input['ScenarioDomainNameConfigDnsConfigArgs']]):
        pulumi.set(self, "dns_config", value)

    @property
    @pulumi.getter(name="hostAliases")
    def host_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDomainNameConfigHostAliasArgs']]]]:
        """
        Domain name binding configuration.
        """
        return pulumi.get(self, "host_aliases")

    @host_aliases.setter
    def host_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioDomainNameConfigHostAliasArgs']]]]):
        pulumi.set(self, "host_aliases", value)


@pulumi.input_type
class ScenarioDomainNameConfigDnsConfigArgs:
    def __init__(__self__, *,
                 nameservers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nameservers: DNS IP List.
        """
        if nameservers is not None:
            pulumi.set(__self__, "nameservers", nameservers)

    @property
    @pulumi.getter
    def nameservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNS IP List.
        """
        return pulumi.get(self, "nameservers")

    @nameservers.setter
    def nameservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nameservers", value)


@pulumi.input_type
class ScenarioDomainNameConfigHostAliasArgs:
    def __init__(__self__, *,
                 host_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_names: List of domain names to be bound.
        :param pulumi.Input[str] ip: The IP address to be bound.
        """
        if host_names is not None:
            pulumi.set(__self__, "host_names", host_names)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter(name="hostNames")
    def host_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of domain names to be bound.
        """
        return pulumi.get(self, "host_names")

    @host_names.setter
    def host_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_names", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address to be bound.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


@pulumi.input_type
class ScenarioLoadArgs:
    def __init__(__self__, *,
                 geo_regions_load_distributions: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioLoadGeoRegionsLoadDistributionArgs']]]] = None,
                 load_spec: Optional[pulumi.Input['ScenarioLoadLoadSpecArgs']] = None,
                 vpc_load_distribution: Optional[pulumi.Input['ScenarioLoadVpcLoadDistributionArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioLoadGeoRegionsLoadDistributionArgs']]] geo_regions_load_distributions: Pressure distribution.
        :param pulumi.Input['ScenarioLoadLoadSpecArgs'] load_spec: Pressure allocation.
        :param pulumi.Input['ScenarioLoadVpcLoadDistributionArgs'] vpc_load_distribution: Source of stress.
        """
        if geo_regions_load_distributions is not None:
            pulumi.set(__self__, "geo_regions_load_distributions", geo_regions_load_distributions)
        if load_spec is not None:
            pulumi.set(__self__, "load_spec", load_spec)
        if vpc_load_distribution is not None:
            pulumi.set(__self__, "vpc_load_distribution", vpc_load_distribution)

    @property
    @pulumi.getter(name="geoRegionsLoadDistributions")
    def geo_regions_load_distributions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioLoadGeoRegionsLoadDistributionArgs']]]]:
        """
        Pressure distribution.
        """
        return pulumi.get(self, "geo_regions_load_distributions")

    @geo_regions_load_distributions.setter
    def geo_regions_load_distributions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioLoadGeoRegionsLoadDistributionArgs']]]]):
        pulumi.set(self, "geo_regions_load_distributions", value)

    @property
    @pulumi.getter(name="loadSpec")
    def load_spec(self) -> Optional[pulumi.Input['ScenarioLoadLoadSpecArgs']]:
        """
        Pressure allocation.
        """
        return pulumi.get(self, "load_spec")

    @load_spec.setter
    def load_spec(self, value: Optional[pulumi.Input['ScenarioLoadLoadSpecArgs']]):
        pulumi.set(self, "load_spec", value)

    @property
    @pulumi.getter(name="vpcLoadDistribution")
    def vpc_load_distribution(self) -> Optional[pulumi.Input['ScenarioLoadVpcLoadDistributionArgs']]:
        """
        Source of stress.
        """
        return pulumi.get(self, "vpc_load_distribution")

    @vpc_load_distribution.setter
    def vpc_load_distribution(self, value: Optional[pulumi.Input['ScenarioLoadVpcLoadDistributionArgs']]):
        pulumi.set(self, "vpc_load_distribution", value)


@pulumi.input_type
class ScenarioLoadGeoRegionsLoadDistributionArgs:
    def __init__(__self__, *,
                 region_id: pulumi.Input[int],
                 percentage: Optional[pulumi.Input[int]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] region_id: Regional ID.
        :param pulumi.Input[int] percentage: Percentage.
        :param pulumi.Input[str] region: Region.
        """
        pulumi.set(__self__, "region_id", region_id)
        if percentage is not None:
            pulumi.set(__self__, "percentage", percentage)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[int]:
        """
        Regional ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def percentage(self) -> Optional[pulumi.Input[int]]:
        """
        Percentage.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ScenarioLoadLoadSpecArgs:
    def __init__(__self__, *,
                 concurrency: Optional[pulumi.Input['ScenarioLoadLoadSpecConcurrencyArgs']] = None,
                 requests_per_second: Optional[pulumi.Input['ScenarioLoadLoadSpecRequestsPerSecondArgs']] = None,
                 script_origin: Optional[pulumi.Input['ScenarioLoadLoadSpecScriptOriginArgs']] = None):
        """
        :param pulumi.Input['ScenarioLoadLoadSpecConcurrencyArgs'] concurrency: Configuration of concurrent pressure mode.
        :param pulumi.Input['ScenarioLoadLoadSpecRequestsPerSecondArgs'] requests_per_second: Configuration of RPS pressure mode.
        :param pulumi.Input['ScenarioLoadLoadSpecScriptOriginArgs'] script_origin: Built-in stress mode in script.
        """
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if requests_per_second is not None:
            pulumi.set(__self__, "requests_per_second", requests_per_second)
        if script_origin is not None:
            pulumi.set(__self__, "script_origin", script_origin)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input['ScenarioLoadLoadSpecConcurrencyArgs']]:
        """
        Configuration of concurrent pressure mode.
        """
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input['ScenarioLoadLoadSpecConcurrencyArgs']]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter(name="requestsPerSecond")
    def requests_per_second(self) -> Optional[pulumi.Input['ScenarioLoadLoadSpecRequestsPerSecondArgs']]:
        """
        Configuration of RPS pressure mode.
        """
        return pulumi.get(self, "requests_per_second")

    @requests_per_second.setter
    def requests_per_second(self, value: Optional[pulumi.Input['ScenarioLoadLoadSpecRequestsPerSecondArgs']]):
        pulumi.set(self, "requests_per_second", value)

    @property
    @pulumi.getter(name="scriptOrigin")
    def script_origin(self) -> Optional[pulumi.Input['ScenarioLoadLoadSpecScriptOriginArgs']]:
        """
        Built-in stress mode in script.
        """
        return pulumi.get(self, "script_origin")

    @script_origin.setter
    def script_origin(self, value: Optional[pulumi.Input['ScenarioLoadLoadSpecScriptOriginArgs']]):
        pulumi.set(self, "script_origin", value)


@pulumi.input_type
class ScenarioLoadLoadSpecConcurrencyArgs:
    def __init__(__self__, *,
                 graceful_stop_seconds: Optional[pulumi.Input[int]] = None,
                 iteration_count: Optional[pulumi.Input[int]] = None,
                 max_requests_per_second: Optional[pulumi.Input[int]] = None,
                 stages: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioLoadLoadSpecConcurrencyStageArgs']]]] = None):
        """
        :param pulumi.Input[int] graceful_stop_seconds: Wait time for graceful termination of the task.
        :param pulumi.Input[int] iteration_count: Number of runs.
        :param pulumi.Input[int] max_requests_per_second: Maximum RPS.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioLoadLoadSpecConcurrencyStageArgs']]] stages: Multi-phase configuration array.
        """
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if iteration_count is not None:
            pulumi.set(__self__, "iteration_count", iteration_count)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if stages is not None:
            pulumi.set(__self__, "stages", stages)

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Wait time for graceful termination of the task.
        """
        return pulumi.get(self, "graceful_stop_seconds")

    @graceful_stop_seconds.setter
    def graceful_stop_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_stop_seconds", value)

    @property
    @pulumi.getter(name="iterationCount")
    def iteration_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of runs.
        """
        return pulumi.get(self, "iteration_count")

    @iteration_count.setter
    def iteration_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iteration_count", value)

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum RPS.
        """
        return pulumi.get(self, "max_requests_per_second")

    @max_requests_per_second.setter
    def max_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_requests_per_second", value)

    @property
    @pulumi.getter
    def stages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioLoadLoadSpecConcurrencyStageArgs']]]]:
        """
        Multi-phase configuration array.
        """
        return pulumi.get(self, "stages")

    @stages.setter
    def stages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioLoadLoadSpecConcurrencyStageArgs']]]]):
        pulumi.set(self, "stages", value)


@pulumi.input_type
class ScenarioLoadLoadSpecConcurrencyStageArgs:
    def __init__(__self__, *,
                 duration_seconds: Optional[pulumi.Input[int]] = None,
                 target_virtual_users: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration_seconds: Pressure time.
        :param pulumi.Input[int] target_virtual_users: Number of virtual users.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if target_virtual_users is not None:
            pulumi.set(__self__, "target_virtual_users", target_virtual_users)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Pressure time.
        """
        return pulumi.get(self, "duration_seconds")

    @duration_seconds.setter
    def duration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_seconds", value)

    @property
    @pulumi.getter(name="targetVirtualUsers")
    def target_virtual_users(self) -> Optional[pulumi.Input[int]]:
        """
        Number of virtual users.
        """
        return pulumi.get(self, "target_virtual_users")

    @target_virtual_users.setter
    def target_virtual_users(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_virtual_users", value)


@pulumi.input_type
class ScenarioLoadLoadSpecRequestsPerSecondArgs:
    def __init__(__self__, *,
                 duration_seconds: Optional[pulumi.Input[int]] = None,
                 graceful_stop_seconds: Optional[pulumi.Input[int]] = None,
                 max_requests_per_second: Optional[pulumi.Input[int]] = None,
                 resources: Optional[pulumi.Input[int]] = None,
                 start_requests_per_second: Optional[pulumi.Input[int]] = None,
                 target_requests_per_second: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] duration_seconds: Pressure time.
        :param pulumi.Input[int] graceful_stop_seconds: Elegant shutdown waiting time.
        :param pulumi.Input[int] max_requests_per_second: Maximum RPS.
        :param pulumi.Input[int] resources: Number of resources.
        :param pulumi.Input[int] start_requests_per_second: Initial RPS.
        :param pulumi.Input[int] target_requests_per_second: Target RPS, invalid input parameter.
        """
        if duration_seconds is not None:
            pulumi.set(__self__, "duration_seconds", duration_seconds)
        if graceful_stop_seconds is not None:
            pulumi.set(__self__, "graceful_stop_seconds", graceful_stop_seconds)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if start_requests_per_second is not None:
            pulumi.set(__self__, "start_requests_per_second", start_requests_per_second)
        if target_requests_per_second is not None:
            pulumi.set(__self__, "target_requests_per_second", target_requests_per_second)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Pressure time.
        """
        return pulumi.get(self, "duration_seconds")

    @duration_seconds.setter
    def duration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration_seconds", value)

    @property
    @pulumi.getter(name="gracefulStopSeconds")
    def graceful_stop_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Elegant shutdown waiting time.
        """
        return pulumi.get(self, "graceful_stop_seconds")

    @graceful_stop_seconds.setter
    def graceful_stop_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "graceful_stop_seconds", value)

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum RPS.
        """
        return pulumi.get(self, "max_requests_per_second")

    @max_requests_per_second.setter
    def max_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_requests_per_second", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[int]]:
        """
        Number of resources.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="startRequestsPerSecond")
    def start_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Initial RPS.
        """
        return pulumi.get(self, "start_requests_per_second")

    @start_requests_per_second.setter
    def start_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_requests_per_second", value)

    @property
    @pulumi.getter(name="targetRequestsPerSecond")
    def target_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Target RPS, invalid input parameter.
        """
        return pulumi.get(self, "target_requests_per_second")

    @target_requests_per_second.setter
    def target_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_requests_per_second", value)


@pulumi.input_type
class ScenarioLoadLoadSpecScriptOriginArgs:
    def __init__(__self__, *,
                 duration_seconds: pulumi.Input[int],
                 machine_number: pulumi.Input[int],
                 machine_specification: pulumi.Input[str]):
        """
        :param pulumi.Input[int] duration_seconds: Pressure testing time.
        :param pulumi.Input[int] machine_number: Number of machines.
        :param pulumi.Input[str] machine_specification: Machine specification.
        """
        pulumi.set(__self__, "duration_seconds", duration_seconds)
        pulumi.set(__self__, "machine_number", machine_number)
        pulumi.set(__self__, "machine_specification", machine_specification)

    @property
    @pulumi.getter(name="durationSeconds")
    def duration_seconds(self) -> pulumi.Input[int]:
        """
        Pressure testing time.
        """
        return pulumi.get(self, "duration_seconds")

    @duration_seconds.setter
    def duration_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration_seconds", value)

    @property
    @pulumi.getter(name="machineNumber")
    def machine_number(self) -> pulumi.Input[int]:
        """
        Number of machines.
        """
        return pulumi.get(self, "machine_number")

    @machine_number.setter
    def machine_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "machine_number", value)

    @property
    @pulumi.getter(name="machineSpecification")
    def machine_specification(self) -> pulumi.Input[str]:
        """
        Machine specification.
        """
        return pulumi.get(self, "machine_specification")

    @machine_specification.setter
    def machine_specification(self, value: pulumi.Input[str]):
        pulumi.set(self, "machine_specification", value)


@pulumi.input_type
class ScenarioLoadVpcLoadDistributionArgs:
    def __init__(__self__, *,
                 region_id: pulumi.Input[int],
                 region: Optional[pulumi.Input[str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] region_id: Regional ID.
        :param pulumi.Input[str] region: Region.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: Subnet ID list.
        :param pulumi.Input[str] vpc_id: VPC ID.
        """
        pulumi.set(__self__, "region_id", region_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Input[int]:
        """
        Regional ID.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Subnet ID list.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class ScenarioPluginArgs:
    def __init__(__self__, *,
                 file_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: File id.
        :param pulumi.Input[str] name: File name.
        :param pulumi.Input[int] size: File size.
        :param pulumi.Input[str] type: File type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ScenarioProtocolArgs:
    def __init__(__self__, *,
                 file_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: File ID.
        :param pulumi.Input[str] name: Protocol name.
        :param pulumi.Input[int] size: File name.
        :param pulumi.Input[str] type: File type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File ID.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File name.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ScenarioRequestFileArgs:
    def __init__(__self__, *,
                 file_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: File id.
        :param pulumi.Input[str] name: File name.
        :param pulumi.Input[int] size: File size.
        :param pulumi.Input[str] type: File type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if file_id is not None:
            pulumi.set(__self__, "file_id", file_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> Optional[pulumi.Input[str]]:
        """
        File id.
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ScenarioSlaPolicyArgs:
    def __init__(__self__, *,
                 alert_channel: Optional[pulumi.Input['ScenarioSlaPolicyAlertChannelArgs']] = None,
                 sla_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleArgs']]]] = None):
        """
        :param pulumi.Input['ScenarioSlaPolicyAlertChannelArgs'] alert_channel: Alarm notification channel.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleArgs']]] sla_rules: SLA rules.
        """
        if alert_channel is not None:
            pulumi.set(__self__, "alert_channel", alert_channel)
        if sla_rules is not None:
            pulumi.set(__self__, "sla_rules", sla_rules)

    @property
    @pulumi.getter(name="alertChannel")
    def alert_channel(self) -> Optional[pulumi.Input['ScenarioSlaPolicyAlertChannelArgs']]:
        """
        Alarm notification channel.
        """
        return pulumi.get(self, "alert_channel")

    @alert_channel.setter
    def alert_channel(self, value: Optional[pulumi.Input['ScenarioSlaPolicyAlertChannelArgs']]):
        pulumi.set(self, "alert_channel", value)

    @property
    @pulumi.getter(name="slaRules")
    def sla_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleArgs']]]]:
        """
        SLA rules.
        """
        return pulumi.get(self, "sla_rules")

    @sla_rules.setter
    def sla_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleArgs']]]]):
        pulumi.set(self, "sla_rules", value)


@pulumi.input_type
class ScenarioSlaPolicyAlertChannelArgs:
    def __init__(__self__, *,
                 amp_consumer_id: Optional[pulumi.Input[str]] = None,
                 notice_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] amp_consumer_id: AMP consumer ID.
        :param pulumi.Input[str] notice_id: Notification template ID.
        """
        if amp_consumer_id is not None:
            pulumi.set(__self__, "amp_consumer_id", amp_consumer_id)
        if notice_id is not None:
            pulumi.set(__self__, "notice_id", notice_id)

    @property
    @pulumi.getter(name="ampConsumerId")
    def amp_consumer_id(self) -> Optional[pulumi.Input[str]]:
        """
        AMP consumer ID.
        """
        return pulumi.get(self, "amp_consumer_id")

    @amp_consumer_id.setter
    def amp_consumer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "amp_consumer_id", value)

    @property
    @pulumi.getter(name="noticeId")
    def notice_id(self) -> Optional[pulumi.Input[str]]:
        """
        Notification template ID.
        """
        return pulumi.get(self, "notice_id")

    @notice_id.setter
    def notice_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notice_id", value)


@pulumi.input_type
class ScenarioSlaPolicySlaRuleArgs:
    def __init__(__self__, *,
                 abort_flag: Optional[pulumi.Input[bool]] = None,
                 aggregation: Optional[pulumi.Input[str]] = None,
                 condition: Optional[pulumi.Input[str]] = None,
                 for_: Optional[pulumi.Input[str]] = None,
                 label_filters: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleLabelFilterArgs']]]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] abort_flag: Whether to stop the stress test task.
        :param pulumi.Input[str] aggregation: Aggregation method of pressure test index.
        :param pulumi.Input[str] condition: Pressure test index condition judgment symbol.
        :param pulumi.Input[str] for_: duraion.
        :param pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleLabelFilterArgs']]] label_filters: tag.
        :param pulumi.Input[str] metric: Pressure test index.
        :param pulumi.Input[float] value: Threshold value.
        """
        if abort_flag is not None:
            pulumi.set(__self__, "abort_flag", abort_flag)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if for_ is not None:
            pulumi.set(__self__, "for_", for_)
        if label_filters is not None:
            pulumi.set(__self__, "label_filters", label_filters)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="abortFlag")
    def abort_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to stop the stress test task.
        """
        return pulumi.get(self, "abort_flag")

    @abort_flag.setter
    def abort_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "abort_flag", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        Aggregation method of pressure test index.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        Pressure test index condition judgment symbol.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="for")
    def for_(self) -> Optional[pulumi.Input[str]]:
        """
        duraion.
        """
        return pulumi.get(self, "for_")

    @for_.setter
    def for_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "for_", value)

    @property
    @pulumi.getter(name="labelFilters")
    def label_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleLabelFilterArgs']]]]:
        """
        tag.
        """
        return pulumi.get(self, "label_filters")

    @label_filters.setter
    def label_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScenarioSlaPolicySlaRuleLabelFilterArgs']]]]):
        pulumi.set(self, "label_filters", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        Pressure test index.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        """
        Threshold value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ScenarioSlaPolicySlaRuleLabelFilterArgs:
    def __init__(__self__, *,
                 label_name: Optional[pulumi.Input[str]] = None,
                 label_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] label_name: Label name.
        :param pulumi.Input[str] label_value: Label value.
        """
        if label_name is not None:
            pulumi.set(__self__, "label_name", label_name)
        if label_value is not None:
            pulumi.set(__self__, "label_value", label_value)

    @property
    @pulumi.getter(name="labelName")
    def label_name(self) -> Optional[pulumi.Input[str]]:
        """
        Label name.
        """
        return pulumi.get(self, "label_name")

    @label_name.setter
    def label_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_name", value)

    @property
    @pulumi.getter(name="labelValue")
    def label_value(self) -> Optional[pulumi.Input[str]]:
        """
        Label value.
        """
        return pulumi.get(self, "label_value")

    @label_value.setter
    def label_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_value", value)


@pulumi.input_type
class ScenarioTestScriptArgs:
    def __init__(__self__, *,
                 encoded_content: Optional[pulumi.Input[str]] = None,
                 encoded_http_archive: Optional[pulumi.Input[str]] = None,
                 load_weight: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] encoded_content: Base64 encoded file content.
        :param pulumi.Input[str] encoded_http_archive: Base64 encoded har structure.
        :param pulumi.Input[int] load_weight: Script weight, range 1-100.
        :param pulumi.Input[str] name: File name.
        :param pulumi.Input[int] size: File size.
        :param pulumi.Input[str] type: File type.
        :param pulumi.Input[str] updated_at: Update time.
        """
        if encoded_content is not None:
            pulumi.set(__self__, "encoded_content", encoded_content)
        if encoded_http_archive is not None:
            pulumi.set(__self__, "encoded_http_archive", encoded_http_archive)
        if load_weight is not None:
            pulumi.set(__self__, "load_weight", load_weight)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="encodedContent")
    def encoded_content(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded file content.
        """
        return pulumi.get(self, "encoded_content")

    @encoded_content.setter
    def encoded_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_content", value)

    @property
    @pulumi.getter(name="encodedHttpArchive")
    def encoded_http_archive(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded har structure.
        """
        return pulumi.get(self, "encoded_http_archive")

    @encoded_http_archive.setter
    def encoded_http_archive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_http_archive", value)

    @property
    @pulumi.getter(name="loadWeight")
    def load_weight(self) -> Optional[pulumi.Input[int]]:
        """
        Script weight, range 1-100.
        """
        return pulumi.get(self, "load_weight")

    @load_weight.setter
    def load_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_weight", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        File name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        File size.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        File type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class TmpKeyGenerateCredentialArgs:
    def __init__(__self__, *,
                 tmp_secret_id: Optional[pulumi.Input[str]] = None,
                 tmp_secret_key: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] tmp_secret_id: Temporary secret ID.
        :param pulumi.Input[str] tmp_secret_key: Temporary secret key.
        :param pulumi.Input[str] token: Temporary token.
        """
        if tmp_secret_id is not None:
            pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        if tmp_secret_key is not None:
            pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        Temporary secret ID.
        """
        return pulumi.get(self, "tmp_secret_id")

    @tmp_secret_id.setter
    def tmp_secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmp_secret_id", value)

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Temporary secret key.
        """
        return pulumi.get(self, "tmp_secret_key")

    @tmp_secret_key.setter
    def tmp_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmp_secret_key", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Temporary token.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)


