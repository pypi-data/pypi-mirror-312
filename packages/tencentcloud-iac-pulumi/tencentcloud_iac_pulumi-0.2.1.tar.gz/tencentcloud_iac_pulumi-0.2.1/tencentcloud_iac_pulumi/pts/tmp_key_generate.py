# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TmpKeyGenerateArgs', 'TmpKeyGenerate']

@pulumi.input_type
class TmpKeyGenerateArgs:
    def __init__(__self__, *,
                 project_id: pulumi.Input[str],
                 scenario_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TmpKeyGenerate resource.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        """
        pulumi.set(__self__, "project_id", project_id)
        if scenario_id is not None:
            pulumi.set(__self__, "scenario_id", scenario_id)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> Optional[pulumi.Input[str]]:
        """
        Scenario ID.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scenario_id", value)


@pulumi.input_type
class _TmpKeyGenerateState:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['TmpKeyGenerateCredentialArgs']]]] = None,
                 expired_time: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering TmpKeyGenerate resources.
        :param pulumi.Input[Sequence[pulumi.Input['TmpKeyGenerateCredentialArgs']]] credentials: Temporary access credentials.
        :param pulumi.Input[int] expired_time: Timestamp of temporary access credential timeout (in seconds).
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        :param pulumi.Input[int] start_time: The timestamp of the moment when the temporary access credential was obtained (in seconds).
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if expired_time is not None:
            pulumi.set(__self__, "expired_time", expired_time)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if scenario_id is not None:
            pulumi.set(__self__, "scenario_id", scenario_id)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpKeyGenerateCredentialArgs']]]]:
        """
        Temporary access credentials.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpKeyGenerateCredentialArgs']]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> Optional[pulumi.Input[int]]:
        """
        Timestamp of temporary access credential timeout (in seconds).
        """
        return pulumi.get(self, "expired_time")

    @expired_time.setter
    def expired_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expired_time", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> Optional[pulumi.Input[str]]:
        """
        Scenario ID.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scenario_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[int]]:
        """
        The timestamp of the moment when the temporary access credential was obtained (in seconds).
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_time", value)


class TmpKeyGenerate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a pts tmp_key

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tmp_key = tencentcloud.pts.TmpKeyGenerate("tmpKey",
            project_id="project-1b0zqmhg",
            scenario_id="scenario-abc")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmpKeyGenerateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a pts tmp_key

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tmp_key = tencentcloud.pts.TmpKeyGenerate("tmpKey",
            project_id="project-1b0zqmhg",
            scenario_id="scenario-abc")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TmpKeyGenerateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmpKeyGenerateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmpKeyGenerateArgs.__new__(TmpKeyGenerateArgs)

            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["scenario_id"] = scenario_id
            __props__.__dict__["credentials"] = None
            __props__.__dict__["expired_time"] = None
            __props__.__dict__["start_time"] = None
        super(TmpKeyGenerate, __self__).__init__(
            'tencentcloud:Pts/tmpKeyGenerate:TmpKeyGenerate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpKeyGenerateCredentialArgs']]]]] = None,
            expired_time: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            scenario_id: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[int]] = None) -> 'TmpKeyGenerate':
        """
        Get an existing TmpKeyGenerate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpKeyGenerateCredentialArgs']]]] credentials: Temporary access credentials.
        :param pulumi.Input[int] expired_time: Timestamp of temporary access credential timeout (in seconds).
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        :param pulumi.Input[int] start_time: The timestamp of the moment when the temporary access credential was obtained (in seconds).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmpKeyGenerateState.__new__(_TmpKeyGenerateState)

        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["expired_time"] = expired_time
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["scenario_id"] = scenario_id
        __props__.__dict__["start_time"] = start_time
        return TmpKeyGenerate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Sequence['outputs.TmpKeyGenerateCredential']]:
        """
        Temporary access credentials.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> pulumi.Output[int]:
        """
        Timestamp of temporary access credential timeout (in seconds).
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> pulumi.Output[Optional[str]]:
        """
        Scenario ID.
        """
        return pulumi.get(self, "scenario_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[int]:
        """
        The timestamp of the moment when the temporary access credential was obtained (in seconds).
        """
        return pulumi.get(self, "start_time")

