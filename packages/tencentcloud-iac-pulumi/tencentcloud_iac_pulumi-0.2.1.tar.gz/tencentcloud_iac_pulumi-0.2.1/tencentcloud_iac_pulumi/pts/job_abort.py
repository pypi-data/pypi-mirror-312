# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['JobAbortArgs', 'JobAbort']

@pulumi.input_type
class JobAbortArgs:
    def __init__(__self__, *,
                 job_id: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 scenario_id: pulumi.Input[str],
                 abort_reason: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a JobAbort resource.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        :param pulumi.Input[int] abort_reason: The reason for aborting the job.
        """
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "scenario_id", scenario_id)
        if abort_reason is not None:
            pulumi.set(__self__, "abort_reason", abort_reason)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[str]:
        """
        Job ID.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> pulumi.Input[str]:
        """
        Scenario ID.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scenario_id", value)

    @property
    @pulumi.getter(name="abortReason")
    def abort_reason(self) -> Optional[pulumi.Input[int]]:
        """
        The reason for aborting the job.
        """
        return pulumi.get(self, "abort_reason")

    @abort_reason.setter
    def abort_reason(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "abort_reason", value)


@pulumi.input_type
class _JobAbortState:
    def __init__(__self__, *,
                 abort_reason: Optional[pulumi.Input[int]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering JobAbort resources.
        :param pulumi.Input[int] abort_reason: The reason for aborting the job.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        """
        if abort_reason is not None:
            pulumi.set(__self__, "abort_reason", abort_reason)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if scenario_id is not None:
            pulumi.set(__self__, "scenario_id", scenario_id)

    @property
    @pulumi.getter(name="abortReason")
    def abort_reason(self) -> Optional[pulumi.Input[int]]:
        """
        The reason for aborting the job.
        """
        return pulumi.get(self, "abort_reason")

    @abort_reason.setter
    def abort_reason(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "abort_reason", value)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[str]]:
        """
        Job ID.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> Optional[pulumi.Input[str]]:
        """
        Scenario ID.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scenario_id", value)


class JobAbort(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_reason: Optional[pulumi.Input[int]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a pts job_abort

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        job_abort = tencentcloud.pts.JobAbort("jobAbort",
            job_id="job-my644ozi",
            project_id="project-45vw7v82",
            scenario_id="scenario-22q19f3k")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] abort_reason: The reason for aborting the job.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobAbortArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a pts job_abort

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        job_abort = tencentcloud.pts.JobAbort("jobAbort",
            job_id="job-my644ozi",
            project_id="project-45vw7v82",
            scenario_id="scenario-22q19f3k")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param JobAbortArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobAbortArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 abort_reason: Optional[pulumi.Input[int]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobAbortArgs.__new__(JobAbortArgs)

            __props__.__dict__["abort_reason"] = abort_reason
            if job_id is None and not opts.urn:
                raise TypeError("Missing required property 'job_id'")
            __props__.__dict__["job_id"] = job_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if scenario_id is None and not opts.urn:
                raise TypeError("Missing required property 'scenario_id'")
            __props__.__dict__["scenario_id"] = scenario_id
        super(JobAbort, __self__).__init__(
            'tencentcloud:Pts/jobAbort:JobAbort',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abort_reason: Optional[pulumi.Input[int]] = None,
            job_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            scenario_id: Optional[pulumi.Input[str]] = None) -> 'JobAbort':
        """
        Get an existing JobAbort resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] abort_reason: The reason for aborting the job.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Scenario ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JobAbortState.__new__(_JobAbortState)

        __props__.__dict__["abort_reason"] = abort_reason
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["scenario_id"] = scenario_id
        return JobAbort(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abortReason")
    def abort_reason(self) -> pulumi.Output[Optional[int]]:
        """
        The reason for aborting the job.
        """
        return pulumi.get(self, "abort_reason")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[str]:
        """
        Job ID.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> pulumi.Output[str]:
        """
        Scenario ID.
        """
        return pulumi.get(self, "scenario_id")

