# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CronJobArgs', 'CronJob']

@pulumi.input_type
class CronJobArgs:
    def __init__(__self__, *,
                 cron_expression: pulumi.Input[str],
                 frequency_type: pulumi.Input[int],
                 job_owner: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 scenario_id: pulumi.Input[str],
                 scenario_name: pulumi.Input[str],
                 end_time: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 notice_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CronJob resource.
        :param pulumi.Input[str] cron_expression: Cron expression, When setting cron_expression at that time, frequency_type must be greater than 1.
        :param pulumi.Input[int] frequency_type: Execution frequency type, `1`: execute only once; `2`: daily granularity; `3`: weekly granularity; `4`: advanced.
        :param pulumi.Input[str] job_owner: Job Owner.
        :param pulumi.Input[str] project_id: Project Id.
        :param pulumi.Input[str] scenario_id: Scenario Id.
        :param pulumi.Input[str] scenario_name: Scenario Name.
        :param pulumi.Input[str] end_time: End Time; type: Timestamp ISO8601.
        :param pulumi.Input[str] name: Cron Job Name.
        :param pulumi.Input[str] note: Note.
        :param pulumi.Input[str] notice_id: Notice ID.
        """
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "frequency_type", frequency_type)
        pulumi.set(__self__, "job_owner", job_owner)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "scenario_id", scenario_id)
        pulumi.set(__self__, "scenario_name", scenario_name)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if notice_id is not None:
            pulumi.set(__self__, "notice_id", notice_id)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> pulumi.Input[str]:
        """
        Cron expression, When setting cron_expression at that time, frequency_type must be greater than 1.
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter(name="frequencyType")
    def frequency_type(self) -> pulumi.Input[int]:
        """
        Execution frequency type, `1`: execute only once; `2`: daily granularity; `3`: weekly granularity; `4`: advanced.
        """
        return pulumi.get(self, "frequency_type")

    @frequency_type.setter
    def frequency_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "frequency_type", value)

    @property
    @pulumi.getter(name="jobOwner")
    def job_owner(self) -> pulumi.Input[str]:
        """
        Job Owner.
        """
        return pulumi.get(self, "job_owner")

    @job_owner.setter
    def job_owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_owner", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project Id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> pulumi.Input[str]:
        """
        Scenario Id.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scenario_id", value)

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> pulumi.Input[str]:
        """
        Scenario Name.
        """
        return pulumi.get(self, "scenario_name")

    @scenario_name.setter
    def scenario_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "scenario_name", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        End Time; type: Timestamp ISO8601.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cron Job Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        Note.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="noticeId")
    def notice_id(self) -> Optional[pulumi.Input[str]]:
        """
        Notice ID.
        """
        return pulumi.get(self, "notice_id")

    @notice_id.setter
    def notice_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notice_id", value)


@pulumi.input_type
class _CronJobState:
    def __init__(__self__, *,
                 abort_reason: Optional[pulumi.Input[int]] = None,
                 app_id: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None,
                 cron_job_id: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 frequency_type: Optional[pulumi.Input[int]] = None,
                 job_owner: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 notice_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 scenario_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 sub_account_uin: Optional[pulumi.Input[str]] = None,
                 uin: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CronJob resources.
        :param pulumi.Input[int] abort_reason: Reason for suspension.
        :param pulumi.Input[int] app_id: App ID.
        :param pulumi.Input[str] created_at: Creation time; type: Timestamp ISO8601.
        :param pulumi.Input[str] cron_expression: Cron expression, When setting cron_expression at that time, frequency_type must be greater than 1.
        :param pulumi.Input[str] cron_job_id: Cron job ID.
        :param pulumi.Input[str] end_time: End Time; type: Timestamp ISO8601.
        :param pulumi.Input[int] frequency_type: Execution frequency type, `1`: execute only once; `2`: daily granularity; `3`: weekly granularity; `4`: advanced.
        :param pulumi.Input[str] job_owner: Job Owner.
        :param pulumi.Input[str] name: Cron Job Name.
        :param pulumi.Input[str] note: Note.
        :param pulumi.Input[str] notice_id: Notice ID.
        :param pulumi.Input[str] project_id: Project Id.
        :param pulumi.Input[str] scenario_id: Scenario Id.
        :param pulumi.Input[str] scenario_name: Scenario Name.
        :param pulumi.Input[int] status: Scheduled task status.
        :param pulumi.Input[str] sub_account_uin: Sub-user ID.
        :param pulumi.Input[str] uin: User ID.
        :param pulumi.Input[str] updated_at: Update time; type: Timestamp ISO8601.
        """
        if abort_reason is not None:
            pulumi.set(__self__, "abort_reason", abort_reason)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)
        if cron_job_id is not None:
            pulumi.set(__self__, "cron_job_id", cron_job_id)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if frequency_type is not None:
            pulumi.set(__self__, "frequency_type", frequency_type)
        if job_owner is not None:
            pulumi.set(__self__, "job_owner", job_owner)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if notice_id is not None:
            pulumi.set(__self__, "notice_id", notice_id)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if scenario_id is not None:
            pulumi.set(__self__, "scenario_id", scenario_id)
        if scenario_name is not None:
            pulumi.set(__self__, "scenario_name", scenario_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sub_account_uin is not None:
            pulumi.set(__self__, "sub_account_uin", sub_account_uin)
        if uin is not None:
            pulumi.set(__self__, "uin", uin)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="abortReason")
    def abort_reason(self) -> Optional[pulumi.Input[int]]:
        """
        Reason for suspension.
        """
        return pulumi.get(self, "abort_reason")

    @abort_reason.setter
    def abort_reason(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "abort_reason", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[int]]:
        """
        App ID.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time; type: Timestamp ISO8601.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[pulumi.Input[str]]:
        """
        Cron expression, When setting cron_expression at that time, frequency_type must be greater than 1.
        """
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_expression", value)

    @property
    @pulumi.getter(name="cronJobId")
    def cron_job_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cron job ID.
        """
        return pulumi.get(self, "cron_job_id")

    @cron_job_id.setter
    def cron_job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_job_id", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        End Time; type: Timestamp ISO8601.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="frequencyType")
    def frequency_type(self) -> Optional[pulumi.Input[int]]:
        """
        Execution frequency type, `1`: execute only once; `2`: daily granularity; `3`: weekly granularity; `4`: advanced.
        """
        return pulumi.get(self, "frequency_type")

    @frequency_type.setter
    def frequency_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency_type", value)

    @property
    @pulumi.getter(name="jobOwner")
    def job_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Job Owner.
        """
        return pulumi.get(self, "job_owner")

    @job_owner.setter
    def job_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_owner", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Cron Job Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        Note.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="noticeId")
    def notice_id(self) -> Optional[pulumi.Input[str]]:
        """
        Notice ID.
        """
        return pulumi.get(self, "notice_id")

    @notice_id.setter
    def notice_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notice_id", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project Id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> Optional[pulumi.Input[str]]:
        """
        Scenario Id.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scenario_id", value)

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> Optional[pulumi.Input[str]]:
        """
        Scenario Name.
        """
        return pulumi.get(self, "scenario_name")

    @scenario_name.setter
    def scenario_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scenario_name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Scheduled task status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subAccountUin")
    def sub_account_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Sub-user ID.
        """
        return pulumi.get(self, "sub_account_uin")

    @sub_account_uin.setter
    def sub_account_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_account_uin", value)

    @property
    @pulumi.getter
    def uin(self) -> Optional[pulumi.Input[str]]:
        """
        User ID.
        """
        return pulumi.get(self, "uin")

    @uin.setter
    def uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uin", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Update time; type: Timestamp ISO8601.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class CronJob(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 frequency_type: Optional[pulumi.Input[int]] = None,
                 job_owner: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 notice_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 scenario_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a pts cron_job

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cron_job = tencentcloud.pts.CronJob("cronJob",
            cron_expression="* 1 * * *",
            frequency_type=2,
            job_owner="userName",
            note="desc",
            notice_id="notice-vp6i38jt",
            project_id="project-7qkzxhea",
            scenario_id="scenario-c22lqb1w",
            scenario_name="pts-js(2022-11-10 21:53:53)")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        pts cron_job can be imported using the projectId#cronJobId, e.g.

        ```sh
        $ pulumi import tencentcloud:Pts/cronJob:CronJob cron_job project-7qkzxhea#scenario-c22lqb1w
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cron_expression: Cron expression, When setting cron_expression at that time, frequency_type must be greater than 1.
        :param pulumi.Input[str] end_time: End Time; type: Timestamp ISO8601.
        :param pulumi.Input[int] frequency_type: Execution frequency type, `1`: execute only once; `2`: daily granularity; `3`: weekly granularity; `4`: advanced.
        :param pulumi.Input[str] job_owner: Job Owner.
        :param pulumi.Input[str] name: Cron Job Name.
        :param pulumi.Input[str] note: Note.
        :param pulumi.Input[str] notice_id: Notice ID.
        :param pulumi.Input[str] project_id: Project Id.
        :param pulumi.Input[str] scenario_id: Scenario Id.
        :param pulumi.Input[str] scenario_name: Scenario Name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CronJobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a pts cron_job

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cron_job = tencentcloud.pts.CronJob("cronJob",
            cron_expression="* 1 * * *",
            frequency_type=2,
            job_owner="userName",
            note="desc",
            notice_id="notice-vp6i38jt",
            project_id="project-7qkzxhea",
            scenario_id="scenario-c22lqb1w",
            scenario_name="pts-js(2022-11-10 21:53:53)")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        pts cron_job can be imported using the projectId#cronJobId, e.g.

        ```sh
        $ pulumi import tencentcloud:Pts/cronJob:CronJob cron_job project-7qkzxhea#scenario-c22lqb1w
        ```

        :param str resource_name: The name of the resource.
        :param CronJobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CronJobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 frequency_type: Optional[pulumi.Input[int]] = None,
                 job_owner: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 notice_id: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 scenario_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CronJobArgs.__new__(CronJobArgs)

            if cron_expression is None and not opts.urn:
                raise TypeError("Missing required property 'cron_expression'")
            __props__.__dict__["cron_expression"] = cron_expression
            __props__.__dict__["end_time"] = end_time
            if frequency_type is None and not opts.urn:
                raise TypeError("Missing required property 'frequency_type'")
            __props__.__dict__["frequency_type"] = frequency_type
            if job_owner is None and not opts.urn:
                raise TypeError("Missing required property 'job_owner'")
            __props__.__dict__["job_owner"] = job_owner
            __props__.__dict__["name"] = name
            __props__.__dict__["note"] = note
            __props__.__dict__["notice_id"] = notice_id
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if scenario_id is None and not opts.urn:
                raise TypeError("Missing required property 'scenario_id'")
            __props__.__dict__["scenario_id"] = scenario_id
            if scenario_name is None and not opts.urn:
                raise TypeError("Missing required property 'scenario_name'")
            __props__.__dict__["scenario_name"] = scenario_name
            __props__.__dict__["abort_reason"] = None
            __props__.__dict__["app_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["cron_job_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["sub_account_uin"] = None
            __props__.__dict__["uin"] = None
            __props__.__dict__["updated_at"] = None
        super(CronJob, __self__).__init__(
            'tencentcloud:Pts/cronJob:CronJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abort_reason: Optional[pulumi.Input[int]] = None,
            app_id: Optional[pulumi.Input[int]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            cron_expression: Optional[pulumi.Input[str]] = None,
            cron_job_id: Optional[pulumi.Input[str]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            frequency_type: Optional[pulumi.Input[int]] = None,
            job_owner: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            note: Optional[pulumi.Input[str]] = None,
            notice_id: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            scenario_id: Optional[pulumi.Input[str]] = None,
            scenario_name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            sub_account_uin: Optional[pulumi.Input[str]] = None,
            uin: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'CronJob':
        """
        Get an existing CronJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] abort_reason: Reason for suspension.
        :param pulumi.Input[int] app_id: App ID.
        :param pulumi.Input[str] created_at: Creation time; type: Timestamp ISO8601.
        :param pulumi.Input[str] cron_expression: Cron expression, When setting cron_expression at that time, frequency_type must be greater than 1.
        :param pulumi.Input[str] cron_job_id: Cron job ID.
        :param pulumi.Input[str] end_time: End Time; type: Timestamp ISO8601.
        :param pulumi.Input[int] frequency_type: Execution frequency type, `1`: execute only once; `2`: daily granularity; `3`: weekly granularity; `4`: advanced.
        :param pulumi.Input[str] job_owner: Job Owner.
        :param pulumi.Input[str] name: Cron Job Name.
        :param pulumi.Input[str] note: Note.
        :param pulumi.Input[str] notice_id: Notice ID.
        :param pulumi.Input[str] project_id: Project Id.
        :param pulumi.Input[str] scenario_id: Scenario Id.
        :param pulumi.Input[str] scenario_name: Scenario Name.
        :param pulumi.Input[int] status: Scheduled task status.
        :param pulumi.Input[str] sub_account_uin: Sub-user ID.
        :param pulumi.Input[str] uin: User ID.
        :param pulumi.Input[str] updated_at: Update time; type: Timestamp ISO8601.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CronJobState.__new__(_CronJobState)

        __props__.__dict__["abort_reason"] = abort_reason
        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cron_expression"] = cron_expression
        __props__.__dict__["cron_job_id"] = cron_job_id
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["frequency_type"] = frequency_type
        __props__.__dict__["job_owner"] = job_owner
        __props__.__dict__["name"] = name
        __props__.__dict__["note"] = note
        __props__.__dict__["notice_id"] = notice_id
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["scenario_id"] = scenario_id
        __props__.__dict__["scenario_name"] = scenario_name
        __props__.__dict__["status"] = status
        __props__.__dict__["sub_account_uin"] = sub_account_uin
        __props__.__dict__["uin"] = uin
        __props__.__dict__["updated_at"] = updated_at
        return CronJob(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abortReason")
    def abort_reason(self) -> pulumi.Output[int]:
        """
        Reason for suspension.
        """
        return pulumi.get(self, "abort_reason")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[int]:
        """
        App ID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Creation time; type: Timestamp ISO8601.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> pulumi.Output[str]:
        """
        Cron expression, When setting cron_expression at that time, frequency_type must be greater than 1.
        """
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter(name="cronJobId")
    def cron_job_id(self) -> pulumi.Output[str]:
        """
        Cron job ID.
        """
        return pulumi.get(self, "cron_job_id")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[Optional[str]]:
        """
        End Time; type: Timestamp ISO8601.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="frequencyType")
    def frequency_type(self) -> pulumi.Output[int]:
        """
        Execution frequency type, `1`: execute only once; `2`: daily granularity; `3`: weekly granularity; `4`: advanced.
        """
        return pulumi.get(self, "frequency_type")

    @property
    @pulumi.getter(name="jobOwner")
    def job_owner(self) -> pulumi.Output[str]:
        """
        Job Owner.
        """
        return pulumi.get(self, "job_owner")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Cron Job Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[str]]:
        """
        Note.
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="noticeId")
    def notice_id(self) -> pulumi.Output[Optional[str]]:
        """
        Notice ID.
        """
        return pulumi.get(self, "notice_id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project Id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> pulumi.Output[str]:
        """
        Scenario Id.
        """
        return pulumi.get(self, "scenario_id")

    @property
    @pulumi.getter(name="scenarioName")
    def scenario_name(self) -> pulumi.Output[str]:
        """
        Scenario Name.
        """
        return pulumi.get(self, "scenario_name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Scheduled task status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subAccountUin")
    def sub_account_uin(self) -> pulumi.Output[str]:
        """
        Sub-user ID.
        """
        return pulumi.get(self, "sub_account_uin")

    @property
    @pulumi.getter
    def uin(self) -> pulumi.Output[str]:
        """
        User ID.
        """
        return pulumi.get(self, "uin")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        Update time; type: Timestamp ISO8601.
        """
        return pulumi.get(self, "updated_at")

