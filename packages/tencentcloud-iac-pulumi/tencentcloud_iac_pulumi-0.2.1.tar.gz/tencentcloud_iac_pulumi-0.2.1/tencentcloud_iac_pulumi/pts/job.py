# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['JobArgs', 'Job']

@pulumi.input_type
class JobArgs:
    def __init__(__self__, *,
                 job_owner: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 scenario_id: pulumi.Input[str],
                 debug: Optional[pulumi.Input[bool]] = None,
                 note: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Job resource.
        :param pulumi.Input[str] job_owner: Job owner.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Pts scenario id.
        :param pulumi.Input[bool] debug: Whether to debug.
        :param pulumi.Input[str] note: Note.
        """
        pulumi.set(__self__, "job_owner", job_owner)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "scenario_id", scenario_id)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if note is not None:
            pulumi.set(__self__, "note", note)

    @property
    @pulumi.getter(name="jobOwner")
    def job_owner(self) -> pulumi.Input[str]:
        """
        Job owner.
        """
        return pulumi.get(self, "job_owner")

    @job_owner.setter
    def job_owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_owner", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> pulumi.Input[str]:
        """
        Pts scenario id.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scenario_id", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to debug.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        Note.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)


@pulumi.input_type
class _JobState:
    def __init__(__self__, *,
                 abort_reason: Optional[pulumi.Input[int]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 cron_id: Optional[pulumi.Input[str]] = None,
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input['JobDatasetArgs']]]] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 domain_name_configs: Optional[pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigArgs']]]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 error_rate: Optional[pulumi.Input[float]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_owner: Optional[pulumi.Input[str]] = None,
                 loads: Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadArgs']]]] = None,
                 max_requests_per_second: Optional[pulumi.Input[int]] = None,
                 max_virtual_user_count: Optional[pulumi.Input[int]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 plugins: Optional[pulumi.Input[Sequence[pulumi.Input['JobPluginArgs']]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input['JobProtocolArgs']]]] = None,
                 request_files: Optional[pulumi.Input[Sequence[pulumi.Input['JobRequestFileArgs']]]] = None,
                 request_total: Optional[pulumi.Input[float]] = None,
                 requests_per_second: Optional[pulumi.Input[float]] = None,
                 response_time_average: Optional[pulumi.Input[float]] = None,
                 response_time_max: Optional[pulumi.Input[float]] = None,
                 response_time_min: Optional[pulumi.Input[float]] = None,
                 response_time_p90: Optional[pulumi.Input[float]] = None,
                 response_time_p95: Optional[pulumi.Input[float]] = None,
                 response_time_p99: Optional[pulumi.Input[float]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 test_scripts: Optional[pulumi.Input[Sequence[pulumi.Input['JobTestScriptArgs']]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Job resources.
        :param pulumi.Input[int] abort_reason: Cause of interruption.
        :param pulumi.Input[str] created_at: Creation time of the job.
        :param pulumi.Input[str] cron_id: Scheduled job ID.
        :param pulumi.Input[Sequence[pulumi.Input['JobDatasetArgs']]] datasets: Dataset file for the job.
        :param pulumi.Input[bool] debug: Whether to debug.
        :param pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigArgs']]] domain_name_configs: Domain name binding configuration.
        :param pulumi.Input[int] duration: Job duration.
        :param pulumi.Input[str] end_time: End time of the job.
        :param pulumi.Input[float] error_rate: Percentage of error rate.
        :param pulumi.Input[str] job_id: Job Id.
        :param pulumi.Input[str] job_owner: Job owner.
        :param pulumi.Input[Sequence[pulumi.Input['JobLoadArgs']]] loads: Pressure configuration of job.
        :param pulumi.Input[int] max_requests_per_second: Maximum requests per second.
        :param pulumi.Input[int] max_virtual_user_count: Maximum number of VU for the job.
        :param pulumi.Input[str] note: Note.
        :param pulumi.Input[Sequence[pulumi.Input['JobPluginArgs']]] plugins: Expansion package file information.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input['JobProtocolArgs']]] protocols: Protocol script information.
        :param pulumi.Input[Sequence[pulumi.Input['JobRequestFileArgs']]] request_files: Request file information.
        :param pulumi.Input[float] request_total: Total number of requests.
        :param pulumi.Input[float] requests_per_second: Average number of requests per second.
        :param pulumi.Input[float] response_time_average: Average response time.
        :param pulumi.Input[float] response_time_max: Maximum response time.
        :param pulumi.Input[float] response_time_min: Minimum response time.
        :param pulumi.Input[float] response_time_p90: 90th percentile response time.
        :param pulumi.Input[float] response_time_p95: 95th percentile response time.
        :param pulumi.Input[float] response_time_p99: 99th percentile response time.
        :param pulumi.Input[str] scenario_id: Pts scenario id.
        :param pulumi.Input[str] start_time: Start time of the job.
        :param pulumi.Input[int] status: The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
        :param pulumi.Input[Sequence[pulumi.Input['JobTestScriptArgs']]] test_scripts: Test script information.
        :param pulumi.Input[str] type: Scene Type.
        """
        if abort_reason is not None:
            pulumi.set(__self__, "abort_reason", abort_reason)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if cron_id is not None:
            pulumi.set(__self__, "cron_id", cron_id)
        if datasets is not None:
            pulumi.set(__self__, "datasets", datasets)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if domain_name_configs is not None:
            pulumi.set(__self__, "domain_name_configs", domain_name_configs)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if error_rate is not None:
            pulumi.set(__self__, "error_rate", error_rate)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if job_owner is not None:
            pulumi.set(__self__, "job_owner", job_owner)
        if loads is not None:
            pulumi.set(__self__, "loads", loads)
        if max_requests_per_second is not None:
            pulumi.set(__self__, "max_requests_per_second", max_requests_per_second)
        if max_virtual_user_count is not None:
            pulumi.set(__self__, "max_virtual_user_count", max_virtual_user_count)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if request_files is not None:
            pulumi.set(__self__, "request_files", request_files)
        if request_total is not None:
            pulumi.set(__self__, "request_total", request_total)
        if requests_per_second is not None:
            pulumi.set(__self__, "requests_per_second", requests_per_second)
        if response_time_average is not None:
            pulumi.set(__self__, "response_time_average", response_time_average)
        if response_time_max is not None:
            pulumi.set(__self__, "response_time_max", response_time_max)
        if response_time_min is not None:
            pulumi.set(__self__, "response_time_min", response_time_min)
        if response_time_p90 is not None:
            pulumi.set(__self__, "response_time_p90", response_time_p90)
        if response_time_p95 is not None:
            pulumi.set(__self__, "response_time_p95", response_time_p95)
        if response_time_p99 is not None:
            pulumi.set(__self__, "response_time_p99", response_time_p99)
        if scenario_id is not None:
            pulumi.set(__self__, "scenario_id", scenario_id)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if test_scripts is not None:
            pulumi.set(__self__, "test_scripts", test_scripts)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="abortReason")
    def abort_reason(self) -> Optional[pulumi.Input[int]]:
        """
        Cause of interruption.
        """
        return pulumi.get(self, "abort_reason")

    @abort_reason.setter
    def abort_reason(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "abort_reason", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of the job.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="cronId")
    def cron_id(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled job ID.
        """
        return pulumi.get(self, "cron_id")

    @cron_id.setter
    def cron_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_id", value)

    @property
    @pulumi.getter
    def datasets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobDatasetArgs']]]]:
        """
        Dataset file for the job.
        """
        return pulumi.get(self, "datasets")

    @datasets.setter
    def datasets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobDatasetArgs']]]]):
        pulumi.set(self, "datasets", value)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to debug.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter(name="domainNameConfigs")
    def domain_name_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigArgs']]]]:
        """
        Domain name binding configuration.
        """
        return pulumi.get(self, "domain_name_configs")

    @domain_name_configs.setter
    def domain_name_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobDomainNameConfigArgs']]]]):
        pulumi.set(self, "domain_name_configs", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        Job duration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        End time of the job.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="errorRate")
    def error_rate(self) -> Optional[pulumi.Input[float]]:
        """
        Percentage of error rate.
        """
        return pulumi.get(self, "error_rate")

    @error_rate.setter
    def error_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "error_rate", value)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[str]]:
        """
        Job Id.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="jobOwner")
    def job_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Job owner.
        """
        return pulumi.get(self, "job_owner")

    @job_owner.setter
    def job_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_owner", value)

    @property
    @pulumi.getter
    def loads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadArgs']]]]:
        """
        Pressure configuration of job.
        """
        return pulumi.get(self, "loads")

    @loads.setter
    def loads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobLoadArgs']]]]):
        pulumi.set(self, "loads", value)

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum requests per second.
        """
        return pulumi.get(self, "max_requests_per_second")

    @max_requests_per_second.setter
    def max_requests_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_requests_per_second", value)

    @property
    @pulumi.getter(name="maxVirtualUserCount")
    def max_virtual_user_count(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of VU for the job.
        """
        return pulumi.get(self, "max_virtual_user_count")

    @max_virtual_user_count.setter
    def max_virtual_user_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_virtual_user_count", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        Note.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter
    def plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobPluginArgs']]]]:
        """
        Expansion package file information.
        """
        return pulumi.get(self, "plugins")

    @plugins.setter
    def plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobPluginArgs']]]]):
        pulumi.set(self, "plugins", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobProtocolArgs']]]]:
        """
        Protocol script information.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobProtocolArgs']]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="requestFiles")
    def request_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobRequestFileArgs']]]]:
        """
        Request file information.
        """
        return pulumi.get(self, "request_files")

    @request_files.setter
    def request_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobRequestFileArgs']]]]):
        pulumi.set(self, "request_files", value)

    @property
    @pulumi.getter(name="requestTotal")
    def request_total(self) -> Optional[pulumi.Input[float]]:
        """
        Total number of requests.
        """
        return pulumi.get(self, "request_total")

    @request_total.setter
    def request_total(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "request_total", value)

    @property
    @pulumi.getter(name="requestsPerSecond")
    def requests_per_second(self) -> Optional[pulumi.Input[float]]:
        """
        Average number of requests per second.
        """
        return pulumi.get(self, "requests_per_second")

    @requests_per_second.setter
    def requests_per_second(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "requests_per_second", value)

    @property
    @pulumi.getter(name="responseTimeAverage")
    def response_time_average(self) -> Optional[pulumi.Input[float]]:
        """
        Average response time.
        """
        return pulumi.get(self, "response_time_average")

    @response_time_average.setter
    def response_time_average(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "response_time_average", value)

    @property
    @pulumi.getter(name="responseTimeMax")
    def response_time_max(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum response time.
        """
        return pulumi.get(self, "response_time_max")

    @response_time_max.setter
    def response_time_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "response_time_max", value)

    @property
    @pulumi.getter(name="responseTimeMin")
    def response_time_min(self) -> Optional[pulumi.Input[float]]:
        """
        Minimum response time.
        """
        return pulumi.get(self, "response_time_min")

    @response_time_min.setter
    def response_time_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "response_time_min", value)

    @property
    @pulumi.getter(name="responseTimeP90")
    def response_time_p90(self) -> Optional[pulumi.Input[float]]:
        """
        90th percentile response time.
        """
        return pulumi.get(self, "response_time_p90")

    @response_time_p90.setter
    def response_time_p90(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "response_time_p90", value)

    @property
    @pulumi.getter(name="responseTimeP95")
    def response_time_p95(self) -> Optional[pulumi.Input[float]]:
        """
        95th percentile response time.
        """
        return pulumi.get(self, "response_time_p95")

    @response_time_p95.setter
    def response_time_p95(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "response_time_p95", value)

    @property
    @pulumi.getter(name="responseTimeP99")
    def response_time_p99(self) -> Optional[pulumi.Input[float]]:
        """
        99th percentile response time.
        """
        return pulumi.get(self, "response_time_p99")

    @response_time_p99.setter
    def response_time_p99(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "response_time_p99", value)

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> Optional[pulumi.Input[str]]:
        """
        Pts scenario id.
        """
        return pulumi.get(self, "scenario_id")

    @scenario_id.setter
    def scenario_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scenario_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Start time of the job.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="testScripts")
    def test_scripts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobTestScriptArgs']]]]:
        """
        Test script information.
        """
        return pulumi.get(self, "test_scripts")

    @test_scripts.setter
    def test_scripts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobTestScriptArgs']]]]):
        pulumi.set(self, "test_scripts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Job(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 job_owner: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a pts job

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        job = tencentcloud.pts.Job("job",
            job_owner="username",
            note="desc",
            project_id="project-45vw7v82",
            scenario_id="scenario-22q19f3k")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        pts job can be imported using the projectId#scenarioId#jobId, e.g.

        ```sh
        $ pulumi import tencentcloud:Pts/job:Job job project-45vw7v82#scenario-22q19f3k#job-dtm93vx0
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] debug: Whether to debug.
        :param pulumi.Input[str] job_owner: Job owner.
        :param pulumi.Input[str] note: Note.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[str] scenario_id: Pts scenario id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a pts job

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        job = tencentcloud.pts.Job("job",
            job_owner="username",
            note="desc",
            project_id="project-45vw7v82",
            scenario_id="scenario-22q19f3k")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        pts job can be imported using the projectId#scenarioId#jobId, e.g.

        ```sh
        $ pulumi import tencentcloud:Pts/job:Job job project-45vw7v82#scenario-22q19f3k#job-dtm93vx0
        ```

        :param str resource_name: The name of the resource.
        :param JobArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 debug: Optional[pulumi.Input[bool]] = None,
                 job_owner: Optional[pulumi.Input[str]] = None,
                 note: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 scenario_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobArgs.__new__(JobArgs)

            __props__.__dict__["debug"] = debug
            if job_owner is None and not opts.urn:
                raise TypeError("Missing required property 'job_owner'")
            __props__.__dict__["job_owner"] = job_owner
            __props__.__dict__["note"] = note
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if scenario_id is None and not opts.urn:
                raise TypeError("Missing required property 'scenario_id'")
            __props__.__dict__["scenario_id"] = scenario_id
            __props__.__dict__["abort_reason"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["cron_id"] = None
            __props__.__dict__["datasets"] = None
            __props__.__dict__["domain_name_configs"] = None
            __props__.__dict__["duration"] = None
            __props__.__dict__["end_time"] = None
            __props__.__dict__["error_rate"] = None
            __props__.__dict__["job_id"] = None
            __props__.__dict__["loads"] = None
            __props__.__dict__["max_requests_per_second"] = None
            __props__.__dict__["max_virtual_user_count"] = None
            __props__.__dict__["plugins"] = None
            __props__.__dict__["protocols"] = None
            __props__.__dict__["request_files"] = None
            __props__.__dict__["request_total"] = None
            __props__.__dict__["requests_per_second"] = None
            __props__.__dict__["response_time_average"] = None
            __props__.__dict__["response_time_max"] = None
            __props__.__dict__["response_time_min"] = None
            __props__.__dict__["response_time_p90"] = None
            __props__.__dict__["response_time_p95"] = None
            __props__.__dict__["response_time_p99"] = None
            __props__.__dict__["start_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["test_scripts"] = None
            __props__.__dict__["type"] = None
        super(Job, __self__).__init__(
            'tencentcloud:Pts/job:Job',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            abort_reason: Optional[pulumi.Input[int]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            cron_id: Optional[pulumi.Input[str]] = None,
            datasets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobDatasetArgs']]]]] = None,
            debug: Optional[pulumi.Input[bool]] = None,
            domain_name_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobDomainNameConfigArgs']]]]] = None,
            duration: Optional[pulumi.Input[int]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            error_rate: Optional[pulumi.Input[float]] = None,
            job_id: Optional[pulumi.Input[str]] = None,
            job_owner: Optional[pulumi.Input[str]] = None,
            loads: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobLoadArgs']]]]] = None,
            max_requests_per_second: Optional[pulumi.Input[int]] = None,
            max_virtual_user_count: Optional[pulumi.Input[int]] = None,
            note: Optional[pulumi.Input[str]] = None,
            plugins: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobPluginArgs']]]]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobProtocolArgs']]]]] = None,
            request_files: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobRequestFileArgs']]]]] = None,
            request_total: Optional[pulumi.Input[float]] = None,
            requests_per_second: Optional[pulumi.Input[float]] = None,
            response_time_average: Optional[pulumi.Input[float]] = None,
            response_time_max: Optional[pulumi.Input[float]] = None,
            response_time_min: Optional[pulumi.Input[float]] = None,
            response_time_p90: Optional[pulumi.Input[float]] = None,
            response_time_p95: Optional[pulumi.Input[float]] = None,
            response_time_p99: Optional[pulumi.Input[float]] = None,
            scenario_id: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            test_scripts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobTestScriptArgs']]]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Job':
        """
        Get an existing Job resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] abort_reason: Cause of interruption.
        :param pulumi.Input[str] created_at: Creation time of the job.
        :param pulumi.Input[str] cron_id: Scheduled job ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobDatasetArgs']]]] datasets: Dataset file for the job.
        :param pulumi.Input[bool] debug: Whether to debug.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobDomainNameConfigArgs']]]] domain_name_configs: Domain name binding configuration.
        :param pulumi.Input[int] duration: Job duration.
        :param pulumi.Input[str] end_time: End time of the job.
        :param pulumi.Input[float] error_rate: Percentage of error rate.
        :param pulumi.Input[str] job_id: Job Id.
        :param pulumi.Input[str] job_owner: Job owner.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobLoadArgs']]]] loads: Pressure configuration of job.
        :param pulumi.Input[int] max_requests_per_second: Maximum requests per second.
        :param pulumi.Input[int] max_virtual_user_count: Maximum number of VU for the job.
        :param pulumi.Input[str] note: Note.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobPluginArgs']]]] plugins: Expansion package file information.
        :param pulumi.Input[str] project_id: Project ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobProtocolArgs']]]] protocols: Protocol script information.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobRequestFileArgs']]]] request_files: Request file information.
        :param pulumi.Input[float] request_total: Total number of requests.
        :param pulumi.Input[float] requests_per_second: Average number of requests per second.
        :param pulumi.Input[float] response_time_average: Average response time.
        :param pulumi.Input[float] response_time_max: Maximum response time.
        :param pulumi.Input[float] response_time_min: Minimum response time.
        :param pulumi.Input[float] response_time_p90: 90th percentile response time.
        :param pulumi.Input[float] response_time_p95: 95th percentile response time.
        :param pulumi.Input[float] response_time_p99: 99th percentile response time.
        :param pulumi.Input[str] scenario_id: Pts scenario id.
        :param pulumi.Input[str] start_time: Start time of the job.
        :param pulumi.Input[int] status: The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobTestScriptArgs']]]] test_scripts: Test script information.
        :param pulumi.Input[str] type: Scene Type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JobState.__new__(_JobState)

        __props__.__dict__["abort_reason"] = abort_reason
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["cron_id"] = cron_id
        __props__.__dict__["datasets"] = datasets
        __props__.__dict__["debug"] = debug
        __props__.__dict__["domain_name_configs"] = domain_name_configs
        __props__.__dict__["duration"] = duration
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["error_rate"] = error_rate
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["job_owner"] = job_owner
        __props__.__dict__["loads"] = loads
        __props__.__dict__["max_requests_per_second"] = max_requests_per_second
        __props__.__dict__["max_virtual_user_count"] = max_virtual_user_count
        __props__.__dict__["note"] = note
        __props__.__dict__["plugins"] = plugins
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["request_files"] = request_files
        __props__.__dict__["request_total"] = request_total
        __props__.__dict__["requests_per_second"] = requests_per_second
        __props__.__dict__["response_time_average"] = response_time_average
        __props__.__dict__["response_time_max"] = response_time_max
        __props__.__dict__["response_time_min"] = response_time_min
        __props__.__dict__["response_time_p90"] = response_time_p90
        __props__.__dict__["response_time_p95"] = response_time_p95
        __props__.__dict__["response_time_p99"] = response_time_p99
        __props__.__dict__["scenario_id"] = scenario_id
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["test_scripts"] = test_scripts
        __props__.__dict__["type"] = type
        return Job(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="abortReason")
    def abort_reason(self) -> pulumi.Output[int]:
        """
        Cause of interruption.
        """
        return pulumi.get(self, "abort_reason")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Creation time of the job.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="cronId")
    def cron_id(self) -> pulumi.Output[str]:
        """
        Scheduled job ID.
        """
        return pulumi.get(self, "cron_id")

    @property
    @pulumi.getter
    def datasets(self) -> pulumi.Output[Sequence['outputs.JobDataset']]:
        """
        Dataset file for the job.
        """
        return pulumi.get(self, "datasets")

    @property
    @pulumi.getter
    def debug(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to debug.
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="domainNameConfigs")
    def domain_name_configs(self) -> pulumi.Output[Sequence['outputs.JobDomainNameConfig']]:
        """
        Domain name binding configuration.
        """
        return pulumi.get(self, "domain_name_configs")

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[int]:
        """
        Job duration.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        End time of the job.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="errorRate")
    def error_rate(self) -> pulumi.Output[float]:
        """
        Percentage of error rate.
        """
        return pulumi.get(self, "error_rate")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[str]:
        """
        Job Id.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobOwner")
    def job_owner(self) -> pulumi.Output[str]:
        """
        Job owner.
        """
        return pulumi.get(self, "job_owner")

    @property
    @pulumi.getter
    def loads(self) -> pulumi.Output[Sequence['outputs.JobLoad']]:
        """
        Pressure configuration of job.
        """
        return pulumi.get(self, "loads")

    @property
    @pulumi.getter(name="maxRequestsPerSecond")
    def max_requests_per_second(self) -> pulumi.Output[int]:
        """
        Maximum requests per second.
        """
        return pulumi.get(self, "max_requests_per_second")

    @property
    @pulumi.getter(name="maxVirtualUserCount")
    def max_virtual_user_count(self) -> pulumi.Output[int]:
        """
        Maximum number of VU for the job.
        """
        return pulumi.get(self, "max_virtual_user_count")

    @property
    @pulumi.getter
    def note(self) -> pulumi.Output[Optional[str]]:
        """
        Note.
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter
    def plugins(self) -> pulumi.Output[Sequence['outputs.JobPlugin']]:
        """
        Expansion package file information.
        """
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Sequence['outputs.JobProtocol']]:
        """
        Protocol script information.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="requestFiles")
    def request_files(self) -> pulumi.Output[Sequence['outputs.JobRequestFile']]:
        """
        Request file information.
        """
        return pulumi.get(self, "request_files")

    @property
    @pulumi.getter(name="requestTotal")
    def request_total(self) -> pulumi.Output[float]:
        """
        Total number of requests.
        """
        return pulumi.get(self, "request_total")

    @property
    @pulumi.getter(name="requestsPerSecond")
    def requests_per_second(self) -> pulumi.Output[float]:
        """
        Average number of requests per second.
        """
        return pulumi.get(self, "requests_per_second")

    @property
    @pulumi.getter(name="responseTimeAverage")
    def response_time_average(self) -> pulumi.Output[float]:
        """
        Average response time.
        """
        return pulumi.get(self, "response_time_average")

    @property
    @pulumi.getter(name="responseTimeMax")
    def response_time_max(self) -> pulumi.Output[float]:
        """
        Maximum response time.
        """
        return pulumi.get(self, "response_time_max")

    @property
    @pulumi.getter(name="responseTimeMin")
    def response_time_min(self) -> pulumi.Output[float]:
        """
        Minimum response time.
        """
        return pulumi.get(self, "response_time_min")

    @property
    @pulumi.getter(name="responseTimeP90")
    def response_time_p90(self) -> pulumi.Output[float]:
        """
        90th percentile response time.
        """
        return pulumi.get(self, "response_time_p90")

    @property
    @pulumi.getter(name="responseTimeP95")
    def response_time_p95(self) -> pulumi.Output[float]:
        """
        95th percentile response time.
        """
        return pulumi.get(self, "response_time_p95")

    @property
    @pulumi.getter(name="responseTimeP99")
    def response_time_p99(self) -> pulumi.Output[float]:
        """
        99th percentile response time.
        """
        return pulumi.get(self, "response_time_p99")

    @property
    @pulumi.getter(name="scenarioId")
    def scenario_id(self) -> pulumi.Output[str]:
        """
        Pts scenario id.
        """
        return pulumi.get(self, "scenario_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Start time of the job.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="testScripts")
    def test_scripts(self) -> pulumi.Output[Sequence['outputs.JobTestScript']]:
        """
        Test script information.
        """
        return pulumi.get(self, "test_scripts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Scene Type.
        """
        return pulumi.get(self, "type")

