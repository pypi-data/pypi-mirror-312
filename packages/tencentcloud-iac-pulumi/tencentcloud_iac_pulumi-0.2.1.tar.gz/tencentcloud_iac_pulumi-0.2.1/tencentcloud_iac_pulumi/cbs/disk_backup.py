# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DiskBackupArgs', 'DiskBackup']

@pulumi.input_type
class DiskBackupArgs:
    def __init__(__self__, *,
                 disk_id: pulumi.Input[str],
                 disk_backup_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DiskBackup resource.
        :param pulumi.Input[str] disk_id: ID of the original cloud disk of the backup point, which can be queried through the DescribeDisks API.
        :param pulumi.Input[str] disk_backup_name: Backup point name.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if disk_backup_name is not None:
            pulumi.set(__self__, "disk_backup_name", disk_backup_name)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Input[str]:
        """
        ID of the original cloud disk of the backup point, which can be queried through the DescribeDisks API.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_id", value)

    @property
    @pulumi.getter(name="diskBackupName")
    def disk_backup_name(self) -> Optional[pulumi.Input[str]]:
        """
        Backup point name.
        """
        return pulumi.get(self, "disk_backup_name")

    @disk_backup_name.setter
    def disk_backup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_backup_name", value)


@pulumi.input_type
class _DiskBackupState:
    def __init__(__self__, *,
                 disk_backup_name: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DiskBackup resources.
        :param pulumi.Input[str] disk_backup_name: Backup point name.
        :param pulumi.Input[str] disk_id: ID of the original cloud disk of the backup point, which can be queried through the DescribeDisks API.
        """
        if disk_backup_name is not None:
            pulumi.set(__self__, "disk_backup_name", disk_backup_name)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)

    @property
    @pulumi.getter(name="diskBackupName")
    def disk_backup_name(self) -> Optional[pulumi.Input[str]]:
        """
        Backup point name.
        """
        return pulumi.get(self, "disk_backup_name")

    @disk_backup_name.setter
    def disk_backup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_backup_name", value)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the original cloud disk of the backup point, which can be queried through the DescribeDisks API.
        """
        return pulumi.get(self, "disk_id")

    @disk_id.setter
    def disk_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_id", value)


class DiskBackup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disk_backup_name: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cbs disk_backup.

        > **NOTE:** Backup quota must greater than 1.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        disk_backup = tencentcloud.cbs.DiskBackup("diskBackup",
            disk_backup_name="xxx",
            disk_id="disk-xxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cbs disk_backup can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cbs/diskBackup:DiskBackup disk_backup disk_backup_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] disk_backup_name: Backup point name.
        :param pulumi.Input[str] disk_id: ID of the original cloud disk of the backup point, which can be queried through the DescribeDisks API.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiskBackupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cbs disk_backup.

        > **NOTE:** Backup quota must greater than 1.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        disk_backup = tencentcloud.cbs.DiskBackup("diskBackup",
            disk_backup_name="xxx",
            disk_id="disk-xxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cbs disk_backup can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cbs/diskBackup:DiskBackup disk_backup disk_backup_id
        ```

        :param str resource_name: The name of the resource.
        :param DiskBackupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiskBackupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disk_backup_name: Optional[pulumi.Input[str]] = None,
                 disk_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiskBackupArgs.__new__(DiskBackupArgs)

            __props__.__dict__["disk_backup_name"] = disk_backup_name
            if disk_id is None and not opts.urn:
                raise TypeError("Missing required property 'disk_id'")
            __props__.__dict__["disk_id"] = disk_id
        super(DiskBackup, __self__).__init__(
            'tencentcloud:Cbs/diskBackup:DiskBackup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            disk_backup_name: Optional[pulumi.Input[str]] = None,
            disk_id: Optional[pulumi.Input[str]] = None) -> 'DiskBackup':
        """
        Get an existing DiskBackup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] disk_backup_name: Backup point name.
        :param pulumi.Input[str] disk_id: ID of the original cloud disk of the backup point, which can be queried through the DescribeDisks API.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DiskBackupState.__new__(_DiskBackupState)

        __props__.__dict__["disk_backup_name"] = disk_backup_name
        __props__.__dict__["disk_id"] = disk_id
        return DiskBackup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="diskBackupName")
    def disk_backup_name(self) -> pulumi.Output[Optional[str]]:
        """
        Backup point name.
        """
        return pulumi.get(self, "disk_backup_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> pulumi.Output[str]:
        """
        ID of the original cloud disk of the backup point, which can be queried through the DescribeDisks API.
        """
        return pulumi.get(self, "disk_id")

