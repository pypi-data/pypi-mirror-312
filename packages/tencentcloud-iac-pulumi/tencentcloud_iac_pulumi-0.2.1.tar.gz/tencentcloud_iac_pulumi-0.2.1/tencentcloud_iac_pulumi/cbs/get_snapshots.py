# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSnapshotsResult',
    'AwaitableGetSnapshotsResult',
    'get_snapshots',
    'get_snapshots_output',
]

@pulumi.output_type
class GetSnapshotsResult:
    """
    A collection of values returned by getSnapshots.
    """
    def __init__(__self__, availability_zone=None, id=None, project_id=None, result_output_file=None, snapshot_id=None, snapshot_lists=None, snapshot_name=None, storage_id=None, storage_usage=None):
        if availability_zone and not isinstance(availability_zone, str):
            raise TypeError("Expected argument 'availability_zone' to be a str")
        pulumi.set(__self__, "availability_zone", availability_zone)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        if snapshot_lists and not isinstance(snapshot_lists, list):
            raise TypeError("Expected argument 'snapshot_lists' to be a list")
        pulumi.set(__self__, "snapshot_lists", snapshot_lists)
        if snapshot_name and not isinstance(snapshot_name, str):
            raise TypeError("Expected argument 'snapshot_name' to be a str")
        pulumi.set(__self__, "snapshot_name", snapshot_name)
        if storage_id and not isinstance(storage_id, str):
            raise TypeError("Expected argument 'storage_id' to be a str")
        pulumi.set(__self__, "storage_id", storage_id)
        if storage_usage and not isinstance(storage_usage, str):
            raise TypeError("Expected argument 'storage_usage' to be a str")
        pulumi.set(__self__, "storage_usage", storage_usage)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The available zone that the CBS instance locates at.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        ID of the project within the snapshot.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        ID of the snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="snapshotLists")
    def snapshot_lists(self) -> Sequence['outputs.GetSnapshotsSnapshotListResult']:
        """
        A list of snapshot. Each element contains the following attributes:
        """
        return pulumi.get(self, "snapshot_lists")

    @property
    @pulumi.getter(name="snapshotName")
    def snapshot_name(self) -> Optional[str]:
        """
        Name of the snapshot.
        """
        return pulumi.get(self, "snapshot_name")

    @property
    @pulumi.getter(name="storageId")
    def storage_id(self) -> Optional[str]:
        """
        ID of the the CBS which this snapshot created from.
        """
        return pulumi.get(self, "storage_id")

    @property
    @pulumi.getter(name="storageUsage")
    def storage_usage(self) -> Optional[str]:
        """
        Types of CBS which this snapshot created from.
        """
        return pulumi.get(self, "storage_usage")


class AwaitableGetSnapshotsResult(GetSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotsResult(
            availability_zone=self.availability_zone,
            id=self.id,
            project_id=self.project_id,
            result_output_file=self.result_output_file,
            snapshot_id=self.snapshot_id,
            snapshot_lists=self.snapshot_lists,
            snapshot_name=self.snapshot_name,
            storage_id=self.storage_id,
            storage_usage=self.storage_usage)


def get_snapshots(availability_zone: Optional[str] = None,
                  project_id: Optional[int] = None,
                  result_output_file: Optional[str] = None,
                  snapshot_id: Optional[str] = None,
                  snapshot_name: Optional[str] = None,
                  storage_id: Optional[str] = None,
                  storage_usage: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotsResult:
    """
    Use this data source to query detailed information of CBS snapshots.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    snapshots = tencentcloud.Cbs.get_snapshots(result_output_file="mytestpath",
        snapshot_id="snap-f3io7adt")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the CBS instance locates at.
    :param int project_id: ID of the project within the snapshot.
    :param str result_output_file: Used to save results.
    :param str snapshot_id: ID of the snapshot to be queried.
    :param str snapshot_name: Name of the snapshot to be queried.
    :param str storage_id: ID of the the CBS which this snapshot created from.
    :param str storage_usage: Types of CBS which this snapshot created from, and available values include SYSTEM_DISK and DATA_DISK.
    """
    __args__ = dict()
    __args__['availabilityZone'] = availability_zone
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['snapshotId'] = snapshot_id
    __args__['snapshotName'] = snapshot_name
    __args__['storageId'] = storage_id
    __args__['storageUsage'] = storage_usage
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cbs/getSnapshots:getSnapshots', __args__, opts=opts, typ=GetSnapshotsResult).value

    return AwaitableGetSnapshotsResult(
        availability_zone=pulumi.get(__ret__, 'availability_zone'),
        id=pulumi.get(__ret__, 'id'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        snapshot_id=pulumi.get(__ret__, 'snapshot_id'),
        snapshot_lists=pulumi.get(__ret__, 'snapshot_lists'),
        snapshot_name=pulumi.get(__ret__, 'snapshot_name'),
        storage_id=pulumi.get(__ret__, 'storage_id'),
        storage_usage=pulumi.get(__ret__, 'storage_usage'))


@_utilities.lift_output_func(get_snapshots)
def get_snapshots_output(availability_zone: Optional[pulumi.Input[Optional[str]]] = None,
                         project_id: Optional[pulumi.Input[Optional[int]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         snapshot_id: Optional[pulumi.Input[Optional[str]]] = None,
                         snapshot_name: Optional[pulumi.Input[Optional[str]]] = None,
                         storage_id: Optional[pulumi.Input[Optional[str]]] = None,
                         storage_usage: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSnapshotsResult]:
    """
    Use this data source to query detailed information of CBS snapshots.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    snapshots = tencentcloud.Cbs.get_snapshots(result_output_file="mytestpath",
        snapshot_id="snap-f3io7adt")
    ```
    <!--End PulumiCodeChooser -->


    :param str availability_zone: The available zone that the CBS instance locates at.
    :param int project_id: ID of the project within the snapshot.
    :param str result_output_file: Used to save results.
    :param str snapshot_id: ID of the snapshot to be queried.
    :param str snapshot_name: Name of the snapshot to be queried.
    :param str storage_id: ID of the the CBS which this snapshot created from.
    :param str storage_usage: Types of CBS which this snapshot created from, and available values include SYSTEM_DISK and DATA_DISK.
    """
    ...
