# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InvocationCommandAttachmentArgs', 'InvocationCommandAttachment']

@pulumi.input_type
class InvocationCommandAttachmentArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 command_name: Optional[pulumi.Input[str]] = None,
                 command_type: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 save_command: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InvocationCommandAttachment resource.
        :param pulumi.Input[str] content: Base64-encoded command. The maximum length is 64 KB.
        :param pulumi.Input[str] instance_id: ID of instances about to execute commands. Supported instance types:  CVM  LIGHTHOUSE.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] command_type: Command type. SHELL and POWERSHELL are supported. The default value is SHELL.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If Parameters is not provided, the default values specified here are used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: false.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs; The URL must start with https, such as https://BucketName-123454321.cos.ap-beijing.myqcloud.com.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved; Check below for the rules of the directory name: 1 It must be a combination of number, letters, and visible characters, Up to 60 characters are allowed; 2 Use a slash (/) to create a subdirectory; 3 can not be used as the folder name; It cannot start with a slash (/), and cannot contain consecutive slashes.
        :param pulumi.Input[str] parameters: Custom parameters of Command. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If no parameter value is provided, the DefaultParameters is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[bool] save_command: Whether to save the command. Valid values:rue: SaveFalse:Do not saveThe default value is False.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the user root is used to execute commands on Linux and the user System is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for SHELL commands and C:Program Filesqcloudtat_agentworkdir for POWERSHELL commands.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "instance_id", instance_id)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)
        if command_type is not None:
            pulumi.set(__self__, "command_type", command_type)
        if default_parameters is not None:
            pulumi.set(__self__, "default_parameters", default_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_parameter is not None:
            pulumi.set(__self__, "enable_parameter", enable_parameter)
        if output_cos_bucket_url is not None:
            pulumi.set(__self__, "output_cos_bucket_url", output_cos_bucket_url)
        if output_cos_key_prefix is not None:
            pulumi.set(__self__, "output_cos_key_prefix", output_cos_key_prefix)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if save_command is not None:
            pulumi.set(__self__, "save_command", save_command)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Base64-encoded command. The maximum length is 64 KB.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        ID of instances about to execute commands. Supported instance types:  CVM  LIGHTHOUSE.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[str]]:
        """
        Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_name", value)

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> Optional[pulumi.Input[str]]:
        """
        Command type. SHELL and POWERSHELL are supported. The default value is SHELL.
        """
        return pulumi.get(self, "command_type")

    @command_type.setter
    def command_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_type", value)

    @property
    @pulumi.getter(name="defaultParameters")
    def default_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If Parameters is not provided, the default values specified here are used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "default_parameters")

    @default_parameters.setter
    def default_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Command description. The maximum length is 120 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the custom parameter feature.This cannot be modified once created.Default value: false.
        """
        return pulumi.get(self, "enable_parameter")

    @enable_parameter.setter
    def enable_parameter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_parameter", value)

    @property
    @pulumi.getter(name="outputCosBucketUrl")
    def output_cos_bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket URL for uploading logs; The URL must start with https, such as https://BucketName-123454321.cos.ap-beijing.myqcloud.com.
        """
        return pulumi.get(self, "output_cos_bucket_url")

    @output_cos_bucket_url.setter
    def output_cos_bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_bucket_url", value)

    @property
    @pulumi.getter(name="outputCosKeyPrefix")
    def output_cos_key_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket directory where the logs are saved; Check below for the rules of the directory name: 1 It must be a combination of number, letters, and visible characters, Up to 60 characters are allowed; 2 Use a slash (/) to create a subdirectory; 3 can not be used as the folder name; It cannot start with a slash (/), and cannot contain consecutive slashes.
        """
        return pulumi.get(self, "output_cos_key_prefix")

    @output_cos_key_prefix.setter
    def output_cos_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_key_prefix", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Custom parameters of Command. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If no parameter value is provided, the DefaultParameters is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="saveCommand")
    def save_command(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to save the command. Valid values:rue: SaveFalse:Do not saveThe default value is False.
        """
        return pulumi.get(self, "save_command")

    @save_command.setter
    def save_command(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "save_command", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the user root is used to execute commands on Linux and the user System is used on Windows.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        """
        Command execution path. The default value is /root for SHELL commands and C:Program Filesqcloudtat_agentworkdir for POWERSHELL commands.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class _InvocationCommandAttachmentState:
    def __init__(__self__, *,
                 command_id: Optional[pulumi.Input[str]] = None,
                 command_name: Optional[pulumi.Input[str]] = None,
                 command_type: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 save_command: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InvocationCommandAttachment resources.
        :param pulumi.Input[str] command_id: Command ID.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] command_type: Command type. SHELL and POWERSHELL are supported. The default value is SHELL.
        :param pulumi.Input[str] content: Base64-encoded command. The maximum length is 64 KB.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If Parameters is not provided, the default values specified here are used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: false.
        :param pulumi.Input[str] instance_id: ID of instances about to execute commands. Supported instance types:  CVM  LIGHTHOUSE.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs; The URL must start with https, such as https://BucketName-123454321.cos.ap-beijing.myqcloud.com.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved; Check below for the rules of the directory name: 1 It must be a combination of number, letters, and visible characters, Up to 60 characters are allowed; 2 Use a slash (/) to create a subdirectory; 3 can not be used as the folder name; It cannot start with a slash (/), and cannot contain consecutive slashes.
        :param pulumi.Input[str] parameters: Custom parameters of Command. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If no parameter value is provided, the DefaultParameters is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[bool] save_command: Whether to save the command. Valid values:rue: SaveFalse:Do not saveThe default value is False.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the user root is used to execute commands on Linux and the user System is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for SHELL commands and C:Program Filesqcloudtat_agentworkdir for POWERSHELL commands.
        """
        if command_id is not None:
            pulumi.set(__self__, "command_id", command_id)
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)
        if command_type is not None:
            pulumi.set(__self__, "command_type", command_type)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if default_parameters is not None:
            pulumi.set(__self__, "default_parameters", default_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_parameter is not None:
            pulumi.set(__self__, "enable_parameter", enable_parameter)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if output_cos_bucket_url is not None:
            pulumi.set(__self__, "output_cos_bucket_url", output_cos_bucket_url)
        if output_cos_key_prefix is not None:
            pulumi.set(__self__, "output_cos_key_prefix", output_cos_key_prefix)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if save_command is not None:
            pulumi.set(__self__, "save_command", save_command)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> Optional[pulumi.Input[str]]:
        """
        Command ID.
        """
        return pulumi.get(self, "command_id")

    @command_id.setter
    def command_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_id", value)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[str]]:
        """
        Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_name", value)

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> Optional[pulumi.Input[str]]:
        """
        Command type. SHELL and POWERSHELL are supported. The default value is SHELL.
        """
        return pulumi.get(self, "command_type")

    @command_type.setter
    def command_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_type", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Base64-encoded command. The maximum length is 64 KB.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="defaultParameters")
    def default_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If Parameters is not provided, the default values specified here are used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "default_parameters")

    @default_parameters.setter
    def default_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Command description. The maximum length is 120 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the custom parameter feature.This cannot be modified once created.Default value: false.
        """
        return pulumi.get(self, "enable_parameter")

    @enable_parameter.setter
    def enable_parameter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_parameter", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of instances about to execute commands. Supported instance types:  CVM  LIGHTHOUSE.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="outputCosBucketUrl")
    def output_cos_bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket URL for uploading logs; The URL must start with https, such as https://BucketName-123454321.cos.ap-beijing.myqcloud.com.
        """
        return pulumi.get(self, "output_cos_bucket_url")

    @output_cos_bucket_url.setter
    def output_cos_bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_bucket_url", value)

    @property
    @pulumi.getter(name="outputCosKeyPrefix")
    def output_cos_key_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket directory where the logs are saved; Check below for the rules of the directory name: 1 It must be a combination of number, letters, and visible characters, Up to 60 characters are allowed; 2 Use a slash (/) to create a subdirectory; 3 can not be used as the folder name; It cannot start with a slash (/), and cannot contain consecutive slashes.
        """
        return pulumi.get(self, "output_cos_key_prefix")

    @output_cos_key_prefix.setter
    def output_cos_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_key_prefix", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Custom parameters of Command. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If no parameter value is provided, the DefaultParameters is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="saveCommand")
    def save_command(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to save the command. Valid values:rue: SaveFalse:Do not saveThe default value is False.
        """
        return pulumi.get(self, "save_command")

    @save_command.setter
    def save_command(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "save_command", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the user root is used to execute commands on Linux and the user System is used on Windows.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        """
        Command execution path. The default value is /root for SHELL commands and C:Program Filesqcloudtat_agentworkdir for POWERSHELL commands.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


class InvocationCommandAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_name: Optional[pulumi.Input[str]] = None,
                 command_type: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 save_command: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tat invocation_command_attachment

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] command_type: Command type. SHELL and POWERSHELL are supported. The default value is SHELL.
        :param pulumi.Input[str] content: Base64-encoded command. The maximum length is 64 KB.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If Parameters is not provided, the default values specified here are used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: false.
        :param pulumi.Input[str] instance_id: ID of instances about to execute commands. Supported instance types:  CVM  LIGHTHOUSE.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs; The URL must start with https, such as https://BucketName-123454321.cos.ap-beijing.myqcloud.com.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved; Check below for the rules of the directory name: 1 It must be a combination of number, letters, and visible characters, Up to 60 characters are allowed; 2 Use a slash (/) to create a subdirectory; 3 can not be used as the folder name; It cannot start with a slash (/), and cannot contain consecutive slashes.
        :param pulumi.Input[str] parameters: Custom parameters of Command. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If no parameter value is provided, the DefaultParameters is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[bool] save_command: Whether to save the command. Valid values:rue: SaveFalse:Do not saveThe default value is False.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the user root is used to execute commands on Linux and the user System is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for SHELL commands and C:Program Filesqcloudtat_agentworkdir for POWERSHELL commands.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InvocationCommandAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tat invocation_command_attachment

        :param str resource_name: The name of the resource.
        :param InvocationCommandAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InvocationCommandAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_name: Optional[pulumi.Input[str]] = None,
                 command_type: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 save_command: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InvocationCommandAttachmentArgs.__new__(InvocationCommandAttachmentArgs)

            __props__.__dict__["command_name"] = command_name
            __props__.__dict__["command_type"] = command_type
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["default_parameters"] = default_parameters
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_parameter"] = enable_parameter
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["output_cos_bucket_url"] = output_cos_bucket_url
            __props__.__dict__["output_cos_key_prefix"] = output_cos_key_prefix
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["save_command"] = save_command
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["username"] = username
            __props__.__dict__["working_directory"] = working_directory
            __props__.__dict__["command_id"] = None
        super(InvocationCommandAttachment, __self__).__init__(
            'tencentcloud:Tat/invocationCommandAttachment:InvocationCommandAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            command_id: Optional[pulumi.Input[str]] = None,
            command_name: Optional[pulumi.Input[str]] = None,
            command_type: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            default_parameters: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable_parameter: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
            output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[str]] = None,
            save_command: Optional[pulumi.Input[bool]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            username: Optional[pulumi.Input[str]] = None,
            working_directory: Optional[pulumi.Input[str]] = None) -> 'InvocationCommandAttachment':
        """
        Get an existing InvocationCommandAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command_id: Command ID.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] command_type: Command type. SHELL and POWERSHELL are supported. The default value is SHELL.
        :param pulumi.Input[str] content: Base64-encoded command. The maximum length is 64 KB.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If Parameters is not provided, the default values specified here are used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: false.
        :param pulumi.Input[str] instance_id: ID of instances about to execute commands. Supported instance types:  CVM  LIGHTHOUSE.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs; The URL must start with https, such as https://BucketName-123454321.cos.ap-beijing.myqcloud.com.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved; Check below for the rules of the directory name: 1 It must be a combination of number, letters, and visible characters, Up to 60 characters are allowed; 2 Use a slash (/) to create a subdirectory; 3 can not be used as the folder name; It cannot start with a slash (/), and cannot contain consecutive slashes.
        :param pulumi.Input[str] parameters: Custom parameters of Command. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If no parameter value is provided, the DefaultParameters is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[bool] save_command: Whether to save the command. Valid values:rue: SaveFalse:Do not saveThe default value is False.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the user root is used to execute commands on Linux and the user System is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for SHELL commands and C:Program Filesqcloudtat_agentworkdir for POWERSHELL commands.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InvocationCommandAttachmentState.__new__(_InvocationCommandAttachmentState)

        __props__.__dict__["command_id"] = command_id
        __props__.__dict__["command_name"] = command_name
        __props__.__dict__["command_type"] = command_type
        __props__.__dict__["content"] = content
        __props__.__dict__["default_parameters"] = default_parameters
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_parameter"] = enable_parameter
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["output_cos_bucket_url"] = output_cos_bucket_url
        __props__.__dict__["output_cos_key_prefix"] = output_cos_key_prefix
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["save_command"] = save_command
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["username"] = username
        __props__.__dict__["working_directory"] = working_directory
        return InvocationCommandAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> pulumi.Output[str]:
        """
        Command ID.
        """
        return pulumi.get(self, "command_id")

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> pulumi.Output[Optional[str]]:
        """
        Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        """
        return pulumi.get(self, "command_name")

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> pulumi.Output[Optional[str]]:
        """
        Command type. SHELL and POWERSHELL are supported. The default value is SHELL.
        """
        return pulumi.get(self, "command_type")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Base64-encoded command. The maximum length is 64 KB.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="defaultParameters")
    def default_parameters(self) -> pulumi.Output[Optional[str]]:
        """
        The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If Parameters is not provided, the default values specified here are used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "default_parameters")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Command description. The maximum length is 120 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable the custom parameter feature.This cannot be modified once created.Default value: false.
        """
        return pulumi.get(self, "enable_parameter")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        ID of instances about to execute commands. Supported instance types:  CVM  LIGHTHOUSE.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="outputCosBucketUrl")
    def output_cos_bucket_url(self) -> pulumi.Output[Optional[str]]:
        """
        The COS bucket URL for uploading logs; The URL must start with https, such as https://BucketName-123454321.cos.ap-beijing.myqcloud.com.
        """
        return pulumi.get(self, "output_cos_bucket_url")

    @property
    @pulumi.getter(name="outputCosKeyPrefix")
    def output_cos_key_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The COS bucket directory where the logs are saved; Check below for the rules of the directory name: 1 It must be a combination of number, letters, and visible characters, Up to 60 characters are allowed; 2 Use a slash (/) to create a subdirectory; 3 can not be used as the folder name; It cannot start with a slash (/), and cannot contain consecutive slashes.
        """
        return pulumi.get(self, "output_cos_key_prefix")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[str]]:
        """
        Custom parameters of Command. The field type is JSON encoded string. For example, {varA: 222}.key is the name of the custom parameter and value is the default value. Both key and value are strings.If no parameter value is provided, the DefaultParameters is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="saveCommand")
    def save_command(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to save the command. Valid values:rue: SaveFalse:Do not saveThe default value is False.
        """
        return pulumi.get(self, "save_command")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the user root is used to execute commands on Linux and the user System is used on Windows.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> pulumi.Output[Optional[str]]:
        """
        Command execution path. The default value is /root for SHELL commands and C:Program Filesqcloudtat_agentworkdir for POWERSHELL commands.
        """
        return pulumi.get(self, "working_directory")

