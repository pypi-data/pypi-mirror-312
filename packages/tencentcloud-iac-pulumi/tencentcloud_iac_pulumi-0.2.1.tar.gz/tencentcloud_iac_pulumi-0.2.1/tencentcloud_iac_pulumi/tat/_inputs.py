# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CommandTagArgs',
    'InvokerScheduleSettingsArgs',
    'GetAgentFilterArgs',
    'GetInvocationTaskFilterArgs',
]

@pulumi.input_type
class CommandTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag key.
        :param pulumi.Input[str] value: Tag value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InvokerScheduleSettingsArgs:
    def __init__(__self__, *,
                 policy: pulumi.Input[str],
                 invoke_time: Optional[pulumi.Input[str]] = None,
                 recurrence: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] policy: Execution policy: `ONCE`: Execute once; `RECURRENCE`: Execute repeatedly.
        :param pulumi.Input[str] invoke_time: The next execution time of the invoker. This field is required if Policy is ONCE.
        :param pulumi.Input[str] recurrence: Trigger the crontab expression. This field is required if `Policy` is `RECURRENCE`. The crontab expression is parsed in UTC+8.
        """
        pulumi.set(__self__, "policy", policy)
        if invoke_time is not None:
            pulumi.set(__self__, "invoke_time", invoke_time)
        if recurrence is not None:
            pulumi.set(__self__, "recurrence", recurrence)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input[str]:
        """
        Execution policy: `ONCE`: Execute once; `RECURRENCE`: Execute repeatedly.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="invokeTime")
    def invoke_time(self) -> Optional[pulumi.Input[str]]:
        """
        The next execution time of the invoker. This field is required if Policy is ONCE.
        """
        return pulumi.get(self, "invoke_time")

    @invoke_time.setter
    def invoke_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invoke_time", value)

    @property
    @pulumi.getter
    def recurrence(self) -> Optional[pulumi.Input[str]]:
        """
        Trigger the crontab expression. This field is required if `Policy` is `RECURRENCE`. The crontab expression is parsed in UTC+8.
        """
        return pulumi.get(self, "recurrence")

    @recurrence.setter
    def recurrence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recurrence", value)


@pulumi.input_type
class GetAgentFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field to be filtered.
        :param Sequence[str] values: Filter values of the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field to be filtered.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values of the field.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetInvocationTaskFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field to be filtered.
        :param Sequence[str] values: Filter values of the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field to be filtered.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values of the field.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


