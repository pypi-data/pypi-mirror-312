# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInvokerResult',
    'AwaitableGetInvokerResult',
    'get_invoker',
    'get_invoker_output',
]

@pulumi.output_type
class GetInvokerResult:
    """
    A collection of values returned by getInvoker.
    """
    def __init__(__self__, command_id=None, id=None, invoker_id=None, invoker_sets=None, result_output_file=None, type=None):
        if command_id and not isinstance(command_id, str):
            raise TypeError("Expected argument 'command_id' to be a str")
        pulumi.set(__self__, "command_id", command_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if invoker_id and not isinstance(invoker_id, str):
            raise TypeError("Expected argument 'invoker_id' to be a str")
        pulumi.set(__self__, "invoker_id", invoker_id)
        if invoker_sets and not isinstance(invoker_sets, list):
            raise TypeError("Expected argument 'invoker_sets' to be a list")
        pulumi.set(__self__, "invoker_sets", invoker_sets)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> Optional[str]:
        """
        Command ID.
        """
        return pulumi.get(self, "command_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="invokerId")
    def invoker_id(self) -> Optional[str]:
        """
        Invoker ID.
        """
        return pulumi.get(self, "invoker_id")

    @property
    @pulumi.getter(name="invokerSets")
    def invoker_sets(self) -> Sequence['outputs.GetInvokerInvokerSetResult']:
        """
        Invoker information.
        """
        return pulumi.get(self, "invoker_sets")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Invoker type.
        """
        return pulumi.get(self, "type")


class AwaitableGetInvokerResult(GetInvokerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInvokerResult(
            command_id=self.command_id,
            id=self.id,
            invoker_id=self.invoker_id,
            invoker_sets=self.invoker_sets,
            result_output_file=self.result_output_file,
            type=self.type)


def get_invoker(command_id: Optional[str] = None,
                invoker_id: Optional[str] = None,
                result_output_file: Optional[str] = None,
                type: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInvokerResult:
    """
    Use this data source to query detailed information of tat invoker

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    invoker = tencentcloud.Tat.get_invoker()
    ```
    <!--End PulumiCodeChooser -->


    :param str command_id: Command ID.
    :param str invoker_id: Invoker ID.
    :param str result_output_file: Used to save results.
    :param str type: Invoker type.
    """
    __args__ = dict()
    __args__['commandId'] = command_id
    __args__['invokerId'] = invoker_id
    __args__['resultOutputFile'] = result_output_file
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tat/getInvoker:getInvoker', __args__, opts=opts, typ=GetInvokerResult).value

    return AwaitableGetInvokerResult(
        command_id=pulumi.get(__ret__, 'command_id'),
        id=pulumi.get(__ret__, 'id'),
        invoker_id=pulumi.get(__ret__, 'invoker_id'),
        invoker_sets=pulumi.get(__ret__, 'invoker_sets'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_invoker)
def get_invoker_output(command_id: Optional[pulumi.Input[Optional[str]]] = None,
                       invoker_id: Optional[pulumi.Input[Optional[str]]] = None,
                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       type: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInvokerResult]:
    """
    Use this data source to query detailed information of tat invoker

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    invoker = tencentcloud.Tat.get_invoker()
    ```
    <!--End PulumiCodeChooser -->


    :param str command_id: Command ID.
    :param str invoker_id: Invoker ID.
    :param str result_output_file: Used to save results.
    :param str type: Invoker type.
    """
    ...
