# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CommandArgs', 'Command']

@pulumi.input_type
class CommandArgs:
    def __init__(__self__, *,
                 command_name: pulumi.Input[str],
                 content: pulumi.Input[str],
                 command_type: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Command resource.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] content: Command. The maximum length of Base64 encoding is 64KB.
        :param pulumi.Input[str] command_type: Command type. `SHELL` and `POWERSHELL` are supported. The default value is `SHELL`.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {&amp;#39;varA&amp;#39;: &amp;#39;222&amp;#39;}.`key` is the name of the custom parameter and value is the default value. Both `key` and `value` are strings.If no parameter value is provided in the `InvokeCommand` API, the default value is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: `false`.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs. The URL must start with `https`, such as `https://BucketName-123454321.cos.ap-beijing.myqcloud.com`.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved. Check below for the rules of the directory name.1. It must be a combination of number, letters, and visible characters. Up to 60 characters are allowed.2. Use a slash (/) to create a subdirectory.3. Consecutive dots (.) and slashes (/) are not allowed. It can not start with a slash (/).
        :param pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]] tags: Tags bound to the command. At most 10 tags are allowed.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the root user is used to execute commands on Linux and the System user is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for `SHELL` commands and C:/Program Files/qcloudtat_agent/workdir for `POWERSHELL` commands.
        """
        pulumi.set(__self__, "command_name", command_name)
        pulumi.set(__self__, "content", content)
        if command_type is not None:
            pulumi.set(__self__, "command_type", command_type)
        if default_parameters is not None:
            pulumi.set(__self__, "default_parameters", default_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_parameter is not None:
            pulumi.set(__self__, "enable_parameter", enable_parameter)
        if output_cos_bucket_url is not None:
            pulumi.set(__self__, "output_cos_bucket_url", output_cos_bucket_url)
        if output_cos_key_prefix is not None:
            pulumi.set(__self__, "output_cos_key_prefix", output_cos_key_prefix)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> pulumi.Input[str]:
        """
        Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "command_name", value)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Command. The maximum length of Base64 encoding is 64KB.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> Optional[pulumi.Input[str]]:
        """
        Command type. `SHELL` and `POWERSHELL` are supported. The default value is `SHELL`.
        """
        return pulumi.get(self, "command_type")

    @command_type.setter
    def command_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_type", value)

    @property
    @pulumi.getter(name="defaultParameters")
    def default_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {&amp;#39;varA&amp;#39;: &amp;#39;222&amp;#39;}.`key` is the name of the custom parameter and value is the default value. Both `key` and `value` are strings.If no parameter value is provided in the `InvokeCommand` API, the default value is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "default_parameters")

    @default_parameters.setter
    def default_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Command description. The maximum length is 120 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the custom parameter feature.This cannot be modified once created.Default value: `false`.
        """
        return pulumi.get(self, "enable_parameter")

    @enable_parameter.setter
    def enable_parameter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_parameter", value)

    @property
    @pulumi.getter(name="outputCosBucketUrl")
    def output_cos_bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket URL for uploading logs. The URL must start with `https`, such as `https://BucketName-123454321.cos.ap-beijing.myqcloud.com`.
        """
        return pulumi.get(self, "output_cos_bucket_url")

    @output_cos_bucket_url.setter
    def output_cos_bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_bucket_url", value)

    @property
    @pulumi.getter(name="outputCosKeyPrefix")
    def output_cos_key_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket directory where the logs are saved. Check below for the rules of the directory name.1. It must be a combination of number, letters, and visible characters. Up to 60 characters are allowed.2. Use a slash (/) to create a subdirectory.3. Consecutive dots (.) and slashes (/) are not allowed. It can not start with a slash (/).
        """
        return pulumi.get(self, "output_cos_key_prefix")

    @output_cos_key_prefix.setter
    def output_cos_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_key_prefix", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]:
        """
        Tags bound to the command. At most 10 tags are allowed.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the root user is used to execute commands on Linux and the System user is used on Windows.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        """
        Command execution path. The default value is /root for `SHELL` commands and C:/Program Files/qcloudtat_agent/workdir for `POWERSHELL` commands.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


@pulumi.input_type
class _CommandState:
    def __init__(__self__, *,
                 command_name: Optional[pulumi.Input[str]] = None,
                 command_type: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 formatted_description: Optional[pulumi.Input[str]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Command resources.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] command_type: Command type. `SHELL` and `POWERSHELL` are supported. The default value is `SHELL`.
        :param pulumi.Input[str] content: Command. The maximum length of Base64 encoding is 64KB.
        :param pulumi.Input[str] created_by: Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
        :param pulumi.Input[str] created_time: Command creation time.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {&amp;#39;varA&amp;#39;: &amp;#39;222&amp;#39;}.`key` is the name of the custom parameter and value is the default value. Both `key` and `value` are strings.If no parameter value is provided in the `InvokeCommand` API, the default value is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: `false`.
        :param pulumi.Input[str] formatted_description: Formatted description of the command. This parameter is an empty string for user commands and contains values for public commands.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs. The URL must start with `https`, such as `https://BucketName-123454321.cos.ap-beijing.myqcloud.com`.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved. Check below for the rules of the directory name.1. It must be a combination of number, letters, and visible characters. Up to 60 characters are allowed.2. Use a slash (/) to create a subdirectory.3. Consecutive dots (.) and slashes (/) are not allowed. It can not start with a slash (/).
        :param pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]] tags: Tags bound to the command. At most 10 tags are allowed.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] updated_time: Command update time.
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the root user is used to execute commands on Linux and the System user is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for `SHELL` commands and C:/Program Files/qcloudtat_agent/workdir for `POWERSHELL` commands.
        """
        if command_name is not None:
            pulumi.set(__self__, "command_name", command_name)
        if command_type is not None:
            pulumi.set(__self__, "command_type", command_type)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if default_parameters is not None:
            pulumi.set(__self__, "default_parameters", default_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_parameter is not None:
            pulumi.set(__self__, "enable_parameter", enable_parameter)
        if formatted_description is not None:
            pulumi.set(__self__, "formatted_description", formatted_description)
        if output_cos_bucket_url is not None:
            pulumi.set(__self__, "output_cos_bucket_url", output_cos_bucket_url)
        if output_cos_key_prefix is not None:
            pulumi.set(__self__, "output_cos_key_prefix", output_cos_key_prefix)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if working_directory is not None:
            pulumi.set(__self__, "working_directory", working_directory)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> Optional[pulumi.Input[str]]:
        """
        Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        """
        return pulumi.get(self, "command_name")

    @command_name.setter
    def command_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_name", value)

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> Optional[pulumi.Input[str]]:
        """
        Command type. `SHELL` and `POWERSHELL` are supported. The default value is `SHELL`.
        """
        return pulumi.get(self, "command_type")

    @command_type.setter
    def command_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_type", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Command. The maximum length of Base64 encoding is 64KB.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        Command creation time.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="defaultParameters")
    def default_parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {&amp;#39;varA&amp;#39;: &amp;#39;222&amp;#39;}.`key` is the name of the custom parameter and value is the default value. Both `key` and `value` are strings.If no parameter value is provided in the `InvokeCommand` API, the default value is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "default_parameters")

    @default_parameters.setter
    def default_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Command description. The maximum length is 120 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the custom parameter feature.This cannot be modified once created.Default value: `false`.
        """
        return pulumi.get(self, "enable_parameter")

    @enable_parameter.setter
    def enable_parameter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_parameter", value)

    @property
    @pulumi.getter(name="formattedDescription")
    def formatted_description(self) -> Optional[pulumi.Input[str]]:
        """
        Formatted description of the command. This parameter is an empty string for user commands and contains values for public commands.
        """
        return pulumi.get(self, "formatted_description")

    @formatted_description.setter
    def formatted_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "formatted_description", value)

    @property
    @pulumi.getter(name="outputCosBucketUrl")
    def output_cos_bucket_url(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket URL for uploading logs. The URL must start with `https`, such as `https://BucketName-123454321.cos.ap-beijing.myqcloud.com`.
        """
        return pulumi.get(self, "output_cos_bucket_url")

    @output_cos_bucket_url.setter
    def output_cos_bucket_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_bucket_url", value)

    @property
    @pulumi.getter(name="outputCosKeyPrefix")
    def output_cos_key_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The COS bucket directory where the logs are saved. Check below for the rules of the directory name.1. It must be a combination of number, letters, and visible characters. Up to 60 characters are allowed.2. Use a slash (/) to create a subdirectory.3. Consecutive dots (.) and slashes (/) are not allowed. It can not start with a slash (/).
        """
        return pulumi.get(self, "output_cos_key_prefix")

    @output_cos_key_prefix.setter
    def output_cos_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_cos_key_prefix", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]:
        """
        Tags bound to the command. At most 10 tags are allowed.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[str]]:
        """
        Command update time.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the root user is used to execute commands on Linux and the System user is used on Windows.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> Optional[pulumi.Input[str]]:
        """
        Command execution path. The default value is /root for `SHELL` commands and C:/Program Files/qcloudtat_agent/workdir for `POWERSHELL` commands.
        """
        return pulumi.get(self, "working_directory")

    @working_directory.setter
    def working_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "working_directory", value)


class Command(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_name: Optional[pulumi.Input[str]] = None,
                 command_type: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommandTagArgs']]]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tat command

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        command = tencentcloud.tat.Command("command",
            command_name="ls",
            command_type="SHELL",
            content="bHM=",
            description="xxx",
            tags=[tencentcloud.tat.CommandTagArgs(
                key="",
                value="",
            )],
            timeout=50,
            username="root",
            working_directory="/root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tat command can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tat/command:Command command cmd-6fydo27j
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] command_type: Command type. `SHELL` and `POWERSHELL` are supported. The default value is `SHELL`.
        :param pulumi.Input[str] content: Command. The maximum length of Base64 encoding is 64KB.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {&amp;#39;varA&amp;#39;: &amp;#39;222&amp;#39;}.`key` is the name of the custom parameter and value is the default value. Both `key` and `value` are strings.If no parameter value is provided in the `InvokeCommand` API, the default value is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: `false`.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs. The URL must start with `https`, such as `https://BucketName-123454321.cos.ap-beijing.myqcloud.com`.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved. Check below for the rules of the directory name.1. It must be a combination of number, letters, and visible characters. Up to 60 characters are allowed.2. Use a slash (/) to create a subdirectory.3. Consecutive dots (.) and slashes (/) are not allowed. It can not start with a slash (/).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommandTagArgs']]]] tags: Tags bound to the command. At most 10 tags are allowed.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the root user is used to execute commands on Linux and the System user is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for `SHELL` commands and C:/Program Files/qcloudtat_agent/workdir for `POWERSHELL` commands.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CommandArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tat command

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        command = tencentcloud.tat.Command("command",
            command_name="ls",
            command_type="SHELL",
            content="bHM=",
            description="xxx",
            tags=[tencentcloud.tat.CommandTagArgs(
                key="",
                value="",
            )],
            timeout=50,
            username="root",
            working_directory="/root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tat command can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tat/command:Command command cmd-6fydo27j
        ```

        :param str resource_name: The name of the resource.
        :param CommandArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CommandArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_name: Optional[pulumi.Input[str]] = None,
                 command_type: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 default_parameters: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enable_parameter: Optional[pulumi.Input[bool]] = None,
                 output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
                 output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommandTagArgs']]]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 working_directory: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CommandArgs.__new__(CommandArgs)

            if command_name is None and not opts.urn:
                raise TypeError("Missing required property 'command_name'")
            __props__.__dict__["command_name"] = command_name
            __props__.__dict__["command_type"] = command_type
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["default_parameters"] = default_parameters
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_parameter"] = enable_parameter
            __props__.__dict__["output_cos_bucket_url"] = output_cos_bucket_url
            __props__.__dict__["output_cos_key_prefix"] = output_cos_key_prefix
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["username"] = username
            __props__.__dict__["working_directory"] = working_directory
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["formatted_description"] = None
            __props__.__dict__["updated_time"] = None
        super(Command, __self__).__init__(
            'tencentcloud:Tat/command:Command',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            command_name: Optional[pulumi.Input[str]] = None,
            command_type: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            created_time: Optional[pulumi.Input[str]] = None,
            default_parameters: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enable_parameter: Optional[pulumi.Input[bool]] = None,
            formatted_description: Optional[pulumi.Input[str]] = None,
            output_cos_bucket_url: Optional[pulumi.Input[str]] = None,
            output_cos_key_prefix: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommandTagArgs']]]]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            updated_time: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            working_directory: Optional[pulumi.Input[str]] = None) -> 'Command':
        """
        Get an existing Command resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command_name: Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        :param pulumi.Input[str] command_type: Command type. `SHELL` and `POWERSHELL` are supported. The default value is `SHELL`.
        :param pulumi.Input[str] content: Command. The maximum length of Base64 encoding is 64KB.
        :param pulumi.Input[str] created_by: Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
        :param pulumi.Input[str] created_time: Command creation time.
        :param pulumi.Input[str] default_parameters: The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {&amp;#39;varA&amp;#39;: &amp;#39;222&amp;#39;}.`key` is the name of the custom parameter and value is the default value. Both `key` and `value` are strings.If no parameter value is provided in the `InvokeCommand` API, the default value is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        :param pulumi.Input[str] description: Command description. The maximum length is 120 characters.
        :param pulumi.Input[bool] enable_parameter: Whether to enable the custom parameter feature.This cannot be modified once created.Default value: `false`.
        :param pulumi.Input[str] formatted_description: Formatted description of the command. This parameter is an empty string for user commands and contains values for public commands.
        :param pulumi.Input[str] output_cos_bucket_url: The COS bucket URL for uploading logs. The URL must start with `https`, such as `https://BucketName-123454321.cos.ap-beijing.myqcloud.com`.
        :param pulumi.Input[str] output_cos_key_prefix: The COS bucket directory where the logs are saved. Check below for the rules of the directory name.1. It must be a combination of number, letters, and visible characters. Up to 60 characters are allowed.2. Use a slash (/) to create a subdirectory.3. Consecutive dots (.) and slashes (/) are not allowed. It can not start with a slash (/).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CommandTagArgs']]]] tags: Tags bound to the command. At most 10 tags are allowed.
        :param pulumi.Input[int] timeout: Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        :param pulumi.Input[str] updated_time: Command update time.
        :param pulumi.Input[str] username: The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the root user is used to execute commands on Linux and the System user is used on Windows.
        :param pulumi.Input[str] working_directory: Command execution path. The default value is /root for `SHELL` commands and C:/Program Files/qcloudtat_agent/workdir for `POWERSHELL` commands.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CommandState.__new__(_CommandState)

        __props__.__dict__["command_name"] = command_name
        __props__.__dict__["command_type"] = command_type
        __props__.__dict__["content"] = content
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["default_parameters"] = default_parameters
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_parameter"] = enable_parameter
        __props__.__dict__["formatted_description"] = formatted_description
        __props__.__dict__["output_cos_bucket_url"] = output_cos_bucket_url
        __props__.__dict__["output_cos_key_prefix"] = output_cos_key_prefix
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["updated_time"] = updated_time
        __props__.__dict__["username"] = username
        __props__.__dict__["working_directory"] = working_directory
        return Command(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="commandName")
    def command_name(self) -> pulumi.Output[str]:
        """
        Command name. The name can be up to 60 bytes, and contain [a-z], [A-Z], [0-9] and [_-.].
        """
        return pulumi.get(self, "command_name")

    @property
    @pulumi.getter(name="commandType")
    def command_type(self) -> pulumi.Output[Optional[str]]:
        """
        Command type. `SHELL` and `POWERSHELL` are supported. The default value is `SHELL`.
        """
        return pulumi.get(self, "command_type")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Command. The maximum length of Base64 encoding is 64KB.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        Command creation time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="defaultParameters")
    def default_parameters(self) -> pulumi.Output[Optional[str]]:
        """
        The default value of the custom parameter value when it is enabled. The field type is JSON encoded string. For example, {&amp;#39;varA&amp;#39;: &amp;#39;222&amp;#39;}.`key` is the name of the custom parameter and value is the default value. Both `key` and `value` are strings.If no parameter value is provided in the `InvokeCommand` API, the default value is used.Up to 20 custom parameters are supported.The name of the custom parameter cannot exceed 64 characters and can contain [a-z], [A-Z], [0-9] and [-_].
        """
        return pulumi.get(self, "default_parameters")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Command description. The maximum length is 120 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable the custom parameter feature.This cannot be modified once created.Default value: `false`.
        """
        return pulumi.get(self, "enable_parameter")

    @property
    @pulumi.getter(name="formattedDescription")
    def formatted_description(self) -> pulumi.Output[str]:
        """
        Formatted description of the command. This parameter is an empty string for user commands and contains values for public commands.
        """
        return pulumi.get(self, "formatted_description")

    @property
    @pulumi.getter(name="outputCosBucketUrl")
    def output_cos_bucket_url(self) -> pulumi.Output[Optional[str]]:
        """
        The COS bucket URL for uploading logs. The URL must start with `https`, such as `https://BucketName-123454321.cos.ap-beijing.myqcloud.com`.
        """
        return pulumi.get(self, "output_cos_bucket_url")

    @property
    @pulumi.getter(name="outputCosKeyPrefix")
    def output_cos_key_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The COS bucket directory where the logs are saved. Check below for the rules of the directory name.1. It must be a combination of number, letters, and visible characters. Up to 60 characters are allowed.2. Use a slash (/) to create a subdirectory.3. Consecutive dots (.) and slashes (/) are not allowed. It can not start with a slash (/).
        """
        return pulumi.get(self, "output_cos_key_prefix")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.CommandTag']]]:
        """
        Tags bound to the command. At most 10 tags are allowed.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Command timeout period. Default value: 60 seconds. Value range: [1, 86400].
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[str]:
        """
        Command update time.
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        The username used to execute the command on the CVM or Lighthouse instance.The principle of least privilege is the best practice for permission management. We recommend you execute TAT commands as a general user. By default, the root user is used to execute commands on Linux and the System user is used on Windows.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workingDirectory")
    def working_directory(self) -> pulumi.Output[Optional[str]]:
        """
        Command execution path. The default value is /root for `SHELL` commands and C:/Program Files/qcloudtat_agent/workdir for `POWERSHELL` commands.
        """
        return pulumi.get(self, "working_directory")

