# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InvokerArgs', 'Invoker']

@pulumi.input_type
class InvokerArgs:
    def __init__(__self__, *,
                 command_id: pulumi.Input[str],
                 instance_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 schedule_settings: Optional[pulumi.Input['InvokerScheduleSettingsArgs']] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Invoker resource.
        :param pulumi.Input[str] command_id: Remote command ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: ID of the instance bound to the trigger. Up to 100 IDs are allowed.
        :param pulumi.Input[str] type: Invoker type. It can only be `SCHEDULE` (recurring invokers).
        :param pulumi.Input[str] name: Invoker name.
        :param pulumi.Input[str] parameters: Custom parameters of the command.
        :param pulumi.Input['InvokerScheduleSettingsArgs'] schedule_settings: Settings required for a recurring invoker.
        :param pulumi.Input[str] username: The user who executes the command.
        """
        pulumi.set(__self__, "command_id", command_id)
        pulumi.set(__self__, "instance_ids", instance_ids)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if schedule_settings is not None:
            pulumi.set(__self__, "schedule_settings", schedule_settings)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> pulumi.Input[str]:
        """
        Remote command ID.
        """
        return pulumi.get(self, "command_id")

    @command_id.setter
    def command_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "command_id", value)

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        ID of the instance bound to the trigger. Up to 100 IDs are allowed.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_ids", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Invoker type. It can only be `SCHEDULE` (recurring invokers).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Invoker name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Custom parameters of the command.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="scheduleSettings")
    def schedule_settings(self) -> Optional[pulumi.Input['InvokerScheduleSettingsArgs']]:
        """
        Settings required for a recurring invoker.
        """
        return pulumi.get(self, "schedule_settings")

    @schedule_settings.setter
    def schedule_settings(self, value: Optional[pulumi.Input['InvokerScheduleSettingsArgs']]):
        pulumi.set(self, "schedule_settings", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The user who executes the command.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class _InvokerState:
    def __init__(__self__, *,
                 command_id: Optional[pulumi.Input[str]] = None,
                 created_time: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 invoker_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 schedule_settings: Optional[pulumi.Input['InvokerScheduleSettingsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 updated_time: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Invoker resources.
        :param pulumi.Input[str] command_id: Remote command ID.
        :param pulumi.Input[str] created_time: Creation time.
        :param pulumi.Input[bool] enable: Whether to enable the invoker.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: ID of the instance bound to the trigger. Up to 100 IDs are allowed.
        :param pulumi.Input[str] invoker_id: Invoker ID.
        :param pulumi.Input[str] name: Invoker name.
        :param pulumi.Input[str] parameters: Custom parameters of the command.
        :param pulumi.Input['InvokerScheduleSettingsArgs'] schedule_settings: Settings required for a recurring invoker.
        :param pulumi.Input[str] type: Invoker type. It can only be `SCHEDULE` (recurring invokers).
        :param pulumi.Input[str] updated_time: Modification time.
        :param pulumi.Input[str] username: The user who executes the command.
        """
        if command_id is not None:
            pulumi.set(__self__, "command_id", command_id)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if instance_ids is not None:
            pulumi.set(__self__, "instance_ids", instance_ids)
        if invoker_id is not None:
            pulumi.set(__self__, "invoker_id", invoker_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if schedule_settings is not None:
            pulumi.set(__self__, "schedule_settings", schedule_settings)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> Optional[pulumi.Input[str]]:
        """
        Remote command ID.
        """
        return pulumi.get(self, "command_id")

    @command_id.setter
    def command_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command_id", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable the invoker.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ID of the instance bound to the trigger. Up to 100 IDs are allowed.
        """
        return pulumi.get(self, "instance_ids")

    @instance_ids.setter
    def instance_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_ids", value)

    @property
    @pulumi.getter(name="invokerId")
    def invoker_id(self) -> Optional[pulumi.Input[str]]:
        """
        Invoker ID.
        """
        return pulumi.get(self, "invoker_id")

    @invoker_id.setter
    def invoker_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invoker_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Invoker name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        Custom parameters of the command.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="scheduleSettings")
    def schedule_settings(self) -> Optional[pulumi.Input['InvokerScheduleSettingsArgs']]:
        """
        Settings required for a recurring invoker.
        """
        return pulumi.get(self, "schedule_settings")

    @schedule_settings.setter
    def schedule_settings(self, value: Optional[pulumi.Input['InvokerScheduleSettingsArgs']]):
        pulumi.set(self, "schedule_settings", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Invoker type. It can only be `SCHEDULE` (recurring invokers).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[str]]:
        """
        Modification time.
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The user who executes the command.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Invoker(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_id: Optional[pulumi.Input[str]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 schedule_settings: Optional[pulumi.Input[pulumi.InputType['InvokerScheduleSettingsArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tat invoker

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        invoker = tencentcloud.tat.Invoker("invoker",
            command_id="cmd-6fydo27j",
            instance_ids=["ins-3c7q2ebs"],
            schedule_settings=tencentcloud.tat.InvokerScheduleSettingsArgs(
                invoke_time="2099-11-17T16:00:00Z",
                policy="ONCE",
            ),
            type="SCHEDULE",
            username="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tat invoker can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tat/invoker:Invoker invoker ivk-gwb4ztk5
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command_id: Remote command ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: ID of the instance bound to the trigger. Up to 100 IDs are allowed.
        :param pulumi.Input[str] name: Invoker name.
        :param pulumi.Input[str] parameters: Custom parameters of the command.
        :param pulumi.Input[pulumi.InputType['InvokerScheduleSettingsArgs']] schedule_settings: Settings required for a recurring invoker.
        :param pulumi.Input[str] type: Invoker type. It can only be `SCHEDULE` (recurring invokers).
        :param pulumi.Input[str] username: The user who executes the command.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InvokerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tat invoker

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        invoker = tencentcloud.tat.Invoker("invoker",
            command_id="cmd-6fydo27j",
            instance_ids=["ins-3c7q2ebs"],
            schedule_settings=tencentcloud.tat.InvokerScheduleSettingsArgs(
                invoke_time="2099-11-17T16:00:00Z",
                policy="ONCE",
            ),
            type="SCHEDULE",
            username="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tat invoker can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tat/invoker:Invoker invoker ivk-gwb4ztk5
        ```

        :param str resource_name: The name of the resource.
        :param InvokerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InvokerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_id: Optional[pulumi.Input[str]] = None,
                 instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 schedule_settings: Optional[pulumi.Input[pulumi.InputType['InvokerScheduleSettingsArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InvokerArgs.__new__(InvokerArgs)

            if command_id is None and not opts.urn:
                raise TypeError("Missing required property 'command_id'")
            __props__.__dict__["command_id"] = command_id
            if instance_ids is None and not opts.urn:
                raise TypeError("Missing required property 'instance_ids'")
            __props__.__dict__["instance_ids"] = instance_ids
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = parameters
            __props__.__dict__["schedule_settings"] = schedule_settings
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["username"] = username
            __props__.__dict__["created_time"] = None
            __props__.__dict__["enable"] = None
            __props__.__dict__["invoker_id"] = None
            __props__.__dict__["updated_time"] = None
        super(Invoker, __self__).__init__(
            'tencentcloud:Tat/invoker:Invoker',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            command_id: Optional[pulumi.Input[str]] = None,
            created_time: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            instance_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            invoker_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[str]] = None,
            schedule_settings: Optional[pulumi.Input[pulumi.InputType['InvokerScheduleSettingsArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            updated_time: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'Invoker':
        """
        Get an existing Invoker resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command_id: Remote command ID.
        :param pulumi.Input[str] created_time: Creation time.
        :param pulumi.Input[bool] enable: Whether to enable the invoker.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_ids: ID of the instance bound to the trigger. Up to 100 IDs are allowed.
        :param pulumi.Input[str] invoker_id: Invoker ID.
        :param pulumi.Input[str] name: Invoker name.
        :param pulumi.Input[str] parameters: Custom parameters of the command.
        :param pulumi.Input[pulumi.InputType['InvokerScheduleSettingsArgs']] schedule_settings: Settings required for a recurring invoker.
        :param pulumi.Input[str] type: Invoker type. It can only be `SCHEDULE` (recurring invokers).
        :param pulumi.Input[str] updated_time: Modification time.
        :param pulumi.Input[str] username: The user who executes the command.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InvokerState.__new__(_InvokerState)

        __props__.__dict__["command_id"] = command_id
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["enable"] = enable
        __props__.__dict__["instance_ids"] = instance_ids
        __props__.__dict__["invoker_id"] = invoker_id
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["schedule_settings"] = schedule_settings
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_time"] = updated_time
        __props__.__dict__["username"] = username
        return Invoker(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> pulumi.Output[str]:
        """
        Remote command ID.
        """
        return pulumi.get(self, "command_id")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[str]:
        """
        Creation time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        Whether to enable the invoker.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        ID of the instance bound to the trigger. Up to 100 IDs are allowed.
        """
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="invokerId")
    def invoker_id(self) -> pulumi.Output[str]:
        """
        Invoker ID.
        """
        return pulumi.get(self, "invoker_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Invoker name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[str]]:
        """
        Custom parameters of the command.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="scheduleSettings")
    def schedule_settings(self) -> pulumi.Output[Optional['outputs.InvokerScheduleSettings']]:
        """
        Settings required for a recurring invoker.
        """
        return pulumi.get(self, "schedule_settings")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Invoker type. It can only be `SCHEDULE` (recurring invokers).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[str]:
        """
        Modification time.
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        The user who executes the command.
        """
        return pulumi.get(self, "username")

