# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['JobConfigArgs', 'JobConfig']

@pulumi.input_type
class JobConfigArgs:
    def __init__(__self__, *,
                 job_id: pulumi.Input[str],
                 auto_recover: Optional[pulumi.Input[int]] = None,
                 clazz_levels: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 default_parallelism: Optional[pulumi.Input[int]] = None,
                 entrypoint_class: Optional[pulumi.Input[str]] = None,
                 expert_mode_configuration: Optional[pulumi.Input['JobConfigExpertModeConfigurationArgs']] = None,
                 expert_mode_on: Optional[pulumi.Input[bool]] = None,
                 job_manager_spec: Optional[pulumi.Input[float]] = None,
                 log_collect: Optional[pulumi.Input[bool]] = None,
                 log_collect_type: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 program_args: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]]] = None,
                 python_version: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 resource_refs: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]]] = None,
                 task_manager_spec: Optional[pulumi.Input[float]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a JobConfig resource.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[int] auto_recover: Oceanus platform job recovery switch 1: on -1: off.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]] clazz_levels: Class log level.
        :param pulumi.Input[str] cls_logset_id: CLS logset ID.
        :param pulumi.Input[str] cls_topic_id: CLS log topic ID.
        :param pulumi.Input[str] cos_bucket: COS storage bucket name used by the job.
        :param pulumi.Input[int] default_parallelism: Job default parallelism.
        :param pulumi.Input[str] entrypoint_class: Main class.
        :param pulumi.Input['JobConfigExpertModeConfigurationArgs'] expert_mode_configuration: Expert mode configuration.
        :param pulumi.Input[bool] expert_mode_on: Whether to enable expert mode.
        :param pulumi.Input[float] job_manager_spec: JobManager specification.
        :param pulumi.Input[bool] log_collect: Whether to collect job logs.
        :param pulumi.Input[int] log_collect_type: Log collection type 2:CLS; 3:COS.
        :param pulumi.Input[str] log_level: Log level.
        :param pulumi.Input[str] program_args: Main class parameters.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]] properties: System parameters.
        :param pulumi.Input[str] python_version: Python version used by the pyflink job at runtime.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]] resource_refs: Resource reference array.
        :param pulumi.Input[float] task_manager_spec: TaskManager specification.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        """
        pulumi.set(__self__, "job_id", job_id)
        if auto_recover is not None:
            pulumi.set(__self__, "auto_recover", auto_recover)
        if clazz_levels is not None:
            pulumi.set(__self__, "clazz_levels", clazz_levels)
        if cls_logset_id is not None:
            pulumi.set(__self__, "cls_logset_id", cls_logset_id)
        if cls_topic_id is not None:
            pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        if cos_bucket is not None:
            pulumi.set(__self__, "cos_bucket", cos_bucket)
        if default_parallelism is not None:
            pulumi.set(__self__, "default_parallelism", default_parallelism)
        if entrypoint_class is not None:
            pulumi.set(__self__, "entrypoint_class", entrypoint_class)
        if expert_mode_configuration is not None:
            pulumi.set(__self__, "expert_mode_configuration", expert_mode_configuration)
        if expert_mode_on is not None:
            pulumi.set(__self__, "expert_mode_on", expert_mode_on)
        if job_manager_spec is not None:
            pulumi.set(__self__, "job_manager_spec", job_manager_spec)
        if log_collect is not None:
            pulumi.set(__self__, "log_collect", log_collect)
        if log_collect_type is not None:
            pulumi.set(__self__, "log_collect_type", log_collect_type)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if program_args is not None:
            pulumi.set(__self__, "program_args", program_args)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if python_version is not None:
            pulumi.set(__self__, "python_version", python_version)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if resource_refs is not None:
            pulumi.set(__self__, "resource_refs", resource_refs)
        if task_manager_spec is not None:
            pulumi.set(__self__, "task_manager_spec", task_manager_spec)
        if work_space_id is not None:
            pulumi.set(__self__, "work_space_id", work_space_id)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[str]:
        """
        Job ID.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="autoRecover")
    def auto_recover(self) -> Optional[pulumi.Input[int]]:
        """
        Oceanus platform job recovery switch 1: on -1: off.
        """
        return pulumi.get(self, "auto_recover")

    @auto_recover.setter
    def auto_recover(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_recover", value)

    @property
    @pulumi.getter(name="clazzLevels")
    def clazz_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]]]:
        """
        Class log level.
        """
        return pulumi.get(self, "clazz_levels")

    @clazz_levels.setter
    def clazz_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]]]):
        pulumi.set(self, "clazz_levels", value)

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS logset ID.
        """
        return pulumi.get(self, "cls_logset_id")

    @cls_logset_id.setter
    def cls_logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_logset_id", value)

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS log topic ID.
        """
        return pulumi.get(self, "cls_topic_id")

    @cls_topic_id.setter
    def cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_topic_id", value)

    @property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        COS storage bucket name used by the job.
        """
        return pulumi.get(self, "cos_bucket")

    @cos_bucket.setter
    def cos_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket", value)

    @property
    @pulumi.getter(name="defaultParallelism")
    def default_parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        Job default parallelism.
        """
        return pulumi.get(self, "default_parallelism")

    @default_parallelism.setter
    def default_parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_parallelism", value)

    @property
    @pulumi.getter(name="entrypointClass")
    def entrypoint_class(self) -> Optional[pulumi.Input[str]]:
        """
        Main class.
        """
        return pulumi.get(self, "entrypoint_class")

    @entrypoint_class.setter
    def entrypoint_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entrypoint_class", value)

    @property
    @pulumi.getter(name="expertModeConfiguration")
    def expert_mode_configuration(self) -> Optional[pulumi.Input['JobConfigExpertModeConfigurationArgs']]:
        """
        Expert mode configuration.
        """
        return pulumi.get(self, "expert_mode_configuration")

    @expert_mode_configuration.setter
    def expert_mode_configuration(self, value: Optional[pulumi.Input['JobConfigExpertModeConfigurationArgs']]):
        pulumi.set(self, "expert_mode_configuration", value)

    @property
    @pulumi.getter(name="expertModeOn")
    def expert_mode_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable expert mode.
        """
        return pulumi.get(self, "expert_mode_on")

    @expert_mode_on.setter
    def expert_mode_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expert_mode_on", value)

    @property
    @pulumi.getter(name="jobManagerSpec")
    def job_manager_spec(self) -> Optional[pulumi.Input[float]]:
        """
        JobManager specification.
        """
        return pulumi.get(self, "job_manager_spec")

    @job_manager_spec.setter
    def job_manager_spec(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "job_manager_spec", value)

    @property
    @pulumi.getter(name="logCollect")
    def log_collect(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to collect job logs.
        """
        return pulumi.get(self, "log_collect")

    @log_collect.setter
    def log_collect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collect", value)

    @property
    @pulumi.getter(name="logCollectType")
    def log_collect_type(self) -> Optional[pulumi.Input[int]]:
        """
        Log collection type 2:CLS; 3:COS.
        """
        return pulumi.get(self, "log_collect_type")

    @log_collect_type.setter
    def log_collect_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_collect_type", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Log level.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="programArgs")
    def program_args(self) -> Optional[pulumi.Input[str]]:
        """
        Main class parameters.
        """
        return pulumi.get(self, "program_args")

    @program_args.setter
    def program_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_args", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]]]:
        """
        System parameters.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="pythonVersion")
    def python_version(self) -> Optional[pulumi.Input[str]]:
        """
        Python version used by the pyflink job at runtime.
        """
        return pulumi.get(self, "python_version")

    @python_version.setter
    def python_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_version", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="resourceRefs")
    def resource_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]]]:
        """
        Resource reference array.
        """
        return pulumi.get(self, "resource_refs")

    @resource_refs.setter
    def resource_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]]]):
        pulumi.set(self, "resource_refs", value)

    @property
    @pulumi.getter(name="taskManagerSpec")
    def task_manager_spec(self) -> Optional[pulumi.Input[float]]:
        """
        TaskManager specification.
        """
        return pulumi.get(self, "task_manager_spec")

    @task_manager_spec.setter
    def task_manager_spec(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "task_manager_spec", value)

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace SerialId.
        """
        return pulumi.get(self, "work_space_id")

    @work_space_id.setter
    def work_space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_space_id", value)


@pulumi.input_type
class _JobConfigState:
    def __init__(__self__, *,
                 auto_recover: Optional[pulumi.Input[int]] = None,
                 clazz_levels: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 default_parallelism: Optional[pulumi.Input[int]] = None,
                 entrypoint_class: Optional[pulumi.Input[str]] = None,
                 expert_mode_configuration: Optional[pulumi.Input['JobConfigExpertModeConfigurationArgs']] = None,
                 expert_mode_on: Optional[pulumi.Input[bool]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_manager_spec: Optional[pulumi.Input[float]] = None,
                 log_collect: Optional[pulumi.Input[bool]] = None,
                 log_collect_type: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 program_args: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]]] = None,
                 python_version: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 resource_refs: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]]] = None,
                 task_manager_spec: Optional[pulumi.Input[float]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering JobConfig resources.
        :param pulumi.Input[int] auto_recover: Oceanus platform job recovery switch 1: on -1: off.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]] clazz_levels: Class log level.
        :param pulumi.Input[str] cls_logset_id: CLS logset ID.
        :param pulumi.Input[str] cls_topic_id: CLS log topic ID.
        :param pulumi.Input[str] cos_bucket: COS storage bucket name used by the job.
        :param pulumi.Input[int] default_parallelism: Job default parallelism.
        :param pulumi.Input[str] entrypoint_class: Main class.
        :param pulumi.Input['JobConfigExpertModeConfigurationArgs'] expert_mode_configuration: Expert mode configuration.
        :param pulumi.Input[bool] expert_mode_on: Whether to enable expert mode.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[float] job_manager_spec: JobManager specification.
        :param pulumi.Input[bool] log_collect: Whether to collect job logs.
        :param pulumi.Input[int] log_collect_type: Log collection type 2:CLS; 3:COS.
        :param pulumi.Input[str] log_level: Log level.
        :param pulumi.Input[str] program_args: Main class parameters.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]] properties: System parameters.
        :param pulumi.Input[str] python_version: Python version used by the pyflink job at runtime.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]] resource_refs: Resource reference array.
        :param pulumi.Input[float] task_manager_spec: TaskManager specification.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        """
        if auto_recover is not None:
            pulumi.set(__self__, "auto_recover", auto_recover)
        if clazz_levels is not None:
            pulumi.set(__self__, "clazz_levels", clazz_levels)
        if cls_logset_id is not None:
            pulumi.set(__self__, "cls_logset_id", cls_logset_id)
        if cls_topic_id is not None:
            pulumi.set(__self__, "cls_topic_id", cls_topic_id)
        if cos_bucket is not None:
            pulumi.set(__self__, "cos_bucket", cos_bucket)
        if default_parallelism is not None:
            pulumi.set(__self__, "default_parallelism", default_parallelism)
        if entrypoint_class is not None:
            pulumi.set(__self__, "entrypoint_class", entrypoint_class)
        if expert_mode_configuration is not None:
            pulumi.set(__self__, "expert_mode_configuration", expert_mode_configuration)
        if expert_mode_on is not None:
            pulumi.set(__self__, "expert_mode_on", expert_mode_on)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if job_manager_spec is not None:
            pulumi.set(__self__, "job_manager_spec", job_manager_spec)
        if log_collect is not None:
            pulumi.set(__self__, "log_collect", log_collect)
        if log_collect_type is not None:
            pulumi.set(__self__, "log_collect_type", log_collect_type)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if program_args is not None:
            pulumi.set(__self__, "program_args", program_args)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if python_version is not None:
            pulumi.set(__self__, "python_version", python_version)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if resource_refs is not None:
            pulumi.set(__self__, "resource_refs", resource_refs)
        if task_manager_spec is not None:
            pulumi.set(__self__, "task_manager_spec", task_manager_spec)
        if work_space_id is not None:
            pulumi.set(__self__, "work_space_id", work_space_id)

    @property
    @pulumi.getter(name="autoRecover")
    def auto_recover(self) -> Optional[pulumi.Input[int]]:
        """
        Oceanus platform job recovery switch 1: on -1: off.
        """
        return pulumi.get(self, "auto_recover")

    @auto_recover.setter
    def auto_recover(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_recover", value)

    @property
    @pulumi.getter(name="clazzLevels")
    def clazz_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]]]:
        """
        Class log level.
        """
        return pulumi.get(self, "clazz_levels")

    @clazz_levels.setter
    def clazz_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigClazzLevelArgs']]]]):
        pulumi.set(self, "clazz_levels", value)

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS logset ID.
        """
        return pulumi.get(self, "cls_logset_id")

    @cls_logset_id.setter
    def cls_logset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_logset_id", value)

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> Optional[pulumi.Input[str]]:
        """
        CLS log topic ID.
        """
        return pulumi.get(self, "cls_topic_id")

    @cls_topic_id.setter
    def cls_topic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cls_topic_id", value)

    @property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> Optional[pulumi.Input[str]]:
        """
        COS storage bucket name used by the job.
        """
        return pulumi.get(self, "cos_bucket")

    @cos_bucket.setter
    def cos_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_bucket", value)

    @property
    @pulumi.getter(name="defaultParallelism")
    def default_parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        Job default parallelism.
        """
        return pulumi.get(self, "default_parallelism")

    @default_parallelism.setter
    def default_parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_parallelism", value)

    @property
    @pulumi.getter(name="entrypointClass")
    def entrypoint_class(self) -> Optional[pulumi.Input[str]]:
        """
        Main class.
        """
        return pulumi.get(self, "entrypoint_class")

    @entrypoint_class.setter
    def entrypoint_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entrypoint_class", value)

    @property
    @pulumi.getter(name="expertModeConfiguration")
    def expert_mode_configuration(self) -> Optional[pulumi.Input['JobConfigExpertModeConfigurationArgs']]:
        """
        Expert mode configuration.
        """
        return pulumi.get(self, "expert_mode_configuration")

    @expert_mode_configuration.setter
    def expert_mode_configuration(self, value: Optional[pulumi.Input['JobConfigExpertModeConfigurationArgs']]):
        pulumi.set(self, "expert_mode_configuration", value)

    @property
    @pulumi.getter(name="expertModeOn")
    def expert_mode_on(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable expert mode.
        """
        return pulumi.get(self, "expert_mode_on")

    @expert_mode_on.setter
    def expert_mode_on(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expert_mode_on", value)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[str]]:
        """
        Job ID.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="jobManagerSpec")
    def job_manager_spec(self) -> Optional[pulumi.Input[float]]:
        """
        JobManager specification.
        """
        return pulumi.get(self, "job_manager_spec")

    @job_manager_spec.setter
    def job_manager_spec(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "job_manager_spec", value)

    @property
    @pulumi.getter(name="logCollect")
    def log_collect(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to collect job logs.
        """
        return pulumi.get(self, "log_collect")

    @log_collect.setter
    def log_collect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_collect", value)

    @property
    @pulumi.getter(name="logCollectType")
    def log_collect_type(self) -> Optional[pulumi.Input[int]]:
        """
        Log collection type 2:CLS; 3:COS.
        """
        return pulumi.get(self, "log_collect_type")

    @log_collect_type.setter
    def log_collect_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "log_collect_type", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input[str]]:
        """
        Log level.
        """
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_level", value)

    @property
    @pulumi.getter(name="programArgs")
    def program_args(self) -> Optional[pulumi.Input[str]]:
        """
        Main class parameters.
        """
        return pulumi.get(self, "program_args")

    @program_args.setter
    def program_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "program_args", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]]]:
        """
        System parameters.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="pythonVersion")
    def python_version(self) -> Optional[pulumi.Input[str]]:
        """
        Python version used by the pyflink job at runtime.
        """
        return pulumi.get(self, "python_version")

    @python_version.setter
    def python_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_version", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="resourceRefs")
    def resource_refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]]]:
        """
        Resource reference array.
        """
        return pulumi.get(self, "resource_refs")

    @resource_refs.setter
    def resource_refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigResourceRefArgs']]]]):
        pulumi.set(self, "resource_refs", value)

    @property
    @pulumi.getter(name="taskManagerSpec")
    def task_manager_spec(self) -> Optional[pulumi.Input[float]]:
        """
        TaskManager specification.
        """
        return pulumi.get(self, "task_manager_spec")

    @task_manager_spec.setter
    def task_manager_spec(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "task_manager_spec", value)

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace SerialId.
        """
        return pulumi.get(self, "work_space_id")

    @work_space_id.setter
    def work_space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_space_id", value)


class JobConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_recover: Optional[pulumi.Input[int]] = None,
                 clazz_levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigClazzLevelArgs']]]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 default_parallelism: Optional[pulumi.Input[int]] = None,
                 entrypoint_class: Optional[pulumi.Input[str]] = None,
                 expert_mode_configuration: Optional[pulumi.Input[pulumi.InputType['JobConfigExpertModeConfigurationArgs']]] = None,
                 expert_mode_on: Optional[pulumi.Input[bool]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_manager_spec: Optional[pulumi.Input[float]] = None,
                 log_collect: Optional[pulumi.Input[bool]] = None,
                 log_collect_type: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 program_args: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigPropertyArgs']]]]] = None,
                 python_version: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 resource_refs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigResourceRefArgs']]]]] = None,
                 task_manager_spec: Optional[pulumi.Input[float]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a oceanus job_config

        ## Example Usage

        ### is 2

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.JobConfig("example",
            auto_recover=1,
            cls_logset_id="cd9adbb5-6b7d-48d2-9870-77658959c7a4",
            cls_topic_id="cec4c2f1-0bf3-470e-b1a5-b1c451e88838",
            default_parallelism=1,
            entrypoint_class="tf_example",
            expert_mode_on=False,
            job_id="cql-4xwincyn",
            job_manager_spec=1,
            log_collect=True,
            log_collect_type=2,
            log_level="INFO",
            program_args="--conf Key=Value",
            properties=[tencentcloud.oceanus.JobConfigPropertyArgs(
                key="pipeline.max-parallelism",
                value="2048",
            )],
            remark="remark.",
            resource_refs=[tencentcloud.oceanus.JobConfigResourceRefArgs(
                resource_id="resource-q22ntswy",
                type=1,
                version=1,
            )],
            task_manager_spec=1,
            work_space_id="space-2idq8wbr")
        ```
        <!--End PulumiCodeChooser -->

        ### is 3

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.JobConfig("example",
            auto_recover=1,
            cls_logset_id="cd9adbb5-6b7d-48d2-9870-77658959c7a4",
            cls_topic_id="cec4c2f1-0bf3-470e-b1a5-b1c451e88838",
            cos_bucket="autotest-gz-bucket-1257058945",
            default_parallelism=1,
            entrypoint_class="tf_example",
            expert_mode_on=False,
            job_id="cql-4xwincyn",
            job_manager_spec=1,
            log_collect=True,
            log_collect_type=3,
            log_level="INFO",
            program_args="--conf Key=Value",
            properties=[tencentcloud.oceanus.JobConfigPropertyArgs(
                key="pipeline.max-parallelism",
                value="2048",
            )],
            remark="remark.",
            resource_refs=[tencentcloud.oceanus.JobConfigResourceRefArgs(
                resource_id="resource-q22ntswy",
                type=1,
                version=1,
            )],
            task_manager_spec=1,
            work_space_id="space-2idq8wbr")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_recover: Oceanus platform job recovery switch 1: on -1: off.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigClazzLevelArgs']]]] clazz_levels: Class log level.
        :param pulumi.Input[str] cls_logset_id: CLS logset ID.
        :param pulumi.Input[str] cls_topic_id: CLS log topic ID.
        :param pulumi.Input[str] cos_bucket: COS storage bucket name used by the job.
        :param pulumi.Input[int] default_parallelism: Job default parallelism.
        :param pulumi.Input[str] entrypoint_class: Main class.
        :param pulumi.Input[pulumi.InputType['JobConfigExpertModeConfigurationArgs']] expert_mode_configuration: Expert mode configuration.
        :param pulumi.Input[bool] expert_mode_on: Whether to enable expert mode.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[float] job_manager_spec: JobManager specification.
        :param pulumi.Input[bool] log_collect: Whether to collect job logs.
        :param pulumi.Input[int] log_collect_type: Log collection type 2:CLS; 3:COS.
        :param pulumi.Input[str] log_level: Log level.
        :param pulumi.Input[str] program_args: Main class parameters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigPropertyArgs']]]] properties: System parameters.
        :param pulumi.Input[str] python_version: Python version used by the pyflink job at runtime.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigResourceRefArgs']]]] resource_refs: Resource reference array.
        :param pulumi.Input[float] task_manager_spec: TaskManager specification.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: JobConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a oceanus job_config

        ## Example Usage

        ### is 2

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.JobConfig("example",
            auto_recover=1,
            cls_logset_id="cd9adbb5-6b7d-48d2-9870-77658959c7a4",
            cls_topic_id="cec4c2f1-0bf3-470e-b1a5-b1c451e88838",
            default_parallelism=1,
            entrypoint_class="tf_example",
            expert_mode_on=False,
            job_id="cql-4xwincyn",
            job_manager_spec=1,
            log_collect=True,
            log_collect_type=2,
            log_level="INFO",
            program_args="--conf Key=Value",
            properties=[tencentcloud.oceanus.JobConfigPropertyArgs(
                key="pipeline.max-parallelism",
                value="2048",
            )],
            remark="remark.",
            resource_refs=[tencentcloud.oceanus.JobConfigResourceRefArgs(
                resource_id="resource-q22ntswy",
                type=1,
                version=1,
            )],
            task_manager_spec=1,
            work_space_id="space-2idq8wbr")
        ```
        <!--End PulumiCodeChooser -->

        ### is 3

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.JobConfig("example",
            auto_recover=1,
            cls_logset_id="cd9adbb5-6b7d-48d2-9870-77658959c7a4",
            cls_topic_id="cec4c2f1-0bf3-470e-b1a5-b1c451e88838",
            cos_bucket="autotest-gz-bucket-1257058945",
            default_parallelism=1,
            entrypoint_class="tf_example",
            expert_mode_on=False,
            job_id="cql-4xwincyn",
            job_manager_spec=1,
            log_collect=True,
            log_collect_type=3,
            log_level="INFO",
            program_args="--conf Key=Value",
            properties=[tencentcloud.oceanus.JobConfigPropertyArgs(
                key="pipeline.max-parallelism",
                value="2048",
            )],
            remark="remark.",
            resource_refs=[tencentcloud.oceanus.JobConfigResourceRefArgs(
                resource_id="resource-q22ntswy",
                type=1,
                version=1,
            )],
            task_manager_spec=1,
            work_space_id="space-2idq8wbr")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param JobConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(JobConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_recover: Optional[pulumi.Input[int]] = None,
                 clazz_levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigClazzLevelArgs']]]]] = None,
                 cls_logset_id: Optional[pulumi.Input[str]] = None,
                 cls_topic_id: Optional[pulumi.Input[str]] = None,
                 cos_bucket: Optional[pulumi.Input[str]] = None,
                 default_parallelism: Optional[pulumi.Input[int]] = None,
                 entrypoint_class: Optional[pulumi.Input[str]] = None,
                 expert_mode_configuration: Optional[pulumi.Input[pulumi.InputType['JobConfigExpertModeConfigurationArgs']]] = None,
                 expert_mode_on: Optional[pulumi.Input[bool]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_manager_spec: Optional[pulumi.Input[float]] = None,
                 log_collect: Optional[pulumi.Input[bool]] = None,
                 log_collect_type: Optional[pulumi.Input[int]] = None,
                 log_level: Optional[pulumi.Input[str]] = None,
                 program_args: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigPropertyArgs']]]]] = None,
                 python_version: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 resource_refs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigResourceRefArgs']]]]] = None,
                 task_manager_spec: Optional[pulumi.Input[float]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = JobConfigArgs.__new__(JobConfigArgs)

            __props__.__dict__["auto_recover"] = auto_recover
            __props__.__dict__["clazz_levels"] = clazz_levels
            __props__.__dict__["cls_logset_id"] = cls_logset_id
            __props__.__dict__["cls_topic_id"] = cls_topic_id
            __props__.__dict__["cos_bucket"] = cos_bucket
            __props__.__dict__["default_parallelism"] = default_parallelism
            __props__.__dict__["entrypoint_class"] = entrypoint_class
            __props__.__dict__["expert_mode_configuration"] = expert_mode_configuration
            __props__.__dict__["expert_mode_on"] = expert_mode_on
            if job_id is None and not opts.urn:
                raise TypeError("Missing required property 'job_id'")
            __props__.__dict__["job_id"] = job_id
            __props__.__dict__["job_manager_spec"] = job_manager_spec
            __props__.__dict__["log_collect"] = log_collect
            __props__.__dict__["log_collect_type"] = log_collect_type
            __props__.__dict__["log_level"] = log_level
            __props__.__dict__["program_args"] = program_args
            __props__.__dict__["properties"] = properties
            __props__.__dict__["python_version"] = python_version
            __props__.__dict__["remark"] = remark
            __props__.__dict__["resource_refs"] = resource_refs
            __props__.__dict__["task_manager_spec"] = task_manager_spec
            __props__.__dict__["work_space_id"] = work_space_id
        super(JobConfig, __self__).__init__(
            'tencentcloud:Oceanus/jobConfig:JobConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_recover: Optional[pulumi.Input[int]] = None,
            clazz_levels: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigClazzLevelArgs']]]]] = None,
            cls_logset_id: Optional[pulumi.Input[str]] = None,
            cls_topic_id: Optional[pulumi.Input[str]] = None,
            cos_bucket: Optional[pulumi.Input[str]] = None,
            default_parallelism: Optional[pulumi.Input[int]] = None,
            entrypoint_class: Optional[pulumi.Input[str]] = None,
            expert_mode_configuration: Optional[pulumi.Input[pulumi.InputType['JobConfigExpertModeConfigurationArgs']]] = None,
            expert_mode_on: Optional[pulumi.Input[bool]] = None,
            job_id: Optional[pulumi.Input[str]] = None,
            job_manager_spec: Optional[pulumi.Input[float]] = None,
            log_collect: Optional[pulumi.Input[bool]] = None,
            log_collect_type: Optional[pulumi.Input[int]] = None,
            log_level: Optional[pulumi.Input[str]] = None,
            program_args: Optional[pulumi.Input[str]] = None,
            properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigPropertyArgs']]]]] = None,
            python_version: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            resource_refs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigResourceRefArgs']]]]] = None,
            task_manager_spec: Optional[pulumi.Input[float]] = None,
            work_space_id: Optional[pulumi.Input[str]] = None) -> 'JobConfig':
        """
        Get an existing JobConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_recover: Oceanus platform job recovery switch 1: on -1: off.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigClazzLevelArgs']]]] clazz_levels: Class log level.
        :param pulumi.Input[str] cls_logset_id: CLS logset ID.
        :param pulumi.Input[str] cls_topic_id: CLS log topic ID.
        :param pulumi.Input[str] cos_bucket: COS storage bucket name used by the job.
        :param pulumi.Input[int] default_parallelism: Job default parallelism.
        :param pulumi.Input[str] entrypoint_class: Main class.
        :param pulumi.Input[pulumi.InputType['JobConfigExpertModeConfigurationArgs']] expert_mode_configuration: Expert mode configuration.
        :param pulumi.Input[bool] expert_mode_on: Whether to enable expert mode.
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[float] job_manager_spec: JobManager specification.
        :param pulumi.Input[bool] log_collect: Whether to collect job logs.
        :param pulumi.Input[int] log_collect_type: Log collection type 2:CLS; 3:COS.
        :param pulumi.Input[str] log_level: Log level.
        :param pulumi.Input[str] program_args: Main class parameters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigPropertyArgs']]]] properties: System parameters.
        :param pulumi.Input[str] python_version: Python version used by the pyflink job at runtime.
        :param pulumi.Input[str] remark: Remarks.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['JobConfigResourceRefArgs']]]] resource_refs: Resource reference array.
        :param pulumi.Input[float] task_manager_spec: TaskManager specification.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _JobConfigState.__new__(_JobConfigState)

        __props__.__dict__["auto_recover"] = auto_recover
        __props__.__dict__["clazz_levels"] = clazz_levels
        __props__.__dict__["cls_logset_id"] = cls_logset_id
        __props__.__dict__["cls_topic_id"] = cls_topic_id
        __props__.__dict__["cos_bucket"] = cos_bucket
        __props__.__dict__["default_parallelism"] = default_parallelism
        __props__.__dict__["entrypoint_class"] = entrypoint_class
        __props__.__dict__["expert_mode_configuration"] = expert_mode_configuration
        __props__.__dict__["expert_mode_on"] = expert_mode_on
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["job_manager_spec"] = job_manager_spec
        __props__.__dict__["log_collect"] = log_collect
        __props__.__dict__["log_collect_type"] = log_collect_type
        __props__.__dict__["log_level"] = log_level
        __props__.__dict__["program_args"] = program_args
        __props__.__dict__["properties"] = properties
        __props__.__dict__["python_version"] = python_version
        __props__.__dict__["remark"] = remark
        __props__.__dict__["resource_refs"] = resource_refs
        __props__.__dict__["task_manager_spec"] = task_manager_spec
        __props__.__dict__["work_space_id"] = work_space_id
        return JobConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRecover")
    def auto_recover(self) -> pulumi.Output[Optional[int]]:
        """
        Oceanus platform job recovery switch 1: on -1: off.
        """
        return pulumi.get(self, "auto_recover")

    @property
    @pulumi.getter(name="clazzLevels")
    def clazz_levels(self) -> pulumi.Output[Optional[Sequence['outputs.JobConfigClazzLevel']]]:
        """
        Class log level.
        """
        return pulumi.get(self, "clazz_levels")

    @property
    @pulumi.getter(name="clsLogsetId")
    def cls_logset_id(self) -> pulumi.Output[Optional[str]]:
        """
        CLS logset ID.
        """
        return pulumi.get(self, "cls_logset_id")

    @property
    @pulumi.getter(name="clsTopicId")
    def cls_topic_id(self) -> pulumi.Output[Optional[str]]:
        """
        CLS log topic ID.
        """
        return pulumi.get(self, "cls_topic_id")

    @property
    @pulumi.getter(name="cosBucket")
    def cos_bucket(self) -> pulumi.Output[str]:
        """
        COS storage bucket name used by the job.
        """
        return pulumi.get(self, "cos_bucket")

    @property
    @pulumi.getter(name="defaultParallelism")
    def default_parallelism(self) -> pulumi.Output[Optional[int]]:
        """
        Job default parallelism.
        """
        return pulumi.get(self, "default_parallelism")

    @property
    @pulumi.getter(name="entrypointClass")
    def entrypoint_class(self) -> pulumi.Output[Optional[str]]:
        """
        Main class.
        """
        return pulumi.get(self, "entrypoint_class")

    @property
    @pulumi.getter(name="expertModeConfiguration")
    def expert_mode_configuration(self) -> pulumi.Output[Optional['outputs.JobConfigExpertModeConfiguration']]:
        """
        Expert mode configuration.
        """
        return pulumi.get(self, "expert_mode_configuration")

    @property
    @pulumi.getter(name="expertModeOn")
    def expert_mode_on(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable expert mode.
        """
        return pulumi.get(self, "expert_mode_on")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[str]:
        """
        Job ID.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobManagerSpec")
    def job_manager_spec(self) -> pulumi.Output[Optional[float]]:
        """
        JobManager specification.
        """
        return pulumi.get(self, "job_manager_spec")

    @property
    @pulumi.getter(name="logCollect")
    def log_collect(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to collect job logs.
        """
        return pulumi.get(self, "log_collect")

    @property
    @pulumi.getter(name="logCollectType")
    def log_collect_type(self) -> pulumi.Output[Optional[int]]:
        """
        Log collection type 2:CLS; 3:COS.
        """
        return pulumi.get(self, "log_collect_type")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> pulumi.Output[Optional[str]]:
        """
        Log level.
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="programArgs")
    def program_args(self) -> pulumi.Output[Optional[str]]:
        """
        Main class parameters.
        """
        return pulumi.get(self, "program_args")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Optional[Sequence['outputs.JobConfigProperty']]]:
        """
        System parameters.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="pythonVersion")
    def python_version(self) -> pulumi.Output[Optional[str]]:
        """
        Python version used by the pyflink job at runtime.
        """
        return pulumi.get(self, "python_version")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="resourceRefs")
    def resource_refs(self) -> pulumi.Output[Optional[Sequence['outputs.JobConfigResourceRef']]]:
        """
        Resource reference array.
        """
        return pulumi.get(self, "resource_refs")

    @property
    @pulumi.getter(name="taskManagerSpec")
    def task_manager_spec(self) -> pulumi.Output[Optional[float]]:
        """
        TaskManager specification.
        """
        return pulumi.get(self, "task_manager_spec")

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> pulumi.Output[Optional[str]]:
        """
        Workspace SerialId.
        """
        return pulumi.get(self, "work_space_id")

