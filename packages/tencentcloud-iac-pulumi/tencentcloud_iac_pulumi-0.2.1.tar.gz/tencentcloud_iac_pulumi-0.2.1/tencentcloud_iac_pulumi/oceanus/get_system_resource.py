# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSystemResourceResult',
    'AwaitableGetSystemResourceResult',
    'get_system_resource',
    'get_system_resource_output',
]

@pulumi.output_type
class GetSystemResourceResult:
    """
    A collection of values returned by getSystemResource.
    """
    def __init__(__self__, cluster_id=None, filters=None, flink_version=None, id=None, resource_ids=None, resource_sets=None, result_output_file=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if flink_version and not isinstance(flink_version, str):
            raise TypeError("Expected argument 'flink_version' to be a str")
        pulumi.set(__self__, "flink_version", flink_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if resource_ids and not isinstance(resource_ids, list):
            raise TypeError("Expected argument 'resource_ids' to be a list")
        pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_sets and not isinstance(resource_sets, list):
            raise TypeError("Expected argument 'resource_sets' to be a list")
        pulumi.set(__self__, "resource_sets", resource_sets)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSystemResourceFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="flinkVersion")
    def flink_version(self) -> Optional[str]:
        return pulumi.get(self, "flink_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter(name="resourceSets")
    def resource_sets(self) -> Sequence['outputs.GetSystemResourceResourceSetResult']:
        """
        Collection of resource details.
        """
        return pulumi.get(self, "resource_sets")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetSystemResourceResult(GetSystemResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemResourceResult(
            cluster_id=self.cluster_id,
            filters=self.filters,
            flink_version=self.flink_version,
            id=self.id,
            resource_ids=self.resource_ids,
            resource_sets=self.resource_sets,
            result_output_file=self.result_output_file)


def get_system_resource(cluster_id: Optional[str] = None,
                        filters: Optional[Sequence[pulumi.InputType['GetSystemResourceFilterArgs']]] = None,
                        flink_version: Optional[str] = None,
                        resource_ids: Optional[Sequence[str]] = None,
                        result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemResourceResult:
    """
    Use this data source to query detailed information of oceanus system_resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Oceanus.get_system_resource(cluster_id="cluster-n8yaia0p",
        filters=[tencentcloud.oceanus.GetSystemResourceFilterArgs(
            name="Name",
            values=["tf_example"],
        )],
        flink_version="Flink-1.11",
        resource_ids=["resource-abd503yt"])
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param Sequence[pulumi.InputType['GetSystemResourceFilterArgs']] filters: Query the resource configuration list. If not specified, return all job configuration lists under ResourceIds.N.
    :param str flink_version: Query built-in connectors for the corresponding Flink version.
    :param Sequence[str] resource_ids: Array of resource IDs to be queried.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['filters'] = filters
    __args__['flinkVersion'] = flink_version
    __args__['resourceIds'] = resource_ids
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Oceanus/getSystemResource:getSystemResource', __args__, opts=opts, typ=GetSystemResourceResult).value

    return AwaitableGetSystemResourceResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        filters=pulumi.get(__ret__, 'filters'),
        flink_version=pulumi.get(__ret__, 'flink_version'),
        id=pulumi.get(__ret__, 'id'),
        resource_ids=pulumi.get(__ret__, 'resource_ids'),
        resource_sets=pulumi.get(__ret__, 'resource_sets'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_system_resource)
def get_system_resource_output(cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                               filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSystemResourceFilterArgs']]]]] = None,
                               flink_version: Optional[pulumi.Input[Optional[str]]] = None,
                               resource_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemResourceResult]:
    """
    Use this data source to query detailed information of oceanus system_resource

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Oceanus.get_system_resource(cluster_id="cluster-n8yaia0p",
        filters=[tencentcloud.oceanus.GetSystemResourceFilterArgs(
            name="Name",
            values=["tf_example"],
        )],
        flink_version="Flink-1.11",
        resource_ids=["resource-abd503yt"])
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param Sequence[pulumi.InputType['GetSystemResourceFilterArgs']] filters: Query the resource configuration list. If not specified, return all job configuration lists under ResourceIds.N.
    :param str flink_version: Query built-in connectors for the corresponding Flink version.
    :param Sequence[str] resource_ids: Array of resource IDs to be queried.
    :param str result_output_file: Used to save results.
    """
    ...
