# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetJobSubmissionLogResult',
    'AwaitableGetJobSubmissionLogResult',
    'get_job_submission_log',
    'get_job_submission_log_output',
]

@pulumi.output_type
class GetJobSubmissionLogResult:
    """
    A collection of values returned by getJobSubmissionLog.
    """
    def __init__(__self__, cursor=None, end_time=None, id=None, job_id=None, job_instance_lists=None, job_request_id=None, keyword=None, list_over=None, log_content_lists=None, log_lists=None, order_type=None, result_output_file=None, running_order_id=None, start_time=None):
        if cursor and not isinstance(cursor, str):
            raise TypeError("Expected argument 'cursor' to be a str")
        pulumi.set(__self__, "cursor", cursor)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if job_instance_lists and not isinstance(job_instance_lists, list):
            raise TypeError("Expected argument 'job_instance_lists' to be a list")
        pulumi.set(__self__, "job_instance_lists", job_instance_lists)
        if job_request_id and not isinstance(job_request_id, str):
            raise TypeError("Expected argument 'job_request_id' to be a str")
        pulumi.set(__self__, "job_request_id", job_request_id)
        if keyword and not isinstance(keyword, str):
            raise TypeError("Expected argument 'keyword' to be a str")
        pulumi.set(__self__, "keyword", keyword)
        if list_over and not isinstance(list_over, bool):
            raise TypeError("Expected argument 'list_over' to be a bool")
        pulumi.set(__self__, "list_over", list_over)
        if log_content_lists and not isinstance(log_content_lists, list):
            raise TypeError("Expected argument 'log_content_lists' to be a list")
        pulumi.set(__self__, "log_content_lists", log_content_lists)
        if log_lists and not isinstance(log_lists, list):
            raise TypeError("Expected argument 'log_lists' to be a list")
        pulumi.set(__self__, "log_lists", log_lists)
        if order_type and not isinstance(order_type, str):
            raise TypeError("Expected argument 'order_type' to be a str")
        pulumi.set(__self__, "order_type", order_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if running_order_id and not isinstance(running_order_id, int):
            raise TypeError("Expected argument 'running_order_id' to be a int")
        pulumi.set(__self__, "running_order_id", running_order_id)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def cursor(self) -> str:
        return pulumi.get(self, "cursor")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobInstanceLists")
    def job_instance_lists(self) -> Sequence['outputs.GetJobSubmissionLogJobInstanceListResult']:
        """
        Job instance list during the specified time period.
        """
        return pulumi.get(self, "job_instance_lists")

    @property
    @pulumi.getter(name="jobRequestId")
    def job_request_id(self) -> str:
        """
        Request ID of starting job.
        """
        return pulumi.get(self, "job_request_id")

    @property
    @pulumi.getter
    def keyword(self) -> Optional[str]:
        return pulumi.get(self, "keyword")

    @property
    @pulumi.getter(name="listOver")
    def list_over(self) -> bool:
        """
        Whether the list is over.
        """
        return pulumi.get(self, "list_over")

    @property
    @pulumi.getter(name="logContentLists")
    def log_content_lists(self) -> Sequence['outputs.GetJobSubmissionLogLogContentListResult']:
        """
        The list of log contents.
        """
        return pulumi.get(self, "log_content_lists")

    @property
    @pulumi.getter(name="logLists")
    def log_lists(self) -> Sequence[str]:
        """
        Log list, deprecated.
        """
        return pulumi.get(self, "log_lists")

    @property
    @pulumi.getter(name="orderType")
    def order_type(self) -> Optional[str]:
        return pulumi.get(self, "order_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="runningOrderId")
    def running_order_id(self) -> Optional[int]:
        """
        The ID of the instance, starting from 1 in the order of startup time.
        """
        return pulumi.get(self, "running_order_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")


class AwaitableGetJobSubmissionLogResult(GetJobSubmissionLogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobSubmissionLogResult(
            cursor=self.cursor,
            end_time=self.end_time,
            id=self.id,
            job_id=self.job_id,
            job_instance_lists=self.job_instance_lists,
            job_request_id=self.job_request_id,
            keyword=self.keyword,
            list_over=self.list_over,
            log_content_lists=self.log_content_lists,
            log_lists=self.log_lists,
            order_type=self.order_type,
            result_output_file=self.result_output_file,
            running_order_id=self.running_order_id,
            start_time=self.start_time)


def get_job_submission_log(cursor: Optional[str] = None,
                           end_time: Optional[int] = None,
                           job_id: Optional[str] = None,
                           keyword: Optional[str] = None,
                           order_type: Optional[str] = None,
                           result_output_file: Optional[str] = None,
                           running_order_id: Optional[int] = None,
                           start_time: Optional[int] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobSubmissionLogResult:
    """
    Use this data source to query detailed information of oceanus job_submission_log

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Oceanus.get_job_submission_log(end_time=1698118169241,
        job_id="cql-314rw6w0",
        order_type="desc",
        running_order_id=0,
        start_time=1696130964345)
    ```
    <!--End PulumiCodeChooser -->


    :param str cursor: Cursor, default empty, first request does not need to pass in.
    :param int end_time: End time, unix timestamp, in milliseconds.
    :param str job_id: Job ID.
    :param str keyword: Keyword, default empty.
    :param str order_type: Sorting method, default asc, asc: ascending, desc: descending.
    :param str result_output_file: Used to save results.
    :param int running_order_id: Job instance ID.
    :param int start_time: Start time, unix timestamp, in milliseconds.
    """
    __args__ = dict()
    __args__['cursor'] = cursor
    __args__['endTime'] = end_time
    __args__['jobId'] = job_id
    __args__['keyword'] = keyword
    __args__['orderType'] = order_type
    __args__['resultOutputFile'] = result_output_file
    __args__['runningOrderId'] = running_order_id
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Oceanus/getJobSubmissionLog:getJobSubmissionLog', __args__, opts=opts, typ=GetJobSubmissionLogResult).value

    return AwaitableGetJobSubmissionLogResult(
        cursor=pulumi.get(__ret__, 'cursor'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        job_instance_lists=pulumi.get(__ret__, 'job_instance_lists'),
        job_request_id=pulumi.get(__ret__, 'job_request_id'),
        keyword=pulumi.get(__ret__, 'keyword'),
        list_over=pulumi.get(__ret__, 'list_over'),
        log_content_lists=pulumi.get(__ret__, 'log_content_lists'),
        log_lists=pulumi.get(__ret__, 'log_lists'),
        order_type=pulumi.get(__ret__, 'order_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        running_order_id=pulumi.get(__ret__, 'running_order_id'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_job_submission_log)
def get_job_submission_log_output(cursor: Optional[pulumi.Input[Optional[str]]] = None,
                                  end_time: Optional[pulumi.Input[int]] = None,
                                  job_id: Optional[pulumi.Input[str]] = None,
                                  keyword: Optional[pulumi.Input[Optional[str]]] = None,
                                  order_type: Optional[pulumi.Input[Optional[str]]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  running_order_id: Optional[pulumi.Input[Optional[int]]] = None,
                                  start_time: Optional[pulumi.Input[int]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetJobSubmissionLogResult]:
    """
    Use this data source to query detailed information of oceanus job_submission_log

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Oceanus.get_job_submission_log(end_time=1698118169241,
        job_id="cql-314rw6w0",
        order_type="desc",
        running_order_id=0,
        start_time=1696130964345)
    ```
    <!--End PulumiCodeChooser -->


    :param str cursor: Cursor, default empty, first request does not need to pass in.
    :param int end_time: End time, unix timestamp, in milliseconds.
    :param str job_id: Job ID.
    :param str keyword: Keyword, default empty.
    :param str order_type: Sorting method, default asc, asc: ascending, desc: descending.
    :param str result_output_file: Used to save results.
    :param int running_order_id: Job instance ID.
    :param int start_time: Start time, unix timestamp, in milliseconds.
    """
    ...
