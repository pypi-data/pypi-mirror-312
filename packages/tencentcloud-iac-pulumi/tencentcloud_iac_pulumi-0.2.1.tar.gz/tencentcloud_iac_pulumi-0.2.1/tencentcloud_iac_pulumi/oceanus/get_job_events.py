# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetJobEventsResult',
    'AwaitableGetJobEventsResult',
    'get_job_events',
    'get_job_events_output',
]

@pulumi.output_type
class GetJobEventsResult:
    """
    A collection of values returned by getJobEvents.
    """
    def __init__(__self__, end_timestamp=None, events=None, id=None, job_id=None, result_output_file=None, running_order_ids=None, start_timestamp=None, types=None, work_space_id=None):
        if end_timestamp and not isinstance(end_timestamp, int):
            raise TypeError("Expected argument 'end_timestamp' to be a int")
        pulumi.set(__self__, "end_timestamp", end_timestamp)
        if events and not isinstance(events, list):
            raise TypeError("Expected argument 'events' to be a list")
        pulumi.set(__self__, "events", events)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if running_order_ids and not isinstance(running_order_ids, list):
            raise TypeError("Expected argument 'running_order_ids' to be a list")
        pulumi.set(__self__, "running_order_ids", running_order_ids)
        if start_timestamp and not isinstance(start_timestamp, int):
            raise TypeError("Expected argument 'start_timestamp' to be a int")
        pulumi.set(__self__, "start_timestamp", start_timestamp)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)
        if work_space_id and not isinstance(work_space_id, str):
            raise TypeError("Expected argument 'work_space_id' to be a str")
        pulumi.set(__self__, "work_space_id", work_space_id)

    @property
    @pulumi.getter(name="endTimestamp")
    def end_timestamp(self) -> int:
        return pulumi.get(self, "end_timestamp")

    @property
    @pulumi.getter
    def events(self) -> Sequence['outputs.GetJobEventsEventResult']:
        """
        List of events within the specified range for this jobNote: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="runningOrderIds")
    def running_order_ids(self) -> Sequence[int]:
        """
        Array of running instance IDs.
        """
        return pulumi.get(self, "running_order_ids")

    @property
    @pulumi.getter(name="startTimestamp")
    def start_timestamp(self) -> int:
        return pulumi.get(self, "start_timestamp")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "types")

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> str:
        return pulumi.get(self, "work_space_id")


class AwaitableGetJobEventsResult(GetJobEventsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobEventsResult(
            end_timestamp=self.end_timestamp,
            events=self.events,
            id=self.id,
            job_id=self.job_id,
            result_output_file=self.result_output_file,
            running_order_ids=self.running_order_ids,
            start_timestamp=self.start_timestamp,
            types=self.types,
            work_space_id=self.work_space_id)


def get_job_events(end_timestamp: Optional[int] = None,
                   job_id: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   start_timestamp: Optional[int] = None,
                   types: Optional[Sequence[str]] = None,
                   work_space_id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobEventsResult:
    """
    Use this data source to query detailed information of oceanus job_events

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Oceanus.get_job_events(end_timestamp=1631232466,
        job_id="cql-6w8eab6f",
        start_timestamp=1630932161,
        types=[
            "1",
            "2",
        ],
        work_space_id="space-6w8eab6f")
    ```
    <!--End PulumiCodeChooser -->


    :param int end_timestamp: Filter condition:End Unix timestamp (seconds).
    :param str job_id: Job ID.
    :param str result_output_file: Used to save results.
    :param int start_timestamp: Filter condition:Start Unix timestamp (seconds).
    :param Sequence[str] types: Event types. If not passed, data of all types will be returned.
    :param str work_space_id: Workspace SerialId.
    """
    __args__ = dict()
    __args__['endTimestamp'] = end_timestamp
    __args__['jobId'] = job_id
    __args__['resultOutputFile'] = result_output_file
    __args__['startTimestamp'] = start_timestamp
    __args__['types'] = types
    __args__['workSpaceId'] = work_space_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Oceanus/getJobEvents:getJobEvents', __args__, opts=opts, typ=GetJobEventsResult).value

    return AwaitableGetJobEventsResult(
        end_timestamp=pulumi.get(__ret__, 'end_timestamp'),
        events=pulumi.get(__ret__, 'events'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        running_order_ids=pulumi.get(__ret__, 'running_order_ids'),
        start_timestamp=pulumi.get(__ret__, 'start_timestamp'),
        types=pulumi.get(__ret__, 'types'),
        work_space_id=pulumi.get(__ret__, 'work_space_id'))


@_utilities.lift_output_func(get_job_events)
def get_job_events_output(end_timestamp: Optional[pulumi.Input[int]] = None,
                          job_id: Optional[pulumi.Input[str]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          start_timestamp: Optional[pulumi.Input[int]] = None,
                          types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                          work_space_id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetJobEventsResult]:
    """
    Use this data source to query detailed information of oceanus job_events

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Oceanus.get_job_events(end_timestamp=1631232466,
        job_id="cql-6w8eab6f",
        start_timestamp=1630932161,
        types=[
            "1",
            "2",
        ],
        work_space_id="space-6w8eab6f")
    ```
    <!--End PulumiCodeChooser -->


    :param int end_timestamp: Filter condition:End Unix timestamp (seconds).
    :param str job_id: Job ID.
    :param str result_output_file: Used to save results.
    :param int start_timestamp: Filter condition:Start Unix timestamp (seconds).
    :param Sequence[str] types: Event types. If not passed, data of all types will be returned.
    :param str work_space_id: Workspace SerialId.
    """
    ...
