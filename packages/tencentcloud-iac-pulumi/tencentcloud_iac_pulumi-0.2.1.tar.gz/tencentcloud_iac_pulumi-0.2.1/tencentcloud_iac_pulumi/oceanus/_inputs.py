# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'JobConfigClazzLevelArgs',
    'JobConfigExpertModeConfigurationArgs',
    'JobConfigExpertModeConfigurationJobGraphArgs',
    'JobConfigExpertModeConfigurationJobGraphEdgeArgs',
    'JobConfigExpertModeConfigurationJobGraphNodeArgs',
    'JobConfigExpertModeConfigurationNodeConfigArgs',
    'JobConfigExpertModeConfigurationNodeConfigConfigurationArgs',
    'JobConfigExpertModeConfigurationSlotSharingGroupArgs',
    'JobConfigExpertModeConfigurationSlotSharingGroupSpecArgs',
    'JobConfigPropertyArgs',
    'JobConfigResourceRefArgs',
    'ResourceConfigResourceLocArgs',
    'ResourceConfigResourceLocParamArgs',
    'ResourceResourceLocArgs',
    'ResourceResourceLocParamArgs',
    'RunJobRunJobDescriptionArgs',
    'StopJobStopJobDescriptionArgs',
    'GetClustersFilterArgs',
    'GetSystemResourceFilterArgs',
    'GetTreeJobsFilterArgs',
    'GetWorkSpacesFilterArgs',
]

@pulumi.input_type
class JobConfigClazzLevelArgs:
    def __init__(__self__, *,
                 clazz: pulumi.Input[str],
                 level: pulumi.Input[str]):
        """
        :param pulumi.Input[str] clazz: Java class full pathNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] level: Log level TRACE, DEBUG, INFO, WARN, ERRORNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "clazz", clazz)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def clazz(self) -> pulumi.Input[str]:
        """
        Java class full pathNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "clazz")

    @clazz.setter
    def clazz(self, value: pulumi.Input[str]):
        pulumi.set(self, "clazz", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[str]:
        """
        Log level TRACE, DEBUG, INFO, WARN, ERRORNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[str]):
        pulumi.set(self, "level", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationArgs:
    def __init__(__self__, *,
                 job_graph: Optional[pulumi.Input['JobConfigExpertModeConfigurationJobGraphArgs']] = None,
                 node_configs: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigArgs']]]] = None,
                 slot_sharing_groups: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupArgs']]]] = None):
        """
        :param pulumi.Input['JobConfigExpertModeConfigurationJobGraphArgs'] job_graph: Job graphNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigArgs']]] node_configs: Node configurationNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupArgs']]] slot_sharing_groups: Slot sharing groupsNote: This field may return null, indicating that no valid value can be obtained.
        """
        if job_graph is not None:
            pulumi.set(__self__, "job_graph", job_graph)
        if node_configs is not None:
            pulumi.set(__self__, "node_configs", node_configs)
        if slot_sharing_groups is not None:
            pulumi.set(__self__, "slot_sharing_groups", slot_sharing_groups)

    @property
    @pulumi.getter(name="jobGraph")
    def job_graph(self) -> Optional[pulumi.Input['JobConfigExpertModeConfigurationJobGraphArgs']]:
        """
        Job graphNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "job_graph")

    @job_graph.setter
    def job_graph(self, value: Optional[pulumi.Input['JobConfigExpertModeConfigurationJobGraphArgs']]):
        pulumi.set(self, "job_graph", value)

    @property
    @pulumi.getter(name="nodeConfigs")
    def node_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigArgs']]]]:
        """
        Node configurationNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "node_configs")

    @node_configs.setter
    def node_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigArgs']]]]):
        pulumi.set(self, "node_configs", value)

    @property
    @pulumi.getter(name="slotSharingGroups")
    def slot_sharing_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupArgs']]]]:
        """
        Slot sharing groupsNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "slot_sharing_groups")

    @slot_sharing_groups.setter
    def slot_sharing_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupArgs']]]]):
        pulumi.set(self, "slot_sharing_groups", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationJobGraphArgs:
    def __init__(__self__, *,
                 edges: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphEdgeArgs']]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphNodeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphEdgeArgs']]] edges: Edge set of the running graphNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphNodeArgs']]] nodes: Point set of the running graphNote: This field may return null, indicating that no valid value can be obtained.
        """
        if edges is not None:
            pulumi.set(__self__, "edges", edges)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)

    @property
    @pulumi.getter
    def edges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphEdgeArgs']]]]:
        """
        Edge set of the running graphNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "edges")

    @edges.setter
    def edges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphEdgeArgs']]]]):
        pulumi.set(self, "edges", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphNodeArgs']]]]:
        """
        Point set of the running graphNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationJobGraphNodeArgs']]]]):
        pulumi.set(self, "nodes", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationJobGraphEdgeArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[int],
                 target: pulumi.Input[int]):
        """
        :param pulumi.Input[int] source: Starting node ID of the edgeNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] target: Target node ID of the edgeNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[int]:
        """
        Starting node ID of the edgeNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[int]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[int]:
        """
        Target node ID of the edgeNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[int]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationJobGraphNodeArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 id: pulumi.Input[int],
                 name: pulumi.Input[str],
                 parallelism: pulumi.Input[int]):
        """
        :param pulumi.Input[str] description: Node descriptionNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] id: Node IDNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] name: Node nameNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] parallelism: Node parallelismNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parallelism", parallelism)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Node descriptionNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        Node IDNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Node nameNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parallelism(self) -> pulumi.Input[int]:
        """
        Node parallelismNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: pulumi.Input[int]):
        pulumi.set(self, "parallelism", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationNodeConfigArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigConfigurationArgs']]]] = None,
                 parallelism: Optional[pulumi.Input[int]] = None,
                 slot_sharing_group: Optional[pulumi.Input[str]] = None,
                 state_ttl: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Node IDNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigConfigurationArgs']]] configurations: Configuration propertiesNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[int] parallelism: Node parallelismNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] slot_sharing_group: Slot sharing groupNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] state_ttl: State TTL configuration of the node, separated by semicolonsNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "id", id)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if slot_sharing_group is not None:
            pulumi.set(__self__, "slot_sharing_group", slot_sharing_group)
        if state_ttl is not None:
            pulumi.set(__self__, "state_ttl", state_ttl)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        Node IDNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigConfigurationArgs']]]]:
        """
        Configuration propertiesNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobConfigExpertModeConfigurationNodeConfigConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[pulumi.Input[int]]:
        """
        Node parallelismNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelism", value)

    @property
    @pulumi.getter(name="slotSharingGroup")
    def slot_sharing_group(self) -> Optional[pulumi.Input[str]]:
        """
        Slot sharing groupNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "slot_sharing_group")

    @slot_sharing_group.setter
    def slot_sharing_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_sharing_group", value)

    @property
    @pulumi.getter(name="stateTtl")
    def state_ttl(self) -> Optional[pulumi.Input[str]]:
        """
        State TTL configuration of the node, separated by semicolonsNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "state_ttl")

    @state_ttl.setter
    def state_ttl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_ttl", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationNodeConfigConfigurationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: System configuration key.
        :param pulumi.Input[str] value: System configuration value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        System configuration key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        System configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationSlotSharingGroupArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 spec: pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupSpecArgs'],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupSpecArgs'] spec: Specification of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] description: Description of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "spec", spec)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupSpecArgs']:
        """
        Specification of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['JobConfigExpertModeConfigurationSlotSharingGroupSpecArgs']):
        pulumi.set(self, "spec", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the SlotSharingGroupNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class JobConfigExpertModeConfigurationSlotSharingGroupSpecArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input[float],
                 heap_memory: pulumi.Input[str],
                 managed_memory: Optional[pulumi.Input[str]] = None,
                 off_heap_memory: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] cpu: Applicable CPUNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] heap_memory: Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] managed_memory: Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
        :param pulumi.Input[str] off_heap_memory: Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "heap_memory", heap_memory)
        if managed_memory is not None:
            pulumi.set(__self__, "managed_memory", managed_memory)
        if off_heap_memory is not None:
            pulumi.set(__self__, "off_heap_memory", off_heap_memory)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[float]:
        """
        Applicable CPUNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[float]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="heapMemory")
    def heap_memory(self) -> pulumi.Input[str]:
        """
        Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "heap_memory")

    @heap_memory.setter
    def heap_memory(self, value: pulumi.Input[str]):
        pulumi.set(self, "heap_memory", value)

    @property
    @pulumi.getter(name="managedMemory")
    def managed_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "managed_memory")

    @managed_memory.setter
    def managed_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_memory", value)

    @property
    @pulumi.getter(name="offHeapMemory")
    def off_heap_memory(self) -> Optional[pulumi.Input[str]]:
        """
        Default is b, supporting units are b, kb, mb, gbNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "off_heap_memory")

    @off_heap_memory.setter
    def off_heap_memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "off_heap_memory", value)


@pulumi.input_type
class JobConfigPropertyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: System configuration key.
        :param pulumi.Input[str] value: System configuration value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        System configuration key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        System configuration value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class JobConfigResourceRefArgs:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[str],
                 type: pulumi.Input[int],
                 version: pulumi.Input[int]):
        """
        :param pulumi.Input[str] resource_id: Resource ID.
        :param pulumi.Input[int] type: Reference resource type, for example, setting the main resource to 1 represents the jar package where the main class is located.
        :param pulumi.Input[int] version: Resource version ID, -1 indicates the latest version.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        Resource ID.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[int]:
        """
        Reference resource type, for example, setting the main resource to 1 represents the jar package where the main class is located.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[int]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[int]:
        """
        Resource version ID, -1 indicates the latest version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[int]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ResourceConfigResourceLocArgs:
    def __init__(__self__, *,
                 param: pulumi.Input['ResourceConfigResourceLocParamArgs'],
                 storage_type: pulumi.Input[int]):
        """
        :param pulumi.Input['ResourceConfigResourceLocParamArgs'] param: Json to describe resource location.
        :param pulumi.Input[int] storage_type: The available storage types for resource location are currently limited to 1:COS.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def param(self) -> pulumi.Input['ResourceConfigResourceLocParamArgs']:
        """
        Json to describe resource location.
        """
        return pulumi.get(self, "param")

    @param.setter
    def param(self, value: pulumi.Input['ResourceConfigResourceLocParamArgs']):
        pulumi.set(self, "param", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[int]:
        """
        The available storage types for resource location are currently limited to 1:COS.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ResourceConfigResourceLocParamArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 path: pulumi.Input[str],
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Resource bucket.
        :param pulumi.Input[str] path: Resource path.
        :param pulumi.Input[str] region: Resource region, if not set, use resource region, note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Resource bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Resource path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Resource region, if not set, use resource region, note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ResourceResourceLocArgs:
    def __init__(__self__, *,
                 param: pulumi.Input['ResourceResourceLocParamArgs'],
                 storage_type: pulumi.Input[int]):
        """
        :param pulumi.Input['ResourceResourceLocParamArgs'] param: Json to describe resource location.
        :param pulumi.Input[int] storage_type: The available storage types for resource location are currently limited to 1:COS.
        """
        pulumi.set(__self__, "param", param)
        pulumi.set(__self__, "storage_type", storage_type)

    @property
    @pulumi.getter
    def param(self) -> pulumi.Input['ResourceResourceLocParamArgs']:
        """
        Json to describe resource location.
        """
        return pulumi.get(self, "param")

    @param.setter
    def param(self, value: pulumi.Input['ResourceResourceLocParamArgs']):
        pulumi.set(self, "param", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Input[int]:
        """
        The available storage types for resource location are currently limited to 1:COS.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_type", value)


@pulumi.input_type
class ResourceResourceLocParamArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 path: pulumi.Input[str],
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Resource bucket.
        :param pulumi.Input[str] path: Resource path.
        :param pulumi.Input[str] region: Resource region, if not set, use resource region, note: this field may return null, indicating that no valid values can be obtained.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "path", path)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Resource bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Resource path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Resource region, if not set, use resource region, note: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class RunJobRunJobDescriptionArgs:
    def __init__(__self__, *,
                 job_id: pulumi.Input[str],
                 run_type: pulumi.Input[int],
                 custom_timestamp: Optional[pulumi.Input[int]] = None,
                 job_config_version: Optional[pulumi.Input[int]] = None,
                 savepoint_id: Optional[pulumi.Input[str]] = None,
                 savepoint_path: Optional[pulumi.Input[str]] = None,
                 start_mode: Optional[pulumi.Input[str]] = None,
                 use_old_system_connector: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] job_id: Job ID.
        :param pulumi.Input[int] run_type: The type of the run. 1 indicates start, and 2 indicates resume.
        :param pulumi.Input[int] custom_timestamp: Custom timestamp.
        :param pulumi.Input[int] job_config_version: A certain version of the current job(Not passed by default as a non-draft job version).
        :param pulumi.Input[str] savepoint_id: Savepoint ID.
        :param pulumi.Input[str] savepoint_path: Savepoint path.
        :param pulumi.Input[str] start_mode: Compatible with the startup parameters of the old SQL type job: specify the start time point of data source consumption (recommended to pass the value)Ensure that the parameter is LATEST, EARLIEST, T+Timestamp (example: T1557394288000).
        :param pulumi.Input[bool] use_old_system_connector: Use the historical version of the system dependency.
        """
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "run_type", run_type)
        if custom_timestamp is not None:
            pulumi.set(__self__, "custom_timestamp", custom_timestamp)
        if job_config_version is not None:
            pulumi.set(__self__, "job_config_version", job_config_version)
        if savepoint_id is not None:
            pulumi.set(__self__, "savepoint_id", savepoint_id)
        if savepoint_path is not None:
            pulumi.set(__self__, "savepoint_path", savepoint_path)
        if start_mode is not None:
            pulumi.set(__self__, "start_mode", start_mode)
        if use_old_system_connector is not None:
            pulumi.set(__self__, "use_old_system_connector", use_old_system_connector)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[str]:
        """
        Job ID.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="runType")
    def run_type(self) -> pulumi.Input[int]:
        """
        The type of the run. 1 indicates start, and 2 indicates resume.
        """
        return pulumi.get(self, "run_type")

    @run_type.setter
    def run_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "run_type", value)

    @property
    @pulumi.getter(name="customTimestamp")
    def custom_timestamp(self) -> Optional[pulumi.Input[int]]:
        """
        Custom timestamp.
        """
        return pulumi.get(self, "custom_timestamp")

    @custom_timestamp.setter
    def custom_timestamp(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_timestamp", value)

    @property
    @pulumi.getter(name="jobConfigVersion")
    def job_config_version(self) -> Optional[pulumi.Input[int]]:
        """
        A certain version of the current job(Not passed by default as a non-draft job version).
        """
        return pulumi.get(self, "job_config_version")

    @job_config_version.setter
    def job_config_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "job_config_version", value)

    @property
    @pulumi.getter(name="savepointId")
    def savepoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        Savepoint ID.
        """
        return pulumi.get(self, "savepoint_id")

    @savepoint_id.setter
    def savepoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "savepoint_id", value)

    @property
    @pulumi.getter(name="savepointPath")
    def savepoint_path(self) -> Optional[pulumi.Input[str]]:
        """
        Savepoint path.
        """
        return pulumi.get(self, "savepoint_path")

    @savepoint_path.setter
    def savepoint_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "savepoint_path", value)

    @property
    @pulumi.getter(name="startMode")
    def start_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Compatible with the startup parameters of the old SQL type job: specify the start time point of data source consumption (recommended to pass the value)Ensure that the parameter is LATEST, EARLIEST, T+Timestamp (example: T1557394288000).
        """
        return pulumi.get(self, "start_mode")

    @start_mode.setter
    def start_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_mode", value)

    @property
    @pulumi.getter(name="useOldSystemConnector")
    def use_old_system_connector(self) -> Optional[pulumi.Input[bool]]:
        """
        Use the historical version of the system dependency.
        """
        return pulumi.get(self, "use_old_system_connector")

    @use_old_system_connector.setter
    def use_old_system_connector(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_old_system_connector", value)


@pulumi.input_type
class StopJobStopJobDescriptionArgs:
    def __init__(__self__, *,
                 job_id: pulumi.Input[str],
                 stop_type: pulumi.Input[int]):
        """
        :param pulumi.Input[str] job_id: Job Id.
        :param pulumi.Input[int] stop_type: Stop type,1 stopped 2 paused.
        """
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "stop_type", stop_type)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[str]:
        """
        Job Id.
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="stopType")
    def stop_type(self) -> pulumi.Input[int]:
        """
        Stop type,1 stopped 2 paused.
        """
        return pulumi.get(self, "stop_type")

    @stop_type.setter
    def stop_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "stop_type", value)


@pulumi.input_type
class GetClustersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: The field to be filtered.
        :param Sequence[str] values: The filtering values of the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The field to be filtered.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        The filtering values of the field.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSystemResourceFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field to be filtered.
        :param Sequence[str] values: Filter values for the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field to be filtered.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values for the field.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetTreeJobsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field to be filtered. Can only be set `Zone` or `JobType` or `JobStatus`.
        :param Sequence[str] values: Filter values for the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field to be filtered. Can only be set `Zone` or `JobType` or `JobStatus`.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values for the field.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetWorkSpacesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Field to be filtered.
        :param Sequence[str] values: Filter values for the field.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Field to be filtered.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Filter values for the field.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


