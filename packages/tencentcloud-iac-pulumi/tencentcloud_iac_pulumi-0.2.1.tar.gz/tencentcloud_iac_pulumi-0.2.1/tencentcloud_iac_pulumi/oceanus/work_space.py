# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WorkSpaceArgs', 'WorkSpace']

@pulumi.input_type
class WorkSpaceArgs:
    def __init__(__self__, *,
                 work_space_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkSpace resource.
        :param pulumi.Input[str] work_space_name: Workspace name.
        :param pulumi.Input[str] description: Workspace description.
        """
        pulumi.set(__self__, "work_space_name", work_space_name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="workSpaceName")
    def work_space_name(self) -> pulumi.Input[str]:
        """
        Workspace name.
        """
        return pulumi.get(self, "work_space_name")

    @work_space_name.setter
    def work_space_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "work_space_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _WorkSpaceState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 creator_uin: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 jobs_count: Optional[pulumi.Input[int]] = None,
                 owner_uin: Optional[pulumi.Input[str]] = None,
                 role_auth_count: Optional[pulumi.Input[int]] = None,
                 serial_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None,
                 work_space_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkSpace resources.
        :param pulumi.Input[int] app_id: User APPID.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] creator_uin: Creator UIN.
        :param pulumi.Input[str] description: Workspace description.
        :param pulumi.Input[int] jobs_count: Number of Jobs.
        :param pulumi.Input[str] owner_uin: Owner UIN.
        :param pulumi.Input[int] role_auth_count: Number of workspace members.
        :param pulumi.Input[str] serial_id: Serial ID.
        :param pulumi.Input[int] status: Workspace status.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] work_space_id: Workspace ID.
        :param pulumi.Input[str] work_space_name: Workspace name.
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if creator_uin is not None:
            pulumi.set(__self__, "creator_uin", creator_uin)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if jobs_count is not None:
            pulumi.set(__self__, "jobs_count", jobs_count)
        if owner_uin is not None:
            pulumi.set(__self__, "owner_uin", owner_uin)
        if role_auth_count is not None:
            pulumi.set(__self__, "role_auth_count", role_auth_count)
        if serial_id is not None:
            pulumi.set(__self__, "serial_id", serial_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if work_space_id is not None:
            pulumi.set(__self__, "work_space_id", work_space_id)
        if work_space_name is not None:
            pulumi.set(__self__, "work_space_name", work_space_name)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[int]]:
        """
        User APPID.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Creator UIN.
        """
        return pulumi.get(self, "creator_uin")

    @creator_uin.setter
    def creator_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creator_uin", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="jobsCount")
    def jobs_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of Jobs.
        """
        return pulumi.get(self, "jobs_count")

    @jobs_count.setter
    def jobs_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "jobs_count", value)

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[pulumi.Input[str]]:
        """
        Owner UIN.
        """
        return pulumi.get(self, "owner_uin")

    @owner_uin.setter
    def owner_uin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner_uin", value)

    @property
    @pulumi.getter(name="roleAuthCount")
    def role_auth_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of workspace members.
        """
        return pulumi.get(self, "role_auth_count")

    @role_auth_count.setter
    def role_auth_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_auth_count", value)

    @property
    @pulumi.getter(name="serialId")
    def serial_id(self) -> Optional[pulumi.Input[str]]:
        """
        Serial ID.
        """
        return pulumi.get(self, "serial_id")

    @serial_id.setter
    def serial_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Workspace status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace ID.
        """
        return pulumi.get(self, "work_space_id")

    @work_space_id.setter
    def work_space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_space_id", value)

    @property
    @pulumi.getter(name="workSpaceName")
    def work_space_name(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace name.
        """
        return pulumi.get(self, "work_space_name")

    @work_space_name.setter
    def work_space_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_space_name", value)


class WorkSpace(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 work_space_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a oceanus work_space

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.WorkSpace("example",
            description="example description.",
            work_space_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        oceanus work_space can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Oceanus/workSpace:WorkSpace example space-0dan3yux#tf_example
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Workspace description.
        :param pulumi.Input[str] work_space_name: Workspace name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkSpaceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a oceanus work_space

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.WorkSpace("example",
            description="example description.",
            work_space_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        oceanus work_space can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Oceanus/workSpace:WorkSpace example space-0dan3yux#tf_example
        ```

        :param str resource_name: The name of the resource.
        :param WorkSpaceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkSpaceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 work_space_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkSpaceArgs.__new__(WorkSpaceArgs)

            __props__.__dict__["description"] = description
            if work_space_name is None and not opts.urn:
                raise TypeError("Missing required property 'work_space_name'")
            __props__.__dict__["work_space_name"] = work_space_name
            __props__.__dict__["app_id"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["creator_uin"] = None
            __props__.__dict__["jobs_count"] = None
            __props__.__dict__["owner_uin"] = None
            __props__.__dict__["role_auth_count"] = None
            __props__.__dict__["serial_id"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["work_space_id"] = None
        super(WorkSpace, __self__).__init__(
            'tencentcloud:Oceanus/workSpace:WorkSpace',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[int]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            creator_uin: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            jobs_count: Optional[pulumi.Input[int]] = None,
            owner_uin: Optional[pulumi.Input[str]] = None,
            role_auth_count: Optional[pulumi.Input[int]] = None,
            serial_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            work_space_id: Optional[pulumi.Input[str]] = None,
            work_space_name: Optional[pulumi.Input[str]] = None) -> 'WorkSpace':
        """
        Get an existing WorkSpace resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] app_id: User APPID.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] creator_uin: Creator UIN.
        :param pulumi.Input[str] description: Workspace description.
        :param pulumi.Input[int] jobs_count: Number of Jobs.
        :param pulumi.Input[str] owner_uin: Owner UIN.
        :param pulumi.Input[int] role_auth_count: Number of workspace members.
        :param pulumi.Input[str] serial_id: Serial ID.
        :param pulumi.Input[int] status: Workspace status.
        :param pulumi.Input[str] update_time: Update time.
        :param pulumi.Input[str] work_space_id: Workspace ID.
        :param pulumi.Input[str] work_space_name: Workspace name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkSpaceState.__new__(_WorkSpaceState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["creator_uin"] = creator_uin
        __props__.__dict__["description"] = description
        __props__.__dict__["jobs_count"] = jobs_count
        __props__.__dict__["owner_uin"] = owner_uin
        __props__.__dict__["role_auth_count"] = role_auth_count
        __props__.__dict__["serial_id"] = serial_id
        __props__.__dict__["status"] = status
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["work_space_id"] = work_space_id
        __props__.__dict__["work_space_name"] = work_space_name
        return WorkSpace(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[int]:
        """
        User APPID.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="creatorUin")
    def creator_uin(self) -> pulumi.Output[str]:
        """
        Creator UIN.
        """
        return pulumi.get(self, "creator_uin")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Workspace description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="jobsCount")
    def jobs_count(self) -> pulumi.Output[int]:
        """
        Number of Jobs.
        """
        return pulumi.get(self, "jobs_count")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> pulumi.Output[str]:
        """
        Owner UIN.
        """
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="roleAuthCount")
    def role_auth_count(self) -> pulumi.Output[int]:
        """
        Number of workspace members.
        """
        return pulumi.get(self, "role_auth_count")

    @property
    @pulumi.getter(name="serialId")
    def serial_id(self) -> pulumi.Output[str]:
        """
        Serial ID.
        """
        return pulumi.get(self, "serial_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Workspace status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> pulumi.Output[str]:
        """
        Workspace ID.
        """
        return pulumi.get(self, "work_space_id")

    @property
    @pulumi.getter(name="workSpaceName")
    def work_space_name(self) -> pulumi.Output[str]:
        """
        Workspace name.
        """
        return pulumi.get(self, "work_space_name")

