# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FolderArgs', 'Folder']

@pulumi.input_type
class FolderArgs:
    def __init__(__self__, *,
                 folder_name: pulumi.Input[str],
                 parent_id: pulumi.Input[str],
                 work_space_id: pulumi.Input[str],
                 folder_type: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Folder resource.
        :param pulumi.Input[str] folder_name: New file name.
        :param pulumi.Input[str] parent_id: Parent folder id.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        :param pulumi.Input[int] folder_type: Folder type, 0: job folder, 1: resource folder. Default is 0.
        """
        pulumi.set(__self__, "folder_name", folder_name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "work_space_id", work_space_id)
        if folder_type is not None:
            pulumi.set(__self__, "folder_type", folder_type)

    @property
    @pulumi.getter(name="folderName")
    def folder_name(self) -> pulumi.Input[str]:
        """
        New file name.
        """
        return pulumi.get(self, "folder_name")

    @folder_name.setter
    def folder_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "folder_name", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Input[str]:
        """
        Parent folder id.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> pulumi.Input[str]:
        """
        Workspace SerialId.
        """
        return pulumi.get(self, "work_space_id")

    @work_space_id.setter
    def work_space_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "work_space_id", value)

    @property
    @pulumi.getter(name="folderType")
    def folder_type(self) -> Optional[pulumi.Input[int]]:
        """
        Folder type, 0: job folder, 1: resource folder. Default is 0.
        """
        return pulumi.get(self, "folder_type")

    @folder_type.setter
    def folder_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "folder_type", value)


@pulumi.input_type
class _FolderState:
    def __init__(__self__, *,
                 folder_name: Optional[pulumi.Input[str]] = None,
                 folder_type: Optional[pulumi.Input[int]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Folder resources.
        :param pulumi.Input[str] folder_name: New file name.
        :param pulumi.Input[int] folder_type: Folder type, 0: job folder, 1: resource folder. Default is 0.
        :param pulumi.Input[str] parent_id: Parent folder id.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        """
        if folder_name is not None:
            pulumi.set(__self__, "folder_name", folder_name)
        if folder_type is not None:
            pulumi.set(__self__, "folder_type", folder_type)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if work_space_id is not None:
            pulumi.set(__self__, "work_space_id", work_space_id)

    @property
    @pulumi.getter(name="folderName")
    def folder_name(self) -> Optional[pulumi.Input[str]]:
        """
        New file name.
        """
        return pulumi.get(self, "folder_name")

    @folder_name.setter
    def folder_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_name", value)

    @property
    @pulumi.getter(name="folderType")
    def folder_type(self) -> Optional[pulumi.Input[int]]:
        """
        Folder type, 0: job folder, 1: resource folder. Default is 0.
        """
        return pulumi.get(self, "folder_type")

    @folder_type.setter
    def folder_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "folder_type", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        """
        Parent folder id.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace SerialId.
        """
        return pulumi.get(self, "work_space_id")

    @work_space_id.setter
    def work_space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_space_id", value)


class Folder(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 folder_name: Optional[pulumi.Input[str]] = None,
                 folder_type: Optional[pulumi.Input[int]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a oceanus folder

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.Folder("example",
            folder_name="tf_example",
            folder_type=0,
            parent_id="folder-lfqkt11s",
            work_space_id="space-125703345ap-shenzhen-fsi")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        oceanus folder can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Oceanus/folder:Folder example space-125703345ap-shenzhen-fsi#folder-f40fq79g#0
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] folder_name: New file name.
        :param pulumi.Input[int] folder_type: Folder type, 0: job folder, 1: resource folder. Default is 0.
        :param pulumi.Input[str] parent_id: Parent folder id.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FolderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a oceanus folder

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.oceanus.Folder("example",
            folder_name="tf_example",
            folder_type=0,
            parent_id="folder-lfqkt11s",
            work_space_id="space-125703345ap-shenzhen-fsi")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        oceanus folder can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Oceanus/folder:Folder example space-125703345ap-shenzhen-fsi#folder-f40fq79g#0
        ```

        :param str resource_name: The name of the resource.
        :param FolderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FolderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 folder_name: Optional[pulumi.Input[str]] = None,
                 folder_type: Optional[pulumi.Input[int]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 work_space_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FolderArgs.__new__(FolderArgs)

            if folder_name is None and not opts.urn:
                raise TypeError("Missing required property 'folder_name'")
            __props__.__dict__["folder_name"] = folder_name
            __props__.__dict__["folder_type"] = folder_type
            if parent_id is None and not opts.urn:
                raise TypeError("Missing required property 'parent_id'")
            __props__.__dict__["parent_id"] = parent_id
            if work_space_id is None and not opts.urn:
                raise TypeError("Missing required property 'work_space_id'")
            __props__.__dict__["work_space_id"] = work_space_id
        super(Folder, __self__).__init__(
            'tencentcloud:Oceanus/folder:Folder',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            folder_name: Optional[pulumi.Input[str]] = None,
            folder_type: Optional[pulumi.Input[int]] = None,
            parent_id: Optional[pulumi.Input[str]] = None,
            work_space_id: Optional[pulumi.Input[str]] = None) -> 'Folder':
        """
        Get an existing Folder resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] folder_name: New file name.
        :param pulumi.Input[int] folder_type: Folder type, 0: job folder, 1: resource folder. Default is 0.
        :param pulumi.Input[str] parent_id: Parent folder id.
        :param pulumi.Input[str] work_space_id: Workspace SerialId.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FolderState.__new__(_FolderState)

        __props__.__dict__["folder_name"] = folder_name
        __props__.__dict__["folder_type"] = folder_type
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["work_space_id"] = work_space_id
        return Folder(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="folderName")
    def folder_name(self) -> pulumi.Output[str]:
        """
        New file name.
        """
        return pulumi.get(self, "folder_name")

    @property
    @pulumi.getter(name="folderType")
    def folder_type(self) -> pulumi.Output[Optional[int]]:
        """
        Folder type, 0: job folder, 1: resource folder. Default is 0.
        """
        return pulumi.get(self, "folder_type")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[str]:
        """
        Parent folder id.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="workSpaceId")
    def work_space_id(self) -> pulumi.Output[str]:
        """
        Workspace SerialId.
        """
        return pulumi.get(self, "work_space_id")

