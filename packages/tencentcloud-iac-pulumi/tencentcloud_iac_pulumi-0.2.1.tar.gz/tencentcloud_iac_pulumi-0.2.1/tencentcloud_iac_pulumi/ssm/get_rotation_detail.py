# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRotationDetailResult',
    'AwaitableGetRotationDetailResult',
    'get_rotation_detail',
    'get_rotation_detail_output',
]

@pulumi.output_type
class GetRotationDetailResult:
    """
    A collection of values returned by getRotationDetail.
    """
    def __init__(__self__, enable_rotation=None, frequency=None, id=None, latest_rotate_time=None, next_rotate_begin_time=None, result_output_file=None, secret_name=None):
        if enable_rotation and not isinstance(enable_rotation, bool):
            raise TypeError("Expected argument 'enable_rotation' to be a bool")
        pulumi.set(__self__, "enable_rotation", enable_rotation)
        if frequency and not isinstance(frequency, int):
            raise TypeError("Expected argument 'frequency' to be a int")
        pulumi.set(__self__, "frequency", frequency)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if latest_rotate_time and not isinstance(latest_rotate_time, str):
            raise TypeError("Expected argument 'latest_rotate_time' to be a str")
        pulumi.set(__self__, "latest_rotate_time", latest_rotate_time)
        if next_rotate_begin_time and not isinstance(next_rotate_begin_time, str):
            raise TypeError("Expected argument 'next_rotate_begin_time' to be a str")
        pulumi.set(__self__, "next_rotate_begin_time", next_rotate_begin_time)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if secret_name and not isinstance(secret_name, str):
            raise TypeError("Expected argument 'secret_name' to be a str")
        pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="enableRotation")
    def enable_rotation(self) -> bool:
        """
        Whether to allow rotation.
        """
        return pulumi.get(self, "enable_rotation")

    @property
    @pulumi.getter
    def frequency(self) -> int:
        """
        The rotation frequency, in days, defaults to 1 day.
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="latestRotateTime")
    def latest_rotate_time(self) -> str:
        """
        Time of last rotation.
        """
        return pulumi.get(self, "latest_rotate_time")

    @property
    @pulumi.getter(name="nextRotateBeginTime")
    def next_rotate_begin_time(self) -> str:
        """
        The time to start the next rotation.
        """
        return pulumi.get(self, "next_rotate_begin_time")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        return pulumi.get(self, "secret_name")


class AwaitableGetRotationDetailResult(GetRotationDetailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRotationDetailResult(
            enable_rotation=self.enable_rotation,
            frequency=self.frequency,
            id=self.id,
            latest_rotate_time=self.latest_rotate_time,
            next_rotate_begin_time=self.next_rotate_begin_time,
            result_output_file=self.result_output_file,
            secret_name=self.secret_name)


def get_rotation_detail(result_output_file: Optional[str] = None,
                        secret_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRotationDetailResult:
    """
    Use this data source to query detailed information of ssm rotation_detail

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Ssm.get_rotation_detail(secret_name="tf_example")
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    :param str secret_name: Secret name.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['secretName'] = secret_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ssm/getRotationDetail:getRotationDetail', __args__, opts=opts, typ=GetRotationDetailResult).value

    return AwaitableGetRotationDetailResult(
        enable_rotation=pulumi.get(__ret__, 'enable_rotation'),
        frequency=pulumi.get(__ret__, 'frequency'),
        id=pulumi.get(__ret__, 'id'),
        latest_rotate_time=pulumi.get(__ret__, 'latest_rotate_time'),
        next_rotate_begin_time=pulumi.get(__ret__, 'next_rotate_begin_time'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        secret_name=pulumi.get(__ret__, 'secret_name'))


@_utilities.lift_output_func(get_rotation_detail)
def get_rotation_detail_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               secret_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRotationDetailResult]:
    """
    Use this data source to query detailed information of ssm rotation_detail

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Ssm.get_rotation_detail(secret_name="tf_example")
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    :param str secret_name: Secret name.
    """
    ...
