# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetServiceStatusResult',
    'AwaitableGetServiceStatusResult',
    'get_service_status',
    'get_service_status_output',
]

@pulumi.output_type
class GetServiceStatusResult:
    """
    A collection of values returned by getServiceStatus.
    """
    def __init__(__self__, access_key_escrow_enabled=None, id=None, invalid_type=None, result_output_file=None, service_enabled=None):
        if access_key_escrow_enabled and not isinstance(access_key_escrow_enabled, bool):
            raise TypeError("Expected argument 'access_key_escrow_enabled' to be a bool")
        pulumi.set(__self__, "access_key_escrow_enabled", access_key_escrow_enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if invalid_type and not isinstance(invalid_type, int):
            raise TypeError("Expected argument 'invalid_type' to be a int")
        pulumi.set(__self__, "invalid_type", invalid_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if service_enabled and not isinstance(service_enabled, bool):
            raise TypeError("Expected argument 'service_enabled' to be a bool")
        pulumi.set(__self__, "service_enabled", service_enabled)

    @property
    @pulumi.getter(name="accessKeyEscrowEnabled")
    def access_key_escrow_enabled(self) -> bool:
        """
        True means that the user can already use the key safe hosting function, false means that the user cannot use the key safe hosting function temporarily.
        """
        return pulumi.get(self, "access_key_escrow_enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="invalidType")
    def invalid_type(self) -> int:
        """
        Service unavailability type: 0-Not purchased, 1-Normal, 2-Service suspended due to arrears, 3-Resource release.
        """
        return pulumi.get(self, "invalid_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="serviceEnabled")
    def service_enabled(self) -> bool:
        """
        True means the service has been activated, false means the service has not been activated yet.
        """
        return pulumi.get(self, "service_enabled")


class AwaitableGetServiceStatusResult(GetServiceStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceStatusResult(
            access_key_escrow_enabled=self.access_key_escrow_enabled,
            id=self.id,
            invalid_type=self.invalid_type,
            result_output_file=self.result_output_file,
            service_enabled=self.service_enabled)


def get_service_status(result_output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceStatusResult:
    """
    Use this data source to query detailed information of ssm service_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Ssm.get_service_status()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Ssm/getServiceStatus:getServiceStatus', __args__, opts=opts, typ=GetServiceStatusResult).value

    return AwaitableGetServiceStatusResult(
        access_key_escrow_enabled=pulumi.get(__ret__, 'access_key_escrow_enabled'),
        id=pulumi.get(__ret__, 'id'),
        invalid_type=pulumi.get(__ret__, 'invalid_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        service_enabled=pulumi.get(__ret__, 'service_enabled'))


@_utilities.lift_output_func(get_service_status)
def get_service_status_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceStatusResult]:
    """
    Use this data source to query detailed information of ssm service_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Ssm.get_service_status()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    ...
