# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProductSecretArgs', 'ProductSecret']

@pulumi.input_type
class ProductSecretArgs:
    def __init__(__self__, *,
                 domains: pulumi.Input[Sequence[pulumi.Input[str]]],
                 instance_id: pulumi.Input[str],
                 privileges_lists: pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]],
                 product_name: pulumi.Input[str],
                 secret_name: pulumi.Input[str],
                 user_name_prefix: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enable_rotation: Optional[pulumi.Input[bool]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 rotation_begin_time: Optional[pulumi.Input[str]] = None,
                 rotation_frequency: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a ProductSecret resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name of the account in the form of IP. You can enter `%`.
        :param pulumi.Input[str] instance_id: Tencent Cloud service instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]] privileges_lists: List of permissions that need to be granted when the credential is bound to a Tencent Cloud service.
        :param pulumi.Input[str] product_name: Name of the Tencent Cloud service bound to the credential, such as `Mysql`, `Tdsql-mysql`, `Tdsql_C_Mysql`. you can use dataSource `ssm_get_products` to query supported products.
        :param pulumi.Input[str] secret_name: Credential name, which must be unique in the same region. It can contain 128 bytes of letters, digits, hyphens, and underscores and must begin with a letter or digit.
        :param pulumi.Input[str] user_name_prefix: Prefix of the user account name, which is specified by you and can contain up to 8 characters.Supported character sets include:Digits: [0, 9].Lowercase letters: [a, z].Uppercase letters: [A, Z].Special symbols: underscore.The prefix must begin with a letter.
        :param pulumi.Input[str] description: Description, which is used to describe the purpose in detail and can contain up to 2,048 bytes.
        :param pulumi.Input[bool] enable_rotation: Specifies whether to enable rotation, when secret status is `Disabled`, rotation will be disabled. `True` - enable, `False` - do not enable. If this parameter is not specified, `False` will be used by default.
        :param pulumi.Input[str] kms_key_id: Specifies the KMS CMK that encrypts the credential. If this parameter is left empty, the CMK created by Secrets Manager by default will be used for encryption.You can also specify a custom KMS CMK created in the same region for encryption.
        :param pulumi.Input[str] rotation_begin_time: User-Defined rotation start time in the format of 2006-01-02 15:04:05.When `EnableRotation` is `True`, this parameter is required.
        :param pulumi.Input[int] rotation_frequency: Rotation frequency in days. Default value: 1 day.
        :param pulumi.Input[str] status: Enable or Disable Secret. Valid values is `Enabled` or `Disabled`. Default is `Enabled`.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of secret.
        """
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "privileges_lists", privileges_lists)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "secret_name", secret_name)
        pulumi.set(__self__, "user_name_prefix", user_name_prefix)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_rotation is not None:
            pulumi.set(__self__, "enable_rotation", enable_rotation)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if rotation_begin_time is not None:
            pulumi.set(__self__, "rotation_begin_time", rotation_begin_time)
        if rotation_frequency is not None:
            pulumi.set(__self__, "rotation_frequency", rotation_frequency)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Domain name of the account in the form of IP. You can enter `%`.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Tencent Cloud service instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="privilegesLists")
    def privileges_lists(self) -> pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]]:
        """
        List of permissions that need to be granted when the credential is bound to a Tencent Cloud service.
        """
        return pulumi.get(self, "privileges_lists")

    @privileges_lists.setter
    def privileges_lists(self, value: pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]]):
        pulumi.set(self, "privileges_lists", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Input[str]:
        """
        Name of the Tencent Cloud service bound to the credential, such as `Mysql`, `Tdsql-mysql`, `Tdsql_C_Mysql`. you can use dataSource `ssm_get_products` to query supported products.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        Credential name, which must be unique in the same region. It can contain 128 bytes of letters, digits, hyphens, and underscores and must begin with a letter or digit.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="userNamePrefix")
    def user_name_prefix(self) -> pulumi.Input[str]:
        """
        Prefix of the user account name, which is specified by you and can contain up to 8 characters.Supported character sets include:Digits: [0, 9].Lowercase letters: [a, z].Uppercase letters: [A, Z].Special symbols: underscore.The prefix must begin with a letter.
        """
        return pulumi.get(self, "user_name_prefix")

    @user_name_prefix.setter
    def user_name_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name_prefix", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description, which is used to describe the purpose in detail and can contain up to 2,048 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableRotation")
    def enable_rotation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable rotation, when secret status is `Disabled`, rotation will be disabled. `True` - enable, `False` - do not enable. If this parameter is not specified, `False` will be used by default.
        """
        return pulumi.get(self, "enable_rotation")

    @enable_rotation.setter
    def enable_rotation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rotation", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the KMS CMK that encrypts the credential. If this parameter is left empty, the CMK created by Secrets Manager by default will be used for encryption.You can also specify a custom KMS CMK created in the same region for encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="rotationBeginTime")
    def rotation_begin_time(self) -> Optional[pulumi.Input[str]]:
        """
        User-Defined rotation start time in the format of 2006-01-02 15:04:05.When `EnableRotation` is `True`, this parameter is required.
        """
        return pulumi.get(self, "rotation_begin_time")

    @rotation_begin_time.setter
    def rotation_begin_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_begin_time", value)

    @property
    @pulumi.getter(name="rotationFrequency")
    def rotation_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Rotation frequency in days. Default value: 1 day.
        """
        return pulumi.get(self, "rotation_frequency")

    @rotation_frequency.setter
    def rotation_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotation_frequency", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or Disable Secret. Valid values is `Enabled` or `Disabled`. Default is `Enabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of secret.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ProductSecretState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_rotation: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 privileges_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 rotation_begin_time: Optional[pulumi.Input[str]] = None,
                 rotation_frequency: Optional[pulumi.Input[int]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 secret_type: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_name_prefix: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProductSecret resources.
        :param pulumi.Input[int] create_time: Credential creation time in UNIX timestamp format.
        :param pulumi.Input[str] description: Description, which is used to describe the purpose in detail and can contain up to 2,048 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name of the account in the form of IP. You can enter `%`.
        :param pulumi.Input[bool] enable_rotation: Specifies whether to enable rotation, when secret status is `Disabled`, rotation will be disabled. `True` - enable, `False` - do not enable. If this parameter is not specified, `False` will be used by default.
        :param pulumi.Input[str] instance_id: Tencent Cloud service instance ID.
        :param pulumi.Input[str] kms_key_id: Specifies the KMS CMK that encrypts the credential. If this parameter is left empty, the CMK created by Secrets Manager by default will be used for encryption.You can also specify a custom KMS CMK created in the same region for encryption.
        :param pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]] privileges_lists: List of permissions that need to be granted when the credential is bound to a Tencent Cloud service.
        :param pulumi.Input[str] product_name: Name of the Tencent Cloud service bound to the credential, such as `Mysql`, `Tdsql-mysql`, `Tdsql_C_Mysql`. you can use dataSource `ssm_get_products` to query supported products.
        :param pulumi.Input[str] rotation_begin_time: User-Defined rotation start time in the format of 2006-01-02 15:04:05.When `EnableRotation` is `True`, this parameter is required.
        :param pulumi.Input[int] rotation_frequency: Rotation frequency in days. Default value: 1 day.
        :param pulumi.Input[str] secret_name: Credential name, which must be unique in the same region. It can contain 128 bytes of letters, digits, hyphens, and underscores and must begin with a letter or digit.
        :param pulumi.Input[int] secret_type: `0`: user-defined secret. `1`: Tencent Cloud services secret. `2`: SSH key secret. `3`: Tencent Cloud API key secret. Note: this field may return `null`, indicating that no valid values can be obtained.
        :param pulumi.Input[str] status: Enable or Disable Secret. Valid values is `Enabled` or `Disabled`. Default is `Enabled`.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of secret.
        :param pulumi.Input[str] user_name_prefix: Prefix of the user account name, which is specified by you and can contain up to 8 characters.Supported character sets include:Digits: [0, 9].Lowercase letters: [a, z].Uppercase letters: [A, Z].Special symbols: underscore.The prefix must begin with a letter.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enable_rotation is not None:
            pulumi.set(__self__, "enable_rotation", enable_rotation)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if privileges_lists is not None:
            pulumi.set(__self__, "privileges_lists", privileges_lists)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if rotation_begin_time is not None:
            pulumi.set(__self__, "rotation_begin_time", rotation_begin_time)
        if rotation_frequency is not None:
            pulumi.set(__self__, "rotation_frequency", rotation_frequency)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)
        if secret_type is not None:
            pulumi.set(__self__, "secret_type", secret_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_name_prefix is not None:
            pulumi.set(__self__, "user_name_prefix", user_name_prefix)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[int]]:
        """
        Credential creation time in UNIX timestamp format.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description, which is used to describe the purpose in detail and can contain up to 2,048 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domain name of the account in the form of IP. You can enter `%`.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="enableRotation")
    def enable_rotation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to enable rotation, when secret status is `Disabled`, rotation will be disabled. `True` - enable, `False` - do not enable. If this parameter is not specified, `False` will be used by default.
        """
        return pulumi.get(self, "enable_rotation")

    @enable_rotation.setter
    def enable_rotation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rotation", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent Cloud service instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the KMS CMK that encrypts the credential. If this parameter is left empty, the CMK created by Secrets Manager by default will be used for encryption.You can also specify a custom KMS CMK created in the same region for encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="privilegesLists")
    def privileges_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]]]:
        """
        List of permissions that need to be granted when the credential is bound to a Tencent Cloud service.
        """
        return pulumi.get(self, "privileges_lists")

    @privileges_lists.setter
    def privileges_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductSecretPrivilegesListArgs']]]]):
        pulumi.set(self, "privileges_lists", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Tencent Cloud service bound to the credential, such as `Mysql`, `Tdsql-mysql`, `Tdsql_C_Mysql`. you can use dataSource `ssm_get_products` to query supported products.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="rotationBeginTime")
    def rotation_begin_time(self) -> Optional[pulumi.Input[str]]:
        """
        User-Defined rotation start time in the format of 2006-01-02 15:04:05.When `EnableRotation` is `True`, this parameter is required.
        """
        return pulumi.get(self, "rotation_begin_time")

    @rotation_begin_time.setter
    def rotation_begin_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_begin_time", value)

    @property
    @pulumi.getter(name="rotationFrequency")
    def rotation_frequency(self) -> Optional[pulumi.Input[int]]:
        """
        Rotation frequency in days. Default value: 1 day.
        """
        return pulumi.get(self, "rotation_frequency")

    @rotation_frequency.setter
    def rotation_frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotation_frequency", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        Credential name, which must be unique in the same region. It can contain 128 bytes of letters, digits, hyphens, and underscores and must begin with a letter or digit.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> Optional[pulumi.Input[int]]:
        """
        `0`: user-defined secret. `1`: Tencent Cloud services secret. `2`: SSH key secret. `3`: Tencent Cloud API key secret. Note: this field may return `null`, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "secret_type")

    @secret_type.setter
    def secret_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secret_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Enable or Disable Secret. Valid values is `Enabled` or `Disabled`. Default is `Enabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tags of secret.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userNamePrefix")
    def user_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of the user account name, which is specified by you and can contain up to 8 characters.Supported character sets include:Digits: [0, 9].Lowercase letters: [a, z].Uppercase letters: [A, Z].Special symbols: underscore.The prefix must begin with a letter.
        """
        return pulumi.get(self, "user_name_prefix")

    @user_name_prefix.setter
    def user_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name_prefix", value)


class ProductSecret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_rotation: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 privileges_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProductSecretPrivilegesListArgs']]]]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 rotation_begin_time: Optional[pulumi.Input[str]] = None,
                 rotation_frequency: Optional[pulumi.Input[int]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_name_prefix: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ssm product_secret

        ## Example Usage

        ### Ssm secret for mysql

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "createBy": "terraform",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_key = tencentcloud.kms.Key("exampleKey",
            alias="tf-example-kms-key",
            description="example of kms key",
            key_rotation_enabled=False,
            is_enabled=True,
            tags={
                "createdBy": "terraform",
            })
        example_product_secret = tencentcloud.ssm.ProductSecret("exampleProductSecret",
            secret_name="tf-example",
            user_name_prefix="prefix",
            product_name="Mysql",
            instance_id=example_instance.id,
            domains=["10.0.0.0"],
            privileges_lists=[tencentcloud.ssm.ProductSecretPrivilegesListArgs(
                privilege_name="GlobalPrivileges",
                privileges=["ALTER ROUTINE"],
            )],
            description="for ssm product test",
            kms_key_id=example_key.id,
            status="Enabled",
            enable_rotation=True,
            rotation_begin_time="2023-08-05 20:54:33",
            rotation_frequency=30,
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Ssm secret for tdsql-c-mysql

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssm.ProductSecret("example",
            secret_name="tf-tdsql-c-example",
            user_name_prefix="prefix",
            product_name="Tdsql_C_Mysql",
            instance_id="cynosdbmysql-xxxxxx",
            domains=["%"],
            privileges_lists=[
                tencentcloud.ssm.ProductSecretPrivilegesListArgs(
                    privilege_name="GlobalPrivileges",
                    privileges=[
                        "ALTER",
                        "CREATE",
                        "DELETE",
                    ],
                ),
                tencentcloud.ssm.ProductSecretPrivilegesListArgs(
                    privilege_name="DatabasePrivileges",
                    database="test",
                    privileges=[
                        "ALTER",
                        "CREATE",
                        "DELETE",
                        "SELECT",
                    ],
                ),
            ],
            description="test tdsql-c",
            kms_key_id=None,
            status="Enabled",
            enable_rotation=False,
            rotation_begin_time="2023-08-05 20:54:33",
            rotation_frequency=30,
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description, which is used to describe the purpose in detail and can contain up to 2,048 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name of the account in the form of IP. You can enter `%`.
        :param pulumi.Input[bool] enable_rotation: Specifies whether to enable rotation, when secret status is `Disabled`, rotation will be disabled. `True` - enable, `False` - do not enable. If this parameter is not specified, `False` will be used by default.
        :param pulumi.Input[str] instance_id: Tencent Cloud service instance ID.
        :param pulumi.Input[str] kms_key_id: Specifies the KMS CMK that encrypts the credential. If this parameter is left empty, the CMK created by Secrets Manager by default will be used for encryption.You can also specify a custom KMS CMK created in the same region for encryption.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProductSecretPrivilegesListArgs']]]] privileges_lists: List of permissions that need to be granted when the credential is bound to a Tencent Cloud service.
        :param pulumi.Input[str] product_name: Name of the Tencent Cloud service bound to the credential, such as `Mysql`, `Tdsql-mysql`, `Tdsql_C_Mysql`. you can use dataSource `ssm_get_products` to query supported products.
        :param pulumi.Input[str] rotation_begin_time: User-Defined rotation start time in the format of 2006-01-02 15:04:05.When `EnableRotation` is `True`, this parameter is required.
        :param pulumi.Input[int] rotation_frequency: Rotation frequency in days. Default value: 1 day.
        :param pulumi.Input[str] secret_name: Credential name, which must be unique in the same region. It can contain 128 bytes of letters, digits, hyphens, and underscores and must begin with a letter or digit.
        :param pulumi.Input[str] status: Enable or Disable Secret. Valid values is `Enabled` or `Disabled`. Default is `Enabled`.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of secret.
        :param pulumi.Input[str] user_name_prefix: Prefix of the user account name, which is specified by you and can contain up to 8 characters.Supported character sets include:Digits: [0, 9].Lowercase letters: [a, z].Uppercase letters: [A, Z].Special symbols: underscore.The prefix must begin with a letter.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProductSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ssm product_secret

        ## Example Usage

        ### Ssm secret for mysql

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="desc.")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "createBy": "terraform",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_key = tencentcloud.kms.Key("exampleKey",
            alias="tf-example-kms-key",
            description="example of kms key",
            key_rotation_enabled=False,
            is_enabled=True,
            tags={
                "createdBy": "terraform",
            })
        example_product_secret = tencentcloud.ssm.ProductSecret("exampleProductSecret",
            secret_name="tf-example",
            user_name_prefix="prefix",
            product_name="Mysql",
            instance_id=example_instance.id,
            domains=["10.0.0.0"],
            privileges_lists=[tencentcloud.ssm.ProductSecretPrivilegesListArgs(
                privilege_name="GlobalPrivileges",
                privileges=["ALTER ROUTINE"],
            )],
            description="for ssm product test",
            kms_key_id=example_key.id,
            status="Enabled",
            enable_rotation=True,
            rotation_begin_time="2023-08-05 20:54:33",
            rotation_frequency=30,
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Ssm secret for tdsql-c-mysql

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssm.ProductSecret("example",
            secret_name="tf-tdsql-c-example",
            user_name_prefix="prefix",
            product_name="Tdsql_C_Mysql",
            instance_id="cynosdbmysql-xxxxxx",
            domains=["%"],
            privileges_lists=[
                tencentcloud.ssm.ProductSecretPrivilegesListArgs(
                    privilege_name="GlobalPrivileges",
                    privileges=[
                        "ALTER",
                        "CREATE",
                        "DELETE",
                    ],
                ),
                tencentcloud.ssm.ProductSecretPrivilegesListArgs(
                    privilege_name="DatabasePrivileges",
                    database="test",
                    privileges=[
                        "ALTER",
                        "CREATE",
                        "DELETE",
                        "SELECT",
                    ],
                ),
            ],
            description="test tdsql-c",
            kms_key_id=None,
            status="Enabled",
            enable_rotation=False,
            rotation_begin_time="2023-08-05 20:54:33",
            rotation_frequency=30,
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ProductSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProductSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_rotation: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 privileges_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProductSecretPrivilegesListArgs']]]]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 rotation_begin_time: Optional[pulumi.Input[str]] = None,
                 rotation_frequency: Optional[pulumi.Input[int]] = None,
                 secret_name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_name_prefix: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProductSecretArgs.__new__(ProductSecretArgs)

            __props__.__dict__["description"] = description
            if domains is None and not opts.urn:
                raise TypeError("Missing required property 'domains'")
            __props__.__dict__["domains"] = domains
            __props__.__dict__["enable_rotation"] = enable_rotation
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["kms_key_id"] = kms_key_id
            if privileges_lists is None and not opts.urn:
                raise TypeError("Missing required property 'privileges_lists'")
            __props__.__dict__["privileges_lists"] = privileges_lists
            if product_name is None and not opts.urn:
                raise TypeError("Missing required property 'product_name'")
            __props__.__dict__["product_name"] = product_name
            __props__.__dict__["rotation_begin_time"] = rotation_begin_time
            __props__.__dict__["rotation_frequency"] = rotation_frequency
            if secret_name is None and not opts.urn:
                raise TypeError("Missing required property 'secret_name'")
            __props__.__dict__["secret_name"] = secret_name
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            if user_name_prefix is None and not opts.urn:
                raise TypeError("Missing required property 'user_name_prefix'")
            __props__.__dict__["user_name_prefix"] = user_name_prefix
            __props__.__dict__["create_time"] = None
            __props__.__dict__["secret_type"] = None
        super(ProductSecret, __self__).__init__(
            'tencentcloud:Ssm/productSecret:ProductSecret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            enable_rotation: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            kms_key_id: Optional[pulumi.Input[str]] = None,
            privileges_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProductSecretPrivilegesListArgs']]]]] = None,
            product_name: Optional[pulumi.Input[str]] = None,
            rotation_begin_time: Optional[pulumi.Input[str]] = None,
            rotation_frequency: Optional[pulumi.Input[int]] = None,
            secret_name: Optional[pulumi.Input[str]] = None,
            secret_type: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            user_name_prefix: Optional[pulumi.Input[str]] = None) -> 'ProductSecret':
        """
        Get an existing ProductSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] create_time: Credential creation time in UNIX timestamp format.
        :param pulumi.Input[str] description: Description, which is used to describe the purpose in detail and can contain up to 2,048 bytes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: Domain name of the account in the form of IP. You can enter `%`.
        :param pulumi.Input[bool] enable_rotation: Specifies whether to enable rotation, when secret status is `Disabled`, rotation will be disabled. `True` - enable, `False` - do not enable. If this parameter is not specified, `False` will be used by default.
        :param pulumi.Input[str] instance_id: Tencent Cloud service instance ID.
        :param pulumi.Input[str] kms_key_id: Specifies the KMS CMK that encrypts the credential. If this parameter is left empty, the CMK created by Secrets Manager by default will be used for encryption.You can also specify a custom KMS CMK created in the same region for encryption.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProductSecretPrivilegesListArgs']]]] privileges_lists: List of permissions that need to be granted when the credential is bound to a Tencent Cloud service.
        :param pulumi.Input[str] product_name: Name of the Tencent Cloud service bound to the credential, such as `Mysql`, `Tdsql-mysql`, `Tdsql_C_Mysql`. you can use dataSource `ssm_get_products` to query supported products.
        :param pulumi.Input[str] rotation_begin_time: User-Defined rotation start time in the format of 2006-01-02 15:04:05.When `EnableRotation` is `True`, this parameter is required.
        :param pulumi.Input[int] rotation_frequency: Rotation frequency in days. Default value: 1 day.
        :param pulumi.Input[str] secret_name: Credential name, which must be unique in the same region. It can contain 128 bytes of letters, digits, hyphens, and underscores and must begin with a letter or digit.
        :param pulumi.Input[int] secret_type: `0`: user-defined secret. `1`: Tencent Cloud services secret. `2`: SSH key secret. `3`: Tencent Cloud API key secret. Note: this field may return `null`, indicating that no valid values can be obtained.
        :param pulumi.Input[str] status: Enable or Disable Secret. Valid values is `Enabled` or `Disabled`. Default is `Enabled`.
        :param pulumi.Input[Mapping[str, Any]] tags: Tags of secret.
        :param pulumi.Input[str] user_name_prefix: Prefix of the user account name, which is specified by you and can contain up to 8 characters.Supported character sets include:Digits: [0, 9].Lowercase letters: [a, z].Uppercase letters: [A, Z].Special symbols: underscore.The prefix must begin with a letter.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProductSecretState.__new__(_ProductSecretState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["domains"] = domains
        __props__.__dict__["enable_rotation"] = enable_rotation
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["kms_key_id"] = kms_key_id
        __props__.__dict__["privileges_lists"] = privileges_lists
        __props__.__dict__["product_name"] = product_name
        __props__.__dict__["rotation_begin_time"] = rotation_begin_time
        __props__.__dict__["rotation_frequency"] = rotation_frequency
        __props__.__dict__["secret_name"] = secret_name
        __props__.__dict__["secret_type"] = secret_type
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_name_prefix"] = user_name_prefix
        return ProductSecret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[int]:
        """
        Credential creation time in UNIX timestamp format.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description, which is used to describe the purpose in detail and can contain up to 2,048 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence[str]]:
        """
        Domain name of the account in the form of IP. You can enter `%`.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="enableRotation")
    def enable_rotation(self) -> pulumi.Output[bool]:
        """
        Specifies whether to enable rotation, when secret status is `Disabled`, rotation will be disabled. `True` - enable, `False` - do not enable. If this parameter is not specified, `False` will be used by default.
        """
        return pulumi.get(self, "enable_rotation")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Tencent Cloud service instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the KMS CMK that encrypts the credential. If this parameter is left empty, the CMK created by Secrets Manager by default will be used for encryption.You can also specify a custom KMS CMK created in the same region for encryption.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="privilegesLists")
    def privileges_lists(self) -> pulumi.Output[Sequence['outputs.ProductSecretPrivilegesList']]:
        """
        List of permissions that need to be granted when the credential is bound to a Tencent Cloud service.
        """
        return pulumi.get(self, "privileges_lists")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Output[str]:
        """
        Name of the Tencent Cloud service bound to the credential, such as `Mysql`, `Tdsql-mysql`, `Tdsql_C_Mysql`. you can use dataSource `ssm_get_products` to query supported products.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="rotationBeginTime")
    def rotation_begin_time(self) -> pulumi.Output[str]:
        """
        User-Defined rotation start time in the format of 2006-01-02 15:04:05.When `EnableRotation` is `True`, this parameter is required.
        """
        return pulumi.get(self, "rotation_begin_time")

    @property
    @pulumi.getter(name="rotationFrequency")
    def rotation_frequency(self) -> pulumi.Output[int]:
        """
        Rotation frequency in days. Default value: 1 day.
        """
        return pulumi.get(self, "rotation_frequency")

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Output[str]:
        """
        Credential name, which must be unique in the same region. It can contain 128 bytes of letters, digits, hyphens, and underscores and must begin with a letter or digit.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="secretType")
    def secret_type(self) -> pulumi.Output[int]:
        """
        `0`: user-defined secret. `1`: Tencent Cloud services secret. `2`: SSH key secret. `3`: Tencent Cloud API key secret. Note: this field may return `null`, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "secret_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Enable or Disable Secret. Valid values is `Enabled` or `Disabled`. Default is `Enabled`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tags of secret.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userNamePrefix")
    def user_name_prefix(self) -> pulumi.Output[str]:
        """
        Prefix of the user account name, which is specified by you and can contain up to 8 characters.Supported character sets include:Digits: [0, 9].Lowercase letters: [a, z].Uppercase letters: [A, Z].Special symbols: underscore.The prefix must begin with a letter.
        """
        return pulumi.get(self, "user_name_prefix")

