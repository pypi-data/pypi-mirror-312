# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CustomLineArgs', 'CustomLine']

@pulumi.input_type
class CustomLineArgs:
    def __init__(__self__, *,
                 area: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CustomLine resource.
        :param pulumi.Input[str] area: The IP segment of custom line, split with `-`.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] name: The Name of custom line.
        """
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Input[str]:
        """
        The IP segment of custom line, split with `-`.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: pulumi.Input[str]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of custom line.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CustomLineState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomLine resources.
        :param pulumi.Input[str] area: The IP segment of custom line, split with `-`.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] name: The Name of custom line.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        The IP segment of custom line, split with `-`.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Name of custom line.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class CustomLine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        custom_line = tencentcloud.dnspod.CustomLine("customLine",
            area="6.6.6.1-6.6.6.2",
            domain="dnspod.com")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dnspod custom_line can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dnspod/customLine:CustomLine custom_line domain#name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: The IP segment of custom line, split with `-`.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] name: The Name of custom line.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomLineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        custom_line = tencentcloud.dnspod.CustomLine("customLine",
            area="6.6.6.1-6.6.6.2",
            domain="dnspod.com")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dnspod custom_line can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dnspod/customLine:CustomLine custom_line domain#name
        ```

        :param str resource_name: The name of the resource.
        :param CustomLineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomLineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomLineArgs.__new__(CustomLineArgs)

            if area is None and not opts.urn:
                raise TypeError("Missing required property 'area'")
            __props__.__dict__["area"] = area
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["name"] = name
        super(CustomLine, __self__).__init__(
            'tencentcloud:Dnspod/customLine:CustomLine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'CustomLine':
        """
        Get an existing CustomLine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: The IP segment of custom line, split with `-`.
        :param pulumi.Input[str] domain: Domain.
        :param pulumi.Input[str] name: The Name of custom line.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomLineState.__new__(_CustomLineState)

        __props__.__dict__["area"] = area
        __props__.__dict__["domain"] = domain
        __props__.__dict__["name"] = name
        return CustomLine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[str]:
        """
        The IP segment of custom line, split with `-`.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Name of custom line.
        """
        return pulumi.get(self, "name")

