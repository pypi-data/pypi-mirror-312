# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RecordArgs', 'Record']

@pulumi.input_type
class RecordArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 record_line: pulumi.Input[str],
                 record_type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 mx: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Record resource.
        :param pulumi.Input[str] domain: The Domain.
        :param pulumi.Input[str] record_line: The record line.
        :param pulumi.Input[str] record_type: The record type.
        :param pulumi.Input[str] value: The record value.
        :param pulumi.Input[int] mx: MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
        :param pulumi.Input[str] remark: The Remark of record.
        :param pulumi.Input[str] status: Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
        :param pulumi.Input[str] sub_domain: The host records, default value is `@`.
        :param pulumi.Input[int] ttl: TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
        :param pulumi.Input[int] weight: Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "record_line", record_line)
        pulumi.set(__self__, "record_type", record_type)
        pulumi.set(__self__, "value", value)
        if mx is not None:
            pulumi.set(__self__, "mx", mx)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sub_domain is not None:
            pulumi.set(__self__, "sub_domain", sub_domain)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        The Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="recordLine")
    def record_line(self) -> pulumi.Input[str]:
        """
        The record line.
        """
        return pulumi.get(self, "record_line")

    @record_line.setter
    def record_line(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_line", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Input[str]:
        """
        The record type.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The record value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def mx(self) -> Optional[pulumi.Input[int]]:
        """
        MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
        """
        return pulumi.get(self, "mx")

    @mx.setter
    def mx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mx", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The Remark of record.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The host records, default value is `@`.
        """
        return pulumi.get(self, "sub_domain")

    @sub_domain.setter
    def sub_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_domain", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class _RecordState:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 monitor_status: Optional[pulumi.Input[str]] = None,
                 mx: Optional[pulumi.Input[int]] = None,
                 record_line: Optional[pulumi.Input[str]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Record resources.
        :param pulumi.Input[str] domain: The Domain.
        :param pulumi.Input[str] monitor_status: The monitoring status of the record.
        :param pulumi.Input[int] mx: MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
        :param pulumi.Input[str] record_line: The record line.
        :param pulumi.Input[str] record_type: The record type.
        :param pulumi.Input[str] remark: The Remark of record.
        :param pulumi.Input[str] status: Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
        :param pulumi.Input[str] sub_domain: The host records, default value is `@`.
        :param pulumi.Input[int] ttl: TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
        :param pulumi.Input[str] value: The record value.
        :param pulumi.Input[int] weight: Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if monitor_status is not None:
            pulumi.set(__self__, "monitor_status", monitor_status)
        if mx is not None:
            pulumi.set(__self__, "mx", mx)
        if record_line is not None:
            pulumi.set(__self__, "record_line", record_line)
        if record_type is not None:
            pulumi.set(__self__, "record_type", record_type)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sub_domain is not None:
            pulumi.set(__self__, "sub_domain", sub_domain)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="monitorStatus")
    def monitor_status(self) -> Optional[pulumi.Input[str]]:
        """
        The monitoring status of the record.
        """
        return pulumi.get(self, "monitor_status")

    @monitor_status.setter
    def monitor_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_status", value)

    @property
    @pulumi.getter
    def mx(self) -> Optional[pulumi.Input[int]]:
        """
        MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
        """
        return pulumi.get(self, "mx")

    @mx.setter
    def mx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mx", value)

    @property
    @pulumi.getter(name="recordLine")
    def record_line(self) -> Optional[pulumi.Input[str]]:
        """
        The record line.
        """
        return pulumi.get(self, "record_line")

    @record_line.setter
    def record_line(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_line", value)

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[pulumi.Input[str]]:
        """
        The record type.
        """
        return pulumi.get(self, "record_type")

    @record_type.setter
    def record_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_type", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The Remark of record.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The host records, default value is `@`.
        """
        return pulumi.get(self, "sub_domain")

    @sub_domain.setter
    def sub_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_domain", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The record value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        """
        Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


class Record(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 mx: Optional[pulumi.Input[int]] = None,
                 record_line: Optional[pulumi.Input[str]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provide a resource to create a DnsPod record.

        > **NOTE:** Versions before v1.81.43 (including v1.81.43) do not support modifying remark or modifying remark has bug.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        demo = tencentcloud.dnspod.Record("demo",
            domain="mikatong.com",
            record_line="默认",
            record_type="A",
            sub_domain="demo",
            value="1.2.3.9")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        DnsPod Domain record can be imported using the Domain#RecordId, e.g.

        ```sh
        $ pulumi import tencentcloud:Dnspod/record:Record demo arunma.com#1194109872
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: The Domain.
        :param pulumi.Input[int] mx: MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
        :param pulumi.Input[str] record_line: The record line.
        :param pulumi.Input[str] record_type: The record type.
        :param pulumi.Input[str] remark: The Remark of record.
        :param pulumi.Input[str] status: Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
        :param pulumi.Input[str] sub_domain: The host records, default value is `@`.
        :param pulumi.Input[int] ttl: TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
        :param pulumi.Input[str] value: The record value.
        :param pulumi.Input[int] weight: Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a DnsPod record.

        > **NOTE:** Versions before v1.81.43 (including v1.81.43) do not support modifying remark or modifying remark has bug.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        demo = tencentcloud.dnspod.Record("demo",
            domain="mikatong.com",
            record_line="默认",
            record_type="A",
            sub_domain="demo",
            value="1.2.3.9")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        DnsPod Domain record can be imported using the Domain#RecordId, e.g.

        ```sh
        $ pulumi import tencentcloud:Dnspod/record:Record demo arunma.com#1194109872
        ```

        :param str resource_name: The name of the resource.
        :param RecordArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 mx: Optional[pulumi.Input[int]] = None,
                 record_line: Optional[pulumi.Input[str]] = None,
                 record_type: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordArgs.__new__(RecordArgs)

            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["mx"] = mx
            if record_line is None and not opts.urn:
                raise TypeError("Missing required property 'record_line'")
            __props__.__dict__["record_line"] = record_line
            if record_type is None and not opts.urn:
                raise TypeError("Missing required property 'record_type'")
            __props__.__dict__["record_type"] = record_type
            __props__.__dict__["remark"] = remark
            __props__.__dict__["status"] = status
            __props__.__dict__["sub_domain"] = sub_domain
            __props__.__dict__["ttl"] = ttl
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
            __props__.__dict__["weight"] = weight
            __props__.__dict__["monitor_status"] = None
        super(Record, __self__).__init__(
            'tencentcloud:Dnspod/record:Record',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain: Optional[pulumi.Input[str]] = None,
            monitor_status: Optional[pulumi.Input[str]] = None,
            mx: Optional[pulumi.Input[int]] = None,
            record_line: Optional[pulumi.Input[str]] = None,
            record_type: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            sub_domain: Optional[pulumi.Input[str]] = None,
            ttl: Optional[pulumi.Input[int]] = None,
            value: Optional[pulumi.Input[str]] = None,
            weight: Optional[pulumi.Input[int]] = None) -> 'Record':
        """
        Get an existing Record resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: The Domain.
        :param pulumi.Input[str] monitor_status: The monitoring status of the record.
        :param pulumi.Input[int] mx: MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
        :param pulumi.Input[str] record_line: The record line.
        :param pulumi.Input[str] record_type: The record type.
        :param pulumi.Input[str] remark: The Remark of record.
        :param pulumi.Input[str] status: Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
        :param pulumi.Input[str] sub_domain: The host records, default value is `@`.
        :param pulumi.Input[int] ttl: TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
        :param pulumi.Input[str] value: The record value.
        :param pulumi.Input[int] weight: Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecordState.__new__(_RecordState)

        __props__.__dict__["domain"] = domain
        __props__.__dict__["monitor_status"] = monitor_status
        __props__.__dict__["mx"] = mx
        __props__.__dict__["record_line"] = record_line
        __props__.__dict__["record_type"] = record_type
        __props__.__dict__["remark"] = remark
        __props__.__dict__["status"] = status
        __props__.__dict__["sub_domain"] = sub_domain
        __props__.__dict__["ttl"] = ttl
        __props__.__dict__["value"] = value
        __props__.__dict__["weight"] = weight
        return Record(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="monitorStatus")
    def monitor_status(self) -> pulumi.Output[str]:
        """
        The monitoring status of the record.
        """
        return pulumi.get(self, "monitor_status")

    @property
    @pulumi.getter
    def mx(self) -> pulumi.Output[Optional[int]]:
        """
        MX priority, valid when the record type is MX, range 1-20. Note: must set when record type equal MX.
        """
        return pulumi.get(self, "mx")

    @property
    @pulumi.getter(name="recordLine")
    def record_line(self) -> pulumi.Output[str]:
        """
        The record line.
        """
        return pulumi.get(self, "record_line")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> pulumi.Output[str]:
        """
        The record type.
        """
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        The Remark of record.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        Records the initial state, with values ranging from ENABLE and DISABLE. The default is ENABLE, and if DISABLE is passed in, resolution will not take effect and the limits of load balancing will not be verified.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> pulumi.Output[Optional[str]]:
        """
        The host records, default value is `@`.
        """
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[int]]:
        """
        TTL, the range is 1-604800, and the minimum value of different levels of domain names is different. Default is 600.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The record value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[int]]:
        """
        Weight information. An integer from 0 to 100. Only enterprise VIP domain names are available, 0 means off, does not pass this parameter, means that the weight information is not set. Default is 0.
        """
        return pulumi.get(self, "weight")

