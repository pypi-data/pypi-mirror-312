# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRecordListResult',
    'AwaitableGetRecordListResult',
    'get_record_list',
    'get_record_list_output',
]

@pulumi.output_type
class GetRecordListResult:
    """
    A collection of values returned by getRecordList.
    """
    def __init__(__self__, domain=None, domain_id=None, group_ids=None, id=None, is_exact_sub_domain=None, keyword=None, mx_begin=None, mx_end=None, project_id=None, record_count_infos=None, record_lines=None, record_lists=None, record_statuses=None, record_types=None, record_value=None, remark=None, result_output_file=None, sort_field=None, sort_type=None, sub_domain=None, ttl_begin=None, ttl_end=None, updated_at_begin=None, updated_at_end=None, weight_begin=None, weight_end=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if domain_id and not isinstance(domain_id, int):
            raise TypeError("Expected argument 'domain_id' to be a int")
        pulumi.set(__self__, "domain_id", domain_id)
        if group_ids and not isinstance(group_ids, list):
            raise TypeError("Expected argument 'group_ids' to be a list")
        pulumi.set(__self__, "group_ids", group_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_exact_sub_domain and not isinstance(is_exact_sub_domain, bool):
            raise TypeError("Expected argument 'is_exact_sub_domain' to be a bool")
        pulumi.set(__self__, "is_exact_sub_domain", is_exact_sub_domain)
        if keyword and not isinstance(keyword, str):
            raise TypeError("Expected argument 'keyword' to be a str")
        pulumi.set(__self__, "keyword", keyword)
        if mx_begin and not isinstance(mx_begin, int):
            raise TypeError("Expected argument 'mx_begin' to be a int")
        pulumi.set(__self__, "mx_begin", mx_begin)
        if mx_end and not isinstance(mx_end, int):
            raise TypeError("Expected argument 'mx_end' to be a int")
        pulumi.set(__self__, "mx_end", mx_end)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if record_count_infos and not isinstance(record_count_infos, list):
            raise TypeError("Expected argument 'record_count_infos' to be a list")
        pulumi.set(__self__, "record_count_infos", record_count_infos)
        if record_lines and not isinstance(record_lines, list):
            raise TypeError("Expected argument 'record_lines' to be a list")
        pulumi.set(__self__, "record_lines", record_lines)
        if record_lists and not isinstance(record_lists, list):
            raise TypeError("Expected argument 'record_lists' to be a list")
        pulumi.set(__self__, "record_lists", record_lists)
        if record_statuses and not isinstance(record_statuses, list):
            raise TypeError("Expected argument 'record_statuses' to be a list")
        pulumi.set(__self__, "record_statuses", record_statuses)
        if record_types and not isinstance(record_types, list):
            raise TypeError("Expected argument 'record_types' to be a list")
        pulumi.set(__self__, "record_types", record_types)
        if record_value and not isinstance(record_value, str):
            raise TypeError("Expected argument 'record_value' to be a str")
        pulumi.set(__self__, "record_value", record_value)
        if remark and not isinstance(remark, str):
            raise TypeError("Expected argument 'remark' to be a str")
        pulumi.set(__self__, "remark", remark)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        pulumi.set(__self__, "sort_field", sort_field)
        if sort_type and not isinstance(sort_type, str):
            raise TypeError("Expected argument 'sort_type' to be a str")
        pulumi.set(__self__, "sort_type", sort_type)
        if sub_domain and not isinstance(sub_domain, str):
            raise TypeError("Expected argument 'sub_domain' to be a str")
        pulumi.set(__self__, "sub_domain", sub_domain)
        if ttl_begin and not isinstance(ttl_begin, int):
            raise TypeError("Expected argument 'ttl_begin' to be a int")
        pulumi.set(__self__, "ttl_begin", ttl_begin)
        if ttl_end and not isinstance(ttl_end, int):
            raise TypeError("Expected argument 'ttl_end' to be a int")
        pulumi.set(__self__, "ttl_end", ttl_end)
        if updated_at_begin and not isinstance(updated_at_begin, str):
            raise TypeError("Expected argument 'updated_at_begin' to be a str")
        pulumi.set(__self__, "updated_at_begin", updated_at_begin)
        if updated_at_end and not isinstance(updated_at_end, str):
            raise TypeError("Expected argument 'updated_at_end' to be a str")
        pulumi.set(__self__, "updated_at_end", updated_at_end)
        if weight_begin and not isinstance(weight_begin, int):
            raise TypeError("Expected argument 'weight_begin' to be a int")
        pulumi.set(__self__, "weight_begin", weight_begin)
        if weight_end and not isinstance(weight_end, int):
            raise TypeError("Expected argument 'weight_end' to be a int")
        pulumi.set(__self__, "weight_end", weight_end)

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[int]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isExactSubDomain")
    def is_exact_sub_domain(self) -> Optional[bool]:
        return pulumi.get(self, "is_exact_sub_domain")

    @property
    @pulumi.getter
    def keyword(self) -> Optional[str]:
        return pulumi.get(self, "keyword")

    @property
    @pulumi.getter(name="mxBegin")
    def mx_begin(self) -> Optional[int]:
        return pulumi.get(self, "mx_begin")

    @property
    @pulumi.getter(name="mxEnd")
    def mx_end(self) -> Optional[int]:
        return pulumi.get(self, "mx_end")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="recordCountInfos")
    def record_count_infos(self) -> Sequence['outputs.GetRecordListRecordCountInfoResult']:
        """
        Statistics of the number of records.
        """
        return pulumi.get(self, "record_count_infos")

    @property
    @pulumi.getter(name="recordLines")
    def record_lines(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "record_lines")

    @property
    @pulumi.getter(name="recordLists")
    def record_lists(self) -> Sequence['outputs.GetRecordListRecordListResult']:
        """
        List of records.
        """
        return pulumi.get(self, "record_lists")

    @property
    @pulumi.getter(name="recordStatuses")
    def record_statuses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "record_statuses")

    @property
    @pulumi.getter(name="recordTypes")
    def record_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "record_types")

    @property
    @pulumi.getter(name="recordValue")
    def record_value(self) -> Optional[str]:
        return pulumi.get(self, "record_value")

    @property
    @pulumi.getter
    def remark(self) -> Optional[str]:
        """
        Record remark description.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sortField")
    def sort_field(self) -> Optional[str]:
        return pulumi.get(self, "sort_field")

    @property
    @pulumi.getter(name="sortType")
    def sort_type(self) -> Optional[str]:
        return pulumi.get(self, "sort_type")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> Optional[str]:
        return pulumi.get(self, "sub_domain")

    @property
    @pulumi.getter(name="ttlBegin")
    def ttl_begin(self) -> Optional[int]:
        return pulumi.get(self, "ttl_begin")

    @property
    @pulumi.getter(name="ttlEnd")
    def ttl_end(self) -> Optional[int]:
        return pulumi.get(self, "ttl_end")

    @property
    @pulumi.getter(name="updatedAtBegin")
    def updated_at_begin(self) -> Optional[str]:
        return pulumi.get(self, "updated_at_begin")

    @property
    @pulumi.getter(name="updatedAtEnd")
    def updated_at_end(self) -> Optional[str]:
        return pulumi.get(self, "updated_at_end")

    @property
    @pulumi.getter(name="weightBegin")
    def weight_begin(self) -> Optional[int]:
        return pulumi.get(self, "weight_begin")

    @property
    @pulumi.getter(name="weightEnd")
    def weight_end(self) -> Optional[int]:
        return pulumi.get(self, "weight_end")


class AwaitableGetRecordListResult(GetRecordListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRecordListResult(
            domain=self.domain,
            domain_id=self.domain_id,
            group_ids=self.group_ids,
            id=self.id,
            is_exact_sub_domain=self.is_exact_sub_domain,
            keyword=self.keyword,
            mx_begin=self.mx_begin,
            mx_end=self.mx_end,
            project_id=self.project_id,
            record_count_infos=self.record_count_infos,
            record_lines=self.record_lines,
            record_lists=self.record_lists,
            record_statuses=self.record_statuses,
            record_types=self.record_types,
            record_value=self.record_value,
            remark=self.remark,
            result_output_file=self.result_output_file,
            sort_field=self.sort_field,
            sort_type=self.sort_type,
            sub_domain=self.sub_domain,
            ttl_begin=self.ttl_begin,
            ttl_end=self.ttl_end,
            updated_at_begin=self.updated_at_begin,
            updated_at_end=self.updated_at_end,
            weight_begin=self.weight_begin,
            weight_end=self.weight_end)


def get_record_list(domain: Optional[str] = None,
                    domain_id: Optional[int] = None,
                    group_ids: Optional[Sequence[int]] = None,
                    is_exact_sub_domain: Optional[bool] = None,
                    keyword: Optional[str] = None,
                    mx_begin: Optional[int] = None,
                    mx_end: Optional[int] = None,
                    project_id: Optional[int] = None,
                    record_lines: Optional[Sequence[str]] = None,
                    record_statuses: Optional[Sequence[str]] = None,
                    record_types: Optional[Sequence[str]] = None,
                    record_value: Optional[str] = None,
                    remark: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    sort_field: Optional[str] = None,
                    sort_type: Optional[str] = None,
                    sub_domain: Optional[str] = None,
                    ttl_begin: Optional[int] = None,
                    ttl_end: Optional[int] = None,
                    updated_at_begin: Optional[str] = None,
                    updated_at_end: Optional[str] = None,
                    weight_begin: Optional[int] = None,
                    weight_end: Optional[int] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRecordListResult:
    """
    Use this data source to query detailed information of dnspod record_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    record_list = tencentcloud.Dnspod.get_record_list(domain="iac-tf.cloud",
        group_ids=[],
        is_exact_sub_domain=True,
        keyword="",
        mx_begin=0,
        mx_end=10,
        record_statuses=["ENABLE"],
        record_types=[
            "A",
            "NS",
            "CNAME",
            "NS",
            "AAAA",
        ],
        record_value="bicycle.dnspod.net",
        remark="",
        sort_field="UPDATED_ON",
        sort_type="DESC",
        ttl_begin=1,
        ttl_end=864000,
        updated_at_begin="2021-09-07",
        updated_at_end="2023-12-07",
        weight_begin=0,
        weight_end=100)
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: The domain to which the resolution record belongs.
    :param int domain_id: The domain ID to which the resolution record belongs. If DomainId is provided, the system will ignore the Domain parameter. You can find all Domain and DomainId through the DescribeDomainList interface.
    :param Sequence[int] group_ids: When retrieving resolution records under certain groups, pass this group ID. You can obtain the GroupId field through the DescribeRecordGroupList interface.
    :param bool is_exact_sub_domain: Whether to perform an exact search based on the SubDomain parameter.
    :param str keyword: Search for resolution records by keyword, currently supporting searching host headers and record values.
    :param int mx_begin: The starting point of the resolution record MX priority query interval.
    :param int mx_end: The endpoint of the resolution record MX priority query interval.
    :param int project_id: Project ID.
    :param Sequence[str] record_lines: Retrieve resolution records for certain line IDs. You can view the allowed line information for the current domain through the DescribeRecordLineList interface.
    :param Sequence[str] record_statuses: Get the resolution record based on the resolution record status. The possible values are ENABLE and DISABLE. ENABLE: Normal DISABLE: Paused.
    :param Sequence[str] record_types: Retrieve certain types of resolution records, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, SPF, etc.
    :param str record_value: Get the resolution record based on the resolution record value.
    :param str remark: Get the resolution record based on the resolution record remark.
    :param str result_output_file: Used to save results.
    :param str sort_field: Sorting field, supporting NAME, LINE, TYPE, VALUE, WEIGHT, MX, TTL, UPDATED_ON fields. NAME: The host header of the resolution record LINE: The resolution record line TYPE: The resolution record type VALUE: The resolution record value WEIGHT: The weight MX: MX priority TTL: The resolution record cache time UPDATED_ON: The resolution record update time.
    :param str sort_type: Sorting method, ascending: ASC, descending: DESC. The default value is ASC.
    :param str sub_domain: Retrieve resolution records based on the host header of the resolution record. Fuzzy matching is used by default. You can set the IsExactSubdomain parameter to true for precise searching.
    :param int ttl_begin: The starting point of the resolution record TTL query interval.
    :param int ttl_end: The endpoint of the resolution record TTL query interval.
    :param str updated_at_begin: The starting point of the resolution record update time query interval.
    :param str updated_at_end: The endpoint of the resolution record update time query interval.
    :param int weight_begin: The starting point of the resolution record weight query interval.
    :param int weight_end: The endpoint of the resolution record weight query interval.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['domainId'] = domain_id
    __args__['groupIds'] = group_ids
    __args__['isExactSubDomain'] = is_exact_sub_domain
    __args__['keyword'] = keyword
    __args__['mxBegin'] = mx_begin
    __args__['mxEnd'] = mx_end
    __args__['projectId'] = project_id
    __args__['recordLines'] = record_lines
    __args__['recordStatuses'] = record_statuses
    __args__['recordTypes'] = record_types
    __args__['recordValue'] = record_value
    __args__['remark'] = remark
    __args__['resultOutputFile'] = result_output_file
    __args__['sortField'] = sort_field
    __args__['sortType'] = sort_type
    __args__['subDomain'] = sub_domain
    __args__['ttlBegin'] = ttl_begin
    __args__['ttlEnd'] = ttl_end
    __args__['updatedAtBegin'] = updated_at_begin
    __args__['updatedAtEnd'] = updated_at_end
    __args__['weightBegin'] = weight_begin
    __args__['weightEnd'] = weight_end
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dnspod/getRecordList:getRecordList', __args__, opts=opts, typ=GetRecordListResult).value

    return AwaitableGetRecordListResult(
        domain=pulumi.get(__ret__, 'domain'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        group_ids=pulumi.get(__ret__, 'group_ids'),
        id=pulumi.get(__ret__, 'id'),
        is_exact_sub_domain=pulumi.get(__ret__, 'is_exact_sub_domain'),
        keyword=pulumi.get(__ret__, 'keyword'),
        mx_begin=pulumi.get(__ret__, 'mx_begin'),
        mx_end=pulumi.get(__ret__, 'mx_end'),
        project_id=pulumi.get(__ret__, 'project_id'),
        record_count_infos=pulumi.get(__ret__, 'record_count_infos'),
        record_lines=pulumi.get(__ret__, 'record_lines'),
        record_lists=pulumi.get(__ret__, 'record_lists'),
        record_statuses=pulumi.get(__ret__, 'record_statuses'),
        record_types=pulumi.get(__ret__, 'record_types'),
        record_value=pulumi.get(__ret__, 'record_value'),
        remark=pulumi.get(__ret__, 'remark'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sort_field=pulumi.get(__ret__, 'sort_field'),
        sort_type=pulumi.get(__ret__, 'sort_type'),
        sub_domain=pulumi.get(__ret__, 'sub_domain'),
        ttl_begin=pulumi.get(__ret__, 'ttl_begin'),
        ttl_end=pulumi.get(__ret__, 'ttl_end'),
        updated_at_begin=pulumi.get(__ret__, 'updated_at_begin'),
        updated_at_end=pulumi.get(__ret__, 'updated_at_end'),
        weight_begin=pulumi.get(__ret__, 'weight_begin'),
        weight_end=pulumi.get(__ret__, 'weight_end'))


@_utilities.lift_output_func(get_record_list)
def get_record_list_output(domain: Optional[pulumi.Input[str]] = None,
                           domain_id: Optional[pulumi.Input[Optional[int]]] = None,
                           group_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                           is_exact_sub_domain: Optional[pulumi.Input[Optional[bool]]] = None,
                           keyword: Optional[pulumi.Input[Optional[str]]] = None,
                           mx_begin: Optional[pulumi.Input[Optional[int]]] = None,
                           mx_end: Optional[pulumi.Input[Optional[int]]] = None,
                           project_id: Optional[pulumi.Input[Optional[int]]] = None,
                           record_lines: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           record_statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           record_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                           record_value: Optional[pulumi.Input[Optional[str]]] = None,
                           remark: Optional[pulumi.Input[Optional[str]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           sort_field: Optional[pulumi.Input[Optional[str]]] = None,
                           sort_type: Optional[pulumi.Input[Optional[str]]] = None,
                           sub_domain: Optional[pulumi.Input[Optional[str]]] = None,
                           ttl_begin: Optional[pulumi.Input[Optional[int]]] = None,
                           ttl_end: Optional[pulumi.Input[Optional[int]]] = None,
                           updated_at_begin: Optional[pulumi.Input[Optional[str]]] = None,
                           updated_at_end: Optional[pulumi.Input[Optional[str]]] = None,
                           weight_begin: Optional[pulumi.Input[Optional[int]]] = None,
                           weight_end: Optional[pulumi.Input[Optional[int]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRecordListResult]:
    """
    Use this data source to query detailed information of dnspod record_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    record_list = tencentcloud.Dnspod.get_record_list(domain="iac-tf.cloud",
        group_ids=[],
        is_exact_sub_domain=True,
        keyword="",
        mx_begin=0,
        mx_end=10,
        record_statuses=["ENABLE"],
        record_types=[
            "A",
            "NS",
            "CNAME",
            "NS",
            "AAAA",
        ],
        record_value="bicycle.dnspod.net",
        remark="",
        sort_field="UPDATED_ON",
        sort_type="DESC",
        ttl_begin=1,
        ttl_end=864000,
        updated_at_begin="2021-09-07",
        updated_at_end="2023-12-07",
        weight_begin=0,
        weight_end=100)
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: The domain to which the resolution record belongs.
    :param int domain_id: The domain ID to which the resolution record belongs. If DomainId is provided, the system will ignore the Domain parameter. You can find all Domain and DomainId through the DescribeDomainList interface.
    :param Sequence[int] group_ids: When retrieving resolution records under certain groups, pass this group ID. You can obtain the GroupId field through the DescribeRecordGroupList interface.
    :param bool is_exact_sub_domain: Whether to perform an exact search based on the SubDomain parameter.
    :param str keyword: Search for resolution records by keyword, currently supporting searching host headers and record values.
    :param int mx_begin: The starting point of the resolution record MX priority query interval.
    :param int mx_end: The endpoint of the resolution record MX priority query interval.
    :param int project_id: Project ID.
    :param Sequence[str] record_lines: Retrieve resolution records for certain line IDs. You can view the allowed line information for the current domain through the DescribeRecordLineList interface.
    :param Sequence[str] record_statuses: Get the resolution record based on the resolution record status. The possible values are ENABLE and DISABLE. ENABLE: Normal DISABLE: Paused.
    :param Sequence[str] record_types: Retrieve certain types of resolution records, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, SPF, etc.
    :param str record_value: Get the resolution record based on the resolution record value.
    :param str remark: Get the resolution record based on the resolution record remark.
    :param str result_output_file: Used to save results.
    :param str sort_field: Sorting field, supporting NAME, LINE, TYPE, VALUE, WEIGHT, MX, TTL, UPDATED_ON fields. NAME: The host header of the resolution record LINE: The resolution record line TYPE: The resolution record type VALUE: The resolution record value WEIGHT: The weight MX: MX priority TTL: The resolution record cache time UPDATED_ON: The resolution record update time.
    :param str sort_type: Sorting method, ascending: ASC, descending: DESC. The default value is ASC.
    :param str sub_domain: Retrieve resolution records based on the host header of the resolution record. Fuzzy matching is used by default. You can set the IsExactSubdomain parameter to true for precise searching.
    :param int ttl_begin: The starting point of the resolution record TTL query interval.
    :param int ttl_end: The endpoint of the resolution record TTL query interval.
    :param str updated_at_begin: The starting point of the resolution record update time query interval.
    :param str updated_at_end: The endpoint of the resolution record update time query interval.
    :param int weight_begin: The starting point of the resolution record weight query interval.
    :param int weight_end: The endpoint of the resolution record weight query interval.
    """
    ...
