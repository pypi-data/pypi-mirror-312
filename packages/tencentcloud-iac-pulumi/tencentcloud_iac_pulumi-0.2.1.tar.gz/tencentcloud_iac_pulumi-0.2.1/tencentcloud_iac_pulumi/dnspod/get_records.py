# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRecordsResult',
    'AwaitableGetRecordsResult',
    'get_records',
    'get_records_output',
]

@pulumi.output_type
class GetRecordsResult:
    """
    A collection of values returned by getRecords.
    """
    def __init__(__self__, domain=None, domain_id=None, group_id=None, id=None, keyword=None, limit=None, offset=None, record_count_infos=None, record_line=None, record_line_id=None, record_type=None, result_output_file=None, results=None, sort_field=None, sort_type=None, subdomain=None):
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keyword and not isinstance(keyword, str):
            raise TypeError("Expected argument 'keyword' to be a str")
        pulumi.set(__self__, "keyword", keyword)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if record_count_infos and not isinstance(record_count_infos, list):
            raise TypeError("Expected argument 'record_count_infos' to be a list")
        pulumi.set(__self__, "record_count_infos", record_count_infos)
        if record_line and not isinstance(record_line, str):
            raise TypeError("Expected argument 'record_line' to be a str")
        pulumi.set(__self__, "record_line", record_line)
        if record_line_id and not isinstance(record_line_id, str):
            raise TypeError("Expected argument 'record_line_id' to be a str")
        pulumi.set(__self__, "record_line_id", record_line_id)
        if record_type and not isinstance(record_type, str):
            raise TypeError("Expected argument 'record_type' to be a str")
        pulumi.set(__self__, "record_type", record_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if sort_field and not isinstance(sort_field, str):
            raise TypeError("Expected argument 'sort_field' to be a str")
        pulumi.set(__self__, "sort_field", sort_field)
        if sort_type and not isinstance(sort_type, str):
            raise TypeError("Expected argument 'sort_type' to be a str")
        pulumi.set(__self__, "sort_type", sort_type)
        if subdomain and not isinstance(subdomain, str):
            raise TypeError("Expected argument 'subdomain' to be a str")
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def keyword(self) -> Optional[str]:
        return pulumi.get(self, "keyword")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="recordCountInfos")
    def record_count_infos(self) -> Sequence['outputs.GetRecordsRecordCountInfoResult']:
        """
        Count info of the queried record list.
        """
        return pulumi.get(self, "record_count_infos")

    @property
    @pulumi.getter(name="recordLine")
    def record_line(self) -> Optional[str]:
        return pulumi.get(self, "record_line")

    @property
    @pulumi.getter(name="recordLineId")
    def record_line_id(self) -> Optional[str]:
        return pulumi.get(self, "record_line_id")

    @property
    @pulumi.getter(name="recordType")
    def record_type(self) -> Optional[str]:
        return pulumi.get(self, "record_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetRecordsResultResult']:
        """
        The record list result.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="sortField")
    def sort_field(self) -> Optional[str]:
        return pulumi.get(self, "sort_field")

    @property
    @pulumi.getter(name="sortType")
    def sort_type(self) -> Optional[str]:
        return pulumi.get(self, "sort_type")

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[str]:
        return pulumi.get(self, "subdomain")


class AwaitableGetRecordsResult(GetRecordsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRecordsResult(
            domain=self.domain,
            domain_id=self.domain_id,
            group_id=self.group_id,
            id=self.id,
            keyword=self.keyword,
            limit=self.limit,
            offset=self.offset,
            record_count_infos=self.record_count_infos,
            record_line=self.record_line,
            record_line_id=self.record_line_id,
            record_type=self.record_type,
            result_output_file=self.result_output_file,
            results=self.results,
            sort_field=self.sort_field,
            sort_type=self.sort_type,
            subdomain=self.subdomain)


def get_records(domain: Optional[str] = None,
                domain_id: Optional[str] = None,
                group_id: Optional[str] = None,
                keyword: Optional[str] = None,
                limit: Optional[int] = None,
                offset: Optional[int] = None,
                record_line: Optional[str] = None,
                record_line_id: Optional[str] = None,
                record_type: Optional[str] = None,
                result_output_file: Optional[str] = None,
                sort_field: Optional[str] = None,
                sort_type: Optional[str] = None,
                subdomain: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRecordsResult:
    """
    Use this data source to query dnspod record list.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    record = tencentcloud.Dnspod.get_records(domain="example.com",
        subdomain="www")
    pulumi.export("result", record.results)
    ```
    <!--End PulumiCodeChooser -->

    ### Use verbose filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    record = tencentcloud.Dnspod.get_records(domain="example.com",
        subdomain="www",
        limit=100,
        record_type="TXT",
        sort_field="updated_on",
        sort_type="DESC")
    pulumi.export("result", record.results)
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: The domain for which DNS records are to be obtained.
    :param str domain_id: The ID of the domain for which DNS records are to be obtained. If DomainId is passed in, the system will omit the parameter domain.
    :param str group_id: The group ID.
    :param str keyword: The keyword for searching for DNS records. Host headers and record values are supported.
    :param int limit: The limit. It defaults to 100 and can be up to 3,000.
    :param int offset: The offset. Default value: 0.
    :param str record_line: The split zone name.
    :param str record_line_id: The split zone ID. If `record_line_id` is passed in, the system will omit the parameter `record_line`.
    :param str record_type: The type of DNS record, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, or SPF record.
    :param str result_output_file: Used for store query result as JSON.
    :param str sort_field: The sorting field. Available values: name, line, type, value, weight, mx, and ttl,updated_on.
    :param str sort_type: The sorting type. Valid values: ASC (ascending, default), DESC (descending).
    :param str subdomain: The host header of a DNS record. If this parameter is passed in, only the DNS record corresponding to this host header will be returned.
    """
    __args__ = dict()
    __args__['domain'] = domain
    __args__['domainId'] = domain_id
    __args__['groupId'] = group_id
    __args__['keyword'] = keyword
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['recordLine'] = record_line
    __args__['recordLineId'] = record_line_id
    __args__['recordType'] = record_type
    __args__['resultOutputFile'] = result_output_file
    __args__['sortField'] = sort_field
    __args__['sortType'] = sort_type
    __args__['subdomain'] = subdomain
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dnspod/getRecords:getRecords', __args__, opts=opts, typ=GetRecordsResult).value

    return AwaitableGetRecordsResult(
        domain=pulumi.get(__ret__, 'domain'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        keyword=pulumi.get(__ret__, 'keyword'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        record_count_infos=pulumi.get(__ret__, 'record_count_infos'),
        record_line=pulumi.get(__ret__, 'record_line'),
        record_line_id=pulumi.get(__ret__, 'record_line_id'),
        record_type=pulumi.get(__ret__, 'record_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        sort_field=pulumi.get(__ret__, 'sort_field'),
        sort_type=pulumi.get(__ret__, 'sort_type'),
        subdomain=pulumi.get(__ret__, 'subdomain'))


@_utilities.lift_output_func(get_records)
def get_records_output(domain: Optional[pulumi.Input[Optional[str]]] = None,
                       domain_id: Optional[pulumi.Input[Optional[str]]] = None,
                       group_id: Optional[pulumi.Input[Optional[str]]] = None,
                       keyword: Optional[pulumi.Input[Optional[str]]] = None,
                       limit: Optional[pulumi.Input[Optional[int]]] = None,
                       offset: Optional[pulumi.Input[Optional[int]]] = None,
                       record_line: Optional[pulumi.Input[Optional[str]]] = None,
                       record_line_id: Optional[pulumi.Input[Optional[str]]] = None,
                       record_type: Optional[pulumi.Input[Optional[str]]] = None,
                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       sort_field: Optional[pulumi.Input[Optional[str]]] = None,
                       sort_type: Optional[pulumi.Input[Optional[str]]] = None,
                       subdomain: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRecordsResult]:
    """
    Use this data source to query dnspod record list.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    record = tencentcloud.Dnspod.get_records(domain="example.com",
        subdomain="www")
    pulumi.export("result", record.results)
    ```
    <!--End PulumiCodeChooser -->

    ### Use verbose filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    record = tencentcloud.Dnspod.get_records(domain="example.com",
        subdomain="www",
        limit=100,
        record_type="TXT",
        sort_field="updated_on",
        sort_type="DESC")
    pulumi.export("result", record.results)
    ```
    <!--End PulumiCodeChooser -->


    :param str domain: The domain for which DNS records are to be obtained.
    :param str domain_id: The ID of the domain for which DNS records are to be obtained. If DomainId is passed in, the system will omit the parameter domain.
    :param str group_id: The group ID.
    :param str keyword: The keyword for searching for DNS records. Host headers and record values are supported.
    :param int limit: The limit. It defaults to 100 and can be up to 3,000.
    :param int offset: The offset. Default value: 0.
    :param str record_line: The split zone name.
    :param str record_line_id: The split zone ID. If `record_line_id` is passed in, the system will omit the parameter `record_line`.
    :param str record_type: The type of DNS record, such as A, CNAME, NS, AAAA, explicit URL, implicit URL, CAA, or SPF record.
    :param str result_output_file: Used for store query result as JSON.
    :param str sort_field: The sorting field. Available values: name, line, type, value, weight, mx, and ttl,updated_on.
    :param str sort_type: The sorting type. Valid values: ASC (ascending, default), DESC (descending).
    :param str subdomain: The host header of a DNS record. If this parameter is passed in, only the DNS record corresponding to this host header will be returned.
    """
    ...
