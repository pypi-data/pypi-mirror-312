# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetListAlgorithmsResult',
    'AwaitableGetListAlgorithmsResult',
    'get_list_algorithms',
    'get_list_algorithms_output',
]

@pulumi.output_type
class GetListAlgorithmsResult:
    """
    A collection of values returned by getListAlgorithms.
    """
    def __init__(__self__, asymmetric_algorithms=None, asymmetric_sign_verify_algorithms=None, id=None, result_output_file=None, symmetric_algorithms=None):
        if asymmetric_algorithms and not isinstance(asymmetric_algorithms, list):
            raise TypeError("Expected argument 'asymmetric_algorithms' to be a list")
        pulumi.set(__self__, "asymmetric_algorithms", asymmetric_algorithms)
        if asymmetric_sign_verify_algorithms and not isinstance(asymmetric_sign_verify_algorithms, list):
            raise TypeError("Expected argument 'asymmetric_sign_verify_algorithms' to be a list")
        pulumi.set(__self__, "asymmetric_sign_verify_algorithms", asymmetric_sign_verify_algorithms)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if symmetric_algorithms and not isinstance(symmetric_algorithms, list):
            raise TypeError("Expected argument 'symmetric_algorithms' to be a list")
        pulumi.set(__self__, "symmetric_algorithms", symmetric_algorithms)

    @property
    @pulumi.getter(name="asymmetricAlgorithms")
    def asymmetric_algorithms(self) -> Sequence['outputs.GetListAlgorithmsAsymmetricAlgorithmResult']:
        """
        Asymmetric encryption algorithms supported in this region.
        """
        return pulumi.get(self, "asymmetric_algorithms")

    @property
    @pulumi.getter(name="asymmetricSignVerifyAlgorithms")
    def asymmetric_sign_verify_algorithms(self) -> Sequence['outputs.GetListAlgorithmsAsymmetricSignVerifyAlgorithmResult']:
        """
        Asymmetric signature verification algorithms supported in this region.
        """
        return pulumi.get(self, "asymmetric_sign_verify_algorithms")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="symmetricAlgorithms")
    def symmetric_algorithms(self) -> Sequence['outputs.GetListAlgorithmsSymmetricAlgorithmResult']:
        """
        Symmetric encryption algorithms supported in this region.
        """
        return pulumi.get(self, "symmetric_algorithms")


class AwaitableGetListAlgorithmsResult(GetListAlgorithmsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetListAlgorithmsResult(
            asymmetric_algorithms=self.asymmetric_algorithms,
            asymmetric_sign_verify_algorithms=self.asymmetric_sign_verify_algorithms,
            id=self.id,
            result_output_file=self.result_output_file,
            symmetric_algorithms=self.symmetric_algorithms)


def get_list_algorithms(result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetListAlgorithmsResult:
    """
    Use this data source to query detailed information of kms list_algorithms

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Kms.get_list_algorithms()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Kms/getListAlgorithms:getListAlgorithms', __args__, opts=opts, typ=GetListAlgorithmsResult).value

    return AwaitableGetListAlgorithmsResult(
        asymmetric_algorithms=pulumi.get(__ret__, 'asymmetric_algorithms'),
        asymmetric_sign_verify_algorithms=pulumi.get(__ret__, 'asymmetric_sign_verify_algorithms'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        symmetric_algorithms=pulumi.get(__ret__, 'symmetric_algorithms'))


@_utilities.lift_output_func(get_list_algorithms)
def get_list_algorithms_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetListAlgorithmsResult]:
    """
    Use this data source to query detailed information of kms list_algorithms

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Kms.get_list_algorithms()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    ...
