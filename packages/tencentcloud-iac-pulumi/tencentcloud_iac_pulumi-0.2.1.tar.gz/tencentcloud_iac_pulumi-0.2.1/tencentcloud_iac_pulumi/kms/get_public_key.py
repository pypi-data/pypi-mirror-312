# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPublicKeyResult',
    'AwaitableGetPublicKeyResult',
    'get_public_key',
    'get_public_key_output',
]

@pulumi.output_type
class GetPublicKeyResult:
    """
    A collection of values returned by getPublicKey.
    """
    def __init__(__self__, id=None, key_id=None, public_key=None, public_key_pem=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if public_key_pem and not isinstance(public_key_pem, str):
            raise TypeError("Expected argument 'public_key_pem' to be a str")
        pulumi.set(__self__, "public_key_pem", public_key_pem)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> str:
        """
        Base64-encoded public key content.
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeyPem")
    def public_key_pem(self) -> str:
        """
        Public key content in PEM format.
        """
        return pulumi.get(self, "public_key_pem")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetPublicKeyResult(GetPublicKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicKeyResult(
            id=self.id,
            key_id=self.key_id,
            public_key=self.public_key,
            public_key_pem=self.public_key_pem,
            result_output_file=self.result_output_file)


def get_public_key(key_id: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicKeyResult:
    """
    Use this data source to query detailed information of kms public_key

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_key = tencentcloud.kms.Key("exampleKey",
        alias="tf-example-kms-key",
        description="example of kms key",
        key_usage="ASYMMETRIC_DECRYPT_RSA_2048",
        is_enabled=True,
        pending_delete_window_in_days=7)
    example_public_key = tencentcloud.Kms.get_public_key_output(key_id=example_key.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str key_id: CMK unique identifier.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['keyId'] = key_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Kms/getPublicKey:getPublicKey', __args__, opts=opts, typ=GetPublicKeyResult).value

    return AwaitableGetPublicKeyResult(
        id=pulumi.get(__ret__, 'id'),
        key_id=pulumi.get(__ret__, 'key_id'),
        public_key=pulumi.get(__ret__, 'public_key'),
        public_key_pem=pulumi.get(__ret__, 'public_key_pem'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_public_key)
def get_public_key_output(key_id: Optional[pulumi.Input[str]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPublicKeyResult]:
    """
    Use this data source to query detailed information of kms public_key

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_key = tencentcloud.kms.Key("exampleKey",
        alias="tf-example-kms-key",
        description="example of kms key",
        key_usage="ASYMMETRIC_DECRYPT_RSA_2048",
        is_enabled=True,
        pending_delete_window_in_days=7)
    example_public_key = tencentcloud.Kms.get_public_key_output(key_id=example_key.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str key_id: CMK unique identifier.
    :param str result_output_file: Used to save results.
    """
    ...
