# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EventTargetArgs', 'EventTarget']

@pulumi.input_type
class EventTargetArgs:
    def __init__(__self__, *,
                 event_bus_id: pulumi.Input[str],
                 rule_id: pulumi.Input[str],
                 target_description: pulumi.Input['EventTargetTargetDescriptionArgs'],
                 type: pulumi.Input[str]):
        """
        The set of arguments for constructing a EventTarget resource.
        :param pulumi.Input[str] event_bus_id: event bus id.
        :param pulumi.Input[str] rule_id: event rule id.
        :param pulumi.Input['EventTargetTargetDescriptionArgs'] target_description: target description.
        :param pulumi.Input[str] type: target type.
        """
        pulumi.set(__self__, "event_bus_id", event_bus_id)
        pulumi.set(__self__, "rule_id", rule_id)
        pulumi.set(__self__, "target_description", target_description)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="eventBusId")
    def event_bus_id(self) -> pulumi.Input[str]:
        """
        event bus id.
        """
        return pulumi.get(self, "event_bus_id")

    @event_bus_id.setter
    def event_bus_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_bus_id", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Input[str]:
        """
        event rule id.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="targetDescription")
    def target_description(self) -> pulumi.Input['EventTargetTargetDescriptionArgs']:
        """
        target description.
        """
        return pulumi.get(self, "target_description")

    @target_description.setter
    def target_description(self, value: pulumi.Input['EventTargetTargetDescriptionArgs']):
        pulumi.set(self, "target_description", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        target type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _EventTargetState:
    def __init__(__self__, *,
                 event_bus_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 target_description: Optional[pulumi.Input['EventTargetTargetDescriptionArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EventTarget resources.
        :param pulumi.Input[str] event_bus_id: event bus id.
        :param pulumi.Input[str] rule_id: event rule id.
        :param pulumi.Input['EventTargetTargetDescriptionArgs'] target_description: target description.
        :param pulumi.Input[str] type: target type.
        """
        if event_bus_id is not None:
            pulumi.set(__self__, "event_bus_id", event_bus_id)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if target_description is not None:
            pulumi.set(__self__, "target_description", target_description)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="eventBusId")
    def event_bus_id(self) -> Optional[pulumi.Input[str]]:
        """
        event bus id.
        """
        return pulumi.get(self, "event_bus_id")

    @event_bus_id.setter
    def event_bus_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_bus_id", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        event rule id.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="targetDescription")
    def target_description(self) -> Optional[pulumi.Input['EventTargetTargetDescriptionArgs']]:
        """
        target description.
        """
        return pulumi.get(self, "target_description")

    @target_description.setter
    def target_description(self, value: Optional[pulumi.Input['EventTargetTargetDescriptionArgs']]):
        pulumi.set(self, "target_description", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        target type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class EventTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_bus_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 target_description: Optional[pulumi.Input[pulumi.InputType['EventTargetTargetDescriptionArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a eb event_target

        ## Example Usage

        ### Create an event target of type scf

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        namespace = config.get("namespace")
        if namespace is None:
            namespace = "default"
        function = config.get("function")
        if function is None:
            function = "keep-1676351130"
        function_version = config.get("functionVersion")
        if function_version is None:
            function_version = "$LATEST"
        foo_users = tencentcloud.Cam.get_users()
        foo_event_bus = tencentcloud.eb.EventBus("fooEventBus",
            event_bus_name="tf-event_bus",
            description="event bus desc",
            enable_store=False,
            save_days=1,
            tags={
                "createdBy": "terraform",
            })
        foo_event_rule = tencentcloud.eb.EventRule("fooEventRule",
            event_bus_id=foo_event_bus.id,
            rule_name="tf-event_rule",
            description="event rule desc",
            enable=True,
            event_pattern=json.dumps({
                "source": "apigw.cloud.tencent",
                "type": ["connector:apigw"],
            }),
            tags={
                "createdBy": "terraform",
            })
        scf_target = tencentcloud.eb.EventTarget("scfTarget",
            event_bus_id=foo_event_bus.id,
            rule_id=foo_event_rule.rule_id,
            type="scf",
            target_description=tencentcloud.eb.EventTargetTargetDescriptionArgs(
                resource_description=f"qcs::scf:{zone}:uin/{foo_users.user_lists[0].uin}:namespace/{namespace}/function/{function}/{function_version}",
                scf_params=tencentcloud.eb.EventTargetTargetDescriptionScfParamsArgs(
                    batch_event_count=1,
                    batch_timeout=1,
                    enable_batch_delivery=True,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Create an event target of type ckafka

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        ckafka = config.get("ckafka")
        if ckafka is None:
            ckafka = "ckafka-qzoeaqx8"
        ckafka_target = tencentcloud.eb.EventTarget("ckafkaTarget",
            event_bus_id=tencentcloud_eb_event_bus["foo"]["id"],
            rule_id=tencentcloud_eb_event_rule["foo"]["rule_id"],
            type="ckafka",
            target_description=tencentcloud.eb.EventTargetTargetDescriptionArgs(
                resource_description=f"qcs::scf:{var['zone']}:uin/{data['tencentcloud_cam_users']['foo']['user_list'][0]['uin']}:ckafkaId/uin/{data['tencentcloud_cam_users']['foo']['user_list'][0]['uin']}/{ckafka}",
                ckafka_target_params=tencentcloud.eb.EventTargetTargetDescriptionCkafkaTargetParamsArgs(
                    topic_name="dasdasd",
                    retry_policy=tencentcloud.eb.EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs(
                        max_retry_attempts=360,
                        retry_interval=60,
                    ),
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        eb event_target can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Eb/eventTarget:EventTarget event_target event_target_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event_bus_id: event bus id.
        :param pulumi.Input[str] rule_id: event rule id.
        :param pulumi.Input[pulumi.InputType['EventTargetTargetDescriptionArgs']] target_description: target description.
        :param pulumi.Input[str] type: target type.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EventTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a eb event_target

        ## Example Usage

        ### Create an event target of type scf

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        zone = config.get("zone")
        if zone is None:
            zone = "ap-guangzhou"
        namespace = config.get("namespace")
        if namespace is None:
            namespace = "default"
        function = config.get("function")
        if function is None:
            function = "keep-1676351130"
        function_version = config.get("functionVersion")
        if function_version is None:
            function_version = "$LATEST"
        foo_users = tencentcloud.Cam.get_users()
        foo_event_bus = tencentcloud.eb.EventBus("fooEventBus",
            event_bus_name="tf-event_bus",
            description="event bus desc",
            enable_store=False,
            save_days=1,
            tags={
                "createdBy": "terraform",
            })
        foo_event_rule = tencentcloud.eb.EventRule("fooEventRule",
            event_bus_id=foo_event_bus.id,
            rule_name="tf-event_rule",
            description="event rule desc",
            enable=True,
            event_pattern=json.dumps({
                "source": "apigw.cloud.tencent",
                "type": ["connector:apigw"],
            }),
            tags={
                "createdBy": "terraform",
            })
        scf_target = tencentcloud.eb.EventTarget("scfTarget",
            event_bus_id=foo_event_bus.id,
            rule_id=foo_event_rule.rule_id,
            type="scf",
            target_description=tencentcloud.eb.EventTargetTargetDescriptionArgs(
                resource_description=f"qcs::scf:{zone}:uin/{foo_users.user_lists[0].uin}:namespace/{namespace}/function/{function}/{function_version}",
                scf_params=tencentcloud.eb.EventTargetTargetDescriptionScfParamsArgs(
                    batch_event_count=1,
                    batch_timeout=1,
                    enable_batch_delivery=True,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Create an event target of type ckafka

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        ckafka = config.get("ckafka")
        if ckafka is None:
            ckafka = "ckafka-qzoeaqx8"
        ckafka_target = tencentcloud.eb.EventTarget("ckafkaTarget",
            event_bus_id=tencentcloud_eb_event_bus["foo"]["id"],
            rule_id=tencentcloud_eb_event_rule["foo"]["rule_id"],
            type="ckafka",
            target_description=tencentcloud.eb.EventTargetTargetDescriptionArgs(
                resource_description=f"qcs::scf:{var['zone']}:uin/{data['tencentcloud_cam_users']['foo']['user_list'][0]['uin']}:ckafkaId/uin/{data['tencentcloud_cam_users']['foo']['user_list'][0]['uin']}/{ckafka}",
                ckafka_target_params=tencentcloud.eb.EventTargetTargetDescriptionCkafkaTargetParamsArgs(
                    topic_name="dasdasd",
                    retry_policy=tencentcloud.eb.EventTargetTargetDescriptionCkafkaTargetParamsRetryPolicyArgs(
                        max_retry_attempts=360,
                        retry_interval=60,
                    ),
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        eb event_target can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Eb/eventTarget:EventTarget event_target event_target_id
        ```

        :param str resource_name: The name of the resource.
        :param EventTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EventTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_bus_id: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 target_description: Optional[pulumi.Input[pulumi.InputType['EventTargetTargetDescriptionArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EventTargetArgs.__new__(EventTargetArgs)

            if event_bus_id is None and not opts.urn:
                raise TypeError("Missing required property 'event_bus_id'")
            __props__.__dict__["event_bus_id"] = event_bus_id
            if rule_id is None and not opts.urn:
                raise TypeError("Missing required property 'rule_id'")
            __props__.__dict__["rule_id"] = rule_id
            if target_description is None and not opts.urn:
                raise TypeError("Missing required property 'target_description'")
            __props__.__dict__["target_description"] = target_description
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(EventTarget, __self__).__init__(
            'tencentcloud:Eb/eventTarget:EventTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_bus_id: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            target_description: Optional[pulumi.Input[pulumi.InputType['EventTargetTargetDescriptionArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'EventTarget':
        """
        Get an existing EventTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event_bus_id: event bus id.
        :param pulumi.Input[str] rule_id: event rule id.
        :param pulumi.Input[pulumi.InputType['EventTargetTargetDescriptionArgs']] target_description: target description.
        :param pulumi.Input[str] type: target type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EventTargetState.__new__(_EventTargetState)

        __props__.__dict__["event_bus_id"] = event_bus_id
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["target_description"] = target_description
        __props__.__dict__["type"] = type
        return EventTarget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eventBusId")
    def event_bus_id(self) -> pulumi.Output[str]:
        """
        event bus id.
        """
        return pulumi.get(self, "event_bus_id")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        event rule id.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="targetDescription")
    def target_description(self) -> pulumi.Output['outputs.EventTargetTargetDescription']:
        """
        target description.
        """
        return pulumi.get(self, "target_description")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        target type.
        """
        return pulumi.get(self, "type")

