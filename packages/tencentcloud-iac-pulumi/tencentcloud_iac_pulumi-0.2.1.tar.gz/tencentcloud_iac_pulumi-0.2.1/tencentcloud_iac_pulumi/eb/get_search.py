# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSearchResult',
    'AwaitableGetSearchResult',
    'get_search',
    'get_search_output',
]

@pulumi.output_type
class GetSearchResult:
    """
    A collection of values returned by getSearch.
    """
    def __init__(__self__, dimension_values=None, end_time=None, event_bus_id=None, filters=None, group_field=None, id=None, order_by=None, order_fields=None, result_output_file=None, results=None, start_time=None):
        if dimension_values and not isinstance(dimension_values, list):
            raise TypeError("Expected argument 'dimension_values' to be a list")
        pulumi.set(__self__, "dimension_values", dimension_values)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if event_bus_id and not isinstance(event_bus_id, str):
            raise TypeError("Expected argument 'event_bus_id' to be a str")
        pulumi.set(__self__, "event_bus_id", event_bus_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if group_field and not isinstance(group_field, str):
            raise TypeError("Expected argument 'group_field' to be a str")
        pulumi.set(__self__, "group_field", group_field)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if order_fields and not isinstance(order_fields, list):
            raise TypeError("Expected argument 'order_fields' to be a list")
        pulumi.set(__self__, "order_fields", order_fields)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="dimensionValues")
    def dimension_values(self) -> Sequence[str]:
        return pulumi.get(self, "dimension_values")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventBusId")
    def event_bus_id(self) -> str:
        return pulumi.get(self, "event_bus_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSearchFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="groupField")
    def group_field(self) -> Optional[str]:
        return pulumi.get(self, "group_field")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="orderFields")
    def order_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "order_fields")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetSearchResultResult']:
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")


class AwaitableGetSearchResult(GetSearchResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSearchResult(
            dimension_values=self.dimension_values,
            end_time=self.end_time,
            event_bus_id=self.event_bus_id,
            filters=self.filters,
            group_field=self.group_field,
            id=self.id,
            order_by=self.order_by,
            order_fields=self.order_fields,
            result_output_file=self.result_output_file,
            results=self.results,
            start_time=self.start_time)


def get_search(end_time: Optional[int] = None,
               event_bus_id: Optional[str] = None,
               filters: Optional[Sequence[pulumi.InputType['GetSearchFilterArgs']]] = None,
               group_field: Optional[str] = None,
               order_by: Optional[str] = None,
               order_fields: Optional[Sequence[str]] = None,
               result_output_file: Optional[str] = None,
               start_time: Optional[int] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSearchResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['eventBusId'] = event_bus_id
    __args__['filters'] = filters
    __args__['groupField'] = group_field
    __args__['orderBy'] = order_by
    __args__['orderFields'] = order_fields
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Eb/getSearch:getSearch', __args__, opts=opts, typ=GetSearchResult).value

    return AwaitableGetSearchResult(
        dimension_values=pulumi.get(__ret__, 'dimension_values'),
        end_time=pulumi.get(__ret__, 'end_time'),
        event_bus_id=pulumi.get(__ret__, 'event_bus_id'),
        filters=pulumi.get(__ret__, 'filters'),
        group_field=pulumi.get(__ret__, 'group_field'),
        id=pulumi.get(__ret__, 'id'),
        order_by=pulumi.get(__ret__, 'order_by'),
        order_fields=pulumi.get(__ret__, 'order_fields'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_search)
def get_search_output(end_time: Optional[pulumi.Input[int]] = None,
                      event_bus_id: Optional[pulumi.Input[str]] = None,
                      filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSearchFilterArgs']]]]] = None,
                      group_field: Optional[pulumi.Input[Optional[str]]] = None,
                      order_by: Optional[pulumi.Input[Optional[str]]] = None,
                      order_fields: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      start_time: Optional[pulumi.Input[int]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSearchResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
