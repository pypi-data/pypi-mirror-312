# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPairsResult',
    'AwaitableGetPairsResult',
    'get_pairs',
    'get_pairs_output',
]

@pulumi.output_type
class GetPairsResult:
    """
    A collection of values returned by getPairs.
    """
    def __init__(__self__, id=None, key_id=None, key_name=None, key_pair_lists=None, project_id=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_id and not isinstance(key_id, str):
            raise TypeError("Expected argument 'key_id' to be a str")
        pulumi.set(__self__, "key_id", key_id)
        if key_name and not isinstance(key_name, str):
            raise TypeError("Expected argument 'key_name' to be a str")
        pulumi.set(__self__, "key_name", key_name)
        if key_pair_lists and not isinstance(key_pair_lists, list):
            raise TypeError("Expected argument 'key_pair_lists' to be a list")
        pulumi.set(__self__, "key_pair_lists", key_pair_lists)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        """
        ID of the key pair.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[str]:
        """
        Name of the key pair.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyPairLists")
    def key_pair_lists(self) -> Sequence['outputs.GetPairsKeyPairListResult']:
        """
        An information list of key pair. Each element contains the following attributes:
        """
        return pulumi.get(self, "key_pair_lists")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        Project ID of the key pair.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetPairsResult(GetPairsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPairsResult(
            id=self.id,
            key_id=self.key_id,
            key_name=self.key_name,
            key_pair_lists=self.key_pair_lists,
            project_id=self.project_id,
            result_output_file=self.result_output_file)


def get_pairs(key_id: Optional[str] = None,
              key_name: Optional[str] = None,
              project_id: Optional[int] = None,
              result_output_file: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPairsResult:
    """
    Use this data source to query key pairs.

    ## Example Usage

    ### Query key pairs by key ID

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    key_id = tencentcloud.Key.get_pairs(key_id="skey-ie97i3ml")
    ```
    <!--End PulumiCodeChooser -->

    ### Query key pairs by key name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    key_name = tencentcloud.Key.get_pairs(key_name="^test$")
    ```
    <!--End PulumiCodeChooser -->


    :param str key_id: ID of the key pair to be queried.
    :param str key_name: Name of the key pair to be queried. Support regular expression search, only `^` and `$` are supported.
    :param int project_id: Project ID of the key pair to be queried.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['keyId'] = key_id
    __args__['keyName'] = key_name
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Key/getPairs:getPairs', __args__, opts=opts, typ=GetPairsResult).value

    return AwaitableGetPairsResult(
        id=pulumi.get(__ret__, 'id'),
        key_id=pulumi.get(__ret__, 'key_id'),
        key_name=pulumi.get(__ret__, 'key_name'),
        key_pair_lists=pulumi.get(__ret__, 'key_pair_lists'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_pairs)
def get_pairs_output(key_id: Optional[pulumi.Input[Optional[str]]] = None,
                     key_name: Optional[pulumi.Input[Optional[str]]] = None,
                     project_id: Optional[pulumi.Input[Optional[int]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPairsResult]:
    """
    Use this data source to query key pairs.

    ## Example Usage

    ### Query key pairs by key ID

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    key_id = tencentcloud.Key.get_pairs(key_id="skey-ie97i3ml")
    ```
    <!--End PulumiCodeChooser -->

    ### Query key pairs by key name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    key_name = tencentcloud.Key.get_pairs(key_name="^test$")
    ```
    <!--End PulumiCodeChooser -->


    :param str key_id: ID of the key pair to be queried.
    :param str key_name: Name of the key pair to be queried. Support regular expression search, only `^` and `$` are supported.
    :param int project_id: Project ID of the key pair to be queried.
    :param str result_output_file: Used to save results.
    """
    ...
