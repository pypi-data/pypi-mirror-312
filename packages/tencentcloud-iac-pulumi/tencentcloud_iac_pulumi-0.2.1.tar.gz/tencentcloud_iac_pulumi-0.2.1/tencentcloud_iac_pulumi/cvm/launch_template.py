# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LaunchTemplateArgs', 'LaunchTemplate']

@pulumi.input_type
class LaunchTemplateArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[str],
                 launch_template_name: pulumi.Input[str],
                 placement: pulumi.Input['LaunchTemplatePlacementArgs'],
                 action_timer: Optional[pulumi.Input['LaunchTemplateActionTimerArgs']] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]]] = None,
                 disable_api_termination: Optional[pulumi.Input[bool]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 enhanced_service: Optional[pulumi.Input['LaunchTemplateEnhancedServiceArgs']] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_prepaid: Optional[pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs']] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_market_options: Optional[pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs']] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input['LaunchTemplateInternetAccessibleArgs']] = None,
                 launch_template_version_description: Optional[pulumi.Input[str]] = None,
                 login_settings: Optional[pulumi.Input['LaunchTemplateLoginSettingsArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk: Optional[pulumi.Input['LaunchTemplateSystemDiskArgs']] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs']] = None):
        """
        The set of arguments for constructing a LaunchTemplate resource.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[str] launch_template_name: The name of launch template.
        :param pulumi.Input['LaunchTemplatePlacementArgs'] placement: The location of instance.
        :param pulumi.Input['LaunchTemplateActionTimerArgs'] action_timer: Timed task.
        :param pulumi.Input[str] cam_role_name: The role name of CAM.
        :param pulumi.Input[str] client_token: A string to used guarantee request idempotency.
        :param pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]] data_disks: Data disk configuration information of the instance.
        :param pulumi.Input[bool] disable_api_termination: Instance destruction protection flag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disaster_recover_group_ids: The ID of disaster recover group.
        :param pulumi.Input[bool] dry_run: Whether to preflight only this request, true or false.
        :param pulumi.Input['LaunchTemplateEnhancedServiceArgs'] enhanced_service: Enhanced service. If this parameter is not specified, cloud monitoring and cloud security services will be enabled by default in public images.
        :param pulumi.Input[str] host_name: The host name of CVM.
        :param pulumi.Input[str] hpc_cluster_id: The ID of HPC cluster.
        :param pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs'] instance_charge_prepaid: The configuration of charge prepaid.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Default value: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] instance_count: The number of instances purchased.
        :param pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs'] instance_market_options: The marketplace options of instance.
        :param pulumi.Input[str] instance_name: The name of instance. If you do not specify an instance display name, 'Unnamed' is displayed by default.
        :param pulumi.Input[str] instance_type: The type of the instance. If this parameter is not specified, the system will dynamically specify the default model according to the resource sales in the current region.
        :param pulumi.Input['LaunchTemplateInternetAccessibleArgs'] internet_accessible: The information settings of public network bandwidth. If you do not specify this parameter, the default Internet bandwidth is 0 Mbps.
        :param pulumi.Input[str] launch_template_version_description: Instance launch template version description.
        :param pulumi.Input['LaunchTemplateLoginSettingsArgs'] login_settings: The login settings of instance. By default, passwords are randomly generated and notified to users via internal messages.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID of instance. If this parameter is not specified, the default security group is bound.
        :param pulumi.Input['LaunchTemplateSystemDiskArgs'] system_disk: System disk configuration information of the instance. If this parameter is not specified, it is assigned according to the system default.
        :param pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]] tag_specifications: Tag description list.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] user_data: The data of users.
        :param pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs'] virtual_private_cloud: The configuration information of VPC. If this parameter is not specified, the basic network is used by default.
        """
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "launch_template_name", launch_template_name)
        pulumi.set(__self__, "placement", placement)
        if action_timer is not None:
            pulumi.set(__self__, "action_timer", action_timer)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if disable_api_termination is not None:
            pulumi.set(__self__, "disable_api_termination", disable_api_termination)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if enhanced_service is not None:
            pulumi.set(__self__, "enhanced_service", enhanced_service)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if instance_charge_prepaid is not None:
            pulumi.set(__self__, "instance_charge_prepaid", instance_charge_prepaid)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_market_options is not None:
            pulumi.set(__self__, "instance_market_options", instance_market_options)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if internet_accessible is not None:
            pulumi.set(__self__, "internet_accessible", internet_accessible)
        if launch_template_version_description is not None:
            pulumi.set(__self__, "launch_template_version_description", launch_template_version_description)
        if login_settings is not None:
            pulumi.set(__self__, "login_settings", login_settings)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk is not None:
            pulumi.set(__self__, "system_disk", system_disk)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if virtual_private_cloud is not None:
            pulumi.set(__self__, "virtual_private_cloud", virtual_private_cloud)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="launchTemplateName")
    def launch_template_name(self) -> pulumi.Input[str]:
        """
        The name of launch template.
        """
        return pulumi.get(self, "launch_template_name")

    @launch_template_name.setter
    def launch_template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "launch_template_name", value)

    @property
    @pulumi.getter
    def placement(self) -> pulumi.Input['LaunchTemplatePlacementArgs']:
        """
        The location of instance.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: pulumi.Input['LaunchTemplatePlacementArgs']):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="actionTimer")
    def action_timer(self) -> Optional[pulumi.Input['LaunchTemplateActionTimerArgs']]:
        """
        Timed task.
        """
        return pulumi.get(self, "action_timer")

    @action_timer.setter
    def action_timer(self, value: Optional[pulumi.Input['LaunchTemplateActionTimerArgs']]):
        pulumi.set(self, "action_timer", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        The role name of CAM.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        A string to used guarantee request idempotency.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]]]:
        """
        Data disk configuration information of the instance.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="disableApiTermination")
    def disable_api_termination(self) -> Optional[pulumi.Input[bool]]:
        """
        Instance destruction protection flag.
        """
        return pulumi.get(self, "disable_api_termination")

    @disable_api_termination.setter
    def disable_api_termination(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_api_termination", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of disaster recover group.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to preflight only this request, true or false.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="enhancedService")
    def enhanced_service(self) -> Optional[pulumi.Input['LaunchTemplateEnhancedServiceArgs']]:
        """
        Enhanced service. If this parameter is not specified, cloud monitoring and cloud security services will be enabled by default in public images.
        """
        return pulumi.get(self, "enhanced_service")

    @enhanced_service.setter
    def enhanced_service(self, value: Optional[pulumi.Input['LaunchTemplateEnhancedServiceArgs']]):
        pulumi.set(self, "enhanced_service", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of CVM.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of HPC cluster.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="instanceChargePrepaid")
    def instance_charge_prepaid(self) -> Optional[pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs']]:
        """
        The configuration of charge prepaid.
        """
        return pulumi.get(self, "instance_charge_prepaid")

    @instance_charge_prepaid.setter
    def instance_charge_prepaid(self, value: Optional[pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs']]):
        pulumi.set(self, "instance_charge_prepaid", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Default value: POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of instances purchased.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceMarketOptions")
    def instance_market_options(self) -> Optional[pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs']]:
        """
        The marketplace options of instance.
        """
        return pulumi.get(self, "instance_market_options")

    @instance_market_options.setter
    def instance_market_options(self, value: Optional[pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs']]):
        pulumi.set(self, "instance_market_options", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of instance. If you do not specify an instance display name, 'Unnamed' is displayed by default.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the instance. If this parameter is not specified, the system will dynamically specify the default model according to the resource sales in the current region.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> Optional[pulumi.Input['LaunchTemplateInternetAccessibleArgs']]:
        """
        The information settings of public network bandwidth. If you do not specify this parameter, the default Internet bandwidth is 0 Mbps.
        """
        return pulumi.get(self, "internet_accessible")

    @internet_accessible.setter
    def internet_accessible(self, value: Optional[pulumi.Input['LaunchTemplateInternetAccessibleArgs']]):
        pulumi.set(self, "internet_accessible", value)

    @property
    @pulumi.getter(name="launchTemplateVersionDescription")
    def launch_template_version_description(self) -> Optional[pulumi.Input[str]]:
        """
        Instance launch template version description.
        """
        return pulumi.get(self, "launch_template_version_description")

    @launch_template_version_description.setter
    def launch_template_version_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_template_version_description", value)

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> Optional[pulumi.Input['LaunchTemplateLoginSettingsArgs']]:
        """
        The login settings of instance. By default, passwords are randomly generated and notified to users via internal messages.
        """
        return pulumi.get(self, "login_settings")

    @login_settings.setter
    def login_settings(self, value: Optional[pulumi.Input['LaunchTemplateLoginSettingsArgs']]):
        pulumi.set(self, "login_settings", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security group ID of instance. If this parameter is not specified, the default security group is bound.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> Optional[pulumi.Input['LaunchTemplateSystemDiskArgs']]:
        """
        System disk configuration information of the instance. If this parameter is not specified, it is assigned according to the system default.
        """
        return pulumi.get(self, "system_disk")

    @system_disk.setter
    def system_disk(self, value: Optional[pulumi.Input['LaunchTemplateSystemDiskArgs']]):
        pulumi.set(self, "system_disk", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The data of users.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="virtualPrivateCloud")
    def virtual_private_cloud(self) -> Optional[pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs']]:
        """
        The configuration information of VPC. If this parameter is not specified, the basic network is used by default.
        """
        return pulumi.get(self, "virtual_private_cloud")

    @virtual_private_cloud.setter
    def virtual_private_cloud(self, value: Optional[pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs']]):
        pulumi.set(self, "virtual_private_cloud", value)


@pulumi.input_type
class _LaunchTemplateState:
    def __init__(__self__, *,
                 action_timer: Optional[pulumi.Input['LaunchTemplateActionTimerArgs']] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]]] = None,
                 disable_api_termination: Optional[pulumi.Input[bool]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 enhanced_service: Optional[pulumi.Input['LaunchTemplateEnhancedServiceArgs']] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_prepaid: Optional[pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs']] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_market_options: Optional[pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs']] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input['LaunchTemplateInternetAccessibleArgs']] = None,
                 launch_template_name: Optional[pulumi.Input[str]] = None,
                 launch_template_version_description: Optional[pulumi.Input[str]] = None,
                 login_settings: Optional[pulumi.Input['LaunchTemplateLoginSettingsArgs']] = None,
                 placement: Optional[pulumi.Input['LaunchTemplatePlacementArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk: Optional[pulumi.Input['LaunchTemplateSystemDiskArgs']] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs']] = None):
        """
        Input properties used for looking up and filtering LaunchTemplate resources.
        :param pulumi.Input['LaunchTemplateActionTimerArgs'] action_timer: Timed task.
        :param pulumi.Input[str] cam_role_name: The role name of CAM.
        :param pulumi.Input[str] client_token: A string to used guarantee request idempotency.
        :param pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]] data_disks: Data disk configuration information of the instance.
        :param pulumi.Input[bool] disable_api_termination: Instance destruction protection flag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disaster_recover_group_ids: The ID of disaster recover group.
        :param pulumi.Input[bool] dry_run: Whether to preflight only this request, true or false.
        :param pulumi.Input['LaunchTemplateEnhancedServiceArgs'] enhanced_service: Enhanced service. If this parameter is not specified, cloud monitoring and cloud security services will be enabled by default in public images.
        :param pulumi.Input[str] host_name: The host name of CVM.
        :param pulumi.Input[str] hpc_cluster_id: The ID of HPC cluster.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs'] instance_charge_prepaid: The configuration of charge prepaid.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Default value: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] instance_count: The number of instances purchased.
        :param pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs'] instance_market_options: The marketplace options of instance.
        :param pulumi.Input[str] instance_name: The name of instance. If you do not specify an instance display name, 'Unnamed' is displayed by default.
        :param pulumi.Input[str] instance_type: The type of the instance. If this parameter is not specified, the system will dynamically specify the default model according to the resource sales in the current region.
        :param pulumi.Input['LaunchTemplateInternetAccessibleArgs'] internet_accessible: The information settings of public network bandwidth. If you do not specify this parameter, the default Internet bandwidth is 0 Mbps.
        :param pulumi.Input[str] launch_template_name: The name of launch template.
        :param pulumi.Input[str] launch_template_version_description: Instance launch template version description.
        :param pulumi.Input['LaunchTemplateLoginSettingsArgs'] login_settings: The login settings of instance. By default, passwords are randomly generated and notified to users via internal messages.
        :param pulumi.Input['LaunchTemplatePlacementArgs'] placement: The location of instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID of instance. If this parameter is not specified, the default security group is bound.
        :param pulumi.Input['LaunchTemplateSystemDiskArgs'] system_disk: System disk configuration information of the instance. If this parameter is not specified, it is assigned according to the system default.
        :param pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]] tag_specifications: Tag description list.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] user_data: The data of users.
        :param pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs'] virtual_private_cloud: The configuration information of VPC. If this parameter is not specified, the basic network is used by default.
        """
        if action_timer is not None:
            pulumi.set(__self__, "action_timer", action_timer)
        if cam_role_name is not None:
            pulumi.set(__self__, "cam_role_name", cam_role_name)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if disable_api_termination is not None:
            pulumi.set(__self__, "disable_api_termination", disable_api_termination)
        if disaster_recover_group_ids is not None:
            pulumi.set(__self__, "disaster_recover_group_ids", disaster_recover_group_ids)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if enhanced_service is not None:
            pulumi.set(__self__, "enhanced_service", enhanced_service)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if hpc_cluster_id is not None:
            pulumi.set(__self__, "hpc_cluster_id", hpc_cluster_id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if instance_charge_prepaid is not None:
            pulumi.set(__self__, "instance_charge_prepaid", instance_charge_prepaid)
        if instance_charge_type is not None:
            pulumi.set(__self__, "instance_charge_type", instance_charge_type)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if instance_market_options is not None:
            pulumi.set(__self__, "instance_market_options", instance_market_options)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if internet_accessible is not None:
            pulumi.set(__self__, "internet_accessible", internet_accessible)
        if launch_template_name is not None:
            pulumi.set(__self__, "launch_template_name", launch_template_name)
        if launch_template_version_description is not None:
            pulumi.set(__self__, "launch_template_version_description", launch_template_version_description)
        if login_settings is not None:
            pulumi.set(__self__, "login_settings", login_settings)
        if placement is not None:
            pulumi.set(__self__, "placement", placement)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if system_disk is not None:
            pulumi.set(__self__, "system_disk", system_disk)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if virtual_private_cloud is not None:
            pulumi.set(__self__, "virtual_private_cloud", virtual_private_cloud)

    @property
    @pulumi.getter(name="actionTimer")
    def action_timer(self) -> Optional[pulumi.Input['LaunchTemplateActionTimerArgs']]:
        """
        Timed task.
        """
        return pulumi.get(self, "action_timer")

    @action_timer.setter
    def action_timer(self, value: Optional[pulumi.Input['LaunchTemplateActionTimerArgs']]):
        pulumi.set(self, "action_timer", value)

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        The role name of CAM.
        """
        return pulumi.get(self, "cam_role_name")

    @cam_role_name.setter
    def cam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cam_role_name", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        A string to used guarantee request idempotency.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]]]:
        """
        Data disk configuration information of the instance.
        """
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @property
    @pulumi.getter(name="disableApiTermination")
    def disable_api_termination(self) -> Optional[pulumi.Input[bool]]:
        """
        Instance destruction protection flag.
        """
        return pulumi.get(self, "disable_api_termination")

    @disable_api_termination.setter
    def disable_api_termination(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_api_termination", value)

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of disaster recover group.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @disaster_recover_group_ids.setter
    def disaster_recover_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disaster_recover_group_ids", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to preflight only this request, true or false.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="enhancedService")
    def enhanced_service(self) -> Optional[pulumi.Input['LaunchTemplateEnhancedServiceArgs']]:
        """
        Enhanced service. If this parameter is not specified, cloud monitoring and cloud security services will be enabled by default in public images.
        """
        return pulumi.get(self, "enhanced_service")

    @enhanced_service.setter
    def enhanced_service(self, value: Optional[pulumi.Input['LaunchTemplateEnhancedServiceArgs']]):
        pulumi.set(self, "enhanced_service", value)

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[str]]:
        """
        The host name of CVM.
        """
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name", value)

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of HPC cluster.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @hpc_cluster_id.setter
    def hpc_cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hpc_cluster_id", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="instanceChargePrepaid")
    def instance_charge_prepaid(self) -> Optional[pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs']]:
        """
        The configuration of charge prepaid.
        """
        return pulumi.get(self, "instance_charge_prepaid")

    @instance_charge_prepaid.setter
    def instance_charge_prepaid(self, value: Optional[pulumi.Input['LaunchTemplateInstanceChargePrepaidArgs']]):
        pulumi.set(self, "instance_charge_prepaid", value)

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        The charge type of instance. Default value: POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "instance_charge_type")

    @instance_charge_type.setter
    def instance_charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_charge_type", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of instances purchased.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="instanceMarketOptions")
    def instance_market_options(self) -> Optional[pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs']]:
        """
        The marketplace options of instance.
        """
        return pulumi.get(self, "instance_market_options")

    @instance_market_options.setter
    def instance_market_options(self, value: Optional[pulumi.Input['LaunchTemplateInstanceMarketOptionsArgs']]):
        pulumi.set(self, "instance_market_options", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of instance. If you do not specify an instance display name, 'Unnamed' is displayed by default.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the instance. If this parameter is not specified, the system will dynamically specify the default model according to the resource sales in the current region.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> Optional[pulumi.Input['LaunchTemplateInternetAccessibleArgs']]:
        """
        The information settings of public network bandwidth. If you do not specify this parameter, the default Internet bandwidth is 0 Mbps.
        """
        return pulumi.get(self, "internet_accessible")

    @internet_accessible.setter
    def internet_accessible(self, value: Optional[pulumi.Input['LaunchTemplateInternetAccessibleArgs']]):
        pulumi.set(self, "internet_accessible", value)

    @property
    @pulumi.getter(name="launchTemplateName")
    def launch_template_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of launch template.
        """
        return pulumi.get(self, "launch_template_name")

    @launch_template_name.setter
    def launch_template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_template_name", value)

    @property
    @pulumi.getter(name="launchTemplateVersionDescription")
    def launch_template_version_description(self) -> Optional[pulumi.Input[str]]:
        """
        Instance launch template version description.
        """
        return pulumi.get(self, "launch_template_version_description")

    @launch_template_version_description.setter
    def launch_template_version_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "launch_template_version_description", value)

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> Optional[pulumi.Input['LaunchTemplateLoginSettingsArgs']]:
        """
        The login settings of instance. By default, passwords are randomly generated and notified to users via internal messages.
        """
        return pulumi.get(self, "login_settings")

    @login_settings.setter
    def login_settings(self, value: Optional[pulumi.Input['LaunchTemplateLoginSettingsArgs']]):
        pulumi.set(self, "login_settings", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['LaunchTemplatePlacementArgs']]:
        """
        The location of instance.
        """
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['LaunchTemplatePlacementArgs']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The security group ID of instance. If this parameter is not specified, the default security group is bound.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> Optional[pulumi.Input['LaunchTemplateSystemDiskArgs']]:
        """
        System disk configuration information of the instance. If this parameter is not specified, it is assigned according to the system default.
        """
        return pulumi.get(self, "system_disk")

    @system_disk.setter
    def system_disk(self, value: Optional[pulumi.Input['LaunchTemplateSystemDiskArgs']]):
        pulumi.set(self, "system_disk", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LaunchTemplateTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        The data of users.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="virtualPrivateCloud")
    def virtual_private_cloud(self) -> Optional[pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs']]:
        """
        The configuration information of VPC. If this parameter is not specified, the basic network is used by default.
        """
        return pulumi.get(self, "virtual_private_cloud")

    @virtual_private_cloud.setter
    def virtual_private_cloud(self, value: Optional[pulumi.Input['LaunchTemplateVirtualPrivateCloudArgs']]):
        pulumi.set(self, "virtual_private_cloud", value)


class LaunchTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_timer: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateActionTimerArgs']]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateDataDiskArgs']]]]] = None,
                 disable_api_termination: Optional[pulumi.Input[bool]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 enhanced_service: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateEnhancedServiceArgs']]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInstanceChargePrepaidArgs']]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_market_options: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInstanceMarketOptionsArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInternetAccessibleArgs']]] = None,
                 launch_template_name: Optional[pulumi.Input[str]] = None,
                 launch_template_version_description: Optional[pulumi.Input[str]] = None,
                 login_settings: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateLoginSettingsArgs']]] = None,
                 placement: Optional[pulumi.Input[pulumi.InputType['LaunchTemplatePlacementArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateSystemDiskArgs']]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateTagSpecificationArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateVirtualPrivateCloudArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a cvm launch template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        my_favorite_image = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            image_name_regex="Final")
        demo = tencentcloud.cvm.LaunchTemplate("demo",
            launch_template_name="test",
            placement=tencentcloud.cvm.LaunchTemplatePlacementArgs(
                zone="ap-guangzhou-6",
                project_id=0,
            ),
            image_id=my_favorite_image.images[0].image_id)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateActionTimerArgs']] action_timer: Timed task.
        :param pulumi.Input[str] cam_role_name: The role name of CAM.
        :param pulumi.Input[str] client_token: A string to used guarantee request idempotency.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateDataDiskArgs']]]] data_disks: Data disk configuration information of the instance.
        :param pulumi.Input[bool] disable_api_termination: Instance destruction protection flag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disaster_recover_group_ids: The ID of disaster recover group.
        :param pulumi.Input[bool] dry_run: Whether to preflight only this request, true or false.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateEnhancedServiceArgs']] enhanced_service: Enhanced service. If this parameter is not specified, cloud monitoring and cloud security services will be enabled by default in public images.
        :param pulumi.Input[str] host_name: The host name of CVM.
        :param pulumi.Input[str] hpc_cluster_id: The ID of HPC cluster.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateInstanceChargePrepaidArgs']] instance_charge_prepaid: The configuration of charge prepaid.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Default value: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] instance_count: The number of instances purchased.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateInstanceMarketOptionsArgs']] instance_market_options: The marketplace options of instance.
        :param pulumi.Input[str] instance_name: The name of instance. If you do not specify an instance display name, 'Unnamed' is displayed by default.
        :param pulumi.Input[str] instance_type: The type of the instance. If this parameter is not specified, the system will dynamically specify the default model according to the resource sales in the current region.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateInternetAccessibleArgs']] internet_accessible: The information settings of public network bandwidth. If you do not specify this parameter, the default Internet bandwidth is 0 Mbps.
        :param pulumi.Input[str] launch_template_name: The name of launch template.
        :param pulumi.Input[str] launch_template_version_description: Instance launch template version description.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateLoginSettingsArgs']] login_settings: The login settings of instance. By default, passwords are randomly generated and notified to users via internal messages.
        :param pulumi.Input[pulumi.InputType['LaunchTemplatePlacementArgs']] placement: The location of instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID of instance. If this parameter is not specified, the default security group is bound.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateSystemDiskArgs']] system_disk: System disk configuration information of the instance. If this parameter is not specified, it is assigned according to the system default.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateTagSpecificationArgs']]]] tag_specifications: Tag description list.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] user_data: The data of users.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateVirtualPrivateCloudArgs']] virtual_private_cloud: The configuration information of VPC. If this parameter is not specified, the basic network is used by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LaunchTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cvm launch template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        my_favorite_image = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            image_name_regex="Final")
        demo = tencentcloud.cvm.LaunchTemplate("demo",
            launch_template_name="test",
            placement=tencentcloud.cvm.LaunchTemplatePlacementArgs(
                zone="ap-guangzhou-6",
                project_id=0,
            ),
            image_id=my_favorite_image.images[0].image_id)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param LaunchTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LaunchTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action_timer: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateActionTimerArgs']]] = None,
                 cam_role_name: Optional[pulumi.Input[str]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateDataDiskArgs']]]]] = None,
                 disable_api_termination: Optional[pulumi.Input[bool]] = None,
                 disaster_recover_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 enhanced_service: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateEnhancedServiceArgs']]] = None,
                 host_name: Optional[pulumi.Input[str]] = None,
                 hpc_cluster_id: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 instance_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInstanceChargePrepaidArgs']]] = None,
                 instance_charge_type: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 instance_market_options: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInstanceMarketOptionsArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 internet_accessible: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInternetAccessibleArgs']]] = None,
                 launch_template_name: Optional[pulumi.Input[str]] = None,
                 launch_template_version_description: Optional[pulumi.Input[str]] = None,
                 login_settings: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateLoginSettingsArgs']]] = None,
                 placement: Optional[pulumi.Input[pulumi.InputType['LaunchTemplatePlacementArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 system_disk: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateSystemDiskArgs']]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateTagSpecificationArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateVirtualPrivateCloudArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LaunchTemplateArgs.__new__(LaunchTemplateArgs)

            __props__.__dict__["action_timer"] = action_timer
            __props__.__dict__["cam_role_name"] = cam_role_name
            __props__.__dict__["client_token"] = client_token
            __props__.__dict__["data_disks"] = data_disks
            __props__.__dict__["disable_api_termination"] = disable_api_termination
            __props__.__dict__["disaster_recover_group_ids"] = disaster_recover_group_ids
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["enhanced_service"] = enhanced_service
            __props__.__dict__["host_name"] = host_name
            __props__.__dict__["hpc_cluster_id"] = hpc_cluster_id
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["instance_charge_prepaid"] = instance_charge_prepaid
            __props__.__dict__["instance_charge_type"] = instance_charge_type
            __props__.__dict__["instance_count"] = instance_count
            __props__.__dict__["instance_market_options"] = instance_market_options
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["internet_accessible"] = internet_accessible
            if launch_template_name is None and not opts.urn:
                raise TypeError("Missing required property 'launch_template_name'")
            __props__.__dict__["launch_template_name"] = launch_template_name
            __props__.__dict__["launch_template_version_description"] = launch_template_version_description
            __props__.__dict__["login_settings"] = login_settings
            if placement is None and not opts.urn:
                raise TypeError("Missing required property 'placement'")
            __props__.__dict__["placement"] = placement
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["system_disk"] = system_disk
            __props__.__dict__["tag_specifications"] = tag_specifications
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["virtual_private_cloud"] = virtual_private_cloud
        super(LaunchTemplate, __self__).__init__(
            'tencentcloud:Cvm/launchTemplate:LaunchTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action_timer: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateActionTimerArgs']]] = None,
            cam_role_name: Optional[pulumi.Input[str]] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateDataDiskArgs']]]]] = None,
            disable_api_termination: Optional[pulumi.Input[bool]] = None,
            disaster_recover_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dry_run: Optional[pulumi.Input[bool]] = None,
            enhanced_service: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateEnhancedServiceArgs']]] = None,
            host_name: Optional[pulumi.Input[str]] = None,
            hpc_cluster_id: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            instance_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInstanceChargePrepaidArgs']]] = None,
            instance_charge_type: Optional[pulumi.Input[str]] = None,
            instance_count: Optional[pulumi.Input[int]] = None,
            instance_market_options: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInstanceMarketOptionsArgs']]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            instance_type: Optional[pulumi.Input[str]] = None,
            internet_accessible: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateInternetAccessibleArgs']]] = None,
            launch_template_name: Optional[pulumi.Input[str]] = None,
            launch_template_version_description: Optional[pulumi.Input[str]] = None,
            login_settings: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateLoginSettingsArgs']]] = None,
            placement: Optional[pulumi.Input[pulumi.InputType['LaunchTemplatePlacementArgs']]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            system_disk: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateSystemDiskArgs']]] = None,
            tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateTagSpecificationArgs']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            user_data: Optional[pulumi.Input[str]] = None,
            virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['LaunchTemplateVirtualPrivateCloudArgs']]] = None) -> 'LaunchTemplate':
        """
        Get an existing LaunchTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateActionTimerArgs']] action_timer: Timed task.
        :param pulumi.Input[str] cam_role_name: The role name of CAM.
        :param pulumi.Input[str] client_token: A string to used guarantee request idempotency.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateDataDiskArgs']]]] data_disks: Data disk configuration information of the instance.
        :param pulumi.Input[bool] disable_api_termination: Instance destruction protection flag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disaster_recover_group_ids: The ID of disaster recover group.
        :param pulumi.Input[bool] dry_run: Whether to preflight only this request, true or false.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateEnhancedServiceArgs']] enhanced_service: Enhanced service. If this parameter is not specified, cloud monitoring and cloud security services will be enabled by default in public images.
        :param pulumi.Input[str] host_name: The host name of CVM.
        :param pulumi.Input[str] hpc_cluster_id: The ID of HPC cluster.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateInstanceChargePrepaidArgs']] instance_charge_prepaid: The configuration of charge prepaid.
        :param pulumi.Input[str] instance_charge_type: The charge type of instance. Default value: POSTPAID_BY_HOUR.
        :param pulumi.Input[int] instance_count: The number of instances purchased.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateInstanceMarketOptionsArgs']] instance_market_options: The marketplace options of instance.
        :param pulumi.Input[str] instance_name: The name of instance. If you do not specify an instance display name, 'Unnamed' is displayed by default.
        :param pulumi.Input[str] instance_type: The type of the instance. If this parameter is not specified, the system will dynamically specify the default model according to the resource sales in the current region.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateInternetAccessibleArgs']] internet_accessible: The information settings of public network bandwidth. If you do not specify this parameter, the default Internet bandwidth is 0 Mbps.
        :param pulumi.Input[str] launch_template_name: The name of launch template.
        :param pulumi.Input[str] launch_template_version_description: Instance launch template version description.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateLoginSettingsArgs']] login_settings: The login settings of instance. By default, passwords are randomly generated and notified to users via internal messages.
        :param pulumi.Input[pulumi.InputType['LaunchTemplatePlacementArgs']] placement: The location of instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: The security group ID of instance. If this parameter is not specified, the default security group is bound.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateSystemDiskArgs']] system_disk: System disk configuration information of the instance. If this parameter is not specified, it is assigned according to the system default.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LaunchTemplateTagSpecificationArgs']]]] tag_specifications: Tag description list.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] user_data: The data of users.
        :param pulumi.Input[pulumi.InputType['LaunchTemplateVirtualPrivateCloudArgs']] virtual_private_cloud: The configuration information of VPC. If this parameter is not specified, the basic network is used by default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LaunchTemplateState.__new__(_LaunchTemplateState)

        __props__.__dict__["action_timer"] = action_timer
        __props__.__dict__["cam_role_name"] = cam_role_name
        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["data_disks"] = data_disks
        __props__.__dict__["disable_api_termination"] = disable_api_termination
        __props__.__dict__["disaster_recover_group_ids"] = disaster_recover_group_ids
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["enhanced_service"] = enhanced_service
        __props__.__dict__["host_name"] = host_name
        __props__.__dict__["hpc_cluster_id"] = hpc_cluster_id
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["instance_charge_prepaid"] = instance_charge_prepaid
        __props__.__dict__["instance_charge_type"] = instance_charge_type
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["instance_market_options"] = instance_market_options
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["internet_accessible"] = internet_accessible
        __props__.__dict__["launch_template_name"] = launch_template_name
        __props__.__dict__["launch_template_version_description"] = launch_template_version_description
        __props__.__dict__["login_settings"] = login_settings
        __props__.__dict__["placement"] = placement
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["system_disk"] = system_disk
        __props__.__dict__["tag_specifications"] = tag_specifications
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["virtual_private_cloud"] = virtual_private_cloud
        return LaunchTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="actionTimer")
    def action_timer(self) -> pulumi.Output['outputs.LaunchTemplateActionTimer']:
        """
        Timed task.
        """
        return pulumi.get(self, "action_timer")

    @property
    @pulumi.getter(name="camRoleName")
    def cam_role_name(self) -> pulumi.Output[Optional[str]]:
        """
        The role name of CAM.
        """
        return pulumi.get(self, "cam_role_name")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[Optional[str]]:
        """
        A string to used guarantee request idempotency.
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> pulumi.Output[Optional[Sequence['outputs.LaunchTemplateDataDisk']]]:
        """
        Data disk configuration information of the instance.
        """
        return pulumi.get(self, "data_disks")

    @property
    @pulumi.getter(name="disableApiTermination")
    def disable_api_termination(self) -> pulumi.Output[Optional[bool]]:
        """
        Instance destruction protection flag.
        """
        return pulumi.get(self, "disable_api_termination")

    @property
    @pulumi.getter(name="disasterRecoverGroupIds")
    def disaster_recover_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The ID of disaster recover group.
        """
        return pulumi.get(self, "disaster_recover_group_ids")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to preflight only this request, true or false.
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter(name="enhancedService")
    def enhanced_service(self) -> pulumi.Output['outputs.LaunchTemplateEnhancedService']:
        """
        Enhanced service. If this parameter is not specified, cloud monitoring and cloud security services will be enabled by default in public images.
        """
        return pulumi.get(self, "enhanced_service")

    @property
    @pulumi.getter(name="hostName")
    def host_name(self) -> pulumi.Output[Optional[str]]:
        """
        The host name of CVM.
        """
        return pulumi.get(self, "host_name")

    @property
    @pulumi.getter(name="hpcClusterId")
    def hpc_cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of HPC cluster.
        """
        return pulumi.get(self, "hpc_cluster_id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="instanceChargePrepaid")
    def instance_charge_prepaid(self) -> pulumi.Output[Optional['outputs.LaunchTemplateInstanceChargePrepaid']]:
        """
        The configuration of charge prepaid.
        """
        return pulumi.get(self, "instance_charge_prepaid")

    @property
    @pulumi.getter(name="instanceChargeType")
    def instance_charge_type(self) -> pulumi.Output[str]:
        """
        The charge type of instance. Default value: POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "instance_charge_type")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[Optional[int]]:
        """
        The number of instances purchased.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="instanceMarketOptions")
    def instance_market_options(self) -> pulumi.Output[Optional['outputs.LaunchTemplateInstanceMarketOptions']]:
        """
        The marketplace options of instance.
        """
        return pulumi.get(self, "instance_market_options")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of instance. If you do not specify an instance display name, 'Unnamed' is displayed by default.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[str]:
        """
        The type of the instance. If this parameter is not specified, the system will dynamically specify the default model according to the resource sales in the current region.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="internetAccessible")
    def internet_accessible(self) -> pulumi.Output['outputs.LaunchTemplateInternetAccessible']:
        """
        The information settings of public network bandwidth. If you do not specify this parameter, the default Internet bandwidth is 0 Mbps.
        """
        return pulumi.get(self, "internet_accessible")

    @property
    @pulumi.getter(name="launchTemplateName")
    def launch_template_name(self) -> pulumi.Output[str]:
        """
        The name of launch template.
        """
        return pulumi.get(self, "launch_template_name")

    @property
    @pulumi.getter(name="launchTemplateVersionDescription")
    def launch_template_version_description(self) -> pulumi.Output[Optional[str]]:
        """
        Instance launch template version description.
        """
        return pulumi.get(self, "launch_template_version_description")

    @property
    @pulumi.getter(name="loginSettings")
    def login_settings(self) -> pulumi.Output['outputs.LaunchTemplateLoginSettings']:
        """
        The login settings of instance. By default, passwords are randomly generated and notified to users via internal messages.
        """
        return pulumi.get(self, "login_settings")

    @property
    @pulumi.getter
    def placement(self) -> pulumi.Output['outputs.LaunchTemplatePlacement']:
        """
        The location of instance.
        """
        return pulumi.get(self, "placement")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The security group ID of instance. If this parameter is not specified, the default security group is bound.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="systemDisk")
    def system_disk(self) -> pulumi.Output['outputs.LaunchTemplateSystemDisk']:
        """
        System disk configuration information of the instance. If this parameter is not specified, it is assigned according to the system default.
        """
        return pulumi.get(self, "system_disk")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> pulumi.Output[Optional[Sequence['outputs.LaunchTemplateTagSpecification']]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tag_specifications")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        """
        The data of users.
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="virtualPrivateCloud")
    def virtual_private_cloud(self) -> pulumi.Output['outputs.LaunchTemplateVirtualPrivateCloud']:
        """
        The configuration information of VPC. If this parameter is not specified, the basic network is used by default.
        """
        return pulumi.get(self, "virtual_private_cloud")

