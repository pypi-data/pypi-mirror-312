# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RebootInstanceArgs', 'RebootInstance']

@pulumi.input_type
class RebootInstanceArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 force_reboot: Optional[pulumi.Input[bool]] = None,
                 stop_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RebootInstance resource.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[bool] force_reboot: It has been deprecated from version 1.81.21. Please use `stop_type` instead. This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values are `TRUE` and `FALSE`. Default value: FALSE.
        :param pulumi.Input[str] stop_type: Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first, and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if force_reboot is not None:
            warnings.warn("""It has been deprecated from version 1.81.21. Please use `stop_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""force_reboot is deprecated: It has been deprecated from version 1.81.21. Please use `stop_type` instead.""")
        if force_reboot is not None:
            pulumi.set(__self__, "force_reboot", force_reboot)
        if stop_type is not None:
            pulumi.set(__self__, "stop_type", stop_type)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="forceReboot")
    def force_reboot(self) -> Optional[pulumi.Input[bool]]:
        """
        It has been deprecated from version 1.81.21. Please use `stop_type` instead. This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values are `TRUE` and `FALSE`. Default value: FALSE.
        """
        warnings.warn("""It has been deprecated from version 1.81.21. Please use `stop_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""force_reboot is deprecated: It has been deprecated from version 1.81.21. Please use `stop_type` instead.""")

        return pulumi.get(self, "force_reboot")

    @force_reboot.setter
    def force_reboot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_reboot", value)

    @property
    @pulumi.getter(name="stopType")
    def stop_type(self) -> Optional[pulumi.Input[str]]:
        """
        Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first, and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
        """
        return pulumi.get(self, "stop_type")

    @stop_type.setter
    def stop_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stop_type", value)


@pulumi.input_type
class _RebootInstanceState:
    def __init__(__self__, *,
                 force_reboot: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 stop_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RebootInstance resources.
        :param pulumi.Input[bool] force_reboot: It has been deprecated from version 1.81.21. Please use `stop_type` instead. This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values are `TRUE` and `FALSE`. Default value: FALSE.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] stop_type: Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first, and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
        """
        if force_reboot is not None:
            warnings.warn("""It has been deprecated from version 1.81.21. Please use `stop_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""force_reboot is deprecated: It has been deprecated from version 1.81.21. Please use `stop_type` instead.""")
        if force_reboot is not None:
            pulumi.set(__self__, "force_reboot", force_reboot)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if stop_type is not None:
            pulumi.set(__self__, "stop_type", stop_type)

    @property
    @pulumi.getter(name="forceReboot")
    def force_reboot(self) -> Optional[pulumi.Input[bool]]:
        """
        It has been deprecated from version 1.81.21. Please use `stop_type` instead. This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values are `TRUE` and `FALSE`. Default value: FALSE.
        """
        warnings.warn("""It has been deprecated from version 1.81.21. Please use `stop_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""force_reboot is deprecated: It has been deprecated from version 1.81.21. Please use `stop_type` instead.""")

        return pulumi.get(self, "force_reboot")

    @force_reboot.setter
    def force_reboot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_reboot", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="stopType")
    def stop_type(self) -> Optional[pulumi.Input[str]]:
        """
        Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first, and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
        """
        return pulumi.get(self, "stop_type")

    @stop_type.setter
    def stop_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stop_type", value)


class RebootInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_reboot: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 stop_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cvm reboot_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        reboot_instance = tencentcloud.cvm.RebootInstance("rebootInstance",
            instance_id="ins-f9jr4bd2",
            stop_type="SOFT_FIRST")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_reboot: It has been deprecated from version 1.81.21. Please use `stop_type` instead. This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values are `TRUE` and `FALSE`. Default value: FALSE.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] stop_type: Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first, and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RebootInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cvm reboot_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        reboot_instance = tencentcloud.cvm.RebootInstance("rebootInstance",
            instance_id="ins-f9jr4bd2",
            stop_type="SOFT_FIRST")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param RebootInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RebootInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 force_reboot: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 stop_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RebootInstanceArgs.__new__(RebootInstanceArgs)

            __props__.__dict__["force_reboot"] = force_reboot
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["stop_type"] = stop_type
        super(RebootInstance, __self__).__init__(
            'tencentcloud:Cvm/rebootInstance:RebootInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            force_reboot: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            stop_type: Optional[pulumi.Input[str]] = None) -> 'RebootInstance':
        """
        Get an existing RebootInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] force_reboot: It has been deprecated from version 1.81.21. Please use `stop_type` instead. This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values are `TRUE` and `FALSE`. Default value: FALSE.
        :param pulumi.Input[str] instance_id: Instance ID.
        :param pulumi.Input[str] stop_type: Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first, and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RebootInstanceState.__new__(_RebootInstanceState)

        __props__.__dict__["force_reboot"] = force_reboot
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["stop_type"] = stop_type
        return RebootInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forceReboot")
    def force_reboot(self) -> pulumi.Output[Optional[bool]]:
        """
        It has been deprecated from version 1.81.21. Please use `stop_type` instead. This parameter has been disused. We recommend using StopType instead. Note that ForceReboot and StopType parameters cannot be specified at the same time. Whether to forcibly restart an instance after a normal restart fails. Valid values are `TRUE` and `FALSE`. Default value: FALSE.
        """
        warnings.warn("""It has been deprecated from version 1.81.21. Please use `stop_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""force_reboot is deprecated: It has been deprecated from version 1.81.21. Please use `stop_type` instead.""")

        return pulumi.get(self, "force_reboot")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="stopType")
    def stop_type(self) -> pulumi.Output[Optional[str]]:
        """
        Shutdown type. Valid values: `SOFT`: soft shutdown; `HARD`: hard shutdown; `SOFT_FIRST`: perform a soft shutdown first, and perform a hard shutdown if the soft shutdown fails. Default value: SOFT.
        """
        return pulumi.get(self, "stop_type")

