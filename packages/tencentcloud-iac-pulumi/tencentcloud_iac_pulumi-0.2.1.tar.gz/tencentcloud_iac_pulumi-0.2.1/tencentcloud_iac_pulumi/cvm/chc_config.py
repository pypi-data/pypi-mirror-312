# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ChcConfigArgs', 'ChcConfig']

@pulumi.input_type
class ChcConfigArgs:
    def __init__(__self__, *,
                 chc_id: pulumi.Input[str],
                 bmc_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bmc_user: Optional[pulumi.Input[str]] = None,
                 bmc_virtual_private_cloud: Optional[pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs']] = None,
                 deploy_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deploy_virtual_private_cloud: Optional[pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs']] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ChcConfig resource.
        :param pulumi.Input[str] chc_id: CHC host ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bmc_security_group_ids: Out-of-band network security group list.
        :param pulumi.Input[str] bmc_user: Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        :param pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs'] bmc_virtual_private_cloud: Out-of-band network information.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deploy_security_group_ids: Deployment network security group list.
        :param pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs'] deploy_virtual_private_cloud: Deployment network information.
        :param pulumi.Input[str] device_type: Server type.
        :param pulumi.Input[str] instance_name: CHC host name.
        :param pulumi.Input[str] password: The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).
        """
        pulumi.set(__self__, "chc_id", chc_id)
        if bmc_security_group_ids is not None:
            pulumi.set(__self__, "bmc_security_group_ids", bmc_security_group_ids)
        if bmc_user is not None:
            pulumi.set(__self__, "bmc_user", bmc_user)
        if bmc_virtual_private_cloud is not None:
            pulumi.set(__self__, "bmc_virtual_private_cloud", bmc_virtual_private_cloud)
        if deploy_security_group_ids is not None:
            pulumi.set(__self__, "deploy_security_group_ids", deploy_security_group_ids)
        if deploy_virtual_private_cloud is not None:
            pulumi.set(__self__, "deploy_virtual_private_cloud", deploy_virtual_private_cloud)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="chcId")
    def chc_id(self) -> pulumi.Input[str]:
        """
        CHC host ID.
        """
        return pulumi.get(self, "chc_id")

    @chc_id.setter
    def chc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "chc_id", value)

    @property
    @pulumi.getter(name="bmcSecurityGroupIds")
    def bmc_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Out-of-band network security group list.
        """
        return pulumi.get(self, "bmc_security_group_ids")

    @bmc_security_group_ids.setter
    def bmc_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bmc_security_group_ids", value)

    @property
    @pulumi.getter(name="bmcUser")
    def bmc_user(self) -> Optional[pulumi.Input[str]]:
        """
        Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        """
        return pulumi.get(self, "bmc_user")

    @bmc_user.setter
    def bmc_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bmc_user", value)

    @property
    @pulumi.getter(name="bmcVirtualPrivateCloud")
    def bmc_virtual_private_cloud(self) -> Optional[pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs']]:
        """
        Out-of-band network information.
        """
        return pulumi.get(self, "bmc_virtual_private_cloud")

    @bmc_virtual_private_cloud.setter
    def bmc_virtual_private_cloud(self, value: Optional[pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs']]):
        pulumi.set(self, "bmc_virtual_private_cloud", value)

    @property
    @pulumi.getter(name="deploySecurityGroupIds")
    def deploy_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Deployment network security group list.
        """
        return pulumi.get(self, "deploy_security_group_ids")

    @deploy_security_group_ids.setter
    def deploy_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deploy_security_group_ids", value)

    @property
    @pulumi.getter(name="deployVirtualPrivateCloud")
    def deploy_virtual_private_cloud(self) -> Optional[pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs']]:
        """
        Deployment network information.
        """
        return pulumi.get(self, "deploy_virtual_private_cloud")

    @deploy_virtual_private_cloud.setter
    def deploy_virtual_private_cloud(self, value: Optional[pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs']]):
        pulumi.set(self, "deploy_virtual_private_cloud", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        CHC host name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class _ChcConfigState:
    def __init__(__self__, *,
                 bmc_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bmc_user: Optional[pulumi.Input[str]] = None,
                 bmc_virtual_private_cloud: Optional[pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs']] = None,
                 chc_id: Optional[pulumi.Input[str]] = None,
                 deploy_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deploy_virtual_private_cloud: Optional[pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs']] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ChcConfig resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bmc_security_group_ids: Out-of-band network security group list.
        :param pulumi.Input[str] bmc_user: Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        :param pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs'] bmc_virtual_private_cloud: Out-of-band network information.
        :param pulumi.Input[str] chc_id: CHC host ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deploy_security_group_ids: Deployment network security group list.
        :param pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs'] deploy_virtual_private_cloud: Deployment network information.
        :param pulumi.Input[str] device_type: Server type.
        :param pulumi.Input[str] instance_name: CHC host name.
        :param pulumi.Input[str] password: The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).
        """
        if bmc_security_group_ids is not None:
            pulumi.set(__self__, "bmc_security_group_ids", bmc_security_group_ids)
        if bmc_user is not None:
            pulumi.set(__self__, "bmc_user", bmc_user)
        if bmc_virtual_private_cloud is not None:
            pulumi.set(__self__, "bmc_virtual_private_cloud", bmc_virtual_private_cloud)
        if chc_id is not None:
            pulumi.set(__self__, "chc_id", chc_id)
        if deploy_security_group_ids is not None:
            pulumi.set(__self__, "deploy_security_group_ids", deploy_security_group_ids)
        if deploy_virtual_private_cloud is not None:
            pulumi.set(__self__, "deploy_virtual_private_cloud", deploy_virtual_private_cloud)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="bmcSecurityGroupIds")
    def bmc_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Out-of-band network security group list.
        """
        return pulumi.get(self, "bmc_security_group_ids")

    @bmc_security_group_ids.setter
    def bmc_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bmc_security_group_ids", value)

    @property
    @pulumi.getter(name="bmcUser")
    def bmc_user(self) -> Optional[pulumi.Input[str]]:
        """
        Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        """
        return pulumi.get(self, "bmc_user")

    @bmc_user.setter
    def bmc_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bmc_user", value)

    @property
    @pulumi.getter(name="bmcVirtualPrivateCloud")
    def bmc_virtual_private_cloud(self) -> Optional[pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs']]:
        """
        Out-of-band network information.
        """
        return pulumi.get(self, "bmc_virtual_private_cloud")

    @bmc_virtual_private_cloud.setter
    def bmc_virtual_private_cloud(self, value: Optional[pulumi.Input['ChcConfigBmcVirtualPrivateCloudArgs']]):
        pulumi.set(self, "bmc_virtual_private_cloud", value)

    @property
    @pulumi.getter(name="chcId")
    def chc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CHC host ID.
        """
        return pulumi.get(self, "chc_id")

    @chc_id.setter
    def chc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chc_id", value)

    @property
    @pulumi.getter(name="deploySecurityGroupIds")
    def deploy_security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Deployment network security group list.
        """
        return pulumi.get(self, "deploy_security_group_ids")

    @deploy_security_group_ids.setter
    def deploy_security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deploy_security_group_ids", value)

    @property
    @pulumi.getter(name="deployVirtualPrivateCloud")
    def deploy_virtual_private_cloud(self) -> Optional[pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs']]:
        """
        Deployment network information.
        """
        return pulumi.get(self, "deploy_virtual_private_cloud")

    @deploy_virtual_private_cloud.setter
    def deploy_virtual_private_cloud(self, value: Optional[pulumi.Input['ChcConfigDeployVirtualPrivateCloudArgs']]):
        pulumi.set(self, "deploy_virtual_private_cloud", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Server type.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        CHC host name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


class ChcConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bmc_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bmc_user: Optional[pulumi.Input[str]] = None,
                 bmc_virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['ChcConfigBmcVirtualPrivateCloudArgs']]] = None,
                 chc_id: Optional[pulumi.Input[str]] = None,
                 deploy_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deploy_virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['ChcConfigDeployVirtualPrivateCloudArgs']]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cvm chc_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        chc_config = tencentcloud.cvm.ChcConfig("chcConfig",
            bmc_security_group_ids=["sg-xxxxxx"],
            bmc_user="admin",
            bmc_virtual_private_cloud=tencentcloud.cvm.ChcConfigBmcVirtualPrivateCloudArgs(
                subnet_id="subnet-xxxxxx",
                vpc_id="vpc-xxxxxx",
            ),
            chc_id="chc-xxxxxx",
            deploy_security_group_ids=["sg-xxxxxx"],
            deploy_virtual_private_cloud=tencentcloud.cvm.ChcConfigDeployVirtualPrivateCloudArgs(
                subnet_id="subnet-xxxxxx",
                vpc_id="vpc-xxxxxx",
            ),
            instance_name="xxxxxx",
            password="xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cvm chc_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cvm/chcConfig:ChcConfig chc_config chc_config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bmc_security_group_ids: Out-of-band network security group list.
        :param pulumi.Input[str] bmc_user: Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        :param pulumi.Input[pulumi.InputType['ChcConfigBmcVirtualPrivateCloudArgs']] bmc_virtual_private_cloud: Out-of-band network information.
        :param pulumi.Input[str] chc_id: CHC host ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deploy_security_group_ids: Deployment network security group list.
        :param pulumi.Input[pulumi.InputType['ChcConfigDeployVirtualPrivateCloudArgs']] deploy_virtual_private_cloud: Deployment network information.
        :param pulumi.Input[str] device_type: Server type.
        :param pulumi.Input[str] instance_name: CHC host name.
        :param pulumi.Input[str] password: The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ChcConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cvm chc_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        chc_config = tencentcloud.cvm.ChcConfig("chcConfig",
            bmc_security_group_ids=["sg-xxxxxx"],
            bmc_user="admin",
            bmc_virtual_private_cloud=tencentcloud.cvm.ChcConfigBmcVirtualPrivateCloudArgs(
                subnet_id="subnet-xxxxxx",
                vpc_id="vpc-xxxxxx",
            ),
            chc_id="chc-xxxxxx",
            deploy_security_group_ids=["sg-xxxxxx"],
            deploy_virtual_private_cloud=tencentcloud.cvm.ChcConfigDeployVirtualPrivateCloudArgs(
                subnet_id="subnet-xxxxxx",
                vpc_id="vpc-xxxxxx",
            ),
            instance_name="xxxxxx",
            password="xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cvm chc_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cvm/chcConfig:ChcConfig chc_config chc_config_id
        ```

        :param str resource_name: The name of the resource.
        :param ChcConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ChcConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bmc_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 bmc_user: Optional[pulumi.Input[str]] = None,
                 bmc_virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['ChcConfigBmcVirtualPrivateCloudArgs']]] = None,
                 chc_id: Optional[pulumi.Input[str]] = None,
                 deploy_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deploy_virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['ChcConfigDeployVirtualPrivateCloudArgs']]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ChcConfigArgs.__new__(ChcConfigArgs)

            __props__.__dict__["bmc_security_group_ids"] = bmc_security_group_ids
            __props__.__dict__["bmc_user"] = bmc_user
            __props__.__dict__["bmc_virtual_private_cloud"] = bmc_virtual_private_cloud
            if chc_id is None and not opts.urn:
                raise TypeError("Missing required property 'chc_id'")
            __props__.__dict__["chc_id"] = chc_id
            __props__.__dict__["deploy_security_group_ids"] = deploy_security_group_ids
            __props__.__dict__["deploy_virtual_private_cloud"] = deploy_virtual_private_cloud
            __props__.__dict__["device_type"] = device_type
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ChcConfig, __self__).__init__(
            'tencentcloud:Cvm/chcConfig:ChcConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bmc_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            bmc_user: Optional[pulumi.Input[str]] = None,
            bmc_virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['ChcConfigBmcVirtualPrivateCloudArgs']]] = None,
            chc_id: Optional[pulumi.Input[str]] = None,
            deploy_security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            deploy_virtual_private_cloud: Optional[pulumi.Input[pulumi.InputType['ChcConfigDeployVirtualPrivateCloudArgs']]] = None,
            device_type: Optional[pulumi.Input[str]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None) -> 'ChcConfig':
        """
        Get an existing ChcConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bmc_security_group_ids: Out-of-band network security group list.
        :param pulumi.Input[str] bmc_user: Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        :param pulumi.Input[pulumi.InputType['ChcConfigBmcVirtualPrivateCloudArgs']] bmc_virtual_private_cloud: Out-of-band network information.
        :param pulumi.Input[str] chc_id: CHC host ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deploy_security_group_ids: Deployment network security group list.
        :param pulumi.Input[pulumi.InputType['ChcConfigDeployVirtualPrivateCloudArgs']] deploy_virtual_private_cloud: Deployment network information.
        :param pulumi.Input[str] device_type: Server type.
        :param pulumi.Input[str] instance_name: CHC host name.
        :param pulumi.Input[str] password: The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ChcConfigState.__new__(_ChcConfigState)

        __props__.__dict__["bmc_security_group_ids"] = bmc_security_group_ids
        __props__.__dict__["bmc_user"] = bmc_user
        __props__.__dict__["bmc_virtual_private_cloud"] = bmc_virtual_private_cloud
        __props__.__dict__["chc_id"] = chc_id
        __props__.__dict__["deploy_security_group_ids"] = deploy_security_group_ids
        __props__.__dict__["deploy_virtual_private_cloud"] = deploy_virtual_private_cloud
        __props__.__dict__["device_type"] = device_type
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["password"] = password
        return ChcConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bmcSecurityGroupIds")
    def bmc_security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Out-of-band network security group list.
        """
        return pulumi.get(self, "bmc_security_group_ids")

    @property
    @pulumi.getter(name="bmcUser")
    def bmc_user(self) -> pulumi.Output[Optional[str]]:
        """
        Valid characters: Letters, numbers, hyphens and underscores. Only set when update password.
        """
        return pulumi.get(self, "bmc_user")

    @property
    @pulumi.getter(name="bmcVirtualPrivateCloud")
    def bmc_virtual_private_cloud(self) -> pulumi.Output['outputs.ChcConfigBmcVirtualPrivateCloud']:
        """
        Out-of-band network information.
        """
        return pulumi.get(self, "bmc_virtual_private_cloud")

    @property
    @pulumi.getter(name="chcId")
    def chc_id(self) -> pulumi.Output[str]:
        """
        CHC host ID.
        """
        return pulumi.get(self, "chc_id")

    @property
    @pulumi.getter(name="deploySecurityGroupIds")
    def deploy_security_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Deployment network security group list.
        """
        return pulumi.get(self, "deploy_security_group_ids")

    @property
    @pulumi.getter(name="deployVirtualPrivateCloud")
    def deploy_virtual_private_cloud(self) -> pulumi.Output['outputs.ChcConfigDeployVirtualPrivateCloud']:
        """
        Deployment network information.
        """
        return pulumi.get(self, "deploy_virtual_private_cloud")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Output[str]:
        """
        Server type.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        CHC host name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password can contain 8 to 16 characters, including letters, numbers and special symbols (()`~!@#$%^&amp;amp;*-+=_|{}).
        """
        return pulumi.get(self, "password")

