# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetImageSharePermissionResult',
    'AwaitableGetImageSharePermissionResult',
    'get_image_share_permission',
    'get_image_share_permission_output',
]

@pulumi.output_type
class GetImageSharePermissionResult:
    """
    A collection of values returned by getImageSharePermission.
    """
    def __init__(__self__, id=None, image_id=None, result_output_file=None, share_permission_sets=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if share_permission_sets and not isinstance(share_permission_sets, list):
            raise TypeError("Expected argument 'share_permission_sets' to be a list")
        pulumi.set(__self__, "share_permission_sets", share_permission_sets)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sharePermissionSets")
    def share_permission_sets(self) -> Sequence['outputs.GetImageSharePermissionSharePermissionSetResult']:
        """
        Information on image sharing.
        """
        return pulumi.get(self, "share_permission_sets")


class AwaitableGetImageSharePermissionResult(GetImageSharePermissionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageSharePermissionResult(
            id=self.id,
            image_id=self.image_id,
            result_output_file=self.result_output_file,
            share_permission_sets=self.share_permission_sets)


def get_image_share_permission(image_id: Optional[str] = None,
                               result_output_file: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageSharePermissionResult:
    """
    Use this data source to query detailed information of cvm image_share_permission

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    image_share_permission = tencentcloud.Cvm.get_image_share_permission(image_id="img-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str image_id: The ID of the image to be shared.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['imageId'] = image_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cvm/getImageSharePermission:getImageSharePermission', __args__, opts=opts, typ=GetImageSharePermissionResult).value

    return AwaitableGetImageSharePermissionResult(
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        share_permission_sets=pulumi.get(__ret__, 'share_permission_sets'))


@_utilities.lift_output_func(get_image_share_permission)
def get_image_share_permission_output(image_id: Optional[pulumi.Input[str]] = None,
                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImageSharePermissionResult]:
    """
    Use this data source to query detailed information of cvm image_share_permission

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    image_share_permission = tencentcloud.Cvm.get_image_share_permission(image_id="img-xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str image_id: The ID of the image to be shared.
    :param str result_output_file: Used to save results.
    """
    ...
