# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ExportImagesArgs', 'ExportImages']

@pulumi.input_type
class ExportImagesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 file_name_prefix: pulumi.Input[str],
                 image_id: pulumi.Input[str],
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 export_format: Optional[pulumi.Input[str]] = None,
                 only_export_root_disk: Optional[pulumi.Input[bool]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ExportImages resource.
        :param pulumi.Input[str] bucket_name: COS bucket name.
        :param pulumi.Input[str] file_name_prefix: Prefix of exported file.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[bool] dry_run: Check whether the image can be exported.
        :param pulumi.Input[str] export_format: Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        :param pulumi.Input[bool] only_export_root_disk: Whether to export only the system disk.
        :param pulumi.Input[str] role_name: Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "file_name_prefix", file_name_prefix)
        pulumi.set(__self__, "image_id", image_id)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if export_format is not None:
            pulumi.set(__self__, "export_format", export_format)
        if only_export_root_disk is not None:
            pulumi.set(__self__, "only_export_root_disk", only_export_root_disk)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        COS bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="fileNamePrefix")
    def file_name_prefix(self) -> pulumi.Input[str]:
        """
        Prefix of exported file.
        """
        return pulumi.get(self, "file_name_prefix")

    @file_name_prefix.setter
    def file_name_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_name_prefix", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Check whether the image can be exported.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="exportFormat")
    def export_format(self) -> Optional[pulumi.Input[str]]:
        """
        Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        """
        return pulumi.get(self, "export_format")

    @export_format.setter
    def export_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_format", value)

    @property
    @pulumi.getter(name="onlyExportRootDisk")
    def only_export_root_disk(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to export only the system disk.
        """
        return pulumi.get(self, "only_export_root_disk")

    @only_export_root_disk.setter
    def only_export_root_disk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_export_root_disk", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


@pulumi.input_type
class _ExportImagesState:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 export_format: Optional[pulumi.Input[str]] = None,
                 file_name_prefix: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 only_export_root_disk: Optional[pulumi.Input[bool]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ExportImages resources.
        :param pulumi.Input[str] bucket_name: COS bucket name.
        :param pulumi.Input[bool] dry_run: Check whether the image can be exported.
        :param pulumi.Input[str] export_format: Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        :param pulumi.Input[str] file_name_prefix: Prefix of exported file.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[bool] only_export_root_disk: Whether to export only the system disk.
        :param pulumi.Input[str] role_name: Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if export_format is not None:
            pulumi.set(__self__, "export_format", export_format)
        if file_name_prefix is not None:
            pulumi.set(__self__, "file_name_prefix", file_name_prefix)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if only_export_root_disk is not None:
            pulumi.set(__self__, "only_export_root_disk", only_export_root_disk)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        COS bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Check whether the image can be exported.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="exportFormat")
    def export_format(self) -> Optional[pulumi.Input[str]]:
        """
        Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        """
        return pulumi.get(self, "export_format")

    @export_format.setter
    def export_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "export_format", value)

    @property
    @pulumi.getter(name="fileNamePrefix")
    def file_name_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix of exported file.
        """
        return pulumi.get(self, "file_name_prefix")

    @file_name_prefix.setter
    def file_name_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_prefix", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="onlyExportRootDisk")
    def only_export_root_disk(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to export only the system disk.
        """
        return pulumi.get(self, "only_export_root_disk")

    @only_export_root_disk.setter
    def only_export_root_disk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "only_export_root_disk", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


class ExportImages(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 export_format: Optional[pulumi.Input[str]] = None,
                 file_name_prefix: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 only_export_root_disk: Optional[pulumi.Input[bool]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cvm export_images

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        export_images = tencentcloud.cvm.ExportImages("exportImages",
            bucket_name="xxxxxx",
            file_name_prefix="test-",
            image_id="img-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: COS bucket name.
        :param pulumi.Input[bool] dry_run: Check whether the image can be exported.
        :param pulumi.Input[str] export_format: Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        :param pulumi.Input[str] file_name_prefix: Prefix of exported file.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[bool] only_export_root_disk: Whether to export only the system disk.
        :param pulumi.Input[str] role_name: Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ExportImagesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cvm export_images

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        export_images = tencentcloud.cvm.ExportImages("exportImages",
            bucket_name="xxxxxx",
            file_name_prefix="test-",
            image_id="img-xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ExportImagesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ExportImagesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 export_format: Optional[pulumi.Input[str]] = None,
                 file_name_prefix: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 only_export_root_disk: Optional[pulumi.Input[bool]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ExportImagesArgs.__new__(ExportImagesArgs)

            if bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 'bucket_name'")
            __props__.__dict__["bucket_name"] = bucket_name
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["export_format"] = export_format
            if file_name_prefix is None and not opts.urn:
                raise TypeError("Missing required property 'file_name_prefix'")
            __props__.__dict__["file_name_prefix"] = file_name_prefix
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["only_export_root_disk"] = only_export_root_disk
            __props__.__dict__["role_name"] = role_name
        super(ExportImages, __self__).__init__(
            'tencentcloud:Cvm/exportImages:ExportImages',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket_name: Optional[pulumi.Input[str]] = None,
            dry_run: Optional[pulumi.Input[bool]] = None,
            export_format: Optional[pulumi.Input[str]] = None,
            file_name_prefix: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            only_export_root_disk: Optional[pulumi.Input[bool]] = None,
            role_name: Optional[pulumi.Input[str]] = None) -> 'ExportImages':
        """
        Get an existing ExportImages resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket_name: COS bucket name.
        :param pulumi.Input[bool] dry_run: Check whether the image can be exported.
        :param pulumi.Input[str] export_format: Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        :param pulumi.Input[str] file_name_prefix: Prefix of exported file.
        :param pulumi.Input[str] image_id: Image ID.
        :param pulumi.Input[bool] only_export_root_disk: Whether to export only the system disk.
        :param pulumi.Input[str] role_name: Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ExportImagesState.__new__(_ExportImagesState)

        __props__.__dict__["bucket_name"] = bucket_name
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["export_format"] = export_format
        __props__.__dict__["file_name_prefix"] = file_name_prefix
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["only_export_root_disk"] = only_export_root_disk
        __props__.__dict__["role_name"] = role_name
        return ExportImages(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Output[str]:
        """
        COS bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[bool]]:
        """
        Check whether the image can be exported.
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter(name="exportFormat")
    def export_format(self) -> pulumi.Output[Optional[str]]:
        """
        Format of the exported image file. Valid values: RAW, QCOW2, VHD and VMDK. Default value: RAW.
        """
        return pulumi.get(self, "export_format")

    @property
    @pulumi.getter(name="fileNamePrefix")
    def file_name_prefix(self) -> pulumi.Output[str]:
        """
        Prefix of exported file.
        """
        return pulumi.get(self, "file_name_prefix")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        Image ID.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="onlyExportRootDisk")
    def only_export_root_disk(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to export only the system disk.
        """
        return pulumi.get(self, "only_export_root_disk")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[Optional[str]]:
        """
        Role name (Default: CVM_QcsRole). Before exporting the images, make sure the role exists, and it has write permission to COS.
        """
        return pulumi.get(self, "role_name")

