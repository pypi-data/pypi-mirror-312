# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImportImageArgs', 'ImportImage']

@pulumi.input_type
class ImportImageArgs:
    def __init__(__self__, *,
                 architecture: pulumi.Input[str],
                 image_name: pulumi.Input[str],
                 image_url: pulumi.Input[str],
                 os_type: pulumi.Input[str],
                 os_version: pulumi.Input[str],
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 image_description: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]]] = None):
        """
        The set of arguments for constructing a ImportImage resource.
        :param pulumi.Input[str] architecture: OS architecture of the image to be imported, `x86_64` or `i386`.
        :param pulumi.Input[str] image_name: Image name.
        :param pulumi.Input[str] image_url: Address on COS where the image to be imported is stored.
        :param pulumi.Input[str] os_type: OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[str] os_version: OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[str] boot_mode: Boot mode.
        :param pulumi.Input[bool] dry_run: Dry run to check the parameters without performing the operation.
        :param pulumi.Input[bool] force: Whether to force import the image.
        :param pulumi.Input[str] image_description: Image description.
        :param pulumi.Input[str] license_type: The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
               license BYOL: Bring Your Own License.
        :param pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]] tag_specifications: Tag description list. This parameter is used to bind a tag to a custom image.
        """
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_url", image_url)
        pulumi.set(__self__, "os_type", os_type)
        pulumi.set(__self__, "os_version", os_version)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if image_description is not None:
            pulumi.set(__self__, "image_description", image_description)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Input[str]:
        """
        OS architecture of the image to be imported, `x86_64` or `i386`.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: pulumi.Input[str]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[str]:
        """
        Image name.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Input[str]:
        """
        Address on COS where the image to be imported is stored.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Input[str]:
        """
        OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        systems.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Input[str]:
        """
        OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        systems.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Boot mode.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Dry run to check the parameters without performing the operation.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force import the image.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="imageDescription")
    def image_description(self) -> Optional[pulumi.Input[str]]:
        """
        Image description.
        """
        return pulumi.get(self, "image_description")

    @image_description.setter
    def image_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_description", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
        license BYOL: Bring Your Own License.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]]]:
        """
        Tag description list. This parameter is used to bind a tag to a custom image.
        """
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)


@pulumi.input_type
class _ImportImageState:
    def __init__(__self__, *,
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 image_description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]]] = None):
        """
        Input properties used for looking up and filtering ImportImage resources.
        :param pulumi.Input[str] architecture: OS architecture of the image to be imported, `x86_64` or `i386`.
        :param pulumi.Input[str] boot_mode: Boot mode.
        :param pulumi.Input[bool] dry_run: Dry run to check the parameters without performing the operation.
        :param pulumi.Input[bool] force: Whether to force import the image.
        :param pulumi.Input[str] image_description: Image description.
        :param pulumi.Input[str] image_name: Image name.
        :param pulumi.Input[str] image_url: Address on COS where the image to be imported is stored.
        :param pulumi.Input[str] license_type: The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
               license BYOL: Bring Your Own License.
        :param pulumi.Input[str] os_type: OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[str] os_version: OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]] tag_specifications: Tag description list. This parameter is used to bind a tag to a custom image.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if image_description is not None:
            pulumi.set(__self__, "image_description", image_description)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if os_version is not None:
            pulumi.set(__self__, "os_version", os_version)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        """
        OS architecture of the image to be imported, `x86_64` or `i386`.
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Boot mode.
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Dry run to check the parameters without performing the operation.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force import the image.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="imageDescription")
    def image_description(self) -> Optional[pulumi.Input[str]]:
        """
        Image description.
        """
        return pulumi.get(self, "image_description")

    @image_description.setter
    def image_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_description", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[str]]:
        """
        Image name.
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Address on COS where the image to be imported is stored.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[str]]:
        """
        The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
        license BYOL: Bring Your Own License.
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[str]]:
        """
        OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        systems.
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> Optional[pulumi.Input[str]]:
        """
        OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        systems.
        """
        return pulumi.get(self, "os_version")

    @os_version.setter
    def os_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_version", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]]]:
        """
        Tag description list. This parameter is used to bind a tag to a custom image.
        """
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportImageTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)


class ImportImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 image_description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportImageTagSpecificationArgs']]]]] = None,
                 __props__=None):
        """
        Create a ImportImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] architecture: OS architecture of the image to be imported, `x86_64` or `i386`.
        :param pulumi.Input[str] boot_mode: Boot mode.
        :param pulumi.Input[bool] dry_run: Dry run to check the parameters without performing the operation.
        :param pulumi.Input[bool] force: Whether to force import the image.
        :param pulumi.Input[str] image_description: Image description.
        :param pulumi.Input[str] image_name: Image name.
        :param pulumi.Input[str] image_url: Address on COS where the image to be imported is stored.
        :param pulumi.Input[str] license_type: The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
               license BYOL: Bring Your Own License.
        :param pulumi.Input[str] os_type: OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[str] os_version: OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportImageTagSpecificationArgs']]]] tag_specifications: Tag description list. This parameter is used to bind a tag to a custom image.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImportImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ImportImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ImportImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImportImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 boot_mode: Optional[pulumi.Input[str]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 image_description: Optional[pulumi.Input[str]] = None,
                 image_name: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 license_type: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 os_version: Optional[pulumi.Input[str]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportImageTagSpecificationArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImportImageArgs.__new__(ImportImageArgs)

            if architecture is None and not opts.urn:
                raise TypeError("Missing required property 'architecture'")
            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["boot_mode"] = boot_mode
            __props__.__dict__["dry_run"] = dry_run
            __props__.__dict__["force"] = force
            __props__.__dict__["image_description"] = image_description
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            if image_url is None and not opts.urn:
                raise TypeError("Missing required property 'image_url'")
            __props__.__dict__["image_url"] = image_url
            __props__.__dict__["license_type"] = license_type
            if os_type is None and not opts.urn:
                raise TypeError("Missing required property 'os_type'")
            __props__.__dict__["os_type"] = os_type
            if os_version is None and not opts.urn:
                raise TypeError("Missing required property 'os_version'")
            __props__.__dict__["os_version"] = os_version
            __props__.__dict__["tag_specifications"] = tag_specifications
        super(ImportImage, __self__).__init__(
            'tencentcloud:Cvm/importImage:ImportImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            architecture: Optional[pulumi.Input[str]] = None,
            boot_mode: Optional[pulumi.Input[str]] = None,
            dry_run: Optional[pulumi.Input[bool]] = None,
            force: Optional[pulumi.Input[bool]] = None,
            image_description: Optional[pulumi.Input[str]] = None,
            image_name: Optional[pulumi.Input[str]] = None,
            image_url: Optional[pulumi.Input[str]] = None,
            license_type: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            os_version: Optional[pulumi.Input[str]] = None,
            tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportImageTagSpecificationArgs']]]]] = None) -> 'ImportImage':
        """
        Get an existing ImportImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] architecture: OS architecture of the image to be imported, `x86_64` or `i386`.
        :param pulumi.Input[str] boot_mode: Boot mode.
        :param pulumi.Input[bool] dry_run: Dry run to check the parameters without performing the operation.
        :param pulumi.Input[bool] force: Whether to force import the image.
        :param pulumi.Input[str] image_description: Image description.
        :param pulumi.Input[str] image_name: Image name.
        :param pulumi.Input[str] image_url: Address on COS where the image to be imported is stored.
        :param pulumi.Input[str] license_type: The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
               license BYOL: Bring Your Own License.
        :param pulumi.Input[str] os_type: OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[str] os_version: OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
               systems.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportImageTagSpecificationArgs']]]] tag_specifications: Tag description list. This parameter is used to bind a tag to a custom image.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImportImageState.__new__(_ImportImageState)

        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["boot_mode"] = boot_mode
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["force"] = force
        __props__.__dict__["image_description"] = image_description
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["image_url"] = image_url
        __props__.__dict__["license_type"] = license_type
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["os_version"] = os_version
        __props__.__dict__["tag_specifications"] = tag_specifications
        return ImportImage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[str]:
        """
        OS architecture of the image to be imported, `x86_64` or `i386`.
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Boot mode.
        """
        return pulumi.get(self, "boot_mode")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[bool]]:
        """
        Dry run to check the parameters without performing the operation.
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to force import the image.
        """
        return pulumi.get(self, "force")

    @property
    @pulumi.getter(name="imageDescription")
    def image_description(self) -> pulumi.Output[Optional[str]]:
        """
        Image description.
        """
        return pulumi.get(self, "image_description")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[str]:
        """
        Image name.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> pulumi.Output[str]:
        """
        Address on COS where the image to be imported is stored.
        """
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Output[Optional[str]]:
        """
        The license type used to activate the OS after importing an image. Valid values: TencentCloud: Tencent Cloud official
        license BYOL: Bring Your Own License.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[str]:
        """
        OS type of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        systems.
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter(name="osVersion")
    def os_version(self) -> pulumi.Output[str]:
        """
        OS version of the image to be imported. You can call `DescribeImportImageOs` to obtain the list of supported operating
        systems.
        """
        return pulumi.get(self, "os_version")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> pulumi.Output[Optional[Sequence['outputs.ImportImageTagSpecification']]]:
        """
        Tag description list. This parameter is used to bind a tag to a custom image.
        """
        return pulumi.get(self, "tag_specifications")

