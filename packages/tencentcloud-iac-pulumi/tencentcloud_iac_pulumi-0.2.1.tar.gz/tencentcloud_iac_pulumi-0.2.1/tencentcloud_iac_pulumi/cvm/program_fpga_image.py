# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ProgramFpgaImageArgs', 'ProgramFpgaImage']

@pulumi.input_type
class ProgramFpgaImageArgs:
    def __init__(__self__, *,
                 fpga_url: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 dbd_fs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ProgramFpgaImage resource.
        :param pulumi.Input[str] fpga_url: COS URL address of the FPGA image file.
        :param pulumi.Input[str] instance_id: The ID information of the instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dbd_fs: The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
               by the instance by default.
        :param pulumi.Input[bool] dry_run: Trial run, will not perform the actual burning action, the default is False.
        """
        pulumi.set(__self__, "fpga_url", fpga_url)
        pulumi.set(__self__, "instance_id", instance_id)
        if dbd_fs is not None:
            pulumi.set(__self__, "dbd_fs", dbd_fs)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)

    @property
    @pulumi.getter(name="fpgaUrl")
    def fpga_url(self) -> pulumi.Input[str]:
        """
        COS URL address of the FPGA image file.
        """
        return pulumi.get(self, "fpga_url")

    @fpga_url.setter
    def fpga_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "fpga_url", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID information of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="dbdFs")
    def dbd_fs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
        by the instance by default.
        """
        return pulumi.get(self, "dbd_fs")

    @dbd_fs.setter
    def dbd_fs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dbd_fs", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Trial run, will not perform the actual burning action, the default is False.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)


@pulumi.input_type
class _ProgramFpgaImageState:
    def __init__(__self__, *,
                 dbd_fs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 fpga_url: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProgramFpgaImage resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dbd_fs: The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
               by the instance by default.
        :param pulumi.Input[bool] dry_run: Trial run, will not perform the actual burning action, the default is False.
        :param pulumi.Input[str] fpga_url: COS URL address of the FPGA image file.
        :param pulumi.Input[str] instance_id: The ID information of the instance.
        """
        if dbd_fs is not None:
            pulumi.set(__self__, "dbd_fs", dbd_fs)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if fpga_url is not None:
            pulumi.set(__self__, "fpga_url", fpga_url)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="dbdFs")
    def dbd_fs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
        by the instance by default.
        """
        return pulumi.get(self, "dbd_fs")

    @dbd_fs.setter
    def dbd_fs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dbd_fs", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Trial run, will not perform the actual burning action, the default is False.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter(name="fpgaUrl")
    def fpga_url(self) -> Optional[pulumi.Input[str]]:
        """
        COS URL address of the FPGA image file.
        """
        return pulumi.get(self, "fpga_url")

    @fpga_url.setter
    def fpga_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fpga_url", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID information of the instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class ProgramFpgaImage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbd_fs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 fpga_url: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a ProgramFpgaImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dbd_fs: The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
               by the instance by default.
        :param pulumi.Input[bool] dry_run: Trial run, will not perform the actual burning action, the default is False.
        :param pulumi.Input[str] fpga_url: COS URL address of the FPGA image file.
        :param pulumi.Input[str] instance_id: The ID information of the instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProgramFpgaImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProgramFpgaImage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProgramFpgaImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProgramFpgaImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dbd_fs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 fpga_url: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProgramFpgaImageArgs.__new__(ProgramFpgaImageArgs)

            __props__.__dict__["dbd_fs"] = dbd_fs
            __props__.__dict__["dry_run"] = dry_run
            if fpga_url is None and not opts.urn:
                raise TypeError("Missing required property 'fpga_url'")
            __props__.__dict__["fpga_url"] = fpga_url
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
        super(ProgramFpgaImage, __self__).__init__(
            'tencentcloud:Cvm/programFpgaImage:ProgramFpgaImage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dbd_fs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dry_run: Optional[pulumi.Input[bool]] = None,
            fpga_url: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'ProgramFpgaImage':
        """
        Get an existing ProgramFpgaImage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dbd_fs: The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
               by the instance by default.
        :param pulumi.Input[bool] dry_run: Trial run, will not perform the actual burning action, the default is False.
        :param pulumi.Input[str] fpga_url: COS URL address of the FPGA image file.
        :param pulumi.Input[str] instance_id: The ID information of the instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProgramFpgaImageState.__new__(_ProgramFpgaImageState)

        __props__.__dict__["dbd_fs"] = dbd_fs
        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["fpga_url"] = fpga_url
        __props__.__dict__["instance_id"] = instance_id
        return ProgramFpgaImage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dbdFs")
    def dbd_fs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The DBDF number of the FPGA card on the instance, if left blank, the FPGA image will be burned to all FPGA cards owned
        by the instance by default.
        """
        return pulumi.get(self, "dbd_fs")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[Optional[bool]]:
        """
        Trial run, will not perform the actual burning action, the default is False.
        """
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter(name="fpgaUrl")
    def fpga_url(self) -> pulumi.Output[str]:
        """
        COS URL address of the FPGA image file.
        """
        return pulumi.get(self, "fpga_url")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID information of the instance.
        """
        return pulumi.get(self, "instance_id")

