# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceTransparentDataEncryptionArgs', 'InstanceTransparentDataEncryption']

@pulumi.input_type
class InstanceTransparentDataEncryptionArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 kms_region: pulumi.Input[str],
                 key_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InstanceTransparentDataEncryption resource.
        :param pulumi.Input[str] instance_id: Instance ID, for example: cmgo-p8vn ***. Currently supported general versions include: 4.4 and 5.0, but the cloud disk version is not currently supported.
        :param pulumi.Input[str] kms_region: The region where the Key Management Service (KMS) serves, such as ap-shanghai.
        :param pulumi.Input[str] key_id: Key ID. If this parameter is not set and the specific key ID is not specified, Tencent Cloud will automatically generate
               the key and this key will be beyond the control of Terraform.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "kms_region", kms_region)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance ID, for example: cmgo-p8vn ***. Currently supported general versions include: 4.4 and 5.0, but the cloud disk version is not currently supported.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="kmsRegion")
    def kms_region(self) -> pulumi.Input[str]:
        """
        The region where the Key Management Service (KMS) serves, such as ap-shanghai.
        """
        return pulumi.get(self, "kms_region")

    @kms_region.setter
    def kms_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_region", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key ID. If this parameter is not set and the specific key ID is not specified, Tencent Cloud will automatically generate
        the key and this key will be beyond the control of Terraform.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)


@pulumi.input_type
class _InstanceTransparentDataEncryptionState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 key_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTransparentDataEncryptionKeyInfoListArgs']]]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None,
                 transparent_data_encryption_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InstanceTransparentDataEncryption resources.
        :param pulumi.Input[str] instance_id: Instance ID, for example: cmgo-p8vn ***. Currently supported general versions include: 4.4 and 5.0, but the cloud disk version is not currently supported.
        :param pulumi.Input[str] key_id: Key ID. If this parameter is not set and the specific key ID is not specified, Tencent Cloud will automatically generate
               the key and this key will be beyond the control of Terraform.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceTransparentDataEncryptionKeyInfoListArgs']]] key_info_lists: List of bound keys.
        :param pulumi.Input[str] kms_region: The region where the Key Management Service (KMS) serves, such as ap-shanghai.
        :param pulumi.Input[str] transparent_data_encryption_status: Represents whether transparent encryption is turned on. Valid values:
               - close: Not opened;
               - open: It has been opened.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_info_lists is not None:
            pulumi.set(__self__, "key_info_lists", key_info_lists)
        if kms_region is not None:
            pulumi.set(__self__, "kms_region", kms_region)
        if transparent_data_encryption_status is not None:
            pulumi.set(__self__, "transparent_data_encryption_status", transparent_data_encryption_status)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID, for example: cmgo-p8vn ***. Currently supported general versions include: 4.4 and 5.0, but the cloud disk version is not currently supported.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Key ID. If this parameter is not set and the specific key ID is not specified, Tencent Cloud will automatically generate
        the key and this key will be beyond the control of Terraform.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keyInfoLists")
    def key_info_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTransparentDataEncryptionKeyInfoListArgs']]]]:
        """
        List of bound keys.
        """
        return pulumi.get(self, "key_info_lists")

    @key_info_lists.setter
    def key_info_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTransparentDataEncryptionKeyInfoListArgs']]]]):
        pulumi.set(self, "key_info_lists", value)

    @property
    @pulumi.getter(name="kmsRegion")
    def kms_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region where the Key Management Service (KMS) serves, such as ap-shanghai.
        """
        return pulumi.get(self, "kms_region")

    @kms_region.setter
    def kms_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_region", value)

    @property
    @pulumi.getter(name="transparentDataEncryptionStatus")
    def transparent_data_encryption_status(self) -> Optional[pulumi.Input[str]]:
        """
        Represents whether transparent encryption is turned on. Valid values:
        - close: Not opened;
        - open: It has been opened.
        """
        return pulumi.get(self, "transparent_data_encryption_status")

    @transparent_data_encryption_status.setter
    def transparent_data_encryption_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transparent_data_encryption_status", value)


class InstanceTransparentDataEncryption(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to enable mongodb transparent data encryption

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        encryption = tencentcloud.mongodb.InstanceTransparentDataEncryption("encryption",
            instance_id="cmgo-xxxxxx",
            kms_region="ap-guangzhou")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mongodb transparent data encryption can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mongodb/instanceTransparentDataEncryption:InstanceTransparentDataEncryption encryption ${instanceId}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Instance ID, for example: cmgo-p8vn ***. Currently supported general versions include: 4.4 and 5.0, but the cloud disk version is not currently supported.
        :param pulumi.Input[str] key_id: Key ID. If this parameter is not set and the specific key ID is not specified, Tencent Cloud will automatically generate
               the key and this key will be beyond the control of Terraform.
        :param pulumi.Input[str] kms_region: The region where the Key Management Service (KMS) serves, such as ap-shanghai.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceTransparentDataEncryptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to enable mongodb transparent data encryption

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        encryption = tencentcloud.mongodb.InstanceTransparentDataEncryption("encryption",
            instance_id="cmgo-xxxxxx",
            kms_region="ap-guangzhou")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mongodb transparent data encryption can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mongodb/instanceTransparentDataEncryption:InstanceTransparentDataEncryption encryption ${instanceId}
        ```

        :param str resource_name: The name of the resource.
        :param InstanceTransparentDataEncryptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceTransparentDataEncryptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 key_id: Optional[pulumi.Input[str]] = None,
                 kms_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceTransparentDataEncryptionArgs.__new__(InstanceTransparentDataEncryptionArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["key_id"] = key_id
            if kms_region is None and not opts.urn:
                raise TypeError("Missing required property 'kms_region'")
            __props__.__dict__["kms_region"] = kms_region
            __props__.__dict__["key_info_lists"] = None
            __props__.__dict__["transparent_data_encryption_status"] = None
        super(InstanceTransparentDataEncryption, __self__).__init__(
            'tencentcloud:Mongodb/instanceTransparentDataEncryption:InstanceTransparentDataEncryption',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            key_id: Optional[pulumi.Input[str]] = None,
            key_info_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTransparentDataEncryptionKeyInfoListArgs']]]]] = None,
            kms_region: Optional[pulumi.Input[str]] = None,
            transparent_data_encryption_status: Optional[pulumi.Input[str]] = None) -> 'InstanceTransparentDataEncryption':
        """
        Get an existing InstanceTransparentDataEncryption resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Instance ID, for example: cmgo-p8vn ***. Currently supported general versions include: 4.4 and 5.0, but the cloud disk version is not currently supported.
        :param pulumi.Input[str] key_id: Key ID. If this parameter is not set and the specific key ID is not specified, Tencent Cloud will automatically generate
               the key and this key will be beyond the control of Terraform.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceTransparentDataEncryptionKeyInfoListArgs']]]] key_info_lists: List of bound keys.
        :param pulumi.Input[str] kms_region: The region where the Key Management Service (KMS) serves, such as ap-shanghai.
        :param pulumi.Input[str] transparent_data_encryption_status: Represents whether transparent encryption is turned on. Valid values:
               - close: Not opened;
               - open: It has been opened.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceTransparentDataEncryptionState.__new__(_InstanceTransparentDataEncryptionState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["key_id"] = key_id
        __props__.__dict__["key_info_lists"] = key_info_lists
        __props__.__dict__["kms_region"] = kms_region
        __props__.__dict__["transparent_data_encryption_status"] = transparent_data_encryption_status
        return InstanceTransparentDataEncryption(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance ID, for example: cmgo-p8vn ***. Currently supported general versions include: 4.4 and 5.0, but the cloud disk version is not currently supported.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Output[Optional[str]]:
        """
        Key ID. If this parameter is not set and the specific key ID is not specified, Tencent Cloud will automatically generate
        the key and this key will be beyond the control of Terraform.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyInfoLists")
    def key_info_lists(self) -> pulumi.Output[Sequence['outputs.InstanceTransparentDataEncryptionKeyInfoList']]:
        """
        List of bound keys.
        """
        return pulumi.get(self, "key_info_lists")

    @property
    @pulumi.getter(name="kmsRegion")
    def kms_region(self) -> pulumi.Output[str]:
        """
        The region where the Key Management Service (KMS) serves, such as ap-shanghai.
        """
        return pulumi.get(self, "kms_region")

    @property
    @pulumi.getter(name="transparentDataEncryptionStatus")
    def transparent_data_encryption_status(self) -> pulumi.Output[str]:
        """
        Represents whether transparent encryption is turned on. Valid values:
        - close: Not opened;
        - open: It has been opened.
        """
        return pulumi.get(self, "transparent_data_encryption_status")

