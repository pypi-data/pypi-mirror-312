# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceBackupRuleArgs', 'InstanceBackupRule']

@pulumi.input_type
class InstanceBackupRuleArgs:
    def __init__(__self__, *,
                 backup_method: pulumi.Input[int],
                 backup_time: pulumi.Input[int],
                 instance_id: pulumi.Input[str],
                 backup_retention_period: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a InstanceBackupRule resource.
        :param pulumi.Input[int] backup_method: Set automatic backup method. Valid values:
               - 0: Logical backup;
               - 1: Physical backup;
               - 3: Snapshot backup (supported only in cloud disk version).
        :param pulumi.Input[int] backup_time: Set the start time for automatic backup. The value range is: [0,23]. For example, setting this parameter to 2 means that backup starts at 02:00.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[int] backup_retention_period: Specify the number of days to save backup data. The default is 7 days, and the support settings are 7, 30, 90, 180, 365.
        """
        pulumi.set(__self__, "backup_method", backup_method)
        pulumi.set(__self__, "backup_time", backup_time)
        pulumi.set(__self__, "instance_id", instance_id)
        if backup_retention_period is not None:
            pulumi.set(__self__, "backup_retention_period", backup_retention_period)

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> pulumi.Input[int]:
        """
        Set automatic backup method. Valid values:
        - 0: Logical backup;
        - 1: Physical backup;
        - 3: Snapshot backup (supported only in cloud disk version).
        """
        return pulumi.get(self, "backup_method")

    @backup_method.setter
    def backup_method(self, value: pulumi.Input[int]):
        pulumi.set(self, "backup_method", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> pulumi.Input[int]:
        """
        Set the start time for automatic backup. The value range is: [0,23]. For example, setting this parameter to 2 means that backup starts at 02:00.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: pulumi.Input[int]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the number of days to save backup data. The default is 7 days, and the support settings are 7, 30, 90, 180, 365.
        """
        return pulumi.get(self, "backup_retention_period")

    @backup_retention_period.setter
    def backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_period", value)


@pulumi.input_type
class _InstanceBackupRuleState:
    def __init__(__self__, *,
                 backup_method: Optional[pulumi.Input[int]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InstanceBackupRule resources.
        :param pulumi.Input[int] backup_method: Set automatic backup method. Valid values:
               - 0: Logical backup;
               - 1: Physical backup;
               - 3: Snapshot backup (supported only in cloud disk version).
        :param pulumi.Input[int] backup_retention_period: Specify the number of days to save backup data. The default is 7 days, and the support settings are 7, 30, 90, 180, 365.
        :param pulumi.Input[int] backup_time: Set the start time for automatic backup. The value range is: [0,23]. For example, setting this parameter to 2 means that backup starts at 02:00.
        :param pulumi.Input[str] instance_id: Instance id.
        """
        if backup_method is not None:
            pulumi.set(__self__, "backup_method", backup_method)
        if backup_retention_period is not None:
            pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        if backup_time is not None:
            pulumi.set(__self__, "backup_time", backup_time)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> Optional[pulumi.Input[int]]:
        """
        Set automatic backup method. Valid values:
        - 0: Logical backup;
        - 1: Physical backup;
        - 3: Snapshot backup (supported only in cloud disk version).
        """
        return pulumi.get(self, "backup_method")

    @backup_method.setter
    def backup_method(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_method", value)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the number of days to save backup data. The default is 7 days, and the support settings are 7, 30, 90, 180, 365.
        """
        return pulumi.get(self, "backup_retention_period")

    @backup_retention_period.setter
    def backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_period", value)

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> Optional[pulumi.Input[int]]:
        """
        Set the start time for automatic backup. The value range is: [0,23]. For example, setting this parameter to 2 means that backup starts at 02:00.
        """
        return pulumi.get(self, "backup_time")

    @backup_time.setter
    def backup_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_time", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)


class InstanceBackupRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_method: Optional[pulumi.Input[int]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create mongodb instance backup rule

        ## Import

        mongodb instance backup rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mongodb/instanceBackupRule:InstanceBackupRule backup_rule ${instanceId}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] backup_method: Set automatic backup method. Valid values:
               - 0: Logical backup;
               - 1: Physical backup;
               - 3: Snapshot backup (supported only in cloud disk version).
        :param pulumi.Input[int] backup_retention_period: Specify the number of days to save backup data. The default is 7 days, and the support settings are 7, 30, 90, 180, 365.
        :param pulumi.Input[int] backup_time: Set the start time for automatic backup. The value range is: [0,23]. For example, setting this parameter to 2 means that backup starts at 02:00.
        :param pulumi.Input[str] instance_id: Instance id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceBackupRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create mongodb instance backup rule

        ## Import

        mongodb instance backup rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mongodb/instanceBackupRule:InstanceBackupRule backup_rule ${instanceId}
        ```

        :param str resource_name: The name of the resource.
        :param InstanceBackupRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceBackupRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backup_method: Optional[pulumi.Input[int]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 backup_time: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceBackupRuleArgs.__new__(InstanceBackupRuleArgs)

            if backup_method is None and not opts.urn:
                raise TypeError("Missing required property 'backup_method'")
            __props__.__dict__["backup_method"] = backup_method
            __props__.__dict__["backup_retention_period"] = backup_retention_period
            if backup_time is None and not opts.urn:
                raise TypeError("Missing required property 'backup_time'")
            __props__.__dict__["backup_time"] = backup_time
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
        super(InstanceBackupRule, __self__).__init__(
            'tencentcloud:Mongodb/instanceBackupRule:InstanceBackupRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backup_method: Optional[pulumi.Input[int]] = None,
            backup_retention_period: Optional[pulumi.Input[int]] = None,
            backup_time: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None) -> 'InstanceBackupRule':
        """
        Get an existing InstanceBackupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] backup_method: Set automatic backup method. Valid values:
               - 0: Logical backup;
               - 1: Physical backup;
               - 3: Snapshot backup (supported only in cloud disk version).
        :param pulumi.Input[int] backup_retention_period: Specify the number of days to save backup data. The default is 7 days, and the support settings are 7, 30, 90, 180, 365.
        :param pulumi.Input[int] backup_time: Set the start time for automatic backup. The value range is: [0,23]. For example, setting this parameter to 2 means that backup starts at 02:00.
        :param pulumi.Input[str] instance_id: Instance id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceBackupRuleState.__new__(_InstanceBackupRuleState)

        __props__.__dict__["backup_method"] = backup_method
        __props__.__dict__["backup_retention_period"] = backup_retention_period
        __props__.__dict__["backup_time"] = backup_time
        __props__.__dict__["instance_id"] = instance_id
        return InstanceBackupRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> pulumi.Output[int]:
        """
        Set automatic backup method. Valid values:
        - 0: Logical backup;
        - 1: Physical backup;
        - 3: Snapshot backup (supported only in cloud disk version).
        """
        return pulumi.get(self, "backup_method")

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> pulumi.Output[int]:
        """
        Specify the number of days to save backup data. The default is 7 days, and the support settings are 7, 30, 90, 180, 365.
        """
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="backupTime")
    def backup_time(self) -> pulumi.Output[int]:
        """
        Set the start time for automatic backup. The value range is: [0,23]. For example, setting this parameter to 2 means that backup starts at 02:00.
        """
        return pulumi.get(self, "backup_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

