# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'InstanceAccountAuthRole',
    'InstanceAddNodeList',
    'InstanceBackupDownloadTaskBackupSet',
    'InstanceRemoveNodeList',
    'InstanceStandbyInstanceList',
    'InstanceTransparentDataEncryptionKeyInfoList',
    'GetInstanceBackupsBackupListResult',
    'GetInstanceConnectionsClientResult',
    'GetInstanceCurrentOpCurrentOpResult',
    'GetInstanceParamsInstanceEnumParamResult',
    'GetInstanceParamsInstanceIntegerParamResult',
    'GetInstanceParamsInstanceMultiParamResult',
    'GetInstanceParamsInstanceTextParamResult',
    'GetInstancesInstanceListResult',
    'GetZoneConfigListResult',
]

@pulumi.output_type
class InstanceAccountAuthRole(dict):
    def __init__(__self__, *,
                 mask: int,
                 namespace: str):
        """
        :param int mask: Permission information of the current account. 0: No permission. 1: read-only. 2: Write only. 3: Read and write.
        :param str namespace: Refers to the name of the database with the current account permissions.*: Indicates all databases. db.name: Indicates the database of a specific name.
        """
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def mask(self) -> int:
        """
        Permission information of the current account. 0: No permission. 1: read-only. 2: Write only. 3: Read and write.
        """
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Refers to the name of the database with the current account permissions.*: Indicates all databases. db.name: Indicates the database of a specific name.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class InstanceAddNodeList(dict):
    def __init__(__self__, *,
                 role: str,
                 zone: str):
        """
        :param str role: The node role that needs to be added.
               - SECONDARY: Mongod node;
               - READONLY: read-only node;
               - MONGOS: Mongos node.
        :param str zone: The availability zone corresponding to the node.
               - single availability zone, where all nodes are in the same availability zone;
               - multiple availability zones: the current standard specification is the distribution of three availability zones, and the master and slave nodes are not in the same availability zone. You should pay attention to configuring the availability zone corresponding to the new node, and the rule that the number of nodes in any two availability zones is greater than the third availability zone must be met after the addition.
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The node role that needs to be added.
        - SECONDARY: Mongod node;
        - READONLY: read-only node;
        - MONGOS: Mongos node.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone corresponding to the node.
        - single availability zone, where all nodes are in the same availability zone;
        - multiple availability zones: the current standard specification is the distribution of three availability zones, and the master and slave nodes are not in the same availability zone. You should pay attention to configuring the availability zone corresponding to the new node, and the rule that the number of nodes in any two availability zones is greater than the third availability zone must be met after the addition.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class InstanceBackupDownloadTaskBackupSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicaSetId":
            suggest = "replica_set_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceBackupDownloadTaskBackupSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceBackupDownloadTaskBackupSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceBackupDownloadTaskBackupSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replica_set_id: str):
        """
        :param str replica_set_id: Replication Id.
        """
        pulumi.set(__self__, "replica_set_id", replica_set_id)

    @property
    @pulumi.getter(name="replicaSetId")
    def replica_set_id(self) -> str:
        """
        Replication Id.
        """
        return pulumi.get(self, "replica_set_id")


@pulumi.output_type
class InstanceRemoveNodeList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeName":
            suggest = "node_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceRemoveNodeList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceRemoveNodeList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceRemoveNodeList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 node_name: str,
                 role: str,
                 zone: str):
        """
        :param str node_name: The node ID to delete. The shard cluster must specify the name of the node to be deleted by a group of shards, and the rest of the shards should be grouped and aligned.
        :param str role: The node role that needs to be deleted.
               - SECONDARY: Mongod node;
               - READONLY: read-only node;
               - MONGOS: Mongos node.
        :param str zone: The availability zone corresponding to the node.
               - single availability zone, where all nodes are in the same availability zone;
               - multiple availability zones: the current standard specification is the distribution of three availability zones, and the master and slave nodes are not in the same availability zone. You should pay attention to configuring the availability zone corresponding to the new node, and the rule that the number of nodes in any two availability zones is greater than the third availability zone must be met after the addition.
        """
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        The node ID to delete. The shard cluster must specify the name of the node to be deleted by a group of shards, and the rest of the shards should be grouped and aligned.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The node role that needs to be deleted.
        - SECONDARY: Mongod node;
        - READONLY: read-only node;
        - MONGOS: Mongos node.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone corresponding to the node.
        - single availability zone, where all nodes are in the same availability zone;
        - multiple availability zones: the current standard specification is the distribution of three availability zones, and the master and slave nodes are not in the same availability zone. You should pay attention to configuring the availability zone corresponding to the new node, and the rule that the number of nodes in any two availability zones is greater than the third availability zone must be met after the addition.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class InstanceStandbyInstanceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "standbyInstanceId":
            suggest = "standby_instance_id"
        elif key == "standbyInstanceRegion":
            suggest = "standby_instance_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStandbyInstanceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStandbyInstanceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStandbyInstanceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 standby_instance_id: Optional[str] = None,
                 standby_instance_region: Optional[str] = None):
        """
        :param str standby_instance_id: Indicates the ID of standby instance.
        :param str standby_instance_region: Indicates the region of standby instance.
        """
        if standby_instance_id is not None:
            pulumi.set(__self__, "standby_instance_id", standby_instance_id)
        if standby_instance_region is not None:
            pulumi.set(__self__, "standby_instance_region", standby_instance_region)

    @property
    @pulumi.getter(name="standbyInstanceId")
    def standby_instance_id(self) -> Optional[str]:
        """
        Indicates the ID of standby instance.
        """
        return pulumi.get(self, "standby_instance_id")

    @property
    @pulumi.getter(name="standbyInstanceRegion")
    def standby_instance_region(self) -> Optional[str]:
        """
        Indicates the region of standby instance.
        """
        return pulumi.get(self, "standby_instance_region")


@pulumi.output_type
class InstanceTransparentDataEncryptionKeyInfoList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "keyId":
            suggest = "key_id"
        elif key == "keyName":
            suggest = "key_name"
        elif key == "keyOrigin":
            suggest = "key_origin"
        elif key == "keyUsage":
            suggest = "key_usage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceTransparentDataEncryptionKeyInfoList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceTransparentDataEncryptionKeyInfoList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceTransparentDataEncryptionKeyInfoList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_time: Optional[str] = None,
                 key_id: Optional[str] = None,
                 key_name: Optional[str] = None,
                 key_origin: Optional[str] = None,
                 key_usage: Optional[str] = None,
                 status: Optional[str] = None):
        """
        :param str create_time: Instance and key binding time.
        :param str key_id: Master Key ID.
        :param str key_name: Master key name.
        :param str key_origin: Key origin.
        :param str key_usage: Purpose of the key.
        :param str status: Key status.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)
        if key_name is not None:
            pulumi.set(__self__, "key_name", key_name)
        if key_origin is not None:
            pulumi.set(__self__, "key_origin", key_origin)
        if key_usage is not None:
            pulumi.set(__self__, "key_usage", key_usage)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        Instance and key binding time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        """
        Master Key ID.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keyName")
    def key_name(self) -> Optional[str]:
        """
        Master key name.
        """
        return pulumi.get(self, "key_name")

    @property
    @pulumi.getter(name="keyOrigin")
    def key_origin(self) -> Optional[str]:
        """
        Key origin.
        """
        return pulumi.get(self, "key_origin")

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> Optional[str]:
        """
        Purpose of the key.
        """
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Key status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstanceBackupsBackupListResult(dict):
    def __init__(__self__, *,
                 backup_desc: str,
                 backup_method: int,
                 backup_name: str,
                 backup_size: int,
                 backup_type: int,
                 end_time: str,
                 instance_id: str,
                 start_time: str,
                 status: int):
        """
        :param str backup_desc: Remark of backup.
        :param int backup_method: Backup mode, currently supported: 0-logic backup, 1-physical backup, 2-all backups.The default is logical backup.
        :param str backup_name: Backup mode name.
        :param int backup_size: Size of backup(KN).
        :param int backup_type: Backup mode type.
        :param str end_time: end time of backup.
        :param str instance_id: Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
        :param str start_time: start time of backup.
        :param int status: Backup status.
        """
        pulumi.set(__self__, "backup_desc", backup_desc)
        pulumi.set(__self__, "backup_method", backup_method)
        pulumi.set(__self__, "backup_name", backup_name)
        pulumi.set(__self__, "backup_size", backup_size)
        pulumi.set(__self__, "backup_type", backup_type)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="backupDesc")
    def backup_desc(self) -> str:
        """
        Remark of backup.
        """
        return pulumi.get(self, "backup_desc")

    @property
    @pulumi.getter(name="backupMethod")
    def backup_method(self) -> int:
        """
        Backup mode, currently supported: 0-logic backup, 1-physical backup, 2-all backups.The default is logical backup.
        """
        return pulumi.get(self, "backup_method")

    @property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> str:
        """
        Backup mode name.
        """
        return pulumi.get(self, "backup_name")

    @property
    @pulumi.getter(name="backupSize")
    def backup_size(self) -> int:
        """
        Size of backup(KN).
        """
        return pulumi.get(self, "backup_size")

    @property
    @pulumi.getter(name="backupType")
    def backup_type(self) -> int:
        """
        Backup mode type.
        """
        return pulumi.get(self, "backup_type")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        end time of backup.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID, the format is: cmgo-9d0p6umb.Same as the instance ID displayed in the cloud database console page.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time of backup.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Backup status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetInstanceConnectionsClientResult(dict):
    def __init__(__self__, *,
                 count: int,
                 internal_service: bool,
                 ip: str):
        """
        :param int count: client connection count.
        :param bool internal_service: is internal.
        :param str ip: client connection ip.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "internal_service", internal_service)
        pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        client connection count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="internalService")
    def internal_service(self) -> bool:
        """
        is internal.
        """
        return pulumi.get(self, "internal_service")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        client connection ip.
        """
        return pulumi.get(self, "ip")


@pulumi.output_type
class GetInstanceCurrentOpCurrentOpResult(dict):
    def __init__(__self__, *,
                 microsecs_running: int,
                 node_name: str,
                 ns: str,
                 op: str,
                 op_id: int,
                 operation: str,
                 query: str,
                 replica_set_name: str,
                 state: str):
        """
        :param int microsecs_running: running time(ms).
        :param str node_name: Node name.
        :param str ns: Filter condition, the namespace namespace to which the operation belongs, in the format of db.collection.
        :param str op: Filter condition, operation type, possible values: none, update, insert, query, command, getmore,remove and killcursors.
        :param int op_id: operation id.
        :param str operation: operation info.
        :param str query: operation query.
        :param str replica_set_name: filter condition, shard name.
        :param str state: Filter condition, node status, possible value: primary, secondary.
        """
        pulumi.set(__self__, "microsecs_running", microsecs_running)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "ns", ns)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "op_id", op_id)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "replica_set_name", replica_set_name)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="microsecsRunning")
    def microsecs_running(self) -> int:
        """
        running time(ms).
        """
        return pulumi.get(self, "microsecs_running")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        Node name.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter
    def ns(self) -> str:
        """
        Filter condition, the namespace namespace to which the operation belongs, in the format of db.collection.
        """
        return pulumi.get(self, "ns")

    @property
    @pulumi.getter
    def op(self) -> str:
        """
        Filter condition, operation type, possible values: none, update, insert, query, command, getmore,remove and killcursors.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter(name="opId")
    def op_id(self) -> int:
        """
        operation id.
        """
        return pulumi.get(self, "op_id")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        operation info.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        operation query.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="replicaSetName")
    def replica_set_name(self) -> str:
        """
        filter condition, shard name.
        """
        return pulumi.get(self, "replica_set_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        Filter condition, node status, possible value: primary, secondary.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetInstanceParamsInstanceEnumParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 enum_values: Sequence[str],
                 need_restart: str,
                 param_name: str,
                 status: int,
                 tips: Sequence[str],
                 value_type: str):
        """
        :param str current_value: current value.
        :param str default_value: default value.
        :param Sequence[str] enum_values: enum value.
        :param str need_restart: if need restart.
        :param str param_name: name of parameter.
        :param int status: if is running.
        :param Sequence[str] tips: descripition of parameter.
        :param str value_type: value type.
        """
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        """
        current value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        default value.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        """
        enum value.
        """
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        """
        if need restart.
        """
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        name of parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        if is running.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        """
        descripition of parameter.
        """
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        value type.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstanceParamsInstanceIntegerParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 max: str,
                 min: str,
                 need_restart: str,
                 param_name: str,
                 status: int,
                 tips: Sequence[str],
                 value_type: str):
        """
        :param str current_value: current value.
        :param str default_value: default value.
        :param str max: max value.
        :param str min: min value.
        :param str need_restart: if need restart.
        :param str param_name: name of parameter.
        :param int status: if is running.
        :param Sequence[str] tips: descripition of parameter.
        :param str value_type: value type.
        """
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        """
        current value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        default value.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def max(self) -> str:
        """
        max value.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        """
        min value.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        """
        if need restart.
        """
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        name of parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        if is running.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        """
        descripition of parameter.
        """
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        value type.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstanceParamsInstanceMultiParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 enum_values: Sequence[str],
                 need_restart: str,
                 param_name: str,
                 status: int,
                 tips: Sequence[str],
                 value_type: str):
        """
        :param str current_value: current value.
        :param str default_value: default value.
        :param Sequence[str] enum_values: enum value.
        :param str need_restart: if need restart.
        :param str param_name: name of parameter.
        :param int status: if is running.
        :param Sequence[str] tips: descripition of parameter.
        :param str value_type: value type.
        """
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        """
        current value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        default value.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        """
        enum value.
        """
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        """
        if need restart.
        """
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        name of parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        if is running.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        """
        descripition of parameter.
        """
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        value type.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstanceParamsInstanceTextParamResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 need_restart: str,
                 param_name: str,
                 status: str,
                 text_value: str,
                 tips: Sequence[str],
                 value_type: str):
        """
        :param str current_value: current value.
        :param str default_value: default value.
        :param str need_restart: if need restart.
        :param str param_name: name of parameter.
        :param str status: if is running.
        :param str text_value: text value.
        :param Sequence[str] tips: descripition of parameter.
        :param str value_type: value type.
        """
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "need_restart", need_restart)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "text_value", text_value)
        pulumi.set(__self__, "tips", tips)
        pulumi.set(__self__, "value_type", value_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        """
        current value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        default value.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> str:
        """
        if need restart.
        """
        return pulumi.get(self, "need_restart")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        name of parameter.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        if is running.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> str:
        """
        text value.
        """
        return pulumi.get(self, "text_value")

    @property
    @pulumi.getter
    def tips(self) -> Sequence[str]:
        """
        descripition of parameter.
        """
        return pulumi.get(self, "tips")

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> str:
        """
        value type.
        """
        return pulumi.get(self, "value_type")


@pulumi.output_type
class GetInstancesInstanceListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 available_zone: str,
                 charge_type: str,
                 cluster_type: str,
                 cpu: int,
                 create_time: str,
                 engine_version: str,
                 instance_id: str,
                 instance_name: str,
                 machine_type: str,
                 memory: int,
                 project_id: int,
                 shard_quantity: int,
                 status: int,
                 subnet_id: str,
                 tags: Mapping[str, Any],
                 vip: str,
                 volume: int,
                 vpc_id: str,
                 vport: int):
        """
        :param int auto_renew_flag: Auto renew flag.
        :param str available_zone: The available zone of the Mongodb.
        :param str charge_type: The charge type of instance.
        :param str cluster_type: Type of Mongodb cluster, and available values include replica set cluster(expressed with `REPLSET`), sharding cluster(expressed with `SHARD`).
        :param int cpu: Number of cpu's core.
        :param str create_time: Creation time of the Mongodb instance.
        :param str engine_version: Version of the Mongodb engine.
        :param str instance_id: ID of the Mongodb instance to be queried.
        :param str instance_name: Name of the Mongodb instance.
        :param str machine_type: Type of Mongodb instance.
        :param int memory: Memory size.
        :param int project_id: ID of the project which the instance belongs.
        :param int shard_quantity: Number of sharding.
        :param int status: Status of the Mongodb, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        :param str subnet_id: ID of the subnet.
        :param Mapping[str, Any] tags: Tags of the Mongodb instance to be queried.
        :param str vip: IP of the Mongodb instance.
        :param int volume: Disk size.
        :param str vpc_id: ID of the VPC.
        :param int vport: IP port of the Mongodb instance.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "shard_quantity", shard_quantity)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "volume", volume)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        Auto renew flag.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> str:
        """
        The available zone of the Mongodb.
        """
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        The charge type of instance.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Type of Mongodb cluster, and available values include replica set cluster(expressed with `REPLSET`), sharding cluster(expressed with `SHARD`).
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Number of cpu's core.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time of the Mongodb instance.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        Version of the Mongodb engine.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        ID of the Mongodb instance to be queried.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Name of the Mongodb instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Type of Mongodb instance.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        ID of the project which the instance belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="shardQuantity")
    def shard_quantity(self) -> int:
        """
        Number of sharding.
        """
        return pulumi.get(self, "shard_quantity")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Status of the Mongodb, and available values include pending initialization(expressed with 0),  processing(expressed with 1), running(expressed with 2) and expired(expressed with -2).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        """
        Tags of the Mongodb instance to be queried.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        IP of the Mongodb instance.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def volume(self) -> int:
        """
        Disk size.
        """
        return pulumi.get(self, "volume")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> int:
        """
        IP port of the Mongodb instance.
        """
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 available_zone: str,
                 cluster_type: str,
                 cpu: int,
                 default_storage: int,
                 engine_version: str,
                 machine_type: str,
                 max_replicate_set_num: int,
                 max_storage: int,
                 memory: int,
                 min_replicate_set_num: int,
                 min_storage: int):
        """
        :param str available_zone: The available zone of the Mongodb.
        :param str cluster_type: Type of Mongodb cluster.
        :param int cpu: Number of cpu's core.
        :param int default_storage: Default disk size.
        :param str engine_version: Version of the Mongodb version.
        :param str machine_type: Type of Mongodb instance.
        :param int max_replicate_set_num: Maximum replicate set num for sharding cluster.
        :param int max_storage: Maximum size of the disk.
        :param int memory: Memory size.
        :param int min_replicate_set_num: Minimum replicate set num for sharding cluster.
        :param int min_storage: Minimum sie of the disk.
        """
        pulumi.set(__self__, "available_zone", available_zone)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "default_storage", default_storage)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "max_replicate_set_num", max_replicate_set_num)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "min_replicate_set_num", min_replicate_set_num)
        pulumi.set(__self__, "min_storage", min_storage)

    @property
    @pulumi.getter(name="availableZone")
    def available_zone(self) -> str:
        """
        The available zone of the Mongodb.
        """
        return pulumi.get(self, "available_zone")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> str:
        """
        Type of Mongodb cluster.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Number of cpu's core.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="defaultStorage")
    def default_storage(self) -> int:
        """
        Default disk size.
        """
        return pulumi.get(self, "default_storage")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        Version of the Mongodb version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Type of Mongodb instance.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="maxReplicateSetNum")
    def max_replicate_set_num(self) -> int:
        """
        Maximum replicate set num for sharding cluster.
        """
        return pulumi.get(self, "max_replicate_set_num")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        """
        Maximum size of the disk.
        """
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory size.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="minReplicateSetNum")
    def min_replicate_set_num(self) -> int:
        """
        Minimum replicate set num for sharding cluster.
        """
        return pulumi.get(self, "min_replicate_set_num")

    @property
    @pulumi.getter(name="minStorage")
    def min_storage(self) -> int:
        """
        Minimum sie of the disk.
        """
        return pulumi.get(self, "min_storage")


