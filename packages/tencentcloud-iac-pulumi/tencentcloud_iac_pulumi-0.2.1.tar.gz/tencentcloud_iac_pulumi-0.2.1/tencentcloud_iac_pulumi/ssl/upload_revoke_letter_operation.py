# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UploadRevokeLetterOperationArgs', 'UploadRevokeLetterOperation']

@pulumi.input_type
class UploadRevokeLetterOperationArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[str],
                 revoke_letter: pulumi.Input[str]):
        """
        The set of arguments for constructing a UploadRevokeLetterOperation resource.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] revoke_letter: The format of the base64-encoded certificate confirmation letter file should be jpg, jpeg, png, or pdf, and the size should be between 1kb and 1.4M.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "revoke_letter", revoke_letter)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        """
        Certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="revokeLetter")
    def revoke_letter(self) -> pulumi.Input[str]:
        """
        The format of the base64-encoded certificate confirmation letter file should be jpg, jpeg, png, or pdf, and the size should be between 1kb and 1.4M.
        """
        return pulumi.get(self, "revoke_letter")

    @revoke_letter.setter
    def revoke_letter(self, value: pulumi.Input[str]):
        pulumi.set(self, "revoke_letter", value)


@pulumi.input_type
class _UploadRevokeLetterOperationState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 revoke_letter: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UploadRevokeLetterOperation resources.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] revoke_letter: The format of the base64-encoded certificate confirmation letter file should be jpg, jpeg, png, or pdf, and the size should be between 1kb and 1.4M.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if revoke_letter is not None:
            pulumi.set(__self__, "revoke_letter", revoke_letter)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="revokeLetter")
    def revoke_letter(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the base64-encoded certificate confirmation letter file should be jpg, jpeg, png, or pdf, and the size should be between 1kb and 1.4M.
        """
        return pulumi.get(self, "revoke_letter")

    @revoke_letter.setter
    def revoke_letter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revoke_letter", value)


class UploadRevokeLetterOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 revoke_letter: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ssl upload_revoke_letter

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import base64
        import tencentcloud_iac_pulumi as tencentcloud

        upload_revoke_letter = tencentcloud.ssl.UploadRevokeLetterOperation("uploadRevokeLetter",
            certificate_id="8xRYdDlc",
            revoke_letter=(lambda path: base64.b64encode(open(path).read().encode()).decode())("./c.pdf"))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ssl upload_revoke_letter can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/uploadRevokeLetterOperation:UploadRevokeLetterOperation upload_revoke_letter upload_revoke_letter_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] revoke_letter: The format of the base64-encoded certificate confirmation letter file should be jpg, jpeg, png, or pdf, and the size should be between 1kb and 1.4M.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UploadRevokeLetterOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ssl upload_revoke_letter

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import base64
        import tencentcloud_iac_pulumi as tencentcloud

        upload_revoke_letter = tencentcloud.ssl.UploadRevokeLetterOperation("uploadRevokeLetter",
            certificate_id="8xRYdDlc",
            revoke_letter=(lambda path: base64.b64encode(open(path).read().encode()).decode())("./c.pdf"))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ssl upload_revoke_letter can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/uploadRevokeLetterOperation:UploadRevokeLetterOperation upload_revoke_letter upload_revoke_letter_id
        ```

        :param str resource_name: The name of the resource.
        :param UploadRevokeLetterOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UploadRevokeLetterOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 revoke_letter: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UploadRevokeLetterOperationArgs.__new__(UploadRevokeLetterOperationArgs)

            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            if revoke_letter is None and not opts.urn:
                raise TypeError("Missing required property 'revoke_letter'")
            __props__.__dict__["revoke_letter"] = revoke_letter
        super(UploadRevokeLetterOperation, __self__).__init__(
            'tencentcloud:Ssl/uploadRevokeLetterOperation:UploadRevokeLetterOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            revoke_letter: Optional[pulumi.Input[str]] = None) -> 'UploadRevokeLetterOperation':
        """
        Get an existing UploadRevokeLetterOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] revoke_letter: The format of the base64-encoded certificate confirmation letter file should be jpg, jpeg, png, or pdf, and the size should be between 1kb and 1.4M.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UploadRevokeLetterOperationState.__new__(_UploadRevokeLetterOperationState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["revoke_letter"] = revoke_letter
        return UploadRevokeLetterOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[str]:
        """
        Certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="revokeLetter")
    def revoke_letter(self) -> pulumi.Output[str]:
        """
        The format of the base64-encoded certificate confirmation letter file should be jpg, jpeg, png, or pdf, and the size should be between 1kb and 1.4M.
        """
        return pulumi.get(self, "revoke_letter")

