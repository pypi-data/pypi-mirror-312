# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FreeCertificateArgs', 'FreeCertificate']

@pulumi.input_type
class FreeCertificateArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 dv_auth_method: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 contact_phone: Optional[pulumi.Input[str]] = None,
                 csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 old_certificate_id: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 validity_period: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FreeCertificate resource.
        :param pulumi.Input[str] domain: Specify domain name.
        :param pulumi.Input[str] dv_auth_method: Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
        :param pulumi.Input[str] alias: Specify alias for remark.
        :param pulumi.Input[str] contact_email: Email address.
        :param pulumi.Input[str] contact_phone: Phone number.
        :param pulumi.Input[str] csr_encrypt_algo: Specify CSR encrypt algorithm, only support `RSA` for now.
        :param pulumi.Input[str] csr_key_parameter: Specify CSR key parameter, only support `"2048"` for now.
        :param pulumi.Input[str] csr_key_password: Specify CSR key password.
        :param pulumi.Input[str] old_certificate_id: Specify old certificate ID, used for re-apply.
        :param pulumi.Input[str] package_type: Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
        :param pulumi.Input[int] project_id: ID of projects which this certification belong to.
        :param pulumi.Input[str] validity_period: Specify validity period in month, only support `"3"` months for now.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "dv_auth_method", dv_auth_method)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if contact_phone is not None:
            pulumi.set(__self__, "contact_phone", contact_phone)
        if csr_encrypt_algo is not None:
            pulumi.set(__self__, "csr_encrypt_algo", csr_encrypt_algo)
        if csr_key_parameter is not None:
            pulumi.set(__self__, "csr_key_parameter", csr_key_parameter)
        if csr_key_password is not None:
            pulumi.set(__self__, "csr_key_password", csr_key_password)
        if old_certificate_id is not None:
            pulumi.set(__self__, "old_certificate_id", old_certificate_id)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if validity_period is not None:
            pulumi.set(__self__, "validity_period", validity_period)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Specify domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dvAuthMethod")
    def dv_auth_method(self) -> pulumi.Input[str]:
        """
        Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
        """
        return pulumi.get(self, "dv_auth_method")

    @dv_auth_method.setter
    def dv_auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "dv_auth_method", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Specify alias for remark.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address.
        """
        return pulumi.get(self, "contact_email")

    @contact_email.setter
    def contact_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_email", value)

    @property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number.
        """
        return pulumi.get(self, "contact_phone")

    @contact_phone.setter
    def contact_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_phone", value)

    @property
    @pulumi.getter(name="csrEncryptAlgo")
    def csr_encrypt_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Specify CSR encrypt algorithm, only support `RSA` for now.
        """
        return pulumi.get(self, "csr_encrypt_algo")

    @csr_encrypt_algo.setter
    def csr_encrypt_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_encrypt_algo", value)

    @property
    @pulumi.getter(name="csrKeyParameter")
    def csr_key_parameter(self) -> Optional[pulumi.Input[str]]:
        """
        Specify CSR key parameter, only support `"2048"` for now.
        """
        return pulumi.get(self, "csr_key_parameter")

    @csr_key_parameter.setter
    def csr_key_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_key_parameter", value)

    @property
    @pulumi.getter(name="csrKeyPassword")
    def csr_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        Specify CSR key password.
        """
        return pulumi.get(self, "csr_key_password")

    @csr_key_password.setter
    def csr_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_key_password", value)

    @property
    @pulumi.getter(name="oldCertificateId")
    def old_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify old certificate ID, used for re-apply.
        """
        return pulumi.get(self, "old_certificate_id")

    @old_certificate_id.setter
    def old_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "old_certificate_id", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of projects which this certification belong to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> Optional[pulumi.Input[str]]:
        """
        Specify validity period in month, only support `"3"` months for now.
        """
        return pulumi.get(self, "validity_period")

    @validity_period.setter
    def validity_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validity_period", value)


@pulumi.input_type
class _FreeCertificateState:
    def __init__(__self__, *,
                 alias: Optional[pulumi.Input[str]] = None,
                 cert_begin_time: Optional[pulumi.Input[str]] = None,
                 cert_end_time: Optional[pulumi.Input[str]] = None,
                 certificate_private_key: Optional[pulumi.Input[str]] = None,
                 certificate_public_key: Optional[pulumi.Input[str]] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 contact_phone: Optional[pulumi.Input[str]] = None,
                 csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 deployable: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dv_auth_method: Optional[pulumi.Input[str]] = None,
                 dv_auths: Optional[pulumi.Input[Sequence[pulumi.Input['FreeCertificateDvAuthArgs']]]] = None,
                 insert_time: Optional[pulumi.Input[str]] = None,
                 old_certificate_id: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 product_zh_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 renewable: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 status_msg: Optional[pulumi.Input[str]] = None,
                 status_name: Optional[pulumi.Input[str]] = None,
                 validity_period: Optional[pulumi.Input[str]] = None,
                 vulnerability_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FreeCertificate resources.
        :param pulumi.Input[str] alias: Specify alias for remark.
        :param pulumi.Input[str] cert_begin_time: Certificate begin time.
        :param pulumi.Input[str] cert_end_time: Certificate end time.
        :param pulumi.Input[str] certificate_private_key: Certificate private key.
        :param pulumi.Input[str] certificate_public_key: Certificate public key.
        :param pulumi.Input[str] contact_email: Email address.
        :param pulumi.Input[str] contact_phone: Phone number.
        :param pulumi.Input[str] csr_encrypt_algo: Specify CSR encrypt algorithm, only support `RSA` for now.
        :param pulumi.Input[str] csr_key_parameter: Specify CSR key parameter, only support `"2048"` for now.
        :param pulumi.Input[str] csr_key_password: Specify CSR key password.
        :param pulumi.Input[bool] deployable: Indicates whether the certificate deployable.
        :param pulumi.Input[str] domain: Specify domain name.
        :param pulumi.Input[str] dv_auth_method: Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
        :param pulumi.Input[Sequence[pulumi.Input['FreeCertificateDvAuthArgs']]] dv_auths: DV certification information.
        :param pulumi.Input[str] insert_time: Certificate insert time.
        :param pulumi.Input[str] old_certificate_id: Specify old certificate ID, used for re-apply.
        :param pulumi.Input[str] package_type: Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
        :param pulumi.Input[str] product_zh_name: Product zh name.
        :param pulumi.Input[int] project_id: ID of projects which this certification belong to.
        :param pulumi.Input[bool] renewable: Indicates whether the certificate renewable.
        :param pulumi.Input[int] status: Certificate status. 0 = Approving, 1 = Approved, 2 = Approve failed, 3 = expired, 4 = DNS record added, 5 = OV/EV Certificate and confirm letter needed, 6 = Order canceling, 7 = Order canceled, 8 = Submitted and confirm letter needed, 9 = Revoking, 10 = Revoked, 11 = re-applying, 12 = Revoke and confirm letter needed, 13 = Free SSL and confirm letter needed.
        :param pulumi.Input[str] status_msg: Certificate status message.
        :param pulumi.Input[str] status_name: Certificate status name.
        :param pulumi.Input[str] validity_period: Specify validity period in month, only support `"3"` months for now.
        :param pulumi.Input[str] vulnerability_status: Vulnerability status.
        """
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cert_begin_time is not None:
            pulumi.set(__self__, "cert_begin_time", cert_begin_time)
        if cert_end_time is not None:
            pulumi.set(__self__, "cert_end_time", cert_end_time)
        if certificate_private_key is not None:
            pulumi.set(__self__, "certificate_private_key", certificate_private_key)
        if certificate_public_key is not None:
            pulumi.set(__self__, "certificate_public_key", certificate_public_key)
        if contact_email is not None:
            pulumi.set(__self__, "contact_email", contact_email)
        if contact_phone is not None:
            pulumi.set(__self__, "contact_phone", contact_phone)
        if csr_encrypt_algo is not None:
            pulumi.set(__self__, "csr_encrypt_algo", csr_encrypt_algo)
        if csr_key_parameter is not None:
            pulumi.set(__self__, "csr_key_parameter", csr_key_parameter)
        if csr_key_password is not None:
            pulumi.set(__self__, "csr_key_password", csr_key_password)
        if deployable is not None:
            pulumi.set(__self__, "deployable", deployable)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if dv_auth_method is not None:
            pulumi.set(__self__, "dv_auth_method", dv_auth_method)
        if dv_auths is not None:
            pulumi.set(__self__, "dv_auths", dv_auths)
        if insert_time is not None:
            pulumi.set(__self__, "insert_time", insert_time)
        if old_certificate_id is not None:
            pulumi.set(__self__, "old_certificate_id", old_certificate_id)
        if package_type is not None:
            pulumi.set(__self__, "package_type", package_type)
        if product_zh_name is not None:
            pulumi.set(__self__, "product_zh_name", product_zh_name)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if renewable is not None:
            pulumi.set(__self__, "renewable", renewable)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_msg is not None:
            pulumi.set(__self__, "status_msg", status_msg)
        if status_name is not None:
            pulumi.set(__self__, "status_name", status_name)
        if validity_period is not None:
            pulumi.set(__self__, "validity_period", validity_period)
        if vulnerability_status is not None:
            pulumi.set(__self__, "vulnerability_status", vulnerability_status)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        Specify alias for remark.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="certBeginTime")
    def cert_begin_time(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate begin time.
        """
        return pulumi.get(self, "cert_begin_time")

    @cert_begin_time.setter
    def cert_begin_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_begin_time", value)

    @property
    @pulumi.getter(name="certEndTime")
    def cert_end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate end time.
        """
        return pulumi.get(self, "cert_end_time")

    @cert_end_time.setter
    def cert_end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_end_time", value)

    @property
    @pulumi.getter(name="certificatePrivateKey")
    def certificate_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate private key.
        """
        return pulumi.get(self, "certificate_private_key")

    @certificate_private_key.setter
    def certificate_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_private_key", value)

    @property
    @pulumi.getter(name="certificatePublicKey")
    def certificate_public_key(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate public key.
        """
        return pulumi.get(self, "certificate_public_key")

    @certificate_public_key.setter
    def certificate_public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_public_key", value)

    @property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address.
        """
        return pulumi.get(self, "contact_email")

    @contact_email.setter
    def contact_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_email", value)

    @property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Phone number.
        """
        return pulumi.get(self, "contact_phone")

    @contact_phone.setter
    def contact_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact_phone", value)

    @property
    @pulumi.getter(name="csrEncryptAlgo")
    def csr_encrypt_algo(self) -> Optional[pulumi.Input[str]]:
        """
        Specify CSR encrypt algorithm, only support `RSA` for now.
        """
        return pulumi.get(self, "csr_encrypt_algo")

    @csr_encrypt_algo.setter
    def csr_encrypt_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_encrypt_algo", value)

    @property
    @pulumi.getter(name="csrKeyParameter")
    def csr_key_parameter(self) -> Optional[pulumi.Input[str]]:
        """
        Specify CSR key parameter, only support `"2048"` for now.
        """
        return pulumi.get(self, "csr_key_parameter")

    @csr_key_parameter.setter
    def csr_key_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_key_parameter", value)

    @property
    @pulumi.getter(name="csrKeyPassword")
    def csr_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        Specify CSR key password.
        """
        return pulumi.get(self, "csr_key_password")

    @csr_key_password.setter
    def csr_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_key_password", value)

    @property
    @pulumi.getter
    def deployable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the certificate deployable.
        """
        return pulumi.get(self, "deployable")

    @deployable.setter
    def deployable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deployable", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Specify domain name.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="dvAuthMethod")
    def dv_auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
        """
        return pulumi.get(self, "dv_auth_method")

    @dv_auth_method.setter
    def dv_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dv_auth_method", value)

    @property
    @pulumi.getter(name="dvAuths")
    def dv_auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FreeCertificateDvAuthArgs']]]]:
        """
        DV certification information.
        """
        return pulumi.get(self, "dv_auths")

    @dv_auths.setter
    def dv_auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FreeCertificateDvAuthArgs']]]]):
        pulumi.set(self, "dv_auths", value)

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate insert time.
        """
        return pulumi.get(self, "insert_time")

    @insert_time.setter
    def insert_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "insert_time", value)

    @property
    @pulumi.getter(name="oldCertificateId")
    def old_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Specify old certificate ID, used for re-apply.
        """
        return pulumi.get(self, "old_certificate_id")

    @old_certificate_id.setter
    def old_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "old_certificate_id", value)

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
        """
        return pulumi.get(self, "package_type")

    @package_type.setter
    def package_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "package_type", value)

    @property
    @pulumi.getter(name="productZhName")
    def product_zh_name(self) -> Optional[pulumi.Input[str]]:
        """
        Product zh name.
        """
        return pulumi.get(self, "product_zh_name")

    @product_zh_name.setter
    def product_zh_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_zh_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of projects which this certification belong to.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def renewable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the certificate renewable.
        """
        return pulumi.get(self, "renewable")

    @renewable.setter
    def renewable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "renewable", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Certificate status. 0 = Approving, 1 = Approved, 2 = Approve failed, 3 = expired, 4 = DNS record added, 5 = OV/EV Certificate and confirm letter needed, 6 = Order canceling, 7 = Order canceled, 8 = Submitted and confirm letter needed, 9 = Revoking, 10 = Revoked, 11 = re-applying, 12 = Revoke and confirm letter needed, 13 = Free SSL and confirm letter needed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusMsg")
    def status_msg(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate status message.
        """
        return pulumi.get(self, "status_msg")

    @status_msg.setter
    def status_msg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_msg", value)

    @property
    @pulumi.getter(name="statusName")
    def status_name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate status name.
        """
        return pulumi.get(self, "status_name")

    @status_name.setter
    def status_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_name", value)

    @property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> Optional[pulumi.Input[str]]:
        """
        Specify validity period in month, only support `"3"` months for now.
        """
        return pulumi.get(self, "validity_period")

    @validity_period.setter
    def validity_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validity_period", value)

    @property
    @pulumi.getter(name="vulnerabilityStatus")
    def vulnerability_status(self) -> Optional[pulumi.Input[str]]:
        """
        Vulnerability status.
        """
        return pulumi.get(self, "vulnerability_status")

    @vulnerability_status.setter
    def vulnerability_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vulnerability_status", value)


class FreeCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 contact_phone: Optional[pulumi.Input[str]] = None,
                 csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dv_auth_method: Optional[pulumi.Input[str]] = None,
                 old_certificate_id: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 validity_period: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a Free Certificate.

        > **NOTE:** Once certificat created, it cannot be removed within 1 hours.

        ## Example Usage

        ### only support type 2. 2=TrustAsia TLS RSA CA.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssl.FreeCertificate("example",
            alias="example_free_cert",
            contact_email="test@example.com",
            contact_phone="18352458901",
            csr_encrypt_algo="RSA",
            csr_key_parameter="2048",
            csr_key_password="csr_pwd",
            domain="example.com",
            dv_auth_method="DNS_AUTO",
            package_type="2",
            validity_period="12")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        FreeCertificate instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/freeCertificate:FreeCertificate test free_certificate-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias: Specify alias for remark.
        :param pulumi.Input[str] contact_email: Email address.
        :param pulumi.Input[str] contact_phone: Phone number.
        :param pulumi.Input[str] csr_encrypt_algo: Specify CSR encrypt algorithm, only support `RSA` for now.
        :param pulumi.Input[str] csr_key_parameter: Specify CSR key parameter, only support `"2048"` for now.
        :param pulumi.Input[str] csr_key_password: Specify CSR key password.
        :param pulumi.Input[str] domain: Specify domain name.
        :param pulumi.Input[str] dv_auth_method: Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
        :param pulumi.Input[str] old_certificate_id: Specify old certificate ID, used for re-apply.
        :param pulumi.Input[str] package_type: Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
        :param pulumi.Input[int] project_id: ID of projects which this certification belong to.
        :param pulumi.Input[str] validity_period: Specify validity period in month, only support `"3"` months for now.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FreeCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a Free Certificate.

        > **NOTE:** Once certificat created, it cannot be removed within 1 hours.

        ## Example Usage

        ### only support type 2. 2=TrustAsia TLS RSA CA.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.ssl.FreeCertificate("example",
            alias="example_free_cert",
            contact_email="test@example.com",
            contact_phone="18352458901",
            csr_encrypt_algo="RSA",
            csr_key_parameter="2048",
            csr_key_password="csr_pwd",
            domain="example.com",
            dv_auth_method="DNS_AUTO",
            package_type="2",
            validity_period="12")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        FreeCertificate instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/freeCertificate:FreeCertificate test free_certificate-id
        ```

        :param str resource_name: The name of the resource.
        :param FreeCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FreeCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 contact_email: Optional[pulumi.Input[str]] = None,
                 contact_phone: Optional[pulumi.Input[str]] = None,
                 csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 dv_auth_method: Optional[pulumi.Input[str]] = None,
                 old_certificate_id: Optional[pulumi.Input[str]] = None,
                 package_type: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 validity_period: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FreeCertificateArgs.__new__(FreeCertificateArgs)

            __props__.__dict__["alias"] = alias
            __props__.__dict__["contact_email"] = contact_email
            __props__.__dict__["contact_phone"] = contact_phone
            __props__.__dict__["csr_encrypt_algo"] = csr_encrypt_algo
            __props__.__dict__["csr_key_parameter"] = csr_key_parameter
            __props__.__dict__["csr_key_password"] = None if csr_key_password is None else pulumi.Output.secret(csr_key_password)
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if dv_auth_method is None and not opts.urn:
                raise TypeError("Missing required property 'dv_auth_method'")
            __props__.__dict__["dv_auth_method"] = dv_auth_method
            __props__.__dict__["old_certificate_id"] = old_certificate_id
            __props__.__dict__["package_type"] = package_type
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["validity_period"] = validity_period
            __props__.__dict__["cert_begin_time"] = None
            __props__.__dict__["cert_end_time"] = None
            __props__.__dict__["certificate_private_key"] = None
            __props__.__dict__["certificate_public_key"] = None
            __props__.__dict__["deployable"] = None
            __props__.__dict__["dv_auths"] = None
            __props__.__dict__["insert_time"] = None
            __props__.__dict__["product_zh_name"] = None
            __props__.__dict__["renewable"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_msg"] = None
            __props__.__dict__["status_name"] = None
            __props__.__dict__["vulnerability_status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["csrKeyPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(FreeCertificate, __self__).__init__(
            'tencentcloud:Ssl/freeCertificate:FreeCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alias: Optional[pulumi.Input[str]] = None,
            cert_begin_time: Optional[pulumi.Input[str]] = None,
            cert_end_time: Optional[pulumi.Input[str]] = None,
            certificate_private_key: Optional[pulumi.Input[str]] = None,
            certificate_public_key: Optional[pulumi.Input[str]] = None,
            contact_email: Optional[pulumi.Input[str]] = None,
            contact_phone: Optional[pulumi.Input[str]] = None,
            csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
            csr_key_parameter: Optional[pulumi.Input[str]] = None,
            csr_key_password: Optional[pulumi.Input[str]] = None,
            deployable: Optional[pulumi.Input[bool]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            dv_auth_method: Optional[pulumi.Input[str]] = None,
            dv_auths: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FreeCertificateDvAuthArgs']]]]] = None,
            insert_time: Optional[pulumi.Input[str]] = None,
            old_certificate_id: Optional[pulumi.Input[str]] = None,
            package_type: Optional[pulumi.Input[str]] = None,
            product_zh_name: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            renewable: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[int]] = None,
            status_msg: Optional[pulumi.Input[str]] = None,
            status_name: Optional[pulumi.Input[str]] = None,
            validity_period: Optional[pulumi.Input[str]] = None,
            vulnerability_status: Optional[pulumi.Input[str]] = None) -> 'FreeCertificate':
        """
        Get an existing FreeCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alias: Specify alias for remark.
        :param pulumi.Input[str] cert_begin_time: Certificate begin time.
        :param pulumi.Input[str] cert_end_time: Certificate end time.
        :param pulumi.Input[str] certificate_private_key: Certificate private key.
        :param pulumi.Input[str] certificate_public_key: Certificate public key.
        :param pulumi.Input[str] contact_email: Email address.
        :param pulumi.Input[str] contact_phone: Phone number.
        :param pulumi.Input[str] csr_encrypt_algo: Specify CSR encrypt algorithm, only support `RSA` for now.
        :param pulumi.Input[str] csr_key_parameter: Specify CSR key parameter, only support `"2048"` for now.
        :param pulumi.Input[str] csr_key_password: Specify CSR key password.
        :param pulumi.Input[bool] deployable: Indicates whether the certificate deployable.
        :param pulumi.Input[str] domain: Specify domain name.
        :param pulumi.Input[str] dv_auth_method: Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FreeCertificateDvAuthArgs']]]] dv_auths: DV certification information.
        :param pulumi.Input[str] insert_time: Certificate insert time.
        :param pulumi.Input[str] old_certificate_id: Specify old certificate ID, used for re-apply.
        :param pulumi.Input[str] package_type: Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
        :param pulumi.Input[str] product_zh_name: Product zh name.
        :param pulumi.Input[int] project_id: ID of projects which this certification belong to.
        :param pulumi.Input[bool] renewable: Indicates whether the certificate renewable.
        :param pulumi.Input[int] status: Certificate status. 0 = Approving, 1 = Approved, 2 = Approve failed, 3 = expired, 4 = DNS record added, 5 = OV/EV Certificate and confirm letter needed, 6 = Order canceling, 7 = Order canceled, 8 = Submitted and confirm letter needed, 9 = Revoking, 10 = Revoked, 11 = re-applying, 12 = Revoke and confirm letter needed, 13 = Free SSL and confirm letter needed.
        :param pulumi.Input[str] status_msg: Certificate status message.
        :param pulumi.Input[str] status_name: Certificate status name.
        :param pulumi.Input[str] validity_period: Specify validity period in month, only support `"3"` months for now.
        :param pulumi.Input[str] vulnerability_status: Vulnerability status.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FreeCertificateState.__new__(_FreeCertificateState)

        __props__.__dict__["alias"] = alias
        __props__.__dict__["cert_begin_time"] = cert_begin_time
        __props__.__dict__["cert_end_time"] = cert_end_time
        __props__.__dict__["certificate_private_key"] = certificate_private_key
        __props__.__dict__["certificate_public_key"] = certificate_public_key
        __props__.__dict__["contact_email"] = contact_email
        __props__.__dict__["contact_phone"] = contact_phone
        __props__.__dict__["csr_encrypt_algo"] = csr_encrypt_algo
        __props__.__dict__["csr_key_parameter"] = csr_key_parameter
        __props__.__dict__["csr_key_password"] = csr_key_password
        __props__.__dict__["deployable"] = deployable
        __props__.__dict__["domain"] = domain
        __props__.__dict__["dv_auth_method"] = dv_auth_method
        __props__.__dict__["dv_auths"] = dv_auths
        __props__.__dict__["insert_time"] = insert_time
        __props__.__dict__["old_certificate_id"] = old_certificate_id
        __props__.__dict__["package_type"] = package_type
        __props__.__dict__["product_zh_name"] = product_zh_name
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["renewable"] = renewable
        __props__.__dict__["status"] = status
        __props__.__dict__["status_msg"] = status_msg
        __props__.__dict__["status_name"] = status_name
        __props__.__dict__["validity_period"] = validity_period
        __props__.__dict__["vulnerability_status"] = vulnerability_status
        return FreeCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def alias(self) -> pulumi.Output[Optional[str]]:
        """
        Specify alias for remark.
        """
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="certBeginTime")
    def cert_begin_time(self) -> pulumi.Output[str]:
        """
        Certificate begin time.
        """
        return pulumi.get(self, "cert_begin_time")

    @property
    @pulumi.getter(name="certEndTime")
    def cert_end_time(self) -> pulumi.Output[str]:
        """
        Certificate end time.
        """
        return pulumi.get(self, "cert_end_time")

    @property
    @pulumi.getter(name="certificatePrivateKey")
    def certificate_private_key(self) -> pulumi.Output[str]:
        """
        Certificate private key.
        """
        return pulumi.get(self, "certificate_private_key")

    @property
    @pulumi.getter(name="certificatePublicKey")
    def certificate_public_key(self) -> pulumi.Output[str]:
        """
        Certificate public key.
        """
        return pulumi.get(self, "certificate_public_key")

    @property
    @pulumi.getter(name="contactEmail")
    def contact_email(self) -> pulumi.Output[Optional[str]]:
        """
        Email address.
        """
        return pulumi.get(self, "contact_email")

    @property
    @pulumi.getter(name="contactPhone")
    def contact_phone(self) -> pulumi.Output[Optional[str]]:
        """
        Phone number.
        """
        return pulumi.get(self, "contact_phone")

    @property
    @pulumi.getter(name="csrEncryptAlgo")
    def csr_encrypt_algo(self) -> pulumi.Output[Optional[str]]:
        """
        Specify CSR encrypt algorithm, only support `RSA` for now.
        """
        return pulumi.get(self, "csr_encrypt_algo")

    @property
    @pulumi.getter(name="csrKeyParameter")
    def csr_key_parameter(self) -> pulumi.Output[Optional[str]]:
        """
        Specify CSR key parameter, only support `"2048"` for now.
        """
        return pulumi.get(self, "csr_key_parameter")

    @property
    @pulumi.getter(name="csrKeyPassword")
    def csr_key_password(self) -> pulumi.Output[Optional[str]]:
        """
        Specify CSR key password.
        """
        return pulumi.get(self, "csr_key_password")

    @property
    @pulumi.getter
    def deployable(self) -> pulumi.Output[bool]:
        """
        Indicates whether the certificate deployable.
        """
        return pulumi.get(self, "deployable")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Specify domain name.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="dvAuthMethod")
    def dv_auth_method(self) -> pulumi.Output[str]:
        """
        Specify DV authorize method. Available values: `DNS_AUTO` - automatic DNS auth, `DNS` - manual DNS auth, `FILE` - auth by file.
        """
        return pulumi.get(self, "dv_auth_method")

    @property
    @pulumi.getter(name="dvAuths")
    def dv_auths(self) -> pulumi.Output[Sequence['outputs.FreeCertificateDvAuth']]:
        """
        DV certification information.
        """
        return pulumi.get(self, "dv_auths")

    @property
    @pulumi.getter(name="insertTime")
    def insert_time(self) -> pulumi.Output[str]:
        """
        Certificate insert time.
        """
        return pulumi.get(self, "insert_time")

    @property
    @pulumi.getter(name="oldCertificateId")
    def old_certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        Specify old certificate ID, used for re-apply.
        """
        return pulumi.get(self, "old_certificate_id")

    @property
    @pulumi.getter(name="packageType")
    def package_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of package. Only support `"83"` (TrustAsia TLS RSA CA).
        """
        return pulumi.get(self, "package_type")

    @property
    @pulumi.getter(name="productZhName")
    def product_zh_name(self) -> pulumi.Output[str]:
        """
        Product zh name.
        """
        return pulumi.get(self, "product_zh_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of projects which this certification belong to.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def renewable(self) -> pulumi.Output[bool]:
        """
        Indicates whether the certificate renewable.
        """
        return pulumi.get(self, "renewable")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Certificate status. 0 = Approving, 1 = Approved, 2 = Approve failed, 3 = expired, 4 = DNS record added, 5 = OV/EV Certificate and confirm letter needed, 6 = Order canceling, 7 = Order canceled, 8 = Submitted and confirm letter needed, 9 = Revoking, 10 = Revoked, 11 = re-applying, 12 = Revoke and confirm letter needed, 13 = Free SSL and confirm letter needed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMsg")
    def status_msg(self) -> pulumi.Output[str]:
        """
        Certificate status message.
        """
        return pulumi.get(self, "status_msg")

    @property
    @pulumi.getter(name="statusName")
    def status_name(self) -> pulumi.Output[str]:
        """
        Certificate status name.
        """
        return pulumi.get(self, "status_name")

    @property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> pulumi.Output[Optional[str]]:
        """
        Specify validity period in month, only support `"3"` months for now.
        """
        return pulumi.get(self, "validity_period")

    @property
    @pulumi.getter(name="vulnerabilityStatus")
    def vulnerability_status(self) -> pulumi.Output[str]:
        """
        Vulnerability status.
        """
        return pulumi.get(self, "vulnerability_status")

