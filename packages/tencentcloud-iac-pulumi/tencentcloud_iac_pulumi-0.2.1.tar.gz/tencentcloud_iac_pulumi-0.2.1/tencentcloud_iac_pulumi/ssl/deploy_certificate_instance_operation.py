# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DeployCertificateInstanceOperationArgs', 'DeployCertificateInstanceOperation']

@pulumi.input_type
class DeployCertificateInstanceOperationArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[str],
                 instance_id_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a DeployCertificateInstanceOperation resource.
        :param pulumi.Input[str] certificate_id: ID of the certificate to be deployed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_id_lists: Need to deploy instance list.
        :param pulumi.Input[str] resource_type: Deployed cloud resource type.
        :param pulumi.Input[int] status: Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "instance_id_lists", instance_id_lists)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        """
        ID of the certificate to be deployed.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="instanceIdLists")
    def instance_id_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Need to deploy instance list.
        """
        return pulumi.get(self, "instance_id_lists")

    @instance_id_lists.setter
    def instance_id_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "instance_id_lists", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployed cloud resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _DeployCertificateInstanceOperationState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 instance_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DeployCertificateInstanceOperation resources.
        :param pulumi.Input[str] certificate_id: ID of the certificate to be deployed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_id_lists: Need to deploy instance list.
        :param pulumi.Input[str] resource_type: Deployed cloud resource type.
        :param pulumi.Input[int] status: Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if instance_id_lists is not None:
            pulumi.set(__self__, "instance_id_lists", instance_id_lists)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the certificate to be deployed.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="instanceIdLists")
    def instance_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Need to deploy instance list.
        """
        return pulumi.get(self, "instance_id_lists")

    @instance_id_lists.setter
    def instance_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_id_lists", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Deployed cloud resource type.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)


class DeployCertificateInstanceOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 instance_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a ssl deploy_certificate_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        deploy_certificate_instance = tencentcloud.ssl.DeployCertificateInstanceOperation("deployCertificateInstance",
            certificate_id="8x1eUSSl",
            instance_id_lists=[
                "cdndomain1.example.com|on",
                "cdndomain1.example.com|off",
            ],
            resource_type="cdn")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ssl deploy_certificate_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/deployCertificateInstanceOperation:DeployCertificateInstanceOperation deploy_certificate_instance deploy_certificate_instance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: ID of the certificate to be deployed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_id_lists: Need to deploy instance list.
        :param pulumi.Input[str] resource_type: Deployed cloud resource type.
        :param pulumi.Input[int] status: Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeployCertificateInstanceOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ssl deploy_certificate_instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        deploy_certificate_instance = tencentcloud.ssl.DeployCertificateInstanceOperation("deployCertificateInstance",
            certificate_id="8x1eUSSl",
            instance_id_lists=[
                "cdndomain1.example.com|on",
                "cdndomain1.example.com|off",
            ],
            resource_type="cdn")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ssl deploy_certificate_instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/deployCertificateInstanceOperation:DeployCertificateInstanceOperation deploy_certificate_instance deploy_certificate_instance_id
        ```

        :param str resource_name: The name of the resource.
        :param DeployCertificateInstanceOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeployCertificateInstanceOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 instance_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeployCertificateInstanceOperationArgs.__new__(DeployCertificateInstanceOperationArgs)

            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            if instance_id_lists is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id_lists'")
            __props__.__dict__["instance_id_lists"] = instance_id_lists
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["status"] = status
        super(DeployCertificateInstanceOperation, __self__).__init__(
            'tencentcloud:Ssl/deployCertificateInstanceOperation:DeployCertificateInstanceOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            instance_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None) -> 'DeployCertificateInstanceOperation':
        """
        Get an existing DeployCertificateInstanceOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: ID of the certificate to be deployed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] instance_id_lists: Need to deploy instance list.
        :param pulumi.Input[str] resource_type: Deployed cloud resource type.
        :param pulumi.Input[int] status: Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeployCertificateInstanceOperationState.__new__(_DeployCertificateInstanceOperationState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["instance_id_lists"] = instance_id_lists
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["status"] = status
        return DeployCertificateInstanceOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[str]:
        """
        ID of the certificate to be deployed.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="instanceIdLists")
    def instance_id_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        Need to deploy instance list.
        """
        return pulumi.get(self, "instance_id_lists")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[Optional[str]]:
        """
        Deployed cloud resource type.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[int]]:
        """
        Deployment cloud resource status: Live: -1: The domain name is not associated with a certificate.1:  Domain name https is enabled.0:  Domain name https is closed.
        """
        return pulumi.get(self, "status")

