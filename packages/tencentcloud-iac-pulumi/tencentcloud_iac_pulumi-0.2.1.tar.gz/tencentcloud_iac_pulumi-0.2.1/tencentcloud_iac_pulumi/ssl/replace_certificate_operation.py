# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ReplaceCertificateOperationArgs', 'ReplaceCertificateOperation']

@pulumi.input_type
class ReplaceCertificateOperationArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[str],
                 valid_type: pulumi.Input[str],
                 cert_csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 cert_csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 csr_content: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 csr_type: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReplaceCertificateOperation resource.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] valid_type: Verification type: DNS_AUTO = automatic DNS verification (this verification type is only supported for domain names that are resolved by Tencent Cloud and have normal resolution status), DNS = manual DNS verification, FILE = file verification.
        :param pulumi.Input[str] cert_csr_encrypt_algo: CSR encryption method, optional: RSA, ECC, SM2. (Selectable only if CsrType is Online), default is RSA.
        :param pulumi.Input[str] cert_csr_key_parameter: CSR encryption parameter, when CsrEncryptAlgo is RSA, you can choose 2048, 4096, etc., and the default is 2048; when CsrEncryptAlgo is ECC, you can choose prime256v1, secp384r1, etc., and the default is prime256v1;.
        :param pulumi.Input[str] csr_content: CSR Content.
        :param pulumi.Input[str] csr_key_password: KEY Password.
        :param pulumi.Input[str] csr_type: Type, default Original. Available options: Original = original certificate CSR, Upload = manual upload, Online = online generation.
        :param pulumi.Input[str] reason: Reason for reissue.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "valid_type", valid_type)
        if cert_csr_encrypt_algo is not None:
            pulumi.set(__self__, "cert_csr_encrypt_algo", cert_csr_encrypt_algo)
        if cert_csr_key_parameter is not None:
            pulumi.set(__self__, "cert_csr_key_parameter", cert_csr_key_parameter)
        if csr_content is not None:
            pulumi.set(__self__, "csr_content", csr_content)
        if csr_key_password is not None:
            pulumi.set(__self__, "csr_key_password", csr_key_password)
        if csr_type is not None:
            pulumi.set(__self__, "csr_type", csr_type)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        """
        Certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="validType")
    def valid_type(self) -> pulumi.Input[str]:
        """
        Verification type: DNS_AUTO = automatic DNS verification (this verification type is only supported for domain names that are resolved by Tencent Cloud and have normal resolution status), DNS = manual DNS verification, FILE = file verification.
        """
        return pulumi.get(self, "valid_type")

    @valid_type.setter
    def valid_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "valid_type", value)

    @property
    @pulumi.getter(name="certCsrEncryptAlgo")
    def cert_csr_encrypt_algo(self) -> Optional[pulumi.Input[str]]:
        """
        CSR encryption method, optional: RSA, ECC, SM2. (Selectable only if CsrType is Online), default is RSA.
        """
        return pulumi.get(self, "cert_csr_encrypt_algo")

    @cert_csr_encrypt_algo.setter
    def cert_csr_encrypt_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_csr_encrypt_algo", value)

    @property
    @pulumi.getter(name="certCsrKeyParameter")
    def cert_csr_key_parameter(self) -> Optional[pulumi.Input[str]]:
        """
        CSR encryption parameter, when CsrEncryptAlgo is RSA, you can choose 2048, 4096, etc., and the default is 2048; when CsrEncryptAlgo is ECC, you can choose prime256v1, secp384r1, etc., and the default is prime256v1;.
        """
        return pulumi.get(self, "cert_csr_key_parameter")

    @cert_csr_key_parameter.setter
    def cert_csr_key_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_csr_key_parameter", value)

    @property
    @pulumi.getter(name="csrContent")
    def csr_content(self) -> Optional[pulumi.Input[str]]:
        """
        CSR Content.
        """
        return pulumi.get(self, "csr_content")

    @csr_content.setter
    def csr_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_content", value)

    @property
    @pulumi.getter(name="csrKeyPassword")
    def csr_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        KEY Password.
        """
        return pulumi.get(self, "csr_key_password")

    @csr_key_password.setter
    def csr_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_key_password", value)

    @property
    @pulumi.getter(name="csrType")
    def csr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type, default Original. Available options: Original = original certificate CSR, Upload = manual upload, Online = online generation.
        """
        return pulumi.get(self, "csr_type")

    @csr_type.setter
    def csr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_type", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason for reissue.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


@pulumi.input_type
class _ReplaceCertificateOperationState:
    def __init__(__self__, *,
                 cert_csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 cert_csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 csr_content: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 csr_type: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 valid_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ReplaceCertificateOperation resources.
        :param pulumi.Input[str] cert_csr_encrypt_algo: CSR encryption method, optional: RSA, ECC, SM2. (Selectable only if CsrType is Online), default is RSA.
        :param pulumi.Input[str] cert_csr_key_parameter: CSR encryption parameter, when CsrEncryptAlgo is RSA, you can choose 2048, 4096, etc., and the default is 2048; when CsrEncryptAlgo is ECC, you can choose prime256v1, secp384r1, etc., and the default is prime256v1;.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] csr_content: CSR Content.
        :param pulumi.Input[str] csr_key_password: KEY Password.
        :param pulumi.Input[str] csr_type: Type, default Original. Available options: Original = original certificate CSR, Upload = manual upload, Online = online generation.
        :param pulumi.Input[str] reason: Reason for reissue.
        :param pulumi.Input[str] valid_type: Verification type: DNS_AUTO = automatic DNS verification (this verification type is only supported for domain names that are resolved by Tencent Cloud and have normal resolution status), DNS = manual DNS verification, FILE = file verification.
        """
        if cert_csr_encrypt_algo is not None:
            pulumi.set(__self__, "cert_csr_encrypt_algo", cert_csr_encrypt_algo)
        if cert_csr_key_parameter is not None:
            pulumi.set(__self__, "cert_csr_key_parameter", cert_csr_key_parameter)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if csr_content is not None:
            pulumi.set(__self__, "csr_content", csr_content)
        if csr_key_password is not None:
            pulumi.set(__self__, "csr_key_password", csr_key_password)
        if csr_type is not None:
            pulumi.set(__self__, "csr_type", csr_type)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if valid_type is not None:
            pulumi.set(__self__, "valid_type", valid_type)

    @property
    @pulumi.getter(name="certCsrEncryptAlgo")
    def cert_csr_encrypt_algo(self) -> Optional[pulumi.Input[str]]:
        """
        CSR encryption method, optional: RSA, ECC, SM2. (Selectable only if CsrType is Online), default is RSA.
        """
        return pulumi.get(self, "cert_csr_encrypt_algo")

    @cert_csr_encrypt_algo.setter
    def cert_csr_encrypt_algo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_csr_encrypt_algo", value)

    @property
    @pulumi.getter(name="certCsrKeyParameter")
    def cert_csr_key_parameter(self) -> Optional[pulumi.Input[str]]:
        """
        CSR encryption parameter, when CsrEncryptAlgo is RSA, you can choose 2048, 4096, etc., and the default is 2048; when CsrEncryptAlgo is ECC, you can choose prime256v1, secp384r1, etc., and the default is prime256v1;.
        """
        return pulumi.get(self, "cert_csr_key_parameter")

    @cert_csr_key_parameter.setter
    def cert_csr_key_parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_csr_key_parameter", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="csrContent")
    def csr_content(self) -> Optional[pulumi.Input[str]]:
        """
        CSR Content.
        """
        return pulumi.get(self, "csr_content")

    @csr_content.setter
    def csr_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_content", value)

    @property
    @pulumi.getter(name="csrKeyPassword")
    def csr_key_password(self) -> Optional[pulumi.Input[str]]:
        """
        KEY Password.
        """
        return pulumi.get(self, "csr_key_password")

    @csr_key_password.setter
    def csr_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_key_password", value)

    @property
    @pulumi.getter(name="csrType")
    def csr_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type, default Original. Available options: Original = original certificate CSR, Upload = manual upload, Online = online generation.
        """
        return pulumi.get(self, "csr_type")

    @csr_type.setter
    def csr_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "csr_type", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason for reissue.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="validType")
    def valid_type(self) -> Optional[pulumi.Input[str]]:
        """
        Verification type: DNS_AUTO = automatic DNS verification (this verification type is only supported for domain names that are resolved by Tencent Cloud and have normal resolution status), DNS = manual DNS verification, FILE = file verification.
        """
        return pulumi.get(self, "valid_type")

    @valid_type.setter
    def valid_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "valid_type", value)


class ReplaceCertificateOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 cert_csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 csr_content: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 csr_type: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 valid_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a ssl replace_certificate

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        replace_certificate = tencentcloud.ssl.ReplaceCertificateOperation("replaceCertificate",
            certificate_id="8L6JsWq2",
            csr_type="online",
            valid_type="DNS_AUTO")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ssl replace_certificate can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/replaceCertificateOperation:ReplaceCertificateOperation replace_certificate replace_certificate_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cert_csr_encrypt_algo: CSR encryption method, optional: RSA, ECC, SM2. (Selectable only if CsrType is Online), default is RSA.
        :param pulumi.Input[str] cert_csr_key_parameter: CSR encryption parameter, when CsrEncryptAlgo is RSA, you can choose 2048, 4096, etc., and the default is 2048; when CsrEncryptAlgo is ECC, you can choose prime256v1, secp384r1, etc., and the default is prime256v1;.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] csr_content: CSR Content.
        :param pulumi.Input[str] csr_key_password: KEY Password.
        :param pulumi.Input[str] csr_type: Type, default Original. Available options: Original = original certificate CSR, Upload = manual upload, Online = online generation.
        :param pulumi.Input[str] reason: Reason for reissue.
        :param pulumi.Input[str] valid_type: Verification type: DNS_AUTO = automatic DNS verification (this verification type is only supported for domain names that are resolved by Tencent Cloud and have normal resolution status), DNS = manual DNS verification, FILE = file verification.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReplaceCertificateOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a ssl replace_certificate

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        replace_certificate = tencentcloud.ssl.ReplaceCertificateOperation("replaceCertificate",
            certificate_id="8L6JsWq2",
            csr_type="online",
            valid_type="DNS_AUTO")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        ssl replace_certificate can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Ssl/replaceCertificateOperation:ReplaceCertificateOperation replace_certificate replace_certificate_id
        ```

        :param str resource_name: The name of the resource.
        :param ReplaceCertificateOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReplaceCertificateOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert_csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
                 cert_csr_key_parameter: Optional[pulumi.Input[str]] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 csr_content: Optional[pulumi.Input[str]] = None,
                 csr_key_password: Optional[pulumi.Input[str]] = None,
                 csr_type: Optional[pulumi.Input[str]] = None,
                 reason: Optional[pulumi.Input[str]] = None,
                 valid_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReplaceCertificateOperationArgs.__new__(ReplaceCertificateOperationArgs)

            __props__.__dict__["cert_csr_encrypt_algo"] = cert_csr_encrypt_algo
            __props__.__dict__["cert_csr_key_parameter"] = cert_csr_key_parameter
            if certificate_id is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_id'")
            __props__.__dict__["certificate_id"] = certificate_id
            __props__.__dict__["csr_content"] = csr_content
            __props__.__dict__["csr_key_password"] = csr_key_password
            __props__.__dict__["csr_type"] = csr_type
            __props__.__dict__["reason"] = reason
            if valid_type is None and not opts.urn:
                raise TypeError("Missing required property 'valid_type'")
            __props__.__dict__["valid_type"] = valid_type
        super(ReplaceCertificateOperation, __self__).__init__(
            'tencentcloud:Ssl/replaceCertificateOperation:ReplaceCertificateOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cert_csr_encrypt_algo: Optional[pulumi.Input[str]] = None,
            cert_csr_key_parameter: Optional[pulumi.Input[str]] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            csr_content: Optional[pulumi.Input[str]] = None,
            csr_key_password: Optional[pulumi.Input[str]] = None,
            csr_type: Optional[pulumi.Input[str]] = None,
            reason: Optional[pulumi.Input[str]] = None,
            valid_type: Optional[pulumi.Input[str]] = None) -> 'ReplaceCertificateOperation':
        """
        Get an existing ReplaceCertificateOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cert_csr_encrypt_algo: CSR encryption method, optional: RSA, ECC, SM2. (Selectable only if CsrType is Online), default is RSA.
        :param pulumi.Input[str] cert_csr_key_parameter: CSR encryption parameter, when CsrEncryptAlgo is RSA, you can choose 2048, 4096, etc., and the default is 2048; when CsrEncryptAlgo is ECC, you can choose prime256v1, secp384r1, etc., and the default is prime256v1;.
        :param pulumi.Input[str] certificate_id: Certificate ID.
        :param pulumi.Input[str] csr_content: CSR Content.
        :param pulumi.Input[str] csr_key_password: KEY Password.
        :param pulumi.Input[str] csr_type: Type, default Original. Available options: Original = original certificate CSR, Upload = manual upload, Online = online generation.
        :param pulumi.Input[str] reason: Reason for reissue.
        :param pulumi.Input[str] valid_type: Verification type: DNS_AUTO = automatic DNS verification (this verification type is only supported for domain names that are resolved by Tencent Cloud and have normal resolution status), DNS = manual DNS verification, FILE = file verification.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReplaceCertificateOperationState.__new__(_ReplaceCertificateOperationState)

        __props__.__dict__["cert_csr_encrypt_algo"] = cert_csr_encrypt_algo
        __props__.__dict__["cert_csr_key_parameter"] = cert_csr_key_parameter
        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["csr_content"] = csr_content
        __props__.__dict__["csr_key_password"] = csr_key_password
        __props__.__dict__["csr_type"] = csr_type
        __props__.__dict__["reason"] = reason
        __props__.__dict__["valid_type"] = valid_type
        return ReplaceCertificateOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certCsrEncryptAlgo")
    def cert_csr_encrypt_algo(self) -> pulumi.Output[Optional[str]]:
        """
        CSR encryption method, optional: RSA, ECC, SM2. (Selectable only if CsrType is Online), default is RSA.
        """
        return pulumi.get(self, "cert_csr_encrypt_algo")

    @property
    @pulumi.getter(name="certCsrKeyParameter")
    def cert_csr_key_parameter(self) -> pulumi.Output[Optional[str]]:
        """
        CSR encryption parameter, when CsrEncryptAlgo is RSA, you can choose 2048, 4096, etc., and the default is 2048; when CsrEncryptAlgo is ECC, you can choose prime256v1, secp384r1, etc., and the default is prime256v1;.
        """
        return pulumi.get(self, "cert_csr_key_parameter")

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[str]:
        """
        Certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="csrContent")
    def csr_content(self) -> pulumi.Output[Optional[str]]:
        """
        CSR Content.
        """
        return pulumi.get(self, "csr_content")

    @property
    @pulumi.getter(name="csrKeyPassword")
    def csr_key_password(self) -> pulumi.Output[Optional[str]]:
        """
        KEY Password.
        """
        return pulumi.get(self, "csr_key_password")

    @property
    @pulumi.getter(name="csrType")
    def csr_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type, default Original. Available options: Original = original certificate CSR, Upload = manual upload, Online = online generation.
        """
        return pulumi.get(self, "csr_type")

    @property
    @pulumi.getter
    def reason(self) -> pulumi.Output[Optional[str]]:
        """
        Reason for reissue.
        """
        return pulumi.get(self, "reason")

    @property
    @pulumi.getter(name="validType")
    def valid_type(self) -> pulumi.Output[str]:
        """
        Verification type: DNS_AUTO = automatic DNS verification (this verification type is only supported for domain names that are resolved by Tencent Cloud and have normal resolution status), DNS = manual DNS verification, FILE = file verification.
        """
        return pulumi.get(self, "valid_type")

