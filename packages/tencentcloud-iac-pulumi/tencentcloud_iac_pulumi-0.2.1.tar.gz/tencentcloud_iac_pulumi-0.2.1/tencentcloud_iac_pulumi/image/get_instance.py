# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, filters=None, id=None, image_id=None, image_name=None, image_name_regex=None, os_name=None, result_output_file=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if image_name_regex and not isinstance(image_name_regex, str):
            raise TypeError("Expected argument 'image_name_regex' to be a str")
        pulumi.set(__self__, "image_name_regex", image_name_regex)
        if os_name and not isinstance(os_name, str):
            raise TypeError("Expected argument 'os_name' to be a str")
        pulumi.set(__self__, "os_name", os_name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetInstanceFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        """
        An image id indicate the uniqueness of a certain image,  which can be used for instance creation or resetting.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        """
        Name of this image.
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageNameRegex")
    def image_name_regex(self) -> Optional[str]:
        return pulumi.get(self, "image_name_regex")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[str]:
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            filters=self.filters,
            id=self.id,
            image_id=self.image_id,
            image_name=self.image_name,
            image_name_regex=self.image_name_regex,
            os_name=self.os_name,
            result_output_file=self.result_output_file)


def get_instance(filters: Optional[Sequence[pulumi.InputType['GetInstanceFilterArgs']]] = None,
                 image_name_regex: Optional[str] = None,
                 os_name: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Provides an available image for the user.

    The Images data source fetch proper image, which could be one of the private images of the user and images of system
    resources provided by TencentCloud, as well as other public images and those available on the image market.

    > **NOTE:** This data source will be deprecated, please use `images_get_instance` instead.

    ## Example Usage

    ### Query image

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance()
    ```
    <!--End PulumiCodeChooser -->

    ### Query image by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance(filters=[tencentcloud.image.GetInstanceFilterArgs(
        name="image-type",
        values=["PUBLIC_IMAGE"],
    )])
    ```
    <!--End PulumiCodeChooser -->

    ### Query image by os name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance(os_name="centos")
    ```
    <!--End PulumiCodeChooser -->

    ### Query image by image name regex

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance(image_name_regex="^Windows\\\\s.*$")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetInstanceFilterArgs']] filters: One or more name/value pairs to filter.
    :param str image_name_regex: A regex string to apply to the image list returned by TencentCloud. **NOTE**: it is not wildcard, should look like `image_name_regex = "^CentOS\\s+6\\.8\\s+64\\w*"`.
    :param str os_name: A string to apply with fuzzy match to the os_name attribute on the image list returned by TencentCloud. **NOTE**: when os_name is provided, highest priority is applied in this field instead of `image_name_regex`.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['imageNameRegex'] = image_name_regex
    __args__['osName'] = os_name
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Image/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        image_name=pulumi.get(__ret__, 'image_name'),
        image_name_regex=pulumi.get(__ret__, 'image_name_regex'),
        os_name=pulumi.get(__ret__, 'os_name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetInstanceFilterArgs']]]]] = None,
                        image_name_regex: Optional[pulumi.Input[Optional[str]]] = None,
                        os_name: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Provides an available image for the user.

    The Images data source fetch proper image, which could be one of the private images of the user and images of system
    resources provided by TencentCloud, as well as other public images and those available on the image market.

    > **NOTE:** This data source will be deprecated, please use `images_get_instance` instead.

    ## Example Usage

    ### Query image

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance()
    ```
    <!--End PulumiCodeChooser -->

    ### Query image by filter

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance(filters=[tencentcloud.image.GetInstanceFilterArgs(
        name="image-type",
        values=["PUBLIC_IMAGE"],
    )])
    ```
    <!--End PulumiCodeChooser -->

    ### Query image by os name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance(os_name="centos")
    ```
    <!--End PulumiCodeChooser -->

    ### Query image by image name regex

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Image.get_instance(image_name_regex="^Windows\\\\s.*$")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetInstanceFilterArgs']] filters: One or more name/value pairs to filter.
    :param str image_name_regex: A regex string to apply to the image list returned by TencentCloud. **NOTE**: it is not wildcard, should look like `image_name_regex = "^CentOS\\s+6\\.8\\s+64\\w*"`.
    :param str os_name: A string to apply with fuzzy match to the os_name attribute on the image list returned by TencentCloud. **NOTE**: when os_name is provided, highest priority is applied in this field instead of `image_name_regex`.
    :param str result_output_file: Used to save results.
    """
    ...
