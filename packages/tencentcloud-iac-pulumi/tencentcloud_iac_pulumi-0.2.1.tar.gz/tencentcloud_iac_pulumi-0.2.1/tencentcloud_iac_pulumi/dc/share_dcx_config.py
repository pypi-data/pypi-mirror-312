# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ShareDcxConfigArgs', 'ShareDcxConfig']

@pulumi.input_type
class ShareDcxConfigArgs:
    def __init__(__self__, *,
                 direct_connect_tunnel_id: pulumi.Input[str],
                 enable: pulumi.Input[bool]):
        """
        The set of arguments for constructing a ShareDcxConfig resource.
        :param pulumi.Input[str] direct_connect_tunnel_id: the direct connect owner accept or reject the apply of direct connect tunnel.
        :param pulumi.Input[bool] enable: if accept or reject direct connect tunnel.
        """
        pulumi.set(__self__, "direct_connect_tunnel_id", direct_connect_tunnel_id)
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="directConnectTunnelId")
    def direct_connect_tunnel_id(self) -> pulumi.Input[str]:
        """
        the direct connect owner accept or reject the apply of direct connect tunnel.
        """
        return pulumi.get(self, "direct_connect_tunnel_id")

    @direct_connect_tunnel_id.setter
    def direct_connect_tunnel_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "direct_connect_tunnel_id", value)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[bool]:
        """
        if accept or reject direct connect tunnel.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class _ShareDcxConfigState:
    def __init__(__self__, *,
                 direct_connect_tunnel_id: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ShareDcxConfig resources.
        :param pulumi.Input[str] direct_connect_tunnel_id: the direct connect owner accept or reject the apply of direct connect tunnel.
        :param pulumi.Input[bool] enable: if accept or reject direct connect tunnel.
        """
        if direct_connect_tunnel_id is not None:
            pulumi.set(__self__, "direct_connect_tunnel_id", direct_connect_tunnel_id)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="directConnectTunnelId")
    def direct_connect_tunnel_id(self) -> Optional[pulumi.Input[str]]:
        """
        the direct connect owner accept or reject the apply of direct connect tunnel.
        """
        return pulumi.get(self, "direct_connect_tunnel_id")

    @direct_connect_tunnel_id.setter
    def direct_connect_tunnel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direct_connect_tunnel_id", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        if accept or reject direct connect tunnel.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)


class ShareDcxConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direct_connect_tunnel_id: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a dc share_dcx_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        share_dcx_config = tencentcloud.dc.ShareDcxConfig("shareDcxConfig",
            direct_connect_tunnel_id="dcx-4z49tnws",
            enable=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dc share_dcx_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dc/shareDcxConfig:ShareDcxConfig share_dcx_config dcx_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] direct_connect_tunnel_id: the direct connect owner accept or reject the apply of direct connect tunnel.
        :param pulumi.Input[bool] enable: if accept or reject direct connect tunnel.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ShareDcxConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dc share_dcx_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        share_dcx_config = tencentcloud.dc.ShareDcxConfig("shareDcxConfig",
            direct_connect_tunnel_id="dcx-4z49tnws",
            enable=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dc share_dcx_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dc/shareDcxConfig:ShareDcxConfig share_dcx_config dcx_id
        ```

        :param str resource_name: The name of the resource.
        :param ShareDcxConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ShareDcxConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direct_connect_tunnel_id: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ShareDcxConfigArgs.__new__(ShareDcxConfigArgs)

            if direct_connect_tunnel_id is None and not opts.urn:
                raise TypeError("Missing required property 'direct_connect_tunnel_id'")
            __props__.__dict__["direct_connect_tunnel_id"] = direct_connect_tunnel_id
            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
        super(ShareDcxConfig, __self__).__init__(
            'tencentcloud:Dc/shareDcxConfig:ShareDcxConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            direct_connect_tunnel_id: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[bool]] = None) -> 'ShareDcxConfig':
        """
        Get an existing ShareDcxConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] direct_connect_tunnel_id: the direct connect owner accept or reject the apply of direct connect tunnel.
        :param pulumi.Input[bool] enable: if accept or reject direct connect tunnel.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ShareDcxConfigState.__new__(_ShareDcxConfigState)

        __props__.__dict__["direct_connect_tunnel_id"] = direct_connect_tunnel_id
        __props__.__dict__["enable"] = enable
        return ShareDcxConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="directConnectTunnelId")
    def direct_connect_tunnel_id(self) -> pulumi.Output[str]:
        """
        the direct connect owner accept or reject the apply of direct connect tunnel.
        """
        return pulumi.get(self, "direct_connect_tunnel_id")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[bool]:
        """
        if accept or reject direct connect tunnel.
        """
        return pulumi.get(self, "enable")

