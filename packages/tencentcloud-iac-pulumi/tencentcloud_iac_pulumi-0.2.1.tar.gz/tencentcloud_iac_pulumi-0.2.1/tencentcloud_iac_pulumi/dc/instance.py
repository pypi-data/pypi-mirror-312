# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 access_point_id: pulumi.Input[str],
                 direct_connect_name: pulumi.Input[str],
                 line_operator: pulumi.Input[str],
                 port_type: pulumi.Input[str],
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 circuit_code: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 customer_contact_mail: Optional[pulumi.Input[str]] = None,
                 customer_contact_number: Optional[pulumi.Input[str]] = None,
                 customer_name: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_number: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_person: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 redundant_direct_connect_id: Optional[pulumi.Input[str]] = None,
                 sign_law: Optional[pulumi.Input[bool]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] access_point_id: Access point of connection.You can call `DescribeAccessPoints` to get the region ID. The selected access point must exist and be available.
        :param pulumi.Input[str] direct_connect_name: Connection name.
        :param pulumi.Input[str] line_operator: ISP that provides connections. Valid values: ChinaTelecom (China Telecom), ChinaMobile (China Mobile), ChinaUnicom (China Unicom), In-houseWiring (in-house wiring), ChinaOther (other Chinese ISPs), InternationalOperator (international ISPs).
        :param pulumi.Input[str] port_type: Port type of connection. Valid values: 100Base-T (100-Megabit electrical Ethernet interface), 1000Base-T (1-Gigabit electrical Ethernet interface), 1000Base-LX (1-Gigabit single-module optical Ethernet interface; 10 KM), 10GBase-T (10-Gigabit electrical Ethernet interface), 10GBase-LR (10-Gigabit single-module optical Ethernet interface; 10 KM). Default value: 1000Base-LX.
        :param pulumi.Input[int] bandwidth: Connection port bandwidth in Mbps. Value range: [2,10240]. Default value: 1000.
        :param pulumi.Input[str] circuit_code: Circuit code of a connection, which is provided by the ISP or connection provider.
        :param pulumi.Input[str] customer_address: User-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[str] customer_contact_mail: Email address of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_contact_number: Contact number of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_name: Name of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] fault_report_contact_number: Fault reporting contact number.
        :param pulumi.Input[str] fault_report_contact_person: Fault reporting contact person.
        :param pulumi.Input[str] location: Local IDC location.
        :param pulumi.Input[str] redundant_direct_connect_id: ID of redundant connection.
        :param pulumi.Input[bool] sign_law: Whether the connection applicant has signed the service agreement. Default value: true.
        :param pulumi.Input[str] tencent_address: Tencent-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[int] vlan: VLAN for connection debugging, which is enabled and automatically assigned by default.
        """
        pulumi.set(__self__, "access_point_id", access_point_id)
        pulumi.set(__self__, "direct_connect_name", direct_connect_name)
        pulumi.set(__self__, "line_operator", line_operator)
        pulumi.set(__self__, "port_type", port_type)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if circuit_code is not None:
            pulumi.set(__self__, "circuit_code", circuit_code)
        if customer_address is not None:
            pulumi.set(__self__, "customer_address", customer_address)
        if customer_contact_mail is not None:
            pulumi.set(__self__, "customer_contact_mail", customer_contact_mail)
        if customer_contact_number is not None:
            pulumi.set(__self__, "customer_contact_number", customer_contact_number)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if fault_report_contact_number is not None:
            pulumi.set(__self__, "fault_report_contact_number", fault_report_contact_number)
        if fault_report_contact_person is not None:
            pulumi.set(__self__, "fault_report_contact_person", fault_report_contact_person)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if redundant_direct_connect_id is not None:
            pulumi.set(__self__, "redundant_direct_connect_id", redundant_direct_connect_id)
        if sign_law is not None:
            pulumi.set(__self__, "sign_law", sign_law)
        if tencent_address is not None:
            pulumi.set(__self__, "tencent_address", tencent_address)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="accessPointId")
    def access_point_id(self) -> pulumi.Input[str]:
        """
        Access point of connection.You can call `DescribeAccessPoints` to get the region ID. The selected access point must exist and be available.
        """
        return pulumi.get(self, "access_point_id")

    @access_point_id.setter
    def access_point_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_point_id", value)

    @property
    @pulumi.getter(name="directConnectName")
    def direct_connect_name(self) -> pulumi.Input[str]:
        """
        Connection name.
        """
        return pulumi.get(self, "direct_connect_name")

    @direct_connect_name.setter
    def direct_connect_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "direct_connect_name", value)

    @property
    @pulumi.getter(name="lineOperator")
    def line_operator(self) -> pulumi.Input[str]:
        """
        ISP that provides connections. Valid values: ChinaTelecom (China Telecom), ChinaMobile (China Mobile), ChinaUnicom (China Unicom), In-houseWiring (in-house wiring), ChinaOther (other Chinese ISPs), InternationalOperator (international ISPs).
        """
        return pulumi.get(self, "line_operator")

    @line_operator.setter
    def line_operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "line_operator", value)

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> pulumi.Input[str]:
        """
        Port type of connection. Valid values: 100Base-T (100-Megabit electrical Ethernet interface), 1000Base-T (1-Gigabit electrical Ethernet interface), 1000Base-LX (1-Gigabit single-module optical Ethernet interface; 10 KM), 10GBase-T (10-Gigabit electrical Ethernet interface), 10GBase-LR (10-Gigabit single-module optical Ethernet interface; 10 KM). Default value: 1000Base-LX.
        """
        return pulumi.get(self, "port_type")

    @port_type.setter
    def port_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "port_type", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Connection port bandwidth in Mbps. Value range: [2,10240]. Default value: 1000.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="circuitCode")
    def circuit_code(self) -> Optional[pulumi.Input[str]]:
        """
        Circuit code of a connection, which is provided by the ISP or connection provider.
        """
        return pulumi.get(self, "circuit_code")

    @circuit_code.setter
    def circuit_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_code", value)

    @property
    @pulumi.getter(name="customerAddress")
    def customer_address(self) -> Optional[pulumi.Input[str]]:
        """
        User-side IP address for connection debugging, which is automatically assigned by default.
        """
        return pulumi.get(self, "customer_address")

    @customer_address.setter
    def customer_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_address", value)

    @property
    @pulumi.getter(name="customerContactMail")
    def customer_contact_mail(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_contact_mail")

    @customer_contact_mail.setter
    def customer_contact_mail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_contact_mail", value)

    @property
    @pulumi.getter(name="customerContactNumber")
    def customer_contact_number(self) -> Optional[pulumi.Input[str]]:
        """
        Contact number of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_contact_number")

    @customer_contact_number.setter
    def customer_contact_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_contact_number", value)

    @property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_name")

    @customer_name.setter
    def customer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_name", value)

    @property
    @pulumi.getter(name="faultReportContactNumber")
    def fault_report_contact_number(self) -> Optional[pulumi.Input[str]]:
        """
        Fault reporting contact number.
        """
        return pulumi.get(self, "fault_report_contact_number")

    @fault_report_contact_number.setter
    def fault_report_contact_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_report_contact_number", value)

    @property
    @pulumi.getter(name="faultReportContactPerson")
    def fault_report_contact_person(self) -> Optional[pulumi.Input[str]]:
        """
        Fault reporting contact person.
        """
        return pulumi.get(self, "fault_report_contact_person")

    @fault_report_contact_person.setter
    def fault_report_contact_person(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_report_contact_person", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Local IDC location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="redundantDirectConnectId")
    def redundant_direct_connect_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of redundant connection.
        """
        return pulumi.get(self, "redundant_direct_connect_id")

    @redundant_direct_connect_id.setter
    def redundant_direct_connect_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_direct_connect_id", value)

    @property
    @pulumi.getter(name="signLaw")
    def sign_law(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection applicant has signed the service agreement. Default value: true.
        """
        return pulumi.get(self, "sign_law")

    @sign_law.setter
    def sign_law(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sign_law", value)

    @property
    @pulumi.getter(name="tencentAddress")
    def tencent_address(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent-side IP address for connection debugging, which is automatically assigned by default.
        """
        return pulumi.get(self, "tencent_address")

    @tencent_address.setter
    def tencent_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tencent_address", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN for connection debugging, which is enabled and automatically assigned by default.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 access_point_id: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 circuit_code: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 customer_contact_mail: Optional[pulumi.Input[str]] = None,
                 customer_contact_number: Optional[pulumi.Input[str]] = None,
                 customer_name: Optional[pulumi.Input[str]] = None,
                 direct_connect_name: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_number: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_person: Optional[pulumi.Input[str]] = None,
                 line_operator: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 port_type: Optional[pulumi.Input[str]] = None,
                 redundant_direct_connect_id: Optional[pulumi.Input[str]] = None,
                 sign_law: Optional[pulumi.Input[bool]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] access_point_id: Access point of connection.You can call `DescribeAccessPoints` to get the region ID. The selected access point must exist and be available.
        :param pulumi.Input[int] bandwidth: Connection port bandwidth in Mbps. Value range: [2,10240]. Default value: 1000.
        :param pulumi.Input[str] circuit_code: Circuit code of a connection, which is provided by the ISP or connection provider.
        :param pulumi.Input[str] customer_address: User-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[str] customer_contact_mail: Email address of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_contact_number: Contact number of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_name: Name of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] direct_connect_name: Connection name.
        :param pulumi.Input[str] fault_report_contact_number: Fault reporting contact number.
        :param pulumi.Input[str] fault_report_contact_person: Fault reporting contact person.
        :param pulumi.Input[str] line_operator: ISP that provides connections. Valid values: ChinaTelecom (China Telecom), ChinaMobile (China Mobile), ChinaUnicom (China Unicom), In-houseWiring (in-house wiring), ChinaOther (other Chinese ISPs), InternationalOperator (international ISPs).
        :param pulumi.Input[str] location: Local IDC location.
        :param pulumi.Input[str] port_type: Port type of connection. Valid values: 100Base-T (100-Megabit electrical Ethernet interface), 1000Base-T (1-Gigabit electrical Ethernet interface), 1000Base-LX (1-Gigabit single-module optical Ethernet interface; 10 KM), 10GBase-T (10-Gigabit electrical Ethernet interface), 10GBase-LR (10-Gigabit single-module optical Ethernet interface; 10 KM). Default value: 1000Base-LX.
        :param pulumi.Input[str] redundant_direct_connect_id: ID of redundant connection.
        :param pulumi.Input[bool] sign_law: Whether the connection applicant has signed the service agreement. Default value: true.
        :param pulumi.Input[str] tencent_address: Tencent-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[int] vlan: VLAN for connection debugging, which is enabled and automatically assigned by default.
        """
        if access_point_id is not None:
            pulumi.set(__self__, "access_point_id", access_point_id)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if circuit_code is not None:
            pulumi.set(__self__, "circuit_code", circuit_code)
        if customer_address is not None:
            pulumi.set(__self__, "customer_address", customer_address)
        if customer_contact_mail is not None:
            pulumi.set(__self__, "customer_contact_mail", customer_contact_mail)
        if customer_contact_number is not None:
            pulumi.set(__self__, "customer_contact_number", customer_contact_number)
        if customer_name is not None:
            pulumi.set(__self__, "customer_name", customer_name)
        if direct_connect_name is not None:
            pulumi.set(__self__, "direct_connect_name", direct_connect_name)
        if fault_report_contact_number is not None:
            pulumi.set(__self__, "fault_report_contact_number", fault_report_contact_number)
        if fault_report_contact_person is not None:
            pulumi.set(__self__, "fault_report_contact_person", fault_report_contact_person)
        if line_operator is not None:
            pulumi.set(__self__, "line_operator", line_operator)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if port_type is not None:
            pulumi.set(__self__, "port_type", port_type)
        if redundant_direct_connect_id is not None:
            pulumi.set(__self__, "redundant_direct_connect_id", redundant_direct_connect_id)
        if sign_law is not None:
            pulumi.set(__self__, "sign_law", sign_law)
        if tencent_address is not None:
            pulumi.set(__self__, "tencent_address", tencent_address)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter(name="accessPointId")
    def access_point_id(self) -> Optional[pulumi.Input[str]]:
        """
        Access point of connection.You can call `DescribeAccessPoints` to get the region ID. The selected access point must exist and be available.
        """
        return pulumi.get(self, "access_point_id")

    @access_point_id.setter
    def access_point_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_point_id", value)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Connection port bandwidth in Mbps. Value range: [2,10240]. Default value: 1000.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="circuitCode")
    def circuit_code(self) -> Optional[pulumi.Input[str]]:
        """
        Circuit code of a connection, which is provided by the ISP or connection provider.
        """
        return pulumi.get(self, "circuit_code")

    @circuit_code.setter
    def circuit_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "circuit_code", value)

    @property
    @pulumi.getter(name="customerAddress")
    def customer_address(self) -> Optional[pulumi.Input[str]]:
        """
        User-side IP address for connection debugging, which is automatically assigned by default.
        """
        return pulumi.get(self, "customer_address")

    @customer_address.setter
    def customer_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_address", value)

    @property
    @pulumi.getter(name="customerContactMail")
    def customer_contact_mail(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_contact_mail")

    @customer_contact_mail.setter
    def customer_contact_mail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_contact_mail", value)

    @property
    @pulumi.getter(name="customerContactNumber")
    def customer_contact_number(self) -> Optional[pulumi.Input[str]]:
        """
        Contact number of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_contact_number")

    @customer_contact_number.setter
    def customer_contact_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_contact_number", value)

    @property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_name")

    @customer_name.setter
    def customer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_name", value)

    @property
    @pulumi.getter(name="directConnectName")
    def direct_connect_name(self) -> Optional[pulumi.Input[str]]:
        """
        Connection name.
        """
        return pulumi.get(self, "direct_connect_name")

    @direct_connect_name.setter
    def direct_connect_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direct_connect_name", value)

    @property
    @pulumi.getter(name="faultReportContactNumber")
    def fault_report_contact_number(self) -> Optional[pulumi.Input[str]]:
        """
        Fault reporting contact number.
        """
        return pulumi.get(self, "fault_report_contact_number")

    @fault_report_contact_number.setter
    def fault_report_contact_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_report_contact_number", value)

    @property
    @pulumi.getter(name="faultReportContactPerson")
    def fault_report_contact_person(self) -> Optional[pulumi.Input[str]]:
        """
        Fault reporting contact person.
        """
        return pulumi.get(self, "fault_report_contact_person")

    @fault_report_contact_person.setter
    def fault_report_contact_person(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fault_report_contact_person", value)

    @property
    @pulumi.getter(name="lineOperator")
    def line_operator(self) -> Optional[pulumi.Input[str]]:
        """
        ISP that provides connections. Valid values: ChinaTelecom (China Telecom), ChinaMobile (China Mobile), ChinaUnicom (China Unicom), In-houseWiring (in-house wiring), ChinaOther (other Chinese ISPs), InternationalOperator (international ISPs).
        """
        return pulumi.get(self, "line_operator")

    @line_operator.setter
    def line_operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_operator", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Local IDC location.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> Optional[pulumi.Input[str]]:
        """
        Port type of connection. Valid values: 100Base-T (100-Megabit electrical Ethernet interface), 1000Base-T (1-Gigabit electrical Ethernet interface), 1000Base-LX (1-Gigabit single-module optical Ethernet interface; 10 KM), 10GBase-T (10-Gigabit electrical Ethernet interface), 10GBase-LR (10-Gigabit single-module optical Ethernet interface; 10 KM). Default value: 1000Base-LX.
        """
        return pulumi.get(self, "port_type")

    @port_type.setter
    def port_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port_type", value)

    @property
    @pulumi.getter(name="redundantDirectConnectId")
    def redundant_direct_connect_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of redundant connection.
        """
        return pulumi.get(self, "redundant_direct_connect_id")

    @redundant_direct_connect_id.setter
    def redundant_direct_connect_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redundant_direct_connect_id", value)

    @property
    @pulumi.getter(name="signLaw")
    def sign_law(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the connection applicant has signed the service agreement. Default value: true.
        """
        return pulumi.get(self, "sign_law")

    @sign_law.setter
    def sign_law(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sign_law", value)

    @property
    @pulumi.getter(name="tencentAddress")
    def tencent_address(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent-side IP address for connection debugging, which is automatically assigned by default.
        """
        return pulumi.get(self, "tencent_address")

    @tencent_address.setter
    def tencent_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tencent_address", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN for connection debugging, which is enabled and automatically assigned by default.
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_point_id: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 circuit_code: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 customer_contact_mail: Optional[pulumi.Input[str]] = None,
                 customer_contact_number: Optional[pulumi.Input[str]] = None,
                 customer_name: Optional[pulumi.Input[str]] = None,
                 direct_connect_name: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_number: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_person: Optional[pulumi.Input[str]] = None,
                 line_operator: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 port_type: Optional[pulumi.Input[str]] = None,
                 redundant_direct_connect_id: Optional[pulumi.Input[str]] = None,
                 sign_law: Optional[pulumi.Input[bool]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a dc instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance = tencentcloud.dc.Instance("instance",
            access_point_id="ap-shenzhen-b-ft",
            bandwidth=10,
            customer_contact_number="0",
            direct_connect_name="terraform-for-test",
            line_operator="In-houseWiring",
            port_type="10GBase-LR",
            sign_law=True,
            vlan=-1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dc instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dc/instance:Instance instance dc_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_point_id: Access point of connection.You can call `DescribeAccessPoints` to get the region ID. The selected access point must exist and be available.
        :param pulumi.Input[int] bandwidth: Connection port bandwidth in Mbps. Value range: [2,10240]. Default value: 1000.
        :param pulumi.Input[str] circuit_code: Circuit code of a connection, which is provided by the ISP or connection provider.
        :param pulumi.Input[str] customer_address: User-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[str] customer_contact_mail: Email address of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_contact_number: Contact number of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_name: Name of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] direct_connect_name: Connection name.
        :param pulumi.Input[str] fault_report_contact_number: Fault reporting contact number.
        :param pulumi.Input[str] fault_report_contact_person: Fault reporting contact person.
        :param pulumi.Input[str] line_operator: ISP that provides connections. Valid values: ChinaTelecom (China Telecom), ChinaMobile (China Mobile), ChinaUnicom (China Unicom), In-houseWiring (in-house wiring), ChinaOther (other Chinese ISPs), InternationalOperator (international ISPs).
        :param pulumi.Input[str] location: Local IDC location.
        :param pulumi.Input[str] port_type: Port type of connection. Valid values: 100Base-T (100-Megabit electrical Ethernet interface), 1000Base-T (1-Gigabit electrical Ethernet interface), 1000Base-LX (1-Gigabit single-module optical Ethernet interface; 10 KM), 10GBase-T (10-Gigabit electrical Ethernet interface), 10GBase-LR (10-Gigabit single-module optical Ethernet interface; 10 KM). Default value: 1000Base-LX.
        :param pulumi.Input[str] redundant_direct_connect_id: ID of redundant connection.
        :param pulumi.Input[bool] sign_law: Whether the connection applicant has signed the service agreement. Default value: true.
        :param pulumi.Input[str] tencent_address: Tencent-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[int] vlan: VLAN for connection debugging, which is enabled and automatically assigned by default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dc instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance = tencentcloud.dc.Instance("instance",
            access_point_id="ap-shenzhen-b-ft",
            bandwidth=10,
            customer_contact_number="0",
            direct_connect_name="terraform-for-test",
            line_operator="In-houseWiring",
            port_type="10GBase-LR",
            sign_law=True,
            vlan=-1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dc instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dc/instance:Instance instance dc_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_point_id: Optional[pulumi.Input[str]] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 circuit_code: Optional[pulumi.Input[str]] = None,
                 customer_address: Optional[pulumi.Input[str]] = None,
                 customer_contact_mail: Optional[pulumi.Input[str]] = None,
                 customer_contact_number: Optional[pulumi.Input[str]] = None,
                 customer_name: Optional[pulumi.Input[str]] = None,
                 direct_connect_name: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_number: Optional[pulumi.Input[str]] = None,
                 fault_report_contact_person: Optional[pulumi.Input[str]] = None,
                 line_operator: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 port_type: Optional[pulumi.Input[str]] = None,
                 redundant_direct_connect_id: Optional[pulumi.Input[str]] = None,
                 sign_law: Optional[pulumi.Input[bool]] = None,
                 tencent_address: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if access_point_id is None and not opts.urn:
                raise TypeError("Missing required property 'access_point_id'")
            __props__.__dict__["access_point_id"] = access_point_id
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["circuit_code"] = circuit_code
            __props__.__dict__["customer_address"] = customer_address
            __props__.__dict__["customer_contact_mail"] = customer_contact_mail
            __props__.__dict__["customer_contact_number"] = customer_contact_number
            __props__.__dict__["customer_name"] = customer_name
            if direct_connect_name is None and not opts.urn:
                raise TypeError("Missing required property 'direct_connect_name'")
            __props__.__dict__["direct_connect_name"] = direct_connect_name
            __props__.__dict__["fault_report_contact_number"] = fault_report_contact_number
            __props__.__dict__["fault_report_contact_person"] = fault_report_contact_person
            if line_operator is None and not opts.urn:
                raise TypeError("Missing required property 'line_operator'")
            __props__.__dict__["line_operator"] = line_operator
            __props__.__dict__["location"] = location
            if port_type is None and not opts.urn:
                raise TypeError("Missing required property 'port_type'")
            __props__.__dict__["port_type"] = port_type
            __props__.__dict__["redundant_direct_connect_id"] = redundant_direct_connect_id
            __props__.__dict__["sign_law"] = sign_law
            __props__.__dict__["tencent_address"] = tencent_address
            __props__.__dict__["vlan"] = vlan
        super(Instance, __self__).__init__(
            'tencentcloud:Dc/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_point_id: Optional[pulumi.Input[str]] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            circuit_code: Optional[pulumi.Input[str]] = None,
            customer_address: Optional[pulumi.Input[str]] = None,
            customer_contact_mail: Optional[pulumi.Input[str]] = None,
            customer_contact_number: Optional[pulumi.Input[str]] = None,
            customer_name: Optional[pulumi.Input[str]] = None,
            direct_connect_name: Optional[pulumi.Input[str]] = None,
            fault_report_contact_number: Optional[pulumi.Input[str]] = None,
            fault_report_contact_person: Optional[pulumi.Input[str]] = None,
            line_operator: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            port_type: Optional[pulumi.Input[str]] = None,
            redundant_direct_connect_id: Optional[pulumi.Input[str]] = None,
            sign_law: Optional[pulumi.Input[bool]] = None,
            tencent_address: Optional[pulumi.Input[str]] = None,
            vlan: Optional[pulumi.Input[int]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_point_id: Access point of connection.You can call `DescribeAccessPoints` to get the region ID. The selected access point must exist and be available.
        :param pulumi.Input[int] bandwidth: Connection port bandwidth in Mbps. Value range: [2,10240]. Default value: 1000.
        :param pulumi.Input[str] circuit_code: Circuit code of a connection, which is provided by the ISP or connection provider.
        :param pulumi.Input[str] customer_address: User-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[str] customer_contact_mail: Email address of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_contact_number: Contact number of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] customer_name: Name of connection applicant, which is obtained from the account system by default.
        :param pulumi.Input[str] direct_connect_name: Connection name.
        :param pulumi.Input[str] fault_report_contact_number: Fault reporting contact number.
        :param pulumi.Input[str] fault_report_contact_person: Fault reporting contact person.
        :param pulumi.Input[str] line_operator: ISP that provides connections. Valid values: ChinaTelecom (China Telecom), ChinaMobile (China Mobile), ChinaUnicom (China Unicom), In-houseWiring (in-house wiring), ChinaOther (other Chinese ISPs), InternationalOperator (international ISPs).
        :param pulumi.Input[str] location: Local IDC location.
        :param pulumi.Input[str] port_type: Port type of connection. Valid values: 100Base-T (100-Megabit electrical Ethernet interface), 1000Base-T (1-Gigabit electrical Ethernet interface), 1000Base-LX (1-Gigabit single-module optical Ethernet interface; 10 KM), 10GBase-T (10-Gigabit electrical Ethernet interface), 10GBase-LR (10-Gigabit single-module optical Ethernet interface; 10 KM). Default value: 1000Base-LX.
        :param pulumi.Input[str] redundant_direct_connect_id: ID of redundant connection.
        :param pulumi.Input[bool] sign_law: Whether the connection applicant has signed the service agreement. Default value: true.
        :param pulumi.Input[str] tencent_address: Tencent-side IP address for connection debugging, which is automatically assigned by default.
        :param pulumi.Input[int] vlan: VLAN for connection debugging, which is enabled and automatically assigned by default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["access_point_id"] = access_point_id
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["circuit_code"] = circuit_code
        __props__.__dict__["customer_address"] = customer_address
        __props__.__dict__["customer_contact_mail"] = customer_contact_mail
        __props__.__dict__["customer_contact_number"] = customer_contact_number
        __props__.__dict__["customer_name"] = customer_name
        __props__.__dict__["direct_connect_name"] = direct_connect_name
        __props__.__dict__["fault_report_contact_number"] = fault_report_contact_number
        __props__.__dict__["fault_report_contact_person"] = fault_report_contact_person
        __props__.__dict__["line_operator"] = line_operator
        __props__.__dict__["location"] = location
        __props__.__dict__["port_type"] = port_type
        __props__.__dict__["redundant_direct_connect_id"] = redundant_direct_connect_id
        __props__.__dict__["sign_law"] = sign_law
        __props__.__dict__["tencent_address"] = tencent_address
        __props__.__dict__["vlan"] = vlan
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessPointId")
    def access_point_id(self) -> pulumi.Output[str]:
        """
        Access point of connection.You can call `DescribeAccessPoints` to get the region ID. The selected access point must exist and be available.
        """
        return pulumi.get(self, "access_point_id")

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[Optional[int]]:
        """
        Connection port bandwidth in Mbps. Value range: [2,10240]. Default value: 1000.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="circuitCode")
    def circuit_code(self) -> pulumi.Output[Optional[str]]:
        """
        Circuit code of a connection, which is provided by the ISP or connection provider.
        """
        return pulumi.get(self, "circuit_code")

    @property
    @pulumi.getter(name="customerAddress")
    def customer_address(self) -> pulumi.Output[Optional[str]]:
        """
        User-side IP address for connection debugging, which is automatically assigned by default.
        """
        return pulumi.get(self, "customer_address")

    @property
    @pulumi.getter(name="customerContactMail")
    def customer_contact_mail(self) -> pulumi.Output[Optional[str]]:
        """
        Email address of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_contact_mail")

    @property
    @pulumi.getter(name="customerContactNumber")
    def customer_contact_number(self) -> pulumi.Output[Optional[str]]:
        """
        Contact number of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_contact_number")

    @property
    @pulumi.getter(name="customerName")
    def customer_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name of connection applicant, which is obtained from the account system by default.
        """
        return pulumi.get(self, "customer_name")

    @property
    @pulumi.getter(name="directConnectName")
    def direct_connect_name(self) -> pulumi.Output[str]:
        """
        Connection name.
        """
        return pulumi.get(self, "direct_connect_name")

    @property
    @pulumi.getter(name="faultReportContactNumber")
    def fault_report_contact_number(self) -> pulumi.Output[Optional[str]]:
        """
        Fault reporting contact number.
        """
        return pulumi.get(self, "fault_report_contact_number")

    @property
    @pulumi.getter(name="faultReportContactPerson")
    def fault_report_contact_person(self) -> pulumi.Output[Optional[str]]:
        """
        Fault reporting contact person.
        """
        return pulumi.get(self, "fault_report_contact_person")

    @property
    @pulumi.getter(name="lineOperator")
    def line_operator(self) -> pulumi.Output[str]:
        """
        ISP that provides connections. Valid values: ChinaTelecom (China Telecom), ChinaMobile (China Mobile), ChinaUnicom (China Unicom), In-houseWiring (in-house wiring), ChinaOther (other Chinese ISPs), InternationalOperator (international ISPs).
        """
        return pulumi.get(self, "line_operator")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        Local IDC location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="portType")
    def port_type(self) -> pulumi.Output[str]:
        """
        Port type of connection. Valid values: 100Base-T (100-Megabit electrical Ethernet interface), 1000Base-T (1-Gigabit electrical Ethernet interface), 1000Base-LX (1-Gigabit single-module optical Ethernet interface; 10 KM), 10GBase-T (10-Gigabit electrical Ethernet interface), 10GBase-LR (10-Gigabit single-module optical Ethernet interface; 10 KM). Default value: 1000Base-LX.
        """
        return pulumi.get(self, "port_type")

    @property
    @pulumi.getter(name="redundantDirectConnectId")
    def redundant_direct_connect_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of redundant connection.
        """
        return pulumi.get(self, "redundant_direct_connect_id")

    @property
    @pulumi.getter(name="signLaw")
    def sign_law(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the connection applicant has signed the service agreement. Default value: true.
        """
        return pulumi.get(self, "sign_law")

    @property
    @pulumi.getter(name="tencentAddress")
    def tencent_address(self) -> pulumi.Output[Optional[str]]:
        """
        Tencent-side IP address for connection debugging, which is automatically assigned by default.
        """
        return pulumi.get(self, "tencent_address")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[int]]:
        """
        VLAN for connection debugging, which is enabled and automatically assigned by default.
        """
        return pulumi.get(self, "vlan")

