# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPublicDirectConnectTunnelRoutesResult',
    'AwaitableGetPublicDirectConnectTunnelRoutesResult',
    'get_public_direct_connect_tunnel_routes',
    'get_public_direct_connect_tunnel_routes_output',
]

@pulumi.output_type
class GetPublicDirectConnectTunnelRoutesResult:
    """
    A collection of values returned by getPublicDirectConnectTunnelRoutes.
    """
    def __init__(__self__, direct_connect_tunnel_id=None, filters=None, id=None, result_output_file=None, routes=None):
        if direct_connect_tunnel_id and not isinstance(direct_connect_tunnel_id, str):
            raise TypeError("Expected argument 'direct_connect_tunnel_id' to be a str")
        pulumi.set(__self__, "direct_connect_tunnel_id", direct_connect_tunnel_id)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)

    @property
    @pulumi.getter(name="directConnectTunnelId")
    def direct_connect_tunnel_id(self) -> str:
        return pulumi.get(self, "direct_connect_tunnel_id")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPublicDirectConnectTunnelRoutesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetPublicDirectConnectTunnelRoutesRouteResult']:
        """
        Internet tunnel route list.
        """
        return pulumi.get(self, "routes")


class AwaitableGetPublicDirectConnectTunnelRoutesResult(GetPublicDirectConnectTunnelRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicDirectConnectTunnelRoutesResult(
            direct_connect_tunnel_id=self.direct_connect_tunnel_id,
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file,
            routes=self.routes)


def get_public_direct_connect_tunnel_routes(direct_connect_tunnel_id: Optional[str] = None,
                                            filters: Optional[Sequence[pulumi.InputType['GetPublicDirectConnectTunnelRoutesFilterArgs']]] = None,
                                            result_output_file: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicDirectConnectTunnelRoutesResult:
    """
    Use this data source to query detailed information of dc public_direct_connect_tunnel_routes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    public_direct_connect_tunnel_routes = tencentcloud.Dc.get_public_direct_connect_tunnel_routes(direct_connect_tunnel_id="dcx-4z49tnws")
    ```
    <!--End PulumiCodeChooser -->


    :param str direct_connect_tunnel_id: direct connect tunnel id.
    :param Sequence[pulumi.InputType['GetPublicDirectConnectTunnelRoutesFilterArgs']] filters: filter condition: route-type: route type, value: BGP/STATIC route-subnet: route cidr, value such as: 192.68.1.0/24.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['directConnectTunnelId'] = direct_connect_tunnel_id
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dc/getPublicDirectConnectTunnelRoutes:getPublicDirectConnectTunnelRoutes', __args__, opts=opts, typ=GetPublicDirectConnectTunnelRoutesResult).value

    return AwaitableGetPublicDirectConnectTunnelRoutesResult(
        direct_connect_tunnel_id=pulumi.get(__ret__, 'direct_connect_tunnel_id'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        routes=pulumi.get(__ret__, 'routes'))


@_utilities.lift_output_func(get_public_direct_connect_tunnel_routes)
def get_public_direct_connect_tunnel_routes_output(direct_connect_tunnel_id: Optional[pulumi.Input[str]] = None,
                                                   filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPublicDirectConnectTunnelRoutesFilterArgs']]]]] = None,
                                                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPublicDirectConnectTunnelRoutesResult]:
    """
    Use this data source to query detailed information of dc public_direct_connect_tunnel_routes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    public_direct_connect_tunnel_routes = tencentcloud.Dc.get_public_direct_connect_tunnel_routes(direct_connect_tunnel_id="dcx-4z49tnws")
    ```
    <!--End PulumiCodeChooser -->


    :param str direct_connect_tunnel_id: direct connect tunnel id.
    :param Sequence[pulumi.InputType['GetPublicDirectConnectTunnelRoutesFilterArgs']] filters: filter condition: route-type: route type, value: BGP/STATIC route-subnet: route cidr, value such as: 192.68.1.0/24.
    :param str result_output_file: Used to save results.
    """
    ...
