# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GatewayCcnRouteArgs', 'GatewayCcnRoute']

@pulumi.input_type
class GatewayCcnRouteArgs:
    def __init__(__self__, *,
                 cidr_block: pulumi.Input[str],
                 dcg_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a GatewayCcnRoute resource.
        :param pulumi.Input[str] cidr_block: A network address segment of IDC.
        :param pulumi.Input[str] dcg_id: ID of the DCG.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "dcg_id", dcg_id)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Input[str]:
        """
        A network address segment of IDC.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> pulumi.Input[str]:
        """
        ID of the DCG.
        """
        return pulumi.get(self, "dcg_id")

    @dcg_id.setter
    def dcg_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dcg_id", value)


@pulumi.input_type
class _GatewayCcnRouteState:
    def __init__(__self__, *,
                 as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 dcg_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GatewayCcnRoute resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] as_paths: As path list of the BGP.
        :param pulumi.Input[str] cidr_block: A network address segment of IDC.
        :param pulumi.Input[str] dcg_id: ID of the DCG.
        """
        if as_paths is not None:
            pulumi.set(__self__, "as_paths", as_paths)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if dcg_id is not None:
            pulumi.set(__self__, "dcg_id", dcg_id)

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        As path list of the BGP.
        """
        return pulumi.get(self, "as_paths")

    @as_paths.setter
    def as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "as_paths", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        A network address segment of IDC.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the DCG.
        """
        return pulumi.get(self, "dcg_id")

    @dcg_id.setter
    def dcg_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcg_id", value)


class GatewayCcnRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 dcg_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to creating direct connect gateway route entry.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        main = tencentcloud.ccn.Instance("main",
            description="ci-temp-test-ccn-des",
            qos="AG")
        ccn_main = tencentcloud.dc.Gateway("ccnMain",
            network_instance_id=main.id,
            network_type="CCN",
            gateway_type="NORMAL")
        route1 = tencentcloud.dc.GatewayCcnRoute("route1",
            dcg_id=ccn_main.id,
            cidr_block="10.1.1.0/32")
        route2 = tencentcloud.dc.GatewayCcnRoute("route2",
            dcg_id=ccn_main.id,
            cidr_block="192.1.1.0/32")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr_block: A network address segment of IDC.
        :param pulumi.Input[str] dcg_id: ID of the DCG.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayCcnRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to creating direct connect gateway route entry.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        main = tencentcloud.ccn.Instance("main",
            description="ci-temp-test-ccn-des",
            qos="AG")
        ccn_main = tencentcloud.dc.Gateway("ccnMain",
            network_instance_id=main.id,
            network_type="CCN",
            gateway_type="NORMAL")
        route1 = tencentcloud.dc.GatewayCcnRoute("route1",
            dcg_id=ccn_main.id,
            cidr_block="10.1.1.0/32")
        route2 = tencentcloud.dc.GatewayCcnRoute("route2",
            dcg_id=ccn_main.id,
            cidr_block="192.1.1.0/32")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param GatewayCcnRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayCcnRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 dcg_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayCcnRouteArgs.__new__(GatewayCcnRouteArgs)

            if cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'cidr_block'")
            __props__.__dict__["cidr_block"] = cidr_block
            if dcg_id is None and not opts.urn:
                raise TypeError("Missing required property 'dcg_id'")
            __props__.__dict__["dcg_id"] = dcg_id
            __props__.__dict__["as_paths"] = None
        super(GatewayCcnRoute, __self__).__init__(
            'tencentcloud:Dc/gatewayCcnRoute:GatewayCcnRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cidr_block: Optional[pulumi.Input[str]] = None,
            dcg_id: Optional[pulumi.Input[str]] = None) -> 'GatewayCcnRoute':
        """
        Get an existing GatewayCcnRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] as_paths: As path list of the BGP.
        :param pulumi.Input[str] cidr_block: A network address segment of IDC.
        :param pulumi.Input[str] dcg_id: ID of the DCG.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayCcnRouteState.__new__(_GatewayCcnRouteState)

        __props__.__dict__["as_paths"] = as_paths
        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["dcg_id"] = dcg_id
        return GatewayCcnRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="asPaths")
    def as_paths(self) -> pulumi.Output[Sequence[str]]:
        """
        As path list of the BGP.
        """
        return pulumi.get(self, "as_paths")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[str]:
        """
        A network address segment of IDC.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> pulumi.Output[str]:
        """
        ID of the DCG.
        """
        return pulumi.get(self, "dcg_id")

