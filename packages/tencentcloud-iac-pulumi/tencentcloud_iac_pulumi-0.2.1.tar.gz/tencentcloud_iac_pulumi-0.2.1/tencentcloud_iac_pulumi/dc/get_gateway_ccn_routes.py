# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetGatewayCcnRoutesResult',
    'AwaitableGetGatewayCcnRoutesResult',
    'get_gateway_ccn_routes',
    'get_gateway_ccn_routes_output',
]

@pulumi.output_type
class GetGatewayCcnRoutesResult:
    """
    A collection of values returned by getGatewayCcnRoutes.
    """
    def __init__(__self__, dcg_id=None, id=None, instance_lists=None, result_output_file=None):
        if dcg_id and not isinstance(dcg_id, str):
            raise TypeError("Expected argument 'dcg_id' to be a str")
        pulumi.set(__self__, "dcg_id", dcg_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_lists and not isinstance(instance_lists, list):
            raise TypeError("Expected argument 'instance_lists' to be a list")
        pulumi.set(__self__, "instance_lists", instance_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="dcgId")
    def dcg_id(self) -> str:
        """
        ID of the DCG.
        """
        return pulumi.get(self, "dcg_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceLists")
    def instance_lists(self) -> Sequence['outputs.GetGatewayCcnRoutesInstanceListResult']:
        """
        Information list of the DCG route entries.
        """
        return pulumi.get(self, "instance_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetGatewayCcnRoutesResult(GetGatewayCcnRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewayCcnRoutesResult(
            dcg_id=self.dcg_id,
            id=self.id,
            instance_lists=self.instance_lists,
            result_output_file=self.result_output_file)


def get_gateway_ccn_routes(dcg_id: Optional[str] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewayCcnRoutesResult:
    """
    Use this data source to query detailed information of direct connect gateway route entries.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    main = tencentcloud.ccn.Instance("main",
        description="ci-temp-test-ccn-des",
        qos="AG")
    ccn_main = tencentcloud.dc.Gateway("ccnMain",
        network_instance_id=main.id,
        network_type="CCN",
        gateway_type="NORMAL")
    route1 = tencentcloud.dc.GatewayCcnRoute("route1",
        dcg_id=ccn_main.id,
        cidr_block="10.1.1.0/32")
    route2 = tencentcloud.dc.GatewayCcnRoute("route2",
        dcg_id=ccn_main.id,
        cidr_block="192.1.1.0/32")
    test = tencentcloud.Dc.get_gateway_ccn_routes_output(dcg_id=ccn_main.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str dcg_id: ID of the DCG to be queried.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['dcgId'] = dcg_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dc/getGatewayCcnRoutes:getGatewayCcnRoutes', __args__, opts=opts, typ=GetGatewayCcnRoutesResult).value

    return AwaitableGetGatewayCcnRoutesResult(
        dcg_id=pulumi.get(__ret__, 'dcg_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_lists=pulumi.get(__ret__, 'instance_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_gateway_ccn_routes)
def get_gateway_ccn_routes_output(dcg_id: Optional[pulumi.Input[str]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGatewayCcnRoutesResult]:
    """
    Use this data source to query detailed information of direct connect gateway route entries.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    main = tencentcloud.ccn.Instance("main",
        description="ci-temp-test-ccn-des",
        qos="AG")
    ccn_main = tencentcloud.dc.Gateway("ccnMain",
        network_instance_id=main.id,
        network_type="CCN",
        gateway_type="NORMAL")
    route1 = tencentcloud.dc.GatewayCcnRoute("route1",
        dcg_id=ccn_main.id,
        cidr_block="10.1.1.0/32")
    route2 = tencentcloud.dc.GatewayCcnRoute("route2",
        dcg_id=ccn_main.id,
        cidr_block="192.1.1.0/32")
    test = tencentcloud.Dc.get_gateway_ccn_routes_output(dcg_id=ccn_main.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str dcg_id: ID of the DCG to be queried.
    :param str result_output_file: Used to save results.
    """
    ...
