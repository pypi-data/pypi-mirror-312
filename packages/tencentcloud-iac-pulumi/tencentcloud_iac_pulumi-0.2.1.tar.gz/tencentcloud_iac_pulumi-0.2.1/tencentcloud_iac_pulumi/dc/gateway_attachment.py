# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GatewayAttachmentArgs', 'GatewayAttachment']

@pulumi.input_type
class GatewayAttachmentArgs:
    def __init__(__self__, *,
                 direct_connect_gateway_id: pulumi.Input[str],
                 nat_gateway_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a GatewayAttachment resource.
        :param pulumi.Input[str] direct_connect_gateway_id: DirectConnectGatewayId.
        :param pulumi.Input[str] nat_gateway_id: NatGatewayId.
        :param pulumi.Input[str] vpc_id: vpc id.
        """
        pulumi.set(__self__, "direct_connect_gateway_id", direct_connect_gateway_id)
        pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="directConnectGatewayId")
    def direct_connect_gateway_id(self) -> pulumi.Input[str]:
        """
        DirectConnectGatewayId.
        """
        return pulumi.get(self, "direct_connect_gateway_id")

    @direct_connect_gateway_id.setter
    def direct_connect_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "direct_connect_gateway_id", value)

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> pulumi.Input[str]:
        """
        NatGatewayId.
        """
        return pulumi.get(self, "nat_gateway_id")

    @nat_gateway_id.setter
    def nat_gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nat_gateway_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _GatewayAttachmentState:
    def __init__(__self__, *,
                 direct_connect_gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GatewayAttachment resources.
        :param pulumi.Input[str] direct_connect_gateway_id: DirectConnectGatewayId.
        :param pulumi.Input[str] nat_gateway_id: NatGatewayId.
        :param pulumi.Input[str] vpc_id: vpc id.
        """
        if direct_connect_gateway_id is not None:
            pulumi.set(__self__, "direct_connect_gateway_id", direct_connect_gateway_id)
        if nat_gateway_id is not None:
            pulumi.set(__self__, "nat_gateway_id", nat_gateway_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="directConnectGatewayId")
    def direct_connect_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        DirectConnectGatewayId.
        """
        return pulumi.get(self, "direct_connect_gateway_id")

    @direct_connect_gateway_id.setter
    def direct_connect_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direct_connect_gateway_id", value)

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        NatGatewayId.
        """
        return pulumi.get(self, "nat_gateway_id")

    @nat_gateway_id.setter
    def nat_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_gateway_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class GatewayAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direct_connect_gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dc_gateway_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        dc_gateway_attachment = tencentcloud.dc.GatewayAttachment("dcGatewayAttachment",
            direct_connect_gateway_id="dcg-dmbhf7jf",
            nat_gateway_id="nat-7kanjc6y",
            vpc_id="vpc-4h9v4mo3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dc_gateway_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dc/gatewayAttachment:GatewayAttachment dc_gateway_attachment vpcId#dcgId#ngId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] direct_connect_gateway_id: DirectConnectGatewayId.
        :param pulumi.Input[str] nat_gateway_id: NatGatewayId.
        :param pulumi.Input[str] vpc_id: vpc id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dc_gateway_attachment

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        dc_gateway_attachment = tencentcloud.dc.GatewayAttachment("dcGatewayAttachment",
            direct_connect_gateway_id="dcg-dmbhf7jf",
            nat_gateway_id="nat-7kanjc6y",
            vpc_id="vpc-4h9v4mo3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dc_gateway_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dc/gatewayAttachment:GatewayAttachment dc_gateway_attachment vpcId#dcgId#ngId
        ```

        :param str resource_name: The name of the resource.
        :param GatewayAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 direct_connect_gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_gateway_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayAttachmentArgs.__new__(GatewayAttachmentArgs)

            if direct_connect_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'direct_connect_gateway_id'")
            __props__.__dict__["direct_connect_gateway_id"] = direct_connect_gateway_id
            if nat_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'nat_gateway_id'")
            __props__.__dict__["nat_gateway_id"] = nat_gateway_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(GatewayAttachment, __self__).__init__(
            'tencentcloud:Dc/gatewayAttachment:GatewayAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            direct_connect_gateway_id: Optional[pulumi.Input[str]] = None,
            nat_gateway_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'GatewayAttachment':
        """
        Get an existing GatewayAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] direct_connect_gateway_id: DirectConnectGatewayId.
        :param pulumi.Input[str] nat_gateway_id: NatGatewayId.
        :param pulumi.Input[str] vpc_id: vpc id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayAttachmentState.__new__(_GatewayAttachmentState)

        __props__.__dict__["direct_connect_gateway_id"] = direct_connect_gateway_id
        __props__.__dict__["nat_gateway_id"] = nat_gateway_id
        __props__.__dict__["vpc_id"] = vpc_id
        return GatewayAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="directConnectGatewayId")
    def direct_connect_gateway_id(self) -> pulumi.Output[str]:
        """
        DirectConnectGatewayId.
        """
        return pulumi.get(self, "direct_connect_gateway_id")

    @property
    @pulumi.getter(name="natGatewayId")
    def nat_gateway_id(self) -> pulumi.Output[str]:
        """
        NatGatewayId.
        """
        return pulumi.get(self, "nat_gateway_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

