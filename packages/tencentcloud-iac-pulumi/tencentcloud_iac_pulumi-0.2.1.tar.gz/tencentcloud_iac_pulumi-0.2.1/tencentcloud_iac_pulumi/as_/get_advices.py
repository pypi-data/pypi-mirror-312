# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAdvicesResult',
    'AwaitableGetAdvicesResult',
    'get_advices',
    'get_advices_output',
]

@pulumi.output_type
class GetAdvicesResult:
    """
    A collection of values returned by getAdvices.
    """
    def __init__(__self__, auto_scaling_advice_sets=None, auto_scaling_group_ids=None, id=None, result_output_file=None):
        if auto_scaling_advice_sets and not isinstance(auto_scaling_advice_sets, list):
            raise TypeError("Expected argument 'auto_scaling_advice_sets' to be a list")
        pulumi.set(__self__, "auto_scaling_advice_sets", auto_scaling_advice_sets)
        if auto_scaling_group_ids and not isinstance(auto_scaling_group_ids, list):
            raise TypeError("Expected argument 'auto_scaling_group_ids' to be a list")
        pulumi.set(__self__, "auto_scaling_group_ids", auto_scaling_group_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="autoScalingAdviceSets")
    def auto_scaling_advice_sets(self) -> Sequence['outputs.GetAdvicesAutoScalingAdviceSetResult']:
        """
        A collection of suggestions for scaling group configurations.
        """
        return pulumi.get(self, "auto_scaling_advice_sets")

    @property
    @pulumi.getter(name="autoScalingGroupIds")
    def auto_scaling_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "auto_scaling_group_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetAdvicesResult(GetAdvicesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvicesResult(
            auto_scaling_advice_sets=self.auto_scaling_advice_sets,
            auto_scaling_group_ids=self.auto_scaling_group_ids,
            id=self.id,
            result_output_file=self.result_output_file)


def get_advices(auto_scaling_group_ids: Optional[Sequence[str]] = None,
                result_output_file: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvicesResult:
    """
    Use this data source to query detailed information of as advices

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    advices = tencentcloud.As.get_advices(auto_scaling_group_ids=["asc-lo0b94oy"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] auto_scaling_group_ids: List of scaling groups to be queried. Upper limit: 100.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['autoScalingGroupIds'] = auto_scaling_group_ids
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:As/getAdvices:getAdvices', __args__, opts=opts, typ=GetAdvicesResult).value

    return AwaitableGetAdvicesResult(
        auto_scaling_advice_sets=pulumi.get(__ret__, 'auto_scaling_advice_sets'),
        auto_scaling_group_ids=pulumi.get(__ret__, 'auto_scaling_group_ids'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_advices)
def get_advices_output(auto_scaling_group_ids: Optional[pulumi.Input[Sequence[str]]] = None,
                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAdvicesResult]:
    """
    Use this data source to query detailed information of as advices

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    advices = tencentcloud.As.get_advices(auto_scaling_group_ids=["asc-lo0b94oy"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] auto_scaling_group_ids: List of scaling groups to be queried. Upper limit: 100.
    :param str result_output_file: Used to save results.
    """
    ...
