# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetScalingConfigsResult',
    'AwaitableGetScalingConfigsResult',
    'get_scaling_configs',
    'get_scaling_configs_output',
]

@pulumi.output_type
class GetScalingConfigsResult:
    """
    A collection of values returned by getScalingConfigs.
    """
    def __init__(__self__, configuration_id=None, configuration_lists=None, configuration_name=None, id=None, result_output_file=None):
        if configuration_id and not isinstance(configuration_id, str):
            raise TypeError("Expected argument 'configuration_id' to be a str")
        pulumi.set(__self__, "configuration_id", configuration_id)
        if configuration_lists and not isinstance(configuration_lists, list):
            raise TypeError("Expected argument 'configuration_lists' to be a list")
        pulumi.set(__self__, "configuration_lists", configuration_lists)
        if configuration_name and not isinstance(configuration_name, str):
            raise TypeError("Expected argument 'configuration_name' to be a str")
        pulumi.set(__self__, "configuration_name", configuration_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="configurationId")
    def configuration_id(self) -> Optional[str]:
        """
        Launch configuration ID.
        """
        return pulumi.get(self, "configuration_id")

    @property
    @pulumi.getter(name="configurationLists")
    def configuration_lists(self) -> Sequence['outputs.GetScalingConfigsConfigurationListResult']:
        """
        A list of configuration. Each element contains the following attributes:
        """
        return pulumi.get(self, "configuration_lists")

    @property
    @pulumi.getter(name="configurationName")
    def configuration_name(self) -> Optional[str]:
        """
        Launch configuration name.
        """
        return pulumi.get(self, "configuration_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetScalingConfigsResult(GetScalingConfigsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetScalingConfigsResult(
            configuration_id=self.configuration_id,
            configuration_lists=self.configuration_lists,
            configuration_name=self.configuration_name,
            id=self.id,
            result_output_file=self.result_output_file)


def get_scaling_configs(configuration_id: Optional[str] = None,
                        configuration_name: Optional[str] = None,
                        result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetScalingConfigsResult:
    """
    Use this data source to query scaling configuration information.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    as_configs = tencentcloud.As.get_scaling_configs(configuration_id="asc-oqio4yyj",
        result_output_file="my_test_path")
    ```
    <!--End PulumiCodeChooser -->


    :param str configuration_id: Launch configuration ID.
    :param str configuration_name: Launch configuration name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['configurationId'] = configuration_id
    __args__['configurationName'] = configuration_name
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:As/getScalingConfigs:getScalingConfigs', __args__, opts=opts, typ=GetScalingConfigsResult).value

    return AwaitableGetScalingConfigsResult(
        configuration_id=pulumi.get(__ret__, 'configuration_id'),
        configuration_lists=pulumi.get(__ret__, 'configuration_lists'),
        configuration_name=pulumi.get(__ret__, 'configuration_name'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_scaling_configs)
def get_scaling_configs_output(configuration_id: Optional[pulumi.Input[Optional[str]]] = None,
                               configuration_name: Optional[pulumi.Input[Optional[str]]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetScalingConfigsResult]:
    """
    Use this data source to query scaling configuration information.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    as_configs = tencentcloud.As.get_scaling_configs(configuration_id="asc-oqio4yyj",
        result_output_file="my_test_path")
    ```
    <!--End PulumiCodeChooser -->


    :param str configuration_id: Launch configuration ID.
    :param str configuration_name: Launch configuration name.
    :param str result_output_file: Used to save results.
    """
    ...
