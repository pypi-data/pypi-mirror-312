# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoadBalancerArgs', 'LoadBalancer']

@pulumi.input_type
class LoadBalancerArgs:
    def __init__(__self__, *,
                 auto_scaling_group_id: pulumi.Input[str],
                 forward_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a LoadBalancer resource.
        :param pulumi.Input[str] auto_scaling_group_id: ID of a scaling group.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]] forward_load_balancers: List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
               100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
               20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        if forward_load_balancers is not None:
            pulumi.set(__self__, "forward_load_balancers", forward_load_balancers)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> pulumi.Input[str]:
        """
        ID of a scaling group.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @auto_scaling_group_id.setter
    def auto_scaling_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "auto_scaling_group_id", value)

    @property
    @pulumi.getter(name="forwardLoadBalancers")
    def forward_load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]]]:
        """
        List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
        100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        return pulumi.get(self, "forward_load_balancers")

    @forward_load_balancers.setter
    def forward_load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]]]):
        pulumi.set(self, "forward_load_balancers", value)

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
        20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        return pulumi.get(self, "load_balancer_ids")

    @load_balancer_ids.setter
    def load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ids", value)


@pulumi.input_type
class _LoadBalancerState:
    def __init__(__self__, *,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 forward_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering LoadBalancer resources.
        :param pulumi.Input[str] auto_scaling_group_id: ID of a scaling group.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]] forward_load_balancers: List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
               100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
               20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        if auto_scaling_group_id is not None:
            pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        if forward_load_balancers is not None:
            pulumi.set(__self__, "forward_load_balancers", forward_load_balancers)
        if load_balancer_ids is not None:
            pulumi.set(__self__, "load_balancer_ids", load_balancer_ids)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of a scaling group.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @auto_scaling_group_id.setter
    def auto_scaling_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_scaling_group_id", value)

    @property
    @pulumi.getter(name="forwardLoadBalancers")
    def forward_load_balancers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]]]:
        """
        List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
        100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        return pulumi.get(self, "forward_load_balancers")

    @forward_load_balancers.setter
    def forward_load_balancers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerForwardLoadBalancerArgs']]]]):
        pulumi.set(self, "forward_load_balancers", value)

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
        20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        return pulumi.get(self, "load_balancer_ids")

    @load_balancer_ids.setter
    def load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ids", value)


class LoadBalancer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 forward_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerForwardLoadBalancerArgs']]]]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a LoadBalancer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_scaling_group_id: ID of a scaling group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerForwardLoadBalancerArgs']]]] forward_load_balancers: List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
               100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
               20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LoadBalancer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LoadBalancerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 forward_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerForwardLoadBalancerArgs']]]]] = None,
                 load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancerArgs.__new__(LoadBalancerArgs)

            if auto_scaling_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'auto_scaling_group_id'")
            __props__.__dict__["auto_scaling_group_id"] = auto_scaling_group_id
            __props__.__dict__["forward_load_balancers"] = forward_load_balancers
            __props__.__dict__["load_balancer_ids"] = load_balancer_ids
        super(LoadBalancer, __self__).__init__(
            'tencentcloud:As/loadBalancer:LoadBalancer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
            forward_load_balancers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerForwardLoadBalancerArgs']]]]] = None,
            load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'LoadBalancer':
        """
        Get an existing LoadBalancer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auto_scaling_group_id: ID of a scaling group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerForwardLoadBalancerArgs']]]] forward_load_balancers: List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
               100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] load_balancer_ids: List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
               20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancerState.__new__(_LoadBalancerState)

        __props__.__dict__["auto_scaling_group_id"] = auto_scaling_group_id
        __props__.__dict__["forward_load_balancers"] = forward_load_balancers
        __props__.__dict__["load_balancer_ids"] = load_balancer_ids
        return LoadBalancer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> pulumi.Output[str]:
        """
        ID of a scaling group.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter(name="forwardLoadBalancers")
    def forward_load_balancers(self) -> pulumi.Output[Optional[Sequence['outputs.LoadBalancerForwardLoadBalancer']]]:
        """
        List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
        100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        return pulumi.get(self, "forward_load_balancers")

    @property
    @pulumi.getter(name="loadBalancerIds")
    def load_balancer_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
        20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
        """
        return pulumi.get(self, "load_balancer_ids")

