# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetLimitsResult',
    'AwaitableGetLimitsResult',
    'get_limits',
    'get_limits_output',
]

@pulumi.output_type
class GetLimitsResult:
    """
    A collection of values returned by getLimits.
    """
    def __init__(__self__, id=None, max_number_of_auto_scaling_groups=None, max_number_of_launch_configurations=None, number_of_auto_scaling_groups=None, number_of_launch_configurations=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_number_of_auto_scaling_groups and not isinstance(max_number_of_auto_scaling_groups, int):
            raise TypeError("Expected argument 'max_number_of_auto_scaling_groups' to be a int")
        pulumi.set(__self__, "max_number_of_auto_scaling_groups", max_number_of_auto_scaling_groups)
        if max_number_of_launch_configurations and not isinstance(max_number_of_launch_configurations, int):
            raise TypeError("Expected argument 'max_number_of_launch_configurations' to be a int")
        pulumi.set(__self__, "max_number_of_launch_configurations", max_number_of_launch_configurations)
        if number_of_auto_scaling_groups and not isinstance(number_of_auto_scaling_groups, int):
            raise TypeError("Expected argument 'number_of_auto_scaling_groups' to be a int")
        pulumi.set(__self__, "number_of_auto_scaling_groups", number_of_auto_scaling_groups)
        if number_of_launch_configurations and not isinstance(number_of_launch_configurations, int):
            raise TypeError("Expected argument 'number_of_launch_configurations' to be a int")
        pulumi.set(__self__, "number_of_launch_configurations", number_of_launch_configurations)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxNumberOfAutoScalingGroups")
    def max_number_of_auto_scaling_groups(self) -> int:
        """
        Maximum number of auto scaling groups allowed for creation by the user account.
        """
        return pulumi.get(self, "max_number_of_auto_scaling_groups")

    @property
    @pulumi.getter(name="maxNumberOfLaunchConfigurations")
    def max_number_of_launch_configurations(self) -> int:
        """
        Maximum number of launch configurations allowed for creation by the user account.
        """
        return pulumi.get(self, "max_number_of_launch_configurations")

    @property
    @pulumi.getter(name="numberOfAutoScalingGroups")
    def number_of_auto_scaling_groups(self) -> int:
        """
        Current number of auto scaling groups under the user account.
        """
        return pulumi.get(self, "number_of_auto_scaling_groups")

    @property
    @pulumi.getter(name="numberOfLaunchConfigurations")
    def number_of_launch_configurations(self) -> int:
        """
        Current number of launch configurations under the user account.
        """
        return pulumi.get(self, "number_of_launch_configurations")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetLimitsResult(GetLimitsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLimitsResult(
            id=self.id,
            max_number_of_auto_scaling_groups=self.max_number_of_auto_scaling_groups,
            max_number_of_launch_configurations=self.max_number_of_launch_configurations,
            number_of_auto_scaling_groups=self.number_of_auto_scaling_groups,
            number_of_launch_configurations=self.number_of_launch_configurations,
            result_output_file=self.result_output_file)


def get_limits(result_output_file: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLimitsResult:
    """
    Use this data source to query detailed information of as limits

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    limits = tencentcloud.As.get_limits()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:As/getLimits:getLimits', __args__, opts=opts, typ=GetLimitsResult).value

    return AwaitableGetLimitsResult(
        id=pulumi.get(__ret__, 'id'),
        max_number_of_auto_scaling_groups=pulumi.get(__ret__, 'max_number_of_auto_scaling_groups'),
        max_number_of_launch_configurations=pulumi.get(__ret__, 'max_number_of_launch_configurations'),
        number_of_auto_scaling_groups=pulumi.get(__ret__, 'number_of_auto_scaling_groups'),
        number_of_launch_configurations=pulumi.get(__ret__, 'number_of_launch_configurations'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_limits)
def get_limits_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLimitsResult]:
    """
    Use this data source to query detailed information of as limits

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    limits = tencentcloud.As.get_limits()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    ...
