# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DdosPolicyCaseArgs', 'DdosPolicyCase']

@pulumi.input_type
class DdosPolicyCaseArgs:
    def __init__(__self__, *,
                 app_protocols: pulumi.Input[Sequence[pulumi.Input[str]]],
                 app_type: pulumi.Input[str],
                 has_abroad: pulumi.Input[str],
                 has_initiate_tcp: pulumi.Input[str],
                 platform_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource_type: pulumi.Input[str],
                 tcp_end_port: pulumi.Input[str],
                 tcp_start_port: pulumi.Input[str],
                 udp_end_port: pulumi.Input[str],
                 udp_start_port: pulumi.Input[str],
                 web_api_urls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 has_initiate_udp: Optional[pulumi.Input[str]] = None,
                 has_vpn: Optional[pulumi.Input[str]] = None,
                 max_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 max_udp_package_len: Optional[pulumi.Input[str]] = None,
                 min_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 min_udp_package_len: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer_tcp_port: Optional[pulumi.Input[str]] = None,
                 peer_udp_port: Optional[pulumi.Input[str]] = None,
                 tcp_footprint: Optional[pulumi.Input[str]] = None,
                 udp_footprint: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DdosPolicyCase resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_protocols: App protocol set of the DDoS policy case.
        :param pulumi.Input[str] app_type: App type of the DDoS policy case. Valid values: `WEB`, `GAME`, `APP` and `OTHER`.
        :param pulumi.Input[str] has_abroad: Indicate whether the service involves overseas or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_initiate_tcp: Indicate whether the service actively initiates TCP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] platform_types: Platform set of the DDoS policy case.
        :param pulumi.Input[str] resource_type: Type of the resource that the DDoS policy case works for. Valid values: `bgpip`, `bgp` and `bgp-multip`.
        :param pulumi.Input[str] tcp_end_port: End port of the TCP service. Valid value ranges: (0~65535). It must be greater than `tcp_start_port`.
        :param pulumi.Input[str] tcp_start_port: Start port of the TCP service. Valid value ranges: (0~65535).
        :param pulumi.Input[str] udp_end_port: End port of the UDP service. Valid value ranges: (0~65535). It must be greater than `udp_start_port`.
        :param pulumi.Input[str] udp_start_port: Start port of the UDP service. Valid value ranges: (0~65535).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_api_urls: Web API url set.
        :param pulumi.Input[str] has_initiate_udp: Indicate whether the actively initiate UDP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_vpn: Indicate whether the service involves VPN service or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] max_tcp_package_len: The max length of TCP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_tcp_package_len`.
        :param pulumi.Input[str] max_udp_package_len: The max length of UDP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_udp_package_len`.
        :param pulumi.Input[str] min_tcp_package_len: The minimum length of TCP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] min_udp_package_len: The minimum length of UDP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] name: Name of the DDoS policy case. Length should between 1 and 64.
        :param pulumi.Input[str] peer_tcp_port: The port that actively initiates TCP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[str] peer_udp_port: The port that actively initiates UDP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[str] tcp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        :param pulumi.Input[str] udp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        """
        pulumi.set(__self__, "app_protocols", app_protocols)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "has_abroad", has_abroad)
        pulumi.set(__self__, "has_initiate_tcp", has_initiate_tcp)
        pulumi.set(__self__, "platform_types", platform_types)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "tcp_end_port", tcp_end_port)
        pulumi.set(__self__, "tcp_start_port", tcp_start_port)
        pulumi.set(__self__, "udp_end_port", udp_end_port)
        pulumi.set(__self__, "udp_start_port", udp_start_port)
        pulumi.set(__self__, "web_api_urls", web_api_urls)
        if has_initiate_udp is not None:
            pulumi.set(__self__, "has_initiate_udp", has_initiate_udp)
        if has_vpn is not None:
            pulumi.set(__self__, "has_vpn", has_vpn)
        if max_tcp_package_len is not None:
            pulumi.set(__self__, "max_tcp_package_len", max_tcp_package_len)
        if max_udp_package_len is not None:
            pulumi.set(__self__, "max_udp_package_len", max_udp_package_len)
        if min_tcp_package_len is not None:
            pulumi.set(__self__, "min_tcp_package_len", min_tcp_package_len)
        if min_udp_package_len is not None:
            pulumi.set(__self__, "min_udp_package_len", min_udp_package_len)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_tcp_port is not None:
            pulumi.set(__self__, "peer_tcp_port", peer_tcp_port)
        if peer_udp_port is not None:
            pulumi.set(__self__, "peer_udp_port", peer_udp_port)
        if tcp_footprint is not None:
            pulumi.set(__self__, "tcp_footprint", tcp_footprint)
        if udp_footprint is not None:
            pulumi.set(__self__, "udp_footprint", udp_footprint)

    @property
    @pulumi.getter(name="appProtocols")
    def app_protocols(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        App protocol set of the DDoS policy case.
        """
        return pulumi.get(self, "app_protocols")

    @app_protocols.setter
    def app_protocols(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "app_protocols", value)

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> pulumi.Input[str]:
        """
        App type of the DDoS policy case. Valid values: `WEB`, `GAME`, `APP` and `OTHER`.
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_type", value)

    @property
    @pulumi.getter(name="hasAbroad")
    def has_abroad(self) -> pulumi.Input[str]:
        """
        Indicate whether the service involves overseas or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_abroad")

    @has_abroad.setter
    def has_abroad(self, value: pulumi.Input[str]):
        pulumi.set(self, "has_abroad", value)

    @property
    @pulumi.getter(name="hasInitiateTcp")
    def has_initiate_tcp(self) -> pulumi.Input[str]:
        """
        Indicate whether the service actively initiates TCP requests or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_initiate_tcp")

    @has_initiate_tcp.setter
    def has_initiate_tcp(self, value: pulumi.Input[str]):
        pulumi.set(self, "has_initiate_tcp", value)

    @property
    @pulumi.getter(name="platformTypes")
    def platform_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Platform set of the DDoS policy case.
        """
        return pulumi.get(self, "platform_types")

    @platform_types.setter
    def platform_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "platform_types", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource that the DDoS policy case works for. Valid values: `bgpip`, `bgp` and `bgp-multip`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="tcpEndPort")
    def tcp_end_port(self) -> pulumi.Input[str]:
        """
        End port of the TCP service. Valid value ranges: (0~65535). It must be greater than `tcp_start_port`.
        """
        return pulumi.get(self, "tcp_end_port")

    @tcp_end_port.setter
    def tcp_end_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "tcp_end_port", value)

    @property
    @pulumi.getter(name="tcpStartPort")
    def tcp_start_port(self) -> pulumi.Input[str]:
        """
        Start port of the TCP service. Valid value ranges: (0~65535).
        """
        return pulumi.get(self, "tcp_start_port")

    @tcp_start_port.setter
    def tcp_start_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "tcp_start_port", value)

    @property
    @pulumi.getter(name="udpEndPort")
    def udp_end_port(self) -> pulumi.Input[str]:
        """
        End port of the UDP service. Valid value ranges: (0~65535). It must be greater than `udp_start_port`.
        """
        return pulumi.get(self, "udp_end_port")

    @udp_end_port.setter
    def udp_end_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "udp_end_port", value)

    @property
    @pulumi.getter(name="udpStartPort")
    def udp_start_port(self) -> pulumi.Input[str]:
        """
        Start port of the UDP service. Valid value ranges: (0~65535).
        """
        return pulumi.get(self, "udp_start_port")

    @udp_start_port.setter
    def udp_start_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "udp_start_port", value)

    @property
    @pulumi.getter(name="webApiUrls")
    def web_api_urls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Web API url set.
        """
        return pulumi.get(self, "web_api_urls")

    @web_api_urls.setter
    def web_api_urls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "web_api_urls", value)

    @property
    @pulumi.getter(name="hasInitiateUdp")
    def has_initiate_udp(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the actively initiate UDP requests or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_initiate_udp")

    @has_initiate_udp.setter
    def has_initiate_udp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_initiate_udp", value)

    @property
    @pulumi.getter(name="hasVpn")
    def has_vpn(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the service involves VPN service or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_vpn")

    @has_vpn.setter
    def has_vpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_vpn", value)

    @property
    @pulumi.getter(name="maxTcpPackageLen")
    def max_tcp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The max length of TCP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_tcp_package_len`.
        """
        return pulumi.get(self, "max_tcp_package_len")

    @max_tcp_package_len.setter
    def max_tcp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_tcp_package_len", value)

    @property
    @pulumi.getter(name="maxUdpPackageLen")
    def max_udp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The max length of UDP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_udp_package_len`.
        """
        return pulumi.get(self, "max_udp_package_len")

    @max_udp_package_len.setter
    def max_udp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_udp_package_len", value)

    @property
    @pulumi.getter(name="minTcpPackageLen")
    def min_tcp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum length of TCP message package, valid value length should be greater than 0 and less than 1500.
        """
        return pulumi.get(self, "min_tcp_package_len")

    @min_tcp_package_len.setter
    def min_tcp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_tcp_package_len", value)

    @property
    @pulumi.getter(name="minUdpPackageLen")
    def min_udp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum length of UDP message package, valid value length should be greater than 0 and less than 1500.
        """
        return pulumi.get(self, "min_udp_package_len")

    @min_udp_package_len.setter
    def min_udp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_udp_package_len", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DDoS policy case. Length should between 1 and 64.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="peerTcpPort")
    def peer_tcp_port(self) -> Optional[pulumi.Input[str]]:
        """
        The port that actively initiates TCP requests. Valid value ranges: (1~65535).
        """
        return pulumi.get(self, "peer_tcp_port")

    @peer_tcp_port.setter
    def peer_tcp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_tcp_port", value)

    @property
    @pulumi.getter(name="peerUdpPort")
    def peer_udp_port(self) -> Optional[pulumi.Input[str]]:
        """
        The port that actively initiates UDP requests. Valid value ranges: (1~65535).
        """
        return pulumi.get(self, "peer_udp_port")

    @peer_udp_port.setter
    def peer_udp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_udp_port", value)

    @property
    @pulumi.getter(name="tcpFootprint")
    def tcp_footprint(self) -> Optional[pulumi.Input[str]]:
        """
        The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        """
        return pulumi.get(self, "tcp_footprint")

    @tcp_footprint.setter
    def tcp_footprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_footprint", value)

    @property
    @pulumi.getter(name="udpFootprint")
    def udp_footprint(self) -> Optional[pulumi.Input[str]]:
        """
        The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        """
        return pulumi.get(self, "udp_footprint")

    @udp_footprint.setter
    def udp_footprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_footprint", value)


@pulumi.input_type
class _DdosPolicyCaseState:
    def __init__(__self__, *,
                 app_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 app_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 has_abroad: Optional[pulumi.Input[str]] = None,
                 has_initiate_tcp: Optional[pulumi.Input[str]] = None,
                 has_initiate_udp: Optional[pulumi.Input[str]] = None,
                 has_vpn: Optional[pulumi.Input[str]] = None,
                 max_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 max_udp_package_len: Optional[pulumi.Input[str]] = None,
                 min_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 min_udp_package_len: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer_tcp_port: Optional[pulumi.Input[str]] = None,
                 peer_udp_port: Optional[pulumi.Input[str]] = None,
                 platform_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 scene_id: Optional[pulumi.Input[str]] = None,
                 tcp_end_port: Optional[pulumi.Input[str]] = None,
                 tcp_footprint: Optional[pulumi.Input[str]] = None,
                 tcp_start_port: Optional[pulumi.Input[str]] = None,
                 udp_end_port: Optional[pulumi.Input[str]] = None,
                 udp_footprint: Optional[pulumi.Input[str]] = None,
                 udp_start_port: Optional[pulumi.Input[str]] = None,
                 web_api_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering DdosPolicyCase resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_protocols: App protocol set of the DDoS policy case.
        :param pulumi.Input[str] app_type: App type of the DDoS policy case. Valid values: `WEB`, `GAME`, `APP` and `OTHER`.
        :param pulumi.Input[str] create_time: Create time of the DDoS policy case.
        :param pulumi.Input[str] has_abroad: Indicate whether the service involves overseas or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_initiate_tcp: Indicate whether the service actively initiates TCP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_initiate_udp: Indicate whether the actively initiate UDP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_vpn: Indicate whether the service involves VPN service or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] max_tcp_package_len: The max length of TCP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_tcp_package_len`.
        :param pulumi.Input[str] max_udp_package_len: The max length of UDP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_udp_package_len`.
        :param pulumi.Input[str] min_tcp_package_len: The minimum length of TCP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] min_udp_package_len: The minimum length of UDP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] name: Name of the DDoS policy case. Length should between 1 and 64.
        :param pulumi.Input[str] peer_tcp_port: The port that actively initiates TCP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[str] peer_udp_port: The port that actively initiates UDP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] platform_types: Platform set of the DDoS policy case.
        :param pulumi.Input[str] resource_type: Type of the resource that the DDoS policy case works for. Valid values: `bgpip`, `bgp` and `bgp-multip`.
        :param pulumi.Input[str] scene_id: ID of the DDoS policy case.
        :param pulumi.Input[str] tcp_end_port: End port of the TCP service. Valid value ranges: (0~65535). It must be greater than `tcp_start_port`.
        :param pulumi.Input[str] tcp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        :param pulumi.Input[str] tcp_start_port: Start port of the TCP service. Valid value ranges: (0~65535).
        :param pulumi.Input[str] udp_end_port: End port of the UDP service. Valid value ranges: (0~65535). It must be greater than `udp_start_port`.
        :param pulumi.Input[str] udp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        :param pulumi.Input[str] udp_start_port: Start port of the UDP service. Valid value ranges: (0~65535).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_api_urls: Web API url set.
        """
        if app_protocols is not None:
            pulumi.set(__self__, "app_protocols", app_protocols)
        if app_type is not None:
            pulumi.set(__self__, "app_type", app_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if has_abroad is not None:
            pulumi.set(__self__, "has_abroad", has_abroad)
        if has_initiate_tcp is not None:
            pulumi.set(__self__, "has_initiate_tcp", has_initiate_tcp)
        if has_initiate_udp is not None:
            pulumi.set(__self__, "has_initiate_udp", has_initiate_udp)
        if has_vpn is not None:
            pulumi.set(__self__, "has_vpn", has_vpn)
        if max_tcp_package_len is not None:
            pulumi.set(__self__, "max_tcp_package_len", max_tcp_package_len)
        if max_udp_package_len is not None:
            pulumi.set(__self__, "max_udp_package_len", max_udp_package_len)
        if min_tcp_package_len is not None:
            pulumi.set(__self__, "min_tcp_package_len", min_tcp_package_len)
        if min_udp_package_len is not None:
            pulumi.set(__self__, "min_udp_package_len", min_udp_package_len)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if peer_tcp_port is not None:
            pulumi.set(__self__, "peer_tcp_port", peer_tcp_port)
        if peer_udp_port is not None:
            pulumi.set(__self__, "peer_udp_port", peer_udp_port)
        if platform_types is not None:
            pulumi.set(__self__, "platform_types", platform_types)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if scene_id is not None:
            pulumi.set(__self__, "scene_id", scene_id)
        if tcp_end_port is not None:
            pulumi.set(__self__, "tcp_end_port", tcp_end_port)
        if tcp_footprint is not None:
            pulumi.set(__self__, "tcp_footprint", tcp_footprint)
        if tcp_start_port is not None:
            pulumi.set(__self__, "tcp_start_port", tcp_start_port)
        if udp_end_port is not None:
            pulumi.set(__self__, "udp_end_port", udp_end_port)
        if udp_footprint is not None:
            pulumi.set(__self__, "udp_footprint", udp_footprint)
        if udp_start_port is not None:
            pulumi.set(__self__, "udp_start_port", udp_start_port)
        if web_api_urls is not None:
            pulumi.set(__self__, "web_api_urls", web_api_urls)

    @property
    @pulumi.getter(name="appProtocols")
    def app_protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        App protocol set of the DDoS policy case.
        """
        return pulumi.get(self, "app_protocols")

    @app_protocols.setter
    def app_protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "app_protocols", value)

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[pulumi.Input[str]]:
        """
        App type of the DDoS policy case. Valid values: `WEB`, `GAME`, `APP` and `OTHER`.
        """
        return pulumi.get(self, "app_type")

    @app_type.setter
    def app_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the DDoS policy case.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="hasAbroad")
    def has_abroad(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the service involves overseas or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_abroad")

    @has_abroad.setter
    def has_abroad(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_abroad", value)

    @property
    @pulumi.getter(name="hasInitiateTcp")
    def has_initiate_tcp(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the service actively initiates TCP requests or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_initiate_tcp")

    @has_initiate_tcp.setter
    def has_initiate_tcp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_initiate_tcp", value)

    @property
    @pulumi.getter(name="hasInitiateUdp")
    def has_initiate_udp(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the actively initiate UDP requests or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_initiate_udp")

    @has_initiate_udp.setter
    def has_initiate_udp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_initiate_udp", value)

    @property
    @pulumi.getter(name="hasVpn")
    def has_vpn(self) -> Optional[pulumi.Input[str]]:
        """
        Indicate whether the service involves VPN service or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_vpn")

    @has_vpn.setter
    def has_vpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_vpn", value)

    @property
    @pulumi.getter(name="maxTcpPackageLen")
    def max_tcp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The max length of TCP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_tcp_package_len`.
        """
        return pulumi.get(self, "max_tcp_package_len")

    @max_tcp_package_len.setter
    def max_tcp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_tcp_package_len", value)

    @property
    @pulumi.getter(name="maxUdpPackageLen")
    def max_udp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The max length of UDP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_udp_package_len`.
        """
        return pulumi.get(self, "max_udp_package_len")

    @max_udp_package_len.setter
    def max_udp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max_udp_package_len", value)

    @property
    @pulumi.getter(name="minTcpPackageLen")
    def min_tcp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum length of TCP message package, valid value length should be greater than 0 and less than 1500.
        """
        return pulumi.get(self, "min_tcp_package_len")

    @min_tcp_package_len.setter
    def min_tcp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_tcp_package_len", value)

    @property
    @pulumi.getter(name="minUdpPackageLen")
    def min_udp_package_len(self) -> Optional[pulumi.Input[str]]:
        """
        The minimum length of UDP message package, valid value length should be greater than 0 and less than 1500.
        """
        return pulumi.get(self, "min_udp_package_len")

    @min_udp_package_len.setter
    def min_udp_package_len(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_udp_package_len", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the DDoS policy case. Length should between 1 and 64.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="peerTcpPort")
    def peer_tcp_port(self) -> Optional[pulumi.Input[str]]:
        """
        The port that actively initiates TCP requests. Valid value ranges: (1~65535).
        """
        return pulumi.get(self, "peer_tcp_port")

    @peer_tcp_port.setter
    def peer_tcp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_tcp_port", value)

    @property
    @pulumi.getter(name="peerUdpPort")
    def peer_udp_port(self) -> Optional[pulumi.Input[str]]:
        """
        The port that actively initiates UDP requests. Valid value ranges: (1~65535).
        """
        return pulumi.get(self, "peer_udp_port")

    @peer_udp_port.setter
    def peer_udp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "peer_udp_port", value)

    @property
    @pulumi.getter(name="platformTypes")
    def platform_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Platform set of the DDoS policy case.
        """
        return pulumi.get(self, "platform_types")

    @platform_types.setter
    def platform_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "platform_types", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource that the DDoS policy case works for. Valid values: `bgpip`, `bgp` and `bgp-multip`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="sceneId")
    def scene_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the DDoS policy case.
        """
        return pulumi.get(self, "scene_id")

    @scene_id.setter
    def scene_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scene_id", value)

    @property
    @pulumi.getter(name="tcpEndPort")
    def tcp_end_port(self) -> Optional[pulumi.Input[str]]:
        """
        End port of the TCP service. Valid value ranges: (0~65535). It must be greater than `tcp_start_port`.
        """
        return pulumi.get(self, "tcp_end_port")

    @tcp_end_port.setter
    def tcp_end_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_end_port", value)

    @property
    @pulumi.getter(name="tcpFootprint")
    def tcp_footprint(self) -> Optional[pulumi.Input[str]]:
        """
        The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        """
        return pulumi.get(self, "tcp_footprint")

    @tcp_footprint.setter
    def tcp_footprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_footprint", value)

    @property
    @pulumi.getter(name="tcpStartPort")
    def tcp_start_port(self) -> Optional[pulumi.Input[str]]:
        """
        Start port of the TCP service. Valid value ranges: (0~65535).
        """
        return pulumi.get(self, "tcp_start_port")

    @tcp_start_port.setter
    def tcp_start_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_start_port", value)

    @property
    @pulumi.getter(name="udpEndPort")
    def udp_end_port(self) -> Optional[pulumi.Input[str]]:
        """
        End port of the UDP service. Valid value ranges: (0~65535). It must be greater than `udp_start_port`.
        """
        return pulumi.get(self, "udp_end_port")

    @udp_end_port.setter
    def udp_end_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_end_port", value)

    @property
    @pulumi.getter(name="udpFootprint")
    def udp_footprint(self) -> Optional[pulumi.Input[str]]:
        """
        The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        """
        return pulumi.get(self, "udp_footprint")

    @udp_footprint.setter
    def udp_footprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_footprint", value)

    @property
    @pulumi.getter(name="udpStartPort")
    def udp_start_port(self) -> Optional[pulumi.Input[str]]:
        """
        Start port of the UDP service. Valid value ranges: (0~65535).
        """
        return pulumi.get(self, "udp_start_port")

    @udp_start_port.setter
    def udp_start_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_start_port", value)

    @property
    @pulumi.getter(name="webApiUrls")
    def web_api_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Web API url set.
        """
        return pulumi.get(self, "web_api_urls")

    @web_api_urls.setter
    def web_api_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "web_api_urls", value)


class DdosPolicyCase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 app_type: Optional[pulumi.Input[str]] = None,
                 has_abroad: Optional[pulumi.Input[str]] = None,
                 has_initiate_tcp: Optional[pulumi.Input[str]] = None,
                 has_initiate_udp: Optional[pulumi.Input[str]] = None,
                 has_vpn: Optional[pulumi.Input[str]] = None,
                 max_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 max_udp_package_len: Optional[pulumi.Input[str]] = None,
                 min_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 min_udp_package_len: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer_tcp_port: Optional[pulumi.Input[str]] = None,
                 peer_udp_port: Optional[pulumi.Input[str]] = None,
                 platform_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 tcp_end_port: Optional[pulumi.Input[str]] = None,
                 tcp_footprint: Optional[pulumi.Input[str]] = None,
                 tcp_start_port: Optional[pulumi.Input[str]] = None,
                 udp_end_port: Optional[pulumi.Input[str]] = None,
                 udp_footprint: Optional[pulumi.Input[str]] = None,
                 udp_start_port: Optional[pulumi.Input[str]] = None,
                 web_api_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Use this resource to create dayu DDoS policy case

        > **NOTE:** when a dayu DDoS policy case is created, there will be a dayu DDoS policy created with the same prefix name in the same time. This resource only supports Anti-DDoS of type `bgp`, `bgp-multip` and `bgpip`. One Anti-DDoS resource can only has one DDoS policy case resource. When there is only one Anti-DDoS resource and one policy case, those two resource will be bind automatically.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.dayu.DdosPolicyCase("foo",
            app_protocols=[
                "tcp",
                "udp",
            ],
            app_type="WEB",
            has_abroad="yes",
            has_initiate_tcp="yes",
            has_initiate_udp="yes",
            has_vpn="yes",
            max_tcp_package_len="1200",
            max_udp_package_len="1200",
            min_tcp_package_len="1000",
            min_udp_package_len="1000",
            peer_tcp_port="1111",
            peer_udp_port="3333",
            platform_types=[
                "PC",
                "MOBILE",
            ],
            resource_type="bgpip",
            tcp_end_port="2000",
            tcp_footprint="511",
            tcp_start_port="1000",
            udp_end_port="4000",
            udp_footprint="500",
            udp_start_port="3000",
            web_api_urls=[
                "abc.com",
                "test.cn/aaa.png",
            ])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_protocols: App protocol set of the DDoS policy case.
        :param pulumi.Input[str] app_type: App type of the DDoS policy case. Valid values: `WEB`, `GAME`, `APP` and `OTHER`.
        :param pulumi.Input[str] has_abroad: Indicate whether the service involves overseas or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_initiate_tcp: Indicate whether the service actively initiates TCP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_initiate_udp: Indicate whether the actively initiate UDP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_vpn: Indicate whether the service involves VPN service or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] max_tcp_package_len: The max length of TCP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_tcp_package_len`.
        :param pulumi.Input[str] max_udp_package_len: The max length of UDP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_udp_package_len`.
        :param pulumi.Input[str] min_tcp_package_len: The minimum length of TCP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] min_udp_package_len: The minimum length of UDP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] name: Name of the DDoS policy case. Length should between 1 and 64.
        :param pulumi.Input[str] peer_tcp_port: The port that actively initiates TCP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[str] peer_udp_port: The port that actively initiates UDP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] platform_types: Platform set of the DDoS policy case.
        :param pulumi.Input[str] resource_type: Type of the resource that the DDoS policy case works for. Valid values: `bgpip`, `bgp` and `bgp-multip`.
        :param pulumi.Input[str] tcp_end_port: End port of the TCP service. Valid value ranges: (0~65535). It must be greater than `tcp_start_port`.
        :param pulumi.Input[str] tcp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        :param pulumi.Input[str] tcp_start_port: Start port of the TCP service. Valid value ranges: (0~65535).
        :param pulumi.Input[str] udp_end_port: End port of the UDP service. Valid value ranges: (0~65535). It must be greater than `udp_start_port`.
        :param pulumi.Input[str] udp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        :param pulumi.Input[str] udp_start_port: Start port of the UDP service. Valid value ranges: (0~65535).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_api_urls: Web API url set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DdosPolicyCaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create dayu DDoS policy case

        > **NOTE:** when a dayu DDoS policy case is created, there will be a dayu DDoS policy created with the same prefix name in the same time. This resource only supports Anti-DDoS of type `bgp`, `bgp-multip` and `bgpip`. One Anti-DDoS resource can only has one DDoS policy case resource. When there is only one Anti-DDoS resource and one policy case, those two resource will be bind automatically.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.dayu.DdosPolicyCase("foo",
            app_protocols=[
                "tcp",
                "udp",
            ],
            app_type="WEB",
            has_abroad="yes",
            has_initiate_tcp="yes",
            has_initiate_udp="yes",
            has_vpn="yes",
            max_tcp_package_len="1200",
            max_udp_package_len="1200",
            min_tcp_package_len="1000",
            min_udp_package_len="1000",
            peer_tcp_port="1111",
            peer_udp_port="3333",
            platform_types=[
                "PC",
                "MOBILE",
            ],
            resource_type="bgpip",
            tcp_end_port="2000",
            tcp_footprint="511",
            tcp_start_port="1000",
            udp_end_port="4000",
            udp_footprint="500",
            udp_start_port="3000",
            web_api_urls=[
                "abc.com",
                "test.cn/aaa.png",
            ])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param DdosPolicyCaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DdosPolicyCaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 app_type: Optional[pulumi.Input[str]] = None,
                 has_abroad: Optional[pulumi.Input[str]] = None,
                 has_initiate_tcp: Optional[pulumi.Input[str]] = None,
                 has_initiate_udp: Optional[pulumi.Input[str]] = None,
                 has_vpn: Optional[pulumi.Input[str]] = None,
                 max_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 max_udp_package_len: Optional[pulumi.Input[str]] = None,
                 min_tcp_package_len: Optional[pulumi.Input[str]] = None,
                 min_udp_package_len: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 peer_tcp_port: Optional[pulumi.Input[str]] = None,
                 peer_udp_port: Optional[pulumi.Input[str]] = None,
                 platform_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 tcp_end_port: Optional[pulumi.Input[str]] = None,
                 tcp_footprint: Optional[pulumi.Input[str]] = None,
                 tcp_start_port: Optional[pulumi.Input[str]] = None,
                 udp_end_port: Optional[pulumi.Input[str]] = None,
                 udp_footprint: Optional[pulumi.Input[str]] = None,
                 udp_start_port: Optional[pulumi.Input[str]] = None,
                 web_api_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DdosPolicyCaseArgs.__new__(DdosPolicyCaseArgs)

            if app_protocols is None and not opts.urn:
                raise TypeError("Missing required property 'app_protocols'")
            __props__.__dict__["app_protocols"] = app_protocols
            if app_type is None and not opts.urn:
                raise TypeError("Missing required property 'app_type'")
            __props__.__dict__["app_type"] = app_type
            if has_abroad is None and not opts.urn:
                raise TypeError("Missing required property 'has_abroad'")
            __props__.__dict__["has_abroad"] = has_abroad
            if has_initiate_tcp is None and not opts.urn:
                raise TypeError("Missing required property 'has_initiate_tcp'")
            __props__.__dict__["has_initiate_tcp"] = has_initiate_tcp
            __props__.__dict__["has_initiate_udp"] = has_initiate_udp
            __props__.__dict__["has_vpn"] = has_vpn
            __props__.__dict__["max_tcp_package_len"] = max_tcp_package_len
            __props__.__dict__["max_udp_package_len"] = max_udp_package_len
            __props__.__dict__["min_tcp_package_len"] = min_tcp_package_len
            __props__.__dict__["min_udp_package_len"] = min_udp_package_len
            __props__.__dict__["name"] = name
            __props__.__dict__["peer_tcp_port"] = peer_tcp_port
            __props__.__dict__["peer_udp_port"] = peer_udp_port
            if platform_types is None and not opts.urn:
                raise TypeError("Missing required property 'platform_types'")
            __props__.__dict__["platform_types"] = platform_types
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            if tcp_end_port is None and not opts.urn:
                raise TypeError("Missing required property 'tcp_end_port'")
            __props__.__dict__["tcp_end_port"] = tcp_end_port
            __props__.__dict__["tcp_footprint"] = tcp_footprint
            if tcp_start_port is None and not opts.urn:
                raise TypeError("Missing required property 'tcp_start_port'")
            __props__.__dict__["tcp_start_port"] = tcp_start_port
            if udp_end_port is None and not opts.urn:
                raise TypeError("Missing required property 'udp_end_port'")
            __props__.__dict__["udp_end_port"] = udp_end_port
            __props__.__dict__["udp_footprint"] = udp_footprint
            if udp_start_port is None and not opts.urn:
                raise TypeError("Missing required property 'udp_start_port'")
            __props__.__dict__["udp_start_port"] = udp_start_port
            if web_api_urls is None and not opts.urn:
                raise TypeError("Missing required property 'web_api_urls'")
            __props__.__dict__["web_api_urls"] = web_api_urls
            __props__.__dict__["create_time"] = None
            __props__.__dict__["scene_id"] = None
        super(DdosPolicyCase, __self__).__init__(
            'tencentcloud:Dayu/ddosPolicyCase:DdosPolicyCase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            app_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            has_abroad: Optional[pulumi.Input[str]] = None,
            has_initiate_tcp: Optional[pulumi.Input[str]] = None,
            has_initiate_udp: Optional[pulumi.Input[str]] = None,
            has_vpn: Optional[pulumi.Input[str]] = None,
            max_tcp_package_len: Optional[pulumi.Input[str]] = None,
            max_udp_package_len: Optional[pulumi.Input[str]] = None,
            min_tcp_package_len: Optional[pulumi.Input[str]] = None,
            min_udp_package_len: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            peer_tcp_port: Optional[pulumi.Input[str]] = None,
            peer_udp_port: Optional[pulumi.Input[str]] = None,
            platform_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            scene_id: Optional[pulumi.Input[str]] = None,
            tcp_end_port: Optional[pulumi.Input[str]] = None,
            tcp_footprint: Optional[pulumi.Input[str]] = None,
            tcp_start_port: Optional[pulumi.Input[str]] = None,
            udp_end_port: Optional[pulumi.Input[str]] = None,
            udp_footprint: Optional[pulumi.Input[str]] = None,
            udp_start_port: Optional[pulumi.Input[str]] = None,
            web_api_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'DdosPolicyCase':
        """
        Get an existing DdosPolicyCase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] app_protocols: App protocol set of the DDoS policy case.
        :param pulumi.Input[str] app_type: App type of the DDoS policy case. Valid values: `WEB`, `GAME`, `APP` and `OTHER`.
        :param pulumi.Input[str] create_time: Create time of the DDoS policy case.
        :param pulumi.Input[str] has_abroad: Indicate whether the service involves overseas or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_initiate_tcp: Indicate whether the service actively initiates TCP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_initiate_udp: Indicate whether the actively initiate UDP requests or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] has_vpn: Indicate whether the service involves VPN service or not. Valid values: `no` and `yes`.
        :param pulumi.Input[str] max_tcp_package_len: The max length of TCP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_tcp_package_len`.
        :param pulumi.Input[str] max_udp_package_len: The max length of UDP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_udp_package_len`.
        :param pulumi.Input[str] min_tcp_package_len: The minimum length of TCP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] min_udp_package_len: The minimum length of UDP message package, valid value length should be greater than 0 and less than 1500.
        :param pulumi.Input[str] name: Name of the DDoS policy case. Length should between 1 and 64.
        :param pulumi.Input[str] peer_tcp_port: The port that actively initiates TCP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[str] peer_udp_port: The port that actively initiates UDP requests. Valid value ranges: (1~65535).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] platform_types: Platform set of the DDoS policy case.
        :param pulumi.Input[str] resource_type: Type of the resource that the DDoS policy case works for. Valid values: `bgpip`, `bgp` and `bgp-multip`.
        :param pulumi.Input[str] scene_id: ID of the DDoS policy case.
        :param pulumi.Input[str] tcp_end_port: End port of the TCP service. Valid value ranges: (0~65535). It must be greater than `tcp_start_port`.
        :param pulumi.Input[str] tcp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        :param pulumi.Input[str] tcp_start_port: Start port of the TCP service. Valid value ranges: (0~65535).
        :param pulumi.Input[str] udp_end_port: End port of the UDP service. Valid value ranges: (0~65535). It must be greater than `udp_start_port`.
        :param pulumi.Input[str] udp_footprint: The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        :param pulumi.Input[str] udp_start_port: Start port of the UDP service. Valid value ranges: (0~65535).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] web_api_urls: Web API url set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DdosPolicyCaseState.__new__(_DdosPolicyCaseState)

        __props__.__dict__["app_protocols"] = app_protocols
        __props__.__dict__["app_type"] = app_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["has_abroad"] = has_abroad
        __props__.__dict__["has_initiate_tcp"] = has_initiate_tcp
        __props__.__dict__["has_initiate_udp"] = has_initiate_udp
        __props__.__dict__["has_vpn"] = has_vpn
        __props__.__dict__["max_tcp_package_len"] = max_tcp_package_len
        __props__.__dict__["max_udp_package_len"] = max_udp_package_len
        __props__.__dict__["min_tcp_package_len"] = min_tcp_package_len
        __props__.__dict__["min_udp_package_len"] = min_udp_package_len
        __props__.__dict__["name"] = name
        __props__.__dict__["peer_tcp_port"] = peer_tcp_port
        __props__.__dict__["peer_udp_port"] = peer_udp_port
        __props__.__dict__["platform_types"] = platform_types
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["scene_id"] = scene_id
        __props__.__dict__["tcp_end_port"] = tcp_end_port
        __props__.__dict__["tcp_footprint"] = tcp_footprint
        __props__.__dict__["tcp_start_port"] = tcp_start_port
        __props__.__dict__["udp_end_port"] = udp_end_port
        __props__.__dict__["udp_footprint"] = udp_footprint
        __props__.__dict__["udp_start_port"] = udp_start_port
        __props__.__dict__["web_api_urls"] = web_api_urls
        return DdosPolicyCase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appProtocols")
    def app_protocols(self) -> pulumi.Output[Sequence[str]]:
        """
        App protocol set of the DDoS policy case.
        """
        return pulumi.get(self, "app_protocols")

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> pulumi.Output[str]:
        """
        App type of the DDoS policy case. Valid values: `WEB`, `GAME`, `APP` and `OTHER`.
        """
        return pulumi.get(self, "app_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the DDoS policy case.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="hasAbroad")
    def has_abroad(self) -> pulumi.Output[str]:
        """
        Indicate whether the service involves overseas or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_abroad")

    @property
    @pulumi.getter(name="hasInitiateTcp")
    def has_initiate_tcp(self) -> pulumi.Output[str]:
        """
        Indicate whether the service actively initiates TCP requests or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_initiate_tcp")

    @property
    @pulumi.getter(name="hasInitiateUdp")
    def has_initiate_udp(self) -> pulumi.Output[Optional[str]]:
        """
        Indicate whether the actively initiate UDP requests or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_initiate_udp")

    @property
    @pulumi.getter(name="hasVpn")
    def has_vpn(self) -> pulumi.Output[Optional[str]]:
        """
        Indicate whether the service involves VPN service or not. Valid values: `no` and `yes`.
        """
        return pulumi.get(self, "has_vpn")

    @property
    @pulumi.getter(name="maxTcpPackageLen")
    def max_tcp_package_len(self) -> pulumi.Output[Optional[str]]:
        """
        The max length of TCP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_tcp_package_len`.
        """
        return pulumi.get(self, "max_tcp_package_len")

    @property
    @pulumi.getter(name="maxUdpPackageLen")
    def max_udp_package_len(self) -> pulumi.Output[Optional[str]]:
        """
        The max length of UDP message package, valid value length should be greater than 0 and less than 1500. It should be greater than `min_udp_package_len`.
        """
        return pulumi.get(self, "max_udp_package_len")

    @property
    @pulumi.getter(name="minTcpPackageLen")
    def min_tcp_package_len(self) -> pulumi.Output[Optional[str]]:
        """
        The minimum length of TCP message package, valid value length should be greater than 0 and less than 1500.
        """
        return pulumi.get(self, "min_tcp_package_len")

    @property
    @pulumi.getter(name="minUdpPackageLen")
    def min_udp_package_len(self) -> pulumi.Output[Optional[str]]:
        """
        The minimum length of UDP message package, valid value length should be greater than 0 and less than 1500.
        """
        return pulumi.get(self, "min_udp_package_len")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the DDoS policy case. Length should between 1 and 64.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="peerTcpPort")
    def peer_tcp_port(self) -> pulumi.Output[Optional[str]]:
        """
        The port that actively initiates TCP requests. Valid value ranges: (1~65535).
        """
        return pulumi.get(self, "peer_tcp_port")

    @property
    @pulumi.getter(name="peerUdpPort")
    def peer_udp_port(self) -> pulumi.Output[Optional[str]]:
        """
        The port that actively initiates UDP requests. Valid value ranges: (1~65535).
        """
        return pulumi.get(self, "peer_udp_port")

    @property
    @pulumi.getter(name="platformTypes")
    def platform_types(self) -> pulumi.Output[Sequence[str]]:
        """
        Platform set of the DDoS policy case.
        """
        return pulumi.get(self, "platform_types")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Type of the resource that the DDoS policy case works for. Valid values: `bgpip`, `bgp` and `bgp-multip`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="sceneId")
    def scene_id(self) -> pulumi.Output[str]:
        """
        ID of the DDoS policy case.
        """
        return pulumi.get(self, "scene_id")

    @property
    @pulumi.getter(name="tcpEndPort")
    def tcp_end_port(self) -> pulumi.Output[str]:
        """
        End port of the TCP service. Valid value ranges: (0~65535). It must be greater than `tcp_start_port`.
        """
        return pulumi.get(self, "tcp_end_port")

    @property
    @pulumi.getter(name="tcpFootprint")
    def tcp_footprint(self) -> pulumi.Output[Optional[str]]:
        """
        The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        """
        return pulumi.get(self, "tcp_footprint")

    @property
    @pulumi.getter(name="tcpStartPort")
    def tcp_start_port(self) -> pulumi.Output[str]:
        """
        Start port of the TCP service. Valid value ranges: (0~65535).
        """
        return pulumi.get(self, "tcp_start_port")

    @property
    @pulumi.getter(name="udpEndPort")
    def udp_end_port(self) -> pulumi.Output[str]:
        """
        End port of the UDP service. Valid value ranges: (0~65535). It must be greater than `udp_start_port`.
        """
        return pulumi.get(self, "udp_end_port")

    @property
    @pulumi.getter(name="udpFootprint")
    def udp_footprint(self) -> pulumi.Output[Optional[str]]:
        """
        The fixed signature of TCP protocol load, valid value length is range from 1 to 512.
        """
        return pulumi.get(self, "udp_footprint")

    @property
    @pulumi.getter(name="udpStartPort")
    def udp_start_port(self) -> pulumi.Output[str]:
        """
        Start port of the UDP service. Valid value ranges: (0~65535).
        """
        return pulumi.get(self, "udp_start_port")

    @property
    @pulumi.getter(name="webApiUrls")
    def web_api_urls(self) -> pulumi.Output[Sequence[str]]:
        """
        Web API url set.
        """
        return pulumi.get(self, "web_api_urls")

