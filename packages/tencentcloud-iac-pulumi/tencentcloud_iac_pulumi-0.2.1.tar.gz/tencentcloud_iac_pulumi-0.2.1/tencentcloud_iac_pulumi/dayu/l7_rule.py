# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['L7RuleArgs', 'L7Rule']

@pulumi.input_type
class L7RuleArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 resource_id: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 source_lists: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source_type: pulumi.Input[int],
                 switch: pulumi.Input[bool],
                 health_check_code: Optional[pulumi.Input[int]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_method: Optional[pulumi.Input[str]] = None,
                 health_check_path: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a L7Rule resource.
        :param pulumi.Input[str] domain: Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        :param pulumi.Input[bool] switch: Indicate the rule will take effect or not.
        :param pulumi.Input[int] health_check_code: HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
        :param pulumi.Input[int] health_check_interval: Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
        :param pulumi.Input[str] health_check_method: Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
        :param pulumi.Input[str] health_check_path: Path of health check. The default is `/`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
        :param pulumi.Input[str] name: Name of the rule.
        :param pulumi.Input[str] ssl_id: SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "source_lists", source_lists)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "switch", switch)
        if health_check_code is not None:
            pulumi.set(__self__, "health_check_code", health_check_code)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_method is not None:
            pulumi.set(__self__, "health_check_method", health_check_method)
        if health_check_path is not None:
            pulumi.set(__self__, "health_check_path", health_check_path)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ssl_id is not None:
            pulumi.set(__self__, "ssl_id", ssl_id)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol of the rule. Valid values: `http`, `https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        ID of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
        """
        return pulumi.get(self, "source_lists")

    @source_lists.setter
    def source_lists(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_lists", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[int]:
        """
        Source type, `1` for source of host, `2` for source of IP.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Input[bool]:
        """
        Indicate the rule will take effect or not.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: pulumi.Input[bool]):
        pulumi.set(self, "switch", value)

    @property
    @pulumi.getter(name="healthCheckCode")
    def health_check_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
        """
        return pulumi.get(self, "health_check_code")

    @health_check_code.setter
    def health_check_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_code", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckMethod")
    def health_check_method(self) -> Optional[pulumi.Input[str]]:
        """
        Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
        """
        return pulumi.get(self, "health_check_method")

    @health_check_method.setter
    def health_check_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_method", value)

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of health check. The default is `/`.
        """
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_path", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled. The default is `false`.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> Optional[pulumi.Input[str]]:
        """
        SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
        """
        return pulumi.get(self, "ssl_id")

    @ssl_id.setter
    def ssl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_id", value)


@pulumi.input_type
class _L7RuleState:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 health_check_code: Optional[pulumi.Input[int]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_method: Optional[pulumi.Input[str]] = None,
                 health_check_path: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 source_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 switch: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering L7Rule resources.
        :param pulumi.Input[str] domain: Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
        :param pulumi.Input[int] health_check_code: HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
        :param pulumi.Input[int] health_check_interval: Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
        :param pulumi.Input[str] health_check_method: Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
        :param pulumi.Input[str] health_check_path: Path of health check. The default is `/`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
        :param pulumi.Input[str] name: Name of the rule.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input[str] rule_id: ID of the layer 7 rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        :param pulumi.Input[str] ssl_id: SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
        :param pulumi.Input[int] status: Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for delete failed, `6` for waiting to be created/modified, `7` for waiting to be deleted and 8 for waiting to get SSL ID.
        :param pulumi.Input[bool] switch: Indicate the rule will take effect or not.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if health_check_code is not None:
            pulumi.set(__self__, "health_check_code", health_check_code)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_method is not None:
            pulumi.set(__self__, "health_check_method", health_check_method)
        if health_check_path is not None:
            pulumi.set(__self__, "health_check_path", health_check_path)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if source_lists is not None:
            pulumi.set(__self__, "source_lists", source_lists)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if ssl_id is not None:
            pulumi.set(__self__, "ssl_id", ssl_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if switch is not None:
            pulumi.set(__self__, "switch", switch)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="healthCheckCode")
    def health_check_code(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
        """
        return pulumi.get(self, "health_check_code")

    @health_check_code.setter
    def health_check_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_code", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckMethod")
    def health_check_method(self) -> Optional[pulumi.Input[str]]:
        """
        Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
        """
        return pulumi.get(self, "health_check_method")

    @health_check_method.setter
    def health_check_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_method", value)

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of health check. The default is `/`.
        """
        return pulumi.get(self, "health_check_path")

    @health_check_path.setter
    def health_check_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health_check_path", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled. The default is `false`.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the rule.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the rule. Valid values: `http`, `https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the layer 7 rule.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
        """
        return pulumi.get(self, "source_lists")

    @source_lists.setter
    def source_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_lists", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[int]]:
        """
        Source type, `1` for source of host, `2` for source of IP.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> Optional[pulumi.Input[str]]:
        """
        SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
        """
        return pulumi.get(self, "ssl_id")

    @ssl_id.setter
    def ssl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for delete failed, `6` for waiting to be created/modified, `7` for waiting to be deleted and 8 for waiting to get SSL ID.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate the rule will take effect or not.
        """
        return pulumi.get(self, "switch")

    @switch.setter
    def switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switch", value)


class L7Rule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 health_check_code: Optional[pulumi.Input[int]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_method: Optional[pulumi.Input[str]] = None,
                 health_check_path: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 source_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Use this resource to create dayu layer 7 rule

        > **NOTE:** This resource only support resource Anti-DDoS of type `bgpip`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        test_rule = tencentcloud.dayu.L7Rule("testRule",
            domain="zhaoshaona.com",
            health_check_code=31,
            health_check_health_num=5,
            health_check_interval=30,
            health_check_method="GET",
            health_check_path="/",
            health_check_switch=True,
            health_check_unhealth_num=10,
            protocol="https",
            resource_id="bgpip-00000294",
            resource_type="bgpip",
            source_lists=[
                "1.1.1.1:80",
                "2.2.2.2",
            ],
            source_type=2,
            ssl_id="%s",
            switch=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
        :param pulumi.Input[int] health_check_code: HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
        :param pulumi.Input[int] health_check_interval: Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
        :param pulumi.Input[str] health_check_method: Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
        :param pulumi.Input[str] health_check_path: Path of health check. The default is `/`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
        :param pulumi.Input[str] name: Name of the rule.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        :param pulumi.Input[str] ssl_id: SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
        :param pulumi.Input[bool] switch: Indicate the rule will take effect or not.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: L7RuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create dayu layer 7 rule

        > **NOTE:** This resource only support resource Anti-DDoS of type `bgpip`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        test_rule = tencentcloud.dayu.L7Rule("testRule",
            domain="zhaoshaona.com",
            health_check_code=31,
            health_check_health_num=5,
            health_check_interval=30,
            health_check_method="GET",
            health_check_path="/",
            health_check_switch=True,
            health_check_unhealth_num=10,
            protocol="https",
            resource_id="bgpip-00000294",
            resource_type="bgpip",
            source_lists=[
                "1.1.1.1:80",
                "2.2.2.2",
            ],
            source_type=2,
            ssl_id="%s",
            switch=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param L7RuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(L7RuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 health_check_code: Optional[pulumi.Input[int]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_method: Optional[pulumi.Input[str]] = None,
                 health_check_path: Optional[pulumi.Input[str]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 source_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 ssl_id: Optional[pulumi.Input[str]] = None,
                 switch: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = L7RuleArgs.__new__(L7RuleArgs)

            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["health_check_code"] = health_check_code
            __props__.__dict__["health_check_health_num"] = health_check_health_num
            __props__.__dict__["health_check_interval"] = health_check_interval
            __props__.__dict__["health_check_method"] = health_check_method
            __props__.__dict__["health_check_path"] = health_check_path
            __props__.__dict__["health_check_switch"] = health_check_switch
            __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            if source_lists is None and not opts.urn:
                raise TypeError("Missing required property 'source_lists'")
            __props__.__dict__["source_lists"] = source_lists
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["ssl_id"] = ssl_id
            if switch is None and not opts.urn:
                raise TypeError("Missing required property 'switch'")
            __props__.__dict__["switch"] = switch
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["status"] = None
        super(L7Rule, __self__).__init__(
            'tencentcloud:Dayu/l7Rule:L7Rule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain: Optional[pulumi.Input[str]] = None,
            health_check_code: Optional[pulumi.Input[int]] = None,
            health_check_health_num: Optional[pulumi.Input[int]] = None,
            health_check_interval: Optional[pulumi.Input[int]] = None,
            health_check_method: Optional[pulumi.Input[str]] = None,
            health_check_path: Optional[pulumi.Input[str]] = None,
            health_check_switch: Optional[pulumi.Input[bool]] = None,
            health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            source_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            source_type: Optional[pulumi.Input[int]] = None,
            ssl_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            switch: Optional[pulumi.Input[bool]] = None) -> 'L7Rule':
        """
        Get an existing L7Rule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
        :param pulumi.Input[int] health_check_code: HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
        :param pulumi.Input[int] health_check_interval: Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
        :param pulumi.Input[str] health_check_method: Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
        :param pulumi.Input[str] health_check_path: Path of health check. The default is `/`.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
        :param pulumi.Input[str] name: Name of the rule.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input[str] rule_id: ID of the layer 7 rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        :param pulumi.Input[str] ssl_id: SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
        :param pulumi.Input[int] status: Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for delete failed, `6` for waiting to be created/modified, `7` for waiting to be deleted and 8 for waiting to get SSL ID.
        :param pulumi.Input[bool] switch: Indicate the rule will take effect or not.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _L7RuleState.__new__(_L7RuleState)

        __props__.__dict__["domain"] = domain
        __props__.__dict__["health_check_code"] = health_check_code
        __props__.__dict__["health_check_health_num"] = health_check_health_num
        __props__.__dict__["health_check_interval"] = health_check_interval
        __props__.__dict__["health_check_method"] = health_check_method
        __props__.__dict__["health_check_path"] = health_check_path
        __props__.__dict__["health_check_switch"] = health_check_switch
        __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["source_lists"] = source_lists
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["ssl_id"] = ssl_id
        __props__.__dict__["status"] = status
        __props__.__dict__["switch"] = switch
        return L7Rule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain that the layer 7 rule works for. Valid string length ranges from 0 to 80.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="healthCheckCode")
    def health_check_code(self) -> pulumi.Output[int]:
        """
        HTTP Status Code. The default is `26`. Valid value ranges: [1~31]. `1` means the return value '1xx' is health. `2` means the return value '2xx' is health. `4` means the return value '3xx' is health. `8` means the return value '4xx' is health. `16` means the return value '5xx' is health. If you want multiple return codes to indicate health, need to add the corresponding values.
        """
        return pulumi.get(self, "health_check_code")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> pulumi.Output[int]:
        """
        Health threshold of health check, and the default is `3`. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is [2-10].
        """
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> pulumi.Output[int]:
        """
        Interval time of health check. Valid value ranges: [10~60]sec. The default is 15 sec.
        """
        return pulumi.get(self, "health_check_interval")

    @property
    @pulumi.getter(name="healthCheckMethod")
    def health_check_method(self) -> pulumi.Output[str]:
        """
        Methods of health check. The default is 'HEAD', the available value are 'HEAD' and 'GET'.
        """
        return pulumi.get(self, "health_check_method")

    @property
    @pulumi.getter(name="healthCheckPath")
    def health_check_path(self) -> pulumi.Output[str]:
        """
        Path of health check. The default is `/`.
        """
        return pulumi.get(self, "health_check_path")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> pulumi.Output[bool]:
        """
        Indicates whether health check is enabled. The default is `false`.
        """
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> pulumi.Output[int]:
        """
        Unhealthy threshold of health check, and the default is `3`. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is [2-10].
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol of the rule. Valid values: `http`, `https`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        ID of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        ID of the layer 7 rule.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> pulumi.Output[Sequence[str]]:
        """
        Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 16.
        """
        return pulumi.get(self, "source_lists")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[int]:
        """
        Source type, `1` for source of host, `2` for source of IP.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> pulumi.Output[Optional[str]]:
        """
        SSL ID, when the `protocol` is `https`, the field should be set with valid SSL id.
        """
        return pulumi.get(self, "ssl_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for delete failed, `6` for waiting to be created/modified, `7` for waiting to be deleted and 8 for waiting to get SSL ID.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def switch(self) -> pulumi.Output[bool]:
        """
        Indicate the rule will take effect or not.
        """
        return pulumi.get(self, "switch")

