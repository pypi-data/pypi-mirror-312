# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['L4RuleV2Args', 'L4RuleV2']

@pulumi.input_type
class L4RuleV2Args:
    def __init__(__self__, *,
                 business: pulumi.Input[str],
                 resource_id: pulumi.Input[str],
                 rules: pulumi.Input['L4RuleV2RulesArgs'],
                 virtual_port: pulumi.Input[int],
                 vpn: pulumi.Input[str]):
        """
        The set of arguments for constructing a L4RuleV2 resource.
        :param pulumi.Input[str] business: Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[str] resource_id: Resource id.
        :param pulumi.Input['L4RuleV2RulesArgs'] rules: A list of layer 4 rules. Each element contains the following attributes:
        :param pulumi.Input[int] virtual_port: The virtual port of the layer 4 rule.
        :param pulumi.Input[str] vpn: Resource vpn.
        """
        pulumi.set(__self__, "business", business)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "rules", rules)
        pulumi.set(__self__, "virtual_port", virtual_port)
        pulumi.set(__self__, "vpn", vpn)

    @property
    @pulumi.getter
    def business(self) -> pulumi.Input[str]:
        """
        Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        """
        return pulumi.get(self, "business")

    @business.setter
    def business(self, value: pulumi.Input[str]):
        pulumi.set(self, "business", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        Resource id.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input['L4RuleV2RulesArgs']:
        """
        A list of layer 4 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input['L4RuleV2RulesArgs']):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> pulumi.Input[int]:
        """
        The virtual port of the layer 4 rule.
        """
        return pulumi.get(self, "virtual_port")

    @virtual_port.setter
    def virtual_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "virtual_port", value)

    @property
    @pulumi.getter
    def vpn(self) -> pulumi.Input[str]:
        """
        Resource vpn.
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpn", value)


@pulumi.input_type
class _L4RuleV2State:
    def __init__(__self__, *,
                 business: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input['L4RuleV2RulesArgs']] = None,
                 virtual_port: Optional[pulumi.Input[int]] = None,
                 vpn: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering L4RuleV2 resources.
        :param pulumi.Input[str] business: Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[str] resource_id: Resource id.
        :param pulumi.Input['L4RuleV2RulesArgs'] rules: A list of layer 4 rules. Each element contains the following attributes:
        :param pulumi.Input[int] virtual_port: The virtual port of the layer 4 rule.
        :param pulumi.Input[str] vpn: Resource vpn.
        """
        if business is not None:
            pulumi.set(__self__, "business", business)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if virtual_port is not None:
            pulumi.set(__self__, "virtual_port", virtual_port)
        if vpn is not None:
            pulumi.set(__self__, "vpn", vpn)

    @property
    @pulumi.getter
    def business(self) -> Optional[pulumi.Input[str]]:
        """
        Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        """
        return pulumi.get(self, "business")

    @business.setter
    def business(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "business", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource id.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input['L4RuleV2RulesArgs']]:
        """
        A list of layer 4 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input['L4RuleV2RulesArgs']]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> Optional[pulumi.Input[int]]:
        """
        The virtual port of the layer 4 rule.
        """
        return pulumi.get(self, "virtual_port")

    @virtual_port.setter
    def virtual_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_port", value)

    @property
    @pulumi.getter
    def vpn(self) -> Optional[pulumi.Input[str]]:
        """
        Resource vpn.
        """
        return pulumi.get(self, "vpn")

    @vpn.setter
    def vpn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn", value)


class L4RuleV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 business: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[pulumi.InputType['L4RuleV2RulesArgs']]] = None,
                 virtual_port: Optional[pulumi.Input[int]] = None,
                 vpn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a L4RuleV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] business: Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[str] resource_id: Resource id.
        :param pulumi.Input[pulumi.InputType['L4RuleV2RulesArgs']] rules: A list of layer 4 rules. Each element contains the following attributes:
        :param pulumi.Input[int] virtual_port: The virtual port of the layer 4 rule.
        :param pulumi.Input[str] vpn: Resource vpn.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: L4RuleV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a L4RuleV2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param L4RuleV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(L4RuleV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 business: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[pulumi.InputType['L4RuleV2RulesArgs']]] = None,
                 virtual_port: Optional[pulumi.Input[int]] = None,
                 vpn: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = L4RuleV2Args.__new__(L4RuleV2Args)

            if business is None and not opts.urn:
                raise TypeError("Missing required property 'business'")
            __props__.__dict__["business"] = business
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
            if virtual_port is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_port'")
            __props__.__dict__["virtual_port"] = virtual_port
            if vpn is None and not opts.urn:
                raise TypeError("Missing required property 'vpn'")
            __props__.__dict__["vpn"] = vpn
        super(L4RuleV2, __self__).__init__(
            'tencentcloud:Dayu/l4RuleV2:L4RuleV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            business: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[pulumi.InputType['L4RuleV2RulesArgs']]] = None,
            virtual_port: Optional[pulumi.Input[int]] = None,
            vpn: Optional[pulumi.Input[str]] = None) -> 'L4RuleV2':
        """
        Get an existing L4RuleV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] business: Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[str] resource_id: Resource id.
        :param pulumi.Input[pulumi.InputType['L4RuleV2RulesArgs']] rules: A list of layer 4 rules. Each element contains the following attributes:
        :param pulumi.Input[int] virtual_port: The virtual port of the layer 4 rule.
        :param pulumi.Input[str] vpn: Resource vpn.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _L4RuleV2State.__new__(_L4RuleV2State)

        __props__.__dict__["business"] = business
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["rules"] = rules
        __props__.__dict__["virtual_port"] = virtual_port
        __props__.__dict__["vpn"] = vpn
        return L4RuleV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def business(self) -> pulumi.Output[str]:
        """
        Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        """
        return pulumi.get(self, "business")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        Resource id.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output['outputs.L4RuleV2Rules']:
        """
        A list of layer 4 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> pulumi.Output[int]:
        """
        The virtual port of the layer 4 rule.
        """
        return pulumi.get(self, "virtual_port")

    @property
    @pulumi.getter
    def vpn(self) -> pulumi.Output[str]:
        """
        Resource vpn.
        """
        return pulumi.get(self, "vpn")

