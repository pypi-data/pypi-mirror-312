# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetL4RulesV2Result',
    'AwaitableGetL4RulesV2Result',
    'get_l4_rules_v2',
    'get_l4_rules_v2_output',
]

@pulumi.output_type
class GetL4RulesV2Result:
    """
    A collection of values returned by getL4RulesV2.
    """
    def __init__(__self__, business=None, id=None, ip=None, lists=None, result_output_file=None, virtual_port=None):
        if business and not isinstance(business, str):
            raise TypeError("Expected argument 'business' to be a str")
        pulumi.set(__self__, "business", business)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if virtual_port and not isinstance(virtual_port, int):
            raise TypeError("Expected argument 'virtual_port' to be a int")
        pulumi.set(__self__, "virtual_port", virtual_port)

    @property
    @pulumi.getter
    def business(self) -> str:
        return pulumi.get(self, "business")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Bind the resource IP information.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetL4RulesV2ListResult']:
        """
        A list of layer 4 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="virtualPort")
    def virtual_port(self) -> Optional[int]:
        """
        The virtual port of the layer 4 rule.
        """
        return pulumi.get(self, "virtual_port")


class AwaitableGetL4RulesV2Result(GetL4RulesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetL4RulesV2Result(
            business=self.business,
            id=self.id,
            ip=self.ip,
            lists=self.lists,
            result_output_file=self.result_output_file,
            virtual_port=self.virtual_port)


def get_l4_rules_v2(business: Optional[str] = None,
                    ip: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    virtual_port: Optional[int] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetL4RulesV2Result:
    """
    Use this data source to query dayu new layer 4 rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tencentcloud_dayu_l4_rules_v2 = tencentcloud.Dayu.get_l4_rules_v2(business="bgpip")
    ```
    <!--End PulumiCodeChooser -->


    :param str business: Type of the resource that the layer 4 rule works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
    :param str ip: Ip of the resource.
    :param str result_output_file: Used to save results.
    :param int virtual_port: Virtual port of resource.
    """
    __args__ = dict()
    __args__['business'] = business
    __args__['ip'] = ip
    __args__['resultOutputFile'] = result_output_file
    __args__['virtualPort'] = virtual_port
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dayu/getL4RulesV2:getL4RulesV2', __args__, opts=opts, typ=GetL4RulesV2Result).value

    return AwaitableGetL4RulesV2Result(
        business=pulumi.get(__ret__, 'business'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        lists=pulumi.get(__ret__, 'lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        virtual_port=pulumi.get(__ret__, 'virtual_port'))


@_utilities.lift_output_func(get_l4_rules_v2)
def get_l4_rules_v2_output(business: Optional[pulumi.Input[str]] = None,
                           ip: Optional[pulumi.Input[Optional[str]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           virtual_port: Optional[pulumi.Input[Optional[int]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetL4RulesV2Result]:
    """
    Use this data source to query dayu new layer 4 rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tencentcloud_dayu_l4_rules_v2 = tencentcloud.Dayu.get_l4_rules_v2(business="bgpip")
    ```
    <!--End PulumiCodeChooser -->


    :param str business: Type of the resource that the layer 4 rule works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
    :param str ip: Ip of the resource.
    :param str result_output_file: Used to save results.
    :param int virtual_port: Virtual port of resource.
    """
    ...
