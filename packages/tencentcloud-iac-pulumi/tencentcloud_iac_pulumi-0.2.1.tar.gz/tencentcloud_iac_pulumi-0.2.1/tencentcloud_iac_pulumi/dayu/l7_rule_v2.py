# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['L7RuleV2Args', 'L7RuleV2']

@pulumi.input_type
class L7RuleV2Args:
    def __init__(__self__, *,
                 resource_id: pulumi.Input[str],
                 resource_ip: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 rule: pulumi.Input['L7RuleV2RuleArgs']):
        """
        The set of arguments for constructing a L7RuleV2 resource.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_ip: Ip of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input['L7RuleV2RuleArgs'] rule: A list of layer 7 rules. Each element contains the following attributes:
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_ip", resource_ip)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        ID of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceIp")
    def resource_ip(self) -> pulumi.Input[str]:
        """
        Ip of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_ip")

    @resource_ip.setter
    def resource_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_ip", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input['L7RuleV2RuleArgs']:
        """
        A list of layer 7 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input['L7RuleV2RuleArgs']):
        pulumi.set(self, "rule", value)


@pulumi.input_type
class _L7RuleV2State:
    def __init__(__self__, *,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_ip: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input['L7RuleV2RuleArgs']] = None):
        """
        Input properties used for looking up and filtering L7RuleV2 resources.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_ip: Ip of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input['L7RuleV2RuleArgs'] rule: A list of layer 7 rules. Each element contains the following attributes:
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_ip is not None:
            pulumi.set(__self__, "resource_ip", resource_ip)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceIp")
    def resource_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ip of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_ip")

    @resource_ip.setter
    def resource_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_ip", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input['L7RuleV2RuleArgs']]:
        """
        A list of layer 7 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input['L7RuleV2RuleArgs']]):
        pulumi.set(self, "rule", value)


class L7RuleV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_ip: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['L7RuleV2RuleArgs']]] = None,
                 __props__=None):
        """
        Use this resource to create dayu new layer 7 rule

        > **NOTE:** This resource only support resource Anti-DDoS of type `bgpip`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tencentcloud_dayu_l7_rule_v2 = tencentcloud.dayu.L7RuleV2("tencentcloudDayuL7RuleV2",
            resource_id="bgpip-000004xe",
            resource_ip="119.28.217.162",
            resource_type="bgpip",
            rule=tencentcloud.dayu.L7RuleV2RuleArgs(
                domain="github.com",
                keep_enable=False,
                keeptime=0,
                lb_type=1,
                protocol="http",
                source_lists=[
                    tencentcloud.dayu.L7RuleV2RuleSourceListArgs(
                        source="1.2.3.5",
                        weight=100,
                    ),
                    tencentcloud.dayu.L7RuleV2RuleSourceListArgs(
                        source="1.2.3.6",
                        weight=100,
                    ),
                ],
                source_type=2,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_ip: Ip of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input[pulumi.InputType['L7RuleV2RuleArgs']] rule: A list of layer 7 rules. Each element contains the following attributes:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: L7RuleV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create dayu new layer 7 rule

        > **NOTE:** This resource only support resource Anti-DDoS of type `bgpip`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tencentcloud_dayu_l7_rule_v2 = tencentcloud.dayu.L7RuleV2("tencentcloudDayuL7RuleV2",
            resource_id="bgpip-000004xe",
            resource_ip="119.28.217.162",
            resource_type="bgpip",
            rule=tencentcloud.dayu.L7RuleV2RuleArgs(
                domain="github.com",
                keep_enable=False,
                keeptime=0,
                lb_type=1,
                protocol="http",
                source_lists=[
                    tencentcloud.dayu.L7RuleV2RuleSourceListArgs(
                        source="1.2.3.5",
                        weight=100,
                    ),
                    tencentcloud.dayu.L7RuleV2RuleSourceListArgs(
                        source="1.2.3.6",
                        weight=100,
                    ),
                ],
                source_type=2,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param L7RuleV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(L7RuleV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_ip: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['L7RuleV2RuleArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = L7RuleV2Args.__new__(L7RuleV2Args)

            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_ip is None and not opts.urn:
                raise TypeError("Missing required property 'resource_ip'")
            __props__.__dict__["resource_ip"] = resource_ip
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
        super(L7RuleV2, __self__).__init__(
            'tencentcloud:Dayu/l7RuleV2:L7RuleV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            resource_ip: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            rule: Optional[pulumi.Input[pulumi.InputType['L7RuleV2RuleArgs']]] = None) -> 'L7RuleV2':
        """
        Get an existing L7RuleV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_ip: Ip of the resource that the layer 7 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        :param pulumi.Input[pulumi.InputType['L7RuleV2RuleArgs']] rule: A list of layer 7 rules. Each element contains the following attributes:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _L7RuleV2State.__new__(_L7RuleV2State)

        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_ip"] = resource_ip
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["rule"] = rule
        return L7RuleV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        ID of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceIp")
    def resource_ip(self) -> pulumi.Output[str]:
        """
        Ip of the resource that the layer 7 rule works for.
        """
        return pulumi.get(self, "resource_ip")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Type of the resource that the layer 7 rule works for, valid value is `bgpip`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output['outputs.L7RuleV2Rule']:
        """
        A list of layer 7 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "rule")

