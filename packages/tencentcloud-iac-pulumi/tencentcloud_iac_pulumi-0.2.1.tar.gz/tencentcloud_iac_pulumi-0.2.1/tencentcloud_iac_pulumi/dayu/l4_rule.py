# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['L4RuleArgs', 'L4Rule']

@pulumi.input_type
class L4RuleArgs:
    def __init__(__self__, *,
                 d_port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 resource_id: pulumi.Input[str],
                 resource_type: pulumi.Input[str],
                 s_port: pulumi.Input[int],
                 source_lists: pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]],
                 source_type: pulumi.Input[int],
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_timeout: Optional[pulumi.Input[int]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 session_switch: Optional[pulumi.Input[bool]] = None,
                 session_time: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a L4Rule resource.
        :param pulumi.Input[int] d_port: The destination port of the L4 rule.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 4 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[int] s_port: The source port of the L4 rule.
        :param pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
        :param pulumi.Input[int] health_check_interval: Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
        :param pulumi.Input[int] health_check_timeout: HTTP Status Code. The default is 26 and value range is 2-60.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
        :param pulumi.Input[str] name: Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
        :param pulumi.Input[bool] session_switch: Indicate that the session will keep or not, and default value is `false`.
        :param pulumi.Input[int] session_time: Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
        """
        pulumi.set(__self__, "d_port", d_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "s_port", s_port)
        pulumi.set(__self__, "source_lists", source_lists)
        pulumi.set(__self__, "source_type", source_type)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_timeout is not None:
            pulumi.set(__self__, "health_check_timeout", health_check_timeout)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session_switch is not None:
            pulumi.set(__self__, "session_switch", session_switch)
        if session_time is not None:
            pulumi.set(__self__, "session_time", session_time)

    @property
    @pulumi.getter(name="dPort")
    def d_port(self) -> pulumi.Input[int]:
        """
        The destination port of the L4 rule.
        """
        return pulumi.get(self, "d_port")

    @d_port.setter
    def d_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "d_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        """
        ID of the resource that the layer 4 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input[str]:
        """
        Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="sPort")
    def s_port(self) -> pulumi.Input[int]:
        """
        The source port of the L4 rule.
        """
        return pulumi.get(self, "s_port")

    @s_port.setter
    def s_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "s_port", value)

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]]:
        """
        Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
        """
        return pulumi.get(self, "source_lists")

    @source_lists.setter
    def source_lists(self, value: pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]]):
        pulumi.set(self, "source_lists", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[int]:
        """
        Source type, `1` for source of host, `2` for source of IP.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP Status Code. The default is 26 and value range is 2-60.
        """
        return pulumi.get(self, "health_check_timeout")

    @health_check_timeout.setter
    def health_check_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_timeout", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sessionSwitch")
    def session_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate that the session will keep or not, and default value is `false`.
        """
        return pulumi.get(self, "session_switch")

    @session_switch.setter
    def session_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_switch", value)

    @property
    @pulumi.getter(name="sessionTime")
    def session_time(self) -> Optional[pulumi.Input[int]]:
        """
        Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
        """
        return pulumi.get(self, "session_time")

    @session_time.setter
    def session_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_time", value)


@pulumi.input_type
class _L4RuleState:
    def __init__(__self__, *,
                 d_port: Optional[pulumi.Input[int]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_timeout: Optional[pulumi.Input[int]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 lb_type: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 rule_id: Optional[pulumi.Input[str]] = None,
                 s_port: Optional[pulumi.Input[int]] = None,
                 session_switch: Optional[pulumi.Input[bool]] = None,
                 session_time: Optional[pulumi.Input[int]] = None,
                 source_lists: Optional[pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]]] = None,
                 source_type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering L4Rule resources.
        :param pulumi.Input[int] d_port: The destination port of the L4 rule.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
        :param pulumi.Input[int] health_check_interval: Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
        :param pulumi.Input[int] health_check_timeout: HTTP Status Code. The default is 26 and value range is 2-60.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
        :param pulumi.Input[int] lb_type: LB type of the rule. Valid values: `1`, `2`. `1` for weight cycling and `2` for IP hash.
        :param pulumi.Input[str] name: Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 4 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[str] rule_id: ID of the layer 4 rule.
        :param pulumi.Input[int] s_port: The source port of the L4 rule.
        :param pulumi.Input[bool] session_switch: Indicate that the session will keep or not, and default value is `false`.
        :param pulumi.Input[int] session_time: Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
        :param pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        """
        if d_port is not None:
            pulumi.set(__self__, "d_port", d_port)
        if health_check_health_num is not None:
            pulumi.set(__self__, "health_check_health_num", health_check_health_num)
        if health_check_interval is not None:
            pulumi.set(__self__, "health_check_interval", health_check_interval)
        if health_check_switch is not None:
            pulumi.set(__self__, "health_check_switch", health_check_switch)
        if health_check_timeout is not None:
            pulumi.set(__self__, "health_check_timeout", health_check_timeout)
        if health_check_unhealth_num is not None:
            pulumi.set(__self__, "health_check_unhealth_num", health_check_unhealth_num)
        if lb_type is not None:
            pulumi.set(__self__, "lb_type", lb_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if s_port is not None:
            pulumi.set(__self__, "s_port", s_port)
        if session_switch is not None:
            pulumi.set(__self__, "session_switch", session_switch)
        if session_time is not None:
            pulumi.set(__self__, "session_time", session_time)
        if source_lists is not None:
            pulumi.set(__self__, "source_lists", source_lists)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="dPort")
    def d_port(self) -> Optional[pulumi.Input[int]]:
        """
        The destination port of the L4 rule.
        """
        return pulumi.get(self, "d_port")

    @d_port.setter
    def d_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "d_port", value)

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> Optional[pulumi.Input[int]]:
        """
        Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
        """
        return pulumi.get(self, "health_check_health_num")

    @health_check_health_num.setter
    def health_check_health_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_health_num", value)

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
        """
        return pulumi.get(self, "health_check_interval")

    @health_check_interval.setter
    def health_check_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_interval", value)

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
        """
        return pulumi.get(self, "health_check_switch")

    @health_check_switch.setter
    def health_check_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "health_check_switch", value)

    @property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        HTTP Status Code. The default is 26 and value range is 2-60.
        """
        return pulumi.get(self, "health_check_timeout")

    @health_check_timeout.setter
    def health_check_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_timeout", value)

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> Optional[pulumi.Input[int]]:
        """
        Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @health_check_unhealth_num.setter
    def health_check_unhealth_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "health_check_unhealth_num", value)

    @property
    @pulumi.getter(name="lbType")
    def lb_type(self) -> Optional[pulumi.Input[int]]:
        """
        LB type of the rule. Valid values: `1`, `2`. `1` for weight cycling and `2` for IP hash.
        """
        return pulumi.get(self, "lb_type")

    @lb_type.setter
    def lb_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lb_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the resource that the layer 4 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the layer 4 rule.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="sPort")
    def s_port(self) -> Optional[pulumi.Input[int]]:
        """
        The source port of the L4 rule.
        """
        return pulumi.get(self, "s_port")

    @s_port.setter
    def s_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "s_port", value)

    @property
    @pulumi.getter(name="sessionSwitch")
    def session_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate that the session will keep or not, and default value is `false`.
        """
        return pulumi.get(self, "session_switch")

    @session_switch.setter
    def session_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_switch", value)

    @property
    @pulumi.getter(name="sessionTime")
    def session_time(self) -> Optional[pulumi.Input[int]]:
        """
        Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
        """
        return pulumi.get(self, "session_time")

    @session_time.setter
    def session_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_time", value)

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]]]:
        """
        Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
        """
        return pulumi.get(self, "source_lists")

    @source_lists.setter
    def source_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['L4RuleSourceListArgs']]]]):
        pulumi.set(self, "source_lists", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[int]]:
        """
        Source type, `1` for source of host, `2` for source of IP.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_type", value)


class L4Rule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 d_port: Optional[pulumi.Input[int]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_timeout: Optional[pulumi.Input[int]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 s_port: Optional[pulumi.Input[int]] = None,
                 session_switch: Optional[pulumi.Input[bool]] = None,
                 session_time: Optional[pulumi.Input[int]] = None,
                 source_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['L4RuleSourceListArgs']]]]] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Use this resource to create dayu layer 4 rule

        > **NOTE:** This resource only support resource Anti-DDoS of type `bgpip` and `net`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        test_rule = tencentcloud.dayu.L4Rule("testRule",
            d_port=60,
            health_check_health_num=5,
            health_check_interval=35,
            health_check_switch=True,
            health_check_timeout=30,
            health_check_unhealth_num=10,
            protocol="TCP",
            resource_id="bgpip-00000294",
            resource_type="bgpip",
            s_port=80,
            session_switch=False,
            session_time=300,
            source_lists=[
                tencentcloud.dayu.L4RuleSourceListArgs(
                    source="1.1.1.1",
                    weight=100,
                ),
                tencentcloud.dayu.L4RuleSourceListArgs(
                    source="2.2.2.2",
                    weight=50,
                ),
            ],
            source_type=2)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] d_port: The destination port of the L4 rule.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
        :param pulumi.Input[int] health_check_interval: Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
        :param pulumi.Input[int] health_check_timeout: HTTP Status Code. The default is 26 and value range is 2-60.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
        :param pulumi.Input[str] name: Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 4 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[int] s_port: The source port of the L4 rule.
        :param pulumi.Input[bool] session_switch: Indicate that the session will keep or not, and default value is `false`.
        :param pulumi.Input[int] session_time: Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['L4RuleSourceListArgs']]]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: L4RuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create dayu layer 4 rule

        > **NOTE:** This resource only support resource Anti-DDoS of type `bgpip` and `net`

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        test_rule = tencentcloud.dayu.L4Rule("testRule",
            d_port=60,
            health_check_health_num=5,
            health_check_interval=35,
            health_check_switch=True,
            health_check_timeout=30,
            health_check_unhealth_num=10,
            protocol="TCP",
            resource_id="bgpip-00000294",
            resource_type="bgpip",
            s_port=80,
            session_switch=False,
            session_time=300,
            source_lists=[
                tencentcloud.dayu.L4RuleSourceListArgs(
                    source="1.1.1.1",
                    weight=100,
                ),
                tencentcloud.dayu.L4RuleSourceListArgs(
                    source="2.2.2.2",
                    weight=50,
                ),
            ],
            source_type=2)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param L4RuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(L4RuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 d_port: Optional[pulumi.Input[int]] = None,
                 health_check_health_num: Optional[pulumi.Input[int]] = None,
                 health_check_interval: Optional[pulumi.Input[int]] = None,
                 health_check_switch: Optional[pulumi.Input[bool]] = None,
                 health_check_timeout: Optional[pulumi.Input[int]] = None,
                 health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 s_port: Optional[pulumi.Input[int]] = None,
                 session_switch: Optional[pulumi.Input[bool]] = None,
                 session_time: Optional[pulumi.Input[int]] = None,
                 source_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['L4RuleSourceListArgs']]]]] = None,
                 source_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = L4RuleArgs.__new__(L4RuleArgs)

            if d_port is None and not opts.urn:
                raise TypeError("Missing required property 'd_port'")
            __props__.__dict__["d_port"] = d_port
            __props__.__dict__["health_check_health_num"] = health_check_health_num
            __props__.__dict__["health_check_interval"] = health_check_interval
            __props__.__dict__["health_check_switch"] = health_check_switch
            __props__.__dict__["health_check_timeout"] = health_check_timeout
            __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
            __props__.__dict__["name"] = name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if resource_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_id'")
            __props__.__dict__["resource_id"] = resource_id
            if resource_type is None and not opts.urn:
                raise TypeError("Missing required property 'resource_type'")
            __props__.__dict__["resource_type"] = resource_type
            if s_port is None and not opts.urn:
                raise TypeError("Missing required property 's_port'")
            __props__.__dict__["s_port"] = s_port
            __props__.__dict__["session_switch"] = session_switch
            __props__.__dict__["session_time"] = session_time
            if source_lists is None and not opts.urn:
                raise TypeError("Missing required property 'source_lists'")
            __props__.__dict__["source_lists"] = source_lists
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["lb_type"] = None
            __props__.__dict__["rule_id"] = None
        super(L4Rule, __self__).__init__(
            'tencentcloud:Dayu/l4Rule:L4Rule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            d_port: Optional[pulumi.Input[int]] = None,
            health_check_health_num: Optional[pulumi.Input[int]] = None,
            health_check_interval: Optional[pulumi.Input[int]] = None,
            health_check_switch: Optional[pulumi.Input[bool]] = None,
            health_check_timeout: Optional[pulumi.Input[int]] = None,
            health_check_unhealth_num: Optional[pulumi.Input[int]] = None,
            lb_type: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            rule_id: Optional[pulumi.Input[str]] = None,
            s_port: Optional[pulumi.Input[int]] = None,
            session_switch: Optional[pulumi.Input[bool]] = None,
            session_time: Optional[pulumi.Input[int]] = None,
            source_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['L4RuleSourceListArgs']]]]] = None,
            source_type: Optional[pulumi.Input[int]] = None) -> 'L4Rule':
        """
        Get an existing L4Rule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] d_port: The destination port of the L4 rule.
        :param pulumi.Input[int] health_check_health_num: Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
        :param pulumi.Input[int] health_check_interval: Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
        :param pulumi.Input[bool] health_check_switch: Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
        :param pulumi.Input[int] health_check_timeout: HTTP Status Code. The default is 26 and value range is 2-60.
        :param pulumi.Input[int] health_check_unhealth_num: Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
        :param pulumi.Input[int] lb_type: LB type of the rule. Valid values: `1`, `2`. `1` for weight cycling and `2` for IP hash.
        :param pulumi.Input[str] name: Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
        :param pulumi.Input[str] protocol: Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
        :param pulumi.Input[str] resource_id: ID of the resource that the layer 4 rule works for.
        :param pulumi.Input[str] resource_type: Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        :param pulumi.Input[str] rule_id: ID of the layer 4 rule.
        :param pulumi.Input[int] s_port: The source port of the L4 rule.
        :param pulumi.Input[bool] session_switch: Indicate that the session will keep or not, and default value is `false`.
        :param pulumi.Input[int] session_time: Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['L4RuleSourceListArgs']]]] source_lists: Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
        :param pulumi.Input[int] source_type: Source type, `1` for source of host, `2` for source of IP.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _L4RuleState.__new__(_L4RuleState)

        __props__.__dict__["d_port"] = d_port
        __props__.__dict__["health_check_health_num"] = health_check_health_num
        __props__.__dict__["health_check_interval"] = health_check_interval
        __props__.__dict__["health_check_switch"] = health_check_switch
        __props__.__dict__["health_check_timeout"] = health_check_timeout
        __props__.__dict__["health_check_unhealth_num"] = health_check_unhealth_num
        __props__.__dict__["lb_type"] = lb_type
        __props__.__dict__["name"] = name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["s_port"] = s_port
        __props__.__dict__["session_switch"] = session_switch
        __props__.__dict__["session_time"] = session_time
        __props__.__dict__["source_lists"] = source_lists
        __props__.__dict__["source_type"] = source_type
        return L4Rule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dPort")
    def d_port(self) -> pulumi.Output[int]:
        """
        The destination port of the L4 rule.
        """
        return pulumi.get(self, "d_port")

    @property
    @pulumi.getter(name="healthCheckHealthNum")
    def health_check_health_num(self) -> pulumi.Output[int]:
        """
        Health threshold of health check, and the default is 3. If a success result is returned for the health check 3 consecutive times, indicates that the forwarding is normal. The value range is 2-10.
        """
        return pulumi.get(self, "health_check_health_num")

    @property
    @pulumi.getter(name="healthCheckInterval")
    def health_check_interval(self) -> pulumi.Output[int]:
        """
        Interval time of health check. The value range is 10-60 sec, and the default is 15 sec.
        """
        return pulumi.get(self, "health_check_interval")

    @property
    @pulumi.getter(name="healthCheckSwitch")
    def health_check_switch(self) -> pulumi.Output[bool]:
        """
        Indicates whether health check is enabled. The default is `false`. Only valid when source list has more than one source item.
        """
        return pulumi.get(self, "health_check_switch")

    @property
    @pulumi.getter(name="healthCheckTimeout")
    def health_check_timeout(self) -> pulumi.Output[int]:
        """
        HTTP Status Code. The default is 26 and value range is 2-60.
        """
        return pulumi.get(self, "health_check_timeout")

    @property
    @pulumi.getter(name="healthCheckUnhealthNum")
    def health_check_unhealth_num(self) -> pulumi.Output[int]:
        """
        Unhealthy threshold of health check, and the default is 3. If the unhealthy result is returned 3 consecutive times, indicates that the forwarding is abnormal. The value range is 2-10.
        """
        return pulumi.get(self, "health_check_unhealth_num")

    @property
    @pulumi.getter(name="lbType")
    def lb_type(self) -> pulumi.Output[int]:
        """
        LB type of the rule. Valid values: `1`, `2`. `1` for weight cycling and `2` for IP hash.
        """
        return pulumi.get(self, "lb_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the rule. When the `resource_type` is `net`, this field should be set with valid domain.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol of the rule. Valid values: `http`, `https`. When `source_type` is 1(host source), the value of this field can only set with `tcp`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        """
        ID of the resource that the layer 4 rule works for.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Type of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[str]:
        """
        ID of the layer 4 rule.
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="sPort")
    def s_port(self) -> pulumi.Output[int]:
        """
        The source port of the L4 rule.
        """
        return pulumi.get(self, "s_port")

    @property
    @pulumi.getter(name="sessionSwitch")
    def session_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate that the session will keep or not, and default value is `false`.
        """
        return pulumi.get(self, "session_switch")

    @property
    @pulumi.getter(name="sessionTime")
    def session_time(self) -> pulumi.Output[int]:
        """
        Session keep time, only valid when `session_switch` is true, the available value ranges from 1 to 300 and unit is second.
        """
        return pulumi.get(self, "session_time")

    @property
    @pulumi.getter(name="sourceLists")
    def source_lists(self) -> pulumi.Output[Sequence['outputs.L4RuleSourceList']]:
        """
        Source list of the rule, it can be a set of ip sources or a set of domain sources. The number of items ranges from 1 to 20.
        """
        return pulumi.get(self, "source_lists")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[int]:
        """
        Source type, `1` for source of host, `2` for source of IP.
        """
        return pulumi.get(self, "source_type")

