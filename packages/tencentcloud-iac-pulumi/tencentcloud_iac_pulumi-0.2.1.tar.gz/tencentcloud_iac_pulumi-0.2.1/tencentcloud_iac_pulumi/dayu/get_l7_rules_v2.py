# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetL7RulesV2Result',
    'AwaitableGetL7RulesV2Result',
    'get_l7_rules_v2',
    'get_l7_rules_v2_output',
]

@pulumi.output_type
class GetL7RulesV2Result:
    """
    A collection of values returned by getL7RulesV2.
    """
    def __init__(__self__, business=None, domain=None, id=None, ip=None, limit=None, lists=None, offset=None, protocol=None, result_output_file=None):
        if business and not isinstance(business, str):
            raise TypeError("Expected argument 'business' to be a str")
        pulumi.set(__self__, "business", business)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def business(self) -> str:
        return pulumi.get(self, "business")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Domain of resource.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        Ip of the resource.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        warnings.warn("""It has been deprecated from version 1.81.21.""", DeprecationWarning)
        pulumi.log.warn("""limit is deprecated: It has been deprecated from version 1.81.21.""")

        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetL7RulesV2ListResult']:
        """
        A list of layer 4 rules. Each element contains the following attributes:
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        warnings.warn("""It has been deprecated from version 1.81.21.""", DeprecationWarning)
        pulumi.log.warn("""offset is deprecated: It has been deprecated from version 1.81.21.""")

        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol of resource, value range [`http`, `https`].
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetL7RulesV2Result(GetL7RulesV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetL7RulesV2Result(
            business=self.business,
            domain=self.domain,
            id=self.id,
            ip=self.ip,
            limit=self.limit,
            lists=self.lists,
            offset=self.offset,
            protocol=self.protocol,
            result_output_file=self.result_output_file)


def get_l7_rules_v2(business: Optional[str] = None,
                    domain: Optional[str] = None,
                    ip: Optional[str] = None,
                    limit: Optional[int] = None,
                    offset: Optional[int] = None,
                    protocol: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetL7RulesV2Result:
    """
    Use this data source to query new dayu layer 7 rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    test = tencentcloud.Dayu.get_l7_rules_v2(business="bgpip",
        domain="qq.com",
        protocol="https")
    ```
    <!--End PulumiCodeChooser -->


    :param str business: Type of the resource that the layer 4 rule works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
    :param str domain: Domain of resource.
    :param str ip: Ip of the resource.
    :param int limit: It has been deprecated from version 1.81.21. The number of pages, default is `10`.
    :param int offset: It has been deprecated from version 1.81.21. The page start offset, default is `0`.
    :param str protocol: Protocol of resource, value range [`http`, `https`].
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['business'] = business
    __args__['domain'] = domain
    __args__['ip'] = ip
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['protocol'] = protocol
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dayu/getL7RulesV2:getL7RulesV2', __args__, opts=opts, typ=GetL7RulesV2Result).value

    return AwaitableGetL7RulesV2Result(
        business=pulumi.get(__ret__, 'business'),
        domain=pulumi.get(__ret__, 'domain'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        limit=pulumi.get(__ret__, 'limit'),
        lists=pulumi.get(__ret__, 'lists'),
        offset=pulumi.get(__ret__, 'offset'),
        protocol=pulumi.get(__ret__, 'protocol'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_l7_rules_v2)
def get_l7_rules_v2_output(business: Optional[pulumi.Input[str]] = None,
                           domain: Optional[pulumi.Input[Optional[str]]] = None,
                           ip: Optional[pulumi.Input[Optional[str]]] = None,
                           limit: Optional[pulumi.Input[Optional[int]]] = None,
                           offset: Optional[pulumi.Input[Optional[int]]] = None,
                           protocol: Optional[pulumi.Input[Optional[str]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetL7RulesV2Result]:
    """
    Use this data source to query new dayu layer 7 rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    test = tencentcloud.Dayu.get_l7_rules_v2(business="bgpip",
        domain="qq.com",
        protocol="https")
    ```
    <!--End PulumiCodeChooser -->


    :param str business: Type of the resource that the layer 4 rule works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
    :param str domain: Domain of resource.
    :param str ip: Ip of the resource.
    :param int limit: It has been deprecated from version 1.81.21. The number of pages, default is `10`.
    :param int offset: It has been deprecated from version 1.81.21. The page start offset, default is `0`.
    :param str protocol: Protocol of resource, value range [`http`, `https`].
    :param str result_output_file: Used to save results.
    """
    ...
