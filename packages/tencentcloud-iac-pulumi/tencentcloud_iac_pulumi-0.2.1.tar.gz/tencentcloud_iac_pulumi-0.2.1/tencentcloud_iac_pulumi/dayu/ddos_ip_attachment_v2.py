# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DdosIpAttachmentV2Args', 'DdosIpAttachmentV2']

@pulumi.input_type
class DdosIpAttachmentV2Args:
    def __init__(__self__, *,
                 bgp_instance_id: pulumi.Input[str],
                 bound_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]]] = None):
        """
        The set of arguments for constructing a DdosIpAttachmentV2 resource.
        :param pulumi.Input[str] bgp_instance_id: Anti-DDoS instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]] bound_ip_lists: Array of IPs to bind to the Anti-DDoS instance. For Anti-DDoS Pro Single IP instance, the array contains only one IP. If there are no IPs to bind, it is empty; however, either BoundDevList or UnBoundDevList must not be empty.
        """
        pulumi.set(__self__, "bgp_instance_id", bgp_instance_id)
        if bound_ip_lists is not None:
            pulumi.set(__self__, "bound_ip_lists", bound_ip_lists)

    @property
    @pulumi.getter(name="bgpInstanceId")
    def bgp_instance_id(self) -> pulumi.Input[str]:
        """
        Anti-DDoS instance ID.
        """
        return pulumi.get(self, "bgp_instance_id")

    @bgp_instance_id.setter
    def bgp_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "bgp_instance_id", value)

    @property
    @pulumi.getter(name="boundIpLists")
    def bound_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]]]:
        """
        Array of IPs to bind to the Anti-DDoS instance. For Anti-DDoS Pro Single IP instance, the array contains only one IP. If there are no IPs to bind, it is empty; however, either BoundDevList or UnBoundDevList must not be empty.
        """
        return pulumi.get(self, "bound_ip_lists")

    @bound_ip_lists.setter
    def bound_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]]]):
        pulumi.set(self, "bound_ip_lists", value)


@pulumi.input_type
class _DdosIpAttachmentV2State:
    def __init__(__self__, *,
                 bgp_instance_id: Optional[pulumi.Input[str]] = None,
                 bound_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]]] = None):
        """
        Input properties used for looking up and filtering DdosIpAttachmentV2 resources.
        :param pulumi.Input[str] bgp_instance_id: Anti-DDoS instance ID.
        :param pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]] bound_ip_lists: Array of IPs to bind to the Anti-DDoS instance. For Anti-DDoS Pro Single IP instance, the array contains only one IP. If there are no IPs to bind, it is empty; however, either BoundDevList or UnBoundDevList must not be empty.
        """
        if bgp_instance_id is not None:
            pulumi.set(__self__, "bgp_instance_id", bgp_instance_id)
        if bound_ip_lists is not None:
            pulumi.set(__self__, "bound_ip_lists", bound_ip_lists)

    @property
    @pulumi.getter(name="bgpInstanceId")
    def bgp_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Anti-DDoS instance ID.
        """
        return pulumi.get(self, "bgp_instance_id")

    @bgp_instance_id.setter
    def bgp_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bgp_instance_id", value)

    @property
    @pulumi.getter(name="boundIpLists")
    def bound_ip_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]]]:
        """
        Array of IPs to bind to the Anti-DDoS instance. For Anti-DDoS Pro Single IP instance, the array contains only one IP. If there are no IPs to bind, it is empty; however, either BoundDevList or UnBoundDevList must not be empty.
        """
        return pulumi.get(self, "bound_ip_lists")

    @bound_ip_lists.setter
    def bound_ip_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DdosIpAttachmentV2BoundIpListArgs']]]]):
        pulumi.set(self, "bound_ip_lists", value)


class DdosIpAttachmentV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bgp_instance_id: Optional[pulumi.Input[str]] = None,
                 bound_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdosIpAttachmentV2BoundIpListArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a antiddos ip. Only support for bgp-multip.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bgp_instance_id: Anti-DDoS instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdosIpAttachmentV2BoundIpListArgs']]]] bound_ip_lists: Array of IPs to bind to the Anti-DDoS instance. For Anti-DDoS Pro Single IP instance, the array contains only one IP. If there are no IPs to bind, it is empty; however, either BoundDevList or UnBoundDevList must not be empty.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DdosIpAttachmentV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a antiddos ip. Only support for bgp-multip.

        :param str resource_name: The name of the resource.
        :param DdosIpAttachmentV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DdosIpAttachmentV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bgp_instance_id: Optional[pulumi.Input[str]] = None,
                 bound_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdosIpAttachmentV2BoundIpListArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DdosIpAttachmentV2Args.__new__(DdosIpAttachmentV2Args)

            if bgp_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'bgp_instance_id'")
            __props__.__dict__["bgp_instance_id"] = bgp_instance_id
            __props__.__dict__["bound_ip_lists"] = bound_ip_lists
        super(DdosIpAttachmentV2, __self__).__init__(
            'tencentcloud:Dayu/ddosIpAttachmentV2:DdosIpAttachmentV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bgp_instance_id: Optional[pulumi.Input[str]] = None,
            bound_ip_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdosIpAttachmentV2BoundIpListArgs']]]]] = None) -> 'DdosIpAttachmentV2':
        """
        Get an existing DdosIpAttachmentV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bgp_instance_id: Anti-DDoS instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DdosIpAttachmentV2BoundIpListArgs']]]] bound_ip_lists: Array of IPs to bind to the Anti-DDoS instance. For Anti-DDoS Pro Single IP instance, the array contains only one IP. If there are no IPs to bind, it is empty; however, either BoundDevList or UnBoundDevList must not be empty.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DdosIpAttachmentV2State.__new__(_DdosIpAttachmentV2State)

        __props__.__dict__["bgp_instance_id"] = bgp_instance_id
        __props__.__dict__["bound_ip_lists"] = bound_ip_lists
        return DdosIpAttachmentV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bgpInstanceId")
    def bgp_instance_id(self) -> pulumi.Output[str]:
        """
        Anti-DDoS instance ID.
        """
        return pulumi.get(self, "bgp_instance_id")

    @property
    @pulumi.getter(name="boundIpLists")
    def bound_ip_lists(self) -> pulumi.Output[Optional[Sequence['outputs.DdosIpAttachmentV2BoundIpList']]]:
        """
        Array of IPs to bind to the Anti-DDoS instance. For Anti-DDoS Pro Single IP instance, the array contains only one IP. If there are no IPs to bind, it is empty; however, either BoundDevList or UnBoundDevList must not be empty.
        """
        return pulumi.get(self, "bound_ip_lists")

