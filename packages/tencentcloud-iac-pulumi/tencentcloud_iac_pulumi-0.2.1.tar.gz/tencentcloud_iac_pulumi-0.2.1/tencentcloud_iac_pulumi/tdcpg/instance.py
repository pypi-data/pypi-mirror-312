# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 cpu: pulumi.Input[int],
                 memory: pulumi.Input[int],
                 instance_name: Optional[pulumi.Input[str]] = None,
                 operation_timing: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[str] operation_timing: operation timing, optional value is IMMEDIATE or MAINTAIN_PERIOD.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "memory", memory)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if operation_timing is not None:
            pulumi.set(__self__, "operation_timing", operation_timing)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[int]:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        memory size.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="operationTiming")
    def operation_timing(self) -> Optional[pulumi.Input[str]]:
        """
        operation timing, optional value is IMMEDIATE or MAINTAIN_PERIOD.
        """
        return pulumi.get(self, "operation_timing")

    @operation_timing.setter
    def operation_timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_timing", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 operation_timing: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] operation_timing: operation timing, optional value is IMMEDIATE or MAINTAIN_PERIOD.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if operation_timing is not None:
            pulumi.set(__self__, "operation_timing", operation_timing)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        memory size.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="operationTiming")
    def operation_timing(self) -> Optional[pulumi.Input[str]]:
        """
        operation timing, optional value is IMMEDIATE or MAINTAIN_PERIOD.
        """
        return pulumi.get(self, "operation_timing")

    @operation_timing.setter
    def operation_timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_timing", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 operation_timing: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tdcpg instance.

        > **NOTE:** This resource is still in internal testing. To experience its functions, you need to apply for a whitelist from Tencent Cloud.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance1 = tencentcloud.tdcpg.Instance("instance1",
            cluster_id="cluster_id",
            cpu=1,
            instance_name="instance_name",
            memory=1)
        instance2 = tencentcloud.tdcpg.Instance("instance2",
            cluster_id="cluster_id",
            cpu=1,
            instance_name="instance_name",
            memory=2,
            operation_timing="IMMEDIATE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tdcpg instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdcpg/instance:Instance instance cluster_id#instance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] operation_timing: operation timing, optional value is IMMEDIATE or MAINTAIN_PERIOD.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tdcpg instance.

        > **NOTE:** This resource is still in internal testing. To experience its functions, you need to apply for a whitelist from Tencent Cloud.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance1 = tencentcloud.tdcpg.Instance("instance1",
            cluster_id="cluster_id",
            cpu=1,
            instance_name="instance_name",
            memory=1)
        instance2 = tencentcloud.tdcpg.Instance("instance2",
            cluster_id="cluster_id",
            cpu=1,
            instance_name="instance_name",
            memory=2,
            operation_timing="IMMEDIATE")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tdcpg instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdcpg/instance:Instance instance cluster_id#instance_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 operation_timing: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["instance_name"] = instance_name
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            __props__.__dict__["operation_timing"] = operation_timing
        super(Instance, __self__).__init__(
            'tencentcloud:Tdcpg/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            operation_timing: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: cluster id.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] operation_timing: operation timing, optional value is IMMEDIATE or MAINTAIN_PERIOD.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["memory"] = memory
        __props__.__dict__["operation_timing"] = operation_timing
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[Optional[str]]:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        memory size.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="operationTiming")
    def operation_timing(self) -> pulumi.Output[Optional[str]]:
        """
        operation timing, optional value is IMMEDIATE or MAINTAIN_PERIOD.
        """
        return pulumi.get(self, "operation_timing")

