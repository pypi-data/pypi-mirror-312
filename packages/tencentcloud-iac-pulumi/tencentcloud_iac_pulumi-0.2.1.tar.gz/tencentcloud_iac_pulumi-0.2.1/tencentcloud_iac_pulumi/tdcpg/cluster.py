# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ClusterArgs', 'Cluster']

@pulumi.input_type
class ClusterArgs:
    def __init__(__self__, *,
                 cpu: pulumi.Input[int],
                 master_user_password: pulumi.Input[str],
                 memory: pulumi.Input[int],
                 pay_mode: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Cluster resource.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[str] master_user_password: user password.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] pay_mode: pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
        :param pulumi.Input[str] subnet_id: subnet id.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[str] zone: available zone.
        :param pulumi.Input[str] cluster_name: cluster name.
        :param pulumi.Input[str] db_version: community version number, default to 10.17.
        :param pulumi.Input[int] instance_count: instance count.
        :param pulumi.Input[int] period: purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
        :param pulumi.Input[int] project_id: project id, default to 0, means default project.
        :param pulumi.Input[int] storage: max storage, the unit is GB.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "master_user_password", master_user_password)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Input[int]:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: pulumi.Input[int]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> pulumi.Input[str]:
        """
        user password.
        """
        return pulumi.get(self, "master_user_password")

    @master_user_password.setter
    def master_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_user_password", value)

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Input[int]:
        """
        memory size.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: pulumi.Input[int]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Input[str]:
        """
        pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        available zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        community version number, default to 10.17.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        instance count.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project id, default to 0, means default project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        max storage, the unit is GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class _ClusterState:
    def __init__(__self__, *,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 pay_mode: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cluster resources.
        :param pulumi.Input[str] cluster_name: cluster name.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[str] db_version: community version number, default to 10.17.
        :param pulumi.Input[int] instance_count: instance count.
        :param pulumi.Input[str] master_user_password: user password.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] pay_mode: pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
        :param pulumi.Input[int] period: purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
        :param pulumi.Input[int] project_id: project id, default to 0, means default project.
        :param pulumi.Input[int] storage: max storage, the unit is GB.
        :param pulumi.Input[str] subnet_id: subnet id.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[str] zone: available zone.
        """
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if db_version is not None:
            pulumi.set(__self__, "db_version", db_version)
        if instance_count is not None:
            pulumi.set(__self__, "instance_count", instance_count)
        if master_user_password is not None:
            pulumi.set(__self__, "master_user_password", master_user_password)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> Optional[pulumi.Input[str]]:
        """
        community version number, default to 10.17.
        """
        return pulumi.get(self, "db_version")

    @db_version.setter
    def db_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_version", value)

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[pulumi.Input[int]]:
        """
        instance count.
        """
        return pulumi.get(self, "instance_count")

    @instance_count.setter
    def instance_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "instance_count", value)

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> Optional[pulumi.Input[str]]:
        """
        user password.
        """
        return pulumi.get(self, "master_user_password")

    @master_user_password.setter
    def master_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_user_password", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        """
        memory size.
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[str]]:
        """
        pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        project id, default to 0, means default project.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[int]]:
        """
        max storage, the unit is GB.
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        available zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Cluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 pay_mode: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tdcpg cluster.

        > **NOTE:** This resource is still in internal testing. To experience its functions, you need to apply for a whitelist from Tencent Cloud.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster = tencentcloud.tdcpg.Cluster("cluster",
            cluster_name="cluster_name",
            cpu=1,
            db_version="10.17",
            instance_count=1,
            master_user_password="",
            memory=1,
            pay_mode="POSTPAID_BY_HOUR",
            period=1,
            project_id=0,
            subnet_id="subnet_id",
            vpc_id="vpc_id",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tdcpg cluster can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdcpg/cluster:Cluster cluster cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: cluster name.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[str] db_version: community version number, default to 10.17.
        :param pulumi.Input[int] instance_count: instance count.
        :param pulumi.Input[str] master_user_password: user password.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] pay_mode: pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
        :param pulumi.Input[int] period: purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
        :param pulumi.Input[int] project_id: project id, default to 0, means default project.
        :param pulumi.Input[int] storage: max storage, the unit is GB.
        :param pulumi.Input[str] subnet_id: subnet id.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[str] zone: available zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tdcpg cluster.

        > **NOTE:** This resource is still in internal testing. To experience its functions, you need to apply for a whitelist from Tencent Cloud.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cluster = tencentcloud.tdcpg.Cluster("cluster",
            cluster_name="cluster_name",
            cpu=1,
            db_version="10.17",
            instance_count=1,
            master_user_password="",
            memory=1,
            pay_mode="POSTPAID_BY_HOUR",
            period=1,
            project_id=0,
            subnet_id="subnet_id",
            vpc_id="vpc_id",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tdcpg cluster can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdcpg/cluster:Cluster cluster cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param ClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 db_version: Optional[pulumi.Input[str]] = None,
                 instance_count: Optional[pulumi.Input[int]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 pay_mode: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClusterArgs.__new__(ClusterArgs)

            __props__.__dict__["cluster_name"] = cluster_name
            if cpu is None and not opts.urn:
                raise TypeError("Missing required property 'cpu'")
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["db_version"] = db_version
            __props__.__dict__["instance_count"] = instance_count
            if master_user_password is None and not opts.urn:
                raise TypeError("Missing required property 'master_user_password'")
            __props__.__dict__["master_user_password"] = None if master_user_password is None else pulumi.Output.secret(master_user_password)
            if memory is None and not opts.urn:
                raise TypeError("Missing required property 'memory'")
            __props__.__dict__["memory"] = memory
            if pay_mode is None and not opts.urn:
                raise TypeError("Missing required property 'pay_mode'")
            __props__.__dict__["pay_mode"] = pay_mode
            __props__.__dict__["period"] = period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["storage"] = storage
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["masterUserPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Cluster, __self__).__init__(
            'tencentcloud:Tdcpg/cluster:Cluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            db_version: Optional[pulumi.Input[str]] = None,
            instance_count: Optional[pulumi.Input[int]] = None,
            master_user_password: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            pay_mode: Optional[pulumi.Input[str]] = None,
            period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            storage: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Cluster':
        """
        Get an existing Cluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: cluster name.
        :param pulumi.Input[int] cpu: cpu cores.
        :param pulumi.Input[str] db_version: community version number, default to 10.17.
        :param pulumi.Input[int] instance_count: instance count.
        :param pulumi.Input[str] master_user_password: user password.
        :param pulumi.Input[int] memory: memory size.
        :param pulumi.Input[str] pay_mode: pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
        :param pulumi.Input[int] period: purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
        :param pulumi.Input[int] project_id: project id, default to 0, means default project.
        :param pulumi.Input[int] storage: max storage, the unit is GB.
        :param pulumi.Input[str] subnet_id: subnet id.
        :param pulumi.Input[str] vpc_id: vpc id.
        :param pulumi.Input[str] zone: available zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ClusterState.__new__(_ClusterState)

        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["db_version"] = db_version
        __props__.__dict__["instance_count"] = instance_count
        __props__.__dict__["master_user_password"] = master_user_password
        __props__.__dict__["memory"] = memory
        __props__.__dict__["pay_mode"] = pay_mode
        __props__.__dict__["period"] = period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["storage"] = storage
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone"] = zone
        return Cluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[Optional[str]]:
        """
        cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        cpu cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="dbVersion")
    def db_version(self) -> pulumi.Output[Optional[str]]:
        """
        community version number, default to 10.17.
        """
        return pulumi.get(self, "db_version")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> pulumi.Output[Optional[int]]:
        """
        instance count.
        """
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> pulumi.Output[str]:
        """
        user password.
        """
        return pulumi.get(self, "master_user_password")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[int]:
        """
        memory size.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Output[str]:
        """
        pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[int]:
        """
        purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        project id, default to 0, means default project.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[int]:
        """
        max storage, the unit is GB.
        """
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        available zone.
        """
        return pulumi.get(self, "zone")

