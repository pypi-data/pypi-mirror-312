# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetClustersResult',
    'AwaitableGetClustersResult',
    'get_clusters',
    'get_clusters_output',
]

@pulumi.output_type
class GetClustersResult:
    """
    A collection of values returned by getClusters.
    """
    def __init__(__self__, cluster_id=None, cluster_name=None, id=None, lists=None, pay_mode=None, project_id=None, result_output_file=None, status=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if pay_mode and not isinstance(pay_mode, str):
            raise TypeError("Expected argument 'pay_mode' to be a str")
        pulumi.set(__self__, "pay_mode", pay_mode)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[str]:
        """
        cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetClustersListResult']:
        """
        cluster list.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[str]:
        """
        pay mode.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status.
        """
        return pulumi.get(self, "status")


class AwaitableGetClustersResult(GetClustersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClustersResult(
            cluster_id=self.cluster_id,
            cluster_name=self.cluster_name,
            id=self.id,
            lists=self.lists,
            pay_mode=self.pay_mode,
            project_id=self.project_id,
            result_output_file=self.result_output_file,
            status=self.status)


def get_clusters(cluster_id: Optional[str] = None,
                 cluster_name: Optional[str] = None,
                 pay_mode: Optional[str] = None,
                 project_id: Optional[int] = None,
                 result_output_file: Optional[str] = None,
                 status: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClustersResult:
    """
    Use this data source to query detailed information of tdcpg clusters.

    > **NOTE:** This data source is still in internal testing. To experience its functions, you need to apply for a whitelist from Tencent Cloud.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    clusters = tencentcloud.Tdcpg.get_clusters(cluster_id="",
        cluster_name="",
        pay_mode="",
        project_id="",
        status="")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: cluster id.
    :param str cluster_name: cluster name.
    :param str pay_mode: pay mode.
    :param int project_id: project id, default to 0, means default project.
    :param str result_output_file: Used to save results.
    :param str status: cluster status.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['clusterName'] = cluster_name
    __args__['payMode'] = pay_mode
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tdcpg/getClusters:getClusters', __args__, opts=opts, typ=GetClustersResult).value

    return AwaitableGetClustersResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        pay_mode=pulumi.get(__ret__, 'pay_mode'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_clusters)
def get_clusters_output(cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                        cluster_name: Optional[pulumi.Input[Optional[str]]] = None,
                        pay_mode: Optional[pulumi.Input[Optional[str]]] = None,
                        project_id: Optional[pulumi.Input[Optional[int]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        status: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClustersResult]:
    """
    Use this data source to query detailed information of tdcpg clusters.

    > **NOTE:** This data source is still in internal testing. To experience its functions, you need to apply for a whitelist from Tencent Cloud.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    clusters = tencentcloud.Tdcpg.get_clusters(cluster_id="",
        cluster_name="",
        pay_mode="",
        project_id="",
        status="")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: cluster id.
    :param str cluster_name: cluster name.
    :param str pay_mode: pay mode.
    :param int project_id: project id, default to 0, means default project.
    :param str result_output_file: Used to save results.
    :param str status: cluster status.
    """
    ...
