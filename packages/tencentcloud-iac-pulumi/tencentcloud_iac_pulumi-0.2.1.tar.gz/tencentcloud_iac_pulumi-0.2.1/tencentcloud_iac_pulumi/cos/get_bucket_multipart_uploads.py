# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBucketMultipartUploadsResult',
    'AwaitableGetBucketMultipartUploadsResult',
    'get_bucket_multipart_uploads',
    'get_bucket_multipart_uploads_output',
]

@pulumi.output_type
class GetBucketMultipartUploadsResult:
    """
    A collection of values returned by getBucketMultipartUploads.
    """
    def __init__(__self__, bucket=None, delimiter=None, encoding_type=None, id=None, prefix=None, result_output_file=None, uploads=None):
        if bucket and not isinstance(bucket, str):
            raise TypeError("Expected argument 'bucket' to be a str")
        pulumi.set(__self__, "bucket", bucket)
        if delimiter and not isinstance(delimiter, str):
            raise TypeError("Expected argument 'delimiter' to be a str")
        pulumi.set(__self__, "delimiter", delimiter)
        if encoding_type and not isinstance(encoding_type, str):
            raise TypeError("Expected argument 'encoding_type' to be a str")
        pulumi.set(__self__, "encoding_type", encoding_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if uploads and not isinstance(uploads, list):
            raise TypeError("Expected argument 'uploads' to be a list")
        pulumi.set(__self__, "uploads", uploads)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="encodingType")
    def encoding_type(self) -> Optional[str]:
        return pulumi.get(self, "encoding_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def uploads(self) -> Sequence['outputs.GetBucketMultipartUploadsUploadResult']:
        """
        Information for each Upload.
        """
        return pulumi.get(self, "uploads")


class AwaitableGetBucketMultipartUploadsResult(GetBucketMultipartUploadsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBucketMultipartUploadsResult(
            bucket=self.bucket,
            delimiter=self.delimiter,
            encoding_type=self.encoding_type,
            id=self.id,
            prefix=self.prefix,
            result_output_file=self.result_output_file,
            uploads=self.uploads)


def get_bucket_multipart_uploads(bucket: Optional[str] = None,
                                 delimiter: Optional[str] = None,
                                 encoding_type: Optional[str] = None,
                                 prefix: Optional[str] = None,
                                 result_output_file: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBucketMultipartUploadsResult:
    """
    Use this data source to query the COS bucket multipart uploads.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cos_bucket_multipart_uploads = tencentcloud.Cos.get_bucket_multipart_uploads(bucket="xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str bucket: Bucket.
    :param str delimiter: The delimiter is a symbol, and the Object name contains the Object between the specified prefix and the first occurrence of delimiter characters as a set of elements: common prefix. If there is no prefix, start from the beginning of the path.
    :param str encoding_type: Specifies the encoding format of the return value. Legal value: url.
    :param str prefix: The returned Object key must be prefixed with Prefix. Note that when using the prefix query, the returned key still contains Prefix.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['bucket'] = bucket
    __args__['delimiter'] = delimiter
    __args__['encodingType'] = encoding_type
    __args__['prefix'] = prefix
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Cos/getBucketMultipartUploads:getBucketMultipartUploads', __args__, opts=opts, typ=GetBucketMultipartUploadsResult).value

    return AwaitableGetBucketMultipartUploadsResult(
        bucket=pulumi.get(__ret__, 'bucket'),
        delimiter=pulumi.get(__ret__, 'delimiter'),
        encoding_type=pulumi.get(__ret__, 'encoding_type'),
        id=pulumi.get(__ret__, 'id'),
        prefix=pulumi.get(__ret__, 'prefix'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        uploads=pulumi.get(__ret__, 'uploads'))


@_utilities.lift_output_func(get_bucket_multipart_uploads)
def get_bucket_multipart_uploads_output(bucket: Optional[pulumi.Input[str]] = None,
                                        delimiter: Optional[pulumi.Input[Optional[str]]] = None,
                                        encoding_type: Optional[pulumi.Input[Optional[str]]] = None,
                                        prefix: Optional[pulumi.Input[Optional[str]]] = None,
                                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBucketMultipartUploadsResult]:
    """
    Use this data source to query the COS bucket multipart uploads.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    cos_bucket_multipart_uploads = tencentcloud.Cos.get_bucket_multipart_uploads(bucket="xxxxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str bucket: Bucket.
    :param str delimiter: The delimiter is a symbol, and the Object name contains the Object between the specified prefix and the first occurrence of delimiter characters as a set of elements: common prefix. If there is no prefix, start from the beginning of the path.
    :param str encoding_type: Specifies the encoding format of the return value. Legal value: url.
    :param str prefix: The returned Object key must be prefixed with Prefix. Note that when using the prefix query, the returned key still contains Prefix.
    :param str result_output_file: Used to save results.
    """
    ...
