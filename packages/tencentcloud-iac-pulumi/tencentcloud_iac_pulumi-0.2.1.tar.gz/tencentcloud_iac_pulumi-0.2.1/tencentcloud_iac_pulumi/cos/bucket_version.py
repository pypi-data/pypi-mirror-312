# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BucketVersionArgs', 'BucketVersion']

@pulumi.input_type
class BucketVersionArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 status: pulumi.Input[str]):
        """
        The set of arguments for constructing a BucketVersion resource.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] status: Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _BucketVersionState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BucketVersion resources.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] status: Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class BucketVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cos bucket_version

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bucket_version = tencentcloud.cos.BucketVersion("bucketVersion",
            bucket="mycos-1258798060",
            status="Enabled")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cos bucket_version can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucketVersion:BucketVersion bucket_version bucket_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] status: Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cos bucket_version

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bucket_version = tencentcloud.cos.BucketVersion("bucketVersion",
            bucket="mycos-1258798060",
            status="Enabled")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cos bucket_version can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cos/bucketVersion:BucketVersion bucket_version bucket_id
        ```

        :param str resource_name: The name of the resource.
        :param BucketVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketVersionArgs.__new__(BucketVersionArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
        super(BucketVersion, __self__).__init__(
            'tencentcloud:Cos/bucketVersion:BucketVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'BucketVersion':
        """
        Get an existing BucketVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        :param pulumi.Input[str] status: Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketVersionState.__new__(_BucketVersionState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["status"] = status
        return BucketVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
        """
        return pulumi.get(self, "status")

