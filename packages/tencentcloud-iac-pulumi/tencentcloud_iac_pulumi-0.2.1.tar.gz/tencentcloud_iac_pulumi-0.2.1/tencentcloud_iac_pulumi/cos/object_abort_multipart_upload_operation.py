# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ObjectAbortMultipartUploadOperationArgs', 'ObjectAbortMultipartUploadOperation']

@pulumi.input_type
class ObjectAbortMultipartUploadOperationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str],
                 upload_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ObjectAbortMultipartUploadOperation resource.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] key: Object key.
        :param pulumi.Input[str] upload_id: Multipart uploaded id.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "upload_id", upload_id)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Object key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="uploadId")
    def upload_id(self) -> pulumi.Input[str]:
        """
        Multipart uploaded id.
        """
        return pulumi.get(self, "upload_id")

    @upload_id.setter
    def upload_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "upload_id", value)


@pulumi.input_type
class _ObjectAbortMultipartUploadOperationState:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 upload_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ObjectAbortMultipartUploadOperation resources.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] key: Object key.
        :param pulumi.Input[str] upload_id: Multipart uploaded id.
        """
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if upload_id is not None:
            pulumi.set(__self__, "upload_id", upload_id)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Object key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="uploadId")
    def upload_id(self) -> Optional[pulumi.Input[str]]:
        """
        Multipart uploaded id.
        """
        return pulumi.get(self, "upload_id")

    @upload_id.setter
    def upload_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upload_id", value)


class ObjectAbortMultipartUploadOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 upload_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to abort multipart upload

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        abort_multipart_upload = tencentcloud.cos.ObjectAbortMultipartUploadOperation("abortMultipartUpload",
            bucket="keep-test-xxxxxx",
            key="object",
            upload_id="xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] key: Object key.
        :param pulumi.Input[str] upload_id: Multipart uploaded id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ObjectAbortMultipartUploadOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to abort multipart upload

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        abort_multipart_upload = tencentcloud.cos.ObjectAbortMultipartUploadOperation("abortMultipartUpload",
            bucket="keep-test-xxxxxx",
            key="object",
            upload_id="xxxxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ObjectAbortMultipartUploadOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ObjectAbortMultipartUploadOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 upload_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ObjectAbortMultipartUploadOperationArgs.__new__(ObjectAbortMultipartUploadOperationArgs)

            if bucket is None and not opts.urn:
                raise TypeError("Missing required property 'bucket'")
            __props__.__dict__["bucket"] = bucket
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            if upload_id is None and not opts.urn:
                raise TypeError("Missing required property 'upload_id'")
            __props__.__dict__["upload_id"] = upload_id
        super(ObjectAbortMultipartUploadOperation, __self__).__init__(
            'tencentcloud:Cos/objectAbortMultipartUploadOperation:ObjectAbortMultipartUploadOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            upload_id: Optional[pulumi.Input[str]] = None) -> 'ObjectAbortMultipartUploadOperation':
        """
        Get an existing ObjectAbortMultipartUploadOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bucket: Bucket.
        :param pulumi.Input[str] key: Object key.
        :param pulumi.Input[str] upload_id: Multipart uploaded id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ObjectAbortMultipartUploadOperationState.__new__(_ObjectAbortMultipartUploadOperationState)

        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["key"] = key
        __props__.__dict__["upload_id"] = upload_id
        return ObjectAbortMultipartUploadOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        """
        Bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        Object key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="uploadId")
    def upload_id(self) -> pulumi.Output[str]:
        """
        Multipart uploaded id.
        """
        return pulumi.get(self, "upload_id")

