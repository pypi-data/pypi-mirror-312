# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 elastic_ip: pulumi.Input[str],
                 elastic_port: pulumi.Input[str],
                 nat_id: pulumi.Input[str],
                 private_ip: pulumi.Input[str],
                 private_port: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] elastic_ip: Network address of the EIP.
        :param pulumi.Input[str] elastic_port: Port of the EIP.
        :param pulumi.Input[str] nat_id: ID of the NAT gateway.
        :param pulumi.Input[str] private_ip: Network address of the backend service.
        :param pulumi.Input[str] private_port: Port of intranet.
        :param pulumi.Input[str] protocol: Type of the network protocol. Valid value: `TCP` and `UDP`.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        :param pulumi.Input[str] description: Description of the NAT forward.
        """
        pulumi.set(__self__, "elastic_ip", elastic_ip)
        pulumi.set(__self__, "elastic_port", elastic_port)
        pulumi.set(__self__, "nat_id", nat_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "private_port", private_port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="elasticIp")
    def elastic_ip(self) -> pulumi.Input[str]:
        """
        Network address of the EIP.
        """
        return pulumi.get(self, "elastic_ip")

    @elastic_ip.setter
    def elastic_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "elastic_ip", value)

    @property
    @pulumi.getter(name="elasticPort")
    def elastic_port(self) -> pulumi.Input[str]:
        """
        Port of the EIP.
        """
        return pulumi.get(self, "elastic_port")

    @elastic_port.setter
    def elastic_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "elastic_port", value)

    @property
    @pulumi.getter(name="natId")
    def nat_id(self) -> pulumi.Input[str]:
        """
        ID of the NAT gateway.
        """
        return pulumi.get(self, "nat_id")

    @nat_id.setter
    def nat_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nat_id", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Input[str]:
        """
        Network address of the backend service.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="privatePort")
    def private_port(self) -> pulumi.Input[str]:
        """
        Port of intranet.
        """
        return pulumi.get(self, "private_port")

    @private_port.setter
    def private_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Type of the network protocol. Valid value: `TCP` and `UDP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the NAT forward.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 elastic_ip: Optional[pulumi.Input[str]] = None,
                 elastic_port: Optional[pulumi.Input[str]] = None,
                 nat_id: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 private_port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] description: Description of the NAT forward.
        :param pulumi.Input[str] elastic_ip: Network address of the EIP.
        :param pulumi.Input[str] elastic_port: Port of the EIP.
        :param pulumi.Input[str] nat_id: ID of the NAT gateway.
        :param pulumi.Input[str] private_ip: Network address of the backend service.
        :param pulumi.Input[str] private_port: Port of intranet.
        :param pulumi.Input[str] protocol: Type of the network protocol. Valid value: `TCP` and `UDP`.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if elastic_ip is not None:
            pulumi.set(__self__, "elastic_ip", elastic_ip)
        if elastic_port is not None:
            pulumi.set(__self__, "elastic_port", elastic_port)
        if nat_id is not None:
            pulumi.set(__self__, "nat_id", nat_id)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_port is not None:
            pulumi.set(__self__, "private_port", private_port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the NAT forward.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="elasticIp")
    def elastic_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Network address of the EIP.
        """
        return pulumi.get(self, "elastic_ip")

    @elastic_ip.setter
    def elastic_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elastic_ip", value)

    @property
    @pulumi.getter(name="elasticPort")
    def elastic_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port of the EIP.
        """
        return pulumi.get(self, "elastic_port")

    @elastic_port.setter
    def elastic_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "elastic_port", value)

    @property
    @pulumi.getter(name="natId")
    def nat_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the NAT gateway.
        """
        return pulumi.get(self, "nat_id")

    @nat_id.setter
    def nat_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_id", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Network address of the backend service.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="privatePort")
    def private_port(self) -> Optional[pulumi.Input[str]]:
        """
        Port of intranet.
        """
        return pulumi.get(self, "private_port")

    @private_port.setter
    def private_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the network protocol. Valid value: `TCP` and `UDP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 elastic_ip: Optional[pulumi.Input[str]] = None,
                 elastic_port: Optional[pulumi.Input[str]] = None,
                 nat_id: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 private_port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a NAT forwarding.

        ## Import

        NAT forwarding can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dnat/instance:Instance foo tcp://vpc-asg3sfa3:nat-1asg3t63@127.15.2.3:8080
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the NAT forward.
        :param pulumi.Input[str] elastic_ip: Network address of the EIP.
        :param pulumi.Input[str] elastic_port: Port of the EIP.
        :param pulumi.Input[str] nat_id: ID of the NAT gateway.
        :param pulumi.Input[str] private_ip: Network address of the backend service.
        :param pulumi.Input[str] private_port: Port of intranet.
        :param pulumi.Input[str] protocol: Type of the network protocol. Valid value: `TCP` and `UDP`.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a NAT forwarding.

        ## Import

        NAT forwarding can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dnat/instance:Instance foo tcp://vpc-asg3sfa3:nat-1asg3t63@127.15.2.3:8080
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 elastic_ip: Optional[pulumi.Input[str]] = None,
                 elastic_port: Optional[pulumi.Input[str]] = None,
                 nat_id: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 private_port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["description"] = description
            if elastic_ip is None and not opts.urn:
                raise TypeError("Missing required property 'elastic_ip'")
            __props__.__dict__["elastic_ip"] = elastic_ip
            if elastic_port is None and not opts.urn:
                raise TypeError("Missing required property 'elastic_port'")
            __props__.__dict__["elastic_port"] = elastic_port
            if nat_id is None and not opts.urn:
                raise TypeError("Missing required property 'nat_id'")
            __props__.__dict__["nat_id"] = nat_id
            if private_ip is None and not opts.urn:
                raise TypeError("Missing required property 'private_ip'")
            __props__.__dict__["private_ip"] = private_ip
            if private_port is None and not opts.urn:
                raise TypeError("Missing required property 'private_port'")
            __props__.__dict__["private_port"] = private_port
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(Instance, __self__).__init__(
            'tencentcloud:Dnat/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            elastic_ip: Optional[pulumi.Input[str]] = None,
            elastic_port: Optional[pulumi.Input[str]] = None,
            nat_id: Optional[pulumi.Input[str]] = None,
            private_ip: Optional[pulumi.Input[str]] = None,
            private_port: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the NAT forward.
        :param pulumi.Input[str] elastic_ip: Network address of the EIP.
        :param pulumi.Input[str] elastic_port: Port of the EIP.
        :param pulumi.Input[str] nat_id: ID of the NAT gateway.
        :param pulumi.Input[str] private_ip: Network address of the backend service.
        :param pulumi.Input[str] private_port: Port of intranet.
        :param pulumi.Input[str] protocol: Type of the network protocol. Valid value: `TCP` and `UDP`.
        :param pulumi.Input[str] vpc_id: ID of the VPC.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["elastic_ip"] = elastic_ip
        __props__.__dict__["elastic_port"] = elastic_port
        __props__.__dict__["nat_id"] = nat_id
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["private_port"] = private_port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["vpc_id"] = vpc_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the NAT forward.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="elasticIp")
    def elastic_ip(self) -> pulumi.Output[str]:
        """
        Network address of the EIP.
        """
        return pulumi.get(self, "elastic_ip")

    @property
    @pulumi.getter(name="elasticPort")
    def elastic_port(self) -> pulumi.Output[str]:
        """
        Port of the EIP.
        """
        return pulumi.get(self, "elastic_port")

    @property
    @pulumi.getter(name="natId")
    def nat_id(self) -> pulumi.Output[str]:
        """
        ID of the NAT gateway.
        """
        return pulumi.get(self, "nat_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[str]:
        """
        Network address of the backend service.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privatePort")
    def private_port(self) -> pulumi.Output[str]:
        """
        Port of intranet.
        """
        return pulumi.get(self, "private_port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Type of the network protocol. Valid value: `TCP` and `UDP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

