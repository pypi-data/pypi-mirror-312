# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRocketmqRoleResult',
    'AwaitableGetRocketmqRoleResult',
    'get_rocketmq_role',
    'get_rocketmq_role_output',
]

@pulumi.output_type
class GetRocketmqRoleResult:
    """
    A collection of values returned by getRocketmqRole.
    """
    def __init__(__self__, cluster_id=None, id=None, result_output_file=None, role_name=None, role_sets=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if role_name and not isinstance(role_name, str):
            raise TypeError("Expected argument 'role_name' to be a str")
        pulumi.set(__self__, "role_name", role_name)
        if role_sets and not isinstance(role_sets, list):
            raise TypeError("Expected argument 'role_sets' to be a list")
        pulumi.set(__self__, "role_sets", role_sets)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        """
        Role name.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="roleSets")
    def role_sets(self) -> Sequence['outputs.GetRocketmqRoleRoleSetResult']:
        """
        Array of roles.
        """
        return pulumi.get(self, "role_sets")


class AwaitableGetRocketmqRoleResult(GetRocketmqRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRocketmqRoleResult(
            cluster_id=self.cluster_id,
            id=self.id,
            result_output_file=self.result_output_file,
            role_name=self.role_name,
            role_sets=self.role_sets)


def get_rocketmq_role(cluster_id: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      role_name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRocketmqRoleResult:
    """
    Use this data source to query detailed information of tdmqRocketmq role


    :param str cluster_id: Cluster ID (required).
    :param str result_output_file: Used to save results.
    :param str role_name: Fuzzy query by role name.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['resultOutputFile'] = result_output_file
    __args__['roleName'] = role_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tdmq/getRocketmqRole:getRocketmqRole', __args__, opts=opts, typ=GetRocketmqRoleResult).value

    return AwaitableGetRocketmqRoleResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        role_name=pulumi.get(__ret__, 'role_name'),
        role_sets=pulumi.get(__ret__, 'role_sets'))


@_utilities.lift_output_func(get_rocketmq_role)
def get_rocketmq_role_output(cluster_id: Optional[pulumi.Input[str]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             role_name: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRocketmqRoleResult]:
    """
    Use this data source to query detailed information of tdmqRocketmq role


    :param str cluster_id: Cluster ID (required).
    :param str result_output_file: Used to save results.
    :param str role_name: Fuzzy query by role name.
    """
    ...
