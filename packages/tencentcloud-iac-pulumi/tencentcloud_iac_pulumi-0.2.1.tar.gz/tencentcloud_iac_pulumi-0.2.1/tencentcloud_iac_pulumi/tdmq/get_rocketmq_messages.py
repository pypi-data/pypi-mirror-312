# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRocketmqMessagesResult',
    'AwaitableGetRocketmqMessagesResult',
    'get_rocketmq_messages',
    'get_rocketmq_messages_output',
]

@pulumi.output_type
class GetRocketmqMessagesResult:
    """
    A collection of values returned by getRocketmqMessages.
    """
    def __init__(__self__, body=None, cluster_id=None, environment_id=None, id=None, message_tracks=None, msg_id=None, produce_time=None, producer_addr=None, properties=None, query_dlq_msg=None, result_output_file=None, show_topic_name=None, topic_name=None):
        if body and not isinstance(body, str):
            raise TypeError("Expected argument 'body' to be a str")
        pulumi.set(__self__, "body", body)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if message_tracks and not isinstance(message_tracks, list):
            raise TypeError("Expected argument 'message_tracks' to be a list")
        pulumi.set(__self__, "message_tracks", message_tracks)
        if msg_id and not isinstance(msg_id, str):
            raise TypeError("Expected argument 'msg_id' to be a str")
        pulumi.set(__self__, "msg_id", msg_id)
        if produce_time and not isinstance(produce_time, str):
            raise TypeError("Expected argument 'produce_time' to be a str")
        pulumi.set(__self__, "produce_time", produce_time)
        if producer_addr and not isinstance(producer_addr, str):
            raise TypeError("Expected argument 'producer_addr' to be a str")
        pulumi.set(__self__, "producer_addr", producer_addr)
        if properties and not isinstance(properties, str):
            raise TypeError("Expected argument 'properties' to be a str")
        pulumi.set(__self__, "properties", properties)
        if query_dlq_msg and not isinstance(query_dlq_msg, bool):
            raise TypeError("Expected argument 'query_dlq_msg' to be a bool")
        pulumi.set(__self__, "query_dlq_msg", query_dlq_msg)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if show_topic_name and not isinstance(show_topic_name, str):
            raise TypeError("Expected argument 'show_topic_name' to be a str")
        pulumi.set(__self__, "show_topic_name", show_topic_name)
        if topic_name and not isinstance(topic_name, str):
            raise TypeError("Expected argument 'topic_name' to be a str")
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter
    def body(self) -> str:
        """
        Message body.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> str:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="messageTracks")
    def message_tracks(self) -> Sequence['outputs.GetRocketmqMessagesMessageTrackResult']:
        """
        Consumer Group ConsumptionNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "message_tracks")

    @property
    @pulumi.getter(name="msgId")
    def msg_id(self) -> str:
        return pulumi.get(self, "msg_id")

    @property
    @pulumi.getter(name="produceTime")
    def produce_time(self) -> str:
        """
        Production time.
        """
        return pulumi.get(self, "produce_time")

    @property
    @pulumi.getter(name="producerAddr")
    def producer_addr(self) -> str:
        """
        Producer address.
        """
        return pulumi.get(self, "producer_addr")

    @property
    @pulumi.getter
    def properties(self) -> str:
        """
        Detailed parameters.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="queryDlqMsg")
    def query_dlq_msg(self) -> Optional[bool]:
        return pulumi.get(self, "query_dlq_msg")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="showTopicName")
    def show_topic_name(self) -> str:
        """
        The topic name displayed on the details pageNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "show_topic_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")


class AwaitableGetRocketmqMessagesResult(GetRocketmqMessagesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRocketmqMessagesResult(
            body=self.body,
            cluster_id=self.cluster_id,
            environment_id=self.environment_id,
            id=self.id,
            message_tracks=self.message_tracks,
            msg_id=self.msg_id,
            produce_time=self.produce_time,
            producer_addr=self.producer_addr,
            properties=self.properties,
            query_dlq_msg=self.query_dlq_msg,
            result_output_file=self.result_output_file,
            show_topic_name=self.show_topic_name,
            topic_name=self.topic_name)


def get_rocketmq_messages(cluster_id: Optional[str] = None,
                          environment_id: Optional[str] = None,
                          msg_id: Optional[str] = None,
                          query_dlq_msg: Optional[bool] = None,
                          result_output_file: Optional[str] = None,
                          topic_name: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRocketmqMessagesResult:
    """
    Use this data source to query detailed information of tdmq message

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    message = tencentcloud.Tdmq.get_rocketmq_messages(cluster_id="rocketmq-rkrbm52djmro",
        environment_id="keep_ns",
        msg_id="A9FE8D0567FE15DB97425FC08EEF0000",
        query_dlq_msg=False,
        topic_name="keep-topic")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster id.
    :param str environment_id: Environment.
    :param str msg_id: Message ID.
    :param bool query_dlq_msg: The value is true when querying dead letters, only valid for Rocketmq.
    :param str result_output_file: Used to save results.
    :param str topic_name: Topic, groupId is passed when querying dead letters.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['environmentId'] = environment_id
    __args__['msgId'] = msg_id
    __args__['queryDlqMsg'] = query_dlq_msg
    __args__['resultOutputFile'] = result_output_file
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tdmq/getRocketmqMessages:getRocketmqMessages', __args__, opts=opts, typ=GetRocketmqMessagesResult).value

    return AwaitableGetRocketmqMessagesResult(
        body=pulumi.get(__ret__, 'body'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        id=pulumi.get(__ret__, 'id'),
        message_tracks=pulumi.get(__ret__, 'message_tracks'),
        msg_id=pulumi.get(__ret__, 'msg_id'),
        produce_time=pulumi.get(__ret__, 'produce_time'),
        producer_addr=pulumi.get(__ret__, 'producer_addr'),
        properties=pulumi.get(__ret__, 'properties'),
        query_dlq_msg=pulumi.get(__ret__, 'query_dlq_msg'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        show_topic_name=pulumi.get(__ret__, 'show_topic_name'),
        topic_name=pulumi.get(__ret__, 'topic_name'))


@_utilities.lift_output_func(get_rocketmq_messages)
def get_rocketmq_messages_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                 environment_id: Optional[pulumi.Input[str]] = None,
                                 msg_id: Optional[pulumi.Input[str]] = None,
                                 query_dlq_msg: Optional[pulumi.Input[Optional[bool]]] = None,
                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 topic_name: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRocketmqMessagesResult]:
    """
    Use this data source to query detailed information of tdmq message

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    message = tencentcloud.Tdmq.get_rocketmq_messages(cluster_id="rocketmq-rkrbm52djmro",
        environment_id="keep_ns",
        msg_id="A9FE8D0567FE15DB97425FC08EEF0000",
        query_dlq_msg=False,
        topic_name="keep-topic")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster id.
    :param str environment_id: Environment.
    :param str msg_id: Message ID.
    :param bool query_dlq_msg: The value is true when querying dead letters, only valid for Rocketmq.
    :param str result_output_file: Used to save results.
    :param str topic_name: Topic, groupId is passed when querying dead letters.
    """
    ...
