# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SubscriptionAttachmentArgs', 'SubscriptionAttachment']

@pulumi.input_type
class SubscriptionAttachmentArgs:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[str],
                 subscription_name: pulumi.Input[str],
                 topic_name: pulumi.Input[str],
                 auto_create_policy_topic: Optional[pulumi.Input[bool]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SubscriptionAttachment resource.
        :param pulumi.Input[str] environment_id: Environment (namespace) name.
        :param pulumi.Input[str] subscription_name: Subscriber name, no more than 128 characters.
        :param pulumi.Input[str] topic_name: topic name.
        :param pulumi.Input[bool] auto_create_policy_topic: Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
               default is to automatically create dead letters and retry topics.
        :param pulumi.Input[str] cluster_id: ID of the Pulsar cluster.
        :param pulumi.Input[str] remark: Remarks, within 128 characters.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "subscription_name", subscription_name)
        pulumi.set(__self__, "topic_name", topic_name)
        if auto_create_policy_topic is not None:
            pulumi.set(__self__, "auto_create_policy_topic", auto_create_policy_topic)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        Environment (namespace) name.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="subscriptionName")
    def subscription_name(self) -> pulumi.Input[str]:
        """
        Subscriber name, no more than 128 characters.
        """
        return pulumi.get(self, "subscription_name")

    @subscription_name.setter
    def subscription_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        topic name.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="autoCreatePolicyTopic")
    def auto_create_policy_topic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
        default is to automatically create dead letters and retry topics.
        """
        return pulumi.get(self, "auto_create_policy_topic")

    @auto_create_policy_topic.setter
    def auto_create_policy_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_policy_topic", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Pulsar cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remarks, within 128 characters.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _SubscriptionAttachmentState:
    def __init__(__self__, *,
                 auto_create_policy_topic: Optional[pulumi.Input[bool]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 subscription_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SubscriptionAttachment resources.
        :param pulumi.Input[bool] auto_create_policy_topic: Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
               default is to automatically create dead letters and retry topics.
        :param pulumi.Input[str] cluster_id: ID of the Pulsar cluster.
        :param pulumi.Input[str] environment_id: Environment (namespace) name.
        :param pulumi.Input[str] remark: Remarks, within 128 characters.
        :param pulumi.Input[str] subscription_name: Subscriber name, no more than 128 characters.
        :param pulumi.Input[str] topic_name: topic name.
        """
        if auto_create_policy_topic is not None:
            pulumi.set(__self__, "auto_create_policy_topic", auto_create_policy_topic)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if subscription_name is not None:
            pulumi.set(__self__, "subscription_name", subscription_name)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="autoCreatePolicyTopic")
    def auto_create_policy_topic(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
        default is to automatically create dead letters and retry topics.
        """
        return pulumi.get(self, "auto_create_policy_topic")

    @auto_create_policy_topic.setter
    def auto_create_policy_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_policy_topic", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Pulsar cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Environment (namespace) name.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Remarks, within 128 characters.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="subscriptionName")
    def subscription_name(self) -> Optional[pulumi.Input[str]]:
        """
        Subscriber name, no more than 128 characters.
        """
        return pulumi.get(self, "subscription_name")

    @subscription_name.setter
    def subscription_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        topic name.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)


class SubscriptionAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_create_policy_topic: Optional[pulumi.Input[bool]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 subscription_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SubscriptionAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_create_policy_topic: Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
               default is to automatically create dead letters and retry topics.
        :param pulumi.Input[str] cluster_id: ID of the Pulsar cluster.
        :param pulumi.Input[str] environment_id: Environment (namespace) name.
        :param pulumi.Input[str] remark: Remarks, within 128 characters.
        :param pulumi.Input[str] subscription_name: Subscriber name, no more than 128 characters.
        :param pulumi.Input[str] topic_name: topic name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubscriptionAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SubscriptionAttachment resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SubscriptionAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscriptionAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_create_policy_topic: Optional[pulumi.Input[bool]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 subscription_name: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscriptionAttachmentArgs.__new__(SubscriptionAttachmentArgs)

            __props__.__dict__["auto_create_policy_topic"] = auto_create_policy_topic
            __props__.__dict__["cluster_id"] = cluster_id
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["remark"] = remark
            if subscription_name is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_name'")
            __props__.__dict__["subscription_name"] = subscription_name
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
        super(SubscriptionAttachment, __self__).__init__(
            'tencentcloud:Tdmq/subscriptionAttachment:SubscriptionAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_create_policy_topic: Optional[pulumi.Input[bool]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            environment_id: Optional[pulumi.Input[str]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            subscription_name: Optional[pulumi.Input[str]] = None,
            topic_name: Optional[pulumi.Input[str]] = None) -> 'SubscriptionAttachment':
        """
        Get an existing SubscriptionAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_create_policy_topic: Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
               default is to automatically create dead letters and retry topics.
        :param pulumi.Input[str] cluster_id: ID of the Pulsar cluster.
        :param pulumi.Input[str] environment_id: Environment (namespace) name.
        :param pulumi.Input[str] remark: Remarks, within 128 characters.
        :param pulumi.Input[str] subscription_name: Subscriber name, no more than 128 characters.
        :param pulumi.Input[str] topic_name: topic name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubscriptionAttachmentState.__new__(_SubscriptionAttachmentState)

        __props__.__dict__["auto_create_policy_topic"] = auto_create_policy_topic
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["remark"] = remark
        __props__.__dict__["subscription_name"] = subscription_name
        __props__.__dict__["topic_name"] = topic_name
        return SubscriptionAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoCreatePolicyTopic")
    def auto_create_policy_topic(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically create dead letters and retry topics, True means to create, False means not to create, the
        default is to automatically create dead letters and retry topics.
        """
        return pulumi.get(self, "auto_create_policy_topic")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the Pulsar cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[str]:
        """
        Environment (namespace) name.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        Remarks, within 128 characters.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="subscriptionName")
    def subscription_name(self) -> pulumi.Output[str]:
        """
        Subscriber name, no more than 128 characters.
        """
        return pulumi.get(self, "subscription_name")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        topic name.
        """
        return pulumi.get(self, "topic_name")

