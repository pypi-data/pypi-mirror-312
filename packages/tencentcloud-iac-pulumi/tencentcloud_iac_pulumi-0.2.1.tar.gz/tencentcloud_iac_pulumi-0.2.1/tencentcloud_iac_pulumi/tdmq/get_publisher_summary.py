# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPublisherSummaryResult',
    'AwaitableGetPublisherSummaryResult',
    'get_publisher_summary',
    'get_publisher_summary_output',
]

@pulumi.output_type
class GetPublisherSummaryResult:
    """
    A collection of values returned by getPublisherSummary.
    """
    def __init__(__self__, cluster_id=None, id=None, msg_rate_in=None, msg_throughput_in=None, namespace=None, publisher_count=None, result_output_file=None, storage_size=None, topic=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if msg_rate_in and not isinstance(msg_rate_in, float):
            raise TypeError("Expected argument 'msg_rate_in' to be a float")
        pulumi.set(__self__, "msg_rate_in", msg_rate_in)
        if msg_throughput_in and not isinstance(msg_throughput_in, float):
            raise TypeError("Expected argument 'msg_throughput_in' to be a float")
        pulumi.set(__self__, "msg_throughput_in", msg_throughput_in)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if publisher_count and not isinstance(publisher_count, int):
            raise TypeError("Expected argument 'publisher_count' to be a int")
        pulumi.set(__self__, "publisher_count", publisher_count)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if storage_size and not isinstance(storage_size, int):
            raise TypeError("Expected argument 'storage_size' to be a int")
        pulumi.set(__self__, "storage_size", storage_size)
        if topic and not isinstance(topic, str):
            raise TypeError("Expected argument 'topic' to be a str")
        pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="msgRateIn")
    def msg_rate_in(self) -> float:
        """
        Production rate (units per second)Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "msg_rate_in")

    @property
    @pulumi.getter(name="msgThroughputIn")
    def msg_throughput_in(self) -> float:
        """
        Production rate (bytes per second)Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "msg_throughput_in")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="publisherCount")
    def publisher_count(self) -> int:
        """
        number of producersNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "publisher_count")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> int:
        """
        Message store size in bytesNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter
    def topic(self) -> str:
        return pulumi.get(self, "topic")


class AwaitableGetPublisherSummaryResult(GetPublisherSummaryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublisherSummaryResult(
            cluster_id=self.cluster_id,
            id=self.id,
            msg_rate_in=self.msg_rate_in,
            msg_throughput_in=self.msg_throughput_in,
            namespace=self.namespace,
            publisher_count=self.publisher_count,
            result_output_file=self.result_output_file,
            storage_size=self.storage_size,
            topic=self.topic)


def get_publisher_summary(cluster_id: Optional[str] = None,
                          namespace: Optional[str] = None,
                          result_output_file: Optional[str] = None,
                          topic: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublisherSummaryResult:
    """
    Use this data source to query detailed information of tdmq publisher_summary

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    publisher_summary = tencentcloud.Tdmq.get_publisher_summary(cluster_id="pulsar-9n95ax58b9vn",
        namespace="keep-ns",
        topic="keep-topic")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str namespace: namespace name.
    :param str result_output_file: Used to save results.
    :param str topic: subject name.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['namespace'] = namespace
    __args__['resultOutputFile'] = result_output_file
    __args__['topic'] = topic
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tdmq/getPublisherSummary:getPublisherSummary', __args__, opts=opts, typ=GetPublisherSummaryResult).value

    return AwaitableGetPublisherSummaryResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        msg_rate_in=pulumi.get(__ret__, 'msg_rate_in'),
        msg_throughput_in=pulumi.get(__ret__, 'msg_throughput_in'),
        namespace=pulumi.get(__ret__, 'namespace'),
        publisher_count=pulumi.get(__ret__, 'publisher_count'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        storage_size=pulumi.get(__ret__, 'storage_size'),
        topic=pulumi.get(__ret__, 'topic'))


@_utilities.lift_output_func(get_publisher_summary)
def get_publisher_summary_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                 namespace: Optional[pulumi.Input[str]] = None,
                                 result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                 topic: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPublisherSummaryResult]:
    """
    Use this data source to query detailed information of tdmq publisher_summary

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    publisher_summary = tencentcloud.Tdmq.get_publisher_summary(cluster_id="pulsar-9n95ax58b9vn",
        namespace="keep-ns",
        topic="keep-topic")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str namespace: namespace name.
    :param str result_output_file: Used to save results.
    :param str topic: subject name.
    """
    ...
