# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RabbitmqVirtualHostArgs', 'RabbitmqVirtualHost']

@pulumi.input_type
class RabbitmqVirtualHostArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 virtual_host: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 trace_flag: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RabbitmqVirtualHost resource.
        :param pulumi.Input[str] instance_id: Cluster instance ID.
        :param pulumi.Input[str] virtual_host: vhost name.
        :param pulumi.Input[str] description: describe.
        :param pulumi.Input[bool] trace_flag: Message track switch, true is on, false is off, default is off.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "virtual_host", virtual_host)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if trace_flag is not None:
            pulumi.set(__self__, "trace_flag", trace_flag)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Cluster instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> pulumi.Input[str]:
        """
        vhost name.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "virtual_host", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        describe.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="traceFlag")
    def trace_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Message track switch, true is on, false is off, default is off.
        """
        return pulumi.get(self, "trace_flag")

    @trace_flag.setter
    def trace_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trace_flag", value)


@pulumi.input_type
class _RabbitmqVirtualHostState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 trace_flag: Optional[pulumi.Input[bool]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RabbitmqVirtualHost resources.
        :param pulumi.Input[str] description: describe.
        :param pulumi.Input[str] instance_id: Cluster instance ID.
        :param pulumi.Input[bool] trace_flag: Message track switch, true is on, false is off, default is off.
        :param pulumi.Input[str] virtual_host: vhost name.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if trace_flag is not None:
            pulumi.set(__self__, "trace_flag", trace_flag)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        describe.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="traceFlag")
    def trace_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Message track switch, true is on, false is off, default is off.
        """
        return pulumi.get(self, "trace_flag")

    @trace_flag.setter
    def trace_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trace_flag", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        """
        vhost name.
        """
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


class RabbitmqVirtualHost(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 trace_flag: Optional[pulumi.Input[bool]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tdmq rabbitmq_virtual_host

        ## Import

        tdmq rabbitmq_virtual_host can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdmq/rabbitmqVirtualHost:RabbitmqVirtualHost example amqp-pbavw2wd#tf-example-vhost
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: describe.
        :param pulumi.Input[str] instance_id: Cluster instance ID.
        :param pulumi.Input[bool] trace_flag: Message track switch, true is on, false is off, default is off.
        :param pulumi.Input[str] virtual_host: vhost name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RabbitmqVirtualHostArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tdmq rabbitmq_virtual_host

        ## Import

        tdmq rabbitmq_virtual_host can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdmq/rabbitmqVirtualHost:RabbitmqVirtualHost example amqp-pbavw2wd#tf-example-vhost
        ```

        :param str resource_name: The name of the resource.
        :param RabbitmqVirtualHostArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RabbitmqVirtualHostArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 trace_flag: Optional[pulumi.Input[bool]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RabbitmqVirtualHostArgs.__new__(RabbitmqVirtualHostArgs)

            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["trace_flag"] = trace_flag
            if virtual_host is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_host'")
            __props__.__dict__["virtual_host"] = virtual_host
        super(RabbitmqVirtualHost, __self__).__init__(
            'tencentcloud:Tdmq/rabbitmqVirtualHost:RabbitmqVirtualHost',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            trace_flag: Optional[pulumi.Input[bool]] = None,
            virtual_host: Optional[pulumi.Input[str]] = None) -> 'RabbitmqVirtualHost':
        """
        Get an existing RabbitmqVirtualHost resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: describe.
        :param pulumi.Input[str] instance_id: Cluster instance ID.
        :param pulumi.Input[bool] trace_flag: Message track switch, true is on, false is off, default is off.
        :param pulumi.Input[str] virtual_host: vhost name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RabbitmqVirtualHostState.__new__(_RabbitmqVirtualHostState)

        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["trace_flag"] = trace_flag
        __props__.__dict__["virtual_host"] = virtual_host
        return RabbitmqVirtualHost(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        describe.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Cluster instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="traceFlag")
    def trace_flag(self) -> pulumi.Output[bool]:
        """
        Message track switch, true is on, false is off, default is off.
        """
        return pulumi.get(self, "trace_flag")

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> pulumi.Output[str]:
        """
        vhost name.
        """
        return pulumi.get(self, "virtual_host")

