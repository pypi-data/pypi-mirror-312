# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRocketmqNamespaceResult',
    'AwaitableGetRocketmqNamespaceResult',
    'get_rocketmq_namespace',
    'get_rocketmq_namespace_output',
]

@pulumi.output_type
class GetRocketmqNamespaceResult:
    """
    A collection of values returned by getRocketmqNamespace.
    """
    def __init__(__self__, cluster_id=None, id=None, name_keyword=None, namespaces=None, result_output_file=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_keyword and not isinstance(name_keyword, str):
            raise TypeError("Expected argument 'name_keyword' to be a str")
        pulumi.set(__self__, "name_keyword", name_keyword)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameKeyword")
    def name_keyword(self) -> Optional[str]:
        return pulumi.get(self, "name_keyword")

    @property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetRocketmqNamespaceNamespaceResult']:
        """
        List of namespaces.
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetRocketmqNamespaceResult(GetRocketmqNamespaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRocketmqNamespaceResult(
            cluster_id=self.cluster_id,
            id=self.id,
            name_keyword=self.name_keyword,
            namespaces=self.namespaces,
            result_output_file=self.result_output_file)


def get_rocketmq_namespace(cluster_id: Optional[str] = None,
                           name_keyword: Optional[str] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRocketmqNamespaceResult:
    """
    Use this data source to query detailed information of tdmqRocketmq namespace

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_rocketmq_cluster = tencentcloud.tdmq.RocketmqCluster("exampleRocketmqCluster",
        cluster_name="tf_example",
        remark="remark.")
    example_rocketmq_namespace = tencentcloud.Tdmq.get_rocketmq_namespace_output(cluster_id=example_rocketmq_cluster.cluster_id,
        name_keyword=example_tdmq / rocketmq_namespace_rocketmq_namespace["namespaceName"])
    example_tdmq_rocketmq_namespace_rocketmq_namespace = tencentcloud.tdmq.RocketmqNamespace("exampleTdmq/rocketmqNamespaceRocketmqNamespace",
        cluster_id=example_rocketmq_cluster.cluster_id,
        namespace_name="tf_example",
        remark="remark.")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str name_keyword: Search by name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['nameKeyword'] = name_keyword
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tdmq/getRocketmqNamespace:getRocketmqNamespace', __args__, opts=opts, typ=GetRocketmqNamespaceResult).value

    return AwaitableGetRocketmqNamespaceResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        id=pulumi.get(__ret__, 'id'),
        name_keyword=pulumi.get(__ret__, 'name_keyword'),
        namespaces=pulumi.get(__ret__, 'namespaces'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_rocketmq_namespace)
def get_rocketmq_namespace_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                  name_keyword: Optional[pulumi.Input[Optional[str]]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRocketmqNamespaceResult]:
    """
    Use this data source to query detailed information of tdmqRocketmq namespace

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_rocketmq_cluster = tencentcloud.tdmq.RocketmqCluster("exampleRocketmqCluster",
        cluster_name="tf_example",
        remark="remark.")
    example_rocketmq_namespace = tencentcloud.Tdmq.get_rocketmq_namespace_output(cluster_id=example_rocketmq_cluster.cluster_id,
        name_keyword=example_tdmq / rocketmq_namespace_rocketmq_namespace["namespaceName"])
    example_tdmq_rocketmq_namespace_rocketmq_namespace = tencentcloud.tdmq.RocketmqNamespace("exampleTdmq/rocketmqNamespaceRocketmqNamespace",
        cluster_id=example_rocketmq_cluster.cluster_id,
        namespace_name="tf_example",
        remark="remark.")
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: Cluster ID.
    :param str name_keyword: Search by name.
    :param str result_output_file: Used to save results.
    """
    ...
