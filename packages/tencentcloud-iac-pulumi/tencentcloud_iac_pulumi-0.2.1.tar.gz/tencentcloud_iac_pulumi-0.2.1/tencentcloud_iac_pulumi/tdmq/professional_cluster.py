# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProfessionalClusterArgs', 'ProfessionalCluster']

@pulumi.input_type
class ProfessionalClusterArgs:
    def __init__(__self__, *,
                 auto_renew_flag: pulumi.Input[int],
                 cluster_name: pulumi.Input[str],
                 product_name: pulumi.Input[str],
                 storage_size: pulumi.Input[int],
                 zone_ids: pulumi.Input[Sequence[pulumi.Input[int]]],
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 vpc: Optional[pulumi.Input['ProfessionalClusterVpcArgs']] = None):
        """
        The set of arguments for constructing a ProfessionalCluster resource.
        :param pulumi.Input[int] auto_renew_flag: Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
        :param pulumi.Input[str] cluster_name: Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
        :param pulumi.Input[str] product_name: Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[int] storage_size: Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
        :param pulumi.Input[int] auto_voucher: Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Purchase duration, value range: 1~50. Default: 1.
        :param pulumi.Input['ProfessionalClusterVpcArgs'] vpc: Label of VPC network.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "storage_size", storage_size)
        pulumi.set(__self__, "zone_ids", zone_ids)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Input[int]:
        """
        Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: pulumi.Input[int]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Input[str]:
        """
        Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Input[int]:
        """
        Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "zone_ids", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase duration, value range: 1~50. Default: 1.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['ProfessionalClusterVpcArgs']]:
        """
        Label of VPC network.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['ProfessionalClusterVpcArgs']]):
        pulumi.set(self, "vpc", value)


@pulumi.input_type
class _ProfessionalClusterState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 vpc: Optional[pulumi.Input['ProfessionalClusterVpcArgs']] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering ProfessionalCluster resources.
        :param pulumi.Input[int] auto_renew_flag: Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
        :param pulumi.Input[int] auto_voucher: Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
        :param pulumi.Input[str] cluster_name: Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
        :param pulumi.Input[str] product_name: Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[int] storage_size: Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Purchase duration, value range: 1~50. Default: 1.
        :param pulumi.Input['ProfessionalClusterVpcArgs'] vpc: Label of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if cluster_name is not None:
            pulumi.set(__self__, "cluster_name", cluster_name)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if storage_size is not None:
            pulumi.set(__self__, "storage_size", storage_size)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)
        if zone_ids is not None:
            pulumi.set(__self__, "zone_ids", zone_ids)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> Optional[pulumi.Input[int]]:
        """
        Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        """
        return pulumi.get(self, "storage_size")

    @storage_size.setter
    def storage_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_size", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Purchase duration, value range: 1~50. Default: 1.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['ProfessionalClusterVpcArgs']]:
        """
        Label of VPC network.
        """
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['ProfessionalClusterVpcArgs']]):
        pulumi.set(self, "vpc", value)

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
        """
        return pulumi.get(self, "zone_ids")

    @zone_ids.setter
    def zone_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "zone_ids", value)


class ProfessionalCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 vpc: Optional[pulumi.Input[pulumi.InputType['ProfessionalClusterVpcArgs']]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tdmq professional_cluster

        ## Example Usage

        ### single-zone Professional Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        professional_cluster = tencentcloud.tdmq.ProfessionalCluster("professionalCluster",
            auto_renew_flag=1,
            cluster_name="single_zone_cluster",
            product_name="PULSAR.P1.MINI2",
            storage_size=600,
            tags={
                "createby": "terrafrom",
            },
            vpc=tencentcloud.tdmq.ProfessionalClusterVpcArgs(
                subnet_id="subnet-xxxx",
                vpc_id="vpc-xxxx",
            ),
            zone_ids=[100004])
        ```
        <!--End PulumiCodeChooser -->

        ### Multi-zone Professional Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        professional_cluster = tencentcloud.tdmq.ProfessionalCluster("professionalCluster",
            auto_renew_flag=1,
            cluster_name="multi_zone_cluster",
            product_name="PULSAR.P1.MINI2",
            storage_size=200,
            tags={
                "key": "value1",
                "key2": "value2",
            },
            vpc=tencentcloud.tdmq.ProfessionalClusterVpcArgs(
                subnet_id="subnet-xxxx",
                vpc_id="vpc-xxxx",
            ),
            zone_ids=[
                330001,
                330002,
                330003,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tdmq professional_cluster can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdmq/professionalCluster:ProfessionalCluster professional_cluster professional_cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
        :param pulumi.Input[int] auto_voucher: Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
        :param pulumi.Input[str] cluster_name: Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
        :param pulumi.Input[str] product_name: Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[int] storage_size: Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Purchase duration, value range: 1~50. Default: 1.
        :param pulumi.Input[pulumi.InputType['ProfessionalClusterVpcArgs']] vpc: Label of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProfessionalClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tdmq professional_cluster

        ## Example Usage

        ### single-zone Professional Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        professional_cluster = tencentcloud.tdmq.ProfessionalCluster("professionalCluster",
            auto_renew_flag=1,
            cluster_name="single_zone_cluster",
            product_name="PULSAR.P1.MINI2",
            storage_size=600,
            tags={
                "createby": "terrafrom",
            },
            vpc=tencentcloud.tdmq.ProfessionalClusterVpcArgs(
                subnet_id="subnet-xxxx",
                vpc_id="vpc-xxxx",
            ),
            zone_ids=[100004])
        ```
        <!--End PulumiCodeChooser -->

        ### Multi-zone Professional Cluster

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        professional_cluster = tencentcloud.tdmq.ProfessionalCluster("professionalCluster",
            auto_renew_flag=1,
            cluster_name="multi_zone_cluster",
            product_name="PULSAR.P1.MINI2",
            storage_size=200,
            tags={
                "key": "value1",
                "key2": "value2",
            },
            vpc=tencentcloud.tdmq.ProfessionalClusterVpcArgs(
                subnet_id="subnet-xxxx",
                vpc_id="vpc-xxxx",
            ),
            zone_ids=[
                330001,
                330002,
                330003,
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tdmq professional_cluster can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdmq/professionalCluster:ProfessionalCluster professional_cluster professional_cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param ProfessionalClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProfessionalClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 auto_voucher: Optional[pulumi.Input[int]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 product_name: Optional[pulumi.Input[str]] = None,
                 storage_size: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 vpc: Optional[pulumi.Input[pulumi.InputType['ProfessionalClusterVpcArgs']]] = None,
                 zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProfessionalClusterArgs.__new__(ProfessionalClusterArgs)

            if auto_renew_flag is None and not opts.urn:
                raise TypeError("Missing required property 'auto_renew_flag'")
            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["auto_voucher"] = auto_voucher
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            if product_name is None and not opts.urn:
                raise TypeError("Missing required property 'product_name'")
            __props__.__dict__["product_name"] = product_name
            if storage_size is None and not opts.urn:
                raise TypeError("Missing required property 'storage_size'")
            __props__.__dict__["storage_size"] = storage_size
            __props__.__dict__["tags"] = tags
            __props__.__dict__["time_span"] = time_span
            __props__.__dict__["vpc"] = vpc
            if zone_ids is None and not opts.urn:
                raise TypeError("Missing required property 'zone_ids'")
            __props__.__dict__["zone_ids"] = zone_ids
        super(ProfessionalCluster, __self__).__init__(
            'tencentcloud:Tdmq/professionalCluster:ProfessionalCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            auto_voucher: Optional[pulumi.Input[int]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            product_name: Optional[pulumi.Input[str]] = None,
            storage_size: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            time_span: Optional[pulumi.Input[int]] = None,
            vpc: Optional[pulumi.Input[pulumi.InputType['ProfessionalClusterVpcArgs']]] = None,
            zone_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'ProfessionalCluster':
        """
        Get an existing ProfessionalCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
        :param pulumi.Input[int] auto_voucher: Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
        :param pulumi.Input[str] cluster_name: Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
        :param pulumi.Input[str] product_name: Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[int] storage_size: Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] time_span: Purchase duration, value range: 1~50. Default: 1.
        :param pulumi.Input[pulumi.InputType['ProfessionalClusterVpcArgs']] vpc: Label of VPC network.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] zone_ids: Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProfessionalClusterState.__new__(_ProfessionalClusterState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["product_name"] = product_name
        __props__.__dict__["storage_size"] = storage_size
        __props__.__dict__["tags"] = tags
        __props__.__dict__["time_span"] = time_span
        __props__.__dict__["vpc"] = vpc
        __props__.__dict__["zone_ids"] = zone_ids
        return ProfessionalCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[int]:
        """
        Whether to turn on automatic monthly renewal. `1`: turn on, `0`: turn off.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[int]:
        """
        Whether to automatically select vouchers. `1`: Yes, `0`: No. Default is `0`.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        Name of cluster. It does not support Chinese characters and special characters except dashes and underscores and cannot exceed 64 characters.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> pulumi.Output[str]:
        """
        Cluster specification code. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="storageSize")
    def storage_size(self) -> pulumi.Output[int]:
        """
        Storage specifications. Reference[Professional Cluster Specifications](https://cloud.tencent.com/document/product/1179/83705).
        """
        return pulumi.get(self, "storage_size")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Output[int]:
        """
        Purchase duration, value range: 1~50. Default: 1.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter
    def vpc(self) -> pulumi.Output[Optional['outputs.ProfessionalClusterVpc']]:
        """
        Label of VPC network.
        """
        return pulumi.get(self, "vpc")

    @property
    @pulumi.getter(name="zoneIds")
    def zone_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        Multi-AZ deployment select three Availability Zones, like: [200002,200003,200004]. Single availability zone deployment selects an availability zone, like [200002].
        """
        return pulumi.get(self, "zone_ids")

