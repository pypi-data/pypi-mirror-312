# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'NamespaceRetentionPolicy',
    'ProfessionalClusterVpc',
    'RocketmqClusterVpc',
    'RocketmqVipInstanceIpRule',
    'RocketmqVipInstanceVpcInfo',
    'GetProInstanceDetailClusterInfoResult',
    'GetProInstanceDetailClusterInfoNodeDistributionResult',
    'GetProInstanceDetailClusterSpecInfoResult',
    'GetProInstanceDetailNetworkAccessPointInfoResult',
    'GetProInstancesFilterResult',
    'GetProInstancesInstanceResult',
    'GetProInstancesInstanceTagResult',
    'GetPublishersFilterResult',
    'GetPublishersPublisherResult',
    'GetPublishersSortResult',
    'GetRabbitmqNodeListFilterResult',
    'GetRabbitmqNodeListNodeListResult',
    'GetRabbitmqVipInstanceFilterResult',
    'GetRabbitmqVipInstanceInstanceResult',
    'GetRocketmqClusterClusterListResult',
    'GetRocketmqClusterClusterListConfigResult',
    'GetRocketmqClusterClusterListInfoResult',
    'GetRocketmqClusterClusterListInfoVpcResult',
    'GetRocketmqGroupGroupResult',
    'GetRocketmqMessagesMessageTrackResult',
    'GetRocketmqNamespaceNamespaceResult',
    'GetRocketmqRoleRoleSetResult',
    'GetRocketmqTopicTopicResult',
    'GetVipInstanceClusterInfoResult',
    'GetVipInstanceClusterInfoVpcResult',
    'GetVipInstanceInstanceConfigResult',
    'GetVipInstanceInstanceConfigNodeDistributionResult',
    'GetVipInstanceInstanceConfigTopicDistributionResult',
]

@pulumi.output_type
class NamespaceRetentionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeInMb":
            suggest = "size_in_mb"
        elif key == "timeInMinutes":
            suggest = "time_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NamespaceRetentionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NamespaceRetentionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NamespaceRetentionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_in_mb: Optional[int] = None,
                 time_in_minutes: Optional[int] = None):
        """
        :param int size_in_mb: the size of message to retain.
        :param int time_in_minutes: the time of message to retain.
        """
        if size_in_mb is not None:
            pulumi.set(__self__, "size_in_mb", size_in_mb)
        if time_in_minutes is not None:
            pulumi.set(__self__, "time_in_minutes", time_in_minutes)

    @property
    @pulumi.getter(name="sizeInMb")
    def size_in_mb(self) -> Optional[int]:
        """
        the size of message to retain.
        """
        return pulumi.get(self, "size_in_mb")

    @property
    @pulumi.getter(name="timeInMinutes")
    def time_in_minutes(self) -> Optional[int]:
        """
        the time of message to retain.
        """
        return pulumi.get(self, "time_in_minutes")


@pulumi.output_type
class ProfessionalClusterVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProfessionalClusterVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProfessionalClusterVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProfessionalClusterVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: Id of Subnet.
        :param str vpc_id: Id of VPC.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Id of Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Id of VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class RocketmqClusterVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RocketmqClusterVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RocketmqClusterVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RocketmqClusterVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: Vpc ID.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        Vpc ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class RocketmqVipInstanceIpRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRule":
            suggest = "ip_rule"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RocketmqVipInstanceIpRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RocketmqVipInstanceIpRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RocketmqVipInstanceIpRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow: bool,
                 ip_rule: str,
                 remark: str):
        """
        :param bool allow: Whether to allow or deny.
        :param str ip_rule: IP address block information.
        :param str remark: Remark.
        """
        pulumi.set(__self__, "allow", allow)
        pulumi.set(__self__, "ip_rule", ip_rule)
        pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter
    def allow(self) -> bool:
        """
        Whether to allow or deny.
        """
        return pulumi.get(self, "allow")

    @property
    @pulumi.getter(name="ipRule")
    def ip_rule(self) -> str:
        """
        IP address block information.
        """
        return pulumi.get(self, "ip_rule")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remark.
        """
        return pulumi.get(self, "remark")


@pulumi.output_type
class RocketmqVipInstanceVpcInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RocketmqVipInstanceVpcInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RocketmqVipInstanceVpcInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RocketmqVipInstanceVpcInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: VPC ID.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetProInstanceDetailClusterInfoResult(dict):
    def __init__(__self__, *,
                 can_edit_route: bool,
                 cluster_id: str,
                 cluster_name: str,
                 create_time: str,
                 max_storage: int,
                 node_distributions: Sequence['outputs.GetProInstanceDetailClusterInfoNodeDistributionResult'],
                 remark: str,
                 status: int,
                 version: str):
        """
        :param bool can_edit_route: Can the route be modifiedNote: This field may return null, indicating that no valid value can be obtained.
        :param str cluster_id: Cluster Id.
        :param str cluster_name: Cluster name.
        :param str create_time: Creation time.
        :param int max_storage: Maximum storage capacity, unit: MB.
        :param Sequence['GetProInstanceDetailClusterInfoNodeDistributionArgs'] node_distributions: Node distributionNote: This field may return null, indicating that no valid value can be obtained.
        :param str remark: Descriptive information.
        :param int status: Cluster status, 0: creating, 1: normal, 2: isolated.
        :param str version: cluster version.
        """
        pulumi.set(__self__, "can_edit_route", can_edit_route)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "node_distributions", node_distributions)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="canEditRoute")
    def can_edit_route(self) -> bool:
        """
        Can the route be modifiedNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "can_edit_route")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Cluster Id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        """
        Maximum storage capacity, unit: MB.
        """
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter(name="nodeDistributions")
    def node_distributions(self) -> Sequence['outputs.GetProInstanceDetailClusterInfoNodeDistributionResult']:
        """
        Node distributionNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "node_distributions")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Descriptive information.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Cluster status, 0: creating, 1: normal, 2: isolated.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        cluster version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetProInstanceDetailClusterInfoNodeDistributionResult(dict):
    def __init__(__self__, *,
                 node_count: int,
                 zone_id: str,
                 zone_name: str):
        """
        :param int node_count: Number of nodes.
        :param str zone_id: Availability zone ID.
        :param str zone_name: Availability zone.
        """
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Availability zone ID.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetProInstanceDetailClusterSpecInfoResult(dict):
    def __init__(__self__, *,
                 max_band_width: int,
                 max_namespaces: int,
                 max_topics: int,
                 max_tps: int,
                 scalable_tps: int,
                 spec_name: str):
        """
        :param int max_band_width: peak bandwidth. Unit: mbps.
        :param int max_namespaces: Maximum number of namespaces.
        :param int max_topics: Maximum number of topic partitions.
        :param int max_tps: peak tps.
        :param int scalable_tps: Elastic TPS outside specificationNote: This field may return null, indicating that no valid value can be obtained.
        :param str spec_name: Cluster specification name.
        """
        pulumi.set(__self__, "max_band_width", max_band_width)
        pulumi.set(__self__, "max_namespaces", max_namespaces)
        pulumi.set(__self__, "max_topics", max_topics)
        pulumi.set(__self__, "max_tps", max_tps)
        pulumi.set(__self__, "scalable_tps", scalable_tps)
        pulumi.set(__self__, "spec_name", spec_name)

    @property
    @pulumi.getter(name="maxBandWidth")
    def max_band_width(self) -> int:
        """
        peak bandwidth. Unit: mbps.
        """
        return pulumi.get(self, "max_band_width")

    @property
    @pulumi.getter(name="maxNamespaces")
    def max_namespaces(self) -> int:
        """
        Maximum number of namespaces.
        """
        return pulumi.get(self, "max_namespaces")

    @property
    @pulumi.getter(name="maxTopics")
    def max_topics(self) -> int:
        """
        Maximum number of topic partitions.
        """
        return pulumi.get(self, "max_topics")

    @property
    @pulumi.getter(name="maxTps")
    def max_tps(self) -> int:
        """
        peak tps.
        """
        return pulumi.get(self, "max_tps")

    @property
    @pulumi.getter(name="scalableTps")
    def scalable_tps(self) -> int:
        """
        Elastic TPS outside specificationNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "scalable_tps")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Cluster specification name.
        """
        return pulumi.get(self, "spec_name")


@pulumi.output_type
class GetProInstanceDetailNetworkAccessPointInfoResult(dict):
    def __init__(__self__, *,
                 endpoint: str,
                 instance_id: str,
                 route_type: int,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str endpoint: access address.
        :param str instance_id: instance id.
        :param int route_type: Access point type: 0: support network access point 1: VPC access point 2: public network access point.
        :param str subnet_id: Subnet id, support network and public network access point, this field is emptyNote: This field may return null, indicating that no valid value can be obtained.
        :param str vpc_id: The id of the vpc, the supporting network and the access point of the public network, this field is emptyNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        """
        access address.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> int:
        """
        Access point type: 0: support network access point 1: VPC access point 2: public network access point.
        """
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet id, support network and public network access point, this field is emptyNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        The id of the vpc, the supporting network and the access point of the public network, this field is emptyNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetProInstancesFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: The name of the filter parameter.
        :param Sequence[str] values: value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the filter parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 config_display: str,
                 create_time: str,
                 expire_time: int,
                 instance_id: str,
                 instance_name: str,
                 instance_version: str,
                 max_band_width: int,
                 max_storage: int,
                 max_tps: int,
                 pay_mode: int,
                 remark: str,
                 scalable_tps: int,
                 spec_name: str,
                 status: int,
                 subnet_id: str,
                 tags: Sequence['outputs.GetProInstancesInstanceTagResult'],
                 vpc_id: str):
        """
        :param int auto_renew_flag: Automatic renewal mark, 0 indicates the default state (the user has not set it, that is, the initial state is manual renewal), 1 indicates automatic renewal, 2 indicates that the automatic renewal is not specified (user setting).
        :param str config_display: Instance configuration specification name.
        :param str create_time: Create time.
        :param int expire_time: Instance expiration time, in milliseconds.
        :param str instance_id: Instance ID.
        :param str instance_name: Instance name.
        :param str instance_version: Instance version.
        :param int max_band_width: Peak bandwidth. Unit: mbps.
        :param int max_storage: Storage capacity, in GB.
        :param int max_tps: Peak TPS.
        :param int pay_mode: 0-postpaid, 1-prepaid.
        :param str remark: RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :param int scalable_tps: Elastic TPS outside specificationNote: This field may return null, indicating that no valid value can be obtained.
        :param str spec_name: Instance Configuration ID.
        :param int status: Instance status, 0-creating, 1-normal, 2-isolating, 3-destroyed, 4-abnormal, 5-delivery failure, 6-allocation change, 7-allocation failure.
        :param str subnet_id: Subnet idNote: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['GetProInstancesInstanceTagArgs'] tags: Tag list.
        :param str vpc_id: Id of the VPCNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "config_display", config_display)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_version", instance_version)
        pulumi.set(__self__, "max_band_width", max_band_width)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "max_tps", max_tps)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "scalable_tps", scalable_tps)
        pulumi.set(__self__, "spec_name", spec_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        Automatic renewal mark, 0 indicates the default state (the user has not set it, that is, the initial state is manual renewal), 1 indicates automatic renewal, 2 indicates that the automatic renewal is not specified (user setting).
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="configDisplay")
    def config_display(self) -> str:
        """
        Instance configuration specification name.
        """
        return pulumi.get(self, "config_display")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> int:
        """
        Instance expiration time, in milliseconds.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> str:
        """
        Instance version.
        """
        return pulumi.get(self, "instance_version")

    @property
    @pulumi.getter(name="maxBandWidth")
    def max_band_width(self) -> int:
        """
        Peak bandwidth. Unit: mbps.
        """
        return pulumi.get(self, "max_band_width")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        """
        Storage capacity, in GB.
        """
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter(name="maxTps")
    def max_tps(self) -> int:
        """
        Peak TPS.
        """
        return pulumi.get(self, "max_tps")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        """
        0-postpaid, 1-prepaid.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        RemarksNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="scalableTps")
    def scalable_tps(self) -> int:
        """
        Elastic TPS outside specificationNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "scalable_tps")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Instance Configuration ID.
        """
        return pulumi.get(self, "spec_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Instance status, 0-creating, 1-normal, 2-isolating, 3-destroyed, 4-abnormal, 5-delivery failure, 6-allocation change, 7-allocation failure.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet idNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetProInstancesInstanceTagResult']:
        """
        Tag list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Id of the VPCNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetProInstancesInstanceTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetPublishersFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: The name of the filter parameter.
        :param Sequence[str] values: value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the filter parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPublishersPublisherResult(dict):
    def __init__(__self__, *,
                 address: str,
                 average_msg_size: float,
                 client_version: str,
                 connected_since: str,
                 msg_rate_in: float,
                 msg_throughput_in: float,
                 partition: int,
                 producer_id: int,
                 producer_name: str):
        """
        :param str address: producer addressNote: This field may return null, indicating that no valid value can be obtained.
        :param float average_msg_size: Average message size (bytes)Note: This field may return null, indicating that no valid value can be obtained.
        :param str client_version: client versionNote: This field may return null, indicating that no valid value can be obtained.
        :param str connected_since: connection timeNote: This field may return null, indicating that no valid value can be obtained.
        :param float msg_rate_in: Message production rate (articles/second)Note: This field may return null, indicating that no valid value can be obtained.
        :param float msg_throughput_in: Message production throughput rate (bytes/second)Note: This field may return null, indicating that no valid value can be obtained.
        :param int partition: The topic partition number of the producer connectionNote: This field may return null, indicating that no valid value can be obtained.
        :param int producer_id: producer idNote: This field may return null, indicating that no valid value can be obtained.
        :param str producer_name: producer nameNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "average_msg_size", average_msg_size)
        pulumi.set(__self__, "client_version", client_version)
        pulumi.set(__self__, "connected_since", connected_since)
        pulumi.set(__self__, "msg_rate_in", msg_rate_in)
        pulumi.set(__self__, "msg_throughput_in", msg_throughput_in)
        pulumi.set(__self__, "partition", partition)
        pulumi.set(__self__, "producer_id", producer_id)
        pulumi.set(__self__, "producer_name", producer_name)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        producer addressNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="averageMsgSize")
    def average_msg_size(self) -> float:
        """
        Average message size (bytes)Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "average_msg_size")

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> str:
        """
        client versionNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter(name="connectedSince")
    def connected_since(self) -> str:
        """
        connection timeNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "connected_since")

    @property
    @pulumi.getter(name="msgRateIn")
    def msg_rate_in(self) -> float:
        """
        Message production rate (articles/second)Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "msg_rate_in")

    @property
    @pulumi.getter(name="msgThroughputIn")
    def msg_throughput_in(self) -> float:
        """
        Message production throughput rate (bytes/second)Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "msg_throughput_in")

    @property
    @pulumi.getter
    def partition(self) -> int:
        """
        The topic partition number of the producer connectionNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "partition")

    @property
    @pulumi.getter(name="producerId")
    def producer_id(self) -> int:
        """
        producer idNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "producer_id")

    @property
    @pulumi.getter(name="producerName")
    def producer_name(self) -> str:
        """
        producer nameNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "producer_name")


@pulumi.output_type
class GetPublishersSortResult(dict):
    def __init__(__self__, *,
                 name: str,
                 order: str):
        """
        :param str name: sorter.
        :param str order: Ascending ASC, descending DESC.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        sorter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> str:
        """
        Ascending ASC, descending DESC.
        """
        return pulumi.get(self, "order")


@pulumi.output_type
class GetRabbitmqNodeListFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: The name of the filter parameter.
        :param Sequence[str] values: value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the filter parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRabbitmqNodeListNodeListResult(dict):
    def __init__(__self__, *,
                 cpu_usage: str,
                 disk_usage: str,
                 memory: int,
                 node_name: str,
                 node_status: str,
                 process_number: int):
        """
        :param str cpu_usage: CPU usageNote: This field may return null, indicating that no valid value can be obtained.
        :param str disk_usage: disk usageNote: This field may return null, indicating that no valid value can be obtained.
        :param int memory: Memory usage, in MBNote: This field may return null, indicating that no valid value can be obtained.
        :param str node_name: node nameNote: This field may return null, indicating that no valid value can be obtained.
        :param str node_status: node statusNote: This field may return null, indicating that no valid value can be obtained.
        :param int process_number: Number of Erlang processes for RabbitmqNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cpu_usage", cpu_usage)
        pulumi.set(__self__, "disk_usage", disk_usage)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "node_name", node_name)
        pulumi.set(__self__, "node_status", node_status)
        pulumi.set(__self__, "process_number", process_number)

    @property
    @pulumi.getter(name="cpuUsage")
    def cpu_usage(self) -> str:
        """
        CPU usageNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cpu_usage")

    @property
    @pulumi.getter(name="diskUsage")
    def disk_usage(self) -> str:
        """
        disk usageNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "disk_usage")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory usage, in MBNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="nodeName")
    def node_name(self) -> str:
        """
        node nameNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "node_name")

    @property
    @pulumi.getter(name="nodeStatus")
    def node_status(self) -> str:
        """
        node statusNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "node_status")

    @property
    @pulumi.getter(name="processNumber")
    def process_number(self) -> int:
        """
        Number of Erlang processes for RabbitmqNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "process_number")


@pulumi.output_type
class GetRabbitmqVipInstanceFilterResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param str name: The name of the filter parameter.
        :param Sequence[str] values: value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the filter parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRabbitmqVipInstanceInstanceResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 config_display: str,
                 exception_information: str,
                 expire_time: int,
                 instance_id: str,
                 instance_name: str,
                 instance_version: str,
                 max_band_width: int,
                 max_storage: int,
                 max_tps: int,
                 node_count: int,
                 pay_mode: int,
                 remark: str,
                 spec_name: str,
                 status: int):
        """
        :param int auto_renew_flag: Automatic renewal mark, 0 indicates the default state (the user has not set it, that is, the initial state is manual renewal), 1 indicates automatic renewal, 2 indicates that the automatic renewal is not specified (user setting).
        :param str config_display: Instance configuration specification name.
        :param str exception_information: The cluster is abnormal.Note: This field may return null, indicating that no valid value can be obtained.
        :param int expire_time: Instance expiration time, in milliseconds.
        :param str instance_id: instance id.
        :param str instance_name: instance name.
        :param str instance_version: instance versionNote: This field may return null, indicating that no valid value can be obtained.
        :param int max_band_width: Peak bandwidth, in Mbps.
        :param int max_storage: Storage capacity, in GB.
        :param int max_tps: Peak TPS.
        :param int node_count: Number of nodes.
        :param int pay_mode: 0-postpaid, 1-prepaid.
        :param str remark: RemarksNote: This field may return null, indicating that no valid value can be obtained.
        :param str spec_name: Instance Configuration ID.
        :param int status: Instance status, 0 means creating, 1 means normal, 2 means isolating, 3 means destroyed, 4 - abnormal, 5 - delivery failed.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "config_display", config_display)
        pulumi.set(__self__, "exception_information", exception_information)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_version", instance_version)
        pulumi.set(__self__, "max_band_width", max_band_width)
        pulumi.set(__self__, "max_storage", max_storage)
        pulumi.set(__self__, "max_tps", max_tps)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "spec_name", spec_name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        Automatic renewal mark, 0 indicates the default state (the user has not set it, that is, the initial state is manual renewal), 1 indicates automatic renewal, 2 indicates that the automatic renewal is not specified (user setting).
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="configDisplay")
    def config_display(self) -> str:
        """
        Instance configuration specification name.
        """
        return pulumi.get(self, "config_display")

    @property
    @pulumi.getter(name="exceptionInformation")
    def exception_information(self) -> str:
        """
        The cluster is abnormal.Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "exception_information")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> int:
        """
        Instance expiration time, in milliseconds.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceVersion")
    def instance_version(self) -> str:
        """
        instance versionNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "instance_version")

    @property
    @pulumi.getter(name="maxBandWidth")
    def max_band_width(self) -> int:
        """
        Peak bandwidth, in Mbps.
        """
        return pulumi.get(self, "max_band_width")

    @property
    @pulumi.getter(name="maxStorage")
    def max_storage(self) -> int:
        """
        Storage capacity, in GB.
        """
        return pulumi.get(self, "max_storage")

    @property
    @pulumi.getter(name="maxTps")
    def max_tps(self) -> int:
        """
        Peak TPS.
        """
        return pulumi.get(self, "max_tps")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> int:
        """
        0-postpaid, 1-prepaid.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        RemarksNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        Instance Configuration ID.
        """
        return pulumi.get(self, "spec_name")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Instance status, 0 means creating, 1 means normal, 2 means isolating, 3 means destroyed, 4 - abnormal, 5 - delivery failed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRocketmqClusterClusterListResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetRocketmqClusterClusterListConfigResult'],
                 infos: Sequence['outputs.GetRocketmqClusterClusterListInfoResult'],
                 status: int):
        """
        :param Sequence['GetRocketmqClusterClusterListConfigArgs'] configs: Cluster configuration information.
        :param Sequence['GetRocketmqClusterClusterListInfoArgs'] infos: Basic cluster information.
        :param int status: Cluster status. `0`: Creating; `1`: Normal; `2`: Terminating; `3`: Deleted; `4`: Isolated; `5`: Creation failed; `6`: Deletion failed.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetRocketmqClusterClusterListConfigResult']:
        """
        Cluster configuration information.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetRocketmqClusterClusterListInfoResult']:
        """
        Basic cluster information.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Cluster status. `0`: Creating; `1`: Normal; `2`: Terminating; `3`: Deleted; `4`: Isolated; `5`: Creation failed; `6`: Deletion failed.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetRocketmqClusterClusterListConfigResult(dict):
    def __init__(__self__, *,
                 max_group_num: int,
                 max_latency_time: int,
                 max_namespace_num: int,
                 max_retention_time: int,
                 max_topic_num: int,
                 max_tps_per_namespace: int,
                 used_group_num: int,
                 used_namespace_num: int,
                 used_topic_num: int):
        """
        :param int max_group_num: Maximum number of groups.
        :param int max_latency_time: Maximum message delay in millisecond.
        :param int max_namespace_num: Maximum number of namespaces.
        :param int max_retention_time: Maximum message retention period in milliseconds.
        :param int max_topic_num: Maximum number of topics.
        :param int max_tps_per_namespace: Maximum TPS per namespace.
        :param int used_group_num: Number of used groups.
        :param int used_namespace_num: Number of used namespaces.
        :param int used_topic_num: Number of used topics.
        """
        pulumi.set(__self__, "max_group_num", max_group_num)
        pulumi.set(__self__, "max_latency_time", max_latency_time)
        pulumi.set(__self__, "max_namespace_num", max_namespace_num)
        pulumi.set(__self__, "max_retention_time", max_retention_time)
        pulumi.set(__self__, "max_topic_num", max_topic_num)
        pulumi.set(__self__, "max_tps_per_namespace", max_tps_per_namespace)
        pulumi.set(__self__, "used_group_num", used_group_num)
        pulumi.set(__self__, "used_namespace_num", used_namespace_num)
        pulumi.set(__self__, "used_topic_num", used_topic_num)

    @property
    @pulumi.getter(name="maxGroupNum")
    def max_group_num(self) -> int:
        """
        Maximum number of groups.
        """
        return pulumi.get(self, "max_group_num")

    @property
    @pulumi.getter(name="maxLatencyTime")
    def max_latency_time(self) -> int:
        """
        Maximum message delay in millisecond.
        """
        return pulumi.get(self, "max_latency_time")

    @property
    @pulumi.getter(name="maxNamespaceNum")
    def max_namespace_num(self) -> int:
        """
        Maximum number of namespaces.
        """
        return pulumi.get(self, "max_namespace_num")

    @property
    @pulumi.getter(name="maxRetentionTime")
    def max_retention_time(self) -> int:
        """
        Maximum message retention period in milliseconds.
        """
        return pulumi.get(self, "max_retention_time")

    @property
    @pulumi.getter(name="maxTopicNum")
    def max_topic_num(self) -> int:
        """
        Maximum number of topics.
        """
        return pulumi.get(self, "max_topic_num")

    @property
    @pulumi.getter(name="maxTpsPerNamespace")
    def max_tps_per_namespace(self) -> int:
        """
        Maximum TPS per namespace.
        """
        return pulumi.get(self, "max_tps_per_namespace")

    @property
    @pulumi.getter(name="usedGroupNum")
    def used_group_num(self) -> int:
        """
        Number of used groups.
        """
        return pulumi.get(self, "used_group_num")

    @property
    @pulumi.getter(name="usedNamespaceNum")
    def used_namespace_num(self) -> int:
        """
        Number of used namespaces.
        """
        return pulumi.get(self, "used_namespace_num")

    @property
    @pulumi.getter(name="usedTopicNum")
    def used_topic_num(self) -> int:
        """
        Number of used topics.
        """
        return pulumi.get(self, "used_topic_num")


@pulumi.output_type
class GetRocketmqClusterClusterListInfoResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 create_time: int,
                 is_vip: bool,
                 public_end_point: str,
                 region: str,
                 remark: str,
                 rocketmq_flag: bool,
                 support_namespace_endpoint: bool,
                 vpc_end_point: str,
                 vpcs: Sequence['outputs.GetRocketmqClusterClusterListInfoVpcResult']):
        """
        :param str cluster_id: Cluster ID.
        :param str cluster_name: Cluster name.
        :param int create_time: Creation time in milliseconds.
        :param bool is_vip: Whether it is an exclusive instance.
        :param str public_end_point: Public network access address.
        :param str region: Region information.
        :param str remark: Cluster description (up to 128 characters).
        :param bool rocketmq_flag: Rocketmq cluster identification.
        :param bool support_namespace_endpoint: Whether the namespace access point is supported.
        :param str vpc_end_point: VPC access address.
        :param Sequence['GetRocketmqClusterClusterListInfoVpcArgs'] vpcs: Vpc list.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "is_vip", is_vip)
        pulumi.set(__self__, "public_end_point", public_end_point)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rocketmq_flag", rocketmq_flag)
        pulumi.set(__self__, "support_namespace_endpoint", support_namespace_endpoint)
        pulumi.set(__self__, "vpc_end_point", vpc_end_point)
        pulumi.set(__self__, "vpcs", vpcs)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Creation time in milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="isVip")
    def is_vip(self) -> bool:
        """
        Whether it is an exclusive instance.
        """
        return pulumi.get(self, "is_vip")

    @property
    @pulumi.getter(name="publicEndPoint")
    def public_end_point(self) -> str:
        """
        Public network access address.
        """
        return pulumi.get(self, "public_end_point")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region information.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Cluster description (up to 128 characters).
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="rocketmqFlag")
    def rocketmq_flag(self) -> bool:
        """
        Rocketmq cluster identification.
        """
        return pulumi.get(self, "rocketmq_flag")

    @property
    @pulumi.getter(name="supportNamespaceEndpoint")
    def support_namespace_endpoint(self) -> bool:
        """
        Whether the namespace access point is supported.
        """
        return pulumi.get(self, "support_namespace_endpoint")

    @property
    @pulumi.getter(name="vpcEndPoint")
    def vpc_end_point(self) -> str:
        """
        VPC access address.
        """
        return pulumi.get(self, "vpc_end_point")

    @property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetRocketmqClusterClusterListInfoVpcResult']:
        """
        Vpc list.
        """
        return pulumi.get(self, "vpcs")


@pulumi.output_type
class GetRocketmqClusterClusterListInfoVpcResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: Vpc ID.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Vpc ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetRocketmqGroupGroupResult(dict):
    def __init__(__self__, *,
                 broadcast_enable: bool,
                 client_protocol: str,
                 consumer_num: int,
                 consumer_type: str,
                 consumption_mode: int,
                 create_time: int,
                 name: str,
                 read_enable: bool,
                 remark: str,
                 retry_partition_num: int,
                 total_accumulative: int,
                 tps: int,
                 update_time: int):
        """
        :param bool broadcast_enable: Whether to enable broadcast consumption.
        :param str client_protocol: Client protocol.
        :param int consumer_num: The number of online consumers.
        :param str consumer_type: Consumer type. Enumerated values: ACTIVELY or PASSIVELY.
        :param int consumption_mode: `0`: Cluster consumption mode; `1`: Broadcast consumption mode; `-1`: Unknown.
        :param int create_time: Creation time in milliseconds.
        :param str name: Consumer group name.
        :param bool read_enable: Whether to enable consumption.
        :param str remark: Remarks (up to 128 characters).
        :param int retry_partition_num: The number of partitions in a retry topic.
        :param int total_accumulative: The total number of heaped messages.
        :param int tps: Consumption TPS.
        :param int update_time: Modification time in milliseconds.
        """
        pulumi.set(__self__, "broadcast_enable", broadcast_enable)
        pulumi.set(__self__, "client_protocol", client_protocol)
        pulumi.set(__self__, "consumer_num", consumer_num)
        pulumi.set(__self__, "consumer_type", consumer_type)
        pulumi.set(__self__, "consumption_mode", consumption_mode)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_enable", read_enable)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "retry_partition_num", retry_partition_num)
        pulumi.set(__self__, "total_accumulative", total_accumulative)
        pulumi.set(__self__, "tps", tps)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="broadcastEnable")
    def broadcast_enable(self) -> bool:
        """
        Whether to enable broadcast consumption.
        """
        return pulumi.get(self, "broadcast_enable")

    @property
    @pulumi.getter(name="clientProtocol")
    def client_protocol(self) -> str:
        """
        Client protocol.
        """
        return pulumi.get(self, "client_protocol")

    @property
    @pulumi.getter(name="consumerNum")
    def consumer_num(self) -> int:
        """
        The number of online consumers.
        """
        return pulumi.get(self, "consumer_num")

    @property
    @pulumi.getter(name="consumerType")
    def consumer_type(self) -> str:
        """
        Consumer type. Enumerated values: ACTIVELY or PASSIVELY.
        """
        return pulumi.get(self, "consumer_type")

    @property
    @pulumi.getter(name="consumptionMode")
    def consumption_mode(self) -> int:
        """
        `0`: Cluster consumption mode; `1`: Broadcast consumption mode; `-1`: Unknown.
        """
        return pulumi.get(self, "consumption_mode")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Creation time in milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Consumer group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readEnable")
    def read_enable(self) -> bool:
        """
        Whether to enable consumption.
        """
        return pulumi.get(self, "read_enable")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks (up to 128 characters).
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="retryPartitionNum")
    def retry_partition_num(self) -> int:
        """
        The number of partitions in a retry topic.
        """
        return pulumi.get(self, "retry_partition_num")

    @property
    @pulumi.getter(name="totalAccumulative")
    def total_accumulative(self) -> int:
        """
        The total number of heaped messages.
        """
        return pulumi.get(self, "total_accumulative")

    @property
    @pulumi.getter
    def tps(self) -> int:
        """
        Consumption TPS.
        """
        return pulumi.get(self, "tps")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        Modification time in milliseconds.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetRocketmqMessagesMessageTrackResult(dict):
    def __init__(__self__, *,
                 consume_status: str,
                 exception_desc: str,
                 group: str,
                 track_type: str):
        """
        :param str consume_status: consumption status.
        :param str exception_desc: Exception informationNote: This field may return null, indicating that no valid value can be obtained.
        :param str group: consumer group.
        :param str track_type: message track type.
        """
        pulumi.set(__self__, "consume_status", consume_status)
        pulumi.set(__self__, "exception_desc", exception_desc)
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "track_type", track_type)

    @property
    @pulumi.getter(name="consumeStatus")
    def consume_status(self) -> str:
        """
        consumption status.
        """
        return pulumi.get(self, "consume_status")

    @property
    @pulumi.getter(name="exceptionDesc")
    def exception_desc(self) -> str:
        """
        Exception informationNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "exception_desc")

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        consumer group.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="trackType")
    def track_type(self) -> str:
        """
        message track type.
        """
        return pulumi.get(self, "track_type")


@pulumi.output_type
class GetRocketmqNamespaceNamespaceResult(dict):
    def __init__(__self__, *,
                 namespace_id: str,
                 public_endpoint: str,
                 remark: str,
                 retention_time: int,
                 ttl: int,
                 vpc_endpoint: str):
        """
        :param str namespace_id: Namespace name, which can contain 3-64 letters, digits, hyphens, and underscores.
        :param str public_endpoint: Public network access point address.
        :param str remark: Remarks (up to 128 characters).
        :param int retention_time: Retention time of persisted messages in milliseconds.
        :param int ttl: Retention time of unconsumed messages in milliseconds. Value range: 60 seconds-15 days.
        :param str vpc_endpoint: VPC access point address.
        """
        pulumi.set(__self__, "namespace_id", namespace_id)
        pulumi.set(__self__, "public_endpoint", public_endpoint)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "retention_time", retention_time)
        pulumi.set(__self__, "ttl", ttl)
        pulumi.set(__self__, "vpc_endpoint", vpc_endpoint)

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> str:
        """
        Namespace name, which can contain 3-64 letters, digits, hyphens, and underscores.
        """
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> str:
        """
        Public network access point address.
        """
        return pulumi.get(self, "public_endpoint")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks (up to 128 characters).
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="retentionTime")
    def retention_time(self) -> int:
        """
        Retention time of persisted messages in milliseconds.
        """
        return pulumi.get(self, "retention_time")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        """
        Retention time of unconsumed messages in milliseconds. Value range: 60 seconds-15 days.
        """
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter(name="vpcEndpoint")
    def vpc_endpoint(self) -> str:
        """
        VPC access point address.
        """
        return pulumi.get(self, "vpc_endpoint")


@pulumi.output_type
class GetRocketmqRoleRoleSetResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 remark: str,
                 role_name: str,
                 token: str,
                 update_time: str):
        """
        :param str create_time: Creation time.
        :param str remark: Remarks.
        :param str role_name: Fuzzy query by role name.
        :param str token: Value of the role token.
        :param str update_time: Update time.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remarks.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> str:
        """
        Fuzzy query by role name.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        Value of the role token.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        Update time.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetRocketmqTopicTopicResult(dict):
    def __init__(__self__, *,
                 create_time: int,
                 name: str,
                 partition_num: int,
                 remark: str,
                 update_time: int):
        """
        :param int create_time: Creation time in milliseconds.
        :param str name: Topic name.
        :param int partition_num: The number of read/write partitions.
        :param str remark: Topic name.
        :param int update_time: Update time in milliseconds.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partition_num", partition_num)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Creation time in milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Topic name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partitionNum")
    def partition_num(self) -> int:
        """
        The number of read/write partitions.
        """
        return pulumi.get(self, "partition_num")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Topic name.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> int:
        """
        Update time in milliseconds.
        """
        return pulumi.get(self, "update_time")


@pulumi.output_type
class GetVipInstanceClusterInfoResult(dict):
    def __init__(__self__, *,
                 cluster_id: str,
                 cluster_name: str,
                 create_time: int,
                 http_public_endpoint: str,
                 http_vpc_endpoint: str,
                 is_vip: bool,
                 isolate_time: int,
                 public_end_point: str,
                 region: str,
                 remark: str,
                 rocket_mq_flag: bool,
                 status: int,
                 support_namespace_endpoint: bool,
                 vpc_end_point: str,
                 vpcs: Sequence['outputs.GetVipInstanceClusterInfoVpcResult']):
        """
        :param str cluster_id: Cluster ID.
        :param str cluster_name: Cluster Name.
        :param int create_time: Creation time, in milliseconds.
        :param str http_public_endpoint: HTTP protocol public network access addressNote: This field may return null, indicating that no valid value can be obtained.
        :param str http_vpc_endpoint: HTTP protocol VPC access addressNote: This field may return null, indicating that no valid value can be obtained.
        :param bool is_vip: Whether it is a dedicated instanceNote: This field may return null, indicating that no valid value can be obtained.
        :param int isolate_time: Overdue suspension time, in millisecondsNote: This field may return null, indicating that no valid value can be obtained.
        :param str public_end_point: Public network access address.
        :param str region: Region.
        :param str remark: Cluster description informationNote: This field may return null, indicating that no valid value can be obtained.
        :param bool rocket_mq_flag: Rocketmq cluster identificationNote: This field may return null, indicating that no valid value can be obtained.
        :param int status: Billing status, 1 means normal, 2 means stopped, 3 means destroyedNote: This field may return null, indicating that no valid value can be obtained.
        :param bool support_namespace_endpoint: Whether namespace access points are supportedNote: This field may return null, indicating that no valid value can be obtained.
        :param str vpc_end_point: VPC access address.
        :param Sequence['GetVipInstanceClusterInfoVpcArgs'] vpcs: VPC informationNote: This field may return null, indicating that no valid value can be obtained.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_name", cluster_name)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "http_public_endpoint", http_public_endpoint)
        pulumi.set(__self__, "http_vpc_endpoint", http_vpc_endpoint)
        pulumi.set(__self__, "is_vip", is_vip)
        pulumi.set(__self__, "isolate_time", isolate_time)
        pulumi.set(__self__, "public_end_point", public_end_point)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rocket_mq_flag", rocket_mq_flag)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "support_namespace_endpoint", support_namespace_endpoint)
        pulumi.set(__self__, "vpc_end_point", vpc_end_point)
        pulumi.set(__self__, "vpcs", vpcs)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        """
        Cluster Name.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        Creation time, in milliseconds.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="httpPublicEndpoint")
    def http_public_endpoint(self) -> str:
        """
        HTTP protocol public network access addressNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "http_public_endpoint")

    @property
    @pulumi.getter(name="httpVpcEndpoint")
    def http_vpc_endpoint(self) -> str:
        """
        HTTP protocol VPC access addressNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "http_vpc_endpoint")

    @property
    @pulumi.getter(name="isVip")
    def is_vip(self) -> bool:
        """
        Whether it is a dedicated instanceNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "is_vip")

    @property
    @pulumi.getter(name="isolateTime")
    def isolate_time(self) -> int:
        """
        Overdue suspension time, in millisecondsNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "isolate_time")

    @property
    @pulumi.getter(name="publicEndPoint")
    def public_end_point(self) -> str:
        """
        Public network access address.
        """
        return pulumi.get(self, "public_end_point")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Cluster description informationNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="rocketMqFlag")
    def rocket_mq_flag(self) -> bool:
        """
        Rocketmq cluster identificationNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "rocket_mq_flag")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Billing status, 1 means normal, 2 means stopped, 3 means destroyedNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportNamespaceEndpoint")
    def support_namespace_endpoint(self) -> bool:
        """
        Whether namespace access points are supportedNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "support_namespace_endpoint")

    @property
    @pulumi.getter(name="vpcEndPoint")
    def vpc_end_point(self) -> str:
        """
        VPC access address.
        """
        return pulumi.get(self, "vpc_end_point")

    @property
    @pulumi.getter
    def vpcs(self) -> Sequence['outputs.GetVipInstanceClusterInfoVpcResult']:
        """
        VPC informationNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vpcs")


@pulumi.output_type
class GetVipInstanceClusterInfoVpcResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: Subnet Id.
        :param str vpc_id: VPC ID.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet Id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVipInstanceInstanceConfigResult(dict):
    def __init__(__self__, *,
                 config_display: str,
                 max_group_num: int,
                 max_namespace_num: int,
                 max_queues_per_topic: int,
                 max_topic_num: int,
                 max_tps_per_namespace: int,
                 node_count: int,
                 node_distributions: Sequence['outputs.GetVipInstanceInstanceConfigNodeDistributionResult'],
                 topic_distributions: Sequence['outputs.GetVipInstanceInstanceConfigTopicDistributionResult'],
                 used_group_num: int,
                 used_namespace_num: int,
                 used_topic_num: int):
        """
        :param str config_display: Cluster type.
        :param int max_group_num: Maximum number of groups.
        :param int max_namespace_num: Maximum number of namespaces.
        :param int max_queues_per_topic: Maximum number of queues per topicNote: This field may return null, indicating that no valid value can be obtained.
        :param int max_topic_num: Maximum number of topics.
        :param int max_tps_per_namespace: Single namespace TPS upper limit.
        :param int node_count: Number of cluster nodes.
        :param Sequence['GetVipInstanceInstanceConfigNodeDistributionArgs'] node_distributions: Node distribution.
        :param Sequence['GetVipInstanceInstanceConfigTopicDistributionArgs'] topic_distributions: Topic distribution.
        :param int used_group_num: Number of used groups.
        :param int used_namespace_num: Number of used namespaces.
        :param int used_topic_num: The number of topics used.
        """
        pulumi.set(__self__, "config_display", config_display)
        pulumi.set(__self__, "max_group_num", max_group_num)
        pulumi.set(__self__, "max_namespace_num", max_namespace_num)
        pulumi.set(__self__, "max_queues_per_topic", max_queues_per_topic)
        pulumi.set(__self__, "max_topic_num", max_topic_num)
        pulumi.set(__self__, "max_tps_per_namespace", max_tps_per_namespace)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "node_distributions", node_distributions)
        pulumi.set(__self__, "topic_distributions", topic_distributions)
        pulumi.set(__self__, "used_group_num", used_group_num)
        pulumi.set(__self__, "used_namespace_num", used_namespace_num)
        pulumi.set(__self__, "used_topic_num", used_topic_num)

    @property
    @pulumi.getter(name="configDisplay")
    def config_display(self) -> str:
        """
        Cluster type.
        """
        return pulumi.get(self, "config_display")

    @property
    @pulumi.getter(name="maxGroupNum")
    def max_group_num(self) -> int:
        """
        Maximum number of groups.
        """
        return pulumi.get(self, "max_group_num")

    @property
    @pulumi.getter(name="maxNamespaceNum")
    def max_namespace_num(self) -> int:
        """
        Maximum number of namespaces.
        """
        return pulumi.get(self, "max_namespace_num")

    @property
    @pulumi.getter(name="maxQueuesPerTopic")
    def max_queues_per_topic(self) -> int:
        """
        Maximum number of queues per topicNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "max_queues_per_topic")

    @property
    @pulumi.getter(name="maxTopicNum")
    def max_topic_num(self) -> int:
        """
        Maximum number of topics.
        """
        return pulumi.get(self, "max_topic_num")

    @property
    @pulumi.getter(name="maxTpsPerNamespace")
    def max_tps_per_namespace(self) -> int:
        """
        Single namespace TPS upper limit.
        """
        return pulumi.get(self, "max_tps_per_namespace")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of cluster nodes.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="nodeDistributions")
    def node_distributions(self) -> Sequence['outputs.GetVipInstanceInstanceConfigNodeDistributionResult']:
        """
        Node distribution.
        """
        return pulumi.get(self, "node_distributions")

    @property
    @pulumi.getter(name="topicDistributions")
    def topic_distributions(self) -> Sequence['outputs.GetVipInstanceInstanceConfigTopicDistributionResult']:
        """
        Topic distribution.
        """
        return pulumi.get(self, "topic_distributions")

    @property
    @pulumi.getter(name="usedGroupNum")
    def used_group_num(self) -> int:
        """
        Number of used groups.
        """
        return pulumi.get(self, "used_group_num")

    @property
    @pulumi.getter(name="usedNamespaceNum")
    def used_namespace_num(self) -> int:
        """
        Number of used namespaces.
        """
        return pulumi.get(self, "used_namespace_num")

    @property
    @pulumi.getter(name="usedTopicNum")
    def used_topic_num(self) -> int:
        """
        The number of topics used.
        """
        return pulumi.get(self, "used_topic_num")


@pulumi.output_type
class GetVipInstanceInstanceConfigNodeDistributionResult(dict):
    def __init__(__self__, *,
                 node_count: int,
                 zone_id: str,
                 zone_name: str):
        """
        :param int node_count: Number of nodes.
        :param str zone_id: Availability zone id.
        :param str zone_name: Availability zone.
        """
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "zone_id", zone_id)
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Availability zone id.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> str:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone_name")


@pulumi.output_type
class GetVipInstanceInstanceConfigTopicDistributionResult(dict):
    def __init__(__self__, *,
                 count: int,
                 topic_type: str):
        """
        :param int count: Number of topics.
        :param str topic_type: Topic type.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "topic_type", topic_type)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        Number of topics.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="topicType")
    def topic_type(self) -> str:
        """
        Topic type.
        """
        return pulumi.get(self, "topic_type")


