# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetEnvironmentAttributesResult',
    'AwaitableGetEnvironmentAttributesResult',
    'get_environment_attributes',
    'get_environment_attributes_output',
]

@pulumi.output_type
class GetEnvironmentAttributesResult:
    """
    A collection of values returned by getEnvironmentAttributes.
    """
    def __init__(__self__, cluster_id=None, environment_id=None, id=None, msg_ttl=None, rate_in_byte=None, rate_in_size=None, remark=None, replicas=None, result_output_file=None, retention_hours=None, retention_size=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if environment_id and not isinstance(environment_id, str):
            raise TypeError("Expected argument 'environment_id' to be a str")
        pulumi.set(__self__, "environment_id", environment_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if msg_ttl and not isinstance(msg_ttl, int):
            raise TypeError("Expected argument 'msg_ttl' to be a int")
        pulumi.set(__self__, "msg_ttl", msg_ttl)
        if rate_in_byte and not isinstance(rate_in_byte, int):
            raise TypeError("Expected argument 'rate_in_byte' to be a int")
        pulumi.set(__self__, "rate_in_byte", rate_in_byte)
        if rate_in_size and not isinstance(rate_in_size, int):
            raise TypeError("Expected argument 'rate_in_size' to be a int")
        pulumi.set(__self__, "rate_in_size", rate_in_size)
        if remark and not isinstance(remark, str):
            raise TypeError("Expected argument 'remark' to be a str")
        pulumi.set(__self__, "remark", remark)
        if replicas and not isinstance(replicas, int):
            raise TypeError("Expected argument 'replicas' to be a int")
        pulumi.set(__self__, "replicas", replicas)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if retention_hours and not isinstance(retention_hours, int):
            raise TypeError("Expected argument 'retention_hours' to be a int")
        pulumi.set(__self__, "retention_hours", retention_hours)
        if retention_size and not isinstance(retention_size, int):
            raise TypeError("Expected argument 'retention_size' to be a int")
        pulumi.set(__self__, "retention_size", retention_size)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> str:
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="msgTtl")
    def msg_ttl(self) -> int:
        """
        Expiration time of unconsumed messages, unit second, maximum 1296000 (15 days).
        """
        return pulumi.get(self, "msg_ttl")

    @property
    @pulumi.getter(name="rateInByte")
    def rate_in_byte(self) -> int:
        """
        Consumption rate limit, unit byte/second, 0 unlimited rate.
        """
        return pulumi.get(self, "rate_in_byte")

    @property
    @pulumi.getter(name="rateInSize")
    def rate_in_size(self) -> int:
        """
        Consumption rate limit, unit number/second, 0 is unlimited.
        """
        return pulumi.get(self, "rate_in_size")

    @property
    @pulumi.getter
    def remark(self) -> str:
        """
        Remark.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def replicas(self) -> int:
        """
        Duplicate number.
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="retentionHours")
    def retention_hours(self) -> int:
        """
        Consumed message storage policy, unit hour, 0 will be deleted immediately after consumption.
        """
        return pulumi.get(self, "retention_hours")

    @property
    @pulumi.getter(name="retentionSize")
    def retention_size(self) -> int:
        """
        Consumed message storage strategy, unit G, 0 Delete immediately after consumption.
        """
        return pulumi.get(self, "retention_size")


class AwaitableGetEnvironmentAttributesResult(GetEnvironmentAttributesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentAttributesResult(
            cluster_id=self.cluster_id,
            environment_id=self.environment_id,
            id=self.id,
            msg_ttl=self.msg_ttl,
            rate_in_byte=self.rate_in_byte,
            rate_in_size=self.rate_in_size,
            remark=self.remark,
            replicas=self.replicas,
            result_output_file=self.result_output_file,
            retention_hours=self.retention_hours,
            retention_size=self.retention_size)


def get_environment_attributes(cluster_id: Optional[str] = None,
                               environment_id: Optional[str] = None,
                               result_output_file: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentAttributesResult:
    """
    Use this data source to query detailed information of tdmq environment_attributes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_instance = tencentcloud.tdmq.Instance("exampleInstance",
        cluster_name="tf_example",
        remark="remark.",
        tags={
            "createdBy": "terraform",
        })
    example_namespace = tencentcloud.tdmq.Namespace("exampleNamespace",
        environ_name="tf_example",
        msg_ttl=300,
        cluster_id=example_instance.id,
        remark="remark.")
    example_environment_attributes = tencentcloud.Tdmq.get_environment_attributes_output(environment_id=example_namespace.environ_name,
        cluster_id=example_instance.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: ID of the Pulsar cluster.
    :param str environment_id: Environment (namespace) name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['environmentId'] = environment_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tdmq/getEnvironmentAttributes:getEnvironmentAttributes', __args__, opts=opts, typ=GetEnvironmentAttributesResult).value

    return AwaitableGetEnvironmentAttributesResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        environment_id=pulumi.get(__ret__, 'environment_id'),
        id=pulumi.get(__ret__, 'id'),
        msg_ttl=pulumi.get(__ret__, 'msg_ttl'),
        rate_in_byte=pulumi.get(__ret__, 'rate_in_byte'),
        rate_in_size=pulumi.get(__ret__, 'rate_in_size'),
        remark=pulumi.get(__ret__, 'remark'),
        replicas=pulumi.get(__ret__, 'replicas'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        retention_hours=pulumi.get(__ret__, 'retention_hours'),
        retention_size=pulumi.get(__ret__, 'retention_size'))


@_utilities.lift_output_func(get_environment_attributes)
def get_environment_attributes_output(cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      environment_id: Optional[pulumi.Input[str]] = None,
                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnvironmentAttributesResult]:
    """
    Use this data source to query detailed information of tdmq environment_attributes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_instance = tencentcloud.tdmq.Instance("exampleInstance",
        cluster_name="tf_example",
        remark="remark.",
        tags={
            "createdBy": "terraform",
        })
    example_namespace = tencentcloud.tdmq.Namespace("exampleNamespace",
        environ_name="tf_example",
        msg_ttl=300,
        cluster_id=example_instance.id,
        remark="remark.")
    example_environment_attributes = tencentcloud.Tdmq.get_environment_attributes_output(environment_id=example_namespace.environ_name,
        cluster_id=example_instance.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str cluster_id: ID of the Pulsar cluster.
    :param str environment_id: Environment (namespace) name.
    :param str result_output_file: Used to save results.
    """
    ...
