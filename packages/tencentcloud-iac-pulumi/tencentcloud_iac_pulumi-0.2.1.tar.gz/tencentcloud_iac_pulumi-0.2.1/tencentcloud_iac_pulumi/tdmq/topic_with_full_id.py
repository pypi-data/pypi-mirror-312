# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TopicWithFullIdArgs', 'TopicWithFullId']

@pulumi.input_type
class TopicWithFullIdArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 environ_id: pulumi.Input[str],
                 partitions: pulumi.Input[int],
                 topic_name: pulumi.Input[str],
                 pulsar_topic_type: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 topic_type: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a TopicWithFullId resource.
        :param pulumi.Input[str] cluster_id: The Dedicated Cluster Id.
        :param pulumi.Input[str] environ_id: The name of tdmq namespace.
        :param pulumi.Input[int] partitions: The partitions of topic.
        :param pulumi.Input[str] topic_name: The name of topic to be created.
        :param pulumi.Input[int] pulsar_topic_type: Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3: Persistent partitioned.
        :param pulumi.Input[str] remark: Description of the namespace.
        :param pulumi.Input[int] topic_type: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue. The type of topic.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "environ_id", environ_id)
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "topic_name", topic_name)
        if pulsar_topic_type is not None:
            pulumi.set(__self__, "pulsar_topic_type", pulsar_topic_type)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if topic_type is not None:
            warnings.warn("""This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""", DeprecationWarning)
            pulumi.log.warn("""topic_type is deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""")
        if topic_type is not None:
            pulumi.set(__self__, "topic_type", topic_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        The Dedicated Cluster Id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="environId")
    def environ_id(self) -> pulumi.Input[str]:
        """
        The name of tdmq namespace.
        """
        return pulumi.get(self, "environ_id")

    @environ_id.setter
    def environ_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environ_id", value)

    @property
    @pulumi.getter
    def partitions(self) -> pulumi.Input[int]:
        """
        The partitions of topic.
        """
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: pulumi.Input[int]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        The name of topic to be created.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="pulsarTopicType")
    def pulsar_topic_type(self) -> Optional[pulumi.Input[int]]:
        """
        Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3: Persistent partitioned.
        """
        return pulumi.get(self, "pulsar_topic_type")

    @pulsar_topic_type.setter
    def pulsar_topic_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pulsar_topic_type", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the namespace.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="topicType")
    def topic_type(self) -> Optional[pulumi.Input[int]]:
        """
        This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue. The type of topic.
        """
        warnings.warn("""This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""", DeprecationWarning)
        pulumi.log.warn("""topic_type is deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""")

        return pulumi.get(self, "topic_type")

    @topic_type.setter
    def topic_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "topic_type", value)


@pulumi.input_type
class _TopicWithFullIdState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 environ_id: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[int]] = None,
                 pulsar_topic_type: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 topic_type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering TopicWithFullId resources.
        :param pulumi.Input[str] cluster_id: The Dedicated Cluster Id.
        :param pulumi.Input[str] create_time: Creation time of resource.
        :param pulumi.Input[str] environ_id: The name of tdmq namespace.
        :param pulumi.Input[int] partitions: The partitions of topic.
        :param pulumi.Input[int] pulsar_topic_type: Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3: Persistent partitioned.
        :param pulumi.Input[str] remark: Description of the namespace.
        :param pulumi.Input[str] topic_name: The name of topic to be created.
        :param pulumi.Input[int] topic_type: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue. The type of topic.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if environ_id is not None:
            pulumi.set(__self__, "environ_id", environ_id)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if pulsar_topic_type is not None:
            pulumi.set(__self__, "pulsar_topic_type", pulsar_topic_type)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)
        if topic_type is not None:
            warnings.warn("""This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""", DeprecationWarning)
            pulumi.log.warn("""topic_type is deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""")
        if topic_type is not None:
            pulumi.set(__self__, "topic_type", topic_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Dedicated Cluster Id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time of resource.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="environId")
    def environ_id(self) -> Optional[pulumi.Input[str]]:
        """
        The name of tdmq namespace.
        """
        return pulumi.get(self, "environ_id")

    @environ_id.setter
    def environ_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environ_id", value)

    @property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[int]]:
        """
        The partitions of topic.
        """
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "partitions", value)

    @property
    @pulumi.getter(name="pulsarTopicType")
    def pulsar_topic_type(self) -> Optional[pulumi.Input[int]]:
        """
        Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3: Persistent partitioned.
        """
        return pulumi.get(self, "pulsar_topic_type")

    @pulsar_topic_type.setter
    def pulsar_topic_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pulsar_topic_type", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the namespace.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of topic to be created.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="topicType")
    def topic_type(self) -> Optional[pulumi.Input[int]]:
        """
        This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue. The type of topic.
        """
        warnings.warn("""This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""", DeprecationWarning)
        pulumi.log.warn("""topic_type is deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""")

        return pulumi.get(self, "topic_type")

    @topic_type.setter
    def topic_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "topic_type", value)


class TopicWithFullId(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 environ_id: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[int]] = None,
                 pulsar_topic_type: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 topic_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provide a resource to create a TDMQ topic with full id.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.tdmq.Instance("exampleInstance",
            cluster_name="tf_example",
            remark="remark.",
            tags={
                "createdBy": "terraform",
            })
        example_namespace = tencentcloud.tdmq.Namespace("exampleNamespace",
            environ_name="tf_example",
            msg_ttl=300,
            cluster_id=example_instance.id,
            retention_policy=tencentcloud.tdmq.NamespaceRetentionPolicyArgs(
                time_in_minutes=60,
                size_in_mb=10,
            ),
            remark="remark.")
        example_topic_with_full_id = tencentcloud.tdmq.TopicWithFullId("exampleTopicWithFullId",
            environ_id=example_namespace.environ_name,
            cluster_id=example_instance.id,
            topic_name="tf-example-topic",
            partitions=6,
            pulsar_topic_type=3,
            remark="remark.")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Tdmq Topic can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdmq/topicWithFullId:TopicWithFullId test ${cluster_id}#${environ_id}#${topic_name}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The Dedicated Cluster Id.
        :param pulumi.Input[str] environ_id: The name of tdmq namespace.
        :param pulumi.Input[int] partitions: The partitions of topic.
        :param pulumi.Input[int] pulsar_topic_type: Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3: Persistent partitioned.
        :param pulumi.Input[str] remark: Description of the namespace.
        :param pulumi.Input[str] topic_name: The name of topic to be created.
        :param pulumi.Input[int] topic_type: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue. The type of topic.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TopicWithFullIdArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a TDMQ topic with full id.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_instance = tencentcloud.tdmq.Instance("exampleInstance",
            cluster_name="tf_example",
            remark="remark.",
            tags={
                "createdBy": "terraform",
            })
        example_namespace = tencentcloud.tdmq.Namespace("exampleNamespace",
            environ_name="tf_example",
            msg_ttl=300,
            cluster_id=example_instance.id,
            retention_policy=tencentcloud.tdmq.NamespaceRetentionPolicyArgs(
                time_in_minutes=60,
                size_in_mb=10,
            ),
            remark="remark.")
        example_topic_with_full_id = tencentcloud.tdmq.TopicWithFullId("exampleTopicWithFullId",
            environ_id=example_namespace.environ_name,
            cluster_id=example_instance.id,
            topic_name="tf-example-topic",
            partitions=6,
            pulsar_topic_type=3,
            remark="remark.")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Tdmq Topic can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Tdmq/topicWithFullId:TopicWithFullId test ${cluster_id}#${environ_id}#${topic_name}
        ```

        :param str resource_name: The name of the resource.
        :param TopicWithFullIdArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TopicWithFullIdArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 environ_id: Optional[pulumi.Input[str]] = None,
                 partitions: Optional[pulumi.Input[int]] = None,
                 pulsar_topic_type: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 topic_name: Optional[pulumi.Input[str]] = None,
                 topic_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TopicWithFullIdArgs.__new__(TopicWithFullIdArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if environ_id is None and not opts.urn:
                raise TypeError("Missing required property 'environ_id'")
            __props__.__dict__["environ_id"] = environ_id
            if partitions is None and not opts.urn:
                raise TypeError("Missing required property 'partitions'")
            __props__.__dict__["partitions"] = partitions
            __props__.__dict__["pulsar_topic_type"] = pulsar_topic_type
            __props__.__dict__["remark"] = remark
            if topic_name is None and not opts.urn:
                raise TypeError("Missing required property 'topic_name'")
            __props__.__dict__["topic_name"] = topic_name
            __props__.__dict__["topic_type"] = topic_type
            __props__.__dict__["create_time"] = None
        super(TopicWithFullId, __self__).__init__(
            'tencentcloud:Tdmq/topicWithFullId:TopicWithFullId',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            environ_id: Optional[pulumi.Input[str]] = None,
            partitions: Optional[pulumi.Input[int]] = None,
            pulsar_topic_type: Optional[pulumi.Input[int]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            topic_name: Optional[pulumi.Input[str]] = None,
            topic_type: Optional[pulumi.Input[int]] = None) -> 'TopicWithFullId':
        """
        Get an existing TopicWithFullId resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: The Dedicated Cluster Id.
        :param pulumi.Input[str] create_time: Creation time of resource.
        :param pulumi.Input[str] environ_id: The name of tdmq namespace.
        :param pulumi.Input[int] partitions: The partitions of topic.
        :param pulumi.Input[int] pulsar_topic_type: Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3: Persistent partitioned.
        :param pulumi.Input[str] remark: Description of the namespace.
        :param pulumi.Input[str] topic_name: The name of topic to be created.
        :param pulumi.Input[int] topic_type: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue. The type of topic.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TopicWithFullIdState.__new__(_TopicWithFullIdState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["environ_id"] = environ_id
        __props__.__dict__["partitions"] = partitions
        __props__.__dict__["pulsar_topic_type"] = pulsar_topic_type
        __props__.__dict__["remark"] = remark
        __props__.__dict__["topic_name"] = topic_name
        __props__.__dict__["topic_type"] = topic_type
        return TopicWithFullId(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The Dedicated Cluster Id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time of resource.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="environId")
    def environ_id(self) -> pulumi.Output[str]:
        """
        The name of tdmq namespace.
        """
        return pulumi.get(self, "environ_id")

    @property
    @pulumi.getter
    def partitions(self) -> pulumi.Output[int]:
        """
        The partitions of topic.
        """
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="pulsarTopicType")
    def pulsar_topic_type(self) -> pulumi.Output[int]:
        """
        Pulsar Topic Type 0: Non-persistent non-partitioned 1: Non-persistent partitioned 2: Persistent non-partitioned 3: Persistent partitioned.
        """
        return pulumi.get(self, "pulsar_topic_type")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the namespace.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Output[str]:
        """
        The name of topic to be created.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="topicType")
    def topic_type(self) -> pulumi.Output[int]:
        """
        This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue. The type of topic.
        """
        warnings.warn("""This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""", DeprecationWarning)
        pulumi.log.warn("""topic_type is deprecated: This input will be gradually discarded and can be switched to PulsarTopicType parameter 0: Normal message; 1: Global sequential messages; 2: Local sequential messages; 3: Retrying queue; 4: Dead letter queue.""")

        return pulumi.get(self, "topic_type")

