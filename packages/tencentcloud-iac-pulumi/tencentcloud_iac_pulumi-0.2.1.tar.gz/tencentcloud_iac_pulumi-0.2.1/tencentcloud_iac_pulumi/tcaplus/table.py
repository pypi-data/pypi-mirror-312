# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TableArgs', 'Table']

@pulumi.input_type
class TableArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 idl_id: pulumi.Input[str],
                 reserved_read_cu: pulumi.Input[int],
                 reserved_volume: pulumi.Input[int],
                 reserved_write_cu: pulumi.Input[int],
                 table_idl_type: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 table_type: pulumi.Input[str],
                 tablegroup_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Table resource.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table belongs.
        :param pulumi.Input[str] idl_id: ID of the IDL File.
        :param pulumi.Input[int] reserved_read_cu: Reserved read capacity units of the TcaplusDB table.
        :param pulumi.Input[int] reserved_volume: Reserved storage capacity of the TcaplusDB table (unit: GB).
        :param pulumi.Input[int] reserved_write_cu: Reserved write capacity units of the TcaplusDB table.
        :param pulumi.Input[str] table_idl_type: IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
        :param pulumi.Input[str] table_name: Name of the TcaplusDB table.
        :param pulumi.Input[str] table_type: Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
        :param pulumi.Input[str] tablegroup_id: ID of the table group to which the table belongs.
        :param pulumi.Input[str] description: Description of the TcaplusDB table.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "idl_id", idl_id)
        pulumi.set(__self__, "reserved_read_cu", reserved_read_cu)
        pulumi.set(__self__, "reserved_volume", reserved_volume)
        pulumi.set(__self__, "reserved_write_cu", reserved_write_cu)
        pulumi.set(__self__, "table_idl_type", table_idl_type)
        pulumi.set(__self__, "table_name", table_name)
        pulumi.set(__self__, "table_type", table_type)
        pulumi.set(__self__, "tablegroup_id", tablegroup_id)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the TcaplusDB cluster to which the table belongs.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="idlId")
    def idl_id(self) -> pulumi.Input[str]:
        """
        ID of the IDL File.
        """
        return pulumi.get(self, "idl_id")

    @idl_id.setter
    def idl_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "idl_id", value)

    @property
    @pulumi.getter(name="reservedReadCu")
    def reserved_read_cu(self) -> pulumi.Input[int]:
        """
        Reserved read capacity units of the TcaplusDB table.
        """
        return pulumi.get(self, "reserved_read_cu")

    @reserved_read_cu.setter
    def reserved_read_cu(self, value: pulumi.Input[int]):
        pulumi.set(self, "reserved_read_cu", value)

    @property
    @pulumi.getter(name="reservedVolume")
    def reserved_volume(self) -> pulumi.Input[int]:
        """
        Reserved storage capacity of the TcaplusDB table (unit: GB).
        """
        return pulumi.get(self, "reserved_volume")

    @reserved_volume.setter
    def reserved_volume(self, value: pulumi.Input[int]):
        pulumi.set(self, "reserved_volume", value)

    @property
    @pulumi.getter(name="reservedWriteCu")
    def reserved_write_cu(self) -> pulumi.Input[int]:
        """
        Reserved write capacity units of the TcaplusDB table.
        """
        return pulumi.get(self, "reserved_write_cu")

    @reserved_write_cu.setter
    def reserved_write_cu(self, value: pulumi.Input[int]):
        pulumi.set(self, "reserved_write_cu", value)

    @property
    @pulumi.getter(name="tableIdlType")
    def table_idl_type(self) -> pulumi.Input[str]:
        """
        IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
        """
        return pulumi.get(self, "table_idl_type")

    @table_idl_type.setter
    def table_idl_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_idl_type", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        Name of the TcaplusDB table.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="tableType")
    def table_type(self) -> pulumi.Input[str]:
        """
        Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
        """
        return pulumi.get(self, "table_type")

    @table_type.setter
    def table_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_type", value)

    @property
    @pulumi.getter(name="tablegroupId")
    def tablegroup_id(self) -> pulumi.Input[str]:
        """
        ID of the table group to which the table belongs.
        """
        return pulumi.get(self, "tablegroup_id")

    @tablegroup_id.setter
    def tablegroup_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tablegroup_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the TcaplusDB table.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _TableState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 error: Optional[pulumi.Input[str]] = None,
                 idl_id: Optional[pulumi.Input[str]] = None,
                 reserved_read_cu: Optional[pulumi.Input[int]] = None,
                 reserved_volume: Optional[pulumi.Input[int]] = None,
                 reserved_write_cu: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 table_idl_type: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 table_size: Optional[pulumi.Input[int]] = None,
                 table_type: Optional[pulumi.Input[str]] = None,
                 tablegroup_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Table resources.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table belongs.
        :param pulumi.Input[str] create_time: Create time of the TcaplusDB table.
        :param pulumi.Input[str] description: Description of the TcaplusDB table.
        :param pulumi.Input[str] error: Error messages for creating TcaplusDB table.
        :param pulumi.Input[str] idl_id: ID of the IDL File.
        :param pulumi.Input[int] reserved_read_cu: Reserved read capacity units of the TcaplusDB table.
        :param pulumi.Input[int] reserved_volume: Reserved storage capacity of the TcaplusDB table (unit: GB).
        :param pulumi.Input[int] reserved_write_cu: Reserved write capacity units of the TcaplusDB table.
        :param pulumi.Input[str] status: Status of the TcaplusDB table.
        :param pulumi.Input[str] table_idl_type: IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
        :param pulumi.Input[str] table_name: Name of the TcaplusDB table.
        :param pulumi.Input[int] table_size: Size of the TcaplusDB table.
        :param pulumi.Input[str] table_type: Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
        :param pulumi.Input[str] tablegroup_id: ID of the table group to which the table belongs.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if error is not None:
            pulumi.set(__self__, "error", error)
        if idl_id is not None:
            pulumi.set(__self__, "idl_id", idl_id)
        if reserved_read_cu is not None:
            pulumi.set(__self__, "reserved_read_cu", reserved_read_cu)
        if reserved_volume is not None:
            pulumi.set(__self__, "reserved_volume", reserved_volume)
        if reserved_write_cu is not None:
            pulumi.set(__self__, "reserved_write_cu", reserved_write_cu)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if table_idl_type is not None:
            pulumi.set(__self__, "table_idl_type", table_idl_type)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if table_size is not None:
            pulumi.set(__self__, "table_size", table_size)
        if table_type is not None:
            pulumi.set(__self__, "table_type", table_type)
        if tablegroup_id is not None:
            pulumi.set(__self__, "tablegroup_id", tablegroup_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the TcaplusDB cluster to which the table belongs.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the TcaplusDB table.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the TcaplusDB table.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input[str]]:
        """
        Error messages for creating TcaplusDB table.
        """
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter(name="idlId")
    def idl_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the IDL File.
        """
        return pulumi.get(self, "idl_id")

    @idl_id.setter
    def idl_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idl_id", value)

    @property
    @pulumi.getter(name="reservedReadCu")
    def reserved_read_cu(self) -> Optional[pulumi.Input[int]]:
        """
        Reserved read capacity units of the TcaplusDB table.
        """
        return pulumi.get(self, "reserved_read_cu")

    @reserved_read_cu.setter
    def reserved_read_cu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserved_read_cu", value)

    @property
    @pulumi.getter(name="reservedVolume")
    def reserved_volume(self) -> Optional[pulumi.Input[int]]:
        """
        Reserved storage capacity of the TcaplusDB table (unit: GB).
        """
        return pulumi.get(self, "reserved_volume")

    @reserved_volume.setter
    def reserved_volume(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserved_volume", value)

    @property
    @pulumi.getter(name="reservedWriteCu")
    def reserved_write_cu(self) -> Optional[pulumi.Input[int]]:
        """
        Reserved write capacity units of the TcaplusDB table.
        """
        return pulumi.get(self, "reserved_write_cu")

    @reserved_write_cu.setter
    def reserved_write_cu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserved_write_cu", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the TcaplusDB table.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tableIdlType")
    def table_idl_type(self) -> Optional[pulumi.Input[str]]:
        """
        IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
        """
        return pulumi.get(self, "table_idl_type")

    @table_idl_type.setter
    def table_idl_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_idl_type", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the TcaplusDB table.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="tableSize")
    def table_size(self) -> Optional[pulumi.Input[int]]:
        """
        Size of the TcaplusDB table.
        """
        return pulumi.get(self, "table_size")

    @table_size.setter
    def table_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "table_size", value)

    @property
    @pulumi.getter(name="tableType")
    def table_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
        """
        return pulumi.get(self, "table_type")

    @table_type.setter
    def table_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_type", value)

    @property
    @pulumi.getter(name="tablegroupId")
    def tablegroup_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the table group to which the table belongs.
        """
        return pulumi.get(self, "tablegroup_id")

    @tablegroup_id.setter
    def tablegroup_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tablegroup_id", value)


class Table(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 idl_id: Optional[pulumi.Input[str]] = None,
                 reserved_read_cu: Optional[pulumi.Input[int]] = None,
                 reserved_volume: Optional[pulumi.Input[int]] = None,
                 reserved_write_cu: Optional[pulumi.Input[int]] = None,
                 table_idl_type: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 table_type: Optional[pulumi.Input[str]] = None,
                 tablegroup_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create TcaplusDB table.

        ## Example Usage

        ### Create a tcaplus database table

        The tcaplus database table should be pre-defined in the idl file.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        vpc_id = vpc.instance_lists[0].vpc_id
        subnet_id = vpc.instance_lists[0].subnet_id
        example_cluster = tencentcloud.tcaplus.Cluster("exampleCluster",
            idl_type="PROTO",
            cluster_name="tf_example_tcaplus_cluster",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            password="your_pw_123111",
            old_password_expire_last=3600)
        example_tablegroup = tencentcloud.tcaplus.Tablegroup("exampleTablegroup",
            cluster_id=example_cluster.id,
            tablegroup_name="tf_example_group_name")
        example_idl = tencentcloud.tcaplus.Idl("exampleIdl",
            cluster_id=example_cluster.id,
            tablegroup_id=example_tablegroup.id,
            file_name="tf_example_tcaplus_idl",
            file_type="PROTO",
            file_ext_type="proto",
            file_content=\"\"\"    syntax = "proto2";
            package myTcaplusTable;
            import "tcaplusservice.optionv1.proto";
            message example_table { # refer the table name
                option(tcaplusservice.tcaplus_primary_key) = "uin,name,region";
                required int64 uin = 1;
                required string name = 2;
                required int32 region = 3;
                required int32 gamesvrid = 4;
                optional int32 logintime = 5 [default = 1];
                repeated int64 lockid = 6 [packed = true];
                optional bool is_available = 7 [default = false];
                optional pay_info pay = 8;
            }

            message pay_info {
                required int64 pay_id = 1;
                optional uint64 total_money = 2;
                optional uint64 pay_times = 3;
                optional pay_auth_info auth = 4;
                message pay_auth_info {
                    required string pay_keys = 1;
                    optional int64 update_time = 2;
                }
            }
        \"\"\")
        example_table = tencentcloud.tcaplus.Table("exampleTable",
            cluster_id=example_cluster.id,
            tablegroup_id=example_tablegroup.id,
            table_name="example_table",
            table_type="GENERIC",
            description="test",
            idl_id=example_idl.id,
            table_idl_type="PROTO",
            reserved_read_cu=1000,
            reserved_write_cu=20,
            reserved_volume=1)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table belongs.
        :param pulumi.Input[str] description: Description of the TcaplusDB table.
        :param pulumi.Input[str] idl_id: ID of the IDL File.
        :param pulumi.Input[int] reserved_read_cu: Reserved read capacity units of the TcaplusDB table.
        :param pulumi.Input[int] reserved_volume: Reserved storage capacity of the TcaplusDB table (unit: GB).
        :param pulumi.Input[int] reserved_write_cu: Reserved write capacity units of the TcaplusDB table.
        :param pulumi.Input[str] table_idl_type: IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
        :param pulumi.Input[str] table_name: Name of the TcaplusDB table.
        :param pulumi.Input[str] table_type: Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
        :param pulumi.Input[str] tablegroup_id: ID of the table group to which the table belongs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create TcaplusDB table.

        ## Example Usage

        ### Create a tcaplus database table

        The tcaplus database table should be pre-defined in the idl file.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        vpc_id = vpc.instance_lists[0].vpc_id
        subnet_id = vpc.instance_lists[0].subnet_id
        example_cluster = tencentcloud.tcaplus.Cluster("exampleCluster",
            idl_type="PROTO",
            cluster_name="tf_example_tcaplus_cluster",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            password="your_pw_123111",
            old_password_expire_last=3600)
        example_tablegroup = tencentcloud.tcaplus.Tablegroup("exampleTablegroup",
            cluster_id=example_cluster.id,
            tablegroup_name="tf_example_group_name")
        example_idl = tencentcloud.tcaplus.Idl("exampleIdl",
            cluster_id=example_cluster.id,
            tablegroup_id=example_tablegroup.id,
            file_name="tf_example_tcaplus_idl",
            file_type="PROTO",
            file_ext_type="proto",
            file_content=\"\"\"    syntax = "proto2";
            package myTcaplusTable;
            import "tcaplusservice.optionv1.proto";
            message example_table { # refer the table name
                option(tcaplusservice.tcaplus_primary_key) = "uin,name,region";
                required int64 uin = 1;
                required string name = 2;
                required int32 region = 3;
                required int32 gamesvrid = 4;
                optional int32 logintime = 5 [default = 1];
                repeated int64 lockid = 6 [packed = true];
                optional bool is_available = 7 [default = false];
                optional pay_info pay = 8;
            }

            message pay_info {
                required int64 pay_id = 1;
                optional uint64 total_money = 2;
                optional uint64 pay_times = 3;
                optional pay_auth_info auth = 4;
                message pay_auth_info {
                    required string pay_keys = 1;
                    optional int64 update_time = 2;
                }
            }
        \"\"\")
        example_table = tencentcloud.tcaplus.Table("exampleTable",
            cluster_id=example_cluster.id,
            tablegroup_id=example_tablegroup.id,
            table_name="example_table",
            table_type="GENERIC",
            description="test",
            idl_id=example_idl.id,
            table_idl_type="PROTO",
            reserved_read_cu=1000,
            reserved_write_cu=20,
            reserved_volume=1)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 idl_id: Optional[pulumi.Input[str]] = None,
                 reserved_read_cu: Optional[pulumi.Input[int]] = None,
                 reserved_volume: Optional[pulumi.Input[int]] = None,
                 reserved_write_cu: Optional[pulumi.Input[int]] = None,
                 table_idl_type: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 table_type: Optional[pulumi.Input[str]] = None,
                 tablegroup_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TableArgs.__new__(TableArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["description"] = description
            if idl_id is None and not opts.urn:
                raise TypeError("Missing required property 'idl_id'")
            __props__.__dict__["idl_id"] = idl_id
            if reserved_read_cu is None and not opts.urn:
                raise TypeError("Missing required property 'reserved_read_cu'")
            __props__.__dict__["reserved_read_cu"] = reserved_read_cu
            if reserved_volume is None and not opts.urn:
                raise TypeError("Missing required property 'reserved_volume'")
            __props__.__dict__["reserved_volume"] = reserved_volume
            if reserved_write_cu is None and not opts.urn:
                raise TypeError("Missing required property 'reserved_write_cu'")
            __props__.__dict__["reserved_write_cu"] = reserved_write_cu
            if table_idl_type is None and not opts.urn:
                raise TypeError("Missing required property 'table_idl_type'")
            __props__.__dict__["table_idl_type"] = table_idl_type
            if table_name is None and not opts.urn:
                raise TypeError("Missing required property 'table_name'")
            __props__.__dict__["table_name"] = table_name
            if table_type is None and not opts.urn:
                raise TypeError("Missing required property 'table_type'")
            __props__.__dict__["table_type"] = table_type
            if tablegroup_id is None and not opts.urn:
                raise TypeError("Missing required property 'tablegroup_id'")
            __props__.__dict__["tablegroup_id"] = tablegroup_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["error"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["table_size"] = None
        super(Table, __self__).__init__(
            'tencentcloud:Tcaplus/table:Table',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            error: Optional[pulumi.Input[str]] = None,
            idl_id: Optional[pulumi.Input[str]] = None,
            reserved_read_cu: Optional[pulumi.Input[int]] = None,
            reserved_volume: Optional[pulumi.Input[int]] = None,
            reserved_write_cu: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            table_idl_type: Optional[pulumi.Input[str]] = None,
            table_name: Optional[pulumi.Input[str]] = None,
            table_size: Optional[pulumi.Input[int]] = None,
            table_type: Optional[pulumi.Input[str]] = None,
            tablegroup_id: Optional[pulumi.Input[str]] = None) -> 'Table':
        """
        Get an existing Table resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table belongs.
        :param pulumi.Input[str] create_time: Create time of the TcaplusDB table.
        :param pulumi.Input[str] description: Description of the TcaplusDB table.
        :param pulumi.Input[str] error: Error messages for creating TcaplusDB table.
        :param pulumi.Input[str] idl_id: ID of the IDL File.
        :param pulumi.Input[int] reserved_read_cu: Reserved read capacity units of the TcaplusDB table.
        :param pulumi.Input[int] reserved_volume: Reserved storage capacity of the TcaplusDB table (unit: GB).
        :param pulumi.Input[int] reserved_write_cu: Reserved write capacity units of the TcaplusDB table.
        :param pulumi.Input[str] status: Status of the TcaplusDB table.
        :param pulumi.Input[str] table_idl_type: IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
        :param pulumi.Input[str] table_name: Name of the TcaplusDB table.
        :param pulumi.Input[int] table_size: Size of the TcaplusDB table.
        :param pulumi.Input[str] table_type: Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
        :param pulumi.Input[str] tablegroup_id: ID of the table group to which the table belongs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TableState.__new__(_TableState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["error"] = error
        __props__.__dict__["idl_id"] = idl_id
        __props__.__dict__["reserved_read_cu"] = reserved_read_cu
        __props__.__dict__["reserved_volume"] = reserved_volume
        __props__.__dict__["reserved_write_cu"] = reserved_write_cu
        __props__.__dict__["status"] = status
        __props__.__dict__["table_idl_type"] = table_idl_type
        __props__.__dict__["table_name"] = table_name
        __props__.__dict__["table_size"] = table_size
        __props__.__dict__["table_type"] = table_type
        __props__.__dict__["tablegroup_id"] = tablegroup_id
        return Table(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of the TcaplusDB cluster to which the table belongs.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the TcaplusDB table.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the TcaplusDB table.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def error(self) -> pulumi.Output[str]:
        """
        Error messages for creating TcaplusDB table.
        """
        return pulumi.get(self, "error")

    @property
    @pulumi.getter(name="idlId")
    def idl_id(self) -> pulumi.Output[str]:
        """
        ID of the IDL File.
        """
        return pulumi.get(self, "idl_id")

    @property
    @pulumi.getter(name="reservedReadCu")
    def reserved_read_cu(self) -> pulumi.Output[int]:
        """
        Reserved read capacity units of the TcaplusDB table.
        """
        return pulumi.get(self, "reserved_read_cu")

    @property
    @pulumi.getter(name="reservedVolume")
    def reserved_volume(self) -> pulumi.Output[int]:
        """
        Reserved storage capacity of the TcaplusDB table (unit: GB).
        """
        return pulumi.get(self, "reserved_volume")

    @property
    @pulumi.getter(name="reservedWriteCu")
    def reserved_write_cu(self) -> pulumi.Output[int]:
        """
        Reserved write capacity units of the TcaplusDB table.
        """
        return pulumi.get(self, "reserved_write_cu")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the TcaplusDB table.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tableIdlType")
    def table_idl_type(self) -> pulumi.Output[str]:
        """
        IDL type of the TcaplusDB table. Valid values: `PROTO` and `TDR`.
        """
        return pulumi.get(self, "table_idl_type")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Output[str]:
        """
        Name of the TcaplusDB table.
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="tableSize")
    def table_size(self) -> pulumi.Output[int]:
        """
        Size of the TcaplusDB table.
        """
        return pulumi.get(self, "table_size")

    @property
    @pulumi.getter(name="tableType")
    def table_type(self) -> pulumi.Output[str]:
        """
        Type of the TcaplusDB table. Valid values are `GENERIC` and `LIST`.
        """
        return pulumi.get(self, "table_type")

    @property
    @pulumi.getter(name="tablegroupId")
    def tablegroup_id(self) -> pulumi.Output[str]:
        """
        ID of the table group to which the table belongs.
        """
        return pulumi.get(self, "tablegroup_id")

