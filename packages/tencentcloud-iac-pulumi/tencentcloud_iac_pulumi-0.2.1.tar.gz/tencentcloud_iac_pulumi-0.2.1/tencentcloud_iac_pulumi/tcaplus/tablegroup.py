# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TablegroupArgs', 'Tablegroup']

@pulumi.input_type
class TablegroupArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 tablegroup_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a Tablegroup resource.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table group belongs.
        :param pulumi.Input[str] tablegroup_name: Name of the TcaplusDB table group. Name length should be between 1 and 30.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "tablegroup_name", tablegroup_name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of the TcaplusDB cluster to which the table group belongs.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="tablegroupName")
    def tablegroup_name(self) -> pulumi.Input[str]:
        """
        Name of the TcaplusDB table group. Name length should be between 1 and 30.
        """
        return pulumi.get(self, "tablegroup_name")

    @tablegroup_name.setter
    def tablegroup_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tablegroup_name", value)


@pulumi.input_type
class _TablegroupState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 table_count: Optional[pulumi.Input[int]] = None,
                 tablegroup_name: Optional[pulumi.Input[str]] = None,
                 total_size: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Tablegroup resources.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table group belongs.
        :param pulumi.Input[str] create_time: Create time of the TcaplusDB table group.
        :param pulumi.Input[int] table_count: Number of tables.
        :param pulumi.Input[str] tablegroup_name: Name of the TcaplusDB table group. Name length should be between 1 and 30.
        :param pulumi.Input[int] total_size: Total storage size (MB).
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if table_count is not None:
            pulumi.set(__self__, "table_count", table_count)
        if tablegroup_name is not None:
            pulumi.set(__self__, "tablegroup_name", tablegroup_name)
        if total_size is not None:
            pulumi.set(__self__, "total_size", total_size)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the TcaplusDB cluster to which the table group belongs.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the TcaplusDB table group.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="tableCount")
    def table_count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of tables.
        """
        return pulumi.get(self, "table_count")

    @table_count.setter
    def table_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "table_count", value)

    @property
    @pulumi.getter(name="tablegroupName")
    def tablegroup_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the TcaplusDB table group. Name length should be between 1 and 30.
        """
        return pulumi.get(self, "tablegroup_name")

    @tablegroup_name.setter
    def tablegroup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tablegroup_name", value)

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> Optional[pulumi.Input[int]]:
        """
        Total storage size (MB).
        """
        return pulumi.get(self, "total_size")

    @total_size.setter
    def total_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_size", value)


class Tablegroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 tablegroup_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create TcaplusDB table group.

        ## Example Usage

        ### Create a tcaplusdb table group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        vpc_id = vpc.instance_lists[0].vpc_id
        subnet_id = vpc.instance_lists[0].subnet_id
        example_cluster = tencentcloud.tcaplus.Cluster("exampleCluster",
            idl_type="PROTO",
            cluster_name="tf_example_tcaplus_cluster",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            password="your_pw_123111",
            old_password_expire_last=3600)
        example_tablegroup = tencentcloud.tcaplus.Tablegroup("exampleTablegroup",
            cluster_id=example_cluster.id,
            tablegroup_name="tf_example_group_name")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table group belongs.
        :param pulumi.Input[str] tablegroup_name: Name of the TcaplusDB table group. Name length should be between 1 and 30.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TablegroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create TcaplusDB table group.

        ## Example Usage

        ### Create a tcaplusdb table group

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-3"
        vpc = tencentcloud.Vpc.get_subnets(is_default=True,
            availability_zone=availability_zone)
        vpc_id = vpc.instance_lists[0].vpc_id
        subnet_id = vpc.instance_lists[0].subnet_id
        example_cluster = tencentcloud.tcaplus.Cluster("exampleCluster",
            idl_type="PROTO",
            cluster_name="tf_example_tcaplus_cluster",
            vpc_id=vpc_id,
            subnet_id=subnet_id,
            password="your_pw_123111",
            old_password_expire_last=3600)
        example_tablegroup = tencentcloud.tcaplus.Tablegroup("exampleTablegroup",
            cluster_id=example_cluster.id,
            tablegroup_name="tf_example_group_name")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TablegroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TablegroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 tablegroup_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TablegroupArgs.__new__(TablegroupArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if tablegroup_name is None and not opts.urn:
                raise TypeError("Missing required property 'tablegroup_name'")
            __props__.__dict__["tablegroup_name"] = tablegroup_name
            __props__.__dict__["create_time"] = None
            __props__.__dict__["table_count"] = None
            __props__.__dict__["total_size"] = None
        super(Tablegroup, __self__).__init__(
            'tencentcloud:Tcaplus/tablegroup:Tablegroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            table_count: Optional[pulumi.Input[int]] = None,
            tablegroup_name: Optional[pulumi.Input[str]] = None,
            total_size: Optional[pulumi.Input[int]] = None) -> 'Tablegroup':
        """
        Get an existing Tablegroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of the TcaplusDB cluster to which the table group belongs.
        :param pulumi.Input[str] create_time: Create time of the TcaplusDB table group.
        :param pulumi.Input[int] table_count: Number of tables.
        :param pulumi.Input[str] tablegroup_name: Name of the TcaplusDB table group. Name length should be between 1 and 30.
        :param pulumi.Input[int] total_size: Total storage size (MB).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TablegroupState.__new__(_TablegroupState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["table_count"] = table_count
        __props__.__dict__["tablegroup_name"] = tablegroup_name
        __props__.__dict__["total_size"] = total_size
        return Tablegroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of the TcaplusDB cluster to which the table group belongs.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the TcaplusDB table group.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="tableCount")
    def table_count(self) -> pulumi.Output[int]:
        """
        Number of tables.
        """
        return pulumi.get(self, "table_count")

    @property
    @pulumi.getter(name="tablegroupName")
    def tablegroup_name(self) -> pulumi.Output[str]:
        """
        Name of the TcaplusDB table group. Name length should be between 1 and 30.
        """
        return pulumi.get(self, "tablegroup_name")

    @property
    @pulumi.getter(name="totalSize")
    def total_size(self) -> pulumi.Output[int]:
        """
        Total storage size (MB).
        """
        return pulumi.get(self, "total_size")

