# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNodesResult',
    'AwaitableGetNodesResult',
    'get_nodes',
    'get_nodes_output',
]

@pulumi.output_type
class GetNodesResult:
    """
    A collection of values returned by getNodes.
    """
    def __init__(__self__, hardware_resource_type=None, id=None, instance_id=None, limit=None, node_flag=None, nodes=None, offset=None, result_output_file=None):
        if hardware_resource_type and not isinstance(hardware_resource_type, str):
            raise TypeError("Expected argument 'hardware_resource_type' to be a str")
        pulumi.set(__self__, "hardware_resource_type", hardware_resource_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if node_flag and not isinstance(node_flag, str):
            raise TypeError("Expected argument 'node_flag' to be a str")
        pulumi.set(__self__, "node_flag", node_flag)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="hardwareResourceType")
    def hardware_resource_type(self) -> Optional[str]:
        """
        Resource type, host/pod.
        """
        return pulumi.get(self, "hardware_resource_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="nodeFlag")
    def node_flag(self) -> str:
        return pulumi.get(self, "node_flag")

    @property
    @pulumi.getter
    def nodes(self) -> Sequence['outputs.GetNodesNodeResult']:
        """
        List of node details.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetNodesResult(GetNodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNodesResult(
            hardware_resource_type=self.hardware_resource_type,
            id=self.id,
            instance_id=self.instance_id,
            limit=self.limit,
            node_flag=self.node_flag,
            nodes=self.nodes,
            offset=self.offset,
            result_output_file=self.result_output_file)


def get_nodes(hardware_resource_type: Optional[str] = None,
              instance_id: Optional[str] = None,
              limit: Optional[int] = None,
              node_flag: Optional[str] = None,
              offset: Optional[int] = None,
              result_output_file: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNodesResult:
    """
    Provides an available EMR for the user.

    The EMR data source obtain the hardware node information by using the emr cluster ID.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    my_emr_nodes = tencentcloud.Emr.get_nodes(instance_id="emr-rnzqrleq",
        node_flag="master")
    ```
    <!--End PulumiCodeChooser -->


    :param str hardware_resource_type: Resource type: Support all/host/pod, default is all.
    :param str instance_id: Cluster instance ID, the instance ID is as follows: emr-xxxxxxxx.
    :param int limit: The number returned per page, the default value is 100, and the maximum value is 100.
    :param str node_flag: Node ID, the value is:
           - all: Means to get all type nodes, except cdb information.
           - master: Indicates that the master node information is obtained.
           - core: Indicates that the core node information is obtained.
           - task: indicates obtaining task node information.
           - common: means to get common node information.
           - router: Indicates obtaining router node information.
           - db: Indicates that the cdb information for the normal state is obtained.
           - recyle: Indicates that the node information in the Recycle Bin isolation, including the cdb information, is obtained.
           - renew: Indicates that all node information to be renewed, including cddb information, is obtained, and the auto-renewal node will not be returned.
           
           Note: Only the above values are now supported, entering other values will cause an error.
    :param int offset: Page number, with a default value of 0, represents the first page.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['hardwareResourceType'] = hardware_resource_type
    __args__['instanceId'] = instance_id
    __args__['limit'] = limit
    __args__['nodeFlag'] = node_flag
    __args__['offset'] = offset
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Emr/getNodes:getNodes', __args__, opts=opts, typ=GetNodesResult).value

    return AwaitableGetNodesResult(
        hardware_resource_type=pulumi.get(__ret__, 'hardware_resource_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        limit=pulumi.get(__ret__, 'limit'),
        node_flag=pulumi.get(__ret__, 'node_flag'),
        nodes=pulumi.get(__ret__, 'nodes'),
        offset=pulumi.get(__ret__, 'offset'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_nodes)
def get_nodes_output(hardware_resource_type: Optional[pulumi.Input[Optional[str]]] = None,
                     instance_id: Optional[pulumi.Input[str]] = None,
                     limit: Optional[pulumi.Input[Optional[int]]] = None,
                     node_flag: Optional[pulumi.Input[str]] = None,
                     offset: Optional[pulumi.Input[Optional[int]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNodesResult]:
    """
    Provides an available EMR for the user.

    The EMR data source obtain the hardware node information by using the emr cluster ID.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    my_emr_nodes = tencentcloud.Emr.get_nodes(instance_id="emr-rnzqrleq",
        node_flag="master")
    ```
    <!--End PulumiCodeChooser -->


    :param str hardware_resource_type: Resource type: Support all/host/pod, default is all.
    :param str instance_id: Cluster instance ID, the instance ID is as follows: emr-xxxxxxxx.
    :param int limit: The number returned per page, the default value is 100, and the maximum value is 100.
    :param str node_flag: Node ID, the value is:
           - all: Means to get all type nodes, except cdb information.
           - master: Indicates that the master node information is obtained.
           - core: Indicates that the core node information is obtained.
           - task: indicates obtaining task node information.
           - common: means to get common node information.
           - router: Indicates obtaining router node information.
           - db: Indicates that the cdb information for the normal state is obtained.
           - recyle: Indicates that the node information in the Recycle Bin isolation, including the cdb information, is obtained.
           - renew: Indicates that all node information to be renewed, including cddb information, is obtained, and the auto-renewal node will not be returned.
           
           Note: Only the above values are now supported, entering other values will cause an error.
    :param int offset: Page number, with a default value of 0, represents the first page.
    :param str result_output_file: Used to save results.
    """
    ...
