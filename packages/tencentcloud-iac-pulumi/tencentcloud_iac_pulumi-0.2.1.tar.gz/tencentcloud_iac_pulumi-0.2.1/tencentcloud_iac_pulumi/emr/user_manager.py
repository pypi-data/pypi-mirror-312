# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserManagerArgs', 'UserManager']

@pulumi.input_type
class UserManagerArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 password: pulumi.Input[str],
                 user_group: pulumi.Input[str],
                 user_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a UserManager resource.
        :param pulumi.Input[str] instance_id: Cluster string ID.
        :param pulumi.Input[str] password: PassWord.
        :param pulumi.Input[str] user_group: User group membership.
        :param pulumi.Input[str] user_name: Username.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "user_group", user_group)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Cluster string ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        PassWord.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Input[str]:
        """
        User group membership.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[str]:
        """
        Username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class _UserManagerState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 download_keytab_url: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 support_download_keytab: Optional[pulumi.Input[bool]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserManager resources.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] download_keytab_url: Download keytab url.
        :param pulumi.Input[str] instance_id: Cluster string ID.
        :param pulumi.Input[str] password: PassWord.
        :param pulumi.Input[bool] support_download_keytab: If support download keytab.
        :param pulumi.Input[str] user_group: User group membership.
        :param pulumi.Input[str] user_name: Username.
        :param pulumi.Input[str] user_type: User type.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if download_keytab_url is not None:
            pulumi.set(__self__, "download_keytab_url", download_keytab_url)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if support_download_keytab is not None:
            pulumi.set(__self__, "support_download_keytab", support_download_keytab)
        if user_group is not None:
            pulumi.set(__self__, "user_group", user_group)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="downloadKeytabUrl")
    def download_keytab_url(self) -> Optional[pulumi.Input[str]]:
        """
        Download keytab url.
        """
        return pulumi.get(self, "download_keytab_url")

    @download_keytab_url.setter
    def download_keytab_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_keytab_url", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster string ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        PassWord.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="supportDownloadKeytab")
    def support_download_keytab(self) -> Optional[pulumi.Input[bool]]:
        """
        If support download keytab.
        """
        return pulumi.get(self, "support_download_keytab")

    @support_download_keytab.setter
    def support_download_keytab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_download_keytab", value)

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> Optional[pulumi.Input[str]]:
        """
        User group membership.
        """
        return pulumi.get(self, "user_group")

    @user_group.setter
    def user_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_group", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        Username.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        User type.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)


class UserManager(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a emr user

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        my_emr = tencentcloud.Emr.get_instance(display_strategy="clusterList")
        user_manager = tencentcloud.emr.UserManager("userManager",
            instance_id=my_emr.clusters[0].cluster_id,
            user_name="tf-test",
            user_group="group1",
            password="tf@123456")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        emr user_manager can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Emr/userManager:UserManager user_manager instanceId#userName
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Cluster string ID.
        :param pulumi.Input[str] password: PassWord.
        :param pulumi.Input[str] user_group: User group membership.
        :param pulumi.Input[str] user_name: Username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserManagerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a emr user

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        my_emr = tencentcloud.Emr.get_instance(display_strategy="clusterList")
        user_manager = tencentcloud.emr.UserManager("userManager",
            instance_id=my_emr.clusters[0].cluster_id,
            user_name="tf-test",
            user_group="group1",
            password="tf@123456")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        emr user_manager can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Emr/userManager:UserManager user_manager instanceId#userName
        ```

        :param str resource_name: The name of the resource.
        :param UserManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user_group: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserManagerArgs.__new__(UserManagerArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            if user_group is None and not opts.urn:
                raise TypeError("Missing required property 'user_group'")
            __props__.__dict__["user_group"] = user_group
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["create_time"] = None
            __props__.__dict__["download_keytab_url"] = None
            __props__.__dict__["support_download_keytab"] = None
            __props__.__dict__["user_type"] = None
        super(UserManager, __self__).__init__(
            'tencentcloud:Emr/userManager:UserManager',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            download_keytab_url: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            support_download_keytab: Optional[pulumi.Input[bool]] = None,
            user_group: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None,
            user_type: Optional[pulumi.Input[str]] = None) -> 'UserManager':
        """
        Get an existing UserManager resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: Create time.
        :param pulumi.Input[str] download_keytab_url: Download keytab url.
        :param pulumi.Input[str] instance_id: Cluster string ID.
        :param pulumi.Input[str] password: PassWord.
        :param pulumi.Input[bool] support_download_keytab: If support download keytab.
        :param pulumi.Input[str] user_group: User group membership.
        :param pulumi.Input[str] user_name: Username.
        :param pulumi.Input[str] user_type: User type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserManagerState.__new__(_UserManagerState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["download_keytab_url"] = download_keytab_url
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["password"] = password
        __props__.__dict__["support_download_keytab"] = support_download_keytab
        __props__.__dict__["user_group"] = user_group
        __props__.__dict__["user_name"] = user_name
        __props__.__dict__["user_type"] = user_type
        return UserManager(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="downloadKeytabUrl")
    def download_keytab_url(self) -> pulumi.Output[str]:
        """
        Download keytab url.
        """
        return pulumi.get(self, "download_keytab_url")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Cluster string ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        PassWord.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="supportDownloadKeytab")
    def support_download_keytab(self) -> pulumi.Output[bool]:
        """
        If support download keytab.
        """
        return pulumi.get(self, "support_download_keytab")

    @property
    @pulumi.getter(name="userGroup")
    def user_group(self) -> pulumi.Output[str]:
        """
        User group membership.
        """
        return pulumi.get(self, "user_group")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[str]:
        """
        Username.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[str]:
        """
        User type.
        """
        return pulumi.get(self, "user_type")

