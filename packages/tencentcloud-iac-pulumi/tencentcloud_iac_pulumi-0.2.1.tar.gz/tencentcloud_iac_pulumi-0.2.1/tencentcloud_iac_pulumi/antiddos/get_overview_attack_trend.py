# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOverviewAttackTrendResult',
    'AwaitableGetOverviewAttackTrendResult',
    'get_overview_attack_trend',
    'get_overview_attack_trend_output',
]

@pulumi.output_type
class GetOverviewAttackTrendResult:
    """
    A collection of values returned by getOverviewAttackTrend.
    """
    def __init__(__self__, datas=None, dimension=None, end_time=None, id=None, period=None, period_point_count=None, result_output_file=None, start_time=None, type=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if dimension and not isinstance(dimension, str):
            raise TypeError("Expected argument 'dimension' to be a str")
        pulumi.set(__self__, "dimension", dimension)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if period and not isinstance(period, int):
            raise TypeError("Expected argument 'period' to be a int")
        pulumi.set(__self__, "period", period)
        if period_point_count and not isinstance(period_point_count, int):
            raise TypeError("Expected argument 'period_point_count' to be a int")
        pulumi.set(__self__, "period_point_count", period_point_count)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def datas(self) -> Sequence[int]:
        """
        Number of attacks per cycle point.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter
    def dimension(self) -> str:
        return pulumi.get(self, "dimension")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def period(self) -> int:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodPointCount")
    def period_point_count(self) -> int:
        """
        Number of period points included.
        """
        return pulumi.get(self, "period_point_count")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetOverviewAttackTrendResult(GetOverviewAttackTrendResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOverviewAttackTrendResult(
            datas=self.datas,
            dimension=self.dimension,
            end_time=self.end_time,
            id=self.id,
            period=self.period,
            period_point_count=self.period_point_count,
            result_output_file=self.result_output_file,
            start_time=self.start_time,
            type=self.type)


def get_overview_attack_trend(dimension: Optional[str] = None,
                              end_time: Optional[str] = None,
                              period: Optional[int] = None,
                              result_output_file: Optional[str] = None,
                              start_time: Optional[str] = None,
                              type: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOverviewAttackTrendResult:
    """
    Use this data source to query detailed information of antiddos overview_attack_trend

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    overview_attack_trend = tencentcloud.Antiddos.get_overview_attack_trend(dimension="attackcount",
        end_time="2023-11-22 10:28:31",
        period=86400,
        start_time="2023-11-21 10:28:31",
        type="ddos")
    ```
    <!--End PulumiCodeChooser -->


    :param str dimension: Latitude, currently only attackcount is supported.
    :param str end_time: Protection Overview Attack Trend End Time.
    :param int period: Period, currently only 86400 is supported.
    :param str result_output_file: Used to save results.
    :param str start_time: Protection Overview Attack Trend Start Time.
    :param str type: Attack type: cc, ddos.
    """
    __args__ = dict()
    __args__['dimension'] = dimension
    __args__['endTime'] = end_time
    __args__['period'] = period
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Antiddos/getOverviewAttackTrend:getOverviewAttackTrend', __args__, opts=opts, typ=GetOverviewAttackTrendResult).value

    return AwaitableGetOverviewAttackTrendResult(
        datas=pulumi.get(__ret__, 'datas'),
        dimension=pulumi.get(__ret__, 'dimension'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        period=pulumi.get(__ret__, 'period'),
        period_point_count=pulumi.get(__ret__, 'period_point_count'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_overview_attack_trend)
def get_overview_attack_trend_output(dimension: Optional[pulumi.Input[str]] = None,
                                     end_time: Optional[pulumi.Input[str]] = None,
                                     period: Optional[pulumi.Input[int]] = None,
                                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                     start_time: Optional[pulumi.Input[str]] = None,
                                     type: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOverviewAttackTrendResult]:
    """
    Use this data source to query detailed information of antiddos overview_attack_trend

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    overview_attack_trend = tencentcloud.Antiddos.get_overview_attack_trend(dimension="attackcount",
        end_time="2023-11-22 10:28:31",
        period=86400,
        start_time="2023-11-21 10:28:31",
        type="ddos")
    ```
    <!--End PulumiCodeChooser -->


    :param str dimension: Latitude, currently only attackcount is supported.
    :param str end_time: Protection Overview Attack Trend End Time.
    :param int period: Period, currently only 86400 is supported.
    :param str result_output_file: Used to save results.
    :param str start_time: Protection Overview Attack Trend Start Time.
    :param str type: Attack type: cc, ddos.
    """
    ...
