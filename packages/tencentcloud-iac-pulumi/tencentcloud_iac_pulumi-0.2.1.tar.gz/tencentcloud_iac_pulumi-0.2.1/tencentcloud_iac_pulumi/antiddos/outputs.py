# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CcBlackWhiteIpBlackWhiteIp',
    'CcPrecisionPolicyPolicyList',
    'DdosGeoIpBlockConfigDdosGeoIpBlockConfig',
    'DdosSpeedLimitConfigDdosSpeedLimitConfig',
    'DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope',
    'DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue',
    'DefaultAlarmThresholdDefaultAlarmConfig',
    'PacketFilterConfigPacketFilterConfig',
    'PortAclConfigAclConfig',
    'GetBasicDeviceStatusClbDataResult',
    'GetBasicDeviceStatusDataResult',
    'GetListListenerLayer4ListenerResult',
    'GetListListenerLayer4ListenerInstanceDetailResult',
    'GetListListenerLayer4ListenerInstanceDetailRuleResult',
    'GetListListenerLayer4ListenerRealServerResult',
    'GetListListenerLayer7ListenerResult',
    'GetListListenerLayer7ListenerInstanceDetailResult',
    'GetListListenerLayer7ListenerInstanceDetailRuleResult',
    'GetListListenerLayer7ListenerProxyTypeListResult',
    'GetListListenerLayer7ListenerRealServerResult',
    'GetOverviewDdosEventListEventListResult',
]

@pulumi.output_type
class CcBlackWhiteIpBlackWhiteIp(dict):
    def __init__(__self__, *,
                 ip: str,
                 mask: int):
        """
        :param str ip: ip address.
        :param int mask: ip mask.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mask(self) -> int:
        """
        ip mask.
        """
        return pulumi.get(self, "mask")


@pulumi.output_type
class CcPrecisionPolicyPolicyList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "fieldType":
            suggest = "field_type"
        elif key == "valueOperator":
            suggest = "value_operator"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CcPrecisionPolicyPolicyList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CcPrecisionPolicyPolicyList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CcPrecisionPolicyPolicyList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_name: str,
                 field_type: str,
                 value: str,
                 value_operator: str):
        """
        :param str field_name: Configuration fields can take values of cgi, ua, cookie, referer, accept, srcip.
        :param str field_type: field type.
        :param str value: value.
        :param str value_operator: Configuration item value comparison method, can take values of equal, not_ Equal, include.
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_operator", value_operator)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        """
        Configuration fields can take values of cgi, ua, cookie, referer, accept, srcip.
        """
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> str:
        """
        field type.
        """
        return pulumi.get(self, "field_type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="valueOperator")
    def value_operator(self) -> str:
        """
        Configuration item value comparison method, can take values of equal, not_ Equal, include.
        """
        return pulumi.get(self, "value_operator")


@pulumi.output_type
class DdosGeoIpBlockConfigDdosGeoIpBlockConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "regionType":
            suggest = "region_type"
        elif key == "areaLists":
            suggest = "area_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosGeoIpBlockConfigDdosGeoIpBlockConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosGeoIpBlockConfigDdosGeoIpBlockConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosGeoIpBlockConfigDdosGeoIpBlockConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 region_type: str,
                 area_lists: Optional[Sequence[int]] = None):
        """
        :param str action: Blocking action, value [drop (intercept) trans (release)].
        :param str region_type: Region type, value [oversea (overseas) China (domestic) customized (custom region)].
        :param Sequence[int] area_lists: When RegionType is customized, an AreaList must be filled in, with a maximum of 128 entries;.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "region_type", region_type)
        if area_lists is not None:
            pulumi.set(__self__, "area_lists", area_lists)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Blocking action, value [drop (intercept) trans (release)].
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="regionType")
    def region_type(self) -> str:
        """
        Region type, value [oversea (overseas) China (domestic) customized (custom region)].
        """
        return pulumi.get(self, "region_type")

    @property
    @pulumi.getter(name="areaLists")
    def area_lists(self) -> Optional[Sequence[int]]:
        """
        When RegionType is customized, an AreaList must be filled in, with a maximum of 128 entries;.
        """
        return pulumi.get(self, "area_lists")


@pulumi.output_type
class DdosSpeedLimitConfigDdosSpeedLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "speedValues":
            suggest = "speed_values"
        elif key == "dstPortList":
            suggest = "dst_port_list"
        elif key == "dstPortScopes":
            suggest = "dst_port_scopes"
        elif key == "protocolList":
            suggest = "protocol_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosSpeedLimitConfigDdosSpeedLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosSpeedLimitConfigDdosSpeedLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosSpeedLimitConfigDdosSpeedLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: int,
                 speed_values: Sequence['outputs.DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue'],
                 dst_port_list: Optional[str] = None,
                 dst_port_scopes: Optional[Sequence['outputs.DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope']] = None,
                 protocol_list: Optional[str] = None):
        """
        :param int mode: Speed limit mode, value [1 (based on source IP speed limit) 2 (based on destination port speed limit)].
        :param Sequence['DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValueArgs'] speed_values: Speed limit values, each type of speed limit value can support up to 1; This field array has at least one speed limit value.
        :param str dst_port_list: List of port ranges, up to 8, multiple; Separate and indicate the range with -; This port range must be filled in; Fill in style 1:0-65535, style 2: 80; 443; 1000-2000.
        :param Sequence['DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScopeArgs'] dst_port_scopes: This field has been deprecated. Please fill in the new field DstPortList.
        :param str protocol_list: IP protocol numbers, values [ALL (all protocols) TCP (tcp protocol) UDP (udp protocol) SMP (smp protocol) 1; 2-100 (custom protocol number range, up to 8)] Note: When customizing the protocol number range, only the protocol number can be filled in, multiple ranges; Separation; When filling in ALL, no other agreements or agreements can be filled inNumber.
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "speed_values", speed_values)
        if dst_port_list is not None:
            pulumi.set(__self__, "dst_port_list", dst_port_list)
        if dst_port_scopes is not None:
            pulumi.set(__self__, "dst_port_scopes", dst_port_scopes)
        if protocol_list is not None:
            pulumi.set(__self__, "protocol_list", protocol_list)

    @property
    @pulumi.getter
    def mode(self) -> int:
        """
        Speed limit mode, value [1 (based on source IP speed limit) 2 (based on destination port speed limit)].
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="speedValues")
    def speed_values(self) -> Sequence['outputs.DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue']:
        """
        Speed limit values, each type of speed limit value can support up to 1; This field array has at least one speed limit value.
        """
        return pulumi.get(self, "speed_values")

    @property
    @pulumi.getter(name="dstPortList")
    def dst_port_list(self) -> Optional[str]:
        """
        List of port ranges, up to 8, multiple; Separate and indicate the range with -; This port range must be filled in; Fill in style 1:0-65535, style 2: 80; 443; 1000-2000.
        """
        return pulumi.get(self, "dst_port_list")

    @property
    @pulumi.getter(name="dstPortScopes")
    def dst_port_scopes(self) -> Optional[Sequence['outputs.DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope']]:
        """
        This field has been deprecated. Please fill in the new field DstPortList.
        """
        return pulumi.get(self, "dst_port_scopes")

    @property
    @pulumi.getter(name="protocolList")
    def protocol_list(self) -> Optional[str]:
        """
        IP protocol numbers, values [ALL (all protocols) TCP (tcp protocol) UDP (udp protocol) SMP (smp protocol) 1; 2-100 (custom protocol number range, up to 8)] Note: When customizing the protocol number range, only the protocol number can be filled in, multiple ranges; Separation; When filling in ALL, no other agreements or agreements can be filled inNumber.
        """
        return pulumi.get(self, "protocol_list")


@pulumi.output_type
class DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "beginPort":
            suggest = "begin_port"
        elif key == "endPort":
            suggest = "end_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdosSpeedLimitConfigDdosSpeedLimitConfigDstPortScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 begin_port: int,
                 end_port: int):
        """
        :param int begin_port: Starting port, ranging from 1 to 65535.
        :param int end_port: end  port, ranging from 1 to 65535.
        """
        pulumi.set(__self__, "begin_port", begin_port)
        pulumi.set(__self__, "end_port", end_port)

    @property
    @pulumi.getter(name="beginPort")
    def begin_port(self) -> int:
        """
        Starting port, ranging from 1 to 65535.
        """
        return pulumi.get(self, "begin_port")

    @property
    @pulumi.getter(name="endPort")
    def end_port(self) -> int:
        """
        end  port, ranging from 1 to 65535.
        """
        return pulumi.get(self, "end_port")


@pulumi.output_type
class DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValue(dict):
    def __init__(__self__, *,
                 type: int,
                 value: int):
        """
        :param int type: Speed limit value type, value [1 (packet rate pps) 2 (bandwidth bps)].
        :param int value: value.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> int:
        """
        Speed limit value type, value [1 (packet rate pps) 2 (bandwidth bps)].
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> int:
        """
        value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DefaultAlarmThresholdDefaultAlarmConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "alarmThreshold":
            suggest = "alarm_threshold"
        elif key == "alarmType":
            suggest = "alarm_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DefaultAlarmThresholdDefaultAlarmConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DefaultAlarmThresholdDefaultAlarmConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DefaultAlarmThresholdDefaultAlarmConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alarm_threshold: Optional[int] = None,
                 alarm_type: Optional[int] = None):
        """
        :param int alarm_threshold: Alarm threshold, in Mbps, with a value of&gt;=0; When used as an input parameter, setting 0 will delete the alarm threshold configuration;.
        :param int alarm_type: Alarm threshold type, value [1 (incoming traffic alarm threshold) 2 (attack cleaning traffic alarm threshold)].
        """
        if alarm_threshold is not None:
            pulumi.set(__self__, "alarm_threshold", alarm_threshold)
        if alarm_type is not None:
            pulumi.set(__self__, "alarm_type", alarm_type)

    @property
    @pulumi.getter(name="alarmThreshold")
    def alarm_threshold(self) -> Optional[int]:
        """
        Alarm threshold, in Mbps, with a value of&gt;=0; When used as an input parameter, setting 0 will delete the alarm threshold configuration;.
        """
        return pulumi.get(self, "alarm_threshold")

    @property
    @pulumi.getter(name="alarmType")
    def alarm_type(self) -> Optional[int]:
        """
        Alarm threshold type, value [1 (incoming traffic alarm threshold) 2 (attack cleaning traffic alarm threshold)].
        """
        return pulumi.get(self, "alarm_type")


@pulumi.output_type
class PacketFilterConfigPacketFilterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dportEnd":
            suggest = "dport_end"
        elif key == "dportStart":
            suggest = "dport_start"
        elif key == "pktlenMax":
            suggest = "pktlen_max"
        elif key == "pktlenMin":
            suggest = "pktlen_min"
        elif key == "sportEnd":
            suggest = "sport_end"
        elif key == "sportStart":
            suggest = "sport_start"
        elif key == "isNot":
            suggest = "is_not"
        elif key == "isNot2":
            suggest = "is_not2"
        elif key == "matchBegin":
            suggest = "match_begin"
        elif key == "matchBegin2":
            suggest = "match_begin2"
        elif key == "matchLogic":
            suggest = "match_logic"
        elif key == "matchType":
            suggest = "match_type"
        elif key == "matchType2":
            suggest = "match_type2"
        elif key == "pktLenGt":
            suggest = "pkt_len_gt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PacketFilterConfigPacketFilterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PacketFilterConfigPacketFilterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PacketFilterConfigPacketFilterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 dport_end: int,
                 dport_start: int,
                 pktlen_max: int,
                 pktlen_min: int,
                 protocol: str,
                 sport_end: int,
                 sport_start: int,
                 depth: Optional[int] = None,
                 depth2: Optional[int] = None,
                 is_not: Optional[int] = None,
                 is_not2: Optional[int] = None,
                 match_begin: Optional[str] = None,
                 match_begin2: Optional[str] = None,
                 match_logic: Optional[str] = None,
                 match_type: Optional[str] = None,
                 match_type2: Optional[str] = None,
                 offset: Optional[int] = None,
                 offset2: Optional[int] = None,
                 pkt_len_gt: Optional[int] = None,
                 str: Optional[str] = None,
                 str2: Optional[str] = None):
        """
        :param str action: Action, value [drop (discard) transmit (release) drop_black (discard and pull black) drop_rst (intercept) drop_black_rst (intercept and pull black) forward (continue protection)].
        :param int dport_end: end destination port, ranging from 0 to 65535.
        :param int dport_start: Starting destination port, ranging from 0 to 65535.
        :param int pktlen_max: The maximum message length, ranging from 1 to 1500, must be greater than or equal to the minimum message length.
        :param int pktlen_min: Minimum message length, ranging from 1 to 1500.
        :param str protocol: Protocol, value [TCP udp icmp all].
        :param int sport_end: End source port, values range from 1 to 65535, must be greater than or equal to the start source port.
        :param int sport_start: Starting source port, ranging from 0 to 65535.
        :param int depth: The detection depth starting from the detection position, with a value of [0-1500].
        :param int depth2: The second detection depth starting from the second detection position, with a value of [01500].
        :param int is_not: Whether to include detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        :param int is_not2: Whether the second detection includes detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        :param str match_begin: Detection position, value [begin_l3 (IP header) begin_l4 (TCP/UDP header) begin_l5 (T payload) no_match (mismatch)].
        :param str match_begin2: Second detection position, value [begin_l5 (load) no_match (mismatch)].
        :param str match_logic: When there is a second detection condition, the AND or relationship with the first detection condition, with the value [and (and relationship) none (fill in this value when there is no second detection condition)].
        :param str match_type: Detection type, value [Sunday (keyword) pcre (regular expression)].
        :param str match_type2: The second detection type, with a value of [Sunday (keyword) pcre (regular expression)].
        :param int offset: The offset from the detection position, with a value range of [0, Depth].
        :param int offset2: The offset from the second detection position, with a value range of [0, Depth2].
        :param int pkt_len_gt: Greater than message length, value 1+.
        :param str str: Detection value, key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&gt;section code of the string &#39;123&#39;; when the detection type is pcre, please fill in the regular expression character string;].
        :param str str2: key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&gt;section code of the string &#39;123&#39;; when the detection type is pcre, please fill in the regular expression character string;].
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "dport_end", dport_end)
        pulumi.set(__self__, "dport_start", dport_start)
        pulumi.set(__self__, "pktlen_max", pktlen_max)
        pulumi.set(__self__, "pktlen_min", pktlen_min)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "sport_end", sport_end)
        pulumi.set(__self__, "sport_start", sport_start)
        if depth is not None:
            pulumi.set(__self__, "depth", depth)
        if depth2 is not None:
            pulumi.set(__self__, "depth2", depth2)
        if is_not is not None:
            pulumi.set(__self__, "is_not", is_not)
        if is_not2 is not None:
            pulumi.set(__self__, "is_not2", is_not2)
        if match_begin is not None:
            pulumi.set(__self__, "match_begin", match_begin)
        if match_begin2 is not None:
            pulumi.set(__self__, "match_begin2", match_begin2)
        if match_logic is not None:
            pulumi.set(__self__, "match_logic", match_logic)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)
        if match_type2 is not None:
            pulumi.set(__self__, "match_type2", match_type2)
        if offset is not None:
            pulumi.set(__self__, "offset", offset)
        if offset2 is not None:
            pulumi.set(__self__, "offset2", offset2)
        if pkt_len_gt is not None:
            pulumi.set(__self__, "pkt_len_gt", pkt_len_gt)
        if str is not None:
            pulumi.set(__self__, "str", str)
        if str2 is not None:
            pulumi.set(__self__, "str2", str2)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action, value [drop (discard) transmit (release) drop_black (discard and pull black) drop_rst (intercept) drop_black_rst (intercept and pull black) forward (continue protection)].
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dportEnd")
    def dport_end(self) -> int:
        """
        end destination port, ranging from 0 to 65535.
        """
        return pulumi.get(self, "dport_end")

    @property
    @pulumi.getter(name="dportStart")
    def dport_start(self) -> int:
        """
        Starting destination port, ranging from 0 to 65535.
        """
        return pulumi.get(self, "dport_start")

    @property
    @pulumi.getter(name="pktlenMax")
    def pktlen_max(self) -> int:
        """
        The maximum message length, ranging from 1 to 1500, must be greater than or equal to the minimum message length.
        """
        return pulumi.get(self, "pktlen_max")

    @property
    @pulumi.getter(name="pktlenMin")
    def pktlen_min(self) -> int:
        """
        Minimum message length, ranging from 1 to 1500.
        """
        return pulumi.get(self, "pktlen_min")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol, value [TCP udp icmp all].
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="sportEnd")
    def sport_end(self) -> int:
        """
        End source port, values range from 1 to 65535, must be greater than or equal to the start source port.
        """
        return pulumi.get(self, "sport_end")

    @property
    @pulumi.getter(name="sportStart")
    def sport_start(self) -> int:
        """
        Starting source port, ranging from 0 to 65535.
        """
        return pulumi.get(self, "sport_start")

    @property
    @pulumi.getter
    def depth(self) -> Optional[int]:
        """
        The detection depth starting from the detection position, with a value of [0-1500].
        """
        return pulumi.get(self, "depth")

    @property
    @pulumi.getter
    def depth2(self) -> Optional[int]:
        """
        The second detection depth starting from the second detection position, with a value of [01500].
        """
        return pulumi.get(self, "depth2")

    @property
    @pulumi.getter(name="isNot")
    def is_not(self) -> Optional[int]:
        """
        Whether to include detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        """
        return pulumi.get(self, "is_not")

    @property
    @pulumi.getter(name="isNot2")
    def is_not2(self) -> Optional[int]:
        """
        Whether the second detection includes detection values, with a value of [0 (inclusive) and 1 (exclusive)].
        """
        return pulumi.get(self, "is_not2")

    @property
    @pulumi.getter(name="matchBegin")
    def match_begin(self) -> Optional[str]:
        """
        Detection position, value [begin_l3 (IP header) begin_l4 (TCP/UDP header) begin_l5 (T payload) no_match (mismatch)].
        """
        return pulumi.get(self, "match_begin")

    @property
    @pulumi.getter(name="matchBegin2")
    def match_begin2(self) -> Optional[str]:
        """
        Second detection position, value [begin_l5 (load) no_match (mismatch)].
        """
        return pulumi.get(self, "match_begin2")

    @property
    @pulumi.getter(name="matchLogic")
    def match_logic(self) -> Optional[str]:
        """
        When there is a second detection condition, the AND or relationship with the first detection condition, with the value [and (and relationship) none (fill in this value when there is no second detection condition)].
        """
        return pulumi.get(self, "match_logic")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        Detection type, value [Sunday (keyword) pcre (regular expression)].
        """
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter(name="matchType2")
    def match_type2(self) -> Optional[str]:
        """
        The second detection type, with a value of [Sunday (keyword) pcre (regular expression)].
        """
        return pulumi.get(self, "match_type2")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        """
        The offset from the detection position, with a value range of [0, Depth].
        """
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def offset2(self) -> Optional[int]:
        """
        The offset from the second detection position, with a value range of [0, Depth2].
        """
        return pulumi.get(self, "offset2")

    @property
    @pulumi.getter(name="pktLenGt")
    def pkt_len_gt(self) -> Optional[int]:
        """
        Greater than message length, value 1+.
        """
        return pulumi.get(self, "pkt_len_gt")

    @property
    @pulumi.getter
    def str(self) -> Optional[str]:
        """
        Detection value, key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&gt;section code of the string &#39;123&#39;; when the detection type is pcre, please fill in the regular expression character string;].
        """
        return pulumi.get(self, "str")

    @property
    @pulumi.getter
    def str2(self) -> Optional[str]:
        """
        key string or regular expression, value [When the detection type is Sunday, please fill in the string or hexadecimal bytecode, for example, x313233 corresponds to the hexadecimal word&gt;section code of the string &#39;123&#39;; when the detection type is pcre, please fill in the regular expression character string;].
        """
        return pulumi.get(self, "str2")


@pulumi.output_type
class PortAclConfigAclConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dPortEnd":
            suggest = "d_port_end"
        elif key == "dPortStart":
            suggest = "d_port_start"
        elif key == "forwardProtocol":
            suggest = "forward_protocol"
        elif key == "sPortEnd":
            suggest = "s_port_end"
        elif key == "sPortStart":
            suggest = "s_port_start"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PortAclConfigAclConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PortAclConfigAclConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PortAclConfigAclConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: str,
                 d_port_end: int,
                 d_port_start: int,
                 forward_protocol: str,
                 s_port_end: int,
                 s_port_start: int,
                 priority: Optional[int] = None):
        """
        :param str action: Action, can take values: drop, transmit, forward.
        :param int d_port_end: end from port, with a range of 0~65535 values.
        :param int d_port_start: Starting from port, with a range of 0~65535 values.
        :param str forward_protocol: Protocol type, can take TCP, udp, all values.
        :param int s_port_end: end from the source port, with a value range of 0~65535.
        :param int s_port_start: Starting from the source port, with a value range of 0~65535.
        :param int priority: The policy priority, the smaller the number, the higher the level, and the higher the matching of the rule, with values ranging from 1 to 1000. Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "d_port_end", d_port_end)
        pulumi.set(__self__, "d_port_start", d_port_start)
        pulumi.set(__self__, "forward_protocol", forward_protocol)
        pulumi.set(__self__, "s_port_end", s_port_end)
        pulumi.set(__self__, "s_port_start", s_port_start)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Action, can take values: drop, transmit, forward.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="dPortEnd")
    def d_port_end(self) -> int:
        """
        end from port, with a range of 0~65535 values.
        """
        return pulumi.get(self, "d_port_end")

    @property
    @pulumi.getter(name="dPortStart")
    def d_port_start(self) -> int:
        """
        Starting from port, with a range of 0~65535 values.
        """
        return pulumi.get(self, "d_port_start")

    @property
    @pulumi.getter(name="forwardProtocol")
    def forward_protocol(self) -> str:
        """
        Protocol type, can take TCP, udp, all values.
        """
        return pulumi.get(self, "forward_protocol")

    @property
    @pulumi.getter(name="sPortEnd")
    def s_port_end(self) -> int:
        """
        end from the source port, with a value range of 0~65535.
        """
        return pulumi.get(self, "s_port_end")

    @property
    @pulumi.getter(name="sPortStart")
    def s_port_start(self) -> int:
        """
        Starting from the source port, with a value range of 0~65535.
        """
        return pulumi.get(self, "s_port_start")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        The policy priority, the smaller the number, the higher the level, and the higher the matching of the rule, with values ranging from 1 to 1000. Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetBasicDeviceStatusClbDataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Properties name.
        :param str value: Properties value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Properties name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Properties value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBasicDeviceStatusDataResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: Properties name.
        :param str value: Properties value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Properties name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Properties value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetListListenerLayer4ListenerResult(dict):
    def __init__(__self__, *,
                 backend_port: int,
                 frontend_port: int,
                 instance_detail_rules: Sequence['outputs.GetListListenerLayer4ListenerInstanceDetailRuleResult'],
                 instance_details: Sequence['outputs.GetListListenerLayer4ListenerInstanceDetailResult'],
                 protocol: str,
                 real_servers: Sequence['outputs.GetListListenerLayer4ListenerRealServerResult']):
        """
        :param int backend_port: Origin port, value 1~65535.
        :param int frontend_port: Forwarding port, value 1~65535.
        :param Sequence['GetListListenerLayer4ListenerInstanceDetailRuleArgs'] instance_detail_rules: Resource instance to which the rule belongs.
        :param Sequence['GetListListenerLayer4ListenerInstanceDetailArgs'] instance_details: InstanceDetails.
        :param str protocol: Protocol.
        :param Sequence['GetListListenerLayer4ListenerRealServerArgs'] real_servers: Source server list.
        """
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "frontend_port", frontend_port)
        pulumi.set(__self__, "instance_detail_rules", instance_detail_rules)
        pulumi.set(__self__, "instance_details", instance_details)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "real_servers", real_servers)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        """
        Origin port, value 1~65535.
        """
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="frontendPort")
    def frontend_port(self) -> int:
        """
        Forwarding port, value 1~65535.
        """
        return pulumi.get(self, "frontend_port")

    @property
    @pulumi.getter(name="instanceDetailRules")
    def instance_detail_rules(self) -> Sequence['outputs.GetListListenerLayer4ListenerInstanceDetailRuleResult']:
        """
        Resource instance to which the rule belongs.
        """
        return pulumi.get(self, "instance_detail_rules")

    @property
    @pulumi.getter(name="instanceDetails")
    def instance_details(self) -> Sequence['outputs.GetListListenerLayer4ListenerInstanceDetailResult']:
        """
        InstanceDetails.
        """
        return pulumi.get(self, "instance_details")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="realServers")
    def real_servers(self) -> Sequence['outputs.GetListListenerLayer4ListenerRealServerResult']:
        """
        Source server list.
        """
        return pulumi.get(self, "real_servers")


@pulumi.output_type
class GetListListenerLayer4ListenerInstanceDetailResult(dict):
    def __init__(__self__, *,
                 eip_lists: Sequence[str],
                 instance_id: str):
        """
        :param Sequence[str] eip_lists: Instance ip list.
        :param str instance_id: Instance id.
        """
        pulumi.set(__self__, "eip_lists", eip_lists)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="eipLists")
    def eip_lists(self) -> Sequence[str]:
        """
        Instance ip list.
        """
        return pulumi.get(self, "eip_lists")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetListListenerLayer4ListenerInstanceDetailRuleResult(dict):
    def __init__(__self__, *,
                 cname: str,
                 eip_lists: Sequence[str],
                 instance_id: str):
        """
        :param str cname: Cname.
        :param Sequence[str] eip_lists: Instance ip list.
        :param str instance_id: Instance id.
        """
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "eip_lists", eip_lists)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def cname(self) -> str:
        """
        Cname.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="eipLists")
    def eip_lists(self) -> Sequence[str]:
        """
        Instance ip list.
        """
        return pulumi.get(self, "eip_lists")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetListListenerLayer4ListenerRealServerResult(dict):
    def __init__(__self__, *,
                 port: int,
                 real_server: str,
                 rs_type: int,
                 weight: int):
        """
        :param int port: 0-65535.
        :param str real_server: Source server list.
        :param int rs_type: 1: domain, 2: ip.
        :param int weight: Weight: 1-100.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "real_server", real_server)
        pulumi.set(__self__, "rs_type", rs_type)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        0-65535.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="realServer")
    def real_server(self) -> str:
        """
        Source server list.
        """
        return pulumi.get(self, "real_server")

    @property
    @pulumi.getter(name="rsType")
    def rs_type(self) -> int:
        """
        1: domain, 2: ip.
        """
        return pulumi.get(self, "rs_type")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight: 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetListListenerLayer7ListenerResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 instance_detail_rules: Sequence['outputs.GetListListenerLayer7ListenerInstanceDetailRuleResult'],
                 instance_details: Sequence['outputs.GetListListenerLayer7ListenerInstanceDetailResult'],
                 protocol: str,
                 proxy_type_lists: Sequence['outputs.GetListListenerLayer7ListenerProxyTypeListResult'],
                 real_servers: Sequence['outputs.GetListListenerLayer7ListenerRealServerResult'],
                 vport: int):
        """
        :param str domain: Domain.
        :param Sequence['GetListListenerLayer7ListenerInstanceDetailRuleArgs'] instance_detail_rules: Resource instance to which the rule belongs.
        :param Sequence['GetListListenerLayer7ListenerInstanceDetailArgs'] instance_details: InstanceDetails.
        :param str protocol: Protocol.
        :param Sequence['GetListListenerLayer7ListenerProxyTypeListArgs'] proxy_type_lists: List of forwarding types.
        :param Sequence['GetListListenerLayer7ListenerRealServerArgs'] real_servers: Source server list.
        :param int vport: Port.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "instance_detail_rules", instance_detail_rules)
        pulumi.set(__self__, "instance_details", instance_details)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "proxy_type_lists", proxy_type_lists)
        pulumi.set(__self__, "real_servers", real_servers)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="instanceDetailRules")
    def instance_detail_rules(self) -> Sequence['outputs.GetListListenerLayer7ListenerInstanceDetailRuleResult']:
        """
        Resource instance to which the rule belongs.
        """
        return pulumi.get(self, "instance_detail_rules")

    @property
    @pulumi.getter(name="instanceDetails")
    def instance_details(self) -> Sequence['outputs.GetListListenerLayer7ListenerInstanceDetailResult']:
        """
        InstanceDetails.
        """
        return pulumi.get(self, "instance_details")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyTypeLists")
    def proxy_type_lists(self) -> Sequence['outputs.GetListListenerLayer7ListenerProxyTypeListResult']:
        """
        List of forwarding types.
        """
        return pulumi.get(self, "proxy_type_lists")

    @property
    @pulumi.getter(name="realServers")
    def real_servers(self) -> Sequence['outputs.GetListListenerLayer7ListenerRealServerResult']:
        """
        Source server list.
        """
        return pulumi.get(self, "real_servers")

    @property
    @pulumi.getter
    def vport(self) -> int:
        """
        Port.
        """
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetListListenerLayer7ListenerInstanceDetailResult(dict):
    def __init__(__self__, *,
                 eip_lists: Sequence[str],
                 instance_id: str):
        """
        :param Sequence[str] eip_lists: Instance ip list.
        :param str instance_id: Instance id.
        """
        pulumi.set(__self__, "eip_lists", eip_lists)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter(name="eipLists")
    def eip_lists(self) -> Sequence[str]:
        """
        Instance ip list.
        """
        return pulumi.get(self, "eip_lists")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetListListenerLayer7ListenerInstanceDetailRuleResult(dict):
    def __init__(__self__, *,
                 cname: str,
                 eip_lists: Sequence[str],
                 instance_id: str):
        """
        :param str cname: Cname.
        :param Sequence[str] eip_lists: Instance ip list.
        :param str instance_id: Instance id.
        """
        pulumi.set(__self__, "cname", cname)
        pulumi.set(__self__, "eip_lists", eip_lists)
        pulumi.set(__self__, "instance_id", instance_id)

    @property
    @pulumi.getter
    def cname(self) -> str:
        """
        Cname.
        """
        return pulumi.get(self, "cname")

    @property
    @pulumi.getter(name="eipLists")
    def eip_lists(self) -> Sequence[str]:
        """
        Instance ip list.
        """
        return pulumi.get(self, "eip_lists")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")


@pulumi.output_type
class GetListListenerLayer7ListenerProxyTypeListResult(dict):
    def __init__(__self__, *,
                 proxy_ports: Sequence[int],
                 proxy_type: str):
        """
        :param Sequence[int] proxy_ports: Forwarding listening port list, port value is 1~65535.
        :param str proxy_type: Http, https.
        """
        pulumi.set(__self__, "proxy_ports", proxy_ports)
        pulumi.set(__self__, "proxy_type", proxy_type)

    @property
    @pulumi.getter(name="proxyPorts")
    def proxy_ports(self) -> Sequence[int]:
        """
        Forwarding listening port list, port value is 1~65535.
        """
        return pulumi.get(self, "proxy_ports")

    @property
    @pulumi.getter(name="proxyType")
    def proxy_type(self) -> str:
        """
        Http, https.
        """
        return pulumi.get(self, "proxy_type")


@pulumi.output_type
class GetListListenerLayer7ListenerRealServerResult(dict):
    def __init__(__self__, *,
                 port: int,
                 real_server: str,
                 rs_type: int,
                 weight: int):
        """
        :param int port: 0-65535.
        :param str real_server: Source server list.
        :param int rs_type: 1: domain, 2: ip.
        :param int weight: Weight: 1-100.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "real_server", real_server)
        pulumi.set(__self__, "rs_type", rs_type)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        0-65535.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="realServer")
    def real_server(self) -> str:
        """
        Source server list.
        """
        return pulumi.get(self, "real_server")

    @property
    @pulumi.getter(name="rsType")
    def rs_type(self) -> int:
        """
        1: domain, 2: ip.
        """
        return pulumi.get(self, "rs_type")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight: 1-100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetOverviewDdosEventListEventListResult(dict):
    def __init__(__self__, *,
                 attack_status: int,
                 attack_type: str,
                 business: str,
                 end_time: str,
                 id: str,
                 instance_id: str,
                 instance_name: str,
                 mbps: int,
                 pps: int,
                 start_time: str,
                 vip: str):
        """
        :param int attack_status: filter event by attack status, start: attacking; end: attack end.
        :param str attack_type: AttackType.
        :param str business: Dayu sub product code (bgpip represents advanced defense IP; net represents professional version of advanced defense IP).
        :param str end_time: EndTime.
        :param str id: event id.
        :param str instance_id: InstanceId.
        :param str instance_name: InstanceId.
        :param int mbps: Attack traffic, unit Mbps.
        :param int pps: unit Mbps.
        :param str start_time: StartTime.
        :param str vip: ip.
        """
        pulumi.set(__self__, "attack_status", attack_status)
        pulumi.set(__self__, "attack_type", attack_type)
        pulumi.set(__self__, "business", business)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "mbps", mbps)
        pulumi.set(__self__, "pps", pps)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter(name="attackStatus")
    def attack_status(self) -> int:
        """
        filter event by attack status, start: attacking; end: attack end.
        """
        return pulumi.get(self, "attack_status")

    @property
    @pulumi.getter(name="attackType")
    def attack_type(self) -> str:
        """
        AttackType.
        """
        return pulumi.get(self, "attack_type")

    @property
    @pulumi.getter
    def business(self) -> str:
        """
        Dayu sub product code (bgpip represents advanced defense IP; net represents professional version of advanced defense IP).
        """
        return pulumi.get(self, "business")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        EndTime.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        event id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        InstanceId.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        InstanceId.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def mbps(self) -> int:
        """
        Attack traffic, unit Mbps.
        """
        return pulumi.get(self, "mbps")

    @property
    @pulumi.getter
    def pps(self) -> int:
        """
        unit Mbps.
        """
        return pulumi.get(self, "pps")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        StartTime.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        ip.
        """
        return pulumi.get(self, "vip")


