# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CcPrecisionPolicyArgs', 'CcPrecisionPolicy']

@pulumi.input_type
class CcPrecisionPolicyArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 ip: pulumi.Input[str],
                 policy_action: pulumi.Input[str],
                 policy_lists: pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]],
                 protocol: pulumi.Input[str]):
        """
        The set of arguments for constructing a CcPrecisionPolicy resource.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[str] ip: Ip value.
        :param pulumi.Input[str] policy_action: policy type, alg or drop.
        :param pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]] policy_lists: policy list.
        :param pulumi.Input[str] protocol: protocol http or https.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "policy_action", policy_action)
        pulumi.set(__self__, "policy_lists", policy_lists)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        Ip value.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="policyAction")
    def policy_action(self) -> pulumi.Input[str]:
        """
        policy type, alg or drop.
        """
        return pulumi.get(self, "policy_action")

    @policy_action.setter
    def policy_action(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_action", value)

    @property
    @pulumi.getter(name="policyLists")
    def policy_lists(self) -> pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]]:
        """
        policy list.
        """
        return pulumi.get(self, "policy_lists")

    @policy_lists.setter
    def policy_lists(self, value: pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]]):
        pulumi.set(self, "policy_lists", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        protocol http or https.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class _CcPrecisionPolicyState:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 policy_action: Optional[pulumi.Input[str]] = None,
                 policy_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CcPrecisionPolicy resources.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[str] ip: Ip value.
        :param pulumi.Input[str] policy_action: policy type, alg or drop.
        :param pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]] policy_lists: policy list.
        :param pulumi.Input[str] protocol: protocol http or https.
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if policy_action is not None:
            pulumi.set(__self__, "policy_action", policy_action)
        if policy_lists is not None:
            pulumi.set(__self__, "policy_lists", policy_lists)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Ip value.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="policyAction")
    def policy_action(self) -> Optional[pulumi.Input[str]]:
        """
        policy type, alg or drop.
        """
        return pulumi.get(self, "policy_action")

    @policy_action.setter
    def policy_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_action", value)

    @property
    @pulumi.getter(name="policyLists")
    def policy_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]]]:
        """
        policy list.
        """
        return pulumi.get(self, "policy_lists")

    @policy_lists.setter
    def policy_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CcPrecisionPolicyPolicyListArgs']]]]):
        pulumi.set(self, "policy_lists", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        protocol http or https.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


class CcPrecisionPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 policy_action: Optional[pulumi.Input[str]] = None,
                 policy_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcPrecisionPolicyPolicyListArgs']]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a antiddos cc_precision_policy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cc_precision_policy = tencentcloud.antiddos.CcPrecisionPolicy("ccPrecisionPolicy",
            domain="t.baidu.com",
            instance_id="bgpip-0000078h",
            ip="212.64.62.191",
            policy_action="drop",
            policy_lists=[
                tencentcloud.antiddos.CcPrecisionPolicyPolicyListArgs(
                    field_name="cgi",
                    field_type="value",
                    value="a.com",
                    value_operator="equal",
                ),
                tencentcloud.antiddos.CcPrecisionPolicyPolicyListArgs(
                    field_name="ua",
                    field_type="value",
                    value="test",
                    value_operator="equal",
                ),
            ],
            protocol="http")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        antiddos cc_precision_policy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Antiddos/ccPrecisionPolicy:CcPrecisionPolicy cc_precision_policy ${instanceId}#${policyId}#${instanceIp}#${domain}#${protocol}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[str] ip: Ip value.
        :param pulumi.Input[str] policy_action: policy type, alg or drop.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcPrecisionPolicyPolicyListArgs']]]] policy_lists: policy list.
        :param pulumi.Input[str] protocol: protocol http or https.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CcPrecisionPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a antiddos cc_precision_policy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cc_precision_policy = tencentcloud.antiddos.CcPrecisionPolicy("ccPrecisionPolicy",
            domain="t.baidu.com",
            instance_id="bgpip-0000078h",
            ip="212.64.62.191",
            policy_action="drop",
            policy_lists=[
                tencentcloud.antiddos.CcPrecisionPolicyPolicyListArgs(
                    field_name="cgi",
                    field_type="value",
                    value="a.com",
                    value_operator="equal",
                ),
                tencentcloud.antiddos.CcPrecisionPolicyPolicyListArgs(
                    field_name="ua",
                    field_type="value",
                    value="test",
                    value_operator="equal",
                ),
            ],
            protocol="http")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        antiddos cc_precision_policy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Antiddos/ccPrecisionPolicy:CcPrecisionPolicy cc_precision_policy ${instanceId}#${policyId}#${instanceIp}#${domain}#${protocol}
        ```

        :param str resource_name: The name of the resource.
        :param CcPrecisionPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CcPrecisionPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 policy_action: Optional[pulumi.Input[str]] = None,
                 policy_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcPrecisionPolicyPolicyListArgs']]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CcPrecisionPolicyArgs.__new__(CcPrecisionPolicyArgs)

            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            if policy_action is None and not opts.urn:
                raise TypeError("Missing required property 'policy_action'")
            __props__.__dict__["policy_action"] = policy_action
            if policy_lists is None and not opts.urn:
                raise TypeError("Missing required property 'policy_lists'")
            __props__.__dict__["policy_lists"] = policy_lists
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
        super(CcPrecisionPolicy, __self__).__init__(
            'tencentcloud:Antiddos/ccPrecisionPolicy:CcPrecisionPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            policy_action: Optional[pulumi.Input[str]] = None,
            policy_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcPrecisionPolicyPolicyListArgs']]]]] = None,
            protocol: Optional[pulumi.Input[str]] = None) -> 'CcPrecisionPolicy':
        """
        Get an existing CcPrecisionPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: Instance Id.
        :param pulumi.Input[str] ip: Ip value.
        :param pulumi.Input[str] policy_action: policy type, alg or drop.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CcPrecisionPolicyPolicyListArgs']]]] policy_lists: policy list.
        :param pulumi.Input[str] protocol: protocol http or https.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CcPrecisionPolicyState.__new__(_CcPrecisionPolicyState)

        __props__.__dict__["domain"] = domain
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip"] = ip
        __props__.__dict__["policy_action"] = policy_action
        __props__.__dict__["policy_lists"] = policy_lists
        __props__.__dict__["protocol"] = protocol
        return CcPrecisionPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        Ip value.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="policyAction")
    def policy_action(self) -> pulumi.Output[str]:
        """
        policy type, alg or drop.
        """
        return pulumi.get(self, "policy_action")

    @property
    @pulumi.getter(name="policyLists")
    def policy_lists(self) -> pulumi.Output[Sequence['outputs.CcPrecisionPolicyPolicyList']]:
        """
        policy list.
        """
        return pulumi.get(self, "policy_lists")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        protocol http or https.
        """
        return pulumi.get(self, "protocol")

