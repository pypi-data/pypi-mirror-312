# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBasicDeviceStatusResult',
    'AwaitableGetBasicDeviceStatusResult',
    'get_basic_device_status',
    'get_basic_device_status_output',
]

@pulumi.output_type
class GetBasicDeviceStatusResult:
    """
    A collection of values returned by getBasicDeviceStatus.
    """
    def __init__(__self__, clb_datas=None, datas=None, filter_region=None, id=None, id_lists=None, ip_lists=None, result_output_file=None):
        if clb_datas and not isinstance(clb_datas, list):
            raise TypeError("Expected argument 'clb_datas' to be a list")
        pulumi.set(__self__, "clb_datas", clb_datas)
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if filter_region and not isinstance(filter_region, int):
            raise TypeError("Expected argument 'filter_region' to be a int")
        pulumi.set(__self__, "filter_region", filter_region)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if id_lists and not isinstance(id_lists, list):
            raise TypeError("Expected argument 'id_lists' to be a list")
        pulumi.set(__self__, "id_lists", id_lists)
        if ip_lists and not isinstance(ip_lists, list):
            raise TypeError("Expected argument 'ip_lists' to be a list")
        pulumi.set(__self__, "ip_lists", ip_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="clbDatas")
    def clb_datas(self) -> Sequence['outputs.GetBasicDeviceStatusClbDataResult']:
        """
        Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "clb_datas")

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetBasicDeviceStatusDataResult']:
        """
        Return resources and status, status code: 1- Blocking status 2- Normal status 3- Attack status.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter(name="filterRegion")
    def filter_region(self) -> Optional[int]:
        return pulumi.get(self, "filter_region")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idLists")
    def id_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "id_lists")

    @property
    @pulumi.getter(name="ipLists")
    def ip_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetBasicDeviceStatusResult(GetBasicDeviceStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBasicDeviceStatusResult(
            clb_datas=self.clb_datas,
            datas=self.datas,
            filter_region=self.filter_region,
            id=self.id,
            id_lists=self.id_lists,
            ip_lists=self.ip_lists,
            result_output_file=self.result_output_file)


def get_basic_device_status(filter_region: Optional[int] = None,
                            id_lists: Optional[Sequence[str]] = None,
                            ip_lists: Optional[Sequence[str]] = None,
                            result_output_file: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBasicDeviceStatusResult:
    """
    Use this data source to query detailed information of antiddos basic_device_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    basic_device_status = tencentcloud.Antiddos.get_basic_device_status(filter_region=1,
        ip_lists=["127.0.0.1"])
    ```
    <!--End PulumiCodeChooser -->


    :param int filter_region: Region Id.
    :param Sequence[str] id_lists: Named resource transfer ID.
    :param Sequence[str] ip_lists: Ip resource list.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['filterRegion'] = filter_region
    __args__['idLists'] = id_lists
    __args__['ipLists'] = ip_lists
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Antiddos/getBasicDeviceStatus:getBasicDeviceStatus', __args__, opts=opts, typ=GetBasicDeviceStatusResult).value

    return AwaitableGetBasicDeviceStatusResult(
        clb_datas=pulumi.get(__ret__, 'clb_datas'),
        datas=pulumi.get(__ret__, 'datas'),
        filter_region=pulumi.get(__ret__, 'filter_region'),
        id=pulumi.get(__ret__, 'id'),
        id_lists=pulumi.get(__ret__, 'id_lists'),
        ip_lists=pulumi.get(__ret__, 'ip_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_basic_device_status)
def get_basic_device_status_output(filter_region: Optional[pulumi.Input[Optional[int]]] = None,
                                   id_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                   ip_lists: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBasicDeviceStatusResult]:
    """
    Use this data source to query detailed information of antiddos basic_device_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    basic_device_status = tencentcloud.Antiddos.get_basic_device_status(filter_region=1,
        ip_lists=["127.0.0.1"])
    ```
    <!--End PulumiCodeChooser -->


    :param int filter_region: Region Id.
    :param Sequence[str] id_lists: Named resource transfer ID.
    :param Sequence[str] ip_lists: Ip resource list.
    :param str result_output_file: Used to save results.
    """
    ...
