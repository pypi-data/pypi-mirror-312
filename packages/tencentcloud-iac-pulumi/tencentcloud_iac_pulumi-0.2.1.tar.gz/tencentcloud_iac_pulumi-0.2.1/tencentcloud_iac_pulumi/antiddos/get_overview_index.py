# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOverviewIndexResult',
    'AwaitableGetOverviewIndexResult',
    'get_overview_index',
    'get_overview_index_output',
]

@pulumi.output_type
class GetOverviewIndexResult:
    """
    A collection of values returned by getOverviewIndex.
    """
    def __init__(__self__, all_ip_count=None, antiddos_domain_count=None, antiddos_ip_count=None, attack_domain_count=None, attack_ip_count=None, block_ip_count=None, end_time=None, id=None, max_attack_flow=None, new_attack_ip=None, new_attack_time=None, new_attack_type=None, result_output_file=None, start_time=None):
        if all_ip_count and not isinstance(all_ip_count, int):
            raise TypeError("Expected argument 'all_ip_count' to be a int")
        pulumi.set(__self__, "all_ip_count", all_ip_count)
        if antiddos_domain_count and not isinstance(antiddos_domain_count, int):
            raise TypeError("Expected argument 'antiddos_domain_count' to be a int")
        pulumi.set(__self__, "antiddos_domain_count", antiddos_domain_count)
        if antiddos_ip_count and not isinstance(antiddos_ip_count, int):
            raise TypeError("Expected argument 'antiddos_ip_count' to be a int")
        pulumi.set(__self__, "antiddos_ip_count", antiddos_ip_count)
        if attack_domain_count and not isinstance(attack_domain_count, int):
            raise TypeError("Expected argument 'attack_domain_count' to be a int")
        pulumi.set(__self__, "attack_domain_count", attack_domain_count)
        if attack_ip_count and not isinstance(attack_ip_count, int):
            raise TypeError("Expected argument 'attack_ip_count' to be a int")
        pulumi.set(__self__, "attack_ip_count", attack_ip_count)
        if block_ip_count and not isinstance(block_ip_count, int):
            raise TypeError("Expected argument 'block_ip_count' to be a int")
        pulumi.set(__self__, "block_ip_count", block_ip_count)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_attack_flow and not isinstance(max_attack_flow, int):
            raise TypeError("Expected argument 'max_attack_flow' to be a int")
        pulumi.set(__self__, "max_attack_flow", max_attack_flow)
        if new_attack_ip and not isinstance(new_attack_ip, str):
            raise TypeError("Expected argument 'new_attack_ip' to be a str")
        pulumi.set(__self__, "new_attack_ip", new_attack_ip)
        if new_attack_time and not isinstance(new_attack_time, str):
            raise TypeError("Expected argument 'new_attack_time' to be a str")
        pulumi.set(__self__, "new_attack_time", new_attack_time)
        if new_attack_type and not isinstance(new_attack_type, str):
            raise TypeError("Expected argument 'new_attack_type' to be a str")
        pulumi.set(__self__, "new_attack_type", new_attack_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="allIpCount")
    def all_ip_count(self) -> int:
        """
        ip count.
        """
        return pulumi.get(self, "all_ip_count")

    @property
    @pulumi.getter(name="antiddosDomainCount")
    def antiddos_domain_count(self) -> int:
        """
        AntiddosDomainCount.
        """
        return pulumi.get(self, "antiddos_domain_count")

    @property
    @pulumi.getter(name="antiddosIpCount")
    def antiddos_ip_count(self) -> int:
        """
        Total number of advanced defense IPs (including advanced defense packets and advanced defense IPs).
        """
        return pulumi.get(self, "antiddos_ip_count")

    @property
    @pulumi.getter(name="attackDomainCount")
    def attack_domain_count(self) -> int:
        """
        AttackDomainCount.
        """
        return pulumi.get(self, "attack_domain_count")

    @property
    @pulumi.getter(name="attackIpCount")
    def attack_ip_count(self) -> int:
        """
        AttackIpCount.
        """
        return pulumi.get(self, "attack_ip_count")

    @property
    @pulumi.getter(name="blockIpCount")
    def block_ip_count(self) -> int:
        """
        BlockIpCount.
        """
        return pulumi.get(self, "block_ip_count")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxAttackFlow")
    def max_attack_flow(self) -> int:
        """
        MaxAttackFlow.
        """
        return pulumi.get(self, "max_attack_flow")

    @property
    @pulumi.getter(name="newAttackIp")
    def new_attack_ip(self) -> str:
        """
        The IP address in the most recent attack.
        """
        return pulumi.get(self, "new_attack_ip")

    @property
    @pulumi.getter(name="newAttackTime")
    def new_attack_time(self) -> str:
        """
        The time in the most recent attack.
        """
        return pulumi.get(self, "new_attack_time")

    @property
    @pulumi.getter(name="newAttackType")
    def new_attack_type(self) -> str:
        """
        The type in the most recent attack.
        """
        return pulumi.get(self, "new_attack_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetOverviewIndexResult(GetOverviewIndexResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOverviewIndexResult(
            all_ip_count=self.all_ip_count,
            antiddos_domain_count=self.antiddos_domain_count,
            antiddos_ip_count=self.antiddos_ip_count,
            attack_domain_count=self.attack_domain_count,
            attack_ip_count=self.attack_ip_count,
            block_ip_count=self.block_ip_count,
            end_time=self.end_time,
            id=self.id,
            max_attack_flow=self.max_attack_flow,
            new_attack_ip=self.new_attack_ip,
            new_attack_time=self.new_attack_time,
            new_attack_type=self.new_attack_type,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_overview_index(end_time: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       start_time: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOverviewIndexResult:
    """
    Use this data source to query detailed information of antiddos overview index

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    overview_index = tencentcloud.Antiddos.get_overview_index(end_time="2023-11-21 12:32:12",
        start_time="2023-11-20 12:32:12")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: EndTime.
    :param str result_output_file: Used to save results.
    :param str start_time: StartTime.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Antiddos/getOverviewIndex:getOverviewIndex', __args__, opts=opts, typ=GetOverviewIndexResult).value

    return AwaitableGetOverviewIndexResult(
        all_ip_count=pulumi.get(__ret__, 'all_ip_count'),
        antiddos_domain_count=pulumi.get(__ret__, 'antiddos_domain_count'),
        antiddos_ip_count=pulumi.get(__ret__, 'antiddos_ip_count'),
        attack_domain_count=pulumi.get(__ret__, 'attack_domain_count'),
        attack_ip_count=pulumi.get(__ret__, 'attack_ip_count'),
        block_ip_count=pulumi.get(__ret__, 'block_ip_count'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        max_attack_flow=pulumi.get(__ret__, 'max_attack_flow'),
        new_attack_ip=pulumi.get(__ret__, 'new_attack_ip'),
        new_attack_time=pulumi.get(__ret__, 'new_attack_time'),
        new_attack_type=pulumi.get(__ret__, 'new_attack_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_overview_index)
def get_overview_index_output(end_time: Optional[pulumi.Input[str]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              start_time: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOverviewIndexResult]:
    """
    Use this data source to query detailed information of antiddos overview index

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    overview_index = tencentcloud.Antiddos.get_overview_index(end_time="2023-11-21 12:32:12",
        start_time="2023-11-20 12:32:12")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: EndTime.
    :param str result_output_file: Used to save results.
    :param str start_time: StartTime.
    """
    ...
