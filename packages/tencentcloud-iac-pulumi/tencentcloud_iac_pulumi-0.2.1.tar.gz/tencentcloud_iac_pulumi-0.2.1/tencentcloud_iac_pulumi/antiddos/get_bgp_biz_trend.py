# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetBgpBizTrendResult',
    'AwaitableGetBgpBizTrendResult',
    'get_bgp_biz_trend',
    'get_bgp_biz_trend_output',
]

@pulumi.output_type
class GetBgpBizTrendResult:
    """
    A collection of values returned by getBgpBizTrend.
    """
    def __init__(__self__, business=None, data_lists=None, end_time=None, flag=None, id=None, instance_id=None, max_data=None, metric_name=None, result_output_file=None, start_time=None, total=None):
        if business and not isinstance(business, str):
            raise TypeError("Expected argument 'business' to be a str")
        pulumi.set(__self__, "business", business)
        if data_lists and not isinstance(data_lists, list):
            raise TypeError("Expected argument 'data_lists' to be a list")
        pulumi.set(__self__, "data_lists", data_lists)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if flag and not isinstance(flag, int):
            raise TypeError("Expected argument 'flag' to be a int")
        pulumi.set(__self__, "flag", flag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if max_data and not isinstance(max_data, int):
            raise TypeError("Expected argument 'max_data' to be a int")
        pulumi.set(__self__, "max_data", max_data)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if total and not isinstance(total, int):
            raise TypeError("Expected argument 'total' to be a int")
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter
    def business(self) -> str:
        return pulumi.get(self, "business")

    @property
    @pulumi.getter(name="dataLists")
    def data_lists(self) -> Sequence[int]:
        """
        Values at various time points on the graph.
        """
        return pulumi.get(self, "data_lists")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def flag(self) -> int:
        return pulumi.get(self, "flag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="maxData")
    def max_data(self) -> int:
        """
        Returns the maximum value of an array.
        """
        return pulumi.get(self, "max_data")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Number of values in the curve graph.
        """
        return pulumi.get(self, "total")


class AwaitableGetBgpBizTrendResult(GetBgpBizTrendResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBgpBizTrendResult(
            business=self.business,
            data_lists=self.data_lists,
            end_time=self.end_time,
            flag=self.flag,
            id=self.id,
            instance_id=self.instance_id,
            max_data=self.max_data,
            metric_name=self.metric_name,
            result_output_file=self.result_output_file,
            start_time=self.start_time,
            total=self.total)


def get_bgp_biz_trend(business: Optional[str] = None,
                      end_time: Optional[str] = None,
                      flag: Optional[int] = None,
                      instance_id: Optional[str] = None,
                      metric_name: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      start_time: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBgpBizTrendResult:
    """
    Use this data source to query detailed information of antiddos bgp_biz_trend

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    bgp_biz_trend = tencentcloud.Antiddos.get_bgp_biz_trend(business="bgp-multip",
        end_time="2023-11-22 10:25:00",
        flag=0,
        instance_id="bgp-00000ry7",
        metric_name="intraffic",
        start_time="2023-11-22 09:25:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str business: Dayu sub product code (bgpip represents advanced defense IP; net represents professional version of advanced defense IP).
    :param str end_time: Statistic end time.
    :param int flag: 0 represents fixed time, 1 represents custom time.
    :param str instance_id: Antiddos InstanceId.
    :param str metric_name: Statistic metric name, for example: intraffic, outtraffic, inpkg, outpkg.
    :param str result_output_file: Used to save results.
    :param str start_time: Statistic start time.
    """
    __args__ = dict()
    __args__['business'] = business
    __args__['endTime'] = end_time
    __args__['flag'] = flag
    __args__['instanceId'] = instance_id
    __args__['metricName'] = metric_name
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Antiddos/getBgpBizTrend:getBgpBizTrend', __args__, opts=opts, typ=GetBgpBizTrendResult).value

    return AwaitableGetBgpBizTrendResult(
        business=pulumi.get(__ret__, 'business'),
        data_lists=pulumi.get(__ret__, 'data_lists'),
        end_time=pulumi.get(__ret__, 'end_time'),
        flag=pulumi.get(__ret__, 'flag'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        max_data=pulumi.get(__ret__, 'max_data'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'),
        total=pulumi.get(__ret__, 'total'))


@_utilities.lift_output_func(get_bgp_biz_trend)
def get_bgp_biz_trend_output(business: Optional[pulumi.Input[str]] = None,
                             end_time: Optional[pulumi.Input[str]] = None,
                             flag: Optional[pulumi.Input[int]] = None,
                             instance_id: Optional[pulumi.Input[str]] = None,
                             metric_name: Optional[pulumi.Input[str]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             start_time: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBgpBizTrendResult]:
    """
    Use this data source to query detailed information of antiddos bgp_biz_trend

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    bgp_biz_trend = tencentcloud.Antiddos.get_bgp_biz_trend(business="bgp-multip",
        end_time="2023-11-22 10:25:00",
        flag=0,
        instance_id="bgp-00000ry7",
        metric_name="intraffic",
        start_time="2023-11-22 09:25:00")
    ```
    <!--End PulumiCodeChooser -->


    :param str business: Dayu sub product code (bgpip represents advanced defense IP; net represents professional version of advanced defense IP).
    :param str end_time: Statistic end time.
    :param int flag: 0 represents fixed time, 1 represents custom time.
    :param str instance_id: Antiddos InstanceId.
    :param str metric_name: Statistic metric name, for example: intraffic, outtraffic, inpkg, outpkg.
    :param str result_output_file: Used to save results.
    :param str start_time: Statistic start time.
    """
    ...
