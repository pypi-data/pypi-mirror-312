# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CcBlackWhiteIpArgs', 'CcBlackWhiteIp']

@pulumi.input_type
class CcBlackWhiteIpArgs:
    def __init__(__self__, *,
                 black_white_ip: pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs'],
                 domain: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 ip: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        The set of arguments for constructing a CcBlackWhiteIp resource.
        :param pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs'] black_white_ip: Black white ip.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[str] ip: ip address.
        :param pulumi.Input[str] protocol: protocol.
        :param pulumi.Input[str] type: IP type, value [black(blacklist IP), white(whitelist IP)].
        """
        pulumi.set(__self__, "black_white_ip", black_white_ip)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="blackWhiteIp")
    def black_white_ip(self) -> pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs']:
        """
        Black white ip.
        """
        return pulumi.get(self, "black_white_ip")

    @black_white_ip.setter
    def black_white_ip(self, value: pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs']):
        pulumi.set(self, "black_white_ip", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        IP type, value [black(blacklist IP), white(whitelist IP)].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _CcBlackWhiteIpState:
    def __init__(__self__, *,
                 black_white_ip: Optional[pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs']] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CcBlackWhiteIp resources.
        :param pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs'] black_white_ip: Black white ip.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[str] ip: ip address.
        :param pulumi.Input[str] protocol: protocol.
        :param pulumi.Input[str] type: IP type, value [black(blacklist IP), white(whitelist IP)].
        """
        if black_white_ip is not None:
            pulumi.set(__self__, "black_white_ip", black_white_ip)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="blackWhiteIp")
    def black_white_ip(self) -> Optional[pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs']]:
        """
        Black white ip.
        """
        return pulumi.get(self, "black_white_ip")

    @black_white_ip.setter
    def black_white_ip(self, value: Optional[pulumi.Input['CcBlackWhiteIpBlackWhiteIpArgs']]):
        pulumi.set(self, "black_white_ip", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        IP type, value [black(blacklist IP), white(whitelist IP)].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class CcBlackWhiteIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 black_white_ip: Optional[pulumi.Input[pulumi.InputType['CcBlackWhiteIpBlackWhiteIpArgs']]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a antiddos cc black white ip

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cc_black_white_ip = tencentcloud.antiddos.CcBlackWhiteIp("ccBlackWhiteIp",
            black_white_ip=tencentcloud.antiddos.CcBlackWhiteIpBlackWhiteIpArgs(
                ip="1.2.3.5",
                mask=0,
            ),
            domain="t.baidu.com",
            instance_id="bgpip-xxxxxx",
            ip="xxx.xxx.xxx.xxx",
            protocol="http",
            type="black")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        antiddos cc_black_white_ip can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp cc_black_white_ip ${instanceId}#${policyId}#${instanceIp}#${domain}#${protocol}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CcBlackWhiteIpBlackWhiteIpArgs']] black_white_ip: Black white ip.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[str] ip: ip address.
        :param pulumi.Input[str] protocol: protocol.
        :param pulumi.Input[str] type: IP type, value [black(blacklist IP), white(whitelist IP)].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CcBlackWhiteIpArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a antiddos cc black white ip

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cc_black_white_ip = tencentcloud.antiddos.CcBlackWhiteIp("ccBlackWhiteIp",
            black_white_ip=tencentcloud.antiddos.CcBlackWhiteIpBlackWhiteIpArgs(
                ip="1.2.3.5",
                mask=0,
            ),
            domain="t.baidu.com",
            instance_id="bgpip-xxxxxx",
            ip="xxx.xxx.xxx.xxx",
            protocol="http",
            type="black")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        antiddos cc_black_white_ip can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp cc_black_white_ip ${instanceId}#${policyId}#${instanceIp}#${domain}#${protocol}
        ```

        :param str resource_name: The name of the resource.
        :param CcBlackWhiteIpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CcBlackWhiteIpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 black_white_ip: Optional[pulumi.Input[pulumi.InputType['CcBlackWhiteIpBlackWhiteIpArgs']]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CcBlackWhiteIpArgs.__new__(CcBlackWhiteIpArgs)

            if black_white_ip is None and not opts.urn:
                raise TypeError("Missing required property 'black_white_ip'")
            __props__.__dict__["black_white_ip"] = black_white_ip
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(CcBlackWhiteIp, __self__).__init__(
            'tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            black_white_ip: Optional[pulumi.Input[pulumi.InputType['CcBlackWhiteIpBlackWhiteIpArgs']]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'CcBlackWhiteIp':
        """
        Get an existing CcBlackWhiteIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CcBlackWhiteIpBlackWhiteIpArgs']] black_white_ip: Black white ip.
        :param pulumi.Input[str] domain: domain.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[str] ip: ip address.
        :param pulumi.Input[str] protocol: protocol.
        :param pulumi.Input[str] type: IP type, value [black(blacklist IP), white(whitelist IP)].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CcBlackWhiteIpState.__new__(_CcBlackWhiteIpState)

        __props__.__dict__["black_white_ip"] = black_white_ip
        __props__.__dict__["domain"] = domain
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["ip"] = ip
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["type"] = type
        return CcBlackWhiteIp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blackWhiteIp")
    def black_white_ip(self) -> pulumi.Output['outputs.CcBlackWhiteIpBlackWhiteIp']:
        """
        Black white ip.
        """
        return pulumi.get(self, "black_white_ip")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        ip address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        IP type, value [black(blacklist IP), white(whitelist IP)].
        """
        return pulumi.get(self, "type")

