# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SchedulingDomainUserNameArgs', 'SchedulingDomainUserName']

@pulumi.input_type
class SchedulingDomainUserNameArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 domain_user_name: pulumi.Input[str]):
        """
        The set of arguments for constructing a SchedulingDomainUserName resource.
        :param pulumi.Input[str] domain_name: user cname.
        :param pulumi.Input[str] domain_user_name: domain name.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_user_name", domain_user_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        user cname.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> pulumi.Input[str]:
        """
        domain name.
        """
        return pulumi.get(self, "domain_user_name")

    @domain_user_name.setter
    def domain_user_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_user_name", value)


@pulumi.input_type
class _SchedulingDomainUserNameState:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 domain_user_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SchedulingDomainUserName resources.
        :param pulumi.Input[str] domain_name: user cname.
        :param pulumi.Input[str] domain_user_name: domain name.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if domain_user_name is not None:
            pulumi.set(__self__, "domain_user_name", domain_user_name)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        user cname.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> Optional[pulumi.Input[str]]:
        """
        domain name.
        """
        return pulumi.get(self, "domain_user_name")

    @domain_user_name.setter
    def domain_user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_user_name", value)


class SchedulingDomainUserName(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 domain_user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a antiddos scheduling_domain_user_name

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        scheduling_domain_user_name = tencentcloud.antiddos.SchedulingDomainUserName("schedulingDomainUserName",
            domain_name="test.com",
            domain_user_name="")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        antiddos scheduling_domain_user_name can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Antiddos/schedulingDomainUserName:SchedulingDomainUserName scheduling_domain_user_name ${domainName}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_name: user cname.
        :param pulumi.Input[str] domain_user_name: domain name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SchedulingDomainUserNameArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a antiddos scheduling_domain_user_name

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        scheduling_domain_user_name = tencentcloud.antiddos.SchedulingDomainUserName("schedulingDomainUserName",
            domain_name="test.com",
            domain_user_name="")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        antiddos scheduling_domain_user_name can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Antiddos/schedulingDomainUserName:SchedulingDomainUserName scheduling_domain_user_name ${domainName}
        ```

        :param str resource_name: The name of the resource.
        :param SchedulingDomainUserNameArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SchedulingDomainUserNameArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 domain_user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SchedulingDomainUserNameArgs.__new__(SchedulingDomainUserNameArgs)

            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if domain_user_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_user_name'")
            __props__.__dict__["domain_user_name"] = domain_user_name
        super(SchedulingDomainUserName, __self__).__init__(
            'tencentcloud:Antiddos/schedulingDomainUserName:SchedulingDomainUserName',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            domain_user_name: Optional[pulumi.Input[str]] = None) -> 'SchedulingDomainUserName':
        """
        Get an existing SchedulingDomainUserName resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_name: user cname.
        :param pulumi.Input[str] domain_user_name: domain name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SchedulingDomainUserNameState.__new__(_SchedulingDomainUserNameState)

        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["domain_user_name"] = domain_user_name
        return SchedulingDomainUserName(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        user cname.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> pulumi.Output[str]:
        """
        domain name.
        """
        return pulumi.get(self, "domain_user_name")

