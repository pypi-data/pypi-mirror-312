# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ApiKeyAttachmentArgs', 'ApiKeyAttachment']

@pulumi.input_type
class ApiKeyAttachmentArgs:
    def __init__(__self__, *,
                 api_key_id: pulumi.Input[str],
                 usage_plan_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ApiKeyAttachment resource.
        :param pulumi.Input[str] api_key_id: ID of API key.
        :param pulumi.Input[str] usage_plan_id: ID of the usage plan.
        """
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "usage_plan_id", usage_plan_id)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Input[str]:
        """
        ID of API key.
        """
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> pulumi.Input[str]:
        """
        ID of the usage plan.
        """
        return pulumi.get(self, "usage_plan_id")

    @usage_plan_id.setter
    def usage_plan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "usage_plan_id", value)


@pulumi.input_type
class _ApiKeyAttachmentState:
    def __init__(__self__, *,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 usage_plan_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiKeyAttachment resources.
        :param pulumi.Input[str] api_key_id: ID of API key.
        :param pulumi.Input[str] usage_plan_id: ID of the usage plan.
        """
        if api_key_id is not None:
            pulumi.set(__self__, "api_key_id", api_key_id)
        if usage_plan_id is not None:
            pulumi.set(__self__, "usage_plan_id", usage_plan_id)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of API key.
        """
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the usage plan.
        """
        return pulumi.get(self, "usage_plan_id")

    @usage_plan_id.setter
    def usage_plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage_plan_id", value)


class ApiKeyAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 usage_plan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to API gateway attach access key to usage plan.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        key = tencentcloud.api_gateway.ApiKey("key",
            secret_name="my_api_key",
            status="on")
        plan = tencentcloud.api_gateway.UsagePlan("plan",
            usage_plan_name="my_plan",
            usage_plan_desc="nice plan",
            max_request_num=100,
            max_request_num_pre_sec=10)
        attach = tencentcloud.api_gateway.ApiKeyAttachment("attach",
            api_key_id=key.id,
            usage_plan_id=plan.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        API gateway attach access key can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/apiKeyAttachment:ApiKeyAttachment attach [your api_key_id]#usagePlan-gyeafpab
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key_id: ID of API key.
        :param pulumi.Input[str] usage_plan_id: ID of the usage plan.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiKeyAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to API gateway attach access key to usage plan.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        key = tencentcloud.api_gateway.ApiKey("key",
            secret_name="my_api_key",
            status="on")
        plan = tencentcloud.api_gateway.UsagePlan("plan",
            usage_plan_name="my_plan",
            usage_plan_desc="nice plan",
            max_request_num=100,
            max_request_num_pre_sec=10)
        attach = tencentcloud.api_gateway.ApiKeyAttachment("attach",
            api_key_id=key.id,
            usage_plan_id=plan.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        API gateway attach access key can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/apiKeyAttachment:ApiKeyAttachment attach [your api_key_id]#usagePlan-gyeafpab
        ```

        :param str resource_name: The name of the resource.
        :param ApiKeyAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiKeyAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key_id: Optional[pulumi.Input[str]] = None,
                 usage_plan_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiKeyAttachmentArgs.__new__(ApiKeyAttachmentArgs)

            if api_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_key_id'")
            __props__.__dict__["api_key_id"] = api_key_id
            if usage_plan_id is None and not opts.urn:
                raise TypeError("Missing required property 'usage_plan_id'")
            __props__.__dict__["usage_plan_id"] = usage_plan_id
        super(ApiKeyAttachment, __self__).__init__(
            'tencentcloud:ApiGateway/apiKeyAttachment:ApiKeyAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key_id: Optional[pulumi.Input[str]] = None,
            usage_plan_id: Optional[pulumi.Input[str]] = None) -> 'ApiKeyAttachment':
        """
        Get an existing ApiKeyAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key_id: ID of API key.
        :param pulumi.Input[str] usage_plan_id: ID of the usage plan.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiKeyAttachmentState.__new__(_ApiKeyAttachmentState)

        __props__.__dict__["api_key_id"] = api_key_id
        __props__.__dict__["usage_plan_id"] = usage_plan_id
        return ApiKeyAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Output[str]:
        """
        ID of API key.
        """
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> pulumi.Output[str]:
        """
        ID of the usage plan.
        """
        return pulumi.get(self, "usage_plan_id")

