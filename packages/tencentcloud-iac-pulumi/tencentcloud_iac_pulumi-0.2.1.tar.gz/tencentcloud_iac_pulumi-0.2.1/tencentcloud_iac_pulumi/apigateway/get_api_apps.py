# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiAppsResult',
    'AwaitableGetApiAppsResult',
    'get_api_apps',
    'get_api_apps_output',
]

@pulumi.output_type
class GetApiAppsResult:
    """
    A collection of values returned by getApiApps.
    """
    def __init__(__self__, api_app_id=None, api_app_lists=None, api_app_name=None, id=None, result_output_file=None):
        if api_app_id and not isinstance(api_app_id, str):
            raise TypeError("Expected argument 'api_app_id' to be a str")
        pulumi.set(__self__, "api_app_id", api_app_id)
        if api_app_lists and not isinstance(api_app_lists, list):
            raise TypeError("Expected argument 'api_app_lists' to be a list")
        pulumi.set(__self__, "api_app_lists", api_app_lists)
        if api_app_name and not isinstance(api_app_name, str):
            raise TypeError("Expected argument 'api_app_name' to be a str")
        pulumi.set(__self__, "api_app_name", api_app_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="apiAppId")
    def api_app_id(self) -> Optional[str]:
        """
        ApiApp ID.
        """
        return pulumi.get(self, "api_app_id")

    @property
    @pulumi.getter(name="apiAppLists")
    def api_app_lists(self) -> Sequence['outputs.GetApiAppsApiAppListResult']:
        """
        List of ApiApp.
        """
        return pulumi.get(self, "api_app_lists")

    @property
    @pulumi.getter(name="apiAppName")
    def api_app_name(self) -> Optional[str]:
        """
        ApiApp Name.
        """
        return pulumi.get(self, "api_app_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetApiAppsResult(GetApiAppsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiAppsResult(
            api_app_id=self.api_app_id,
            api_app_lists=self.api_app_lists,
            api_app_name=self.api_app_name,
            id=self.id,
            result_output_file=self.result_output_file)


def get_api_apps(api_app_id: Optional[str] = None,
                 api_app_name: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiAppsResult:
    """
    Use this data source to query list information of api_gateway api_app


    :param str api_app_id: Api app ID.
    :param str api_app_name: Api app name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['apiAppId'] = api_app_id
    __args__['apiAppName'] = api_app_name
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:ApiGateway/getApiApps:getApiApps', __args__, opts=opts, typ=GetApiAppsResult).value

    return AwaitableGetApiAppsResult(
        api_app_id=pulumi.get(__ret__, 'api_app_id'),
        api_app_lists=pulumi.get(__ret__, 'api_app_lists'),
        api_app_name=pulumi.get(__ret__, 'api_app_name'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_api_apps)
def get_api_apps_output(api_app_id: Optional[pulumi.Input[Optional[str]]] = None,
                        api_app_name: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiAppsResult]:
    """
    Use this data source to query list information of api_gateway api_app


    :param str api_app_id: Api app ID.
    :param str api_app_name: Api app name.
    :param str result_output_file: Used to save results.
    """
    ...
