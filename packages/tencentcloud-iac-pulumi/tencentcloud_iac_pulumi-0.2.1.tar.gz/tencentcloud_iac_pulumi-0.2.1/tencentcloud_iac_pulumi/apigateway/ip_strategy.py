# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['IpStrategyArgs', 'IpStrategy']

@pulumi.input_type
class IpStrategyArgs:
    def __init__(__self__, *,
                 service_id: pulumi.Input[str],
                 strategy_data: pulumi.Input[str],
                 strategy_name: pulumi.Input[str],
                 strategy_type: pulumi.Input[str]):
        """
        The set of arguments for constructing a IpStrategy resource.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_data: IP address data.
        :param pulumi.Input[str] strategy_name: User defined strategy name.
        :param pulumi.Input[str] strategy_type: Blacklist or whitelist.
        """
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "strategy_data", strategy_data)
        pulumi.set(__self__, "strategy_name", strategy_name)
        pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        The ID of the API gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="strategyData")
    def strategy_data(self) -> pulumi.Input[str]:
        """
        IP address data.
        """
        return pulumi.get(self, "strategy_data")

    @strategy_data.setter
    def strategy_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "strategy_data", value)

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> pulumi.Input[str]:
        """
        User defined strategy name.
        """
        return pulumi.get(self, "strategy_name")

    @strategy_name.setter
    def strategy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "strategy_name", value)

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> pulumi.Input[str]:
        """
        Blacklist or whitelist.
        """
        return pulumi.get(self, "strategy_type")

    @strategy_type.setter
    def strategy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "strategy_type", value)


@pulumi.input_type
class _IpStrategyState:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strategy_data: Optional[pulumi.Input[str]] = None,
                 strategy_id: Optional[pulumi.Input[str]] = None,
                 strategy_name: Optional[pulumi.Input[str]] = None,
                 strategy_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IpStrategy resources.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_data: IP address data.
        :param pulumi.Input[str] strategy_id: IP policy ID.
        :param pulumi.Input[str] strategy_name: User defined strategy name.
        :param pulumi.Input[str] strategy_type: Blacklist or whitelist.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if strategy_data is not None:
            pulumi.set(__self__, "strategy_data", strategy_data)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)
        if strategy_name is not None:
            pulumi.set(__self__, "strategy_name", strategy_name)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the API gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="strategyData")
    def strategy_data(self) -> Optional[pulumi.Input[str]]:
        """
        IP address data.
        """
        return pulumi.get(self, "strategy_data")

    @strategy_data.setter
    def strategy_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_data", value)

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        IP policy ID.
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_id", value)

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> Optional[pulumi.Input[str]]:
        """
        User defined strategy name.
        """
        return pulumi.get(self, "strategy_name")

    @strategy_name.setter
    def strategy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_name", value)

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Blacklist or whitelist.
        """
        return pulumi.get(self, "strategy_type")

    @strategy_type.setter
    def strategy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_type", value)


class IpStrategy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strategy_data: Optional[pulumi.Input[str]] = None,
                 strategy_name: Optional[pulumi.Input[str]] = None,
                 strategy_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create IP strategy of API gateway.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        service = tencentcloud.api_gateway.Service("service",
            service_name="niceservice",
            protocol="http&https",
            service_desc="your nice service",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4")
        test = tencentcloud.api_gateway.IpStrategy("test",
            service_id=service.id,
            strategy_name="tf_test",
            strategy_type="BLACK",
            strategy_data="9.9.9.9")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        IP strategy of API gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/ipStrategy:IpStrategy test service-ohxqslqe#IPStrategy-q1lk8ud2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_data: IP address data.
        :param pulumi.Input[str] strategy_name: User defined strategy name.
        :param pulumi.Input[str] strategy_type: Blacklist or whitelist.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpStrategyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create IP strategy of API gateway.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        service = tencentcloud.api_gateway.Service("service",
            service_name="niceservice",
            protocol="http&https",
            service_desc="your nice service",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4")
        test = tencentcloud.api_gateway.IpStrategy("test",
            service_id=service.id,
            strategy_name="tf_test",
            strategy_type="BLACK",
            strategy_data="9.9.9.9")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        IP strategy of API gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/ipStrategy:IpStrategy test service-ohxqslqe#IPStrategy-q1lk8ud2
        ```

        :param str resource_name: The name of the resource.
        :param IpStrategyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpStrategyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strategy_data: Optional[pulumi.Input[str]] = None,
                 strategy_name: Optional[pulumi.Input[str]] = None,
                 strategy_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpStrategyArgs.__new__(IpStrategyArgs)

            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            if strategy_data is None and not opts.urn:
                raise TypeError("Missing required property 'strategy_data'")
            __props__.__dict__["strategy_data"] = strategy_data
            if strategy_name is None and not opts.urn:
                raise TypeError("Missing required property 'strategy_name'")
            __props__.__dict__["strategy_name"] = strategy_name
            if strategy_type is None and not opts.urn:
                raise TypeError("Missing required property 'strategy_type'")
            __props__.__dict__["strategy_type"] = strategy_type
            __props__.__dict__["create_time"] = None
            __props__.__dict__["strategy_id"] = None
        super(IpStrategy, __self__).__init__(
            'tencentcloud:ApiGateway/ipStrategy:IpStrategy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            strategy_data: Optional[pulumi.Input[str]] = None,
            strategy_id: Optional[pulumi.Input[str]] = None,
            strategy_name: Optional[pulumi.Input[str]] = None,
            strategy_type: Optional[pulumi.Input[str]] = None) -> 'IpStrategy':
        """
        Get an existing IpStrategy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] service_id: The ID of the API gateway service.
        :param pulumi.Input[str] strategy_data: IP address data.
        :param pulumi.Input[str] strategy_id: IP policy ID.
        :param pulumi.Input[str] strategy_name: User defined strategy name.
        :param pulumi.Input[str] strategy_type: Blacklist or whitelist.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpStrategyState.__new__(_IpStrategyState)

        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["strategy_data"] = strategy_data
        __props__.__dict__["strategy_id"] = strategy_id
        __props__.__dict__["strategy_name"] = strategy_name
        __props__.__dict__["strategy_type"] = strategy_type
        return IpStrategy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        The ID of the API gateway service.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="strategyData")
    def strategy_data(self) -> pulumi.Output[str]:
        """
        IP address data.
        """
        return pulumi.get(self, "strategy_data")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> pulumi.Output[str]:
        """
        IP policy ID.
        """
        return pulumi.get(self, "strategy_id")

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> pulumi.Output[str]:
        """
        User defined strategy name.
        """
        return pulumi.get(self, "strategy_name")

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> pulumi.Output[str]:
        """
        Blacklist or whitelist.
        """
        return pulumi.get(self, "strategy_type")

