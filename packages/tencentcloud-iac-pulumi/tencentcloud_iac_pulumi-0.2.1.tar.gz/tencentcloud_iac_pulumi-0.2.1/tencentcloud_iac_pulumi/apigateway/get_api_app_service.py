# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetApiAppServiceResult',
    'AwaitableGetApiAppServiceResult',
    'get_api_app_service',
    'get_api_app_service_output',
]

@pulumi.output_type
class GetApiAppServiceResult:
    """
    A collection of values returned by getApiAppService.
    """
    def __init__(__self__, api_id_status_sets=None, api_region=None, api_total_count=None, available_environments=None, created_time=None, id=None, inner_http_port=None, inner_https_port=None, internal_sub_domain=None, ip_version=None, modified_time=None, net_types=None, outer_sub_domain=None, protocol=None, result_output_file=None, service_desc=None, service_id=None, service_name=None, set_id=None, usage_plan_lists=None, usage_plan_total_count=None, user_type=None):
        if api_id_status_sets and not isinstance(api_id_status_sets, list):
            raise TypeError("Expected argument 'api_id_status_sets' to be a list")
        pulumi.set(__self__, "api_id_status_sets", api_id_status_sets)
        if api_region and not isinstance(api_region, str):
            raise TypeError("Expected argument 'api_region' to be a str")
        pulumi.set(__self__, "api_region", api_region)
        if api_total_count and not isinstance(api_total_count, int):
            raise TypeError("Expected argument 'api_total_count' to be a int")
        pulumi.set(__self__, "api_total_count", api_total_count)
        if available_environments and not isinstance(available_environments, list):
            raise TypeError("Expected argument 'available_environments' to be a list")
        pulumi.set(__self__, "available_environments", available_environments)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inner_http_port and not isinstance(inner_http_port, int):
            raise TypeError("Expected argument 'inner_http_port' to be a int")
        pulumi.set(__self__, "inner_http_port", inner_http_port)
        if inner_https_port and not isinstance(inner_https_port, int):
            raise TypeError("Expected argument 'inner_https_port' to be a int")
        pulumi.set(__self__, "inner_https_port", inner_https_port)
        if internal_sub_domain and not isinstance(internal_sub_domain, str):
            raise TypeError("Expected argument 'internal_sub_domain' to be a str")
        pulumi.set(__self__, "internal_sub_domain", internal_sub_domain)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if modified_time and not isinstance(modified_time, str):
            raise TypeError("Expected argument 'modified_time' to be a str")
        pulumi.set(__self__, "modified_time", modified_time)
        if net_types and not isinstance(net_types, list):
            raise TypeError("Expected argument 'net_types' to be a list")
        pulumi.set(__self__, "net_types", net_types)
        if outer_sub_domain and not isinstance(outer_sub_domain, str):
            raise TypeError("Expected argument 'outer_sub_domain' to be a str")
        pulumi.set(__self__, "outer_sub_domain", outer_sub_domain)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if service_desc and not isinstance(service_desc, str):
            raise TypeError("Expected argument 'service_desc' to be a str")
        pulumi.set(__self__, "service_desc", service_desc)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if set_id and not isinstance(set_id, int):
            raise TypeError("Expected argument 'set_id' to be a int")
        pulumi.set(__self__, "set_id", set_id)
        if usage_plan_lists and not isinstance(usage_plan_lists, list):
            raise TypeError("Expected argument 'usage_plan_lists' to be a list")
        pulumi.set(__self__, "usage_plan_lists", usage_plan_lists)
        if usage_plan_total_count and not isinstance(usage_plan_total_count, int):
            raise TypeError("Expected argument 'usage_plan_total_count' to be a int")
        pulumi.set(__self__, "usage_plan_total_count", usage_plan_total_count)
        if user_type and not isinstance(user_type, str):
            raise TypeError("Expected argument 'user_type' to be a str")
        pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="apiIdStatusSets")
    def api_id_status_sets(self) -> Sequence['outputs.GetApiAppServiceApiIdStatusSetResult']:
        """
        API list.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "api_id_status_sets")

    @property
    @pulumi.getter(name="apiRegion")
    def api_region(self) -> str:
        return pulumi.get(self, "api_region")

    @property
    @pulumi.getter(name="apiTotalCount")
    def api_total_count(self) -> int:
        """
        Total number of APIs.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "api_total_count")

    @property
    @pulumi.getter(name="availableEnvironments")
    def available_environments(self) -> Sequence[str]:
        """
        List of service environments.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "available_environments")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        Use planned time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="innerHttpPort")
    def inner_http_port(self) -> int:
        """
        Internal network access HTTP service port number.
        """
        return pulumi.get(self, "inner_http_port")

    @property
    @pulumi.getter(name="innerHttpsPort")
    def inner_https_port(self) -> int:
        """
        Internal network access https port number.
        """
        return pulumi.get(self, "inner_https_port")

    @property
    @pulumi.getter(name="internalSubDomain")
    def internal_sub_domain(self) -> str:
        """
        Intranet access sub domain name.
        """
        return pulumi.get(self, "internal_sub_domain")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> str:
        """
        IP version.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> str:
        """
        Use the schedule to modify the time.
        """
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="netTypes")
    def net_types(self) -> Sequence[str]:
        """
        A list of network types, where INNER represents internal network access and OUTER represents external network access.
        """
        return pulumi.get(self, "net_types")

    @property
    @pulumi.getter(name="outerSubDomain")
    def outer_sub_domain(self) -> str:
        """
        External network access sub domain name.
        """
        return pulumi.get(self, "outer_sub_domain")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        Service support protocol, optional values are http, https, and http&amp;amp;https.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="serviceDesc")
    def service_desc(self) -> str:
        """
        Service description.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "service_desc")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        Service unique ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Service name.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="setId")
    def set_id(self) -> int:
        """
        Reserved fields.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "set_id")

    @property
    @pulumi.getter(name="usagePlanLists")
    def usage_plan_lists(self) -> Sequence['outputs.GetApiAppServiceUsagePlanListResult']:
        """
        Use a plan array.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "usage_plan_lists")

    @property
    @pulumi.getter(name="usagePlanTotalCount")
    def usage_plan_total_count(self) -> int:
        """
        Total number of usage plans.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "usage_plan_total_count")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> str:
        """
        The user type of this service.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "user_type")


class AwaitableGetApiAppServiceResult(GetApiAppServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiAppServiceResult(
            api_id_status_sets=self.api_id_status_sets,
            api_region=self.api_region,
            api_total_count=self.api_total_count,
            available_environments=self.available_environments,
            created_time=self.created_time,
            id=self.id,
            inner_http_port=self.inner_http_port,
            inner_https_port=self.inner_https_port,
            internal_sub_domain=self.internal_sub_domain,
            ip_version=self.ip_version,
            modified_time=self.modified_time,
            net_types=self.net_types,
            outer_sub_domain=self.outer_sub_domain,
            protocol=self.protocol,
            result_output_file=self.result_output_file,
            service_desc=self.service_desc,
            service_id=self.service_id,
            service_name=self.service_name,
            set_id=self.set_id,
            usage_plan_lists=self.usage_plan_lists,
            usage_plan_total_count=self.usage_plan_total_count,
            user_type=self.user_type)


def get_api_app_service(api_region: Optional[str] = None,
                        result_output_file: Optional[str] = None,
                        service_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiAppServiceResult:
    """
    Use this data source to query detailed information of apigateway api_app_services

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_service = tencentcloud.api_gateway.Service("exampleService",
        service_name="tf_example",
        protocol="http&https",
        service_desc="desc.",
        net_types=[
            "INNER",
            "OUTER",
        ],
        ip_version="IPv4")
    example_api = tencentcloud.api_gateway.Api("exampleApi",
        service_id=example_service.id,
        api_name="tf_example",
        api_desc="my hello api update",
        auth_type="APP",
        protocol="HTTP",
        enable_cors=True,
        request_config_path="/user/info",
        request_config_method="POST",
        request_parameters=[tencentcloud.api_gateway.ApiRequestParameterArgs(
            name="email",
            position="QUERY",
            type="string",
            desc="desc.",
            default_value="test@qq.com",
            required=True,
        )],
        service_config_type="HTTP",
        service_config_timeout=10,
        service_config_url="http://www.tencent.com",
        service_config_path="/user",
        service_config_method="POST",
        response_type="XML",
        response_success_example="<note>success</note>",
        response_fail_example="<note>fail</note>",
        response_error_codes=[tencentcloud.api_gateway.ApiResponseErrorCodeArgs(
            code=500,
            msg="system error",
            desc="system error code",
            converted_code=5000,
            need_convert=True,
        )])
    example_api_app_service = tencentcloud.ApiGateway.get_api_app_service_output(service_id=example_api.service_id,
        api_region="ap-guangzhou")
    ```
    <!--End PulumiCodeChooser -->


    :param str api_region: Territory to which the service belongs.
    :param str result_output_file: Used to save results.
    :param str service_id: The unique ID of the service to be queried.
    """
    __args__ = dict()
    __args__['apiRegion'] = api_region
    __args__['resultOutputFile'] = result_output_file
    __args__['serviceId'] = service_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:ApiGateway/getApiAppService:getApiAppService', __args__, opts=opts, typ=GetApiAppServiceResult).value

    return AwaitableGetApiAppServiceResult(
        api_id_status_sets=pulumi.get(__ret__, 'api_id_status_sets'),
        api_region=pulumi.get(__ret__, 'api_region'),
        api_total_count=pulumi.get(__ret__, 'api_total_count'),
        available_environments=pulumi.get(__ret__, 'available_environments'),
        created_time=pulumi.get(__ret__, 'created_time'),
        id=pulumi.get(__ret__, 'id'),
        inner_http_port=pulumi.get(__ret__, 'inner_http_port'),
        inner_https_port=pulumi.get(__ret__, 'inner_https_port'),
        internal_sub_domain=pulumi.get(__ret__, 'internal_sub_domain'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        net_types=pulumi.get(__ret__, 'net_types'),
        outer_sub_domain=pulumi.get(__ret__, 'outer_sub_domain'),
        protocol=pulumi.get(__ret__, 'protocol'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        service_desc=pulumi.get(__ret__, 'service_desc'),
        service_id=pulumi.get(__ret__, 'service_id'),
        service_name=pulumi.get(__ret__, 'service_name'),
        set_id=pulumi.get(__ret__, 'set_id'),
        usage_plan_lists=pulumi.get(__ret__, 'usage_plan_lists'),
        usage_plan_total_count=pulumi.get(__ret__, 'usage_plan_total_count'),
        user_type=pulumi.get(__ret__, 'user_type'))


@_utilities.lift_output_func(get_api_app_service)
def get_api_app_service_output(api_region: Optional[pulumi.Input[str]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               service_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiAppServiceResult]:
    """
    Use this data source to query detailed information of apigateway api_app_services

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    example_service = tencentcloud.api_gateway.Service("exampleService",
        service_name="tf_example",
        protocol="http&https",
        service_desc="desc.",
        net_types=[
            "INNER",
            "OUTER",
        ],
        ip_version="IPv4")
    example_api = tencentcloud.api_gateway.Api("exampleApi",
        service_id=example_service.id,
        api_name="tf_example",
        api_desc="my hello api update",
        auth_type="APP",
        protocol="HTTP",
        enable_cors=True,
        request_config_path="/user/info",
        request_config_method="POST",
        request_parameters=[tencentcloud.api_gateway.ApiRequestParameterArgs(
            name="email",
            position="QUERY",
            type="string",
            desc="desc.",
            default_value="test@qq.com",
            required=True,
        )],
        service_config_type="HTTP",
        service_config_timeout=10,
        service_config_url="http://www.tencent.com",
        service_config_path="/user",
        service_config_method="POST",
        response_type="XML",
        response_success_example="<note>success</note>",
        response_fail_example="<note>fail</note>",
        response_error_codes=[tencentcloud.api_gateway.ApiResponseErrorCodeArgs(
            code=500,
            msg="system error",
            desc="system error code",
            converted_code=5000,
            need_convert=True,
        )])
    example_api_app_service = tencentcloud.ApiGateway.get_api_app_service_output(service_id=example_api.service_id,
        api_region="ap-guangzhou")
    ```
    <!--End PulumiCodeChooser -->


    :param str api_region: Territory to which the service belongs.
    :param str result_output_file: Used to save results.
    :param str service_id: The unique ID of the service to be queried.
    """
    ...
