# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CustomDomainArgs', 'CustomDomain']

@pulumi.input_type
class CustomDomainArgs:
    def __init__(__self__, *,
                 default_domain: pulumi.Input[str],
                 net_type: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 sub_domain: pulumi.Input[str],
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 is_default_mapping: Optional[pulumi.Input[bool]] = None,
                 is_forced_https: Optional[pulumi.Input[bool]] = None,
                 path_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CustomDomain resource.
        :param pulumi.Input[str] default_domain: Default domain name.
        :param pulumi.Input[str] net_type: Network type. Valid values: `OUTER`, `INNER`.
        :param pulumi.Input[str] protocol: Protocol supported by service. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[str] service_id: Unique service ID.
        :param pulumi.Input[str] sub_domain: Custom domain name to be bound.
        :param pulumi.Input[str] certificate_id: Unique certificate ID of the custom domain name to be bound. You can choose to upload for the `protocol` attribute value `https` or `http&https`.
        :param pulumi.Input[bool] is_default_mapping: Whether the default path mapping is used. The default value is `true`. When it is `false`, it means custom path mapping. In this case, the `path_mappings` attribute is required.
        :param pulumi.Input[bool] is_forced_https: Whether to force HTTP requests to jump to HTTPS, default to false. When the parameter is true, the API gateway will redirect all HTTP protocol requests using the custom domain name to the HTTPS protocol for forwarding.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] path_mappings: Custom domain name path mapping. The data format is: `path#environment`. Optional values for the environment are `test`, `prepub`, and `release`.
        """
        pulumi.set(__self__, "default_domain", default_domain)
        pulumi.set(__self__, "net_type", net_type)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "sub_domain", sub_domain)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if is_default_mapping is not None:
            pulumi.set(__self__, "is_default_mapping", is_default_mapping)
        if is_forced_https is not None:
            pulumi.set(__self__, "is_forced_https", is_forced_https)
        if path_mappings is not None:
            pulumi.set(__self__, "path_mappings", path_mappings)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> pulumi.Input[str]:
        """
        Default domain name.
        """
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> pulumi.Input[str]:
        """
        Network type. Valid values: `OUTER`, `INNER`.
        """
        return pulumi.get(self, "net_type")

    @net_type.setter
    def net_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "net_type", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol supported by service. Valid values: `http`, `https`, `http&https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        Unique service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> pulumi.Input[str]:
        """
        Custom domain name to be bound.
        """
        return pulumi.get(self, "sub_domain")

    @sub_domain.setter
    def sub_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "sub_domain", value)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique certificate ID of the custom domain name to be bound. You can choose to upload for the `protocol` attribute value `https` or `http&https`.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="isDefaultMapping")
    def is_default_mapping(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the default path mapping is used. The default value is `true`. When it is `false`, it means custom path mapping. In this case, the `path_mappings` attribute is required.
        """
        return pulumi.get(self, "is_default_mapping")

    @is_default_mapping.setter
    def is_default_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default_mapping", value)

    @property
    @pulumi.getter(name="isForcedHttps")
    def is_forced_https(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force HTTP requests to jump to HTTPS, default to false. When the parameter is true, the API gateway will redirect all HTTP protocol requests using the custom domain name to the HTTPS protocol for forwarding.
        """
        return pulumi.get(self, "is_forced_https")

    @is_forced_https.setter
    def is_forced_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_forced_https", value)

    @property
    @pulumi.getter(name="pathMappings")
    def path_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom domain name path mapping. The data format is: `path#environment`. Optional values for the environment are `test`, `prepub`, and `release`.
        """
        return pulumi.get(self, "path_mappings")

    @path_mappings.setter
    def path_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "path_mappings", value)


@pulumi.input_type
class _CustomDomainState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 is_default_mapping: Optional[pulumi.Input[bool]] = None,
                 is_forced_https: Optional[pulumi.Input[bool]] = None,
                 net_type: Optional[pulumi.Input[str]] = None,
                 path_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CustomDomain resources.
        :param pulumi.Input[str] certificate_id: Unique certificate ID of the custom domain name to be bound. You can choose to upload for the `protocol` attribute value `https` or `http&https`.
        :param pulumi.Input[str] default_domain: Default domain name.
        :param pulumi.Input[bool] is_default_mapping: Whether the default path mapping is used. The default value is `true`. When it is `false`, it means custom path mapping. In this case, the `path_mappings` attribute is required.
        :param pulumi.Input[bool] is_forced_https: Whether to force HTTP requests to jump to HTTPS, default to false. When the parameter is true, the API gateway will redirect all HTTP protocol requests using the custom domain name to the HTTPS protocol for forwarding.
        :param pulumi.Input[str] net_type: Network type. Valid values: `OUTER`, `INNER`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] path_mappings: Custom domain name path mapping. The data format is: `path#environment`. Optional values for the environment are `test`, `prepub`, and `release`.
        :param pulumi.Input[str] protocol: Protocol supported by service. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[str] service_id: Unique service ID.
        :param pulumi.Input[int] status: Domain name resolution status. `1` means normal analysis, `0` means parsing failed.
        :param pulumi.Input[str] sub_domain: Custom domain name to be bound.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if is_default_mapping is not None:
            pulumi.set(__self__, "is_default_mapping", is_default_mapping)
        if is_forced_https is not None:
            pulumi.set(__self__, "is_forced_https", is_forced_https)
        if net_type is not None:
            pulumi.set(__self__, "net_type", net_type)
        if path_mappings is not None:
            pulumi.set(__self__, "path_mappings", path_mappings)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if sub_domain is not None:
            pulumi.set(__self__, "sub_domain", sub_domain)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique certificate ID of the custom domain name to be bound. You can choose to upload for the `protocol` attribute value `https` or `http&https`.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Default domain name.
        """
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter(name="isDefaultMapping")
    def is_default_mapping(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the default path mapping is used. The default value is `true`. When it is `false`, it means custom path mapping. In this case, the `path_mappings` attribute is required.
        """
        return pulumi.get(self, "is_default_mapping")

    @is_default_mapping.setter
    def is_default_mapping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default_mapping", value)

    @property
    @pulumi.getter(name="isForcedHttps")
    def is_forced_https(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force HTTP requests to jump to HTTPS, default to false. When the parameter is true, the API gateway will redirect all HTTP protocol requests using the custom domain name to the HTTPS protocol for forwarding.
        """
        return pulumi.get(self, "is_forced_https")

    @is_forced_https.setter
    def is_forced_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_forced_https", value)

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> Optional[pulumi.Input[str]]:
        """
        Network type. Valid values: `OUTER`, `INNER`.
        """
        return pulumi.get(self, "net_type")

    @net_type.setter
    def net_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_type", value)

    @property
    @pulumi.getter(name="pathMappings")
    def path_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Custom domain name path mapping. The data format is: `path#environment`. Optional values for the environment are `test`, `prepub`, and `release`.
        """
        return pulumi.get(self, "path_mappings")

    @path_mappings.setter
    def path_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "path_mappings", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol supported by service. Valid values: `http`, `https`, `http&https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        Domain name resolution status. `1` means normal analysis, `0` means parsing failed.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Custom domain name to be bound.
        """
        return pulumi.get(self, "sub_domain")

    @sub_domain.setter
    def sub_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_domain", value)


class CustomDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 is_default_mapping: Optional[pulumi.Input[bool]] = None,
                 is_forced_https: Optional[pulumi.Input[bool]] = None,
                 net_type: Optional[pulumi.Input[str]] = None,
                 path_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create custom domain of API gateway.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.api_gateway.CustomDomain("foo",
            default_domain="service-ohxqslqe-1259649581.gz.apigw.tencentcs.com",
            is_default_mapping=False,
            net_type="OUTER",
            path_mappings=[
                "/good#test",
                "/root#release",
            ],
            protocol="http",
            service_id="service-ohxqslqe",
            sub_domain="tic-test.dnsv1.com")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: Unique certificate ID of the custom domain name to be bound. You can choose to upload for the `protocol` attribute value `https` or `http&https`.
        :param pulumi.Input[str] default_domain: Default domain name.
        :param pulumi.Input[bool] is_default_mapping: Whether the default path mapping is used. The default value is `true`. When it is `false`, it means custom path mapping. In this case, the `path_mappings` attribute is required.
        :param pulumi.Input[bool] is_forced_https: Whether to force HTTP requests to jump to HTTPS, default to false. When the parameter is true, the API gateway will redirect all HTTP protocol requests using the custom domain name to the HTTPS protocol for forwarding.
        :param pulumi.Input[str] net_type: Network type. Valid values: `OUTER`, `INNER`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] path_mappings: Custom domain name path mapping. The data format is: `path#environment`. Optional values for the environment are `test`, `prepub`, and `release`.
        :param pulumi.Input[str] protocol: Protocol supported by service. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[str] service_id: Unique service ID.
        :param pulumi.Input[str] sub_domain: Custom domain name to be bound.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create custom domain of API gateway.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.api_gateway.CustomDomain("foo",
            default_domain="service-ohxqslqe-1259649581.gz.apigw.tencentcs.com",
            is_default_mapping=False,
            net_type="OUTER",
            path_mappings=[
                "/good#test",
                "/root#release",
            ],
            protocol="http",
            service_id="service-ohxqslqe",
            sub_domain="tic-test.dnsv1.com")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param CustomDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 is_default_mapping: Optional[pulumi.Input[bool]] = None,
                 is_forced_https: Optional[pulumi.Input[bool]] = None,
                 net_type: Optional[pulumi.Input[str]] = None,
                 path_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 sub_domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomDomainArgs.__new__(CustomDomainArgs)

            __props__.__dict__["certificate_id"] = certificate_id
            if default_domain is None and not opts.urn:
                raise TypeError("Missing required property 'default_domain'")
            __props__.__dict__["default_domain"] = default_domain
            __props__.__dict__["is_default_mapping"] = is_default_mapping
            __props__.__dict__["is_forced_https"] = is_forced_https
            if net_type is None and not opts.urn:
                raise TypeError("Missing required property 'net_type'")
            __props__.__dict__["net_type"] = net_type
            __props__.__dict__["path_mappings"] = path_mappings
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            if sub_domain is None and not opts.urn:
                raise TypeError("Missing required property 'sub_domain'")
            __props__.__dict__["sub_domain"] = sub_domain
            __props__.__dict__["status"] = None
        super(CustomDomain, __self__).__init__(
            'tencentcloud:ApiGateway/customDomain:CustomDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            default_domain: Optional[pulumi.Input[str]] = None,
            is_default_mapping: Optional[pulumi.Input[bool]] = None,
            is_forced_https: Optional[pulumi.Input[bool]] = None,
            net_type: Optional[pulumi.Input[str]] = None,
            path_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[int]] = None,
            sub_domain: Optional[pulumi.Input[str]] = None) -> 'CustomDomain':
        """
        Get an existing CustomDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: Unique certificate ID of the custom domain name to be bound. You can choose to upload for the `protocol` attribute value `https` or `http&https`.
        :param pulumi.Input[str] default_domain: Default domain name.
        :param pulumi.Input[bool] is_default_mapping: Whether the default path mapping is used. The default value is `true`. When it is `false`, it means custom path mapping. In this case, the `path_mappings` attribute is required.
        :param pulumi.Input[bool] is_forced_https: Whether to force HTTP requests to jump to HTTPS, default to false. When the parameter is true, the API gateway will redirect all HTTP protocol requests using the custom domain name to the HTTPS protocol for forwarding.
        :param pulumi.Input[str] net_type: Network type. Valid values: `OUTER`, `INNER`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] path_mappings: Custom domain name path mapping. The data format is: `path#environment`. Optional values for the environment are `test`, `prepub`, and `release`.
        :param pulumi.Input[str] protocol: Protocol supported by service. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[str] service_id: Unique service ID.
        :param pulumi.Input[int] status: Domain name resolution status. `1` means normal analysis, `0` means parsing failed.
        :param pulumi.Input[str] sub_domain: Custom domain name to be bound.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomDomainState.__new__(_CustomDomainState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["default_domain"] = default_domain
        __props__.__dict__["is_default_mapping"] = is_default_mapping
        __props__.__dict__["is_forced_https"] = is_forced_https
        __props__.__dict__["net_type"] = net_type
        __props__.__dict__["path_mappings"] = path_mappings
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["status"] = status
        __props__.__dict__["sub_domain"] = sub_domain
        return CustomDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[str]:
        """
        Unique certificate ID of the custom domain name to be bound. You can choose to upload for the `protocol` attribute value `https` or `http&https`.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> pulumi.Output[str]:
        """
        Default domain name.
        """
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter(name="isDefaultMapping")
    def is_default_mapping(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the default path mapping is used. The default value is `true`. When it is `false`, it means custom path mapping. In this case, the `path_mappings` attribute is required.
        """
        return pulumi.get(self, "is_default_mapping")

    @property
    @pulumi.getter(name="isForcedHttps")
    def is_forced_https(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to force HTTP requests to jump to HTTPS, default to false. When the parameter is true, the API gateway will redirect all HTTP protocol requests using the custom domain name to the HTTPS protocol for forwarding.
        """
        return pulumi.get(self, "is_forced_https")

    @property
    @pulumi.getter(name="netType")
    def net_type(self) -> pulumi.Output[str]:
        """
        Network type. Valid values: `OUTER`, `INNER`.
        """
        return pulumi.get(self, "net_type")

    @property
    @pulumi.getter(name="pathMappings")
    def path_mappings(self) -> pulumi.Output[Sequence[str]]:
        """
        Custom domain name path mapping. The data format is: `path#environment`. Optional values for the environment are `test`, `prepub`, and `release`.
        """
        return pulumi.get(self, "path_mappings")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Protocol supported by service. Valid values: `http`, `https`, `http&https`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        Unique service ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[int]:
        """
        Domain name resolution status. `1` means normal analysis, `0` means parsing failed.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subDomain")
    def sub_domain(self) -> pulumi.Output[str]:
        """
        Custom domain name to be bound.
        """
        return pulumi.get(self, "sub_domain")

