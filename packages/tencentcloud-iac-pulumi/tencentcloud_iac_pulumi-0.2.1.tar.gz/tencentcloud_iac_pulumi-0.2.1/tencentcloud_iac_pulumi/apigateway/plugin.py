# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PluginArgs', 'Plugin']

@pulumi.input_type
class PluginArgs:
    def __init__(__self__, *,
                 plugin_data: pulumi.Input[str],
                 plugin_name: pulumi.Input[str],
                 plugin_type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Plugin resource.
        :param pulumi.Input[str] plugin_data: Statement to define plugin.
        :param pulumi.Input[str] plugin_name: Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters, numbers and dashes(-). The length range is from 2 to 50.
        :param pulumi.Input[str] plugin_type: Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter, CircuitBreaker, ProxyCache.
        :param pulumi.Input[str] description: Description of plugin.
        """
        pulumi.set(__self__, "plugin_data", plugin_data)
        pulumi.set(__self__, "plugin_name", plugin_name)
        pulumi.set(__self__, "plugin_type", plugin_type)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="pluginData")
    def plugin_data(self) -> pulumi.Input[str]:
        """
        Statement to define plugin.
        """
        return pulumi.get(self, "plugin_data")

    @plugin_data.setter
    def plugin_data(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_data", value)

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Input[str]:
        """
        Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters, numbers and dashes(-). The length range is from 2 to 50.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_name", value)

    @property
    @pulumi.getter(name="pluginType")
    def plugin_type(self) -> pulumi.Input[str]:
        """
        Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter, CircuitBreaker, ProxyCache.
        """
        return pulumi.get(self, "plugin_type")

    @plugin_type.setter
    def plugin_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "plugin_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of plugin.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _PluginState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 plugin_data: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 plugin_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Plugin resources.
        :param pulumi.Input[str] description: Description of plugin.
        :param pulumi.Input[str] plugin_data: Statement to define plugin.
        :param pulumi.Input[str] plugin_name: Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters, numbers and dashes(-). The length range is from 2 to 50.
        :param pulumi.Input[str] plugin_type: Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter, CircuitBreaker, ProxyCache.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if plugin_data is not None:
            pulumi.set(__self__, "plugin_data", plugin_data)
        if plugin_name is not None:
            pulumi.set(__self__, "plugin_name", plugin_name)
        if plugin_type is not None:
            pulumi.set(__self__, "plugin_type", plugin_type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of plugin.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="pluginData")
    def plugin_data(self) -> Optional[pulumi.Input[str]]:
        """
        Statement to define plugin.
        """
        return pulumi.get(self, "plugin_data")

    @plugin_data.setter
    def plugin_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_data", value)

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters, numbers and dashes(-). The length range is from 2 to 50.
        """
        return pulumi.get(self, "plugin_name")

    @plugin_name.setter
    def plugin_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_name", value)

    @property
    @pulumi.getter(name="pluginType")
    def plugin_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter, CircuitBreaker, ProxyCache.
        """
        return pulumi.get(self, "plugin_type")

    @plugin_type.setter
    def plugin_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin_type", value)


class Plugin(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 plugin_data: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 plugin_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a apiGateway plugin

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.Plugin("example",
            plugin_name="tf-example",
            plugin_type="IPControl",
            plugin_data=json.dumps({
                "type": "white_list",
                "blocks": "1.1.1.1",
            }),
            description="desc.")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        apiGateway plugin can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/plugin:Plugin plugin plugin_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of plugin.
        :param pulumi.Input[str] plugin_data: Statement to define plugin.
        :param pulumi.Input[str] plugin_name: Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters, numbers and dashes(-). The length range is from 2 to 50.
        :param pulumi.Input[str] plugin_type: Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter, CircuitBreaker, ProxyCache.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PluginArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a apiGateway plugin

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.Plugin("example",
            plugin_name="tf-example",
            plugin_type="IPControl",
            plugin_data=json.dumps({
                "type": "white_list",
                "blocks": "1.1.1.1",
            }),
            description="desc.")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        apiGateway plugin can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/plugin:Plugin plugin plugin_id
        ```

        :param str resource_name: The name of the resource.
        :param PluginArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PluginArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 plugin_data: Optional[pulumi.Input[str]] = None,
                 plugin_name: Optional[pulumi.Input[str]] = None,
                 plugin_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PluginArgs.__new__(PluginArgs)

            __props__.__dict__["description"] = description
            if plugin_data is None and not opts.urn:
                raise TypeError("Missing required property 'plugin_data'")
            __props__.__dict__["plugin_data"] = plugin_data
            if plugin_name is None and not opts.urn:
                raise TypeError("Missing required property 'plugin_name'")
            __props__.__dict__["plugin_name"] = plugin_name
            if plugin_type is None and not opts.urn:
                raise TypeError("Missing required property 'plugin_type'")
            __props__.__dict__["plugin_type"] = plugin_type
        super(Plugin, __self__).__init__(
            'tencentcloud:ApiGateway/plugin:Plugin',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            plugin_data: Optional[pulumi.Input[str]] = None,
            plugin_name: Optional[pulumi.Input[str]] = None,
            plugin_type: Optional[pulumi.Input[str]] = None) -> 'Plugin':
        """
        Get an existing Plugin resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of plugin.
        :param pulumi.Input[str] plugin_data: Statement to define plugin.
        :param pulumi.Input[str] plugin_name: Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters, numbers and dashes(-). The length range is from 2 to 50.
        :param pulumi.Input[str] plugin_type: Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter, CircuitBreaker, ProxyCache.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PluginState.__new__(_PluginState)

        __props__.__dict__["description"] = description
        __props__.__dict__["plugin_data"] = plugin_data
        __props__.__dict__["plugin_name"] = plugin_name
        __props__.__dict__["plugin_type"] = plugin_type
        return Plugin(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of plugin.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="pluginData")
    def plugin_data(self) -> pulumi.Output[str]:
        """
        Statement to define plugin.
        """
        return pulumi.get(self, "plugin_data")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> pulumi.Output[str]:
        """
        Name of the user define plugin. It must start with a letter and end with letter or number, the rest can contain letters, numbers and dashes(-). The length range is from 2 to 50.
        """
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="pluginType")
    def plugin_type(self) -> pulumi.Output[str]:
        """
        Type of plugin. Now support IPControl, TrafficControl, Cors, CustomReq, CustomAuth, Routing, TrafficControlByParameter, CircuitBreaker, ProxyCache.
        """
        return pulumi.get(self, "plugin_type")

