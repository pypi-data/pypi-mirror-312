# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetUsagePlanEnvironmentsResult',
    'AwaitableGetUsagePlanEnvironmentsResult',
    'get_usage_plan_environments',
    'get_usage_plan_environments_output',
]

@pulumi.output_type
class GetUsagePlanEnvironmentsResult:
    """
    A collection of values returned by getUsagePlanEnvironments.
    """
    def __init__(__self__, bind_type=None, id=None, lists=None, result_output_file=None, usage_plan_id=None):
        if bind_type and not isinstance(bind_type, str):
            raise TypeError("Expected argument 'bind_type' to be a str")
        pulumi.set(__self__, "bind_type", bind_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if usage_plan_id and not isinstance(usage_plan_id, str):
            raise TypeError("Expected argument 'usage_plan_id' to be a str")
        pulumi.set(__self__, "usage_plan_id", usage_plan_id)

    @property
    @pulumi.getter(name="bindType")
    def bind_type(self) -> Optional[str]:
        return pulumi.get(self, "bind_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetUsagePlanEnvironmentsListResult']:
        """
        A list of usage plan binding details.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="usagePlanId")
    def usage_plan_id(self) -> str:
        return pulumi.get(self, "usage_plan_id")


class AwaitableGetUsagePlanEnvironmentsResult(GetUsagePlanEnvironmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsagePlanEnvironmentsResult(
            bind_type=self.bind_type,
            id=self.id,
            lists=self.lists,
            result_output_file=self.result_output_file,
            usage_plan_id=self.usage_plan_id)


def get_usage_plan_environments(bind_type: Optional[str] = None,
                                result_output_file: Optional[str] = None,
                                usage_plan_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsagePlanEnvironmentsResult:
    """
    Used to query the environment list bound by the plan.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    plan = tencentcloud.api_gateway.UsagePlan("plan",
        usage_plan_name="my_plan",
        usage_plan_desc="nice plan",
        max_request_num=100,
        max_request_num_pre_sec=10)
    service = tencentcloud.api_gateway.Service("service",
        service_name="niceservice",
        protocol="http&https",
        service_desc="your nice service",
        net_types=[
            "INNER",
            "OUTER",
        ],
        ip_version="IPv4")
    attach_service = tencentcloud.api_gateway.UsagePlanAttachment("attachService",
        usage_plan_id=plan.id,
        service_id=service.id,
        environment="test",
        bind_type="SERVICE")
    environment_test = tencentcloud.ApiGateway.get_usage_plan_environments_output(usage_plan_id=attach_service.usage_plan_id,
        bind_type="SERVICE")
    ```
    <!--End PulumiCodeChooser -->


    :param str bind_type: Binding type. Valid values: `API`, `SERVICE`. Default value: `SERVICE`.
    :param str result_output_file: Used to save results.
    :param str usage_plan_id: ID of the usage plan to be queried.
    """
    __args__ = dict()
    __args__['bindType'] = bind_type
    __args__['resultOutputFile'] = result_output_file
    __args__['usagePlanId'] = usage_plan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:ApiGateway/getUsagePlanEnvironments:getUsagePlanEnvironments', __args__, opts=opts, typ=GetUsagePlanEnvironmentsResult).value

    return AwaitableGetUsagePlanEnvironmentsResult(
        bind_type=pulumi.get(__ret__, 'bind_type'),
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        usage_plan_id=pulumi.get(__ret__, 'usage_plan_id'))


@_utilities.lift_output_func(get_usage_plan_environments)
def get_usage_plan_environments_output(bind_type: Optional[pulumi.Input[Optional[str]]] = None,
                                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                       usage_plan_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUsagePlanEnvironmentsResult]:
    """
    Used to query the environment list bound by the plan.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    plan = tencentcloud.api_gateway.UsagePlan("plan",
        usage_plan_name="my_plan",
        usage_plan_desc="nice plan",
        max_request_num=100,
        max_request_num_pre_sec=10)
    service = tencentcloud.api_gateway.Service("service",
        service_name="niceservice",
        protocol="http&https",
        service_desc="your nice service",
        net_types=[
            "INNER",
            "OUTER",
        ],
        ip_version="IPv4")
    attach_service = tencentcloud.api_gateway.UsagePlanAttachment("attachService",
        usage_plan_id=plan.id,
        service_id=service.id,
        environment="test",
        bind_type="SERVICE")
    environment_test = tencentcloud.ApiGateway.get_usage_plan_environments_output(usage_plan_id=attach_service.usage_plan_id,
        bind_type="SERVICE")
    ```
    <!--End PulumiCodeChooser -->


    :param str bind_type: Binding type. Valid values: `API`, `SERVICE`. Default value: `SERVICE`.
    :param str result_output_file: Used to save results.
    :param str usage_plan_id: ID of the usage plan to be queried.
    """
    ...
