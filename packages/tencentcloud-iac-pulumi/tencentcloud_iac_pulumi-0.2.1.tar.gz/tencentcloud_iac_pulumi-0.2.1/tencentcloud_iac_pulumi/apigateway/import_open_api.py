# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImportOpenApiArgs', 'ImportOpenApi']

@pulumi.input_type
class ImportOpenApiArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 content_version: Optional[pulumi.Input[str]] = None,
                 encode_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ImportOpenApi resource.
        :param pulumi.Input[str] content: OpenAPI body content.
        :param pulumi.Input[str] service_id: The unique ID of the service where the API is located.
        :param pulumi.Input[str] content_version: The Content version defaults to OpenAPI and currently only supports OpenAPI.
        :param pulumi.Input[str] encode_type: The Content format can only be YAML or JSON, and the default is YAML.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "service_id", service_id)
        if content_version is not None:
            pulumi.set(__self__, "content_version", content_version)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        OpenAPI body content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        The unique ID of the service where the API is located.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="contentVersion")
    def content_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Content version defaults to OpenAPI and currently only supports OpenAPI.
        """
        return pulumi.get(self, "content_version")

    @content_version.setter
    def content_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_version", value)

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Content format can only be YAML or JSON, and the default is YAML.
        """
        return pulumi.get(self, "encode_type")

    @encode_type.setter
    def encode_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encode_type", value)


@pulumi.input_type
class _ImportOpenApiState:
    def __init__(__self__, *,
                 api_business_type: Optional[pulumi.Input[str]] = None,
                 api_desc: Optional[pulumi.Input[str]] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 api_name: Optional[pulumi.Input[str]] = None,
                 api_type: Optional[pulumi.Input[str]] = None,
                 auth_relation_api_id: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 constant_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiConstantParameterArgs']]]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 content_version: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 enable_cors: Optional[pulumi.Input[bool]] = None,
                 encode_type: Optional[pulumi.Input[str]] = None,
                 is_base64_encoded: Optional[pulumi.Input[bool]] = None,
                 is_debug_after_charge: Optional[pulumi.Input[bool]] = None,
                 is_delete_response_error_codes: Optional[pulumi.Input[bool]] = None,
                 micro_services: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiMicroServiceArgs']]]] = None,
                 oauth_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiOauthConfigArgs']]]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 request_config_method: Optional[pulumi.Input[str]] = None,
                 request_config_path: Optional[pulumi.Input[str]] = None,
                 request_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiRequestParameterArgs']]]] = None,
                 response_error_codes: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiResponseErrorCodeArgs']]]] = None,
                 response_fail_example: Optional[pulumi.Input[str]] = None,
                 response_success_example: Optional[pulumi.Input[str]] = None,
                 response_type: Optional[pulumi.Input[str]] = None,
                 service_config_cos_configs: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceConfigCosConfigArgs']]]] = None,
                 service_config_method: Optional[pulumi.Input[str]] = None,
                 service_config_mock_return_message: Optional[pulumi.Input[str]] = None,
                 service_config_path: Optional[pulumi.Input[str]] = None,
                 service_config_product: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_config_scf_function_type: Optional[pulumi.Input[str]] = None,
                 service_config_scf_is_integrated_response: Optional[pulumi.Input[bool]] = None,
                 service_config_timeout: Optional[pulumi.Input[int]] = None,
                 service_config_type: Optional[pulumi.Input[str]] = None,
                 service_config_upstream_id: Optional[pulumi.Input[str]] = None,
                 service_config_url: Optional[pulumi.Input[str]] = None,
                 service_config_vpc_id: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_cleanup_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_cleanup_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_cleanup_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_register_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_register_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_register_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_transport_function_name: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_transport_function_namespace: Optional[pulumi.Input[str]] = None,
                 service_config_websocket_transport_function_qualifier: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceParameterArgs']]]] = None,
                 service_tsf_health_check_confs: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfHealthCheckConfArgs']]]] = None,
                 service_tsf_load_balance_confs: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfLoadBalanceConfArgs']]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ImportOpenApi resources.
        :param pulumi.Input[str] api_business_type: When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
        :param pulumi.Input[str] api_desc: Custom API description.
        :param pulumi.Input[str] api_id: Custom Api Id.
        :param pulumi.Input[str] api_name: Custom API name.
        :param pulumi.Input[str] api_type: API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
        :param pulumi.Input[str] auth_relation_api_id: The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
        :param pulumi.Input[str] auth_type: API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiConstantParameterArgs']]] constant_parameters: Constant parameter.
        :param pulumi.Input[str] content: OpenAPI body content.
        :param pulumi.Input[str] content_version: The Content version defaults to OpenAPI and currently only supports OpenAPI.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[bool] enable_cors: Whether to enable CORS. Default value: `true`.
        :param pulumi.Input[str] encode_type: The Content format can only be YAML or JSON, and the default is YAML.
        :param pulumi.Input[bool] is_base64_encoded: Whether to enable Base64 encoding will only take effect when the backend is scf.
        :param pulumi.Input[bool] is_debug_after_charge: Charge after starting debugging. (Cloud Market Reserved Fields).
        :param pulumi.Input[bool] is_delete_response_error_codes: Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiMicroServiceArgs']]] micro_services: API bound microservice list.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiOauthConfigArgs']]] oauth_configs: OAuth configuration. Effective when AuthType is OAUTH.
        :param pulumi.Input[str] protocol: API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        :param pulumi.Input[str] request_config_method: Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        :param pulumi.Input[str] request_config_path: Request frontend path configuration. Like `/user/getinfo`.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiRequestParameterArgs']]] request_parameters: Frontend request parameters.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiResponseErrorCodeArgs']]] response_error_codes: Custom error code configuration. Must keep at least one after set.
        :param pulumi.Input[str] response_fail_example: Response failure sample of custom response configuration.
        :param pulumi.Input[str] response_success_example: Successful response sample of custom response configuration.
        :param pulumi.Input[str] response_type: Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceConfigCosConfigArgs']]] service_config_cos_configs: API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] service_config_method: API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        :param pulumi.Input[str] service_config_mock_return_message: Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        :param pulumi.Input[str] service_config_path: API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        :param pulumi.Input[str] service_config_product: Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
        :param pulumi.Input[str] service_config_scf_function_name: SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_namespace: SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_qualifier: SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_type: Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
        :param pulumi.Input[bool] service_config_scf_is_integrated_response: Whether to enable response integration. Effective when the backend type is SCF.
        :param pulumi.Input[int] service_config_timeout: API backend service timeout period in seconds. Default value: `5`.
        :param pulumi.Input[str] service_config_type: The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
        :param pulumi.Input[str] service_config_upstream_id: Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] service_config_url: The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
        :param pulumi.Input[str] service_config_vpc_id: Unique VPC ID.
        :param pulumi.Input[str] service_config_websocket_cleanup_function_name: Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_cleanup_function_namespace: Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_cleanup_function_qualifier: Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_register_function_name: Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_register_function_namespace: Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_register_function_qualifier: Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_transport_function_name: Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_transport_function_namespace: Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_transport_function_qualifier: Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_id: The unique ID of the service where the API is located.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceParameterArgs']]] service_parameters: The backend service parameters of the API.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfHealthCheckConfArgs']]] service_tsf_health_check_confs: Health check configuration for microservices.
        :param pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfLoadBalanceConfArgs']]] service_tsf_load_balance_confs: Load balancing configuration for microservices.
        :param pulumi.Input[str] update_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        if api_business_type is not None:
            pulumi.set(__self__, "api_business_type", api_business_type)
        if api_desc is not None:
            pulumi.set(__self__, "api_desc", api_desc)
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if api_type is not None:
            pulumi.set(__self__, "api_type", api_type)
        if auth_relation_api_id is not None:
            pulumi.set(__self__, "auth_relation_api_id", auth_relation_api_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if constant_parameters is not None:
            pulumi.set(__self__, "constant_parameters", constant_parameters)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if content_version is not None:
            pulumi.set(__self__, "content_version", content_version)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable_cors is not None:
            pulumi.set(__self__, "enable_cors", enable_cors)
        if encode_type is not None:
            pulumi.set(__self__, "encode_type", encode_type)
        if is_base64_encoded is not None:
            pulumi.set(__self__, "is_base64_encoded", is_base64_encoded)
        if is_debug_after_charge is not None:
            pulumi.set(__self__, "is_debug_after_charge", is_debug_after_charge)
        if is_delete_response_error_codes is not None:
            pulumi.set(__self__, "is_delete_response_error_codes", is_delete_response_error_codes)
        if micro_services is not None:
            pulumi.set(__self__, "micro_services", micro_services)
        if oauth_configs is not None:
            pulumi.set(__self__, "oauth_configs", oauth_configs)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if request_config_method is not None:
            pulumi.set(__self__, "request_config_method", request_config_method)
        if request_config_path is not None:
            pulumi.set(__self__, "request_config_path", request_config_path)
        if request_parameters is not None:
            pulumi.set(__self__, "request_parameters", request_parameters)
        if response_error_codes is not None:
            pulumi.set(__self__, "response_error_codes", response_error_codes)
        if response_fail_example is not None:
            pulumi.set(__self__, "response_fail_example", response_fail_example)
        if response_success_example is not None:
            pulumi.set(__self__, "response_success_example", response_success_example)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if service_config_cos_configs is not None:
            pulumi.set(__self__, "service_config_cos_configs", service_config_cos_configs)
        if service_config_method is not None:
            pulumi.set(__self__, "service_config_method", service_config_method)
        if service_config_mock_return_message is not None:
            pulumi.set(__self__, "service_config_mock_return_message", service_config_mock_return_message)
        if service_config_path is not None:
            pulumi.set(__self__, "service_config_path", service_config_path)
        if service_config_product is not None:
            pulumi.set(__self__, "service_config_product", service_config_product)
        if service_config_scf_function_name is not None:
            pulumi.set(__self__, "service_config_scf_function_name", service_config_scf_function_name)
        if service_config_scf_function_namespace is not None:
            pulumi.set(__self__, "service_config_scf_function_namespace", service_config_scf_function_namespace)
        if service_config_scf_function_qualifier is not None:
            pulumi.set(__self__, "service_config_scf_function_qualifier", service_config_scf_function_qualifier)
        if service_config_scf_function_type is not None:
            pulumi.set(__self__, "service_config_scf_function_type", service_config_scf_function_type)
        if service_config_scf_is_integrated_response is not None:
            pulumi.set(__self__, "service_config_scf_is_integrated_response", service_config_scf_is_integrated_response)
        if service_config_timeout is not None:
            pulumi.set(__self__, "service_config_timeout", service_config_timeout)
        if service_config_type is not None:
            pulumi.set(__self__, "service_config_type", service_config_type)
        if service_config_upstream_id is not None:
            pulumi.set(__self__, "service_config_upstream_id", service_config_upstream_id)
        if service_config_url is not None:
            pulumi.set(__self__, "service_config_url", service_config_url)
        if service_config_vpc_id is not None:
            pulumi.set(__self__, "service_config_vpc_id", service_config_vpc_id)
        if service_config_websocket_cleanup_function_name is not None:
            pulumi.set(__self__, "service_config_websocket_cleanup_function_name", service_config_websocket_cleanup_function_name)
        if service_config_websocket_cleanup_function_namespace is not None:
            pulumi.set(__self__, "service_config_websocket_cleanup_function_namespace", service_config_websocket_cleanup_function_namespace)
        if service_config_websocket_cleanup_function_qualifier is not None:
            pulumi.set(__self__, "service_config_websocket_cleanup_function_qualifier", service_config_websocket_cleanup_function_qualifier)
        if service_config_websocket_register_function_name is not None:
            pulumi.set(__self__, "service_config_websocket_register_function_name", service_config_websocket_register_function_name)
        if service_config_websocket_register_function_namespace is not None:
            pulumi.set(__self__, "service_config_websocket_register_function_namespace", service_config_websocket_register_function_namespace)
        if service_config_websocket_register_function_qualifier is not None:
            pulumi.set(__self__, "service_config_websocket_register_function_qualifier", service_config_websocket_register_function_qualifier)
        if service_config_websocket_transport_function_name is not None:
            pulumi.set(__self__, "service_config_websocket_transport_function_name", service_config_websocket_transport_function_name)
        if service_config_websocket_transport_function_namespace is not None:
            pulumi.set(__self__, "service_config_websocket_transport_function_namespace", service_config_websocket_transport_function_namespace)
        if service_config_websocket_transport_function_qualifier is not None:
            pulumi.set(__self__, "service_config_websocket_transport_function_qualifier", service_config_websocket_transport_function_qualifier)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_parameters is not None:
            pulumi.set(__self__, "service_parameters", service_parameters)
        if service_tsf_health_check_confs is not None:
            pulumi.set(__self__, "service_tsf_health_check_confs", service_tsf_health_check_confs)
        if service_tsf_load_balance_confs is not None:
            pulumi.set(__self__, "service_tsf_load_balance_confs", service_tsf_load_balance_confs)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="apiBusinessType")
    def api_business_type(self) -> Optional[pulumi.Input[str]]:
        """
        When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
        """
        return pulumi.get(self, "api_business_type")

    @api_business_type.setter
    def api_business_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_business_type", value)

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Custom API description.
        """
        return pulumi.get(self, "api_desc")

    @api_desc.setter
    def api_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_desc", value)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[str]]:
        """
        Custom Api Id.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom API name.
        """
        return pulumi.get(self, "api_name")

    @api_name.setter
    def api_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_name", value)

    @property
    @pulumi.getter(name="apiType")
    def api_type(self) -> Optional[pulumi.Input[str]]:
        """
        API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
        """
        return pulumi.get(self, "api_type")

    @api_type.setter
    def api_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_type", value)

    @property
    @pulumi.getter(name="authRelationApiId")
    def auth_relation_api_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
        """
        return pulumi.get(self, "auth_relation_api_id")

    @auth_relation_api_id.setter
    def auth_relation_api_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_relation_api_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="constantParameters")
    def constant_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiConstantParameterArgs']]]]:
        """
        Constant parameter.
        """
        return pulumi.get(self, "constant_parameters")

    @constant_parameters.setter
    def constant_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiConstantParameterArgs']]]]):
        pulumi.set(self, "constant_parameters", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        OpenAPI body content.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentVersion")
    def content_version(self) -> Optional[pulumi.Input[str]]:
        """
        The Content version defaults to OpenAPI and currently only supports OpenAPI.
        """
        return pulumi.get(self, "content_version")

    @content_version.setter
    def content_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_version", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="enableCors")
    def enable_cors(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable CORS. Default value: `true`.
        """
        return pulumi.get(self, "enable_cors")

    @enable_cors.setter
    def enable_cors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_cors", value)

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Content format can only be YAML or JSON, and the default is YAML.
        """
        return pulumi.get(self, "encode_type")

    @encode_type.setter
    def encode_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encode_type", value)

    @property
    @pulumi.getter(name="isBase64Encoded")
    def is_base64_encoded(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable Base64 encoding will only take effect when the backend is scf.
        """
        return pulumi.get(self, "is_base64_encoded")

    @is_base64_encoded.setter
    def is_base64_encoded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_base64_encoded", value)

    @property
    @pulumi.getter(name="isDebugAfterCharge")
    def is_debug_after_charge(self) -> Optional[pulumi.Input[bool]]:
        """
        Charge after starting debugging. (Cloud Market Reserved Fields).
        """
        return pulumi.get(self, "is_debug_after_charge")

    @is_debug_after_charge.setter
    def is_debug_after_charge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_debug_after_charge", value)

    @property
    @pulumi.getter(name="isDeleteResponseErrorCodes")
    def is_delete_response_error_codes(self) -> Optional[pulumi.Input[bool]]:
        """
        Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
        """
        return pulumi.get(self, "is_delete_response_error_codes")

    @is_delete_response_error_codes.setter
    def is_delete_response_error_codes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_delete_response_error_codes", value)

    @property
    @pulumi.getter(name="microServices")
    def micro_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiMicroServiceArgs']]]]:
        """
        API bound microservice list.
        """
        return pulumi.get(self, "micro_services")

    @micro_services.setter
    def micro_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiMicroServiceArgs']]]]):
        pulumi.set(self, "micro_services", value)

    @property
    @pulumi.getter(name="oauthConfigs")
    def oauth_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiOauthConfigArgs']]]]:
        """
        OAuth configuration. Effective when AuthType is OAUTH.
        """
        return pulumi.get(self, "oauth_configs")

    @oauth_configs.setter
    def oauth_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiOauthConfigArgs']]]]):
        pulumi.set(self, "oauth_configs", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="requestConfigMethod")
    def request_config_method(self) -> Optional[pulumi.Input[str]]:
        """
        Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        """
        return pulumi.get(self, "request_config_method")

    @request_config_method.setter
    def request_config_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_config_method", value)

    @property
    @pulumi.getter(name="requestConfigPath")
    def request_config_path(self) -> Optional[pulumi.Input[str]]:
        """
        Request frontend path configuration. Like `/user/getinfo`.
        """
        return pulumi.get(self, "request_config_path")

    @request_config_path.setter
    def request_config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_config_path", value)

    @property
    @pulumi.getter(name="requestParameters")
    def request_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiRequestParameterArgs']]]]:
        """
        Frontend request parameters.
        """
        return pulumi.get(self, "request_parameters")

    @request_parameters.setter
    def request_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiRequestParameterArgs']]]]):
        pulumi.set(self, "request_parameters", value)

    @property
    @pulumi.getter(name="responseErrorCodes")
    def response_error_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiResponseErrorCodeArgs']]]]:
        """
        Custom error code configuration. Must keep at least one after set.
        """
        return pulumi.get(self, "response_error_codes")

    @response_error_codes.setter
    def response_error_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiResponseErrorCodeArgs']]]]):
        pulumi.set(self, "response_error_codes", value)

    @property
    @pulumi.getter(name="responseFailExample")
    def response_fail_example(self) -> Optional[pulumi.Input[str]]:
        """
        Response failure sample of custom response configuration.
        """
        return pulumi.get(self, "response_fail_example")

    @response_fail_example.setter
    def response_fail_example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_fail_example", value)

    @property
    @pulumi.getter(name="responseSuccessExample")
    def response_success_example(self) -> Optional[pulumi.Input[str]]:
        """
        Successful response sample of custom response configuration.
        """
        return pulumi.get(self, "response_success_example")

    @response_success_example.setter
    def response_success_example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_success_example", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[pulumi.Input[str]]:
        """
        Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        """
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_type", value)

    @property
    @pulumi.getter(name="serviceConfigCosConfigs")
    def service_config_cos_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceConfigCosConfigArgs']]]]:
        """
        API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "service_config_cos_configs")

    @service_config_cos_configs.setter
    def service_config_cos_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceConfigCosConfigArgs']]]]):
        pulumi.set(self, "service_config_cos_configs", value)

    @property
    @pulumi.getter(name="serviceConfigMethod")
    def service_config_method(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        """
        return pulumi.get(self, "service_config_method")

    @service_config_method.setter
    def service_config_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_method", value)

    @property
    @pulumi.getter(name="serviceConfigMockReturnMessage")
    def service_config_mock_return_message(self) -> Optional[pulumi.Input[str]]:
        """
        Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        """
        return pulumi.get(self, "service_config_mock_return_message")

    @service_config_mock_return_message.setter
    def service_config_mock_return_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_mock_return_message", value)

    @property
    @pulumi.getter(name="serviceConfigPath")
    def service_config_path(self) -> Optional[pulumi.Input[str]]:
        """
        API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        """
        return pulumi.get(self, "service_config_path")

    @service_config_path.setter
    def service_config_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_path", value)

    @property
    @pulumi.getter(name="serviceConfigProduct")
    def service_config_product(self) -> Optional[pulumi.Input[str]]:
        """
        Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
        """
        return pulumi.get(self, "service_config_product")

    @service_config_product.setter
    def service_config_product(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_product", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionName")
    def service_config_scf_function_name(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_name")

    @service_config_scf_function_name.setter
    def service_config_scf_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_name", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionNamespace")
    def service_config_scf_function_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_namespace")

    @service_config_scf_function_namespace.setter
    def service_config_scf_function_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_namespace", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionQualifier")
    def service_config_scf_function_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_qualifier")

    @service_config_scf_function_qualifier.setter
    def service_config_scf_function_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_qualifier", value)

    @property
    @pulumi.getter(name="serviceConfigScfFunctionType")
    def service_config_scf_function_type(self) -> Optional[pulumi.Input[str]]:
        """
        Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
        """
        return pulumi.get(self, "service_config_scf_function_type")

    @service_config_scf_function_type.setter
    def service_config_scf_function_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_scf_function_type", value)

    @property
    @pulumi.getter(name="serviceConfigScfIsIntegratedResponse")
    def service_config_scf_is_integrated_response(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable response integration. Effective when the backend type is SCF.
        """
        return pulumi.get(self, "service_config_scf_is_integrated_response")

    @service_config_scf_is_integrated_response.setter
    def service_config_scf_is_integrated_response(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "service_config_scf_is_integrated_response", value)

    @property
    @pulumi.getter(name="serviceConfigTimeout")
    def service_config_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        API backend service timeout period in seconds. Default value: `5`.
        """
        return pulumi.get(self, "service_config_timeout")

    @service_config_timeout.setter
    def service_config_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "service_config_timeout", value)

    @property
    @pulumi.getter(name="serviceConfigType")
    def service_config_type(self) -> Optional[pulumi.Input[str]]:
        """
        The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
        """
        return pulumi.get(self, "service_config_type")

    @service_config_type.setter
    def service_config_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_type", value)

    @property
    @pulumi.getter(name="serviceConfigUpstreamId")
    def service_config_upstream_id(self) -> Optional[pulumi.Input[str]]:
        """
        Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "service_config_upstream_id")

    @service_config_upstream_id.setter
    def service_config_upstream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_upstream_id", value)

    @property
    @pulumi.getter(name="serviceConfigUrl")
    def service_config_url(self) -> Optional[pulumi.Input[str]]:
        """
        The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
        """
        return pulumi.get(self, "service_config_url")

    @service_config_url.setter
    def service_config_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_url", value)

    @property
    @pulumi.getter(name="serviceConfigVpcId")
    def service_config_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique VPC ID.
        """
        return pulumi.get(self, "service_config_vpc_id")

    @service_config_vpc_id.setter
    def service_config_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_vpc_id", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketCleanupFunctionName")
    def service_config_websocket_cleanup_function_name(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_cleanup_function_name")

    @service_config_websocket_cleanup_function_name.setter
    def service_config_websocket_cleanup_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_cleanup_function_name", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketCleanupFunctionNamespace")
    def service_config_websocket_cleanup_function_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_cleanup_function_namespace")

    @service_config_websocket_cleanup_function_namespace.setter
    def service_config_websocket_cleanup_function_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_cleanup_function_namespace", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketCleanupFunctionQualifier")
    def service_config_websocket_cleanup_function_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_cleanup_function_qualifier")

    @service_config_websocket_cleanup_function_qualifier.setter
    def service_config_websocket_cleanup_function_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_cleanup_function_qualifier", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketRegisterFunctionName")
    def service_config_websocket_register_function_name(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_register_function_name")

    @service_config_websocket_register_function_name.setter
    def service_config_websocket_register_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_register_function_name", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketRegisterFunctionNamespace")
    def service_config_websocket_register_function_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_register_function_namespace")

    @service_config_websocket_register_function_namespace.setter
    def service_config_websocket_register_function_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_register_function_namespace", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketRegisterFunctionQualifier")
    def service_config_websocket_register_function_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_register_function_qualifier")

    @service_config_websocket_register_function_qualifier.setter
    def service_config_websocket_register_function_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_register_function_qualifier", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketTransportFunctionName")
    def service_config_websocket_transport_function_name(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_transport_function_name")

    @service_config_websocket_transport_function_name.setter
    def service_config_websocket_transport_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_transport_function_name", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketTransportFunctionNamespace")
    def service_config_websocket_transport_function_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_transport_function_namespace")

    @service_config_websocket_transport_function_namespace.setter
    def service_config_websocket_transport_function_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_transport_function_namespace", value)

    @property
    @pulumi.getter(name="serviceConfigWebsocketTransportFunctionQualifier")
    def service_config_websocket_transport_function_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_transport_function_qualifier")

    @service_config_websocket_transport_function_qualifier.setter
    def service_config_websocket_transport_function_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_config_websocket_transport_function_qualifier", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the service where the API is located.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceParameters")
    def service_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceParameterArgs']]]]:
        """
        The backend service parameters of the API.
        """
        return pulumi.get(self, "service_parameters")

    @service_parameters.setter
    def service_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceParameterArgs']]]]):
        pulumi.set(self, "service_parameters", value)

    @property
    @pulumi.getter(name="serviceTsfHealthCheckConfs")
    def service_tsf_health_check_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfHealthCheckConfArgs']]]]:
        """
        Health check configuration for microservices.
        """
        return pulumi.get(self, "service_tsf_health_check_confs")

    @service_tsf_health_check_confs.setter
    def service_tsf_health_check_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfHealthCheckConfArgs']]]]):
        pulumi.set(self, "service_tsf_health_check_confs", value)

    @property
    @pulumi.getter(name="serviceTsfLoadBalanceConfs")
    def service_tsf_load_balance_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfLoadBalanceConfArgs']]]]:
        """
        Load balancing configuration for microservices.
        """
        return pulumi.get(self, "service_tsf_load_balance_confs")

    @service_tsf_load_balance_confs.setter
    def service_tsf_load_balance_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImportOpenApiServiceTsfLoadBalanceConfArgs']]]]):
        pulumi.set(self, "service_tsf_load_balance_confs", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class ImportOpenApi(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 content_version: Optional[pulumi.Input[str]] = None,
                 encode_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a apiGateway import_open_api

        ## Example Usage

        ### Import open Api by YAML

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.ImportOpenApi("example",
            content=\"\"\"info:
          title: keep-service
          version: 1.0.1
        openapi: 3.0.0
        paths:
          /api/test:
            get:
              description: desc
              operationId: test
              responses:
                '200':
                  content:
                    text/html:
                      example: '200'
                  description: '200'
                default:
                  content:
                    text/html:
                      example: '400'
                  description: '400'
              x-apigw-api-business-type: NORMAL
              x-apigw-api-type: NORMAL
              x-apigw-backend:
                ServiceConfig:
                  Method: GET
                  Path: /test
                  Url: http://domain.com
                ServiceType: HTTP
              x-apigw-cors: false
              x-apigw-protocol: HTTP
              x-apigw-service-timeout: 15

        \"\"\",
            content_version="openAPI",
            encode_type="YAML",
            service_id="service-nxz6yync")
        ```
        <!--End PulumiCodeChooser -->

        ### Import open Api by JSON

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.ImportOpenApi("example",
            content="{\\"openapi\\": \\"3.0.0\\", \\"info\\": {\\"title\\": \\"keep-service\\", \\"version\\": \\"1.0.1\\"}, \\"paths\\": {\\"/api/test\\": {\\"get\\": {\\"operationId\\": \\"test\\", \\"description\\": \\"desc\\", \\"responses\\": {\\"200\\": {\\"description\\": \\"200\\", \\"content\\": {\\"text/html\\": {\\"example\\": \\"200\\"}}}, \\"default\\": {\\"content\\": {\\"text/html\\": {\\"example\\": \\"400\\"}}, \\"description\\": \\"400\\"}}, \\"x-apigw-api-type\\": \\"NORMAL\\", \\"x-apigw-api-business-type\\": \\"NORMAL\\", \\"x-apigw-protocol\\": \\"HTTP\\", \\"x-apigw-cors\\": false, \\"x-apigw-service-timeout\\": 15, \\"x-apigw-backend\\": {\\"ServiceType\\": \\"HTTP\\", \\"ServiceConfig\\": {\\"Url\\": \\"http://domain.com\\", \\"Path\\": \\"/test\\", \\"Method\\": \\"GET\\"}}}}}}",
            content_version="openAPI",
            encode_type="JSON",
            service_id="service-nxz6yync")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: OpenAPI body content.
        :param pulumi.Input[str] content_version: The Content version defaults to OpenAPI and currently only supports OpenAPI.
        :param pulumi.Input[str] encode_type: The Content format can only be YAML or JSON, and the default is YAML.
        :param pulumi.Input[str] service_id: The unique ID of the service where the API is located.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImportOpenApiArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a apiGateway import_open_api

        ## Example Usage

        ### Import open Api by YAML

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.ImportOpenApi("example",
            content=\"\"\"info:
          title: keep-service
          version: 1.0.1
        openapi: 3.0.0
        paths:
          /api/test:
            get:
              description: desc
              operationId: test
              responses:
                '200':
                  content:
                    text/html:
                      example: '200'
                  description: '200'
                default:
                  content:
                    text/html:
                      example: '400'
                  description: '400'
              x-apigw-api-business-type: NORMAL
              x-apigw-api-type: NORMAL
              x-apigw-backend:
                ServiceConfig:
                  Method: GET
                  Path: /test
                  Url: http://domain.com
                ServiceType: HTTP
              x-apigw-cors: false
              x-apigw-protocol: HTTP
              x-apigw-service-timeout: 15

        \"\"\",
            content_version="openAPI",
            encode_type="YAML",
            service_id="service-nxz6yync")
        ```
        <!--End PulumiCodeChooser -->

        ### Import open Api by JSON

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.ImportOpenApi("example",
            content="{\\"openapi\\": \\"3.0.0\\", \\"info\\": {\\"title\\": \\"keep-service\\", \\"version\\": \\"1.0.1\\"}, \\"paths\\": {\\"/api/test\\": {\\"get\\": {\\"operationId\\": \\"test\\", \\"description\\": \\"desc\\", \\"responses\\": {\\"200\\": {\\"description\\": \\"200\\", \\"content\\": {\\"text/html\\": {\\"example\\": \\"200\\"}}}, \\"default\\": {\\"content\\": {\\"text/html\\": {\\"example\\": \\"400\\"}}, \\"description\\": \\"400\\"}}, \\"x-apigw-api-type\\": \\"NORMAL\\", \\"x-apigw-api-business-type\\": \\"NORMAL\\", \\"x-apigw-protocol\\": \\"HTTP\\", \\"x-apigw-cors\\": false, \\"x-apigw-service-timeout\\": 15, \\"x-apigw-backend\\": {\\"ServiceType\\": \\"HTTP\\", \\"ServiceConfig\\": {\\"Url\\": \\"http://domain.com\\", \\"Path\\": \\"/test\\", \\"Method\\": \\"GET\\"}}}}}}",
            content_version="openAPI",
            encode_type="JSON",
            service_id="service-nxz6yync")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ImportOpenApiArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImportOpenApiArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 content_version: Optional[pulumi.Input[str]] = None,
                 encode_type: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImportOpenApiArgs.__new__(ImportOpenApiArgs)

            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["content_version"] = content_version
            __props__.__dict__["encode_type"] = encode_type
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["api_business_type"] = None
            __props__.__dict__["api_desc"] = None
            __props__.__dict__["api_id"] = None
            __props__.__dict__["api_name"] = None
            __props__.__dict__["api_type"] = None
            __props__.__dict__["auth_relation_api_id"] = None
            __props__.__dict__["auth_type"] = None
            __props__.__dict__["constant_parameters"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["enable_cors"] = None
            __props__.__dict__["is_base64_encoded"] = None
            __props__.__dict__["is_debug_after_charge"] = None
            __props__.__dict__["is_delete_response_error_codes"] = None
            __props__.__dict__["micro_services"] = None
            __props__.__dict__["oauth_configs"] = None
            __props__.__dict__["protocol"] = None
            __props__.__dict__["request_config_method"] = None
            __props__.__dict__["request_config_path"] = None
            __props__.__dict__["request_parameters"] = None
            __props__.__dict__["response_error_codes"] = None
            __props__.__dict__["response_fail_example"] = None
            __props__.__dict__["response_success_example"] = None
            __props__.__dict__["response_type"] = None
            __props__.__dict__["service_config_cos_configs"] = None
            __props__.__dict__["service_config_method"] = None
            __props__.__dict__["service_config_mock_return_message"] = None
            __props__.__dict__["service_config_path"] = None
            __props__.__dict__["service_config_product"] = None
            __props__.__dict__["service_config_scf_function_name"] = None
            __props__.__dict__["service_config_scf_function_namespace"] = None
            __props__.__dict__["service_config_scf_function_qualifier"] = None
            __props__.__dict__["service_config_scf_function_type"] = None
            __props__.__dict__["service_config_scf_is_integrated_response"] = None
            __props__.__dict__["service_config_timeout"] = None
            __props__.__dict__["service_config_type"] = None
            __props__.__dict__["service_config_upstream_id"] = None
            __props__.__dict__["service_config_url"] = None
            __props__.__dict__["service_config_vpc_id"] = None
            __props__.__dict__["service_config_websocket_cleanup_function_name"] = None
            __props__.__dict__["service_config_websocket_cleanup_function_namespace"] = None
            __props__.__dict__["service_config_websocket_cleanup_function_qualifier"] = None
            __props__.__dict__["service_config_websocket_register_function_name"] = None
            __props__.__dict__["service_config_websocket_register_function_namespace"] = None
            __props__.__dict__["service_config_websocket_register_function_qualifier"] = None
            __props__.__dict__["service_config_websocket_transport_function_name"] = None
            __props__.__dict__["service_config_websocket_transport_function_namespace"] = None
            __props__.__dict__["service_config_websocket_transport_function_qualifier"] = None
            __props__.__dict__["service_parameters"] = None
            __props__.__dict__["service_tsf_health_check_confs"] = None
            __props__.__dict__["service_tsf_load_balance_confs"] = None
            __props__.__dict__["update_time"] = None
        super(ImportOpenApi, __self__).__init__(
            'tencentcloud:ApiGateway/importOpenApi:ImportOpenApi',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_business_type: Optional[pulumi.Input[str]] = None,
            api_desc: Optional[pulumi.Input[str]] = None,
            api_id: Optional[pulumi.Input[str]] = None,
            api_name: Optional[pulumi.Input[str]] = None,
            api_type: Optional[pulumi.Input[str]] = None,
            auth_relation_api_id: Optional[pulumi.Input[str]] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            constant_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiConstantParameterArgs']]]]] = None,
            content: Optional[pulumi.Input[str]] = None,
            content_version: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            enable_cors: Optional[pulumi.Input[bool]] = None,
            encode_type: Optional[pulumi.Input[str]] = None,
            is_base64_encoded: Optional[pulumi.Input[bool]] = None,
            is_debug_after_charge: Optional[pulumi.Input[bool]] = None,
            is_delete_response_error_codes: Optional[pulumi.Input[bool]] = None,
            micro_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiMicroServiceArgs']]]]] = None,
            oauth_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiOauthConfigArgs']]]]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            request_config_method: Optional[pulumi.Input[str]] = None,
            request_config_path: Optional[pulumi.Input[str]] = None,
            request_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiRequestParameterArgs']]]]] = None,
            response_error_codes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiResponseErrorCodeArgs']]]]] = None,
            response_fail_example: Optional[pulumi.Input[str]] = None,
            response_success_example: Optional[pulumi.Input[str]] = None,
            response_type: Optional[pulumi.Input[str]] = None,
            service_config_cos_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceConfigCosConfigArgs']]]]] = None,
            service_config_method: Optional[pulumi.Input[str]] = None,
            service_config_mock_return_message: Optional[pulumi.Input[str]] = None,
            service_config_path: Optional[pulumi.Input[str]] = None,
            service_config_product: Optional[pulumi.Input[str]] = None,
            service_config_scf_function_name: Optional[pulumi.Input[str]] = None,
            service_config_scf_function_namespace: Optional[pulumi.Input[str]] = None,
            service_config_scf_function_qualifier: Optional[pulumi.Input[str]] = None,
            service_config_scf_function_type: Optional[pulumi.Input[str]] = None,
            service_config_scf_is_integrated_response: Optional[pulumi.Input[bool]] = None,
            service_config_timeout: Optional[pulumi.Input[int]] = None,
            service_config_type: Optional[pulumi.Input[str]] = None,
            service_config_upstream_id: Optional[pulumi.Input[str]] = None,
            service_config_url: Optional[pulumi.Input[str]] = None,
            service_config_vpc_id: Optional[pulumi.Input[str]] = None,
            service_config_websocket_cleanup_function_name: Optional[pulumi.Input[str]] = None,
            service_config_websocket_cleanup_function_namespace: Optional[pulumi.Input[str]] = None,
            service_config_websocket_cleanup_function_qualifier: Optional[pulumi.Input[str]] = None,
            service_config_websocket_register_function_name: Optional[pulumi.Input[str]] = None,
            service_config_websocket_register_function_namespace: Optional[pulumi.Input[str]] = None,
            service_config_websocket_register_function_qualifier: Optional[pulumi.Input[str]] = None,
            service_config_websocket_transport_function_name: Optional[pulumi.Input[str]] = None,
            service_config_websocket_transport_function_namespace: Optional[pulumi.Input[str]] = None,
            service_config_websocket_transport_function_qualifier: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            service_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceParameterArgs']]]]] = None,
            service_tsf_health_check_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceTsfHealthCheckConfArgs']]]]] = None,
            service_tsf_load_balance_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceTsfLoadBalanceConfArgs']]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'ImportOpenApi':
        """
        Get an existing ImportOpenApi resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_business_type: When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
        :param pulumi.Input[str] api_desc: Custom API description.
        :param pulumi.Input[str] api_id: Custom Api Id.
        :param pulumi.Input[str] api_name: Custom API name.
        :param pulumi.Input[str] api_type: API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
        :param pulumi.Input[str] auth_relation_api_id: The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
        :param pulumi.Input[str] auth_type: API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiConstantParameterArgs']]]] constant_parameters: Constant parameter.
        :param pulumi.Input[str] content: OpenAPI body content.
        :param pulumi.Input[str] content_version: The Content version defaults to OpenAPI and currently only supports OpenAPI.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[bool] enable_cors: Whether to enable CORS. Default value: `true`.
        :param pulumi.Input[str] encode_type: The Content format can only be YAML or JSON, and the default is YAML.
        :param pulumi.Input[bool] is_base64_encoded: Whether to enable Base64 encoding will only take effect when the backend is scf.
        :param pulumi.Input[bool] is_debug_after_charge: Charge after starting debugging. (Cloud Market Reserved Fields).
        :param pulumi.Input[bool] is_delete_response_error_codes: Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiMicroServiceArgs']]]] micro_services: API bound microservice list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiOauthConfigArgs']]]] oauth_configs: OAuth configuration. Effective when AuthType is OAUTH.
        :param pulumi.Input[str] protocol: API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        :param pulumi.Input[str] request_config_method: Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        :param pulumi.Input[str] request_config_path: Request frontend path configuration. Like `/user/getinfo`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiRequestParameterArgs']]]] request_parameters: Frontend request parameters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiResponseErrorCodeArgs']]]] response_error_codes: Custom error code configuration. Must keep at least one after set.
        :param pulumi.Input[str] response_fail_example: Response failure sample of custom response configuration.
        :param pulumi.Input[str] response_success_example: Successful response sample of custom response configuration.
        :param pulumi.Input[str] response_type: Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceConfigCosConfigArgs']]]] service_config_cos_configs: API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] service_config_method: API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        :param pulumi.Input[str] service_config_mock_return_message: Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        :param pulumi.Input[str] service_config_path: API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        :param pulumi.Input[str] service_config_product: Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
        :param pulumi.Input[str] service_config_scf_function_name: SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_namespace: SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_qualifier: SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        :param pulumi.Input[str] service_config_scf_function_type: Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
        :param pulumi.Input[bool] service_config_scf_is_integrated_response: Whether to enable response integration. Effective when the backend type is SCF.
        :param pulumi.Input[int] service_config_timeout: API backend service timeout period in seconds. Default value: `5`.
        :param pulumi.Input[str] service_config_type: The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
        :param pulumi.Input[str] service_config_upstream_id: Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
        :param pulumi.Input[str] service_config_url: The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
        :param pulumi.Input[str] service_config_vpc_id: Unique VPC ID.
        :param pulumi.Input[str] service_config_websocket_cleanup_function_name: Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_cleanup_function_namespace: Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_cleanup_function_qualifier: Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_register_function_name: Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_register_function_namespace: Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_register_function_qualifier: Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_transport_function_name: Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_transport_function_namespace: Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_config_websocket_transport_function_qualifier: Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        :param pulumi.Input[str] service_id: The unique ID of the service where the API is located.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceParameterArgs']]]] service_parameters: The backend service parameters of the API.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceTsfHealthCheckConfArgs']]]] service_tsf_health_check_confs: Health check configuration for microservices.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ImportOpenApiServiceTsfLoadBalanceConfArgs']]]] service_tsf_load_balance_confs: Load balancing configuration for microservices.
        :param pulumi.Input[str] update_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImportOpenApiState.__new__(_ImportOpenApiState)

        __props__.__dict__["api_business_type"] = api_business_type
        __props__.__dict__["api_desc"] = api_desc
        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["api_name"] = api_name
        __props__.__dict__["api_type"] = api_type
        __props__.__dict__["auth_relation_api_id"] = auth_relation_api_id
        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["constant_parameters"] = constant_parameters
        __props__.__dict__["content"] = content
        __props__.__dict__["content_version"] = content_version
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable_cors"] = enable_cors
        __props__.__dict__["encode_type"] = encode_type
        __props__.__dict__["is_base64_encoded"] = is_base64_encoded
        __props__.__dict__["is_debug_after_charge"] = is_debug_after_charge
        __props__.__dict__["is_delete_response_error_codes"] = is_delete_response_error_codes
        __props__.__dict__["micro_services"] = micro_services
        __props__.__dict__["oauth_configs"] = oauth_configs
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["request_config_method"] = request_config_method
        __props__.__dict__["request_config_path"] = request_config_path
        __props__.__dict__["request_parameters"] = request_parameters
        __props__.__dict__["response_error_codes"] = response_error_codes
        __props__.__dict__["response_fail_example"] = response_fail_example
        __props__.__dict__["response_success_example"] = response_success_example
        __props__.__dict__["response_type"] = response_type
        __props__.__dict__["service_config_cos_configs"] = service_config_cos_configs
        __props__.__dict__["service_config_method"] = service_config_method
        __props__.__dict__["service_config_mock_return_message"] = service_config_mock_return_message
        __props__.__dict__["service_config_path"] = service_config_path
        __props__.__dict__["service_config_product"] = service_config_product
        __props__.__dict__["service_config_scf_function_name"] = service_config_scf_function_name
        __props__.__dict__["service_config_scf_function_namespace"] = service_config_scf_function_namespace
        __props__.__dict__["service_config_scf_function_qualifier"] = service_config_scf_function_qualifier
        __props__.__dict__["service_config_scf_function_type"] = service_config_scf_function_type
        __props__.__dict__["service_config_scf_is_integrated_response"] = service_config_scf_is_integrated_response
        __props__.__dict__["service_config_timeout"] = service_config_timeout
        __props__.__dict__["service_config_type"] = service_config_type
        __props__.__dict__["service_config_upstream_id"] = service_config_upstream_id
        __props__.__dict__["service_config_url"] = service_config_url
        __props__.__dict__["service_config_vpc_id"] = service_config_vpc_id
        __props__.__dict__["service_config_websocket_cleanup_function_name"] = service_config_websocket_cleanup_function_name
        __props__.__dict__["service_config_websocket_cleanup_function_namespace"] = service_config_websocket_cleanup_function_namespace
        __props__.__dict__["service_config_websocket_cleanup_function_qualifier"] = service_config_websocket_cleanup_function_qualifier
        __props__.__dict__["service_config_websocket_register_function_name"] = service_config_websocket_register_function_name
        __props__.__dict__["service_config_websocket_register_function_namespace"] = service_config_websocket_register_function_namespace
        __props__.__dict__["service_config_websocket_register_function_qualifier"] = service_config_websocket_register_function_qualifier
        __props__.__dict__["service_config_websocket_transport_function_name"] = service_config_websocket_transport_function_name
        __props__.__dict__["service_config_websocket_transport_function_namespace"] = service_config_websocket_transport_function_namespace
        __props__.__dict__["service_config_websocket_transport_function_qualifier"] = service_config_websocket_transport_function_qualifier
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["service_parameters"] = service_parameters
        __props__.__dict__["service_tsf_health_check_confs"] = service_tsf_health_check_confs
        __props__.__dict__["service_tsf_load_balance_confs"] = service_tsf_load_balance_confs
        __props__.__dict__["update_time"] = update_time
        return ImportOpenApi(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiBusinessType")
    def api_business_type(self) -> pulumi.Output[str]:
        """
        When `auth_type` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
        """
        return pulumi.get(self, "api_business_type")

    @property
    @pulumi.getter(name="apiDesc")
    def api_desc(self) -> pulumi.Output[str]:
        """
        Custom API description.
        """
        return pulumi.get(self, "api_desc")

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[str]:
        """
        Custom Api Id.
        """
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="apiName")
    def api_name(self) -> pulumi.Output[str]:
        """
        Custom API name.
        """
        return pulumi.get(self, "api_name")

    @property
    @pulumi.getter(name="apiType")
    def api_type(self) -> pulumi.Output[str]:
        """
        API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
        """
        return pulumi.get(self, "api_type")

    @property
    @pulumi.getter(name="authRelationApiId")
    def auth_relation_api_id(self) -> pulumi.Output[str]:
        """
        The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
        """
        return pulumi.get(self, "auth_relation_api_id")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[str]:
        """
        API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="constantParameters")
    def constant_parameters(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiConstantParameter']]:
        """
        Constant parameter.
        """
        return pulumi.get(self, "constant_parameters")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        OpenAPI body content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentVersion")
    def content_version(self) -> pulumi.Output[Optional[str]]:
        """
        The Content version defaults to OpenAPI and currently only supports OpenAPI.
        """
        return pulumi.get(self, "content_version")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="enableCors")
    def enable_cors(self) -> pulumi.Output[bool]:
        """
        Whether to enable CORS. Default value: `true`.
        """
        return pulumi.get(self, "enable_cors")

    @property
    @pulumi.getter(name="encodeType")
    def encode_type(self) -> pulumi.Output[Optional[str]]:
        """
        The Content format can only be YAML or JSON, and the default is YAML.
        """
        return pulumi.get(self, "encode_type")

    @property
    @pulumi.getter(name="isBase64Encoded")
    def is_base64_encoded(self) -> pulumi.Output[bool]:
        """
        Whether to enable Base64 encoding will only take effect when the backend is scf.
        """
        return pulumi.get(self, "is_base64_encoded")

    @property
    @pulumi.getter(name="isDebugAfterCharge")
    def is_debug_after_charge(self) -> pulumi.Output[bool]:
        """
        Charge after starting debugging. (Cloud Market Reserved Fields).
        """
        return pulumi.get(self, "is_debug_after_charge")

    @property
    @pulumi.getter(name="isDeleteResponseErrorCodes")
    def is_delete_response_error_codes(self) -> pulumi.Output[bool]:
        """
        Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
        """
        return pulumi.get(self, "is_delete_response_error_codes")

    @property
    @pulumi.getter(name="microServices")
    def micro_services(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiMicroService']]:
        """
        API bound microservice list.
        """
        return pulumi.get(self, "micro_services")

    @property
    @pulumi.getter(name="oauthConfigs")
    def oauth_configs(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiOauthConfig']]:
        """
        OAuth configuration. Effective when AuthType is OAUTH.
        """
        return pulumi.get(self, "oauth_configs")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="requestConfigMethod")
    def request_config_method(self) -> pulumi.Output[str]:
        """
        Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
        """
        return pulumi.get(self, "request_config_method")

    @property
    @pulumi.getter(name="requestConfigPath")
    def request_config_path(self) -> pulumi.Output[str]:
        """
        Request frontend path configuration. Like `/user/getinfo`.
        """
        return pulumi.get(self, "request_config_path")

    @property
    @pulumi.getter(name="requestParameters")
    def request_parameters(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiRequestParameter']]:
        """
        Frontend request parameters.
        """
        return pulumi.get(self, "request_parameters")

    @property
    @pulumi.getter(name="responseErrorCodes")
    def response_error_codes(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiResponseErrorCode']]:
        """
        Custom error code configuration. Must keep at least one after set.
        """
        return pulumi.get(self, "response_error_codes")

    @property
    @pulumi.getter(name="responseFailExample")
    def response_fail_example(self) -> pulumi.Output[str]:
        """
        Response failure sample of custom response configuration.
        """
        return pulumi.get(self, "response_fail_example")

    @property
    @pulumi.getter(name="responseSuccessExample")
    def response_success_example(self) -> pulumi.Output[str]:
        """
        Successful response sample of custom response configuration.
        """
        return pulumi.get(self, "response_success_example")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> pulumi.Output[str]:
        """
        Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
        """
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter(name="serviceConfigCosConfigs")
    def service_config_cos_configs(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiServiceConfigCosConfig']]:
        """
        API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "service_config_cos_configs")

    @property
    @pulumi.getter(name="serviceConfigMethod")
    def service_config_method(self) -> pulumi.Output[str]:
        """
        API backend service request method, such as `GET`. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_method` and backend method `service_config_method` can be different.
        """
        return pulumi.get(self, "service_config_method")

    @property
    @pulumi.getter(name="serviceConfigMockReturnMessage")
    def service_config_mock_return_message(self) -> pulumi.Output[str]:
        """
        Returned information of API backend mocking. This parameter is required when `service_config_type` is `MOCK`.
        """
        return pulumi.get(self, "service_config_mock_return_message")

    @property
    @pulumi.getter(name="serviceConfigPath")
    def service_config_path(self) -> pulumi.Output[str]:
        """
        API backend service path, such as /path. If `service_config_type` is `HTTP`, this parameter will be required. The frontend `request_config_path` and backend path `service_config_path` can be different.
        """
        return pulumi.get(self, "service_config_path")

    @property
    @pulumi.getter(name="serviceConfigProduct")
    def service_config_product(self) -> pulumi.Output[str]:
        """
        Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
        """
        return pulumi.get(self, "service_config_product")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionName")
    def service_config_scf_function_name(self) -> pulumi.Output[str]:
        """
        SCF function name. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_name")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionNamespace")
    def service_config_scf_function_namespace(self) -> pulumi.Output[str]:
        """
        SCF function namespace. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_namespace")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionQualifier")
    def service_config_scf_function_qualifier(self) -> pulumi.Output[str]:
        """
        SCF function version. This parameter takes effect when `service_config_type` is `SCF`.
        """
        return pulumi.get(self, "service_config_scf_function_qualifier")

    @property
    @pulumi.getter(name="serviceConfigScfFunctionType")
    def service_config_scf_function_type(self) -> pulumi.Output[str]:
        """
        Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
        """
        return pulumi.get(self, "service_config_scf_function_type")

    @property
    @pulumi.getter(name="serviceConfigScfIsIntegratedResponse")
    def service_config_scf_is_integrated_response(self) -> pulumi.Output[bool]:
        """
        Whether to enable response integration. Effective when the backend type is SCF.
        """
        return pulumi.get(self, "service_config_scf_is_integrated_response")

    @property
    @pulumi.getter(name="serviceConfigTimeout")
    def service_config_timeout(self) -> pulumi.Output[int]:
        """
        API backend service timeout period in seconds. Default value: `5`.
        """
        return pulumi.get(self, "service_config_timeout")

    @property
    @pulumi.getter(name="serviceConfigType")
    def service_config_type(self) -> pulumi.Output[str]:
        """
        The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
        """
        return pulumi.get(self, "service_config_type")

    @property
    @pulumi.getter(name="serviceConfigUpstreamId")
    def service_config_upstream_id(self) -> pulumi.Output[str]:
        """
        Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "service_config_upstream_id")

    @property
    @pulumi.getter(name="serviceConfigUrl")
    def service_config_url(self) -> pulumi.Output[str]:
        """
        The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
        """
        return pulumi.get(self, "service_config_url")

    @property
    @pulumi.getter(name="serviceConfigVpcId")
    def service_config_vpc_id(self) -> pulumi.Output[str]:
        """
        Unique VPC ID.
        """
        return pulumi.get(self, "service_config_vpc_id")

    @property
    @pulumi.getter(name="serviceConfigWebsocketCleanupFunctionName")
    def service_config_websocket_cleanup_function_name(self) -> pulumi.Output[str]:
        """
        Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_cleanup_function_name")

    @property
    @pulumi.getter(name="serviceConfigWebsocketCleanupFunctionNamespace")
    def service_config_websocket_cleanup_function_namespace(self) -> pulumi.Output[str]:
        """
        Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_cleanup_function_namespace")

    @property
    @pulumi.getter(name="serviceConfigWebsocketCleanupFunctionQualifier")
    def service_config_websocket_cleanup_function_qualifier(self) -> pulumi.Output[str]:
        """
        Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_cleanup_function_qualifier")

    @property
    @pulumi.getter(name="serviceConfigWebsocketRegisterFunctionName")
    def service_config_websocket_register_function_name(self) -> pulumi.Output[str]:
        """
        Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_register_function_name")

    @property
    @pulumi.getter(name="serviceConfigWebsocketRegisterFunctionNamespace")
    def service_config_websocket_register_function_namespace(self) -> pulumi.Output[str]:
        """
        Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_register_function_namespace")

    @property
    @pulumi.getter(name="serviceConfigWebsocketRegisterFunctionQualifier")
    def service_config_websocket_register_function_qualifier(self) -> pulumi.Output[str]:
        """
        Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_register_function_qualifier")

    @property
    @pulumi.getter(name="serviceConfigWebsocketTransportFunctionName")
    def service_config_websocket_transport_function_name(self) -> pulumi.Output[str]:
        """
        Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_transport_function_name")

    @property
    @pulumi.getter(name="serviceConfigWebsocketTransportFunctionNamespace")
    def service_config_websocket_transport_function_namespace(self) -> pulumi.Output[str]:
        """
        Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_transport_function_namespace")

    @property
    @pulumi.getter(name="serviceConfigWebsocketTransportFunctionQualifier")
    def service_config_websocket_transport_function_qualifier(self) -> pulumi.Output[str]:
        """
        Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
        """
        return pulumi.get(self, "service_config_websocket_transport_function_qualifier")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        The unique ID of the service where the API is located.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceParameters")
    def service_parameters(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiServiceParameter']]:
        """
        The backend service parameters of the API.
        """
        return pulumi.get(self, "service_parameters")

    @property
    @pulumi.getter(name="serviceTsfHealthCheckConfs")
    def service_tsf_health_check_confs(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiServiceTsfHealthCheckConf']]:
        """
        Health check configuration for microservices.
        """
        return pulumi.get(self, "service_tsf_health_check_confs")

    @property
    @pulumi.getter(name="serviceTsfLoadBalanceConfs")
    def service_tsf_load_balance_confs(self) -> pulumi.Output[Sequence['outputs.ImportOpenApiServiceTsfLoadBalanceConf']]:
        """
        Load balancing configuration for microservices.
        """
        return pulumi.get(self, "service_tsf_load_balance_confs")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "update_time")

