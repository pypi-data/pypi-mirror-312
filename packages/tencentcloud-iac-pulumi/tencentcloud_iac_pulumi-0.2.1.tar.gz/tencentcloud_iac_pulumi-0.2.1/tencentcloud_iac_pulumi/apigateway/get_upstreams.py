# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUpstreamsResult',
    'AwaitableGetUpstreamsResult',
    'get_upstreams',
    'get_upstreams_output',
]

@pulumi.output_type
class GetUpstreamsResult:
    """
    A collection of values returned by getUpstreams.
    """
    def __init__(__self__, filters=None, id=None, result_output_file=None, results=None, upstream_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if upstream_id and not isinstance(upstream_id, str):
            raise TypeError("Expected argument 'upstream_id' to be a str")
        pulumi.set(__self__, "upstream_id", upstream_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetUpstreamsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetUpstreamsResultResult']:
        """
        Query Results.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        return pulumi.get(self, "upstream_id")


class AwaitableGetUpstreamsResult(GetUpstreamsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUpstreamsResult(
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file,
            results=self.results,
            upstream_id=self.upstream_id)


def get_upstreams(filters: Optional[Sequence[pulumi.InputType['GetUpstreamsFilterArgs']]] = None,
                  result_output_file: Optional[str] = None,
                  upstream_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUpstreamsResult:
    """
    Use this data source to query detailed information of apigateway upstream

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.ApiGateway.get_upstreams(upstream_id="upstream-4n5bfklc")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetUpstreamsFilterArgs']] filters: ServiceId and ApiId filtering queries.
    :param str result_output_file: Used to save results.
    :param str upstream_id: Backend channel ID.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    __args__['upstreamId'] = upstream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:ApiGateway/getUpstreams:getUpstreams', __args__, opts=opts, typ=GetUpstreamsResult).value

    return AwaitableGetUpstreamsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        upstream_id=pulumi.get(__ret__, 'upstream_id'))


@_utilities.lift_output_func(get_upstreams)
def get_upstreams_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetUpstreamsFilterArgs']]]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         upstream_id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUpstreamsResult]:
    """
    Use this data source to query detailed information of apigateway upstream

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.ApiGateway.get_upstreams(upstream_id="upstream-4n5bfklc")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetUpstreamsFilterArgs']] filters: ServiceId and ApiId filtering queries.
    :param str result_output_file: Used to save results.
    :param str upstream_id: Backend channel ID.
    """
    ...
