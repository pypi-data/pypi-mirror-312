# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UpstreamArgs', 'Upstream']

@pulumi.input_type
class UpstreamArgs:
    def __init__(__self__, *,
                 algorithm: pulumi.Input[str],
                 scheme: pulumi.Input[str],
                 uniq_vpc_id: pulumi.Input[str],
                 health_checker: Optional[pulumi.Input['UpstreamHealthCheckerArgs']] = None,
                 k8s_services: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 upstream_description: Optional[pulumi.Input[str]] = None,
                 upstream_host: Optional[pulumi.Input[str]] = None,
                 upstream_name: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Upstream resource.
        :param pulumi.Input[str] algorithm: Load balancing algorithm, value range: ROUND-ROBIN.
        :param pulumi.Input[str] scheme: Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
        :param pulumi.Input[str] uniq_vpc_id: VPC Unique ID.
        :param pulumi.Input['UpstreamHealthCheckerArgs'] health_checker: Health check configuration, currently only supports VPC channels.
        :param pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]] k8s_services: Configuration of K8S container service.
        :param pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]] nodes: Backend nodes.
        :param pulumi.Input[int] retries: Request retry count, default to 3 times.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] upstream_description: Backend channel description.
        :param pulumi.Input[str] upstream_host: Host request header forwarded by gateway to backend.
        :param pulumi.Input[str] upstream_name: Backend channel name.
        :param pulumi.Input[str] upstream_type: Backend access type, value range: IP_PORT, K8S.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "scheme", scheme)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if health_checker is not None:
            pulumi.set(__self__, "health_checker", health_checker)
        if k8s_services is not None:
            pulumi.set(__self__, "k8s_services", k8s_services)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if upstream_description is not None:
            pulumi.set(__self__, "upstream_description", upstream_description)
        if upstream_host is not None:
            pulumi.set(__self__, "upstream_host", upstream_host)
        if upstream_name is not None:
            pulumi.set(__self__, "upstream_name", upstream_name)
        if upstream_type is not None:
            pulumi.set(__self__, "upstream_type", upstream_type)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input[str]:
        """
        Load balancing algorithm, value range: ROUND-ROBIN.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def scheme(self) -> pulumi.Input[str]:
        """
        Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> pulumi.Input[str]:
        """
        VPC Unique ID.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="healthChecker")
    def health_checker(self) -> Optional[pulumi.Input['UpstreamHealthCheckerArgs']]:
        """
        Health check configuration, currently only supports VPC channels.
        """
        return pulumi.get(self, "health_checker")

    @health_checker.setter
    def health_checker(self, value: Optional[pulumi.Input['UpstreamHealthCheckerArgs']]):
        pulumi.set(self, "health_checker", value)

    @property
    @pulumi.getter(name="k8sServices")
    def k8s_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]]]:
        """
        Configuration of K8S container service.
        """
        return pulumi.get(self, "k8s_services")

    @k8s_services.setter
    def k8s_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]]]):
        pulumi.set(self, "k8s_services", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]]]:
        """
        Backend nodes.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        Request retry count, default to 3 times.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="upstreamDescription")
    def upstream_description(self) -> Optional[pulumi.Input[str]]:
        """
        Backend channel description.
        """
        return pulumi.get(self, "upstream_description")

    @upstream_description.setter
    def upstream_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_description", value)

    @property
    @pulumi.getter(name="upstreamHost")
    def upstream_host(self) -> Optional[pulumi.Input[str]]:
        """
        Host request header forwarded by gateway to backend.
        """
        return pulumi.get(self, "upstream_host")

    @upstream_host.setter
    def upstream_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_host", value)

    @property
    @pulumi.getter(name="upstreamName")
    def upstream_name(self) -> Optional[pulumi.Input[str]]:
        """
        Backend channel name.
        """
        return pulumi.get(self, "upstream_name")

    @upstream_name.setter
    def upstream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_name", value)

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backend access type, value range: IP_PORT, K8S.
        """
        return pulumi.get(self, "upstream_type")

    @upstream_type.setter
    def upstream_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_type", value)


@pulumi.input_type
class _UpstreamState:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 health_checker: Optional[pulumi.Input['UpstreamHealthCheckerArgs']] = None,
                 k8s_services: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 upstream_description: Optional[pulumi.Input[str]] = None,
                 upstream_host: Optional[pulumi.Input[str]] = None,
                 upstream_name: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Upstream resources.
        :param pulumi.Input[str] algorithm: Load balancing algorithm, value range: ROUND-ROBIN.
        :param pulumi.Input['UpstreamHealthCheckerArgs'] health_checker: Health check configuration, currently only supports VPC channels.
        :param pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]] k8s_services: Configuration of K8S container service.
        :param pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]] nodes: Backend nodes.
        :param pulumi.Input[int] retries: Request retry count, default to 3 times.
        :param pulumi.Input[str] scheme: Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] uniq_vpc_id: VPC Unique ID.
        :param pulumi.Input[str] upstream_description: Backend channel description.
        :param pulumi.Input[str] upstream_host: Host request header forwarded by gateway to backend.
        :param pulumi.Input[str] upstream_name: Backend channel name.
        :param pulumi.Input[str] upstream_type: Backend access type, value range: IP_PORT, K8S.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if health_checker is not None:
            pulumi.set(__self__, "health_checker", health_checker)
        if k8s_services is not None:
            pulumi.set(__self__, "k8s_services", k8s_services)
        if nodes is not None:
            pulumi.set(__self__, "nodes", nodes)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if upstream_description is not None:
            pulumi.set(__self__, "upstream_description", upstream_description)
        if upstream_host is not None:
            pulumi.set(__self__, "upstream_host", upstream_host)
        if upstream_name is not None:
            pulumi.set(__self__, "upstream_name", upstream_name)
        if upstream_type is not None:
            pulumi.set(__self__, "upstream_type", upstream_type)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Load balancing algorithm, value range: ROUND-ROBIN.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="healthChecker")
    def health_checker(self) -> Optional[pulumi.Input['UpstreamHealthCheckerArgs']]:
        """
        Health check configuration, currently only supports VPC channels.
        """
        return pulumi.get(self, "health_checker")

    @health_checker.setter
    def health_checker(self, value: Optional[pulumi.Input['UpstreamHealthCheckerArgs']]):
        pulumi.set(self, "health_checker", value)

    @property
    @pulumi.getter(name="k8sServices")
    def k8s_services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]]]:
        """
        Configuration of K8S container service.
        """
        return pulumi.get(self, "k8s_services")

    @k8s_services.setter
    def k8s_services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamK8sServiceArgs']]]]):
        pulumi.set(self, "k8s_services", value)

    @property
    @pulumi.getter
    def nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]]]:
        """
        Backend nodes.
        """
        return pulumi.get(self, "nodes")

    @nodes.setter
    def nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UpstreamNodeArgs']]]]):
        pulumi.set(self, "nodes", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        Request retry count, default to 3 times.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC Unique ID.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="upstreamDescription")
    def upstream_description(self) -> Optional[pulumi.Input[str]]:
        """
        Backend channel description.
        """
        return pulumi.get(self, "upstream_description")

    @upstream_description.setter
    def upstream_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_description", value)

    @property
    @pulumi.getter(name="upstreamHost")
    def upstream_host(self) -> Optional[pulumi.Input[str]]:
        """
        Host request header forwarded by gateway to backend.
        """
        return pulumi.get(self, "upstream_host")

    @upstream_host.setter
    def upstream_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_host", value)

    @property
    @pulumi.getter(name="upstreamName")
    def upstream_name(self) -> Optional[pulumi.Input[str]]:
        """
        Backend channel name.
        """
        return pulumi.get(self, "upstream_name")

    @upstream_name.setter
    def upstream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_name", value)

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> Optional[pulumi.Input[str]]:
        """
        Backend access type, value range: IP_PORT, K8S.
        """
        return pulumi.get(self, "upstream_type")

    @upstream_type.setter
    def upstream_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_type", value)


class Upstream(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 health_checker: Optional[pulumi.Input[pulumi.InputType['UpstreamHealthCheckerArgs']]] = None,
                 k8s_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamK8sServiceArgs']]]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamNodeArgs']]]]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 upstream_description: Optional[pulumi.Input[str]] = None,
                 upstream_host: Optional[pulumi.Input[str]] = None,
                 upstream_name: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a apigateway upstream

        ## Example Usage

        ### Create a basic VPC channel

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cvm")
        images = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            image_name_regex="Final")
        instance_types = tencentcloud.Instance.get_types(filters=[tencentcloud.instance.GetTypesFilterArgs(
                name="instance-family",
                values=["S5"],
            )],
            cpu_core_count=2,
            exclude_sold_out=True)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[3].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        example_instance = tencentcloud.instance.Instance("exampleInstance",
            instance_name="tf_example",
            availability_zone=zones.zones[3].name,
            image_id=images.images[0].image_id,
            instance_type=instance_types.instance_types[0].instance_type,
            system_disk_type="CLOUD_PREMIUM",
            system_disk_size=50,
            hostname="terraform",
            project_id=0,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            data_disks=[tencentcloud.instance.InstanceDataDiskArgs(
                data_disk_type="CLOUD_PREMIUM",
                data_disk_size=50,
                encrypt=False,
            )],
            tags={
                "tagKey": "tagValue",
            })
        example_upstream = tencentcloud.api_gateway.Upstream("exampleUpstream",
            scheme="HTTP",
            algorithm="ROUND-ROBIN",
            uniq_vpc_id=vpc.id,
            upstream_name="tf_example",
            upstream_description="desc.",
            upstream_type="IP_PORT",
            retries=5,
            nodes=[tencentcloud.api_gateway.UpstreamNodeArgs(
                host="1.1.1.1",
                port=9090,
                weight=10,
                vm_instance_id=example_instance.id,
                tags=["tags"],
            )],
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete VPC channel

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.Upstream("example",
            scheme="HTTP",
            algorithm="ROUND-ROBIN",
            uniq_vpc_id=tencentcloud_vpc["vpc"]["id"],
            upstream_name="tf_example",
            upstream_description="desc.",
            upstream_type="IP_PORT",
            retries=5,
            nodes=[tencentcloud.api_gateway.UpstreamNodeArgs(
                host="1.1.1.1",
                port=9090,
                weight=10,
                vm_instance_id=tencentcloud_instance["example"]["id"],
                tags=["tags"],
            )],
            health_checker=tencentcloud.api_gateway.UpstreamHealthCheckerArgs(
                enable_active_check=True,
                enable_passive_check=True,
                healthy_http_status="200",
                unhealthy_http_status="500",
                tcp_failure_threshold=5,
                timeout_threshold=5,
                http_failure_threshold=3,
                active_check_http_path="/",
                active_check_timeout=5,
                active_check_interval=5,
                unhealthy_timeout=30,
            ),
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        apigateway upstream can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/upstream:Upstream upstream upstream_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Load balancing algorithm, value range: ROUND-ROBIN.
        :param pulumi.Input[pulumi.InputType['UpstreamHealthCheckerArgs']] health_checker: Health check configuration, currently only supports VPC channels.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamK8sServiceArgs']]]] k8s_services: Configuration of K8S container service.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamNodeArgs']]]] nodes: Backend nodes.
        :param pulumi.Input[int] retries: Request retry count, default to 3 times.
        :param pulumi.Input[str] scheme: Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] uniq_vpc_id: VPC Unique ID.
        :param pulumi.Input[str] upstream_description: Backend channel description.
        :param pulumi.Input[str] upstream_host: Host request header forwarded by gateway to backend.
        :param pulumi.Input[str] upstream_name: Backend channel name.
        :param pulumi.Input[str] upstream_type: Backend access type, value range: IP_PORT, K8S.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpstreamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a apigateway upstream

        ## Example Usage

        ### Create a basic VPC channel

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cvm")
        images = tencentcloud.Images.get_instance(image_types=["PUBLIC_IMAGE"],
            image_name_regex="Final")
        instance_types = tencentcloud.Instance.get_types(filters=[tencentcloud.instance.GetTypesFilterArgs(
                name="instance-family",
                values=["S5"],
            )],
            cpu_core_count=2,
            exclude_sold_out=True)
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[3].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        example_instance = tencentcloud.instance.Instance("exampleInstance",
            instance_name="tf_example",
            availability_zone=zones.zones[3].name,
            image_id=images.images[0].image_id,
            instance_type=instance_types.instance_types[0].instance_type,
            system_disk_type="CLOUD_PREMIUM",
            system_disk_size=50,
            hostname="terraform",
            project_id=0,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            data_disks=[tencentcloud.instance.InstanceDataDiskArgs(
                data_disk_type="CLOUD_PREMIUM",
                data_disk_size=50,
                encrypt=False,
            )],
            tags={
                "tagKey": "tagValue",
            })
        example_upstream = tencentcloud.api_gateway.Upstream("exampleUpstream",
            scheme="HTTP",
            algorithm="ROUND-ROBIN",
            uniq_vpc_id=vpc.id,
            upstream_name="tf_example",
            upstream_description="desc.",
            upstream_type="IP_PORT",
            retries=5,
            nodes=[tencentcloud.api_gateway.UpstreamNodeArgs(
                host="1.1.1.1",
                port=9090,
                weight=10,
                vm_instance_id=example_instance.id,
                tags=["tags"],
            )],
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Create a complete VPC channel

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.Upstream("example",
            scheme="HTTP",
            algorithm="ROUND-ROBIN",
            uniq_vpc_id=tencentcloud_vpc["vpc"]["id"],
            upstream_name="tf_example",
            upstream_description="desc.",
            upstream_type="IP_PORT",
            retries=5,
            nodes=[tencentcloud.api_gateway.UpstreamNodeArgs(
                host="1.1.1.1",
                port=9090,
                weight=10,
                vm_instance_id=tencentcloud_instance["example"]["id"],
                tags=["tags"],
            )],
            health_checker=tencentcloud.api_gateway.UpstreamHealthCheckerArgs(
                enable_active_check=True,
                enable_passive_check=True,
                healthy_http_status="200",
                unhealthy_http_status="500",
                tcp_failure_threshold=5,
                timeout_threshold=5,
                http_failure_threshold=3,
                active_check_http_path="/",
                active_check_timeout=5,
                active_check_interval=5,
                unhealthy_timeout=30,
            ),
            tags={
                "createdBy": "terraform",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        apigateway upstream can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/upstream:Upstream upstream upstream_id
        ```

        :param str resource_name: The name of the resource.
        :param UpstreamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpstreamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 health_checker: Optional[pulumi.Input[pulumi.InputType['UpstreamHealthCheckerArgs']]] = None,
                 k8s_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamK8sServiceArgs']]]]] = None,
                 nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamNodeArgs']]]]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 upstream_description: Optional[pulumi.Input[str]] = None,
                 upstream_host: Optional[pulumi.Input[str]] = None,
                 upstream_name: Optional[pulumi.Input[str]] = None,
                 upstream_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpstreamArgs.__new__(UpstreamArgs)

            if algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'algorithm'")
            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["health_checker"] = health_checker
            __props__.__dict__["k8s_services"] = k8s_services
            __props__.__dict__["nodes"] = nodes
            __props__.__dict__["retries"] = retries
            if scheme is None and not opts.urn:
                raise TypeError("Missing required property 'scheme'")
            __props__.__dict__["scheme"] = scheme
            __props__.__dict__["tags"] = tags
            if uniq_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'uniq_vpc_id'")
            __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
            __props__.__dict__["upstream_description"] = upstream_description
            __props__.__dict__["upstream_host"] = upstream_host
            __props__.__dict__["upstream_name"] = upstream_name
            __props__.__dict__["upstream_type"] = upstream_type
        super(Upstream, __self__).__init__(
            'tencentcloud:ApiGateway/upstream:Upstream',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            algorithm: Optional[pulumi.Input[str]] = None,
            health_checker: Optional[pulumi.Input[pulumi.InputType['UpstreamHealthCheckerArgs']]] = None,
            k8s_services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamK8sServiceArgs']]]]] = None,
            nodes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamNodeArgs']]]]] = None,
            retries: Optional[pulumi.Input[int]] = None,
            scheme: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            uniq_vpc_id: Optional[pulumi.Input[str]] = None,
            upstream_description: Optional[pulumi.Input[str]] = None,
            upstream_host: Optional[pulumi.Input[str]] = None,
            upstream_name: Optional[pulumi.Input[str]] = None,
            upstream_type: Optional[pulumi.Input[str]] = None) -> 'Upstream':
        """
        Get an existing Upstream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: Load balancing algorithm, value range: ROUND-ROBIN.
        :param pulumi.Input[pulumi.InputType['UpstreamHealthCheckerArgs']] health_checker: Health check configuration, currently only supports VPC channels.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamK8sServiceArgs']]]] k8s_services: Configuration of K8S container service.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UpstreamNodeArgs']]]] nodes: Backend nodes.
        :param pulumi.Input[int] retries: Request retry count, default to 3 times.
        :param pulumi.Input[str] scheme: Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] uniq_vpc_id: VPC Unique ID.
        :param pulumi.Input[str] upstream_description: Backend channel description.
        :param pulumi.Input[str] upstream_host: Host request header forwarded by gateway to backend.
        :param pulumi.Input[str] upstream_name: Backend channel name.
        :param pulumi.Input[str] upstream_type: Backend access type, value range: IP_PORT, K8S.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UpstreamState.__new__(_UpstreamState)

        __props__.__dict__["algorithm"] = algorithm
        __props__.__dict__["health_checker"] = health_checker
        __props__.__dict__["k8s_services"] = k8s_services
        __props__.__dict__["nodes"] = nodes
        __props__.__dict__["retries"] = retries
        __props__.__dict__["scheme"] = scheme
        __props__.__dict__["tags"] = tags
        __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
        __props__.__dict__["upstream_description"] = upstream_description
        __props__.__dict__["upstream_host"] = upstream_host
        __props__.__dict__["upstream_name"] = upstream_name
        __props__.__dict__["upstream_type"] = upstream_type
        return Upstream(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Output[str]:
        """
        Load balancing algorithm, value range: ROUND-ROBIN.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="healthChecker")
    def health_checker(self) -> pulumi.Output[Optional['outputs.UpstreamHealthChecker']]:
        """
        Health check configuration, currently only supports VPC channels.
        """
        return pulumi.get(self, "health_checker")

    @property
    @pulumi.getter(name="k8sServices")
    def k8s_services(self) -> pulumi.Output[Optional[Sequence['outputs.UpstreamK8sService']]]:
        """
        Configuration of K8S container service.
        """
        return pulumi.get(self, "k8s_services")

    @property
    @pulumi.getter
    def nodes(self) -> pulumi.Output[Optional[Sequence['outputs.UpstreamNode']]]:
        """
        Backend nodes.
        """
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Output[Optional[int]]:
        """
        Request retry count, default to 3 times.
        """
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def scheme(self) -> pulumi.Output[str]:
        """
        Backend protocol, value range: HTTP, HTTPS, gRPC, gRPCs.
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> pulumi.Output[str]:
        """
        VPC Unique ID.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter(name="upstreamDescription")
    def upstream_description(self) -> pulumi.Output[Optional[str]]:
        """
        Backend channel description.
        """
        return pulumi.get(self, "upstream_description")

    @property
    @pulumi.getter(name="upstreamHost")
    def upstream_host(self) -> pulumi.Output[Optional[str]]:
        """
        Host request header forwarded by gateway to backend.
        """
        return pulumi.get(self, "upstream_host")

    @property
    @pulumi.getter(name="upstreamName")
    def upstream_name(self) -> pulumi.Output[Optional[str]]:
        """
        Backend channel name.
        """
        return pulumi.get(self, "upstream_name")

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> pulumi.Output[Optional[str]]:
        """
        Backend access type, value range: IP_PORT, K8S.
        """
        return pulumi.get(self, "upstream_type")

