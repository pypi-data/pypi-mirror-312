# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UsagePlanArgs', 'UsagePlan']

@pulumi.input_type
class UsagePlanArgs:
    def __init__(__self__, *,
                 usage_plan_name: pulumi.Input[str],
                 max_request_num: Optional[pulumi.Input[int]] = None,
                 max_request_num_pre_sec: Optional[pulumi.Input[int]] = None,
                 usage_plan_desc: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UsagePlan resource.
        :param pulumi.Input[str] usage_plan_name: Custom usage plan name.
        :param pulumi.Input[int] max_request_num: Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
        :param pulumi.Input[int] max_request_num_pre_sec: Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
        :param pulumi.Input[str] usage_plan_desc: Custom usage plan description.
        """
        pulumi.set(__self__, "usage_plan_name", usage_plan_name)
        if max_request_num is not None:
            pulumi.set(__self__, "max_request_num", max_request_num)
        if max_request_num_pre_sec is not None:
            pulumi.set(__self__, "max_request_num_pre_sec", max_request_num_pre_sec)
        if usage_plan_desc is not None:
            pulumi.set(__self__, "usage_plan_desc", usage_plan_desc)

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> pulumi.Input[str]:
        """
        Custom usage plan name.
        """
        return pulumi.get(self, "usage_plan_name")

    @usage_plan_name.setter
    def usage_plan_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "usage_plan_name", value)

    @property
    @pulumi.getter(name="maxRequestNum")
    def max_request_num(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
        """
        return pulumi.get(self, "max_request_num")

    @max_request_num.setter
    def max_request_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_request_num", value)

    @property
    @pulumi.getter(name="maxRequestNumPreSec")
    def max_request_num_pre_sec(self) -> Optional[pulumi.Input[int]]:
        """
        Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
        """
        return pulumi.get(self, "max_request_num_pre_sec")

    @max_request_num_pre_sec.setter
    def max_request_num_pre_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_request_num_pre_sec", value)

    @property
    @pulumi.getter(name="usagePlanDesc")
    def usage_plan_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Custom usage plan description.
        """
        return pulumi.get(self, "usage_plan_desc")

    @usage_plan_desc.setter
    def usage_plan_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage_plan_desc", value)


@pulumi.input_type
class _UsagePlanState:
    def __init__(__self__, *,
                 attach_api_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 attach_lists: Optional[pulumi.Input[Sequence[pulumi.Input['UsagePlanAttachListArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 max_request_num: Optional[pulumi.Input[int]] = None,
                 max_request_num_pre_sec: Optional[pulumi.Input[int]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None,
                 usage_plan_desc: Optional[pulumi.Input[str]] = None,
                 usage_plan_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UsagePlan resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attach_api_keys: Attach API keys list.
        :param pulumi.Input[Sequence[pulumi.Input['UsagePlanAttachListArgs']]] attach_lists: Attach service and API list.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[int] max_request_num: Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
        :param pulumi.Input[int] max_request_num_pre_sec: Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
        :param pulumi.Input[str] modify_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] usage_plan_desc: Custom usage plan description.
        :param pulumi.Input[str] usage_plan_name: Custom usage plan name.
        """
        if attach_api_keys is not None:
            pulumi.set(__self__, "attach_api_keys", attach_api_keys)
        if attach_lists is not None:
            pulumi.set(__self__, "attach_lists", attach_lists)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if max_request_num is not None:
            pulumi.set(__self__, "max_request_num", max_request_num)
        if max_request_num_pre_sec is not None:
            pulumi.set(__self__, "max_request_num_pre_sec", max_request_num_pre_sec)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if usage_plan_desc is not None:
            pulumi.set(__self__, "usage_plan_desc", usage_plan_desc)
        if usage_plan_name is not None:
            pulumi.set(__self__, "usage_plan_name", usage_plan_name)

    @property
    @pulumi.getter(name="attachApiKeys")
    def attach_api_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Attach API keys list.
        """
        return pulumi.get(self, "attach_api_keys")

    @attach_api_keys.setter
    def attach_api_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attach_api_keys", value)

    @property
    @pulumi.getter(name="attachLists")
    def attach_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UsagePlanAttachListArgs']]]]:
        """
        Attach service and API list.
        """
        return pulumi.get(self, "attach_lists")

    @attach_lists.setter
    def attach_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UsagePlanAttachListArgs']]]]):
        pulumi.set(self, "attach_lists", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="maxRequestNum")
    def max_request_num(self) -> Optional[pulumi.Input[int]]:
        """
        Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
        """
        return pulumi.get(self, "max_request_num")

    @max_request_num.setter
    def max_request_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_request_num", value)

    @property
    @pulumi.getter(name="maxRequestNumPreSec")
    def max_request_num_pre_sec(self) -> Optional[pulumi.Input[int]]:
        """
        Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
        """
        return pulumi.get(self, "max_request_num_pre_sec")

    @max_request_num_pre_sec.setter
    def max_request_num_pre_sec(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_request_num_pre_sec", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)

    @property
    @pulumi.getter(name="usagePlanDesc")
    def usage_plan_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Custom usage plan description.
        """
        return pulumi.get(self, "usage_plan_desc")

    @usage_plan_desc.setter
    def usage_plan_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage_plan_desc", value)

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom usage plan name.
        """
        return pulumi.get(self, "usage_plan_name")

    @usage_plan_name.setter
    def usage_plan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage_plan_name", value)


class UsagePlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_request_num: Optional[pulumi.Input[int]] = None,
                 max_request_num_pre_sec: Optional[pulumi.Input[int]] = None,
                 usage_plan_desc: Optional[pulumi.Input[str]] = None,
                 usage_plan_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create API gateway usage plan.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.UsagePlan("example",
            max_request_num=100,
            max_request_num_pre_sec=10,
            usage_plan_desc="desc.",
            usage_plan_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        API gateway usage plan can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/usagePlan:UsagePlan plan usagePlan-gyeafpab
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] max_request_num: Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
        :param pulumi.Input[int] max_request_num_pre_sec: Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
        :param pulumi.Input[str] usage_plan_desc: Custom usage plan description.
        :param pulumi.Input[str] usage_plan_name: Custom usage plan name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UsagePlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create API gateway usage plan.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.UsagePlan("example",
            max_request_num=100,
            max_request_num_pre_sec=10,
            usage_plan_desc="desc.",
            usage_plan_name="tf_example")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        API gateway usage plan can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/usagePlan:UsagePlan plan usagePlan-gyeafpab
        ```

        :param str resource_name: The name of the resource.
        :param UsagePlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UsagePlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_request_num: Optional[pulumi.Input[int]] = None,
                 max_request_num_pre_sec: Optional[pulumi.Input[int]] = None,
                 usage_plan_desc: Optional[pulumi.Input[str]] = None,
                 usage_plan_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UsagePlanArgs.__new__(UsagePlanArgs)

            __props__.__dict__["max_request_num"] = max_request_num
            __props__.__dict__["max_request_num_pre_sec"] = max_request_num_pre_sec
            __props__.__dict__["usage_plan_desc"] = usage_plan_desc
            if usage_plan_name is None and not opts.urn:
                raise TypeError("Missing required property 'usage_plan_name'")
            __props__.__dict__["usage_plan_name"] = usage_plan_name
            __props__.__dict__["attach_api_keys"] = None
            __props__.__dict__["attach_lists"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["modify_time"] = None
        super(UsagePlan, __self__).__init__(
            'tencentcloud:ApiGateway/usagePlan:UsagePlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attach_api_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            attach_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UsagePlanAttachListArgs']]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            max_request_num: Optional[pulumi.Input[int]] = None,
            max_request_num_pre_sec: Optional[pulumi.Input[int]] = None,
            modify_time: Optional[pulumi.Input[str]] = None,
            usage_plan_desc: Optional[pulumi.Input[str]] = None,
            usage_plan_name: Optional[pulumi.Input[str]] = None) -> 'UsagePlan':
        """
        Get an existing UsagePlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attach_api_keys: Attach API keys list.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UsagePlanAttachListArgs']]]] attach_lists: Attach service and API list.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[int] max_request_num: Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
        :param pulumi.Input[int] max_request_num_pre_sec: Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
        :param pulumi.Input[str] modify_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] usage_plan_desc: Custom usage plan description.
        :param pulumi.Input[str] usage_plan_name: Custom usage plan name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UsagePlanState.__new__(_UsagePlanState)

        __props__.__dict__["attach_api_keys"] = attach_api_keys
        __props__.__dict__["attach_lists"] = attach_lists
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["max_request_num"] = max_request_num
        __props__.__dict__["max_request_num_pre_sec"] = max_request_num_pre_sec
        __props__.__dict__["modify_time"] = modify_time
        __props__.__dict__["usage_plan_desc"] = usage_plan_desc
        __props__.__dict__["usage_plan_name"] = usage_plan_name
        return UsagePlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachApiKeys")
    def attach_api_keys(self) -> pulumi.Output[Sequence[str]]:
        """
        Attach API keys list.
        """
        return pulumi.get(self, "attach_api_keys")

    @property
    @pulumi.getter(name="attachLists")
    def attach_lists(self) -> pulumi.Output[Sequence['outputs.UsagePlanAttachList']]:
        """
        Attach service and API list.
        """
        return pulumi.get(self, "attach_lists")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="maxRequestNum")
    def max_request_num(self) -> pulumi.Output[Optional[int]]:
        """
        Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
        """
        return pulumi.get(self, "max_request_num")

    @property
    @pulumi.getter(name="maxRequestNumPreSec")
    def max_request_num_pre_sec(self) -> pulumi.Output[Optional[int]]:
        """
        Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
        """
        return pulumi.get(self, "max_request_num_pre_sec")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> pulumi.Output[str]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="usagePlanDesc")
    def usage_plan_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Custom usage plan description.
        """
        return pulumi.get(self, "usage_plan_desc")

    @property
    @pulumi.getter(name="usagePlanName")
    def usage_plan_name(self) -> pulumi.Output[str]:
        """
        Custom usage plan name.
        """
        return pulumi.get(self, "usage_plan_name")

