# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ServiceReleaseArgs', 'ServiceRelease']

@pulumi.input_type
class ServiceReleaseArgs:
    def __init__(__self__, *,
                 environment_name: pulumi.Input[str],
                 release_desc: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 release_version: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceRelease resource.
        :param pulumi.Input[str] environment_name: API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
        :param pulumi.Input[str] release_desc: This release description of the API gateway service.
        :param pulumi.Input[str] service_id: ID of API gateway service.
        :param pulumi.Input[str] release_version: The release version.
        """
        pulumi.set(__self__, "environment_name", environment_name)
        pulumi.set(__self__, "release_desc", release_desc)
        pulumi.set(__self__, "service_id", service_id)
        if release_version is not None:
            pulumi.set(__self__, "release_version", release_version)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> pulumi.Input[str]:
        """
        API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
        """
        return pulumi.get(self, "environment_name")

    @environment_name.setter
    def environment_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_name", value)

    @property
    @pulumi.getter(name="releaseDesc")
    def release_desc(self) -> pulumi.Input[str]:
        """
        This release description of the API gateway service.
        """
        return pulumi.get(self, "release_desc")

    @release_desc.setter
    def release_desc(self, value: pulumi.Input[str]):
        pulumi.set(self, "release_desc", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        ID of API gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> Optional[pulumi.Input[str]]:
        """
        The release version.
        """
        return pulumi.get(self, "release_version")

    @release_version.setter
    def release_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_version", value)


@pulumi.input_type
class _ServiceReleaseState:
    def __init__(__self__, *,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 release_desc: Optional[pulumi.Input[str]] = None,
                 release_version: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceRelease resources.
        :param pulumi.Input[str] environment_name: API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
        :param pulumi.Input[str] release_desc: This release description of the API gateway service.
        :param pulumi.Input[str] release_version: The release version.
        :param pulumi.Input[str] service_id: ID of API gateway service.
        """
        if environment_name is not None:
            pulumi.set(__self__, "environment_name", environment_name)
        if release_desc is not None:
            pulumi.set(__self__, "release_desc", release_desc)
        if release_version is not None:
            pulumi.set(__self__, "release_version", release_version)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> Optional[pulumi.Input[str]]:
        """
        API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
        """
        return pulumi.get(self, "environment_name")

    @environment_name.setter
    def environment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_name", value)

    @property
    @pulumi.getter(name="releaseDesc")
    def release_desc(self) -> Optional[pulumi.Input[str]]:
        """
        This release description of the API gateway service.
        """
        return pulumi.get(self, "release_desc")

    @release_desc.setter
    def release_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_desc", value)

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> Optional[pulumi.Input[str]]:
        """
        The release version.
        """
        return pulumi.get(self, "release_version")

    @release_version.setter
    def release_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "release_version", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of API gateway service.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)


class ServiceRelease(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 release_desc: Optional[pulumi.Input[str]] = None,
                 release_version: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create API gateway service release.

        ## Import

        API gateway service release can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/serviceRelease:ServiceRelease service service-jjt3fs3s#release#20201015121916d85fb161-eaec-4dda-a7e0-659aa5f401be
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] environment_name: API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
        :param pulumi.Input[str] release_desc: This release description of the API gateway service.
        :param pulumi.Input[str] release_version: The release version.
        :param pulumi.Input[str] service_id: ID of API gateway service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceReleaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create API gateway service release.

        ## Import

        API gateway service release can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/serviceRelease:ServiceRelease service service-jjt3fs3s#release#20201015121916d85fb161-eaec-4dda-a7e0-659aa5f401be
        ```

        :param str resource_name: The name of the resource.
        :param ServiceReleaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceReleaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 release_desc: Optional[pulumi.Input[str]] = None,
                 release_version: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceReleaseArgs.__new__(ServiceReleaseArgs)

            if environment_name is None and not opts.urn:
                raise TypeError("Missing required property 'environment_name'")
            __props__.__dict__["environment_name"] = environment_name
            if release_desc is None and not opts.urn:
                raise TypeError("Missing required property 'release_desc'")
            __props__.__dict__["release_desc"] = release_desc
            __props__.__dict__["release_version"] = release_version
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
        super(ServiceRelease, __self__).__init__(
            'tencentcloud:ApiGateway/serviceRelease:ServiceRelease',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            environment_name: Optional[pulumi.Input[str]] = None,
            release_desc: Optional[pulumi.Input[str]] = None,
            release_version: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None) -> 'ServiceRelease':
        """
        Get an existing ServiceRelease resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] environment_name: API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
        :param pulumi.Input[str] release_desc: This release description of the API gateway service.
        :param pulumi.Input[str] release_version: The release version.
        :param pulumi.Input[str] service_id: ID of API gateway service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceReleaseState.__new__(_ServiceReleaseState)

        __props__.__dict__["environment_name"] = environment_name
        __props__.__dict__["release_desc"] = release_desc
        __props__.__dict__["release_version"] = release_version
        __props__.__dict__["service_id"] = service_id
        return ServiceRelease(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> pulumi.Output[str]:
        """
        API gateway service environment name to be released. Valid values: `test`, `prepub`, `release`.
        """
        return pulumi.get(self, "environment_name")

    @property
    @pulumi.getter(name="releaseDesc")
    def release_desc(self) -> pulumi.Output[str]:
        """
        This release description of the API gateway service.
        """
        return pulumi.get(self, "release_desc")

    @property
    @pulumi.getter(name="releaseVersion")
    def release_version(self) -> pulumi.Output[str]:
        """
        The release version.
        """
        return pulumi.get(self, "release_version")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        ID of API gateway service.
        """
        return pulumi.get(self, "service_id")

