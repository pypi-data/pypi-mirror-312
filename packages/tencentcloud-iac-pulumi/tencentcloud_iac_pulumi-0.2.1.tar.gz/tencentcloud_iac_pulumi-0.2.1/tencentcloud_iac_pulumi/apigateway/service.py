# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 net_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 protocol: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 exclusive_set_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 service_desc: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] net_types: Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
        :param pulumi.Input[str] protocol: Service frontend request type. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[str] service_name: Custom service name.
        :param pulumi.Input[str] exclusive_set_name: It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
        :param pulumi.Input[str] instance_id: Exclusive instance ID.
        :param pulumi.Input[str] ip_version: IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] service_desc: Custom service description.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] uniq_vpc_id: VPC ID.
        """
        pulumi.set(__self__, "net_types", net_types)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "service_name", service_name)
        if exclusive_set_name is not None:
            warnings.warn("""It has been deprecated from version 1.81.9.""", DeprecationWarning)
            pulumi.log.warn("""exclusive_set_name is deprecated: It has been deprecated from version 1.81.9.""")
        if exclusive_set_name is not None:
            pulumi.set(__self__, "exclusive_set_name", exclusive_set_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if pre_limit is not None:
            pulumi.set(__self__, "pre_limit", pre_limit)
        if release_limit is not None:
            pulumi.set(__self__, "release_limit", release_limit)
        if service_desc is not None:
            pulumi.set(__self__, "service_desc", service_desc)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if test_limit is not None:
            pulumi.set(__self__, "test_limit", test_limit)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)

    @property
    @pulumi.getter(name="netTypes")
    def net_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
        """
        return pulumi.get(self, "net_types")

    @net_types.setter
    def net_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "net_types", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Service frontend request type. Valid values: `http`, `https`, `http&https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        Custom service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="exclusiveSetName")
    def exclusive_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
        """
        warnings.warn("""It has been deprecated from version 1.81.9.""", DeprecationWarning)
        pulumi.log.warn("""exclusive_set_name is deprecated: It has been deprecated from version 1.81.9.""")

        return pulumi.get(self, "exclusive_set_name")

    @exclusive_set_name.setter
    def exclusive_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusive_set_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Exclusive instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="preLimit")
    def pre_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "pre_limit")

    @pre_limit.setter
    def pre_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_limit", value)

    @property
    @pulumi.getter(name="releaseLimit")
    def release_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "release_limit")

    @release_limit.setter
    def release_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release_limit", value)

    @property
    @pulumi.getter(name="serviceDesc")
    def service_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service description.
        """
        return pulumi.get(self, "service_desc")

    @service_desc.setter
    def service_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_desc", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="testLimit")
    def test_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "test_limit")

    @test_limit.setter
    def test_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "test_limit", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 api_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceApiListArgs']]]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 exclusive_set_name: Optional[pulumi.Input[str]] = None,
                 inner_http_port: Optional[pulumi.Input[int]] = None,
                 inner_https_port: Optional[pulumi.Input[int]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 internal_sub_domain: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None,
                 net_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 outer_sub_domain: Optional[pulumi.Input[str]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 service_desc: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 usage_plan_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUsagePlanListArgs']]]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceApiListArgs']]] api_lists: A list of APIs.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] exclusive_set_name: It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
        :param pulumi.Input[int] inner_http_port: Port number for http access over private network.
        :param pulumi.Input[int] inner_https_port: Port number for https access over private network.
        :param pulumi.Input[str] instance_id: Exclusive instance ID.
        :param pulumi.Input[str] internal_sub_domain: Private network access subdomain name.
        :param pulumi.Input[str] ip_version: IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
        :param pulumi.Input[str] modify_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] net_types: Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
        :param pulumi.Input[str] outer_sub_domain: Public network access subdomain name.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] protocol: Service frontend request type. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] service_desc: Custom service description.
        :param pulumi.Input[str] service_name: Custom service name.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] uniq_vpc_id: VPC ID.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceUsagePlanListArgs']]] usage_plan_lists: A list of attach usage plans.
        """
        if api_lists is not None:
            pulumi.set(__self__, "api_lists", api_lists)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if exclusive_set_name is not None:
            warnings.warn("""It has been deprecated from version 1.81.9.""", DeprecationWarning)
            pulumi.log.warn("""exclusive_set_name is deprecated: It has been deprecated from version 1.81.9.""")
        if exclusive_set_name is not None:
            pulumi.set(__self__, "exclusive_set_name", exclusive_set_name)
        if inner_http_port is not None:
            pulumi.set(__self__, "inner_http_port", inner_http_port)
        if inner_https_port is not None:
            pulumi.set(__self__, "inner_https_port", inner_https_port)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if internal_sub_domain is not None:
            pulumi.set(__self__, "internal_sub_domain", internal_sub_domain)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if net_types is not None:
            pulumi.set(__self__, "net_types", net_types)
        if outer_sub_domain is not None:
            pulumi.set(__self__, "outer_sub_domain", outer_sub_domain)
        if pre_limit is not None:
            pulumi.set(__self__, "pre_limit", pre_limit)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if release_limit is not None:
            pulumi.set(__self__, "release_limit", release_limit)
        if service_desc is not None:
            pulumi.set(__self__, "service_desc", service_desc)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if test_limit is not None:
            pulumi.set(__self__, "test_limit", test_limit)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if usage_plan_lists is not None:
            pulumi.set(__self__, "usage_plan_lists", usage_plan_lists)

    @property
    @pulumi.getter(name="apiLists")
    def api_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceApiListArgs']]]]:
        """
        A list of APIs.
        """
        return pulumi.get(self, "api_lists")

    @api_lists.setter
    def api_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceApiListArgs']]]]):
        pulumi.set(self, "api_lists", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="exclusiveSetName")
    def exclusive_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
        """
        warnings.warn("""It has been deprecated from version 1.81.9.""", DeprecationWarning)
        pulumi.log.warn("""exclusive_set_name is deprecated: It has been deprecated from version 1.81.9.""")

        return pulumi.get(self, "exclusive_set_name")

    @exclusive_set_name.setter
    def exclusive_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exclusive_set_name", value)

    @property
    @pulumi.getter(name="innerHttpPort")
    def inner_http_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number for http access over private network.
        """
        return pulumi.get(self, "inner_http_port")

    @inner_http_port.setter
    def inner_http_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inner_http_port", value)

    @property
    @pulumi.getter(name="innerHttpsPort")
    def inner_https_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port number for https access over private network.
        """
        return pulumi.get(self, "inner_https_port")

    @inner_https_port.setter
    def inner_https_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inner_https_port", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Exclusive instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="internalSubDomain")
    def internal_sub_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Private network access subdomain name.
        """
        return pulumi.get(self, "internal_sub_domain")

    @internal_sub_domain.setter
    def internal_sub_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_sub_domain", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[pulumi.Input[str]]:
        """
        IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)

    @property
    @pulumi.getter(name="netTypes")
    def net_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
        """
        return pulumi.get(self, "net_types")

    @net_types.setter
    def net_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "net_types", value)

    @property
    @pulumi.getter(name="outerSubDomain")
    def outer_sub_domain(self) -> Optional[pulumi.Input[str]]:
        """
        Public network access subdomain name.
        """
        return pulumi.get(self, "outer_sub_domain")

    @outer_sub_domain.setter
    def outer_sub_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outer_sub_domain", value)

    @property
    @pulumi.getter(name="preLimit")
    def pre_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "pre_limit")

    @pre_limit.setter
    def pre_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pre_limit", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Service frontend request type. Valid values: `http`, `https`, `http&https`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="releaseLimit")
    def release_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "release_limit")

    @release_limit.setter
    def release_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "release_limit", value)

    @property
    @pulumi.getter(name="serviceDesc")
    def service_desc(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service description.
        """
        return pulumi.get(self, "service_desc")

    @service_desc.setter
    def service_desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_desc", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Custom service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="testLimit")
    def test_limit(self) -> Optional[pulumi.Input[int]]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "test_limit")

    @test_limit.setter
    def test_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "test_limit", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="usagePlanLists")
    def usage_plan_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUsagePlanListArgs']]]]:
        """
        A list of attach usage plans.
        """
        return pulumi.get(self, "usage_plan_lists")

    @usage_plan_lists.setter
    def usage_plan_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceUsagePlanListArgs']]]]):
        pulumi.set(self, "usage_plan_lists", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 exclusive_set_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 net_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 service_desc: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use this resource to create API gateway service.

        > **NOTE:** After setting `uniq_vpc_id`, it cannot be modified.

        ## Example Usage

        ### Shared Service

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        example = tencentcloud.api_gateway.Service("example",
            service_name="tf-example",
            protocol="http&https",
            service_desc="desc.",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4",
            uniq_vpc_id=vpc.id,
            tags={
                "createdBy": "terraform",
            },
            release_limit=500,
            pre_limit=500,
            test_limit=500)
        ```
        <!--End PulumiCodeChooser -->

        ### Exclusive Service

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.Service("example",
            service_name="tf-example",
            protocol="http&https",
            service_desc="desc.",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4",
            uniq_vpc_id=tencentcloud_vpc["vpc"]["id"],
            instance_id="instance-rc6fcv4e",
            tags={
                "createdBy": "terraform",
            },
            release_limit=500,
            pre_limit=500,
            test_limit=500)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        API gateway service can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/service:Service service service-pg6ud8pa
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] exclusive_set_name: It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
        :param pulumi.Input[str] instance_id: Exclusive instance ID.
        :param pulumi.Input[str] ip_version: IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] net_types: Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] protocol: Service frontend request type. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] service_desc: Custom service description.
        :param pulumi.Input[str] service_name: Custom service name.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] uniq_vpc_id: VPC ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use this resource to create API gateway service.

        > **NOTE:** After setting `uniq_vpc_id`, it cannot be modified.

        ## Example Usage

        ### Shared Service

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        example = tencentcloud.api_gateway.Service("example",
            service_name="tf-example",
            protocol="http&https",
            service_desc="desc.",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4",
            uniq_vpc_id=vpc.id,
            tags={
                "createdBy": "terraform",
            },
            release_limit=500,
            pre_limit=500,
            test_limit=500)
        ```
        <!--End PulumiCodeChooser -->

        ### Exclusive Service

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.api_gateway.Service("example",
            service_name="tf-example",
            protocol="http&https",
            service_desc="desc.",
            net_types=[
                "INNER",
                "OUTER",
            ],
            ip_version="IPv4",
            uniq_vpc_id=tencentcloud_vpc["vpc"]["id"],
            instance_id="instance-rc6fcv4e",
            tags={
                "createdBy": "terraform",
            },
            release_limit=500,
            pre_limit=500,
            test_limit=500)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        API gateway service can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:ApiGateway/service:Service service service-pg6ud8pa
        ```

        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 exclusive_set_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 ip_version: Optional[pulumi.Input[str]] = None,
                 net_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pre_limit: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 release_limit: Optional[pulumi.Input[int]] = None,
                 service_desc: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 test_limit: Optional[pulumi.Input[int]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["exclusive_set_name"] = exclusive_set_name
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["ip_version"] = ip_version
            if net_types is None and not opts.urn:
                raise TypeError("Missing required property 'net_types'")
            __props__.__dict__["net_types"] = net_types
            __props__.__dict__["pre_limit"] = pre_limit
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["release_limit"] = release_limit
            __props__.__dict__["service_desc"] = service_desc
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["test_limit"] = test_limit
            __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
            __props__.__dict__["api_lists"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["inner_http_port"] = None
            __props__.__dict__["inner_https_port"] = None
            __props__.__dict__["internal_sub_domain"] = None
            __props__.__dict__["modify_time"] = None
            __props__.__dict__["outer_sub_domain"] = None
            __props__.__dict__["usage_plan_lists"] = None
        super(Service, __self__).__init__(
            'tencentcloud:ApiGateway/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceApiListArgs']]]]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            exclusive_set_name: Optional[pulumi.Input[str]] = None,
            inner_http_port: Optional[pulumi.Input[int]] = None,
            inner_https_port: Optional[pulumi.Input[int]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            internal_sub_domain: Optional[pulumi.Input[str]] = None,
            ip_version: Optional[pulumi.Input[str]] = None,
            modify_time: Optional[pulumi.Input[str]] = None,
            net_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            outer_sub_domain: Optional[pulumi.Input[str]] = None,
            pre_limit: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            release_limit: Optional[pulumi.Input[int]] = None,
            service_desc: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            test_limit: Optional[pulumi.Input[int]] = None,
            uniq_vpc_id: Optional[pulumi.Input[str]] = None,
            usage_plan_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceUsagePlanListArgs']]]]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceApiListArgs']]]] api_lists: A list of APIs.
        :param pulumi.Input[str] create_time: Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[str] exclusive_set_name: It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
        :param pulumi.Input[int] inner_http_port: Port number for http access over private network.
        :param pulumi.Input[int] inner_https_port: Port number for https access over private network.
        :param pulumi.Input[str] instance_id: Exclusive instance ID.
        :param pulumi.Input[str] internal_sub_domain: Private network access subdomain name.
        :param pulumi.Input[str] ip_version: IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
        :param pulumi.Input[str] modify_time: Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] net_types: Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
        :param pulumi.Input[str] outer_sub_domain: Public network access subdomain name.
        :param pulumi.Input[int] pre_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] protocol: Service frontend request type. Valid values: `http`, `https`, `http&https`.
        :param pulumi.Input[int] release_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] service_desc: Custom service description.
        :param pulumi.Input[str] service_name: Custom service name.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] test_limit: API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        :param pulumi.Input[str] uniq_vpc_id: VPC ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceUsagePlanListArgs']]]] usage_plan_lists: A list of attach usage plans.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["api_lists"] = api_lists
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["exclusive_set_name"] = exclusive_set_name
        __props__.__dict__["inner_http_port"] = inner_http_port
        __props__.__dict__["inner_https_port"] = inner_https_port
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["internal_sub_domain"] = internal_sub_domain
        __props__.__dict__["ip_version"] = ip_version
        __props__.__dict__["modify_time"] = modify_time
        __props__.__dict__["net_types"] = net_types
        __props__.__dict__["outer_sub_domain"] = outer_sub_domain
        __props__.__dict__["pre_limit"] = pre_limit
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["release_limit"] = release_limit
        __props__.__dict__["service_desc"] = service_desc
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["test_limit"] = test_limit
        __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
        __props__.__dict__["usage_plan_lists"] = usage_plan_lists
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiLists")
    def api_lists(self) -> pulumi.Output[Sequence['outputs.ServiceApiList']]:
        """
        A list of APIs.
        """
        return pulumi.get(self, "api_lists")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="exclusiveSetName")
    def exclusive_set_name(self) -> pulumi.Output[Optional[str]]:
        """
        It has been deprecated from version 1.81.9. Self-deployed cluster name, which is used to specify the self-deployed cluster where the service is to be created.
        """
        warnings.warn("""It has been deprecated from version 1.81.9.""", DeprecationWarning)
        pulumi.log.warn("""exclusive_set_name is deprecated: It has been deprecated from version 1.81.9.""")

        return pulumi.get(self, "exclusive_set_name")

    @property
    @pulumi.getter(name="innerHttpPort")
    def inner_http_port(self) -> pulumi.Output[int]:
        """
        Port number for http access over private network.
        """
        return pulumi.get(self, "inner_http_port")

    @property
    @pulumi.getter(name="innerHttpsPort")
    def inner_https_port(self) -> pulumi.Output[int]:
        """
        Port number for https access over private network.
        """
        return pulumi.get(self, "inner_https_port")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        Exclusive instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="internalSubDomain")
    def internal_sub_domain(self) -> pulumi.Output[str]:
        """
        Private network access subdomain name.
        """
        return pulumi.get(self, "internal_sub_domain")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Output[Optional[str]]:
        """
        IP version number. Valid values: `IPv4`, `IPv6`. Default value: `IPv4`.
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> pulumi.Output[str]:
        """
        Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="netTypes")
    def net_types(self) -> pulumi.Output[Sequence[str]]:
        """
        Network type list, which is used to specify the supported network types. Valid values: `INNER`, `OUTER`. `INNER` indicates access over private network, and `OUTER` indicates access over public network.
        """
        return pulumi.get(self, "net_types")

    @property
    @pulumi.getter(name="outerSubDomain")
    def outer_sub_domain(self) -> pulumi.Output[str]:
        """
        Public network access subdomain name.
        """
        return pulumi.get(self, "outer_sub_domain")

    @property
    @pulumi.getter(name="preLimit")
    def pre_limit(self) -> pulumi.Output[int]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "pre_limit")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        Service frontend request type. Valid values: `http`, `https`, `http&https`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="releaseLimit")
    def release_limit(self) -> pulumi.Output[int]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "release_limit")

    @property
    @pulumi.getter(name="serviceDesc")
    def service_desc(self) -> pulumi.Output[Optional[str]]:
        """
        Custom service description.
        """
        return pulumi.get(self, "service_desc")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        Custom service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="testLimit")
    def test_limit(self) -> pulumi.Output[int]:
        """
        API QPS value. Enter a positive number to limit the API query rate per second `QPS`.
        """
        return pulumi.get(self, "test_limit")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter(name="usagePlanLists")
    def usage_plan_lists(self) -> pulumi.Output[Sequence['outputs.ServiceUsagePlanList']]:
        """
        A list of attach usage plans.
        """
        return pulumi.get(self, "usage_plan_lists")

