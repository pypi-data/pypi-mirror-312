# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppConfigArgs', 'AppConfig']

@pulumi.input_type
class AppConfigArgs:
    def __init__(__self__, *,
                 config_datas: pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]],
                 environment_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AppConfig resource.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]] config_datas: payload.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] name: appConfig name.
        """
        pulumi.set(__self__, "config_datas", config_datas)
        pulumi.set(__self__, "environment_id", environment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configDatas")
    def config_datas(self) -> pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]]:
        """
        payload.
        """
        return pulumi.get(self, "config_datas")

    @config_datas.setter
    def config_datas(self, value: pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]]):
        pulumi.set(self, "config_datas", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        appConfig name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AppConfigState:
    def __init__(__self__, *,
                 config_datas: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppConfig resources.
        :param pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]] config_datas: payload.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] name: appConfig name.
        """
        if config_datas is not None:
            pulumi.set(__self__, "config_datas", config_datas)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configDatas")
    def config_datas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]]]:
        """
        payload.
        """
        return pulumi.get(self, "config_datas")

    @config_datas.setter
    def config_datas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AppConfigConfigDataArgs']]]]):
        pulumi.set(self, "config_datas", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        appConfig name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class AppConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppConfigConfigDataArgs']]]]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tem appConfig

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        app_config = tencentcloud.tem.AppConfig("appConfig",
            config_datas=[
                tencentcloud.tem.AppConfigConfigDataArgs(
                    key="key",
                    value="value",
                ),
                tencentcloud.tem.AppConfigConfigDataArgs(
                    key="key1",
                    value="value1",
                ),
            ],
            environment_id="en-o5edaepv")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem appConfig can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/appConfig:AppConfig appConfig environmentId#name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppConfigConfigDataArgs']]]] config_datas: payload.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] name: appConfig name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tem appConfig

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        app_config = tencentcloud.tem.AppConfig("appConfig",
            config_datas=[
                tencentcloud.tem.AppConfigConfigDataArgs(
                    key="key",
                    value="value",
                ),
                tencentcloud.tem.AppConfigConfigDataArgs(
                    key="key1",
                    value="value1",
                ),
            ],
            environment_id="en-o5edaepv")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem appConfig can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/appConfig:AppConfig appConfig environmentId#name
        ```

        :param str resource_name: The name of the resource.
        :param AppConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config_datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppConfigConfigDataArgs']]]]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppConfigArgs.__new__(AppConfigArgs)

            if config_datas is None and not opts.urn:
                raise TypeError("Missing required property 'config_datas'")
            __props__.__dict__["config_datas"] = config_datas
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["name"] = name
        super(AppConfig, __self__).__init__(
            'tencentcloud:Tem/appConfig:AppConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config_datas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppConfigConfigDataArgs']]]]] = None,
            environment_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'AppConfig':
        """
        Get an existing AppConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AppConfigConfigDataArgs']]]] config_datas: payload.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] name: appConfig name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppConfigState.__new__(_AppConfigState)

        __props__.__dict__["config_datas"] = config_datas
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["name"] = name
        return AppConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="configDatas")
    def config_datas(self) -> pulumi.Output[Sequence['outputs.AppConfigConfigData']]:
        """
        payload.
        """
        return pulumi.get(self, "config_datas")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[str]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        appConfig name.
        """
        return pulumi.get(self, "name")

