# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GatewayArgs', 'Gateway']

@pulumi.input_type
class GatewayArgs:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['GatewayIngressArgs']] = None):
        """
        The set of arguments for constructing a Gateway resource.
        :param pulumi.Input['GatewayIngressArgs'] ingress: gateway properties.
        """
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['GatewayIngressArgs']]:
        """
        gateway properties.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['GatewayIngressArgs']]):
        pulumi.set(self, "ingress", value)


@pulumi.input_type
class _GatewayState:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['GatewayIngressArgs']] = None):
        """
        Input properties used for looking up and filtering Gateway resources.
        :param pulumi.Input['GatewayIngressArgs'] ingress: gateway properties.
        """
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['GatewayIngressArgs']]:
        """
        gateway properties.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['GatewayIngressArgs']]):
        pulumi.set(self, "ingress", value)


class Gateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ingress: Optional[pulumi.Input[pulumi.InputType['GatewayIngressArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tem gateway

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        gateway = tencentcloud.tem.Gateway("gateway", ingress=tencentcloud.tem.GatewayIngressArgs(
            address_ip_version="IPV4",
            environment_id="en-853mggjm",
            ingress_name="demo",
            mixed=False,
            rewrite_type="NONE",
            rules=[
                tencentcloud.tem.GatewayIngressRuleArgs(
                    host="test.com",
                    http=tencentcloud.tem.GatewayIngressRuleHttpArgs(
                        paths=[tencentcloud.tem.GatewayIngressRuleHttpPathArgs(
                            backend=tencentcloud.tem.GatewayIngressRuleHttpPathBackendArgs(
                                service_name="demo",
                                service_port=80,
                            ),
                            path="/",
                        )],
                    ),
                    protocol="http",
                ),
                tencentcloud.tem.GatewayIngressRuleArgs(
                    host="hello.com",
                    http=tencentcloud.tem.GatewayIngressRuleHttpArgs(
                        paths=[tencentcloud.tem.GatewayIngressRuleHttpPathArgs(
                            backend=tencentcloud.tem.GatewayIngressRuleHttpPathBackendArgs(
                                service_name="hello",
                                service_port=36000,
                            ),
                            path="/",
                        )],
                    ),
                    protocol="http",
                ),
            ],
        ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/gateway:Gateway gateway environmentId#gatewayName
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['GatewayIngressArgs']] ingress: gateway properties.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GatewayArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tem gateway

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        gateway = tencentcloud.tem.Gateway("gateway", ingress=tencentcloud.tem.GatewayIngressArgs(
            address_ip_version="IPV4",
            environment_id="en-853mggjm",
            ingress_name="demo",
            mixed=False,
            rewrite_type="NONE",
            rules=[
                tencentcloud.tem.GatewayIngressRuleArgs(
                    host="test.com",
                    http=tencentcloud.tem.GatewayIngressRuleHttpArgs(
                        paths=[tencentcloud.tem.GatewayIngressRuleHttpPathArgs(
                            backend=tencentcloud.tem.GatewayIngressRuleHttpPathBackendArgs(
                                service_name="demo",
                                service_port=80,
                            ),
                            path="/",
                        )],
                    ),
                    protocol="http",
                ),
                tencentcloud.tem.GatewayIngressRuleArgs(
                    host="hello.com",
                    http=tencentcloud.tem.GatewayIngressRuleHttpArgs(
                        paths=[tencentcloud.tem.GatewayIngressRuleHttpPathArgs(
                            backend=tencentcloud.tem.GatewayIngressRuleHttpPathBackendArgs(
                                service_name="hello",
                                service_port=36000,
                            ),
                            path="/",
                        )],
                    ),
                    protocol="http",
                ),
            ],
        ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/gateway:Gateway gateway environmentId#gatewayName
        ```

        :param str resource_name: The name of the resource.
        :param GatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ingress: Optional[pulumi.Input[pulumi.InputType['GatewayIngressArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayArgs.__new__(GatewayArgs)

            __props__.__dict__["ingress"] = ingress
        super(Gateway, __self__).__init__(
            'tencentcloud:Tem/gateway:Gateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ingress: Optional[pulumi.Input[pulumi.InputType['GatewayIngressArgs']]] = None) -> 'Gateway':
        """
        Get an existing Gateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['GatewayIngressArgs']] ingress: gateway properties.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayState.__new__(_GatewayState)

        __props__.__dict__["ingress"] = ingress
        return Gateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def ingress(self) -> pulumi.Output[Optional['outputs.GatewayIngress']]:
        """
        gateway properties.
        """
        return pulumi.get(self, "ingress")

