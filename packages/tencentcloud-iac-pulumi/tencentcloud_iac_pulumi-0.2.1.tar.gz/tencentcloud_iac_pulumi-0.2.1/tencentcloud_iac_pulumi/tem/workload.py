# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkloadArgs', 'Workload']

@pulumi.input_type
class WorkloadArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 cpu_spec: pulumi.Input[float],
                 deploy_mode: pulumi.Input[str],
                 deploy_version: pulumi.Input[str],
                 environment_id: pulumi.Input[str],
                 img_repo: pulumi.Input[str],
                 init_pod_num: pulumi.Input[int],
                 memory_spec: pulumi.Input[float],
                 deploy_strategy_conf: Optional[pulumi.Input['WorkloadDeployStrategyConfArgs']] = None,
                 env_confs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]]] = None,
                 liveness: Optional[pulumi.Input['WorkloadLivenessArgs']] = None,
                 post_start: Optional[pulumi.Input[str]] = None,
                 pre_stop: Optional[pulumi.Input[str]] = None,
                 readiness: Optional[pulumi.Input['WorkloadReadinessArgs']] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 startup_probe: Optional[pulumi.Input['WorkloadStartupProbeArgs']] = None,
                 storage_confs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]]] = None,
                 storage_mount_confs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]]] = None,
                 tcr_instance_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Workload resource.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[float] cpu_spec: cpu.
        :param pulumi.Input[str] deploy_mode: deploy mode, support IMAGE.
        :param pulumi.Input[str] deploy_version: deploy version.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] img_repo: repository name.
        :param pulumi.Input[int] init_pod_num: initial pod number.
        :param pulumi.Input[float] memory_spec: mem.
        :param pulumi.Input['WorkloadDeployStrategyConfArgs'] deploy_strategy_conf: deploy strategy.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]] env_confs: .
        :param pulumi.Input['WorkloadLivenessArgs'] liveness: liveness config.
        :param pulumi.Input[str] post_start: mem.
        :param pulumi.Input[str] pre_stop: mem.
        :param pulumi.Input['WorkloadReadinessArgs'] readiness: .
        :param pulumi.Input[str] repo_server: repo server addr when deploy by image.
        :param pulumi.Input[int] repo_type: repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: security groups.
        :param pulumi.Input['WorkloadStartupProbeArgs'] startup_probe: .
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]] storage_confs: storage configuration.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]] storage_mount_confs: storage mount configuration.
        :param pulumi.Input[str] tcr_instance_id: tcr instance id when deploy by image.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "cpu_spec", cpu_spec)
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        pulumi.set(__self__, "deploy_version", deploy_version)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "img_repo", img_repo)
        pulumi.set(__self__, "init_pod_num", init_pod_num)
        pulumi.set(__self__, "memory_spec", memory_spec)
        if deploy_strategy_conf is not None:
            pulumi.set(__self__, "deploy_strategy_conf", deploy_strategy_conf)
        if env_confs is not None:
            pulumi.set(__self__, "env_confs", env_confs)
        if liveness is not None:
            pulumi.set(__self__, "liveness", liveness)
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)
        if repo_server is not None:
            pulumi.set(__self__, "repo_server", repo_server)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if storage_confs is not None:
            pulumi.set(__self__, "storage_confs", storage_confs)
        if storage_mount_confs is not None:
            pulumi.set(__self__, "storage_mount_confs", storage_mount_confs)
        if tcr_instance_id is not None:
            pulumi.set(__self__, "tcr_instance_id", tcr_instance_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="cpuSpec")
    def cpu_spec(self) -> pulumi.Input[float]:
        """
        cpu.
        """
        return pulumi.get(self, "cpu_spec")

    @cpu_spec.setter
    def cpu_spec(self, value: pulumi.Input[float]):
        pulumi.set(self, "cpu_spec", value)

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> pulumi.Input[str]:
        """
        deploy mode, support IMAGE.
        """
        return pulumi.get(self, "deploy_mode")

    @deploy_mode.setter
    def deploy_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_mode", value)

    @property
    @pulumi.getter(name="deployVersion")
    def deploy_version(self) -> pulumi.Input[str]:
        """
        deploy version.
        """
        return pulumi.get(self, "deploy_version")

    @deploy_version.setter
    def deploy_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_version", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="imgRepo")
    def img_repo(self) -> pulumi.Input[str]:
        """
        repository name.
        """
        return pulumi.get(self, "img_repo")

    @img_repo.setter
    def img_repo(self, value: pulumi.Input[str]):
        pulumi.set(self, "img_repo", value)

    @property
    @pulumi.getter(name="initPodNum")
    def init_pod_num(self) -> pulumi.Input[int]:
        """
        initial pod number.
        """
        return pulumi.get(self, "init_pod_num")

    @init_pod_num.setter
    def init_pod_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "init_pod_num", value)

    @property
    @pulumi.getter(name="memorySpec")
    def memory_spec(self) -> pulumi.Input[float]:
        """
        mem.
        """
        return pulumi.get(self, "memory_spec")

    @memory_spec.setter
    def memory_spec(self, value: pulumi.Input[float]):
        pulumi.set(self, "memory_spec", value)

    @property
    @pulumi.getter(name="deployStrategyConf")
    def deploy_strategy_conf(self) -> Optional[pulumi.Input['WorkloadDeployStrategyConfArgs']]:
        """
        deploy strategy.
        """
        return pulumi.get(self, "deploy_strategy_conf")

    @deploy_strategy_conf.setter
    def deploy_strategy_conf(self, value: Optional[pulumi.Input['WorkloadDeployStrategyConfArgs']]):
        pulumi.set(self, "deploy_strategy_conf", value)

    @property
    @pulumi.getter(name="envConfs")
    def env_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]]]:
        """
        .
        """
        return pulumi.get(self, "env_confs")

    @env_confs.setter
    def env_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]]]):
        pulumi.set(self, "env_confs", value)

    @property
    @pulumi.getter
    def liveness(self) -> Optional[pulumi.Input['WorkloadLivenessArgs']]:
        """
        liveness config.
        """
        return pulumi.get(self, "liveness")

    @liveness.setter
    def liveness(self, value: Optional[pulumi.Input['WorkloadLivenessArgs']]):
        pulumi.set(self, "liveness", value)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input[str]]:
        """
        mem.
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input[str]]:
        """
        mem.
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_stop", value)

    @property
    @pulumi.getter
    def readiness(self) -> Optional[pulumi.Input['WorkloadReadinessArgs']]:
        """
        .
        """
        return pulumi.get(self, "readiness")

    @readiness.setter
    def readiness(self, value: Optional[pulumi.Input['WorkloadReadinessArgs']]):
        pulumi.set(self, "readiness", value)

    @property
    @pulumi.getter(name="repoServer")
    def repo_server(self) -> Optional[pulumi.Input[str]]:
        """
        repo server addr when deploy by image.
        """
        return pulumi.get(self, "repo_server")

    @repo_server.setter
    def repo_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_server", value)

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[int]]:
        """
        repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repo_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        security groups.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['WorkloadStartupProbeArgs']]:
        """
        .
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['WorkloadStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter(name="storageConfs")
    def storage_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]]]:
        """
        storage configuration.
        """
        return pulumi.get(self, "storage_confs")

    @storage_confs.setter
    def storage_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]]]):
        pulumi.set(self, "storage_confs", value)

    @property
    @pulumi.getter(name="storageMountConfs")
    def storage_mount_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]]]:
        """
        storage mount configuration.
        """
        return pulumi.get(self, "storage_mount_confs")

    @storage_mount_confs.setter
    def storage_mount_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]]]):
        pulumi.set(self, "storage_mount_confs", value)

    @property
    @pulumi.getter(name="tcrInstanceId")
    def tcr_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        tcr instance id when deploy by image.
        """
        return pulumi.get(self, "tcr_instance_id")

    @tcr_instance_id.setter
    def tcr_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcr_instance_id", value)


@pulumi.input_type
class _WorkloadState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cpu_spec: Optional[pulumi.Input[float]] = None,
                 deploy_mode: Optional[pulumi.Input[str]] = None,
                 deploy_strategy_conf: Optional[pulumi.Input['WorkloadDeployStrategyConfArgs']] = None,
                 deploy_version: Optional[pulumi.Input[str]] = None,
                 env_confs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 img_repo: Optional[pulumi.Input[str]] = None,
                 init_pod_num: Optional[pulumi.Input[int]] = None,
                 liveness: Optional[pulumi.Input['WorkloadLivenessArgs']] = None,
                 memory_spec: Optional[pulumi.Input[float]] = None,
                 post_start: Optional[pulumi.Input[str]] = None,
                 pre_stop: Optional[pulumi.Input[str]] = None,
                 readiness: Optional[pulumi.Input['WorkloadReadinessArgs']] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 startup_probe: Optional[pulumi.Input['WorkloadStartupProbeArgs']] = None,
                 storage_confs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]]] = None,
                 storage_mount_confs: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]]] = None,
                 tcr_instance_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Workload resources.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[float] cpu_spec: cpu.
        :param pulumi.Input[str] deploy_mode: deploy mode, support IMAGE.
        :param pulumi.Input['WorkloadDeployStrategyConfArgs'] deploy_strategy_conf: deploy strategy.
        :param pulumi.Input[str] deploy_version: deploy version.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]] env_confs: .
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] img_repo: repository name.
        :param pulumi.Input[int] init_pod_num: initial pod number.
        :param pulumi.Input['WorkloadLivenessArgs'] liveness: liveness config.
        :param pulumi.Input[float] memory_spec: mem.
        :param pulumi.Input[str] post_start: mem.
        :param pulumi.Input[str] pre_stop: mem.
        :param pulumi.Input['WorkloadReadinessArgs'] readiness: .
        :param pulumi.Input[str] repo_server: repo server addr when deploy by image.
        :param pulumi.Input[int] repo_type: repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: security groups.
        :param pulumi.Input['WorkloadStartupProbeArgs'] startup_probe: .
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]] storage_confs: storage configuration.
        :param pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]] storage_mount_confs: storage mount configuration.
        :param pulumi.Input[str] tcr_instance_id: tcr instance id when deploy by image.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if cpu_spec is not None:
            pulumi.set(__self__, "cpu_spec", cpu_spec)
        if deploy_mode is not None:
            pulumi.set(__self__, "deploy_mode", deploy_mode)
        if deploy_strategy_conf is not None:
            pulumi.set(__self__, "deploy_strategy_conf", deploy_strategy_conf)
        if deploy_version is not None:
            pulumi.set(__self__, "deploy_version", deploy_version)
        if env_confs is not None:
            pulumi.set(__self__, "env_confs", env_confs)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if img_repo is not None:
            pulumi.set(__self__, "img_repo", img_repo)
        if init_pod_num is not None:
            pulumi.set(__self__, "init_pod_num", init_pod_num)
        if liveness is not None:
            pulumi.set(__self__, "liveness", liveness)
        if memory_spec is not None:
            pulumi.set(__self__, "memory_spec", memory_spec)
        if post_start is not None:
            pulumi.set(__self__, "post_start", post_start)
        if pre_stop is not None:
            pulumi.set(__self__, "pre_stop", pre_stop)
        if readiness is not None:
            pulumi.set(__self__, "readiness", readiness)
        if repo_server is not None:
            pulumi.set(__self__, "repo_server", repo_server)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if startup_probe is not None:
            pulumi.set(__self__, "startup_probe", startup_probe)
        if storage_confs is not None:
            pulumi.set(__self__, "storage_confs", storage_confs)
        if storage_mount_confs is not None:
            pulumi.set(__self__, "storage_mount_confs", storage_mount_confs)
        if tcr_instance_id is not None:
            pulumi.set(__self__, "tcr_instance_id", tcr_instance_id)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="cpuSpec")
    def cpu_spec(self) -> Optional[pulumi.Input[float]]:
        """
        cpu.
        """
        return pulumi.get(self, "cpu_spec")

    @cpu_spec.setter
    def cpu_spec(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cpu_spec", value)

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> Optional[pulumi.Input[str]]:
        """
        deploy mode, support IMAGE.
        """
        return pulumi.get(self, "deploy_mode")

    @deploy_mode.setter
    def deploy_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_mode", value)

    @property
    @pulumi.getter(name="deployStrategyConf")
    def deploy_strategy_conf(self) -> Optional[pulumi.Input['WorkloadDeployStrategyConfArgs']]:
        """
        deploy strategy.
        """
        return pulumi.get(self, "deploy_strategy_conf")

    @deploy_strategy_conf.setter
    def deploy_strategy_conf(self, value: Optional[pulumi.Input['WorkloadDeployStrategyConfArgs']]):
        pulumi.set(self, "deploy_strategy_conf", value)

    @property
    @pulumi.getter(name="deployVersion")
    def deploy_version(self) -> Optional[pulumi.Input[str]]:
        """
        deploy version.
        """
        return pulumi.get(self, "deploy_version")

    @deploy_version.setter
    def deploy_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_version", value)

    @property
    @pulumi.getter(name="envConfs")
    def env_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]]]:
        """
        .
        """
        return pulumi.get(self, "env_confs")

    @env_confs.setter
    def env_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadEnvConfArgs']]]]):
        pulumi.set(self, "env_confs", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="imgRepo")
    def img_repo(self) -> Optional[pulumi.Input[str]]:
        """
        repository name.
        """
        return pulumi.get(self, "img_repo")

    @img_repo.setter
    def img_repo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "img_repo", value)

    @property
    @pulumi.getter(name="initPodNum")
    def init_pod_num(self) -> Optional[pulumi.Input[int]]:
        """
        initial pod number.
        """
        return pulumi.get(self, "init_pod_num")

    @init_pod_num.setter
    def init_pod_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "init_pod_num", value)

    @property
    @pulumi.getter
    def liveness(self) -> Optional[pulumi.Input['WorkloadLivenessArgs']]:
        """
        liveness config.
        """
        return pulumi.get(self, "liveness")

    @liveness.setter
    def liveness(self, value: Optional[pulumi.Input['WorkloadLivenessArgs']]):
        pulumi.set(self, "liveness", value)

    @property
    @pulumi.getter(name="memorySpec")
    def memory_spec(self) -> Optional[pulumi.Input[float]]:
        """
        mem.
        """
        return pulumi.get(self, "memory_spec")

    @memory_spec.setter
    def memory_spec(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_spec", value)

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> Optional[pulumi.Input[str]]:
        """
        mem.
        """
        return pulumi.get(self, "post_start")

    @post_start.setter
    def post_start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_start", value)

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> Optional[pulumi.Input[str]]:
        """
        mem.
        """
        return pulumi.get(self, "pre_stop")

    @pre_stop.setter
    def pre_stop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_stop", value)

    @property
    @pulumi.getter
    def readiness(self) -> Optional[pulumi.Input['WorkloadReadinessArgs']]:
        """
        .
        """
        return pulumi.get(self, "readiness")

    @readiness.setter
    def readiness(self, value: Optional[pulumi.Input['WorkloadReadinessArgs']]):
        pulumi.set(self, "readiness", value)

    @property
    @pulumi.getter(name="repoServer")
    def repo_server(self) -> Optional[pulumi.Input[str]]:
        """
        repo server addr when deploy by image.
        """
        return pulumi.get(self, "repo_server")

    @repo_server.setter
    def repo_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_server", value)

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[int]]:
        """
        repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repo_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        security groups.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> Optional[pulumi.Input['WorkloadStartupProbeArgs']]:
        """
        .
        """
        return pulumi.get(self, "startup_probe")

    @startup_probe.setter
    def startup_probe(self, value: Optional[pulumi.Input['WorkloadStartupProbeArgs']]):
        pulumi.set(self, "startup_probe", value)

    @property
    @pulumi.getter(name="storageConfs")
    def storage_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]]]:
        """
        storage configuration.
        """
        return pulumi.get(self, "storage_confs")

    @storage_confs.setter
    def storage_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageConfArgs']]]]):
        pulumi.set(self, "storage_confs", value)

    @property
    @pulumi.getter(name="storageMountConfs")
    def storage_mount_confs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]]]:
        """
        storage mount configuration.
        """
        return pulumi.get(self, "storage_mount_confs")

    @storage_mount_confs.setter
    def storage_mount_confs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkloadStorageMountConfArgs']]]]):
        pulumi.set(self, "storage_mount_confs", value)

    @property
    @pulumi.getter(name="tcrInstanceId")
    def tcr_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        tcr instance id when deploy by image.
        """
        return pulumi.get(self, "tcr_instance_id")

    @tcr_instance_id.setter
    def tcr_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcr_instance_id", value)


class Workload(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cpu_spec: Optional[pulumi.Input[float]] = None,
                 deploy_mode: Optional[pulumi.Input[str]] = None,
                 deploy_strategy_conf: Optional[pulumi.Input[pulumi.InputType['WorkloadDeployStrategyConfArgs']]] = None,
                 deploy_version: Optional[pulumi.Input[str]] = None,
                 env_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadEnvConfArgs']]]]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 img_repo: Optional[pulumi.Input[str]] = None,
                 init_pod_num: Optional[pulumi.Input[int]] = None,
                 liveness: Optional[pulumi.Input[pulumi.InputType['WorkloadLivenessArgs']]] = None,
                 memory_spec: Optional[pulumi.Input[float]] = None,
                 post_start: Optional[pulumi.Input[str]] = None,
                 pre_stop: Optional[pulumi.Input[str]] = None,
                 readiness: Optional[pulumi.Input[pulumi.InputType['WorkloadReadinessArgs']]] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 startup_probe: Optional[pulumi.Input[pulumi.InputType['WorkloadStartupProbeArgs']]] = None,
                 storage_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageConfArgs']]]]] = None,
                 storage_mount_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageMountConfArgs']]]]] = None,
                 tcr_instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tem workload

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        workload = tencentcloud.tem.Workload("workload",
            application_id="app-j4d3x6kj",
            cpu_spec=1,
            deploy_mode="IMAGE",
            deploy_version="hello-world",
            environment_id="en-85377m6j",
            img_repo="tem_demo/tem_demo",
            init_pod_num=1,
            memory_spec=1,
            repo_server="ccr.ccs.tencentyun.com")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem workload can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/workload:Workload workload envirnomentId#applicationId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[float] cpu_spec: cpu.
        :param pulumi.Input[str] deploy_mode: deploy mode, support IMAGE.
        :param pulumi.Input[pulumi.InputType['WorkloadDeployStrategyConfArgs']] deploy_strategy_conf: deploy strategy.
        :param pulumi.Input[str] deploy_version: deploy version.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadEnvConfArgs']]]] env_confs: .
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] img_repo: repository name.
        :param pulumi.Input[int] init_pod_num: initial pod number.
        :param pulumi.Input[pulumi.InputType['WorkloadLivenessArgs']] liveness: liveness config.
        :param pulumi.Input[float] memory_spec: mem.
        :param pulumi.Input[str] post_start: mem.
        :param pulumi.Input[str] pre_stop: mem.
        :param pulumi.Input[pulumi.InputType['WorkloadReadinessArgs']] readiness: .
        :param pulumi.Input[str] repo_server: repo server addr when deploy by image.
        :param pulumi.Input[int] repo_type: repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: security groups.
        :param pulumi.Input[pulumi.InputType['WorkloadStartupProbeArgs']] startup_probe: .
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageConfArgs']]]] storage_confs: storage configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageMountConfArgs']]]] storage_mount_confs: storage mount configuration.
        :param pulumi.Input[str] tcr_instance_id: tcr instance id when deploy by image.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkloadArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tem workload

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        workload = tencentcloud.tem.Workload("workload",
            application_id="app-j4d3x6kj",
            cpu_spec=1,
            deploy_mode="IMAGE",
            deploy_version="hello-world",
            environment_id="en-85377m6j",
            img_repo="tem_demo/tem_demo",
            init_pod_num=1,
            memory_spec=1,
            repo_server="ccr.ccs.tencentyun.com")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem workload can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/workload:Workload workload envirnomentId#applicationId
        ```

        :param str resource_name: The name of the resource.
        :param WorkloadArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkloadArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 cpu_spec: Optional[pulumi.Input[float]] = None,
                 deploy_mode: Optional[pulumi.Input[str]] = None,
                 deploy_strategy_conf: Optional[pulumi.Input[pulumi.InputType['WorkloadDeployStrategyConfArgs']]] = None,
                 deploy_version: Optional[pulumi.Input[str]] = None,
                 env_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadEnvConfArgs']]]]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 img_repo: Optional[pulumi.Input[str]] = None,
                 init_pod_num: Optional[pulumi.Input[int]] = None,
                 liveness: Optional[pulumi.Input[pulumi.InputType['WorkloadLivenessArgs']]] = None,
                 memory_spec: Optional[pulumi.Input[float]] = None,
                 post_start: Optional[pulumi.Input[str]] = None,
                 pre_stop: Optional[pulumi.Input[str]] = None,
                 readiness: Optional[pulumi.Input[pulumi.InputType['WorkloadReadinessArgs']]] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 startup_probe: Optional[pulumi.Input[pulumi.InputType['WorkloadStartupProbeArgs']]] = None,
                 storage_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageConfArgs']]]]] = None,
                 storage_mount_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageMountConfArgs']]]]] = None,
                 tcr_instance_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkloadArgs.__new__(WorkloadArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if cpu_spec is None and not opts.urn:
                raise TypeError("Missing required property 'cpu_spec'")
            __props__.__dict__["cpu_spec"] = cpu_spec
            if deploy_mode is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_mode'")
            __props__.__dict__["deploy_mode"] = deploy_mode
            __props__.__dict__["deploy_strategy_conf"] = deploy_strategy_conf
            if deploy_version is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_version'")
            __props__.__dict__["deploy_version"] = deploy_version
            __props__.__dict__["env_confs"] = env_confs
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            if img_repo is None and not opts.urn:
                raise TypeError("Missing required property 'img_repo'")
            __props__.__dict__["img_repo"] = img_repo
            if init_pod_num is None and not opts.urn:
                raise TypeError("Missing required property 'init_pod_num'")
            __props__.__dict__["init_pod_num"] = init_pod_num
            __props__.__dict__["liveness"] = liveness
            if memory_spec is None and not opts.urn:
                raise TypeError("Missing required property 'memory_spec'")
            __props__.__dict__["memory_spec"] = memory_spec
            __props__.__dict__["post_start"] = post_start
            __props__.__dict__["pre_stop"] = pre_stop
            __props__.__dict__["readiness"] = readiness
            __props__.__dict__["repo_server"] = repo_server
            __props__.__dict__["repo_type"] = repo_type
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["startup_probe"] = startup_probe
            __props__.__dict__["storage_confs"] = storage_confs
            __props__.__dict__["storage_mount_confs"] = storage_mount_confs
            __props__.__dict__["tcr_instance_id"] = tcr_instance_id
        super(Workload, __self__).__init__(
            'tencentcloud:Tem/workload:Workload',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            cpu_spec: Optional[pulumi.Input[float]] = None,
            deploy_mode: Optional[pulumi.Input[str]] = None,
            deploy_strategy_conf: Optional[pulumi.Input[pulumi.InputType['WorkloadDeployStrategyConfArgs']]] = None,
            deploy_version: Optional[pulumi.Input[str]] = None,
            env_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadEnvConfArgs']]]]] = None,
            environment_id: Optional[pulumi.Input[str]] = None,
            img_repo: Optional[pulumi.Input[str]] = None,
            init_pod_num: Optional[pulumi.Input[int]] = None,
            liveness: Optional[pulumi.Input[pulumi.InputType['WorkloadLivenessArgs']]] = None,
            memory_spec: Optional[pulumi.Input[float]] = None,
            post_start: Optional[pulumi.Input[str]] = None,
            pre_stop: Optional[pulumi.Input[str]] = None,
            readiness: Optional[pulumi.Input[pulumi.InputType['WorkloadReadinessArgs']]] = None,
            repo_server: Optional[pulumi.Input[str]] = None,
            repo_type: Optional[pulumi.Input[int]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            startup_probe: Optional[pulumi.Input[pulumi.InputType['WorkloadStartupProbeArgs']]] = None,
            storage_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageConfArgs']]]]] = None,
            storage_mount_confs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageMountConfArgs']]]]] = None,
            tcr_instance_id: Optional[pulumi.Input[str]] = None) -> 'Workload':
        """
        Get an existing Workload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[float] cpu_spec: cpu.
        :param pulumi.Input[str] deploy_mode: deploy mode, support IMAGE.
        :param pulumi.Input[pulumi.InputType['WorkloadDeployStrategyConfArgs']] deploy_strategy_conf: deploy strategy.
        :param pulumi.Input[str] deploy_version: deploy version.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadEnvConfArgs']]]] env_confs: .
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] img_repo: repository name.
        :param pulumi.Input[int] init_pod_num: initial pod number.
        :param pulumi.Input[pulumi.InputType['WorkloadLivenessArgs']] liveness: liveness config.
        :param pulumi.Input[float] memory_spec: mem.
        :param pulumi.Input[str] post_start: mem.
        :param pulumi.Input[str] pre_stop: mem.
        :param pulumi.Input[pulumi.InputType['WorkloadReadinessArgs']] readiness: .
        :param pulumi.Input[str] repo_server: repo server addr when deploy by image.
        :param pulumi.Input[int] repo_type: repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: security groups.
        :param pulumi.Input[pulumi.InputType['WorkloadStartupProbeArgs']] startup_probe: .
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageConfArgs']]]] storage_confs: storage configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['WorkloadStorageMountConfArgs']]]] storage_mount_confs: storage mount configuration.
        :param pulumi.Input[str] tcr_instance_id: tcr instance id when deploy by image.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkloadState.__new__(_WorkloadState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["cpu_spec"] = cpu_spec
        __props__.__dict__["deploy_mode"] = deploy_mode
        __props__.__dict__["deploy_strategy_conf"] = deploy_strategy_conf
        __props__.__dict__["deploy_version"] = deploy_version
        __props__.__dict__["env_confs"] = env_confs
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["img_repo"] = img_repo
        __props__.__dict__["init_pod_num"] = init_pod_num
        __props__.__dict__["liveness"] = liveness
        __props__.__dict__["memory_spec"] = memory_spec
        __props__.__dict__["post_start"] = post_start
        __props__.__dict__["pre_stop"] = pre_stop
        __props__.__dict__["readiness"] = readiness
        __props__.__dict__["repo_server"] = repo_server
        __props__.__dict__["repo_type"] = repo_type
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["startup_probe"] = startup_probe
        __props__.__dict__["storage_confs"] = storage_confs
        __props__.__dict__["storage_mount_confs"] = storage_mount_confs
        __props__.__dict__["tcr_instance_id"] = tcr_instance_id
        return Workload(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="cpuSpec")
    def cpu_spec(self) -> pulumi.Output[float]:
        """
        cpu.
        """
        return pulumi.get(self, "cpu_spec")

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> pulumi.Output[str]:
        """
        deploy mode, support IMAGE.
        """
        return pulumi.get(self, "deploy_mode")

    @property
    @pulumi.getter(name="deployStrategyConf")
    def deploy_strategy_conf(self) -> pulumi.Output[Optional['outputs.WorkloadDeployStrategyConf']]:
        """
        deploy strategy.
        """
        return pulumi.get(self, "deploy_strategy_conf")

    @property
    @pulumi.getter(name="deployVersion")
    def deploy_version(self) -> pulumi.Output[str]:
        """
        deploy version.
        """
        return pulumi.get(self, "deploy_version")

    @property
    @pulumi.getter(name="envConfs")
    def env_confs(self) -> pulumi.Output[Sequence['outputs.WorkloadEnvConf']]:
        """
        .
        """
        return pulumi.get(self, "env_confs")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[str]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter(name="imgRepo")
    def img_repo(self) -> pulumi.Output[str]:
        """
        repository name.
        """
        return pulumi.get(self, "img_repo")

    @property
    @pulumi.getter(name="initPodNum")
    def init_pod_num(self) -> pulumi.Output[int]:
        """
        initial pod number.
        """
        return pulumi.get(self, "init_pod_num")

    @property
    @pulumi.getter
    def liveness(self) -> pulumi.Output[Optional['outputs.WorkloadLiveness']]:
        """
        liveness config.
        """
        return pulumi.get(self, "liveness")

    @property
    @pulumi.getter(name="memorySpec")
    def memory_spec(self) -> pulumi.Output[float]:
        """
        mem.
        """
        return pulumi.get(self, "memory_spec")

    @property
    @pulumi.getter(name="postStart")
    def post_start(self) -> pulumi.Output[Optional[str]]:
        """
        mem.
        """
        return pulumi.get(self, "post_start")

    @property
    @pulumi.getter(name="preStop")
    def pre_stop(self) -> pulumi.Output[Optional[str]]:
        """
        mem.
        """
        return pulumi.get(self, "pre_stop")

    @property
    @pulumi.getter
    def readiness(self) -> pulumi.Output[Optional['outputs.WorkloadReadiness']]:
        """
        .
        """
        return pulumi.get(self, "readiness")

    @property
    @pulumi.getter(name="repoServer")
    def repo_server(self) -> pulumi.Output[Optional[str]]:
        """
        repo server addr when deploy by image.
        """
        return pulumi.get(self, "repo_server")

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> pulumi.Output[Optional[int]]:
        """
        repo type when deploy: 0: tcr personal; 1: tcr enterprise; 2: public repository; 3: tem host tcr; 4: demo repo.
        """
        return pulumi.get(self, "repo_type")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        security groups.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="startupProbe")
    def startup_probe(self) -> pulumi.Output[Optional['outputs.WorkloadStartupProbe']]:
        """
        .
        """
        return pulumi.get(self, "startup_probe")

    @property
    @pulumi.getter(name="storageConfs")
    def storage_confs(self) -> pulumi.Output[Optional[Sequence['outputs.WorkloadStorageConf']]]:
        """
        storage configuration.
        """
        return pulumi.get(self, "storage_confs")

    @property
    @pulumi.getter(name="storageMountConfs")
    def storage_mount_confs(self) -> pulumi.Output[Optional[Sequence['outputs.WorkloadStorageMountConf']]]:
        """
        storage mount configuration.
        """
        return pulumi.get(self, "storage_mount_confs")

    @property
    @pulumi.getter(name="tcrInstanceId")
    def tcr_instance_id(self) -> pulumi.Output[Optional[str]]:
        """
        tcr instance id when deploy by image.
        """
        return pulumi.get(self, "tcr_instance_id")

