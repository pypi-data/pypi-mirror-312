# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AppConfigConfigDataArgs',
    'ApplicationServiceServiceArgs',
    'ApplicationServiceServicePortMappingItemListArgs',
    'GatewayIngressArgs',
    'GatewayIngressRuleArgs',
    'GatewayIngressRuleHttpArgs',
    'GatewayIngressRuleHttpPathArgs',
    'GatewayIngressRuleHttpPathBackendArgs',
    'GatewayIngressTlArgs',
    'ScaleRuleAutoscalerArgs',
    'ScaleRuleAutoscalerCronHorizontalAutoscalerArgs',
    'ScaleRuleAutoscalerCronHorizontalAutoscalerScheduleArgs',
    'ScaleRuleAutoscalerHorizontalAutoscalerArgs',
    'WorkloadDeployStrategyConfArgs',
    'WorkloadEnvConfArgs',
    'WorkloadLivenessArgs',
    'WorkloadReadinessArgs',
    'WorkloadStartupProbeArgs',
    'WorkloadStorageConfArgs',
    'WorkloadStorageMountConfArgs',
]

@pulumi.input_type
class AppConfigConfigDataArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: key.
        :param pulumi.Input[str] value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ApplicationServiceServiceArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port_mapping_item_lists: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceServicePortMappingItemListArgs']]]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: ip address of application service.
        :param pulumi.Input[Sequence[pulumi.Input['ApplicationServiceServicePortMappingItemListArgs']]] port_mapping_item_lists: port mapping item list.
        :param pulumi.Input[str] service_name: application service name.
        :param pulumi.Input[str] subnet_id: ID of subnet instance, required when type is `VPC`.
        :param pulumi.Input[str] type: application service type: EXTERNAL | VPC | CLUSTER.
        :param pulumi.Input[str] vpc_id: ID of vpc instance, required when type is `VPC`.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port_mapping_item_lists is not None:
            pulumi.set(__self__, "port_mapping_item_lists", port_mapping_item_lists)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        ip address of application service.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="portMappingItemLists")
    def port_mapping_item_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceServicePortMappingItemListArgs']]]]:
        """
        port mapping item list.
        """
        return pulumi.get(self, "port_mapping_item_lists")

    @port_mapping_item_lists.setter
    def port_mapping_item_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationServiceServicePortMappingItemListArgs']]]]):
        pulumi.set(self, "port_mapping_item_lists", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        application service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of subnet instance, required when type is `VPC`.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        application service type: EXTERNAL | VPC | CLUSTER.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of vpc instance, required when type is `VPC`.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class ApplicationServiceServicePortMappingItemListArgs:
    def __init__(__self__, *,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 target_port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] port: container port.
        :param pulumi.Input[str] protocol: UDP or TCP.
        :param pulumi.Input[int] target_port: application listen port.
        """
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        container port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        UDP or TCP.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[pulumi.Input[int]]:
        """
        application listen port.
        """
        return pulumi.get(self, "target_port")

    @target_port.setter
    def target_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_port", value)


@pulumi.input_type
class GatewayIngressArgs:
    def __init__(__self__, *,
                 address_ip_version: pulumi.Input[str],
                 environment_id: pulumi.Input[str],
                 ingress_name: pulumi.Input[str],
                 mixed: pulumi.Input[bool],
                 rules: pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleArgs']]],
                 clb_id: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 rewrite_type: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayIngressTlArgs']]]] = None,
                 vip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] address_ip_version: ip version, support IPV4.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[str] ingress_name: gateway name.
        :param pulumi.Input[bool] mixed: mixing HTTP and HTTPS.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleArgs']]] rules: proxy rules.
        :param pulumi.Input[str] clb_id: related CLB ID, support binding existing clb, does not support modification.
        :param pulumi.Input[str] create_time: creation time.
        :param pulumi.Input[str] rewrite_type: redirect mode, support AUTO and NONE.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayIngressTlArgs']]] tls: ingress TLS configurations.
        :param pulumi.Input[str] vip: gateway vip.
        """
        pulumi.set(__self__, "address_ip_version", address_ip_version)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "ingress_name", ingress_name)
        pulumi.set(__self__, "mixed", mixed)
        pulumi.set(__self__, "rules", rules)
        if clb_id is not None:
            pulumi.set(__self__, "clb_id", clb_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if rewrite_type is not None:
            pulumi.set(__self__, "rewrite_type", rewrite_type)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter(name="addressIpVersion")
    def address_ip_version(self) -> pulumi.Input[str]:
        """
        ip version, support IPV4.
        """
        return pulumi.get(self, "address_ip_version")

    @address_ip_version.setter
    def address_ip_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_ip_version", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter(name="ingressName")
    def ingress_name(self) -> pulumi.Input[str]:
        """
        gateway name.
        """
        return pulumi.get(self, "ingress_name")

    @ingress_name.setter
    def ingress_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "ingress_name", value)

    @property
    @pulumi.getter
    def mixed(self) -> pulumi.Input[bool]:
        """
        mixing HTTP and HTTPS.
        """
        return pulumi.get(self, "mixed")

    @mixed.setter
    def mixed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "mixed", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleArgs']]]:
        """
        proxy rules.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="clbId")
    def clb_id(self) -> Optional[pulumi.Input[str]]:
        """
        related CLB ID, support binding existing clb, does not support modification.
        """
        return pulumi.get(self, "clb_id")

    @clb_id.setter
    def clb_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clb_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        creation time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="rewriteType")
    def rewrite_type(self) -> Optional[pulumi.Input[str]]:
        """
        redirect mode, support AUTO and NONE.
        """
        return pulumi.get(self, "rewrite_type")

    @rewrite_type.setter
    def rewrite_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rewrite_type", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayIngressTlArgs']]]]:
        """
        ingress TLS configurations.
        """
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayIngressTlArgs']]]]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        gateway vip.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)


@pulumi.input_type
class GatewayIngressRuleArgs:
    def __init__(__self__, *,
                 http: pulumi.Input['GatewayIngressRuleHttpArgs'],
                 host: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['GatewayIngressRuleHttpArgs'] http: rule payload.
        :param pulumi.Input[str] host: host name.
        :param pulumi.Input[str] protocol: protocol.
        """
        pulumi.set(__self__, "http", http)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def http(self) -> pulumi.Input['GatewayIngressRuleHttpArgs']:
        """
        rule payload.
        """
        return pulumi.get(self, "http")

    @http.setter
    def http(self, value: pulumi.Input['GatewayIngressRuleHttpArgs']):
        pulumi.set(self, "http", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        host name.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class GatewayIngressRuleHttpArgs:
    def __init__(__self__, *,
                 paths: pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleHttpPathArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleHttpPathArgs']]] paths: path payload.
        """
        pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter
    def paths(self) -> pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleHttpPathArgs']]]:
        """
        path payload.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: pulumi.Input[Sequence[pulumi.Input['GatewayIngressRuleHttpPathArgs']]]):
        pulumi.set(self, "paths", value)


@pulumi.input_type
class GatewayIngressRuleHttpPathArgs:
    def __init__(__self__, *,
                 backend: pulumi.Input['GatewayIngressRuleHttpPathBackendArgs'],
                 path: pulumi.Input[str]):
        """
        :param pulumi.Input['GatewayIngressRuleHttpPathBackendArgs'] backend: backend payload.
        :param pulumi.Input[str] path: path.
        """
        pulumi.set(__self__, "backend", backend)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def backend(self) -> pulumi.Input['GatewayIngressRuleHttpPathBackendArgs']:
        """
        backend payload.
        """
        return pulumi.get(self, "backend")

    @backend.setter
    def backend(self, value: pulumi.Input['GatewayIngressRuleHttpPathBackendArgs']):
        pulumi.set(self, "backend", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class GatewayIngressRuleHttpPathBackendArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str],
                 service_port: pulumi.Input[int]):
        """
        :param pulumi.Input[str] service_name: backend name.
        :param pulumi.Input[int] service_port: backend port.
        """
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_port", service_port)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        backend name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="servicePort")
    def service_port(self) -> pulumi.Input[int]:
        """
        backend port.
        """
        return pulumi.get(self, "service_port")

    @service_port.setter
    def service_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "service_port", value)


@pulumi.input_type
class GatewayIngressTlArgs:
    def __init__(__self__, *,
                 certificate_id: pulumi.Input[str],
                 hosts: pulumi.Input[Sequence[pulumi.Input[str]]],
                 secret_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] certificate_id: certificate ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: host names.
        :param pulumi.Input[str] secret_name: secret name, if you use a certificate, you don't need to fill in this field.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "hosts", hosts)
        if secret_name is not None:
            pulumi.set(__self__, "secret_name", secret_name)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Input[str]:
        """
        certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        host names.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        secret name, if you use a certificate, you don't need to fill in this field.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_name", value)


@pulumi.input_type
class ScaleRuleAutoscalerArgs:
    def __init__(__self__, *,
                 autoscaler_name: pulumi.Input[str],
                 enabled: pulumi.Input[bool],
                 max_replicas: pulumi.Input[int],
                 min_replicas: pulumi.Input[int],
                 cron_horizontal_autoscalers: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 horizontal_autoscalers: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerHorizontalAutoscalerArgs']]]] = None):
        """
        :param pulumi.Input[str] autoscaler_name: name.
        :param pulumi.Input[bool] enabled: enable AutoScaler.
        :param pulumi.Input[int] max_replicas: maximal replica number.
        :param pulumi.Input[int] min_replicas: minimal replica number.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerArgs']]] cron_horizontal_autoscalers: scaler based on cron configuration.
        :param pulumi.Input[str] description: description.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerHorizontalAutoscalerArgs']]] horizontal_autoscalers: scaler based on metrics.
        """
        pulumi.set(__self__, "autoscaler_name", autoscaler_name)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "min_replicas", min_replicas)
        if cron_horizontal_autoscalers is not None:
            pulumi.set(__self__, "cron_horizontal_autoscalers", cron_horizontal_autoscalers)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if horizontal_autoscalers is not None:
            pulumi.set(__self__, "horizontal_autoscalers", horizontal_autoscalers)

    @property
    @pulumi.getter(name="autoscalerName")
    def autoscaler_name(self) -> pulumi.Input[str]:
        """
        name.
        """
        return pulumi.get(self, "autoscaler_name")

    @autoscaler_name.setter
    def autoscaler_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "autoscaler_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        enable AutoScaler.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[int]:
        """
        maximal replica number.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[int]:
        """
        minimal replica number.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter(name="cronHorizontalAutoscalers")
    def cron_horizontal_autoscalers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerArgs']]]]:
        """
        scaler based on cron configuration.
        """
        return pulumi.get(self, "cron_horizontal_autoscalers")

    @cron_horizontal_autoscalers.setter
    def cron_horizontal_autoscalers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerArgs']]]]):
        pulumi.set(self, "cron_horizontal_autoscalers", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="horizontalAutoscalers")
    def horizontal_autoscalers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerHorizontalAutoscalerArgs']]]]:
        """
        scaler based on metrics.
        """
        return pulumi.get(self, "horizontal_autoscalers")

    @horizontal_autoscalers.setter
    def horizontal_autoscalers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerHorizontalAutoscalerArgs']]]]):
        pulumi.set(self, "horizontal_autoscalers", value)


@pulumi.input_type
class ScaleRuleAutoscalerCronHorizontalAutoscalerArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 name: pulumi.Input[str],
                 period: pulumi.Input[str],
                 priority: pulumi.Input[int],
                 schedules: pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerScheduleArgs']]]):
        """
        :param pulumi.Input[bool] enabled: enable scaler.
        :param pulumi.Input[str] name: name.
        :param pulumi.Input[str] period: period.
        :param pulumi.Input[int] priority: priority.
        :param pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerScheduleArgs']]] schedules: schedule payload.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "schedules", schedules)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        enable scaler.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[str]:
        """
        period.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[str]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def schedules(self) -> pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerScheduleArgs']]]:
        """
        schedule payload.
        """
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: pulumi.Input[Sequence[pulumi.Input['ScaleRuleAutoscalerCronHorizontalAutoscalerScheduleArgs']]]):
        pulumi.set(self, "schedules", value)


@pulumi.input_type
class ScaleRuleAutoscalerCronHorizontalAutoscalerScheduleArgs:
    def __init__(__self__, *,
                 start_at: pulumi.Input[str],
                 target_replicas: pulumi.Input[int]):
        """
        :param pulumi.Input[str] start_at: start time.
        :param pulumi.Input[int] target_replicas: target replica number.
        """
        pulumi.set(__self__, "start_at", start_at)
        pulumi.set(__self__, "target_replicas", target_replicas)

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> pulumi.Input[str]:
        """
        start time.
        """
        return pulumi.get(self, "start_at")

    @start_at.setter
    def start_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_at", value)

    @property
    @pulumi.getter(name="targetReplicas")
    def target_replicas(self) -> pulumi.Input[int]:
        """
        target replica number.
        """
        return pulumi.get(self, "target_replicas")

    @target_replicas.setter
    def target_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "target_replicas", value)


@pulumi.input_type
class ScaleRuleAutoscalerHorizontalAutoscalerArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 max_replicas: pulumi.Input[int],
                 metrics: pulumi.Input[str],
                 min_replicas: pulumi.Input[int],
                 threshold: pulumi.Input[int]):
        """
        :param pulumi.Input[bool] enabled: enable scaler.
        :param pulumi.Input[int] max_replicas: maximal replica number.
        :param pulumi.Input[str] metrics: metric name.
        :param pulumi.Input[int] min_replicas: minimal replica number.
        :param pulumi.Input[int] threshold: metric threshold.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "min_replicas", min_replicas)
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        enable scaler.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> pulumi.Input[int]:
        """
        maximal replica number.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter
    def metrics(self) -> pulumi.Input[str]:
        """
        metric name.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: pulumi.Input[str]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="minReplicas")
    def min_replicas(self) -> pulumi.Input[int]:
        """
        minimal replica number.
        """
        return pulumi.get(self, "min_replicas")

    @min_replicas.setter
    def min_replicas(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_replicas", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[int]:
        """
        metric threshold.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class WorkloadDeployStrategyConfArgs:
    def __init__(__self__, *,
                 deploy_strategy_type: pulumi.Input[int],
                 total_batch_count: pulumi.Input[int],
                 batch_interval: Optional[pulumi.Input[int]] = None,
                 beta_batch_num: Optional[pulumi.Input[int]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 min_available: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] deploy_strategy_type: strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
        :param pulumi.Input[int] total_batch_count: total batch number.
        :param pulumi.Input[int] batch_interval: interval between batches.
        :param pulumi.Input[int] beta_batch_num: beta batch number.
        :param pulumi.Input[bool] force: force update.
        :param pulumi.Input[int] min_available: minimal available instances duration deployment.
        """
        pulumi.set(__self__, "deploy_strategy_type", deploy_strategy_type)
        pulumi.set(__self__, "total_batch_count", total_batch_count)
        if batch_interval is not None:
            pulumi.set(__self__, "batch_interval", batch_interval)
        if beta_batch_num is not None:
            pulumi.set(__self__, "beta_batch_num", beta_batch_num)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if min_available is not None:
            pulumi.set(__self__, "min_available", min_available)

    @property
    @pulumi.getter(name="deployStrategyType")
    def deploy_strategy_type(self) -> pulumi.Input[int]:
        """
        strategy type, 0 means auto, 1 means manual, 2 means manual with beta batch.
        """
        return pulumi.get(self, "deploy_strategy_type")

    @deploy_strategy_type.setter
    def deploy_strategy_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "deploy_strategy_type", value)

    @property
    @pulumi.getter(name="totalBatchCount")
    def total_batch_count(self) -> pulumi.Input[int]:
        """
        total batch number.
        """
        return pulumi.get(self, "total_batch_count")

    @total_batch_count.setter
    def total_batch_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "total_batch_count", value)

    @property
    @pulumi.getter(name="batchInterval")
    def batch_interval(self) -> Optional[pulumi.Input[int]]:
        """
        interval between batches.
        """
        return pulumi.get(self, "batch_interval")

    @batch_interval.setter
    def batch_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_interval", value)

    @property
    @pulumi.getter(name="betaBatchNum")
    def beta_batch_num(self) -> Optional[pulumi.Input[int]]:
        """
        beta batch number.
        """
        return pulumi.get(self, "beta_batch_num")

    @beta_batch_num.setter
    def beta_batch_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "beta_batch_num", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        force update.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="minAvailable")
    def min_available(self) -> Optional[pulumi.Input[int]]:
        """
        minimal available instances duration deployment.
        """
        return pulumi.get(self, "min_available")

    @min_available.setter
    def min_available(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_available", value)


@pulumi.input_type
class WorkloadEnvConfArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str],
                 config: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: env key.
        :param pulumi.Input[str] value: env value.
        :param pulumi.Input[str] config: referenced config name when type=referenced.
        :param pulumi.Input[str] secret: referenced secret name when type=referenced.
        :param pulumi.Input[str] type: env type, support default, referenced.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        env key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        env value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        referenced config name when type=referenced.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        referenced secret name when type=referenced.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        env type, support default, referenced.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class WorkloadLivenessArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 exec_: Optional[pulumi.Input[str]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: check type, support HttpGet, TcpSocket and Exec.
        :param pulumi.Input[str] exec_: script.
        :param pulumi.Input[int] initial_delay_seconds: initial delay seconds for liveness check.
        :param pulumi.Input[str] path: path.
        :param pulumi.Input[int] period_seconds: period seconds for liveness check.
        :param pulumi.Input[int] port: liveness check port.
        :param pulumi.Input[str] protocol: protocol.
        :param pulumi.Input[int] timeout_seconds: timeout seconds for liveness check.
        """
        pulumi.set(__self__, "type", type)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        check type, support HttpGet, TcpSocket and Exec.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input[str]]:
        """
        script.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        initial delay seconds for liveness check.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        period seconds for liveness check.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        liveness check port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        timeout seconds for liveness check.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadReadinessArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 exec_: Optional[pulumi.Input[str]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: check type, support HttpGet, TcpSocket and Exec.
        :param pulumi.Input[str] exec_: script.
        :param pulumi.Input[int] initial_delay_seconds: initial delay seconds for readiness check.
        :param pulumi.Input[str] path: path.
        :param pulumi.Input[int] period_seconds: period seconds for readiness check.
        :param pulumi.Input[int] port: readiness check port.
        :param pulumi.Input[str] protocol: protocol.
        :param pulumi.Input[int] timeout_seconds: timeout seconds for readiness check.
        """
        pulumi.set(__self__, "type", type)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        check type, support HttpGet, TcpSocket and Exec.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input[str]]:
        """
        script.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        initial delay seconds for readiness check.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        period seconds for readiness check.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        readiness check port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        timeout seconds for readiness check.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadStartupProbeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 exec_: Optional[pulumi.Input[str]] = None,
                 initial_delay_seconds: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 timeout_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: check type, support HttpGet, TcpSocket and Exec.
        :param pulumi.Input[str] exec_: script.
        :param pulumi.Input[int] initial_delay_seconds: initial delay seconds for startup check.
        :param pulumi.Input[str] path: path.
        :param pulumi.Input[int] period_seconds: period seconds for startup check.
        :param pulumi.Input[int] port: startup check port.
        :param pulumi.Input[str] protocol: protocol.
        :param pulumi.Input[int] timeout_seconds: timeout seconds for startup check.
        """
        pulumi.set(__self__, "type", type)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if initial_delay_seconds is not None:
            pulumi.set(__self__, "initial_delay_seconds", initial_delay_seconds)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout_seconds is not None:
            pulumi.set(__self__, "timeout_seconds", timeout_seconds)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        check type, support HttpGet, TcpSocket and Exec.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input[str]]:
        """
        script.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter(name="initialDelaySeconds")
    def initial_delay_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        initial delay seconds for startup check.
        """
        return pulumi.get(self, "initial_delay_seconds")

    @initial_delay_seconds.setter
    def initial_delay_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_delay_seconds", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        period seconds for startup check.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        startup check port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        protocol.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="timeoutSeconds")
    def timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        timeout seconds for startup check.
        """
        return pulumi.get(self, "timeout_seconds")

    @timeout_seconds.setter
    def timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_seconds", value)


@pulumi.input_type
class WorkloadStorageConfArgs:
    def __init__(__self__, *,
                 storage_vol_ip: pulumi.Input[str],
                 storage_vol_name: pulumi.Input[str],
                 storage_vol_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] storage_vol_ip: volume ip.
        :param pulumi.Input[str] storage_vol_name: volume name.
        :param pulumi.Input[str] storage_vol_path: volume path.
        """
        pulumi.set(__self__, "storage_vol_ip", storage_vol_ip)
        pulumi.set(__self__, "storage_vol_name", storage_vol_name)
        pulumi.set(__self__, "storage_vol_path", storage_vol_path)

    @property
    @pulumi.getter(name="storageVolIp")
    def storage_vol_ip(self) -> pulumi.Input[str]:
        """
        volume ip.
        """
        return pulumi.get(self, "storage_vol_ip")

    @storage_vol_ip.setter
    def storage_vol_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_vol_ip", value)

    @property
    @pulumi.getter(name="storageVolName")
    def storage_vol_name(self) -> pulumi.Input[str]:
        """
        volume name.
        """
        return pulumi.get(self, "storage_vol_name")

    @storage_vol_name.setter
    def storage_vol_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_vol_name", value)

    @property
    @pulumi.getter(name="storageVolPath")
    def storage_vol_path(self) -> pulumi.Input[str]:
        """
        volume path.
        """
        return pulumi.get(self, "storage_vol_path")

    @storage_vol_path.setter
    def storage_vol_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_vol_path", value)


@pulumi.input_type
class WorkloadStorageMountConfArgs:
    def __init__(__self__, *,
                 mount_path: pulumi.Input[str],
                 volume_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] mount_path: mount path.
        :param pulumi.Input[str] volume_name: volume name.
        """
        pulumi.set(__self__, "mount_path", mount_path)
        pulumi.set(__self__, "volume_name", volume_name)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> pulumi.Input[str]:
        """
        mount path.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "mount_path", value)

    @property
    @pulumi.getter(name="volumeName")
    def volume_name(self) -> pulumi.Input[str]:
        """
        volume name.
        """
        return pulumi.get(self, "volume_name")

    @volume_name.setter
    def volume_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_name", value)


