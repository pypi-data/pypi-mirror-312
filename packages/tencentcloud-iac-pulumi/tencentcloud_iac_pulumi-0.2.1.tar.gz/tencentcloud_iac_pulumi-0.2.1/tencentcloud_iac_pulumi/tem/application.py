# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ApplicationArgs', 'Application']

@pulumi.input_type
class ApplicationArgs:
    def __init__(__self__, *,
                 application_name: pulumi.Input[str],
                 coding_language: pulumi.Input[str],
                 description: pulumi.Input[str],
                 instance_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 use_default_image_service: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Application resource.
        :param pulumi.Input[str] application_name: application name.
        :param pulumi.Input[str] coding_language: program language, like JAVA.
        :param pulumi.Input[str] description: application description.
        :param pulumi.Input[str] instance_id: tcr instance id.
        :param pulumi.Input[str] repo_name: repository name.
        :param pulumi.Input[str] repo_server: registry address.
        :param pulumi.Input[int] repo_type: repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
        :param pulumi.Input[Mapping[str, Any]] tags: application tag list.
        :param pulumi.Input[int] use_default_image_service: create image repo or not.
        """
        pulumi.set(__self__, "application_name", application_name)
        pulumi.set(__self__, "coding_language", coding_language)
        pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if repo_server is not None:
            pulumi.set(__self__, "repo_server", repo_server)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if use_default_image_service is not None:
            pulumi.set(__self__, "use_default_image_service", use_default_image_service)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Input[str]:
        """
        application name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="codingLanguage")
    def coding_language(self) -> pulumi.Input[str]:
        """
        program language, like JAVA.
        """
        return pulumi.get(self, "coding_language")

    @coding_language.setter
    def coding_language(self, value: pulumi.Input[str]):
        pulumi.set(self, "coding_language", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        application description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        tcr instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        repository name.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="repoServer")
    def repo_server(self) -> Optional[pulumi.Input[str]]:
        """
        registry address.
        """
        return pulumi.get(self, "repo_server")

    @repo_server.setter
    def repo_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_server", value)

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[int]]:
        """
        repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repo_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        application tag list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useDefaultImageService")
    def use_default_image_service(self) -> Optional[pulumi.Input[int]]:
        """
        create image repo or not.
        """
        return pulumi.get(self, "use_default_image_service")

    @use_default_image_service.setter
    def use_default_image_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "use_default_image_service", value)


@pulumi.input_type
class _ApplicationState:
    def __init__(__self__, *,
                 application_name: Optional[pulumi.Input[str]] = None,
                 coding_language: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 use_default_image_service: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Application resources.
        :param pulumi.Input[str] application_name: application name.
        :param pulumi.Input[str] coding_language: program language, like JAVA.
        :param pulumi.Input[str] description: application description.
        :param pulumi.Input[str] instance_id: tcr instance id.
        :param pulumi.Input[str] repo_name: repository name.
        :param pulumi.Input[str] repo_server: registry address.
        :param pulumi.Input[int] repo_type: repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
        :param pulumi.Input[Mapping[str, Any]] tags: application tag list.
        :param pulumi.Input[int] use_default_image_service: create image repo or not.
        """
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if coding_language is not None:
            pulumi.set(__self__, "coding_language", coding_language)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if repo_server is not None:
            pulumi.set(__self__, "repo_server", repo_server)
        if repo_type is not None:
            pulumi.set(__self__, "repo_type", repo_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if use_default_image_service is not None:
            pulumi.set(__self__, "use_default_image_service", use_default_image_service)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[pulumi.Input[str]]:
        """
        application name.
        """
        return pulumi.get(self, "application_name")

    @application_name.setter
    def application_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_name", value)

    @property
    @pulumi.getter(name="codingLanguage")
    def coding_language(self) -> Optional[pulumi.Input[str]]:
        """
        program language, like JAVA.
        """
        return pulumi.get(self, "coding_language")

    @coding_language.setter
    def coding_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coding_language", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        application description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        tcr instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        repository name.
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="repoServer")
    def repo_server(self) -> Optional[pulumi.Input[str]]:
        """
        registry address.
        """
        return pulumi.get(self, "repo_server")

    @repo_server.setter
    def repo_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_server", value)

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> Optional[pulumi.Input[int]]:
        """
        repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
        """
        return pulumi.get(self, "repo_type")

    @repo_type.setter
    def repo_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "repo_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        application tag list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="useDefaultImageService")
    def use_default_image_service(self) -> Optional[pulumi.Input[int]]:
        """
        create image repo or not.
        """
        return pulumi.get(self, "use_default_image_service")

    @use_default_image_service.setter
    def use_default_image_service(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "use_default_image_service", value)


class Application(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 coding_language: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 use_default_image_service: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a tem application

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application = tencentcloud.tem.Application("application",
            application_name="demo",
            coding_language="JAVA",
            description="demo for test",
            repo_name="qcloud/nginx",
            repo_server="ccr.ccs.tencentyun.com",
            repo_type=2,
            tags={
                "created": "terraform",
            },
            use_default_image_service=0)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_name: application name.
        :param pulumi.Input[str] coding_language: program language, like JAVA.
        :param pulumi.Input[str] description: application description.
        :param pulumi.Input[str] instance_id: tcr instance id.
        :param pulumi.Input[str] repo_name: repository name.
        :param pulumi.Input[str] repo_server: registry address.
        :param pulumi.Input[int] repo_type: repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
        :param pulumi.Input[Mapping[str, Any]] tags: application tag list.
        :param pulumi.Input[int] use_default_image_service: create image repo or not.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tem application

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application = tencentcloud.tem.Application("application",
            application_name="demo",
            coding_language="JAVA",
            description="demo for test",
            repo_name="qcloud/nginx",
            repo_server="ccr.ccs.tencentyun.com",
            repo_type=2,
            tags={
                "created": "terraform",
            },
            use_default_image_service=0)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ApplicationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_name: Optional[pulumi.Input[str]] = None,
                 coding_language: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 repo_server: Optional[pulumi.Input[str]] = None,
                 repo_type: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 use_default_image_service: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationArgs.__new__(ApplicationArgs)

            if application_name is None and not opts.urn:
                raise TypeError("Missing required property 'application_name'")
            __props__.__dict__["application_name"] = application_name
            if coding_language is None and not opts.urn:
                raise TypeError("Missing required property 'coding_language'")
            __props__.__dict__["coding_language"] = coding_language
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["repo_name"] = repo_name
            __props__.__dict__["repo_server"] = repo_server
            __props__.__dict__["repo_type"] = repo_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["use_default_image_service"] = use_default_image_service
        super(Application, __self__).__init__(
            'tencentcloud:Tem/application:Application',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_name: Optional[pulumi.Input[str]] = None,
            coding_language: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            repo_name: Optional[pulumi.Input[str]] = None,
            repo_server: Optional[pulumi.Input[str]] = None,
            repo_type: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            use_default_image_service: Optional[pulumi.Input[int]] = None) -> 'Application':
        """
        Get an existing Application resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_name: application name.
        :param pulumi.Input[str] coding_language: program language, like JAVA.
        :param pulumi.Input[str] description: application description.
        :param pulumi.Input[str] instance_id: tcr instance id.
        :param pulumi.Input[str] repo_name: repository name.
        :param pulumi.Input[str] repo_server: registry address.
        :param pulumi.Input[int] repo_type: repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
        :param pulumi.Input[Mapping[str, Any]] tags: application tag list.
        :param pulumi.Input[int] use_default_image_service: create image repo or not.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationState.__new__(_ApplicationState)

        __props__.__dict__["application_name"] = application_name
        __props__.__dict__["coding_language"] = coding_language
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["repo_name"] = repo_name
        __props__.__dict__["repo_server"] = repo_server
        __props__.__dict__["repo_type"] = repo_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["use_default_image_service"] = use_default_image_service
        return Application(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> pulumi.Output[str]:
        """
        application name.
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="codingLanguage")
    def coding_language(self) -> pulumi.Output[str]:
        """
        program language, like JAVA.
        """
        return pulumi.get(self, "coding_language")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        application description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        tcr instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> pulumi.Output[Optional[str]]:
        """
        repository name.
        """
        return pulumi.get(self, "repo_name")

    @property
    @pulumi.getter(name="repoServer")
    def repo_server(self) -> pulumi.Output[Optional[str]]:
        """
        registry address.
        """
        return pulumi.get(self, "repo_server")

    @property
    @pulumi.getter(name="repoType")
    def repo_type(self) -> pulumi.Output[Optional[int]]:
        """
        repo type, 0: tcr personal, 1: tcr enterprise, 2: public repository, 3: tcr hosted by tem, 4: demo image.
        """
        return pulumi.get(self, "repo_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        application tag list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="useDefaultImageService")
    def use_default_image_service(self) -> pulumi.Output[Optional[int]]:
        """
        create image repo or not.
        """
        return pulumi.get(self, "use_default_image_service")

