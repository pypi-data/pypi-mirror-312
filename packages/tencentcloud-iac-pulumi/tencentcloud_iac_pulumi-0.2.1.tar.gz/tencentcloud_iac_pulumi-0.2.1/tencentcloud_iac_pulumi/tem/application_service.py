# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationServiceArgs', 'ApplicationService']

@pulumi.input_type
class ApplicationServiceArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 environment_id: pulumi.Input[str],
                 service: Optional[pulumi.Input['ApplicationServiceServiceArgs']] = None):
        """
        The set of arguments for constructing a ApplicationService resource.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input['ApplicationServiceServiceArgs'] service: service detail list.
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "environment_id", environment_id)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ApplicationServiceServiceArgs']]:
        """
        service detail list.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ApplicationServiceServiceArgs']]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class _ApplicationServiceState:
    def __init__(__self__, *,
                 application_id: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input['ApplicationServiceServiceArgs']] = None):
        """
        Input properties used for looking up and filtering ApplicationService resources.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input['ApplicationServiceServiceArgs'] service: service detail list.
        """
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input['ApplicationServiceServiceArgs']]:
        """
        service detail list.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input['ApplicationServiceServiceArgs']]):
        pulumi.set(self, "service", value)


class ApplicationService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['ApplicationServiceServiceArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tem application_service

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application_service = tencentcloud.tem.ApplicationService("applicationService",
            application_id="app-jrl3346j",
            environment_id="en-dpxyydl5",
            service=tencentcloud.tem.ApplicationServiceServiceArgs(
                port_mapping_item_lists=[tencentcloud.tem.ApplicationServiceServicePortMappingItemListArgs(
                    port=80,
                    protocol="TCP",
                    target_port=80,
                )],
                service_name="test0-1",
                type="CLUSTER",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem application_service can be imported using the environmentId#applicationId#serviceName, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/applicationService:ApplicationService application_service en-dpxyydl5#app-jrl3346j#test0-1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[pulumi.InputType['ApplicationServiceServiceArgs']] service: service detail list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tem application_service

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        application_service = tencentcloud.tem.ApplicationService("applicationService",
            application_id="app-jrl3346j",
            environment_id="en-dpxyydl5",
            service=tencentcloud.tem.ApplicationServiceServiceArgs(
                port_mapping_item_lists=[tencentcloud.tem.ApplicationServiceServicePortMappingItemListArgs(
                    port=80,
                    protocol="TCP",
                    target_port=80,
                )],
                service_name="test0-1",
                type="CLUSTER",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tem application_service can be imported using the environmentId#applicationId#serviceName, e.g.

        ```sh
        $ pulumi import tencentcloud:Tem/applicationService:ApplicationService application_service en-dpxyydl5#app-jrl3346j#test0-1
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_id: Optional[pulumi.Input[str]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[pulumi.InputType['ApplicationServiceServiceArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationServiceArgs.__new__(ApplicationServiceArgs)

            if application_id is None and not opts.urn:
                raise TypeError("Missing required property 'application_id'")
            __props__.__dict__["application_id"] = application_id
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["service"] = service
        super(ApplicationService, __self__).__init__(
            'tencentcloud:Tem/applicationService:ApplicationService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_id: Optional[pulumi.Input[str]] = None,
            environment_id: Optional[pulumi.Input[str]] = None,
            service: Optional[pulumi.Input[pulumi.InputType['ApplicationServiceServiceArgs']]] = None) -> 'ApplicationService':
        """
        Get an existing ApplicationService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] application_id: application ID.
        :param pulumi.Input[str] environment_id: environment ID.
        :param pulumi.Input[pulumi.InputType['ApplicationServiceServiceArgs']] service: service detail list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationServiceState.__new__(_ApplicationServiceState)

        __props__.__dict__["application_id"] = application_id
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["service"] = service
        return ApplicationService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Output[str]:
        """
        application ID.
        """
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[str]:
        """
        environment ID.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def service(self) -> pulumi.Output[Optional['outputs.ApplicationServiceService']]:
        """
        service detail list.
        """
        return pulumi.get(self, "service")

