# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDisksResult',
    'AwaitableGetDisksResult',
    'get_disks',
    'get_disks_output',
]

@pulumi.output_type
class GetDisksResult:
    """
    A collection of values returned by getDisks.
    """
    def __init__(__self__, disk_ids=None, disk_lists=None, filters=None, id=None, result_output_file=None):
        if disk_ids and not isinstance(disk_ids, list):
            raise TypeError("Expected argument 'disk_ids' to be a list")
        pulumi.set(__self__, "disk_ids", disk_ids)
        if disk_lists and not isinstance(disk_lists, list):
            raise TypeError("Expected argument 'disk_lists' to be a list")
        pulumi.set(__self__, "disk_lists", disk_lists)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="diskIds")
    def disk_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "disk_ids")

    @property
    @pulumi.getter(name="diskLists")
    def disk_lists(self) -> Sequence['outputs.GetDisksDiskListResult']:
        """
        Cloud disk information list.
        """
        return pulumi.get(self, "disk_lists")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDisksFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDisksResult(GetDisksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDisksResult(
            disk_ids=self.disk_ids,
            disk_lists=self.disk_lists,
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file)


def get_disks(disk_ids: Optional[Sequence[str]] = None,
              filters: Optional[Sequence[pulumi.InputType['GetDisksFilterArgs']]] = None,
              result_output_file: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDisksResult:
    """
    Use this data source to query detailed information of lighthouse disk

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    disks = tencentcloud.Lighthouse.get_disks(disk_ids=["lhdisk-xxxxxx"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] disk_ids: List of disk ids.
    :param Sequence[pulumi.InputType['GetDisksFilterArgs']] filters: Filter list.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['diskIds'] = disk_ids
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Lighthouse/getDisks:getDisks', __args__, opts=opts, typ=GetDisksResult).value

    return AwaitableGetDisksResult(
        disk_ids=pulumi.get(__ret__, 'disk_ids'),
        disk_lists=pulumi.get(__ret__, 'disk_lists'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_disks)
def get_disks_output(disk_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDisksFilterArgs']]]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDisksResult]:
    """
    Use this data source to query detailed information of lighthouse disk

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    disks = tencentcloud.Lighthouse.get_disks(disk_ids=["lhdisk-xxxxxx"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] disk_ids: List of disk ids.
    :param Sequence[pulumi.InputType['GetDisksFilterArgs']] filters: Filter list.
    :param str result_output_file: Used to save results.
    """
    ...
