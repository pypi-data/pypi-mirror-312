# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceTrafficPackageResult',
    'AwaitableGetInstanceTrafficPackageResult',
    'get_instance_traffic_package',
    'get_instance_traffic_package_output',
]

@pulumi.output_type
class GetInstanceTrafficPackageResult:
    """
    A collection of values returned by getInstanceTrafficPackage.
    """
    def __init__(__self__, id=None, instance_ids=None, instance_traffic_package_sets=None, limit=None, offset=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_ids and not isinstance(instance_ids, list):
            raise TypeError("Expected argument 'instance_ids' to be a list")
        pulumi.set(__self__, "instance_ids", instance_ids)
        if instance_traffic_package_sets and not isinstance(instance_traffic_package_sets, list):
            raise TypeError("Expected argument 'instance_traffic_package_sets' to be a list")
        pulumi.set(__self__, "instance_traffic_package_sets", instance_traffic_package_sets)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="instanceTrafficPackageSets")
    def instance_traffic_package_sets(self) -> Sequence['outputs.GetInstanceTrafficPackageInstanceTrafficPackageSetResult']:
        """
        List of details of instance traffic packages.
        """
        return pulumi.get(self, "instance_traffic_package_sets")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetInstanceTrafficPackageResult(GetInstanceTrafficPackageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceTrafficPackageResult(
            id=self.id,
            instance_ids=self.instance_ids,
            instance_traffic_package_sets=self.instance_traffic_package_sets,
            limit=self.limit,
            offset=self.offset,
            result_output_file=self.result_output_file)


def get_instance_traffic_package(instance_ids: Optional[Sequence[str]] = None,
                                 limit: Optional[int] = None,
                                 offset: Optional[int] = None,
                                 result_output_file: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceTrafficPackageResult:
    """
    Use this data source to query detailed information of lighthouse instance_traffic_package

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    instance_traffic_package = tencentcloud.Lighthouse.get_instance_traffic_package()
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] instance_ids: Instance ID list.
    :param int limit: Number of returned results. Default value is 20. Maximum value is 100.
    :param int offset: Offset. Default value is 0.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['instanceIds'] = instance_ids
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Lighthouse/getInstanceTrafficPackage:getInstanceTrafficPackage', __args__, opts=opts, typ=GetInstanceTrafficPackageResult).value

    return AwaitableGetInstanceTrafficPackageResult(
        id=pulumi.get(__ret__, 'id'),
        instance_ids=pulumi.get(__ret__, 'instance_ids'),
        instance_traffic_package_sets=pulumi.get(__ret__, 'instance_traffic_package_sets'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_instance_traffic_package)
def get_instance_traffic_package_output(instance_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                        limit: Optional[pulumi.Input[Optional[int]]] = None,
                                        offset: Optional[pulumi.Input[Optional[int]]] = None,
                                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceTrafficPackageResult]:
    """
    Use this data source to query detailed information of lighthouse instance_traffic_package

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    instance_traffic_package = tencentcloud.Lighthouse.get_instance_traffic_package()
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] instance_ids: Instance ID list.
    :param int limit: Number of returned results. Default value is 20. Maximum value is 100.
    :param int offset: Offset. Default value is 0.
    :param str result_output_file: Used to save results.
    """
    ...
