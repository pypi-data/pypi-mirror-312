# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetBundleResult',
    'AwaitableGetBundleResult',
    'get_bundle',
    'get_bundle_output',
]

@pulumi.output_type
class GetBundleResult:
    """
    A collection of values returned by getBundle.
    """
    def __init__(__self__, bundle_ids=None, bundle_sets=None, filters=None, id=None, limit=None, offset=None, result_output_file=None, zones=None):
        if bundle_ids and not isinstance(bundle_ids, list):
            raise TypeError("Expected argument 'bundle_ids' to be a list")
        pulumi.set(__self__, "bundle_ids", bundle_ids)
        if bundle_sets and not isinstance(bundle_sets, list):
            raise TypeError("Expected argument 'bundle_sets' to be a list")
        pulumi.set(__self__, "bundle_sets", bundle_sets)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="bundleIds")
    def bundle_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "bundle_ids")

    @property
    @pulumi.getter(name="bundleSets")
    def bundle_sets(self) -> Sequence['outputs.GetBundleBundleSetResult']:
        """
        List of bundle details.
        """
        return pulumi.get(self, "bundle_sets")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetBundleFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def zones(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "zones")


class AwaitableGetBundleResult(GetBundleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBundleResult(
            bundle_ids=self.bundle_ids,
            bundle_sets=self.bundle_sets,
            filters=self.filters,
            id=self.id,
            limit=self.limit,
            offset=self.offset,
            result_output_file=self.result_output_file,
            zones=self.zones)


def get_bundle(bundle_ids: Optional[Sequence[str]] = None,
               filters: Optional[Sequence[pulumi.InputType['GetBundleFilterArgs']]] = None,
               limit: Optional[int] = None,
               offset: Optional[int] = None,
               result_output_file: Optional[str] = None,
               zones: Optional[Sequence[str]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBundleResult:
    """
    Use this data source to query detailed information of lighthouse bundle

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    bundle = tencentcloud.Lighthouse.get_bundle()
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] bundle_ids: Bundle ID list.
    :param Sequence[pulumi.InputType['GetBundleFilterArgs']] filters: Filter list.
           - `bundle-id`: filter by the bundle ID.
           - `support-platform-type`: filter by system type, valid values: `LINUX_UNIX`, `WINDOWS`.
           - `bundle-type`: filter according to package type, valid values: `GENERAL_BUNDLE`, `STORAGE_BUNDLE`, `ENTERPRISE_BUNDLE`, `EXCLUSIVE_BUNDLE`, `BEFAST_BUNDLE`.
           - `bundle-state`: filter according to package status, valid values: `ONLINE`, `OFFLINE`.
           NOTE: The upper limit of Filters per request is 10. The upper limit of Filter.Values is 5. Parameter does not support specifying both BundleIds and Filters.
    :param int limit: Number of returned results. Default value is 20. Maximum value is 100.
    :param int offset: Offset. Default value is 0.
    :param str result_output_file: Used to save results.
    :param Sequence[str] zones: Zone list, which contains all zones by default.
    """
    __args__ = dict()
    __args__['bundleIds'] = bundle_ids
    __args__['filters'] = filters
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['resultOutputFile'] = result_output_file
    __args__['zones'] = zones
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Lighthouse/getBundle:getBundle', __args__, opts=opts, typ=GetBundleResult).value

    return AwaitableGetBundleResult(
        bundle_ids=pulumi.get(__ret__, 'bundle_ids'),
        bundle_sets=pulumi.get(__ret__, 'bundle_sets'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        zones=pulumi.get(__ret__, 'zones'))


@_utilities.lift_output_func(get_bundle)
def get_bundle_output(bundle_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetBundleFilterArgs']]]]] = None,
                      limit: Optional[pulumi.Input[Optional[int]]] = None,
                      offset: Optional[pulumi.Input[Optional[int]]] = None,
                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                      zones: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBundleResult]:
    """
    Use this data source to query detailed information of lighthouse bundle

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    bundle = tencentcloud.Lighthouse.get_bundle()
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] bundle_ids: Bundle ID list.
    :param Sequence[pulumi.InputType['GetBundleFilterArgs']] filters: Filter list.
           - `bundle-id`: filter by the bundle ID.
           - `support-platform-type`: filter by system type, valid values: `LINUX_UNIX`, `WINDOWS`.
           - `bundle-type`: filter according to package type, valid values: `GENERAL_BUNDLE`, `STORAGE_BUNDLE`, `ENTERPRISE_BUNDLE`, `EXCLUSIVE_BUNDLE`, `BEFAST_BUNDLE`.
           - `bundle-state`: filter according to package status, valid values: `ONLINE`, `OFFLINE`.
           NOTE: The upper limit of Filters per request is 10. The upper limit of Filter.Values is 5. Parameter does not support specifying both BundleIds and Filters.
    :param int limit: Number of returned results. Default value is 20. Maximum value is 100.
    :param int offset: Offset. Default value is 0.
    :param str result_output_file: Used to save results.
    :param Sequence[str] zones: Zone list, which contains all zones by default.
    """
    ...
