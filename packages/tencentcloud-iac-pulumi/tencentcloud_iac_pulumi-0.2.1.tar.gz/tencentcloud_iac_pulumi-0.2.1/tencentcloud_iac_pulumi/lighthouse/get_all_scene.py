# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAllSceneResult',
    'AwaitableGetAllSceneResult',
    'get_all_scene',
    'get_all_scene_output',
]

@pulumi.output_type
class GetAllSceneResult:
    """
    A collection of values returned by getAllScene.
    """
    def __init__(__self__, id=None, limit=None, offset=None, result_output_file=None, scene_ids=None, scene_sets=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if scene_ids and not isinstance(scene_ids, list):
            raise TypeError("Expected argument 'scene_ids' to be a list")
        pulumi.set(__self__, "scene_ids", scene_ids)
        if scene_sets and not isinstance(scene_sets, list):
            raise TypeError("Expected argument 'scene_sets' to be a list")
        pulumi.set(__self__, "scene_sets", scene_sets)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sceneIds")
    def scene_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "scene_ids")

    @property
    @pulumi.getter(name="sceneSets")
    def scene_sets(self) -> Sequence['outputs.GetAllSceneSceneSetResult']:
        """
        List of scene info.
        """
        return pulumi.get(self, "scene_sets")


class AwaitableGetAllSceneResult(GetAllSceneResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAllSceneResult(
            id=self.id,
            limit=self.limit,
            offset=self.offset,
            result_output_file=self.result_output_file,
            scene_ids=self.scene_ids,
            scene_sets=self.scene_sets)


def get_all_scene(limit: Optional[int] = None,
                  offset: Optional[int] = None,
                  result_output_file: Optional[str] = None,
                  scene_ids: Optional[Sequence[str]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAllSceneResult:
    """
    Use this data source to query detailed information of all region lighthouse scene

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    scene = tencentcloud.Lighthouse.get_all_scene(limit=20,
        offset=0)
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Number of returned results. Default value is 20. Maximum value is 100.
    :param int offset: Offset. Default value is 0.
    :param str result_output_file: Used to save results.
    :param Sequence[str] scene_ids: List of scene IDs.
    """
    __args__ = dict()
    __args__['limit'] = limit
    __args__['offset'] = offset
    __args__['resultOutputFile'] = result_output_file
    __args__['sceneIds'] = scene_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Lighthouse/getAllScene:getAllScene', __args__, opts=opts, typ=GetAllSceneResult).value

    return AwaitableGetAllSceneResult(
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        offset=pulumi.get(__ret__, 'offset'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        scene_ids=pulumi.get(__ret__, 'scene_ids'),
        scene_sets=pulumi.get(__ret__, 'scene_sets'))


@_utilities.lift_output_func(get_all_scene)
def get_all_scene_output(limit: Optional[pulumi.Input[Optional[int]]] = None,
                         offset: Optional[pulumi.Input[Optional[int]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         scene_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAllSceneResult]:
    """
    Use this data source to query detailed information of all region lighthouse scene

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    scene = tencentcloud.Lighthouse.get_all_scene(limit=20,
        offset=0)
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Number of returned results. Default value is 20. Maximum value is 100.
    :param int offset: Offset. Default value is 0.
    :param str result_output_file: Used to save results.
    :param Sequence[str] scene_ids: List of scene IDs.
    """
    ...
