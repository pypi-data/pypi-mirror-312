# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallTemplateArgs', 'FirewallTemplate']

@pulumi.input_type
class FirewallTemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 template_rules: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]]] = None):
        """
        The set of arguments for constructing a FirewallTemplate resource.
        :param pulumi.Input[str] template_name: Template name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]] template_rules: List of firewall rules.
        """
        pulumi.set(__self__, "template_name", template_name)
        if template_rules is not None:
            pulumi.set(__self__, "template_rules", template_rules)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Template name.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="templateRules")
    def template_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]]]:
        """
        List of firewall rules.
        """
        return pulumi.get(self, "template_rules")

    @template_rules.setter
    def template_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]]]):
        pulumi.set(self, "template_rules", value)


@pulumi.input_type
class _FirewallTemplateState:
    def __init__(__self__, *,
                 template_name: Optional[pulumi.Input[str]] = None,
                 template_rules: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering FirewallTemplate resources.
        :param pulumi.Input[str] template_name: Template name.
        :param pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]] template_rules: List of firewall rules.
        """
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if template_rules is not None:
            pulumi.set(__self__, "template_rules", template_rules)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="templateRules")
    def template_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]]]:
        """
        List of firewall rules.
        """
        return pulumi.get(self, "template_rules")

    @template_rules.setter
    def template_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallTemplateTemplateRuleArgs']]]]):
        pulumi.set(self, "template_rules", value)


class FirewallTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 template_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallTemplateTemplateRuleArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a lighthouse firewall template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        firewall_template = tencentcloud.lighthouse.FirewallTemplate("firewallTemplate",
            template_name="firewall-template-test",
            template_rules=[
                tencentcloud.lighthouse.FirewallTemplateTemplateRuleArgs(
                    action="ACCEPT",
                    cidr_block="127.0.0.1",
                    firewall_rule_description="test description",
                    port="8080",
                    protocol="TCP",
                ),
                tencentcloud.lighthouse.FirewallTemplateTemplateRuleArgs(
                    action="DROP",
                    cidr_block="127.0.0.0/24",
                    firewall_rule_description="test description",
                    port="8090",
                    protocol="TCP",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        lighthouse firewall_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Lighthouse/firewallTemplate:FirewallTemplate firewall_template firewall_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] template_name: Template name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallTemplateTemplateRuleArgs']]]] template_rules: List of firewall rules.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a lighthouse firewall template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        firewall_template = tencentcloud.lighthouse.FirewallTemplate("firewallTemplate",
            template_name="firewall-template-test",
            template_rules=[
                tencentcloud.lighthouse.FirewallTemplateTemplateRuleArgs(
                    action="ACCEPT",
                    cidr_block="127.0.0.1",
                    firewall_rule_description="test description",
                    port="8080",
                    protocol="TCP",
                ),
                tencentcloud.lighthouse.FirewallTemplateTemplateRuleArgs(
                    action="DROP",
                    cidr_block="127.0.0.0/24",
                    firewall_rule_description="test description",
                    port="8090",
                    protocol="TCP",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        lighthouse firewall_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Lighthouse/firewallTemplate:FirewallTemplate firewall_template firewall_template_id
        ```

        :param str resource_name: The name of the resource.
        :param FirewallTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 template_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallTemplateTemplateRuleArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallTemplateArgs.__new__(FirewallTemplateArgs)

            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            __props__.__dict__["template_rules"] = template_rules
        super(FirewallTemplate, __self__).__init__(
            'tencentcloud:Lighthouse/firewallTemplate:FirewallTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            template_name: Optional[pulumi.Input[str]] = None,
            template_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallTemplateTemplateRuleArgs']]]]] = None) -> 'FirewallTemplate':
        """
        Get an existing FirewallTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] template_name: Template name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallTemplateTemplateRuleArgs']]]] template_rules: List of firewall rules.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallTemplateState.__new__(_FirewallTemplateState)

        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["template_rules"] = template_rules
        return FirewallTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Template name.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter(name="templateRules")
    def template_rules(self) -> pulumi.Output[Optional[Sequence['outputs.FirewallTemplateTemplateRule']]]:
        """
        List of firewall rules.
        """
        return pulumi.get(self, "template_rules")

