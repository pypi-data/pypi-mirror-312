# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DiskArgs', 'Disk']

@pulumi.input_type
class DiskArgs:
    def __init__(__self__, *,
                 disk_charge_prepaid: pulumi.Input['DiskDiskChargePrepaidArgs'],
                 disk_size: pulumi.Input[int],
                 disk_type: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 auto_mount_configuration: Optional[pulumi.Input['DiskAutoMountConfigurationArgs']] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 disk_backup_quota: Optional[pulumi.Input[int]] = None,
                 disk_count: Optional[pulumi.Input[int]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Disk resource.
        :param pulumi.Input['DiskDiskChargePrepaidArgs'] disk_charge_prepaid: Disk subscription related parameter settings.
        :param pulumi.Input[int] disk_size: Disk size, unit: GB.
        :param pulumi.Input[str] disk_type: Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
        :param pulumi.Input[str] zone: Availability zone.
        :param pulumi.Input['DiskAutoMountConfigurationArgs'] auto_mount_configuration: Automatically mount and initialize data disks.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher. Not used by default.
        :param pulumi.Input[int] disk_backup_quota: Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
        :param pulumi.Input[int] disk_count: Disk count. Values: [1, 30]. Default: 1.
        :param pulumi.Input[str] disk_name: Disk name. Maximum length 60.
        """
        pulumi.set(__self__, "disk_charge_prepaid", disk_charge_prepaid)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)
        pulumi.set(__self__, "zone", zone)
        if auto_mount_configuration is not None:
            pulumi.set(__self__, "auto_mount_configuration", auto_mount_configuration)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if disk_backup_quota is not None:
            pulumi.set(__self__, "disk_backup_quota", disk_backup_quota)
        if disk_count is not None:
            pulumi.set(__self__, "disk_count", disk_count)
        if disk_name is not None:
            pulumi.set(__self__, "disk_name", disk_name)

    @property
    @pulumi.getter(name="diskChargePrepaid")
    def disk_charge_prepaid(self) -> pulumi.Input['DiskDiskChargePrepaidArgs']:
        """
        Disk subscription related parameter settings.
        """
        return pulumi.get(self, "disk_charge_prepaid")

    @disk_charge_prepaid.setter
    def disk_charge_prepaid(self, value: pulumi.Input['DiskDiskChargePrepaidArgs']):
        pulumi.set(self, "disk_charge_prepaid", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Input[int]:
        """
        Disk size, unit: GB.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input[str]:
        """
        Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter(name="autoMountConfiguration")
    def auto_mount_configuration(self) -> Optional[pulumi.Input['DiskAutoMountConfigurationArgs']]:
        """
        Automatically mount and initialize data disks.
        """
        return pulumi.get(self, "auto_mount_configuration")

    @auto_mount_configuration.setter
    def auto_mount_configuration(self, value: Optional[pulumi.Input['DiskAutoMountConfigurationArgs']]):
        pulumi.set(self, "auto_mount_configuration", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use the voucher. Not used by default.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="diskBackupQuota")
    def disk_backup_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
        """
        return pulumi.get(self, "disk_backup_quota")

    @disk_backup_quota.setter
    def disk_backup_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_backup_quota", value)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[pulumi.Input[int]]:
        """
        Disk count. Values: [1, 30]. Default: 1.
        """
        return pulumi.get(self, "disk_count")

    @disk_count.setter
    def disk_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_count", value)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> Optional[pulumi.Input[str]]:
        """
        Disk name. Maximum length 60.
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_name", value)


@pulumi.input_type
class _DiskState:
    def __init__(__self__, *,
                 auto_mount_configuration: Optional[pulumi.Input['DiskAutoMountConfigurationArgs']] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 disk_backup_quota: Optional[pulumi.Input[int]] = None,
                 disk_charge_prepaid: Optional[pulumi.Input['DiskDiskChargePrepaidArgs']] = None,
                 disk_count: Optional[pulumi.Input[int]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Disk resources.
        :param pulumi.Input['DiskAutoMountConfigurationArgs'] auto_mount_configuration: Automatically mount and initialize data disks.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher. Not used by default.
        :param pulumi.Input[int] disk_backup_quota: Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
        :param pulumi.Input['DiskDiskChargePrepaidArgs'] disk_charge_prepaid: Disk subscription related parameter settings.
        :param pulumi.Input[int] disk_count: Disk count. Values: [1, 30]. Default: 1.
        :param pulumi.Input[str] disk_name: Disk name. Maximum length 60.
        :param pulumi.Input[int] disk_size: Disk size, unit: GB.
        :param pulumi.Input[str] disk_type: Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
        :param pulumi.Input[str] zone: Availability zone.
        """
        if auto_mount_configuration is not None:
            pulumi.set(__self__, "auto_mount_configuration", auto_mount_configuration)
        if auto_voucher is not None:
            pulumi.set(__self__, "auto_voucher", auto_voucher)
        if disk_backup_quota is not None:
            pulumi.set(__self__, "disk_backup_quota", disk_backup_quota)
        if disk_charge_prepaid is not None:
            pulumi.set(__self__, "disk_charge_prepaid", disk_charge_prepaid)
        if disk_count is not None:
            pulumi.set(__self__, "disk_count", disk_count)
        if disk_name is not None:
            pulumi.set(__self__, "disk_name", disk_name)
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type is not None:
            pulumi.set(__self__, "disk_type", disk_type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="autoMountConfiguration")
    def auto_mount_configuration(self) -> Optional[pulumi.Input['DiskAutoMountConfigurationArgs']]:
        """
        Automatically mount and initialize data disks.
        """
        return pulumi.get(self, "auto_mount_configuration")

    @auto_mount_configuration.setter
    def auto_mount_configuration(self, value: Optional[pulumi.Input['DiskAutoMountConfigurationArgs']]):
        pulumi.set(self, "auto_mount_configuration", value)

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically use the voucher. Not used by default.
        """
        return pulumi.get(self, "auto_voucher")

    @auto_voucher.setter
    def auto_voucher(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_voucher", value)

    @property
    @pulumi.getter(name="diskBackupQuota")
    def disk_backup_quota(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
        """
        return pulumi.get(self, "disk_backup_quota")

    @disk_backup_quota.setter
    def disk_backup_quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_backup_quota", value)

    @property
    @pulumi.getter(name="diskChargePrepaid")
    def disk_charge_prepaid(self) -> Optional[pulumi.Input['DiskDiskChargePrepaidArgs']]:
        """
        Disk subscription related parameter settings.
        """
        return pulumi.get(self, "disk_charge_prepaid")

    @disk_charge_prepaid.setter
    def disk_charge_prepaid(self, value: Optional[pulumi.Input['DiskDiskChargePrepaidArgs']]):
        pulumi.set(self, "disk_charge_prepaid", value)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> Optional[pulumi.Input[int]]:
        """
        Disk count. Values: [1, 30]. Default: 1.
        """
        return pulumi.get(self, "disk_count")

    @disk_count.setter
    def disk_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_count", value)

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> Optional[pulumi.Input[str]]:
        """
        Disk name. Maximum length 60.
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_name", value)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        Disk size, unit: GB.
        """
        return pulumi.get(self, "disk_size")

    @disk_size.setter
    def disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disk_size", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> Optional[pulumi.Input[str]]:
        """
        Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Disk(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_mount_configuration: Optional[pulumi.Input[pulumi.InputType['DiskAutoMountConfigurationArgs']]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 disk_backup_quota: Optional[pulumi.Input[int]] = None,
                 disk_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['DiskDiskChargePrepaidArgs']]] = None,
                 disk_count: Optional[pulumi.Input[int]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a lighthouse disk

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        disk = tencentcloud.lighthouse.Disk("disk",
            disk_charge_prepaid=tencentcloud.lighthouse.DiskDiskChargePrepaidArgs(
                period=1,
                renew_flag="NOTIFY_AND_AUTO_RENEW",
                time_unit="m",
            ),
            disk_name="test",
            disk_size=20,
            disk_type="CLOUD_SSD",
            zone="ap-hongkong-2")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DiskAutoMountConfigurationArgs']] auto_mount_configuration: Automatically mount and initialize data disks.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher. Not used by default.
        :param pulumi.Input[int] disk_backup_quota: Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
        :param pulumi.Input[pulumi.InputType['DiskDiskChargePrepaidArgs']] disk_charge_prepaid: Disk subscription related parameter settings.
        :param pulumi.Input[int] disk_count: Disk count. Values: [1, 30]. Default: 1.
        :param pulumi.Input[str] disk_name: Disk name. Maximum length 60.
        :param pulumi.Input[int] disk_size: Disk size, unit: GB.
        :param pulumi.Input[str] disk_type: Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
        :param pulumi.Input[str] zone: Availability zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a lighthouse disk

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        disk = tencentcloud.lighthouse.Disk("disk",
            disk_charge_prepaid=tencentcloud.lighthouse.DiskDiskChargePrepaidArgs(
                period=1,
                renew_flag="NOTIFY_AND_AUTO_RENEW",
                time_unit="m",
            ),
            disk_name="test",
            disk_size=20,
            disk_type="CLOUD_SSD",
            zone="ap-hongkong-2")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param DiskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_mount_configuration: Optional[pulumi.Input[pulumi.InputType['DiskAutoMountConfigurationArgs']]] = None,
                 auto_voucher: Optional[pulumi.Input[bool]] = None,
                 disk_backup_quota: Optional[pulumi.Input[int]] = None,
                 disk_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['DiskDiskChargePrepaidArgs']]] = None,
                 disk_count: Optional[pulumi.Input[int]] = None,
                 disk_name: Optional[pulumi.Input[str]] = None,
                 disk_size: Optional[pulumi.Input[int]] = None,
                 disk_type: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiskArgs.__new__(DiskArgs)

            __props__.__dict__["auto_mount_configuration"] = auto_mount_configuration
            __props__.__dict__["auto_voucher"] = auto_voucher
            __props__.__dict__["disk_backup_quota"] = disk_backup_quota
            if disk_charge_prepaid is None and not opts.urn:
                raise TypeError("Missing required property 'disk_charge_prepaid'")
            __props__.__dict__["disk_charge_prepaid"] = disk_charge_prepaid
            __props__.__dict__["disk_count"] = disk_count
            __props__.__dict__["disk_name"] = disk_name
            if disk_size is None and not opts.urn:
                raise TypeError("Missing required property 'disk_size'")
            __props__.__dict__["disk_size"] = disk_size
            if disk_type is None and not opts.urn:
                raise TypeError("Missing required property 'disk_type'")
            __props__.__dict__["disk_type"] = disk_type
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        super(Disk, __self__).__init__(
            'tencentcloud:Lighthouse/disk:Disk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_mount_configuration: Optional[pulumi.Input[pulumi.InputType['DiskAutoMountConfigurationArgs']]] = None,
            auto_voucher: Optional[pulumi.Input[bool]] = None,
            disk_backup_quota: Optional[pulumi.Input[int]] = None,
            disk_charge_prepaid: Optional[pulumi.Input[pulumi.InputType['DiskDiskChargePrepaidArgs']]] = None,
            disk_count: Optional[pulumi.Input[int]] = None,
            disk_name: Optional[pulumi.Input[str]] = None,
            disk_size: Optional[pulumi.Input[int]] = None,
            disk_type: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Disk':
        """
        Get an existing Disk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['DiskAutoMountConfigurationArgs']] auto_mount_configuration: Automatically mount and initialize data disks.
        :param pulumi.Input[bool] auto_voucher: Whether to automatically use the voucher. Not used by default.
        :param pulumi.Input[int] disk_backup_quota: Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
        :param pulumi.Input[pulumi.InputType['DiskDiskChargePrepaidArgs']] disk_charge_prepaid: Disk subscription related parameter settings.
        :param pulumi.Input[int] disk_count: Disk count. Values: [1, 30]. Default: 1.
        :param pulumi.Input[str] disk_name: Disk name. Maximum length 60.
        :param pulumi.Input[int] disk_size: Disk size, unit: GB.
        :param pulumi.Input[str] disk_type: Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
        :param pulumi.Input[str] zone: Availability zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DiskState.__new__(_DiskState)

        __props__.__dict__["auto_mount_configuration"] = auto_mount_configuration
        __props__.__dict__["auto_voucher"] = auto_voucher
        __props__.__dict__["disk_backup_quota"] = disk_backup_quota
        __props__.__dict__["disk_charge_prepaid"] = disk_charge_prepaid
        __props__.__dict__["disk_count"] = disk_count
        __props__.__dict__["disk_name"] = disk_name
        __props__.__dict__["disk_size"] = disk_size
        __props__.__dict__["disk_type"] = disk_type
        __props__.__dict__["zone"] = zone
        return Disk(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoMountConfiguration")
    def auto_mount_configuration(self) -> pulumi.Output[Optional['outputs.DiskAutoMountConfiguration']]:
        """
        Automatically mount and initialize data disks.
        """
        return pulumi.get(self, "auto_mount_configuration")

    @property
    @pulumi.getter(name="autoVoucher")
    def auto_voucher(self) -> pulumi.Output[bool]:
        """
        Whether to automatically use the voucher. Not used by default.
        """
        return pulumi.get(self, "auto_voucher")

    @property
    @pulumi.getter(name="diskBackupQuota")
    def disk_backup_quota(self) -> pulumi.Output[int]:
        """
        Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
        """
        return pulumi.get(self, "disk_backup_quota")

    @property
    @pulumi.getter(name="diskChargePrepaid")
    def disk_charge_prepaid(self) -> pulumi.Output['outputs.DiskDiskChargePrepaid']:
        """
        Disk subscription related parameter settings.
        """
        return pulumi.get(self, "disk_charge_prepaid")

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> pulumi.Output[int]:
        """
        Disk count. Values: [1, 30]. Default: 1.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Output[str]:
        """
        Disk name. Maximum length 60.
        """
        return pulumi.get(self, "disk_name")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> pulumi.Output[int]:
        """
        Disk size, unit: GB.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Output[str]:
        """
        Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")

