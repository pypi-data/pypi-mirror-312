# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AiRecognitionTemplateArgs', 'AiRecognitionTemplate']

@pulumi.input_type
class AiRecognitionTemplateArgs:
    def __init__(__self__, *,
                 asr_full_text_configure: Optional[pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs']] = None,
                 asr_words_configure: Optional[pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 face_configure: Optional[pulumi.Input['AiRecognitionTemplateFaceConfigureArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocr_full_text_configure: Optional[pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs']] = None,
                 ocr_words_configure: Optional[pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs']] = None):
        """
        The set of arguments for constructing a AiRecognitionTemplate resource.
        :param pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs'] asr_full_text_configure: Asr full text recognition control parameters.
        :param pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs'] asr_words_configure: Asr word recognition control parameters.
        :param pulumi.Input[str] comment: Ai recognition template description information, length limit: 256 characters.
        :param pulumi.Input['AiRecognitionTemplateFaceConfigureArgs'] face_configure: Face recognition control parameters.
        :param pulumi.Input[str] name: Ai recognition template name, length limit: 64 characters.
        :param pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs'] ocr_full_text_configure: Ocr full text control parameters.
        :param pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs'] ocr_words_configure: Ocr words recognition control parameters.
        """
        if asr_full_text_configure is not None:
            pulumi.set(__self__, "asr_full_text_configure", asr_full_text_configure)
        if asr_words_configure is not None:
            pulumi.set(__self__, "asr_words_configure", asr_words_configure)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if face_configure is not None:
            pulumi.set(__self__, "face_configure", face_configure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocr_full_text_configure is not None:
            pulumi.set(__self__, "ocr_full_text_configure", ocr_full_text_configure)
        if ocr_words_configure is not None:
            pulumi.set(__self__, "ocr_words_configure", ocr_words_configure)

    @property
    @pulumi.getter(name="asrFullTextConfigure")
    def asr_full_text_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs']]:
        """
        Asr full text recognition control parameters.
        """
        return pulumi.get(self, "asr_full_text_configure")

    @asr_full_text_configure.setter
    def asr_full_text_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs']]):
        pulumi.set(self, "asr_full_text_configure", value)

    @property
    @pulumi.getter(name="asrWordsConfigure")
    def asr_words_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs']]:
        """
        Asr word recognition control parameters.
        """
        return pulumi.get(self, "asr_words_configure")

    @asr_words_configure.setter
    def asr_words_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs']]):
        pulumi.set(self, "asr_words_configure", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Ai recognition template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="faceConfigure")
    def face_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateFaceConfigureArgs']]:
        """
        Face recognition control parameters.
        """
        return pulumi.get(self, "face_configure")

    @face_configure.setter
    def face_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateFaceConfigureArgs']]):
        pulumi.set(self, "face_configure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Ai recognition template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ocrFullTextConfigure")
    def ocr_full_text_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs']]:
        """
        Ocr full text control parameters.
        """
        return pulumi.get(self, "ocr_full_text_configure")

    @ocr_full_text_configure.setter
    def ocr_full_text_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs']]):
        pulumi.set(self, "ocr_full_text_configure", value)

    @property
    @pulumi.getter(name="ocrWordsConfigure")
    def ocr_words_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs']]:
        """
        Ocr words recognition control parameters.
        """
        return pulumi.get(self, "ocr_words_configure")

    @ocr_words_configure.setter
    def ocr_words_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs']]):
        pulumi.set(self, "ocr_words_configure", value)


@pulumi.input_type
class _AiRecognitionTemplateState:
    def __init__(__self__, *,
                 asr_full_text_configure: Optional[pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs']] = None,
                 asr_words_configure: Optional[pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 face_configure: Optional[pulumi.Input['AiRecognitionTemplateFaceConfigureArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocr_full_text_configure: Optional[pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs']] = None,
                 ocr_words_configure: Optional[pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs']] = None):
        """
        Input properties used for looking up and filtering AiRecognitionTemplate resources.
        :param pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs'] asr_full_text_configure: Asr full text recognition control parameters.
        :param pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs'] asr_words_configure: Asr word recognition control parameters.
        :param pulumi.Input[str] comment: Ai recognition template description information, length limit: 256 characters.
        :param pulumi.Input['AiRecognitionTemplateFaceConfigureArgs'] face_configure: Face recognition control parameters.
        :param pulumi.Input[str] name: Ai recognition template name, length limit: 64 characters.
        :param pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs'] ocr_full_text_configure: Ocr full text control parameters.
        :param pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs'] ocr_words_configure: Ocr words recognition control parameters.
        """
        if asr_full_text_configure is not None:
            pulumi.set(__self__, "asr_full_text_configure", asr_full_text_configure)
        if asr_words_configure is not None:
            pulumi.set(__self__, "asr_words_configure", asr_words_configure)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if face_configure is not None:
            pulumi.set(__self__, "face_configure", face_configure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ocr_full_text_configure is not None:
            pulumi.set(__self__, "ocr_full_text_configure", ocr_full_text_configure)
        if ocr_words_configure is not None:
            pulumi.set(__self__, "ocr_words_configure", ocr_words_configure)

    @property
    @pulumi.getter(name="asrFullTextConfigure")
    def asr_full_text_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs']]:
        """
        Asr full text recognition control parameters.
        """
        return pulumi.get(self, "asr_full_text_configure")

    @asr_full_text_configure.setter
    def asr_full_text_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateAsrFullTextConfigureArgs']]):
        pulumi.set(self, "asr_full_text_configure", value)

    @property
    @pulumi.getter(name="asrWordsConfigure")
    def asr_words_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs']]:
        """
        Asr word recognition control parameters.
        """
        return pulumi.get(self, "asr_words_configure")

    @asr_words_configure.setter
    def asr_words_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateAsrWordsConfigureArgs']]):
        pulumi.set(self, "asr_words_configure", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Ai recognition template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="faceConfigure")
    def face_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateFaceConfigureArgs']]:
        """
        Face recognition control parameters.
        """
        return pulumi.get(self, "face_configure")

    @face_configure.setter
    def face_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateFaceConfigureArgs']]):
        pulumi.set(self, "face_configure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Ai recognition template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ocrFullTextConfigure")
    def ocr_full_text_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs']]:
        """
        Ocr full text control parameters.
        """
        return pulumi.get(self, "ocr_full_text_configure")

    @ocr_full_text_configure.setter
    def ocr_full_text_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateOcrFullTextConfigureArgs']]):
        pulumi.set(self, "ocr_full_text_configure", value)

    @property
    @pulumi.getter(name="ocrWordsConfigure")
    def ocr_words_configure(self) -> Optional[pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs']]:
        """
        Ocr words recognition control parameters.
        """
        return pulumi.get(self, "ocr_words_configure")

    @ocr_words_configure.setter
    def ocr_words_configure(self, value: Optional[pulumi.Input['AiRecognitionTemplateOcrWordsConfigureArgs']]):
        pulumi.set(self, "ocr_words_configure", value)


class AiRecognitionTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asr_full_text_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrFullTextConfigureArgs']]] = None,
                 asr_words_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrWordsConfigureArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 face_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateFaceConfigureArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocr_full_text_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrFullTextConfigureArgs']]] = None,
                 ocr_words_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrWordsConfigureArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps ai_recognition_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        ai_recognition_template = tencentcloud.mps.AiRecognitionTemplate("aiRecognitionTemplate",
            asr_full_text_configure=tencentcloud.mps.AiRecognitionTemplateAsrFullTextConfigureArgs(
                switch="OFF",
            ),
            asr_words_configure=tencentcloud.mps.AiRecognitionTemplateAsrWordsConfigureArgs(
                label_sets=[],
                switch="OFF",
            ),
            face_configure=tencentcloud.mps.AiRecognitionTemplateFaceConfigureArgs(
                default_library_label_sets=[
                    "entertainment",
                    "sport",
                ],
                face_library="All",
                score=85,
                switch="ON",
                user_define_library_label_sets=[],
            ),
            ocr_full_text_configure=tencentcloud.mps.AiRecognitionTemplateOcrFullTextConfigureArgs(
                switch="OFF",
            ),
            ocr_words_configure=tencentcloud.mps.AiRecognitionTemplateOcrWordsConfigureArgs(
                label_sets=[],
                switch="OFF",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps ai_recognition_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/aiRecognitionTemplate:AiRecognitionTemplate ai_recognition_template ai_recognition_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrFullTextConfigureArgs']] asr_full_text_configure: Asr full text recognition control parameters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrWordsConfigureArgs']] asr_words_configure: Asr word recognition control parameters.
        :param pulumi.Input[str] comment: Ai recognition template description information, length limit: 256 characters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateFaceConfigureArgs']] face_configure: Face recognition control parameters.
        :param pulumi.Input[str] name: Ai recognition template name, length limit: 64 characters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrFullTextConfigureArgs']] ocr_full_text_configure: Ocr full text control parameters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrWordsConfigureArgs']] ocr_words_configure: Ocr words recognition control parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AiRecognitionTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps ai_recognition_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        ai_recognition_template = tencentcloud.mps.AiRecognitionTemplate("aiRecognitionTemplate",
            asr_full_text_configure=tencentcloud.mps.AiRecognitionTemplateAsrFullTextConfigureArgs(
                switch="OFF",
            ),
            asr_words_configure=tencentcloud.mps.AiRecognitionTemplateAsrWordsConfigureArgs(
                label_sets=[],
                switch="OFF",
            ),
            face_configure=tencentcloud.mps.AiRecognitionTemplateFaceConfigureArgs(
                default_library_label_sets=[
                    "entertainment",
                    "sport",
                ],
                face_library="All",
                score=85,
                switch="ON",
                user_define_library_label_sets=[],
            ),
            ocr_full_text_configure=tencentcloud.mps.AiRecognitionTemplateOcrFullTextConfigureArgs(
                switch="OFF",
            ),
            ocr_words_configure=tencentcloud.mps.AiRecognitionTemplateOcrWordsConfigureArgs(
                label_sets=[],
                switch="OFF",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps ai_recognition_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/aiRecognitionTemplate:AiRecognitionTemplate ai_recognition_template ai_recognition_template_id
        ```

        :param str resource_name: The name of the resource.
        :param AiRecognitionTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AiRecognitionTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asr_full_text_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrFullTextConfigureArgs']]] = None,
                 asr_words_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrWordsConfigureArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 face_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateFaceConfigureArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ocr_full_text_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrFullTextConfigureArgs']]] = None,
                 ocr_words_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrWordsConfigureArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AiRecognitionTemplateArgs.__new__(AiRecognitionTemplateArgs)

            __props__.__dict__["asr_full_text_configure"] = asr_full_text_configure
            __props__.__dict__["asr_words_configure"] = asr_words_configure
            __props__.__dict__["comment"] = comment
            __props__.__dict__["face_configure"] = face_configure
            __props__.__dict__["name"] = name
            __props__.__dict__["ocr_full_text_configure"] = ocr_full_text_configure
            __props__.__dict__["ocr_words_configure"] = ocr_words_configure
        super(AiRecognitionTemplate, __self__).__init__(
            'tencentcloud:Mps/aiRecognitionTemplate:AiRecognitionTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asr_full_text_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrFullTextConfigureArgs']]] = None,
            asr_words_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrWordsConfigureArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            face_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateFaceConfigureArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ocr_full_text_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrFullTextConfigureArgs']]] = None,
            ocr_words_configure: Optional[pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrWordsConfigureArgs']]] = None) -> 'AiRecognitionTemplate':
        """
        Get an existing AiRecognitionTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrFullTextConfigureArgs']] asr_full_text_configure: Asr full text recognition control parameters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateAsrWordsConfigureArgs']] asr_words_configure: Asr word recognition control parameters.
        :param pulumi.Input[str] comment: Ai recognition template description information, length limit: 256 characters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateFaceConfigureArgs']] face_configure: Face recognition control parameters.
        :param pulumi.Input[str] name: Ai recognition template name, length limit: 64 characters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrFullTextConfigureArgs']] ocr_full_text_configure: Ocr full text control parameters.
        :param pulumi.Input[pulumi.InputType['AiRecognitionTemplateOcrWordsConfigureArgs']] ocr_words_configure: Ocr words recognition control parameters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AiRecognitionTemplateState.__new__(_AiRecognitionTemplateState)

        __props__.__dict__["asr_full_text_configure"] = asr_full_text_configure
        __props__.__dict__["asr_words_configure"] = asr_words_configure
        __props__.__dict__["comment"] = comment
        __props__.__dict__["face_configure"] = face_configure
        __props__.__dict__["name"] = name
        __props__.__dict__["ocr_full_text_configure"] = ocr_full_text_configure
        __props__.__dict__["ocr_words_configure"] = ocr_words_configure
        return AiRecognitionTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="asrFullTextConfigure")
    def asr_full_text_configure(self) -> pulumi.Output[Optional['outputs.AiRecognitionTemplateAsrFullTextConfigure']]:
        """
        Asr full text recognition control parameters.
        """
        return pulumi.get(self, "asr_full_text_configure")

    @property
    @pulumi.getter(name="asrWordsConfigure")
    def asr_words_configure(self) -> pulumi.Output[Optional['outputs.AiRecognitionTemplateAsrWordsConfigure']]:
        """
        Asr word recognition control parameters.
        """
        return pulumi.get(self, "asr_words_configure")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Ai recognition template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="faceConfigure")
    def face_configure(self) -> pulumi.Output[Optional['outputs.AiRecognitionTemplateFaceConfigure']]:
        """
        Face recognition control parameters.
        """
        return pulumi.get(self, "face_configure")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Ai recognition template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ocrFullTextConfigure")
    def ocr_full_text_configure(self) -> pulumi.Output[Optional['outputs.AiRecognitionTemplateOcrFullTextConfigure']]:
        """
        Ocr full text control parameters.
        """
        return pulumi.get(self, "ocr_full_text_configure")

    @property
    @pulumi.getter(name="ocrWordsConfigure")
    def ocr_words_configure(self) -> pulumi.Output[Optional['outputs.AiRecognitionTemplateOcrWordsConfigure']]:
        """
        Ocr words recognition control parameters.
        """
        return pulumi.get(self, "ocr_words_configure")

