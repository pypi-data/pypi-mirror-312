# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkflowArgs', 'Workflow']

@pulumi.input_type
class WorkflowArgs:
    def __init__(__self__, *,
                 trigger: pulumi.Input['WorkflowTriggerArgs'],
                 workflow_name: pulumi.Input[str],
                 ai_analysis_task: Optional[pulumi.Input['WorkflowAiAnalysisTaskArgs']] = None,
                 ai_content_review_task: Optional[pulumi.Input['WorkflowAiContentReviewTaskArgs']] = None,
                 ai_recognition_task: Optional[pulumi.Input['WorkflowAiRecognitionTaskArgs']] = None,
                 media_process_task: Optional[pulumi.Input['WorkflowMediaProcessTaskArgs']] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowOutputStorageArgs']] = None,
                 task_notify_config: Optional[pulumi.Input['WorkflowTaskNotifyConfigArgs']] = None,
                 task_priority: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Workflow resource.
        :param pulumi.Input['WorkflowTriggerArgs'] trigger: The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
        :param pulumi.Input[str] workflow_name: Workflow name, up to 128 characters. The name is unique for the same user.
        :param pulumi.Input['WorkflowAiAnalysisTaskArgs'] ai_analysis_task: Video Content Analysis Type Task Parameters.
        :param pulumi.Input['WorkflowAiContentReviewTaskArgs'] ai_content_review_task: Video Content Moderation Type Task Parameters.
        :param pulumi.Input['WorkflowAiRecognitionTaskArgs'] ai_recognition_task: Video content recognition type task parameters.
        :param pulumi.Input['WorkflowMediaProcessTaskArgs'] media_process_task: Media Processing Type Task Parameters.
        :param pulumi.Input[str] output_dir: The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
        :param pulumi.Input['WorkflowOutputStorageArgs'] output_storage: File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
        :param pulumi.Input['WorkflowTaskNotifyConfigArgs'] task_notify_config: The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
        :param pulumi.Input[int] task_priority: The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
        """
        pulumi.set(__self__, "trigger", trigger)
        pulumi.set(__self__, "workflow_name", workflow_name)
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if media_process_task is not None:
            pulumi.set(__self__, "media_process_task", media_process_task)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if task_priority is not None:
            pulumi.set(__self__, "task_priority", task_priority)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input['WorkflowTriggerArgs']:
        """
        The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input['WorkflowTriggerArgs']):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> pulumi.Input[str]:
        """
        Workflow name, up to 128 characters. The name is unique for the same user.
        """
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_name", value)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional[pulumi.Input['WorkflowAiAnalysisTaskArgs']]:
        """
        Video Content Analysis Type Task Parameters.
        """
        return pulumi.get(self, "ai_analysis_task")

    @ai_analysis_task.setter
    def ai_analysis_task(self, value: Optional[pulumi.Input['WorkflowAiAnalysisTaskArgs']]):
        pulumi.set(self, "ai_analysis_task", value)

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional[pulumi.Input['WorkflowAiContentReviewTaskArgs']]:
        """
        Video Content Moderation Type Task Parameters.
        """
        return pulumi.get(self, "ai_content_review_task")

    @ai_content_review_task.setter
    def ai_content_review_task(self, value: Optional[pulumi.Input['WorkflowAiContentReviewTaskArgs']]):
        pulumi.set(self, "ai_content_review_task", value)

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional[pulumi.Input['WorkflowAiRecognitionTaskArgs']]:
        """
        Video content recognition type task parameters.
        """
        return pulumi.get(self, "ai_recognition_task")

    @ai_recognition_task.setter
    def ai_recognition_task(self, value: Optional[pulumi.Input['WorkflowAiRecognitionTaskArgs']]):
        pulumi.set(self, "ai_recognition_task", value)

    @property
    @pulumi.getter(name="mediaProcessTask")
    def media_process_task(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskArgs']]:
        """
        Media Processing Type Task Parameters.
        """
        return pulumi.get(self, "media_process_task")

    @media_process_task.setter
    def media_process_task(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskArgs']]):
        pulumi.set(self, "media_process_task", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowOutputStorageArgs']]:
        """
        File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['WorkflowTaskNotifyConfigArgs']]:
        """
        The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['WorkflowTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter(name="taskPriority")
    def task_priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
        """
        return pulumi.get(self, "task_priority")

    @task_priority.setter
    def task_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_priority", value)


@pulumi.input_type
class _WorkflowState:
    def __init__(__self__, *,
                 ai_analysis_task: Optional[pulumi.Input['WorkflowAiAnalysisTaskArgs']] = None,
                 ai_content_review_task: Optional[pulumi.Input['WorkflowAiContentReviewTaskArgs']] = None,
                 ai_recognition_task: Optional[pulumi.Input['WorkflowAiRecognitionTaskArgs']] = None,
                 media_process_task: Optional[pulumi.Input['WorkflowMediaProcessTaskArgs']] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['WorkflowOutputStorageArgs']] = None,
                 task_notify_config: Optional[pulumi.Input['WorkflowTaskNotifyConfigArgs']] = None,
                 task_priority: Optional[pulumi.Input[int]] = None,
                 trigger: Optional[pulumi.Input['WorkflowTriggerArgs']] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Workflow resources.
        :param pulumi.Input['WorkflowAiAnalysisTaskArgs'] ai_analysis_task: Video Content Analysis Type Task Parameters.
        :param pulumi.Input['WorkflowAiContentReviewTaskArgs'] ai_content_review_task: Video Content Moderation Type Task Parameters.
        :param pulumi.Input['WorkflowAiRecognitionTaskArgs'] ai_recognition_task: Video content recognition type task parameters.
        :param pulumi.Input['WorkflowMediaProcessTaskArgs'] media_process_task: Media Processing Type Task Parameters.
        :param pulumi.Input[str] output_dir: The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
        :param pulumi.Input['WorkflowOutputStorageArgs'] output_storage: File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
        :param pulumi.Input['WorkflowTaskNotifyConfigArgs'] task_notify_config: The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
        :param pulumi.Input[int] task_priority: The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
        :param pulumi.Input['WorkflowTriggerArgs'] trigger: The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
        :param pulumi.Input[str] workflow_name: Workflow name, up to 128 characters. The name is unique for the same user.
        """
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if media_process_task is not None:
            pulumi.set(__self__, "media_process_task", media_process_task)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if task_priority is not None:
            pulumi.set(__self__, "task_priority", task_priority)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)
        if workflow_name is not None:
            pulumi.set(__self__, "workflow_name", workflow_name)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional[pulumi.Input['WorkflowAiAnalysisTaskArgs']]:
        """
        Video Content Analysis Type Task Parameters.
        """
        return pulumi.get(self, "ai_analysis_task")

    @ai_analysis_task.setter
    def ai_analysis_task(self, value: Optional[pulumi.Input['WorkflowAiAnalysisTaskArgs']]):
        pulumi.set(self, "ai_analysis_task", value)

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional[pulumi.Input['WorkflowAiContentReviewTaskArgs']]:
        """
        Video Content Moderation Type Task Parameters.
        """
        return pulumi.get(self, "ai_content_review_task")

    @ai_content_review_task.setter
    def ai_content_review_task(self, value: Optional[pulumi.Input['WorkflowAiContentReviewTaskArgs']]):
        pulumi.set(self, "ai_content_review_task", value)

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional[pulumi.Input['WorkflowAiRecognitionTaskArgs']]:
        """
        Video content recognition type task parameters.
        """
        return pulumi.get(self, "ai_recognition_task")

    @ai_recognition_task.setter
    def ai_recognition_task(self, value: Optional[pulumi.Input['WorkflowAiRecognitionTaskArgs']]):
        pulumi.set(self, "ai_recognition_task", value)

    @property
    @pulumi.getter(name="mediaProcessTask")
    def media_process_task(self) -> Optional[pulumi.Input['WorkflowMediaProcessTaskArgs']]:
        """
        Media Processing Type Task Parameters.
        """
        return pulumi.get(self, "media_process_task")

    @media_process_task.setter
    def media_process_task(self, value: Optional[pulumi.Input['WorkflowMediaProcessTaskArgs']]):
        pulumi.set(self, "media_process_task", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['WorkflowOutputStorageArgs']]:
        """
        File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['WorkflowOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['WorkflowTaskNotifyConfigArgs']]:
        """
        The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['WorkflowTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter(name="taskPriority")
    def task_priority(self) -> Optional[pulumi.Input[int]]:
        """
        The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
        """
        return pulumi.get(self, "task_priority")

    @task_priority.setter
    def task_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_priority", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input['WorkflowTriggerArgs']]:
        """
        The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input['WorkflowTriggerArgs']]):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> Optional[pulumi.Input[str]]:
        """
        Workflow name, up to 128 characters. The name is unique for the same user.
        """
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_name", value)


class Workflow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiAnalysisTaskArgs']]] = None,
                 ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiContentReviewTaskArgs']]] = None,
                 ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiRecognitionTaskArgs']]] = None,
                 media_process_task: Optional[pulumi.Input[pulumi.InputType['WorkflowMediaProcessTaskArgs']]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['WorkflowOutputStorageArgs']]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['WorkflowTaskNotifyConfigArgs']]] = None,
                 task_priority: Optional[pulumi.Input[int]] = None,
                 trigger: Optional[pulumi.Input[pulumi.InputType['WorkflowTriggerArgs']]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps workflow

        ## Import

        mps workflow can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/workflow:Workflow workflow workflow_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['WorkflowAiAnalysisTaskArgs']] ai_analysis_task: Video Content Analysis Type Task Parameters.
        :param pulumi.Input[pulumi.InputType['WorkflowAiContentReviewTaskArgs']] ai_content_review_task: Video Content Moderation Type Task Parameters.
        :param pulumi.Input[pulumi.InputType['WorkflowAiRecognitionTaskArgs']] ai_recognition_task: Video content recognition type task parameters.
        :param pulumi.Input[pulumi.InputType['WorkflowMediaProcessTaskArgs']] media_process_task: Media Processing Type Task Parameters.
        :param pulumi.Input[str] output_dir: The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
        :param pulumi.Input[pulumi.InputType['WorkflowOutputStorageArgs']] output_storage: File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
        :param pulumi.Input[pulumi.InputType['WorkflowTaskNotifyConfigArgs']] task_notify_config: The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
        :param pulumi.Input[int] task_priority: The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
        :param pulumi.Input[pulumi.InputType['WorkflowTriggerArgs']] trigger: The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
        :param pulumi.Input[str] workflow_name: Workflow name, up to 128 characters. The name is unique for the same user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps workflow

        ## Import

        mps workflow can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/workflow:Workflow workflow workflow_id
        ```

        :param str resource_name: The name of the resource.
        :param WorkflowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiAnalysisTaskArgs']]] = None,
                 ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiContentReviewTaskArgs']]] = None,
                 ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiRecognitionTaskArgs']]] = None,
                 media_process_task: Optional[pulumi.Input[pulumi.InputType['WorkflowMediaProcessTaskArgs']]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['WorkflowOutputStorageArgs']]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['WorkflowTaskNotifyConfigArgs']]] = None,
                 task_priority: Optional[pulumi.Input[int]] = None,
                 trigger: Optional[pulumi.Input[pulumi.InputType['WorkflowTriggerArgs']]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowArgs.__new__(WorkflowArgs)

            __props__.__dict__["ai_analysis_task"] = ai_analysis_task
            __props__.__dict__["ai_content_review_task"] = ai_content_review_task
            __props__.__dict__["ai_recognition_task"] = ai_recognition_task
            __props__.__dict__["media_process_task"] = media_process_task
            __props__.__dict__["output_dir"] = output_dir
            __props__.__dict__["output_storage"] = output_storage
            __props__.__dict__["task_notify_config"] = task_notify_config
            __props__.__dict__["task_priority"] = task_priority
            if trigger is None and not opts.urn:
                raise TypeError("Missing required property 'trigger'")
            __props__.__dict__["trigger"] = trigger
            if workflow_name is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_name'")
            __props__.__dict__["workflow_name"] = workflow_name
        super(Workflow, __self__).__init__(
            'tencentcloud:Mps/workflow:Workflow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiAnalysisTaskArgs']]] = None,
            ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiContentReviewTaskArgs']]] = None,
            ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['WorkflowAiRecognitionTaskArgs']]] = None,
            media_process_task: Optional[pulumi.Input[pulumi.InputType['WorkflowMediaProcessTaskArgs']]] = None,
            output_dir: Optional[pulumi.Input[str]] = None,
            output_storage: Optional[pulumi.Input[pulumi.InputType['WorkflowOutputStorageArgs']]] = None,
            task_notify_config: Optional[pulumi.Input[pulumi.InputType['WorkflowTaskNotifyConfigArgs']]] = None,
            task_priority: Optional[pulumi.Input[int]] = None,
            trigger: Optional[pulumi.Input[pulumi.InputType['WorkflowTriggerArgs']]] = None,
            workflow_name: Optional[pulumi.Input[str]] = None) -> 'Workflow':
        """
        Get an existing Workflow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['WorkflowAiAnalysisTaskArgs']] ai_analysis_task: Video Content Analysis Type Task Parameters.
        :param pulumi.Input[pulumi.InputType['WorkflowAiContentReviewTaskArgs']] ai_content_review_task: Video Content Moderation Type Task Parameters.
        :param pulumi.Input[pulumi.InputType['WorkflowAiRecognitionTaskArgs']] ai_recognition_task: Video content recognition type task parameters.
        :param pulumi.Input[pulumi.InputType['WorkflowMediaProcessTaskArgs']] media_process_task: Media Processing Type Task Parameters.
        :param pulumi.Input[str] output_dir: The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
        :param pulumi.Input[pulumi.InputType['WorkflowOutputStorageArgs']] output_storage: File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
        :param pulumi.Input[pulumi.InputType['WorkflowTaskNotifyConfigArgs']] task_notify_config: The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
        :param pulumi.Input[int] task_priority: The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
        :param pulumi.Input[pulumi.InputType['WorkflowTriggerArgs']] trigger: The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
        :param pulumi.Input[str] workflow_name: Workflow name, up to 128 characters. The name is unique for the same user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowState.__new__(_WorkflowState)

        __props__.__dict__["ai_analysis_task"] = ai_analysis_task
        __props__.__dict__["ai_content_review_task"] = ai_content_review_task
        __props__.__dict__["ai_recognition_task"] = ai_recognition_task
        __props__.__dict__["media_process_task"] = media_process_task
        __props__.__dict__["output_dir"] = output_dir
        __props__.__dict__["output_storage"] = output_storage
        __props__.__dict__["task_notify_config"] = task_notify_config
        __props__.__dict__["task_priority"] = task_priority
        __props__.__dict__["trigger"] = trigger
        __props__.__dict__["workflow_name"] = workflow_name
        return Workflow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> pulumi.Output[Optional['outputs.WorkflowAiAnalysisTask']]:
        """
        Video Content Analysis Type Task Parameters.
        """
        return pulumi.get(self, "ai_analysis_task")

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> pulumi.Output[Optional['outputs.WorkflowAiContentReviewTask']]:
        """
        Video Content Moderation Type Task Parameters.
        """
        return pulumi.get(self, "ai_content_review_task")

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> pulumi.Output[Optional['outputs.WorkflowAiRecognitionTask']]:
        """
        Video content recognition type task parameters.
        """
        return pulumi.get(self, "ai_recognition_task")

    @property
    @pulumi.getter(name="mediaProcessTask")
    def media_process_task(self) -> pulumi.Output[Optional['outputs.WorkflowMediaProcessTask']]:
        """
        Media Processing Type Task Parameters.
        """
        return pulumi.get(self, "media_process_task")

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> pulumi.Output[Optional[str]]:
        """
        The target directory of the output file generated by media processing, if not filled, it means that it is consistent with the directory where the trigger file is located.
        """
        return pulumi.get(self, "output_dir")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> pulumi.Output[Optional['outputs.WorkflowOutputStorage']]:
        """
        File output storage location for media processing. If left blank, the storage location in Trigger will be inherited.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> pulumi.Output[Optional['outputs.WorkflowTaskNotifyConfig']]:
        """
        The event notification configuration of the task, if it is not filled, it means that the event notification will not be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @property
    @pulumi.getter(name="taskPriority")
    def task_priority(self) -> pulumi.Output[Optional[int]]:
        """
        The priority of the workflow, the larger the value, the higher the priority, the value range is -10 to 10, and blank means 0.
        """
        return pulumi.get(self, "task_priority")

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Output['outputs.WorkflowTrigger']:
        """
        The trigger rule bound to the workflow, when the uploaded video hits the rule to this object, the workflow will be triggered.
        """
        return pulumi.get(self, "trigger")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> pulumi.Output[str]:
        """
        Workflow name, up to 128 characters. The name is unique for the same user.
        """
        return pulumi.get(self, "workflow_name")

