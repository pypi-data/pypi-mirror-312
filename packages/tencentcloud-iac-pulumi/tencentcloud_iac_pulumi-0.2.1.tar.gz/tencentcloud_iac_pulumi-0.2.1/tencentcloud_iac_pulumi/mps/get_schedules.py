# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSchedulesResult',
    'AwaitableGetSchedulesResult',
    'get_schedules',
    'get_schedules_output',
]

@pulumi.output_type
class GetSchedulesResult:
    """
    A collection of values returned by getSchedules.
    """
    def __init__(__self__, id=None, result_output_file=None, schedule_ids=None, schedule_info_sets=None, status=None, trigger_type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if schedule_ids and not isinstance(schedule_ids, list):
            raise TypeError("Expected argument 'schedule_ids' to be a list")
        pulumi.set(__self__, "schedule_ids", schedule_ids)
        if schedule_info_sets and not isinstance(schedule_info_sets, list):
            raise TypeError("Expected argument 'schedule_info_sets' to be a list")
        pulumi.set(__self__, "schedule_info_sets", schedule_info_sets)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if trigger_type and not isinstance(trigger_type, str):
            raise TypeError("Expected argument 'trigger_type' to be a str")
        pulumi.set(__self__, "trigger_type", trigger_type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="scheduleIds")
    def schedule_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "schedule_ids")

    @property
    @pulumi.getter(name="scheduleInfoSets")
    def schedule_info_sets(self) -> Sequence['outputs.GetSchedulesScheduleInfoSetResult']:
        """
        The information of the schemes.
        """
        return pulumi.get(self, "schedule_info_sets")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The scheme status. Valid values:`Enabled``Disabled`Note: This field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[str]:
        return pulumi.get(self, "trigger_type")


class AwaitableGetSchedulesResult(GetSchedulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchedulesResult(
            id=self.id,
            result_output_file=self.result_output_file,
            schedule_ids=self.schedule_ids,
            schedule_info_sets=self.schedule_info_sets,
            status=self.status,
            trigger_type=self.trigger_type)


def get_schedules(result_output_file: Optional[str] = None,
                  schedule_ids: Optional[Sequence[int]] = None,
                  status: Optional[str] = None,
                  trigger_type: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchedulesResult:
    """
    Use this data source to query detailed information of mps schedules

    ## Example Usage

    ### Query the enabled schedules.

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    schedules = tencentcloud.Mps.get_schedules(status="Enabled")
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    :param Sequence[int] schedule_ids: The IDs of the schemes to query. Array length limit: 100.
    :param str status: The scheme status. Valid values:`Enabled`, `Disabled`. If you do not specify this parameter, all schemes will be returned regardless of the status.
    :param str trigger_type: The trigger type. Valid values:`CosFileUpload`: The scheme is triggered when a file is uploaded to Tencent Cloud Object Storage (COS).`AwsS3FileUpload`: The scheme is triggered when a file is uploaded to AWS S3.If you do not specify this parameter or leave it empty, all schemes will be returned regardless of the trigger type.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    __args__['scheduleIds'] = schedule_ids
    __args__['status'] = status
    __args__['triggerType'] = trigger_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mps/getSchedules:getSchedules', __args__, opts=opts, typ=GetSchedulesResult).value

    return AwaitableGetSchedulesResult(
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        schedule_ids=pulumi.get(__ret__, 'schedule_ids'),
        schedule_info_sets=pulumi.get(__ret__, 'schedule_info_sets'),
        status=pulumi.get(__ret__, 'status'),
        trigger_type=pulumi.get(__ret__, 'trigger_type'))


@_utilities.lift_output_func(get_schedules)
def get_schedules_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         schedule_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                         status: Optional[pulumi.Input[Optional[str]]] = None,
                         trigger_type: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSchedulesResult]:
    """
    Use this data source to query detailed information of mps schedules

    ## Example Usage

    ### Query the enabled schedules.

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    schedules = tencentcloud.Mps.get_schedules(status="Enabled")
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    :param Sequence[int] schedule_ids: The IDs of the schemes to query. Array length limit: 100.
    :param str status: The scheme status. Valid values:`Enabled`, `Disabled`. If you do not specify this parameter, all schemes will be returned regardless of the status.
    :param str trigger_type: The trigger type. Valid values:`CosFileUpload`: The scheme is triggered when a file is uploaded to Tencent Cloud Object Storage (COS).`AwsS3FileUpload`: The scheme is triggered when a file is uploaded to AWS S3.If you do not specify this parameter or leave it empty, all schemes will be returned regardless of the trigger type.
    """
    ...
