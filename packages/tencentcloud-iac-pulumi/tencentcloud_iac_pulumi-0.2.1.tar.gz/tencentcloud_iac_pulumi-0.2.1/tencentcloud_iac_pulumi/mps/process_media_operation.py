# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProcessMediaOperationArgs', 'ProcessMediaOperation']

@pulumi.input_type
class ProcessMediaOperationArgs:
    def __init__(__self__, *,
                 input_info: pulumi.Input['ProcessMediaOperationInputInfoArgs'],
                 ai_analysis_task: Optional[pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs']] = None,
                 ai_content_review_task: Optional[pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs']] = None,
                 ai_quality_control_task: Optional[pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs']] = None,
                 ai_recognition_task: Optional[pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs']] = None,
                 media_process_task: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs']] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationOutputStorageArgs']] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs']] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ProcessMediaOperation resource.
        :param pulumi.Input['ProcessMediaOperationInputInfoArgs'] input_info: The information of the file to process.
        :param pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs'] ai_analysis_task: Video content analysis task parameter.
        :param pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs'] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs'] ai_quality_control_task: The parameters of a quality control task.
        :param pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs'] ai_recognition_task: Type parameter of a video content recognition task.
        :param pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs'] media_process_task: The media processing parameters to use.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        :param pulumi.Input['ProcessMediaOperationOutputStorageArgs'] output_storage: The storage location of the media processing output file. If this parameter is left empty, the storage location in `InputInfo` will be inherited.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you manually call this API to start a scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[str] task_type: The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the system is idle (within three days by default).
        :param pulumi.Input[int] tasks_priority: Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left empty, 0 will be used.
        """
        pulumi.set(__self__, "input_info", input_info)
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_quality_control_task is not None:
            pulumi.set(__self__, "ai_quality_control_task", ai_quality_control_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if media_process_task is not None:
            pulumi.set(__self__, "media_process_task", media_process_task)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if tasks_priority is not None:
            pulumi.set(__self__, "tasks_priority", tasks_priority)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> pulumi.Input['ProcessMediaOperationInputInfoArgs']:
        """
        The information of the file to process.
        """
        return pulumi.get(self, "input_info")

    @input_info.setter
    def input_info(self, value: pulumi.Input['ProcessMediaOperationInputInfoArgs']):
        pulumi.set(self, "input_info", value)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs']]:
        """
        Video content analysis task parameter.
        """
        return pulumi.get(self, "ai_analysis_task")

    @ai_analysis_task.setter
    def ai_analysis_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs']]):
        pulumi.set(self, "ai_analysis_task", value)

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs']]:
        """
        Type parameter of a video content audit task.
        """
        return pulumi.get(self, "ai_content_review_task")

    @ai_content_review_task.setter
    def ai_content_review_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs']]):
        pulumi.set(self, "ai_content_review_task", value)

    @property
    @pulumi.getter(name="aiQualityControlTask")
    def ai_quality_control_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs']]:
        """
        The parameters of a quality control task.
        """
        return pulumi.get(self, "ai_quality_control_task")

    @ai_quality_control_task.setter
    def ai_quality_control_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs']]):
        pulumi.set(self, "ai_quality_control_task", value)

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs']]:
        """
        Type parameter of a video content recognition task.
        """
        return pulumi.get(self, "ai_recognition_task")

    @ai_recognition_task.setter
    def ai_recognition_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs']]):
        pulumi.set(self, "ai_recognition_task", value)

    @property
    @pulumi.getter(name="mediaProcessTask")
    def media_process_task(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs']]:
        """
        The media processing parameters to use.
        """
        return pulumi.get(self, "media_process_task")

    @media_process_task.setter
    def media_process_task(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs']]):
        pulumi.set(self, "media_process_task", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationOutputStorageArgs']]:
        """
        The storage location of the media processing output file. If this parameter is left empty, the storage location in `InputInfo` will be inherited.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[int]]:
        """
        The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you manually call this API to start a scheme.
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs']]:
        """
        Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the system is idle (within three days by default).
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="tasksPriority")
    def tasks_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left empty, 0 will be used.
        """
        return pulumi.get(self, "tasks_priority")

    @tasks_priority.setter
    def tasks_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tasks_priority", value)


@pulumi.input_type
class _ProcessMediaOperationState:
    def __init__(__self__, *,
                 ai_analysis_task: Optional[pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs']] = None,
                 ai_content_review_task: Optional[pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs']] = None,
                 ai_quality_control_task: Optional[pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs']] = None,
                 ai_recognition_task: Optional[pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs']] = None,
                 input_info: Optional[pulumi.Input['ProcessMediaOperationInputInfoArgs']] = None,
                 media_process_task: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs']] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessMediaOperationOutputStorageArgs']] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs']] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ProcessMediaOperation resources.
        :param pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs'] ai_analysis_task: Video content analysis task parameter.
        :param pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs'] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs'] ai_quality_control_task: The parameters of a quality control task.
        :param pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs'] ai_recognition_task: Type parameter of a video content recognition task.
        :param pulumi.Input['ProcessMediaOperationInputInfoArgs'] input_info: The information of the file to process.
        :param pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs'] media_process_task: The media processing parameters to use.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        :param pulumi.Input['ProcessMediaOperationOutputStorageArgs'] output_storage: The storage location of the media processing output file. If this parameter is left empty, the storage location in `InputInfo` will be inherited.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you manually call this API to start a scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[str] task_type: The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the system is idle (within three days by default).
        :param pulumi.Input[int] tasks_priority: Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left empty, 0 will be used.
        """
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_quality_control_task is not None:
            pulumi.set(__self__, "ai_quality_control_task", ai_quality_control_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if input_info is not None:
            pulumi.set(__self__, "input_info", input_info)
        if media_process_task is not None:
            pulumi.set(__self__, "media_process_task", media_process_task)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if tasks_priority is not None:
            pulumi.set(__self__, "tasks_priority", tasks_priority)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs']]:
        """
        Video content analysis task parameter.
        """
        return pulumi.get(self, "ai_analysis_task")

    @ai_analysis_task.setter
    def ai_analysis_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiAnalysisTaskArgs']]):
        pulumi.set(self, "ai_analysis_task", value)

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs']]:
        """
        Type parameter of a video content audit task.
        """
        return pulumi.get(self, "ai_content_review_task")

    @ai_content_review_task.setter
    def ai_content_review_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiContentReviewTaskArgs']]):
        pulumi.set(self, "ai_content_review_task", value)

    @property
    @pulumi.getter(name="aiQualityControlTask")
    def ai_quality_control_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs']]:
        """
        The parameters of a quality control task.
        """
        return pulumi.get(self, "ai_quality_control_task")

    @ai_quality_control_task.setter
    def ai_quality_control_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiQualityControlTaskArgs']]):
        pulumi.set(self, "ai_quality_control_task", value)

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional[pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs']]:
        """
        Type parameter of a video content recognition task.
        """
        return pulumi.get(self, "ai_recognition_task")

    @ai_recognition_task.setter
    def ai_recognition_task(self, value: Optional[pulumi.Input['ProcessMediaOperationAiRecognitionTaskArgs']]):
        pulumi.set(self, "ai_recognition_task", value)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> Optional[pulumi.Input['ProcessMediaOperationInputInfoArgs']]:
        """
        The information of the file to process.
        """
        return pulumi.get(self, "input_info")

    @input_info.setter
    def input_info(self, value: Optional[pulumi.Input['ProcessMediaOperationInputInfoArgs']]):
        pulumi.set(self, "input_info", value)

    @property
    @pulumi.getter(name="mediaProcessTask")
    def media_process_task(self) -> Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs']]:
        """
        The media processing parameters to use.
        """
        return pulumi.get(self, "media_process_task")

    @media_process_task.setter
    def media_process_task(self, value: Optional[pulumi.Input['ProcessMediaOperationMediaProcessTaskArgs']]):
        pulumi.set(self, "media_process_task", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessMediaOperationOutputStorageArgs']]:
        """
        The storage location of the media processing output file. If this parameter is left empty, the storage location in `InputInfo` will be inherited.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessMediaOperationOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[int]]:
        """
        The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you manually call this API to start a scheme.
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs']]:
        """
        Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['ProcessMediaOperationTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        """
        The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the system is idle (within three days by default).
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="tasksPriority")
    def tasks_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left empty, 0 will be used.
        """
        return pulumi.get(self, "tasks_priority")

    @tasks_priority.setter
    def tasks_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tasks_priority", value)


class ProcessMediaOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiAnalysisTaskArgs']]] = None,
                 ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiContentReviewTaskArgs']]] = None,
                 ai_quality_control_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiQualityControlTaskArgs']]] = None,
                 ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiRecognitionTaskArgs']]] = None,
                 input_info: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationInputInfoArgs']]] = None,
                 media_process_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationMediaProcessTaskArgs']]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationOutputStorageArgs']]] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationTaskNotifyConfigArgs']]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps process_media_operation

        ## Example Usage

        ### Process mps media through CMQ

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        output = tencentcloud.cos.Bucket("output",
            bucket=f"tf-bucket-mps-edit-media-output-{local['app_id']}",
            force_clean=True,
            acl="public-read")
        object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
            key="/mps-test/test.mov")
        operation = tencentcloud.mps.ProcessMediaOperation("operation",
            input_info=tencentcloud.mps.ProcessMediaOperationInputInfoArgs(
                type="COS",
                cos_input_info=tencentcloud.mps.ProcessMediaOperationInputInfoCosInputInfoArgs(
                    bucket=object.bucket,
                    region="%s",
                    object=object.key,
                ),
            ),
            output_storage=tencentcloud.mps.ProcessMediaOperationOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.ProcessMediaOperationOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_dir="output/",
            ai_content_review_task=tencentcloud.mps.ProcessMediaOperationAiContentReviewTaskArgs(
                definition=10,
            ),
            ai_recognition_task=tencentcloud.mps.ProcessMediaOperationAiRecognitionTaskArgs(
                definition=10,
            ),
            task_notify_config=tencentcloud.mps.ProcessMediaOperationTaskNotifyConfigArgs(
                cmq_model="Queue",
                cmq_region="gz",
                queue_name="test",
                topic_name="test",
                notify_type="CMQ",
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiAnalysisTaskArgs']] ai_analysis_task: Video content analysis task parameter.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiContentReviewTaskArgs']] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiQualityControlTaskArgs']] ai_quality_control_task: The parameters of a quality control task.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiRecognitionTaskArgs']] ai_recognition_task: Type parameter of a video content recognition task.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationInputInfoArgs']] input_info: The information of the file to process.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationMediaProcessTaskArgs']] media_process_task: The media processing parameters to use.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationOutputStorageArgs']] output_storage: The storage location of the media processing output file. If this parameter is left empty, the storage location in `InputInfo` will be inherited.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you manually call this API to start a scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[str] task_type: The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the system is idle (within three days by default).
        :param pulumi.Input[int] tasks_priority: Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left empty, 0 will be used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProcessMediaOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps process_media_operation

        ## Example Usage

        ### Process mps media through CMQ

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        output = tencentcloud.cos.Bucket("output",
            bucket=f"tf-bucket-mps-edit-media-output-{local['app_id']}",
            force_clean=True,
            acl="public-read")
        object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
            key="/mps-test/test.mov")
        operation = tencentcloud.mps.ProcessMediaOperation("operation",
            input_info=tencentcloud.mps.ProcessMediaOperationInputInfoArgs(
                type="COS",
                cos_input_info=tencentcloud.mps.ProcessMediaOperationInputInfoCosInputInfoArgs(
                    bucket=object.bucket,
                    region="%s",
                    object=object.key,
                ),
            ),
            output_storage=tencentcloud.mps.ProcessMediaOperationOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.ProcessMediaOperationOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_dir="output/",
            ai_content_review_task=tencentcloud.mps.ProcessMediaOperationAiContentReviewTaskArgs(
                definition=10,
            ),
            ai_recognition_task=tencentcloud.mps.ProcessMediaOperationAiRecognitionTaskArgs(
                definition=10,
            ),
            task_notify_config=tencentcloud.mps.ProcessMediaOperationTaskNotifyConfigArgs(
                cmq_model="Queue",
                cmq_region="gz",
                queue_name="test",
                topic_name="test",
                notify_type="CMQ",
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ProcessMediaOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProcessMediaOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiAnalysisTaskArgs']]] = None,
                 ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiContentReviewTaskArgs']]] = None,
                 ai_quality_control_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiQualityControlTaskArgs']]] = None,
                 ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiRecognitionTaskArgs']]] = None,
                 input_info: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationInputInfoArgs']]] = None,
                 media_process_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationMediaProcessTaskArgs']]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationOutputStorageArgs']]] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationTaskNotifyConfigArgs']]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProcessMediaOperationArgs.__new__(ProcessMediaOperationArgs)

            __props__.__dict__["ai_analysis_task"] = ai_analysis_task
            __props__.__dict__["ai_content_review_task"] = ai_content_review_task
            __props__.__dict__["ai_quality_control_task"] = ai_quality_control_task
            __props__.__dict__["ai_recognition_task"] = ai_recognition_task
            if input_info is None and not opts.urn:
                raise TypeError("Missing required property 'input_info'")
            __props__.__dict__["input_info"] = input_info
            __props__.__dict__["media_process_task"] = media_process_task
            __props__.__dict__["output_dir"] = output_dir
            __props__.__dict__["output_storage"] = output_storage
            __props__.__dict__["schedule_id"] = schedule_id
            __props__.__dict__["session_context"] = session_context
            __props__.__dict__["session_id"] = session_id
            __props__.__dict__["task_notify_config"] = task_notify_config
            __props__.__dict__["task_type"] = task_type
            __props__.__dict__["tasks_priority"] = tasks_priority
        super(ProcessMediaOperation, __self__).__init__(
            'tencentcloud:Mps/processMediaOperation:ProcessMediaOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiAnalysisTaskArgs']]] = None,
            ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiContentReviewTaskArgs']]] = None,
            ai_quality_control_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiQualityControlTaskArgs']]] = None,
            ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationAiRecognitionTaskArgs']]] = None,
            input_info: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationInputInfoArgs']]] = None,
            media_process_task: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationMediaProcessTaskArgs']]] = None,
            output_dir: Optional[pulumi.Input[str]] = None,
            output_storage: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationOutputStorageArgs']]] = None,
            schedule_id: Optional[pulumi.Input[int]] = None,
            session_context: Optional[pulumi.Input[str]] = None,
            session_id: Optional[pulumi.Input[str]] = None,
            task_notify_config: Optional[pulumi.Input[pulumi.InputType['ProcessMediaOperationTaskNotifyConfigArgs']]] = None,
            task_type: Optional[pulumi.Input[str]] = None,
            tasks_priority: Optional[pulumi.Input[int]] = None) -> 'ProcessMediaOperation':
        """
        Get an existing ProcessMediaOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiAnalysisTaskArgs']] ai_analysis_task: Video content analysis task parameter.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiContentReviewTaskArgs']] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiQualityControlTaskArgs']] ai_quality_control_task: The parameters of a quality control task.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationAiRecognitionTaskArgs']] ai_recognition_task: Type parameter of a video content recognition task.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationInputInfoArgs']] input_info: The information of the file to process.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationMediaProcessTaskArgs']] media_process_task: The media processing parameters to use.
        :param pulumi.Input[str] output_dir: The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationOutputStorageArgs']] output_storage: The storage location of the media processing output file. If this parameter is left empty, the storage location in `InputInfo` will be inherited.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you manually call this API to start a scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input[pulumi.InputType['ProcessMediaOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[str] task_type: The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the system is idle (within three days by default).
        :param pulumi.Input[int] tasks_priority: Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left empty, 0 will be used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProcessMediaOperationState.__new__(_ProcessMediaOperationState)

        __props__.__dict__["ai_analysis_task"] = ai_analysis_task
        __props__.__dict__["ai_content_review_task"] = ai_content_review_task
        __props__.__dict__["ai_quality_control_task"] = ai_quality_control_task
        __props__.__dict__["ai_recognition_task"] = ai_recognition_task
        __props__.__dict__["input_info"] = input_info
        __props__.__dict__["media_process_task"] = media_process_task
        __props__.__dict__["output_dir"] = output_dir
        __props__.__dict__["output_storage"] = output_storage
        __props__.__dict__["schedule_id"] = schedule_id
        __props__.__dict__["session_context"] = session_context
        __props__.__dict__["session_id"] = session_id
        __props__.__dict__["task_notify_config"] = task_notify_config
        __props__.__dict__["task_type"] = task_type
        __props__.__dict__["tasks_priority"] = tasks_priority
        return ProcessMediaOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> pulumi.Output[Optional['outputs.ProcessMediaOperationAiAnalysisTask']]:
        """
        Video content analysis task parameter.
        """
        return pulumi.get(self, "ai_analysis_task")

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> pulumi.Output[Optional['outputs.ProcessMediaOperationAiContentReviewTask']]:
        """
        Type parameter of a video content audit task.
        """
        return pulumi.get(self, "ai_content_review_task")

    @property
    @pulumi.getter(name="aiQualityControlTask")
    def ai_quality_control_task(self) -> pulumi.Output[Optional['outputs.ProcessMediaOperationAiQualityControlTask']]:
        """
        The parameters of a quality control task.
        """
        return pulumi.get(self, "ai_quality_control_task")

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> pulumi.Output[Optional['outputs.ProcessMediaOperationAiRecognitionTask']]:
        """
        Type parameter of a video content recognition task.
        """
        return pulumi.get(self, "ai_recognition_task")

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> pulumi.Output['outputs.ProcessMediaOperationInputInfo']:
        """
        The information of the file to process.
        """
        return pulumi.get(self, "input_info")

    @property
    @pulumi.getter(name="mediaProcessTask")
    def media_process_task(self) -> pulumi.Output[Optional['outputs.ProcessMediaOperationMediaProcessTask']]:
        """
        The media processing parameters to use.
        """
        return pulumi.get(self, "media_process_task")

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> pulumi.Output[Optional[str]]:
        """
        The directory to save the media processing output file, which must start and end with `/`, such as `/movie/201907/`.If you do not specify this parameter, the file will be saved to the directory specified in `InputInfo`.
        """
        return pulumi.get(self, "output_dir")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> pulumi.Output[Optional['outputs.ProcessMediaOperationOutputStorage']]:
        """
        The storage location of the media processing output file. If this parameter is left empty, the storage location in `InputInfo` will be inherited.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[Optional[int]]:
        """
        The scheme ID.Note 1: About `OutputStorage` and `OutputDir`If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.Note 3: The trigger configured for a scheme is for automatically starting a scheme. It stops working when you manually call this API to start a scheme.
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> pulumi.Output[Optional[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> pulumi.Output[Optional['outputs.ProcessMediaOperationTaskNotifyConfig']]:
        """
        Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Output[Optional[str]]:
        """
        The task type. `Online` (default): A task that is executed immediately. `Offline`: A task that is executed when the system is idle (within three days by default).
        """
        return pulumi.get(self, "task_type")

    @property
    @pulumi.getter(name="tasksPriority")
    def tasks_priority(self) -> pulumi.Output[Optional[int]]:
        """
        Task flow priority. The higher the value, the higher the priority. Value range: [-10, 10]. If this parameter is left empty, 0 will be used.
        """
        return pulumi.get(self, "tasks_priority")

