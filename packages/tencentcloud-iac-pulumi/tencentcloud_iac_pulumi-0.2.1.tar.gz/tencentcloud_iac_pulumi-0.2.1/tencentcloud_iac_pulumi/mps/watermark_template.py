# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WatermarkTemplateArgs', 'WatermarkTemplate']

@pulumi.input_type
class WatermarkTemplateArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 svg_template: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']] = None,
                 text_template: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WatermarkTemplate resource.
        :param pulumi.Input[str] type: Watermark type, optional value:image, text, svg.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position, optional value:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.TopRight: Indicates that the origin of the coordinates is at the upper right corner of the video image, and the origin of the watermark is at the upper right corner of the picture or text.BottomLeft: Indicates that the origin of the coordinates is at the lower left corner of the video image, and the origin of the watermark is the lower left corner of the picture or text.BottomRight: Indicates that the origin of the coordinates is at the lower right corner of the video image, and the origin of the watermark is at the lower right corner of the picture or text.Default value: TopLeft.
        :param pulumi.Input['WatermarkTemplateImageTemplateArgs'] image_template: Image watermark template, only when Type is image, this field is required and valid.
        :param pulumi.Input[str] name: Watermark template name, length limit: 64 characters.
        :param pulumi.Input['WatermarkTemplateSvgTemplateArgs'] svg_template: SVG watermark template, only when Type is svg, this field is required and valid.
        :param pulumi.Input['WatermarkTemplateTextTemplateArgs'] text_template: Text watermark template, only when Type is text, this field is required and valid.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default value: 0px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default value: 0px.
        """
        pulumi.set(__self__, "type", type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if svg_template is not None:
            pulumi.set(__self__, "svg_template", svg_template)
        if text_template is not None:
            pulumi.set(__self__, "text_template", text_template)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Watermark type, optional value:image, text, svg.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Origin position, optional value:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.TopRight: Indicates that the origin of the coordinates is at the upper right corner of the video image, and the origin of the watermark is at the upper right corner of the picture or text.BottomLeft: Indicates that the origin of the coordinates is at the lower left corner of the video image, and the origin of the watermark is the lower left corner of the picture or text.BottomRight: Indicates that the origin of the coordinates is at the lower right corner of the video image, and the origin of the watermark is at the lower right corner of the picture or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]:
        """
        Image watermark template, only when Type is image, this field is required and valid.
        """
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Watermark template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="svgTemplate")
    def svg_template(self) -> Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]:
        """
        SVG watermark template, only when Type is svg, this field is required and valid.
        """
        return pulumi.get(self, "svg_template")

    @svg_template.setter
    def svg_template(self, value: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]):
        pulumi.set(self, "svg_template", value)

    @property
    @pulumi.getter(name="textTemplate")
    def text_template(self) -> Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]:
        """
        Text watermark template, only when Type is text, this field is required and valid.
        """
        return pulumi.get(self, "text_template")

    @text_template.setter
    def text_template(self, value: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]):
        pulumi.set(self, "text_template", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default value: 0px.
        """
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default value: 0px.
        """
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


@pulumi.input_type
class _WatermarkTemplateState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 svg_template: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']] = None,
                 text_template: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WatermarkTemplate resources.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position, optional value:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.TopRight: Indicates that the origin of the coordinates is at the upper right corner of the video image, and the origin of the watermark is at the upper right corner of the picture or text.BottomLeft: Indicates that the origin of the coordinates is at the lower left corner of the video image, and the origin of the watermark is the lower left corner of the picture or text.BottomRight: Indicates that the origin of the coordinates is at the lower right corner of the video image, and the origin of the watermark is at the lower right corner of the picture or text.Default value: TopLeft.
        :param pulumi.Input['WatermarkTemplateImageTemplateArgs'] image_template: Image watermark template, only when Type is image, this field is required and valid.
        :param pulumi.Input[str] name: Watermark template name, length limit: 64 characters.
        :param pulumi.Input['WatermarkTemplateSvgTemplateArgs'] svg_template: SVG watermark template, only when Type is svg, this field is required and valid.
        :param pulumi.Input['WatermarkTemplateTextTemplateArgs'] text_template: Text watermark template, only when Type is text, this field is required and valid.
        :param pulumi.Input[str] type: Watermark type, optional value:image, text, svg.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default value: 0px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default value: 0px.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if coordinate_origin is not None:
            pulumi.set(__self__, "coordinate_origin", coordinate_origin)
        if image_template is not None:
            pulumi.set(__self__, "image_template", image_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if svg_template is not None:
            pulumi.set(__self__, "svg_template", svg_template)
        if text_template is not None:
            pulumi.set(__self__, "text_template", text_template)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if x_pos is not None:
            pulumi.set(__self__, "x_pos", x_pos)
        if y_pos is not None:
            pulumi.set(__self__, "y_pos", y_pos)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Origin position, optional value:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.TopRight: Indicates that the origin of the coordinates is at the upper right corner of the video image, and the origin of the watermark is at the upper right corner of the picture or text.BottomLeft: Indicates that the origin of the coordinates is at the lower left corner of the video image, and the origin of the watermark is the lower left corner of the picture or text.BottomRight: Indicates that the origin of the coordinates is at the lower right corner of the video image, and the origin of the watermark is at the lower right corner of the picture or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @coordinate_origin.setter
    def coordinate_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "coordinate_origin", value)

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]:
        """
        Image watermark template, only when Type is image, this field is required and valid.
        """
        return pulumi.get(self, "image_template")

    @image_template.setter
    def image_template(self, value: Optional[pulumi.Input['WatermarkTemplateImageTemplateArgs']]):
        pulumi.set(self, "image_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Watermark template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="svgTemplate")
    def svg_template(self) -> Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]:
        """
        SVG watermark template, only when Type is svg, this field is required and valid.
        """
        return pulumi.get(self, "svg_template")

    @svg_template.setter
    def svg_template(self, value: Optional[pulumi.Input['WatermarkTemplateSvgTemplateArgs']]):
        pulumi.set(self, "svg_template", value)

    @property
    @pulumi.getter(name="textTemplate")
    def text_template(self) -> Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]:
        """
        Text watermark template, only when Type is text, this field is required and valid.
        """
        return pulumi.get(self, "text_template")

    @text_template.setter
    def text_template(self, value: Optional[pulumi.Input['WatermarkTemplateTextTemplateArgs']]):
        pulumi.set(self, "text_template", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Watermark type, optional value:image, text, svg.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default value: 0px.
        """
        return pulumi.get(self, "x_pos")

    @x_pos.setter
    def x_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x_pos", value)

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default value: 0px.
        """
        return pulumi.get(self, "y_pos")

    @y_pos.setter
    def y_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y_pos", value)


class WatermarkTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 svg_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']]] = None,
                 text_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps watermark_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import base64
        import tencentcloud_iac_pulumi as tencentcloud

        watermark_template = tencentcloud.mps.WatermarkTemplate("watermarkTemplate",
            coordinate_origin="TopLeft",
            type="image",
            x_pos="12%",
            y_pos="21%",
            image_template=tencentcloud.mps.WatermarkTemplateImageTemplateArgs(
                height="17px",
                image_content=(lambda path: base64.b64encode(open(path).read().encode()).decode())("./logo.png"),
                repeat_type="repeat",
                width="12px",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps watermark_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/watermarkTemplate:WatermarkTemplate watermark_template watermark_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position, optional value:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.TopRight: Indicates that the origin of the coordinates is at the upper right corner of the video image, and the origin of the watermark is at the upper right corner of the picture or text.BottomLeft: Indicates that the origin of the coordinates is at the lower left corner of the video image, and the origin of the watermark is the lower left corner of the picture or text.BottomRight: Indicates that the origin of the coordinates is at the lower right corner of the video image, and the origin of the watermark is at the lower right corner of the picture or text.Default value: TopLeft.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']] image_template: Image watermark template, only when Type is image, this field is required and valid.
        :param pulumi.Input[str] name: Watermark template name, length limit: 64 characters.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']] svg_template: SVG watermark template, only when Type is svg, this field is required and valid.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']] text_template: Text watermark template, only when Type is text, this field is required and valid.
        :param pulumi.Input[str] type: Watermark type, optional value:image, text, svg.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default value: 0px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default value: 0px.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WatermarkTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps watermark_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import base64
        import tencentcloud_iac_pulumi as tencentcloud

        watermark_template = tencentcloud.mps.WatermarkTemplate("watermarkTemplate",
            coordinate_origin="TopLeft",
            type="image",
            x_pos="12%",
            y_pos="21%",
            image_template=tencentcloud.mps.WatermarkTemplateImageTemplateArgs(
                height="17px",
                image_content=(lambda path: base64.b64encode(open(path).read().encode()).decode())("./logo.png"),
                repeat_type="repeat",
                width="12px",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps watermark_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/watermarkTemplate:WatermarkTemplate watermark_template watermark_template_id
        ```

        :param str resource_name: The name of the resource.
        :param WatermarkTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WatermarkTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 coordinate_origin: Optional[pulumi.Input[str]] = None,
                 image_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 svg_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']]] = None,
                 text_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 x_pos: Optional[pulumi.Input[str]] = None,
                 y_pos: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WatermarkTemplateArgs.__new__(WatermarkTemplateArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["coordinate_origin"] = coordinate_origin
            __props__.__dict__["image_template"] = image_template
            __props__.__dict__["name"] = name
            __props__.__dict__["svg_template"] = svg_template
            __props__.__dict__["text_template"] = text_template
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["x_pos"] = x_pos
            __props__.__dict__["y_pos"] = y_pos
        super(WatermarkTemplate, __self__).__init__(
            'tencentcloud:Mps/watermarkTemplate:WatermarkTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            coordinate_origin: Optional[pulumi.Input[str]] = None,
            image_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            svg_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']]] = None,
            text_template: Optional[pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None,
            x_pos: Optional[pulumi.Input[str]] = None,
            y_pos: Optional[pulumi.Input[str]] = None) -> 'WatermarkTemplate':
        """
        Get an existing WatermarkTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] coordinate_origin: Origin position, optional value:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.TopRight: Indicates that the origin of the coordinates is at the upper right corner of the video image, and the origin of the watermark is at the upper right corner of the picture or text.BottomLeft: Indicates that the origin of the coordinates is at the lower left corner of the video image, and the origin of the watermark is the lower left corner of the picture or text.BottomRight: Indicates that the origin of the coordinates is at the lower right corner of the video image, and the origin of the watermark is at the lower right corner of the picture or text.Default value: TopLeft.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateImageTemplateArgs']] image_template: Image watermark template, only when Type is image, this field is required and valid.
        :param pulumi.Input[str] name: Watermark template name, length limit: 64 characters.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateSvgTemplateArgs']] svg_template: SVG watermark template, only when Type is svg, this field is required and valid.
        :param pulumi.Input[pulumi.InputType['WatermarkTemplateTextTemplateArgs']] text_template: Text watermark template, only when Type is text, this field is required and valid.
        :param pulumi.Input[str] type: Watermark type, optional value:image, text, svg.
        :param pulumi.Input[str] x_pos: The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default value: 0px.
        :param pulumi.Input[str] y_pos: The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default value: 0px.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WatermarkTemplateState.__new__(_WatermarkTemplateState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["coordinate_origin"] = coordinate_origin
        __props__.__dict__["image_template"] = image_template
        __props__.__dict__["name"] = name
        __props__.__dict__["svg_template"] = svg_template
        __props__.__dict__["text_template"] = text_template
        __props__.__dict__["type"] = type
        __props__.__dict__["x_pos"] = x_pos
        __props__.__dict__["y_pos"] = y_pos
        return WatermarkTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="coordinateOrigin")
    def coordinate_origin(self) -> pulumi.Output[Optional[str]]:
        """
        Origin position, optional value:TopLeft: Indicates that the origin of the coordinates is at the upper left corner of the video image, and the origin of the watermark is the upper left corner of the picture or text.TopRight: Indicates that the origin of the coordinates is at the upper right corner of the video image, and the origin of the watermark is at the upper right corner of the picture or text.BottomLeft: Indicates that the origin of the coordinates is at the lower left corner of the video image, and the origin of the watermark is the lower left corner of the picture or text.BottomRight: Indicates that the origin of the coordinates is at the lower right corner of the video image, and the origin of the watermark is at the lower right corner of the picture or text.Default value: TopLeft.
        """
        return pulumi.get(self, "coordinate_origin")

    @property
    @pulumi.getter(name="imageTemplate")
    def image_template(self) -> pulumi.Output[Optional['outputs.WatermarkTemplateImageTemplate']]:
        """
        Image watermark template, only when Type is image, this field is required and valid.
        """
        return pulumi.get(self, "image_template")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Watermark template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="svgTemplate")
    def svg_template(self) -> pulumi.Output[Optional['outputs.WatermarkTemplateSvgTemplate']]:
        """
        SVG watermark template, only when Type is svg, this field is required and valid.
        """
        return pulumi.get(self, "svg_template")

    @property
    @pulumi.getter(name="textTemplate")
    def text_template(self) -> pulumi.Output[Optional['outputs.WatermarkTemplateTextTemplate']]:
        """
        Text watermark template, only when Type is text, this field is required and valid.
        """
        return pulumi.get(self, "text_template")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Watermark type, optional value:image, text, svg.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="xPos")
    def x_pos(self) -> pulumi.Output[Optional[str]]:
        """
        The horizontal position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark XPos specifies a percentage for the video width, such as 10% means that XPos is 10% of the video width.When the string ends with px, it means that the watermark XPos is the specified pixel, such as 100px means that the XPos is 100 pixels.Default value: 0px.
        """
        return pulumi.get(self, "x_pos")

    @property
    @pulumi.getter(name="yPos")
    def y_pos(self) -> pulumi.Output[Optional[str]]:
        """
        The vertical position of the origin of the watermark from the origin of the coordinates of the video image. Support %, px two formats.When the string ends with %, it means that the watermark YPos specifies a percentage for the video height, such as 10% means that YPos is 10% of the video height.When the string ends with px, it means that the watermark YPos is the specified pixel, such as 100px means that the YPos is 100 pixels.Default value: 0px.
        """
        return pulumi.get(self, "y_pos")

