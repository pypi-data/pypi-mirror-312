# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AdaptiveDynamicStreamingTemplateArgs', 'AdaptiveDynamicStreamingTemplate']

@pulumi.input_type
class AdaptiveDynamicStreamingTemplateArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 stream_infos: pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]],
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_higher_video_bitrate: Optional[pulumi.Input[int]] = None,
                 disable_higher_video_resolution: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AdaptiveDynamicStreamingTemplate resource.
        :param pulumi.Input[str] format: Adaptive transcoding format, value range:HLS, MPEG-DASH.
        :param pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]] stream_infos: Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame rate.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[int] disable_higher_video_bitrate: Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[int] disable_higher_video_resolution: Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[str] name: Template name, length limit: 64 characters.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "stream_infos", stream_infos)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disable_higher_video_bitrate is not None:
            pulumi.set(__self__, "disable_higher_video_bitrate", disable_higher_video_bitrate)
        if disable_higher_video_resolution is not None:
            pulumi.set(__self__, "disable_higher_video_resolution", disable_higher_video_resolution)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        Adaptive transcoding format, value range:HLS, MPEG-DASH.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="streamInfos")
    def stream_infos(self) -> pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]:
        """
        Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame rate.
        """
        return pulumi.get(self, "stream_infos")

    @stream_infos.setter
    def stream_infos(self, value: pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]):
        pulumi.set(self, "stream_infos", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="disableHigherVideoBitrate")
    def disable_higher_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
        """
        return pulumi.get(self, "disable_higher_video_bitrate")

    @disable_higher_video_bitrate.setter
    def disable_higher_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disable_higher_video_bitrate", value)

    @property
    @pulumi.getter(name="disableHigherVideoResolution")
    def disable_higher_video_resolution(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
        """
        return pulumi.get(self, "disable_higher_video_resolution")

    @disable_higher_video_resolution.setter
    def disable_higher_video_resolution(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disable_higher_video_resolution", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AdaptiveDynamicStreamingTemplateState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_higher_video_bitrate: Optional[pulumi.Input[int]] = None,
                 disable_higher_video_resolution: Optional[pulumi.Input[int]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stream_infos: Optional[pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]] = None):
        """
        Input properties used for looking up and filtering AdaptiveDynamicStreamingTemplate resources.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[int] disable_higher_video_bitrate: Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[int] disable_higher_video_resolution: Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[str] format: Adaptive transcoding format, value range:HLS, MPEG-DASH.
        :param pulumi.Input[str] name: Template name, length limit: 64 characters.
        :param pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]] stream_infos: Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame rate.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if disable_higher_video_bitrate is not None:
            pulumi.set(__self__, "disable_higher_video_bitrate", disable_higher_video_bitrate)
        if disable_higher_video_resolution is not None:
            pulumi.set(__self__, "disable_higher_video_resolution", disable_higher_video_resolution)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stream_infos is not None:
            pulumi.set(__self__, "stream_infos", stream_infos)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="disableHigherVideoBitrate")
    def disable_higher_video_bitrate(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
        """
        return pulumi.get(self, "disable_higher_video_bitrate")

    @disable_higher_video_bitrate.setter
    def disable_higher_video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disable_higher_video_bitrate", value)

    @property
    @pulumi.getter(name="disableHigherVideoResolution")
    def disable_higher_video_resolution(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
        """
        return pulumi.get(self, "disable_higher_video_resolution")

    @disable_higher_video_resolution.setter
    def disable_higher_video_resolution(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "disable_higher_video_resolution", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Adaptive transcoding format, value range:HLS, MPEG-DASH.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="streamInfos")
    def stream_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]]:
        """
        Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame rate.
        """
        return pulumi.get(self, "stream_infos")

    @stream_infos.setter
    def stream_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]]):
        pulumi.set(self, "stream_infos", value)


class AdaptiveDynamicStreamingTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_higher_video_bitrate: Optional[pulumi.Input[int]] = None,
                 disable_higher_video_resolution: Optional[pulumi.Input[int]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stream_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps adaptive_dynamic_streaming_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        adaptive_dynamic_streaming_template = tencentcloud.mps.AdaptiveDynamicStreamingTemplate("adaptiveDynamicStreamingTemplate",
            comment="terrraform test",
            disable_higher_video_bitrate=0,
            disable_higher_video_resolution=1,
            format="HLS",
            stream_infos=[
                tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    audio=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        audio_channel=1,
                        bitrate=55,
                        codec="libmp3lame",
                        sample_rate=32000,
                    ),
                    remove_audio=0,
                    remove_video=0,
                    video=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        bitrate=245,
                        codec="libx264",
                        fill_type="black",
                        fps=30,
                        gop=0,
                        height=135,
                        resolution_adaptive="open",
                        vcrf=0,
                        width=145,
                    ),
                ),
                tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    audio=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        audio_channel=2,
                        bitrate=60,
                        codec="libfdk_aac",
                        sample_rate=32000,
                    ),
                    remove_audio=0,
                    remove_video=0,
                    video=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        bitrate=400,
                        codec="libx264",
                        fill_type="black",
                        fps=40,
                        gop=0,
                        height=150,
                        resolution_adaptive="open",
                        vcrf=0,
                        width=160,
                    ),
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps adaptive_dynamic_streaming_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/adaptiveDynamicStreamingTemplate:AdaptiveDynamicStreamingTemplate adaptive_dynamic_streaming_template adaptive_dynamic_streaming_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[int] disable_higher_video_bitrate: Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[int] disable_higher_video_resolution: Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[str] format: Adaptive transcoding format, value range:HLS, MPEG-DASH.
        :param pulumi.Input[str] name: Template name, length limit: 64 characters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]] stream_infos: Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame rate.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdaptiveDynamicStreamingTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps adaptive_dynamic_streaming_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        adaptive_dynamic_streaming_template = tencentcloud.mps.AdaptiveDynamicStreamingTemplate("adaptiveDynamicStreamingTemplate",
            comment="terrraform test",
            disable_higher_video_bitrate=0,
            disable_higher_video_resolution=1,
            format="HLS",
            stream_infos=[
                tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    audio=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        audio_channel=1,
                        bitrate=55,
                        codec="libmp3lame",
                        sample_rate=32000,
                    ),
                    remove_audio=0,
                    remove_video=0,
                    video=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        bitrate=245,
                        codec="libx264",
                        fill_type="black",
                        fps=30,
                        gop=0,
                        height=135,
                        resolution_adaptive="open",
                        vcrf=0,
                        width=145,
                    ),
                ),
                tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoArgs(
                    audio=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs(
                        audio_channel=2,
                        bitrate=60,
                        codec="libfdk_aac",
                        sample_rate=32000,
                    ),
                    remove_audio=0,
                    remove_video=0,
                    video=tencentcloud.mps.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs(
                        bitrate=400,
                        codec="libx264",
                        fill_type="black",
                        fps=40,
                        gop=0,
                        height=150,
                        resolution_adaptive="open",
                        vcrf=0,
                        width=160,
                    ),
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps adaptive_dynamic_streaming_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/adaptiveDynamicStreamingTemplate:AdaptiveDynamicStreamingTemplate adaptive_dynamic_streaming_template adaptive_dynamic_streaming_template_id
        ```

        :param str resource_name: The name of the resource.
        :param AdaptiveDynamicStreamingTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdaptiveDynamicStreamingTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 disable_higher_video_bitrate: Optional[pulumi.Input[int]] = None,
                 disable_higher_video_resolution: Optional[pulumi.Input[int]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 stream_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdaptiveDynamicStreamingTemplateArgs.__new__(AdaptiveDynamicStreamingTemplateArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["disable_higher_video_bitrate"] = disable_higher_video_bitrate
            __props__.__dict__["disable_higher_video_resolution"] = disable_higher_video_resolution
            if format is None and not opts.urn:
                raise TypeError("Missing required property 'format'")
            __props__.__dict__["format"] = format
            __props__.__dict__["name"] = name
            if stream_infos is None and not opts.urn:
                raise TypeError("Missing required property 'stream_infos'")
            __props__.__dict__["stream_infos"] = stream_infos
        super(AdaptiveDynamicStreamingTemplate, __self__).__init__(
            'tencentcloud:Mps/adaptiveDynamicStreamingTemplate:AdaptiveDynamicStreamingTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            disable_higher_video_bitrate: Optional[pulumi.Input[int]] = None,
            disable_higher_video_resolution: Optional[pulumi.Input[int]] = None,
            format: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            stream_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]]] = None) -> 'AdaptiveDynamicStreamingTemplate':
        """
        Get an existing AdaptiveDynamicStreamingTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[int] disable_higher_video_bitrate: Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[int] disable_higher_video_resolution: Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
        :param pulumi.Input[str] format: Adaptive transcoding format, value range:HLS, MPEG-DASH.
        :param pulumi.Input[str] name: Template name, length limit: 64 characters.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdaptiveDynamicStreamingTemplateStreamInfoArgs']]]] stream_infos: Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame rate.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdaptiveDynamicStreamingTemplateState.__new__(_AdaptiveDynamicStreamingTemplateState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["disable_higher_video_bitrate"] = disable_higher_video_bitrate
        __props__.__dict__["disable_higher_video_resolution"] = disable_higher_video_resolution
        __props__.__dict__["format"] = format
        __props__.__dict__["name"] = name
        __props__.__dict__["stream_infos"] = stream_infos
        return AdaptiveDynamicStreamingTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="disableHigherVideoBitrate")
    def disable_higher_video_bitrate(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to prohibit video from low bit rate to high bit rate, value range:0: no.1: yes.Default value: 0.
        """
        return pulumi.get(self, "disable_higher_video_bitrate")

    @property
    @pulumi.getter(name="disableHigherVideoResolution")
    def disable_higher_video_resolution(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to prohibit the conversion of video resolution to high resolution, value range:0: no.1: yes.Default value: 0.
        """
        return pulumi.get(self, "disable_higher_video_resolution")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[str]:
        """
        Adaptive transcoding format, value range:HLS, MPEG-DASH.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="streamInfos")
    def stream_infos(self) -> pulumi.Output[Sequence['outputs.AdaptiveDynamicStreamingTemplateStreamInfo']]:
        """
        Convert adaptive code stream to output sub-stream parameter information, and output up to 10 sub-streams.Note: The frame rate of each sub-stream must be consistent; if not, the frame rate of the first sub-stream is used as the output frame rate.
        """
        return pulumi.get(self, "stream_infos")

