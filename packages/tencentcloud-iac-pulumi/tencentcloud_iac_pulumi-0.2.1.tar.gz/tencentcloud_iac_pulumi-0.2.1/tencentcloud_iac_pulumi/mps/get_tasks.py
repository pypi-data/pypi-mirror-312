# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTasksResult',
    'AwaitableGetTasksResult',
    'get_tasks',
    'get_tasks_output',
]

@pulumi.output_type
class GetTasksResult:
    """
    A collection of values returned by getTasks.
    """
    def __init__(__self__, id=None, limit=None, result_output_file=None, scroll_token=None, status=None, task_sets=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if scroll_token and not isinstance(scroll_token, str):
            raise TypeError("Expected argument 'scroll_token' to be a str")
        pulumi.set(__self__, "scroll_token", scroll_token)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if task_sets and not isinstance(task_sets, list):
            raise TypeError("Expected argument 'task_sets' to be a list")
        pulumi.set(__self__, "task_sets", task_sets)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="scrollToken")
    def scroll_token(self) -> str:
        return pulumi.get(self, "scroll_token")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskSets")
    def task_sets(self) -> Sequence['outputs.GetTasksTaskSetResult']:
        """
        Task list.
        """
        return pulumi.get(self, "task_sets")


class AwaitableGetTasksResult(GetTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTasksResult(
            id=self.id,
            limit=self.limit,
            result_output_file=self.result_output_file,
            scroll_token=self.scroll_token,
            status=self.status,
            task_sets=self.task_sets)


def get_tasks(limit: Optional[int] = None,
              result_output_file: Optional[str] = None,
              scroll_token: Optional[str] = None,
              status: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTasksResult:
    """
    Use this data source to query detailed information of mps tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tasks = tencentcloud.Mps.get_tasks(limit=20,
        status="FINISH")
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Return the number of records, default value: 10, maximum value: 100.
    :param str result_output_file: Used to save results.
    :param str scroll_token: Page turning flag, used when pulling in batches: when a single request cannot pull all the data, the interface will return a ScrollToken, and the next request will carry this Token, and it will be obtained from the next record.
    :param str status: Filter condition: task status, optional values: WAITING, PROCESSING, FINISH.
    """
    __args__ = dict()
    __args__['limit'] = limit
    __args__['resultOutputFile'] = result_output_file
    __args__['scrollToken'] = scroll_token
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mps/getTasks:getTasks', __args__, opts=opts, typ=GetTasksResult).value

    return AwaitableGetTasksResult(
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        scroll_token=pulumi.get(__ret__, 'scroll_token'),
        status=pulumi.get(__ret__, 'status'),
        task_sets=pulumi.get(__ret__, 'task_sets'))


@_utilities.lift_output_func(get_tasks)
def get_tasks_output(limit: Optional[pulumi.Input[Optional[int]]] = None,
                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                     scroll_token: Optional[pulumi.Input[Optional[str]]] = None,
                     status: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTasksResult]:
    """
    Use this data source to query detailed information of mps tasks

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    tasks = tencentcloud.Mps.get_tasks(limit=20,
        status="FINISH")
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Return the number of records, default value: 10, maximum value: 100.
    :param str result_output_file: Used to save results.
    :param str scroll_token: Page turning flag, used when pulling in batches: when a single request cannot pull all the data, the interface will return a ScrollToken, and the next request will carry this Token, and it will be obtained from the next record.
    :param str status: Filter condition: task status, optional values: WAITING, PROCESSING, FINISH.
    """
    ...
