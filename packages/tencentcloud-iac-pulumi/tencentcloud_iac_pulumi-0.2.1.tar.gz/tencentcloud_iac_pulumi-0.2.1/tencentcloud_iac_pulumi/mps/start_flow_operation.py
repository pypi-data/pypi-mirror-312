# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['StartFlowOperationArgs', 'StartFlowOperation']

@pulumi.input_type
class StartFlowOperationArgs:
    def __init__(__self__, *,
                 flow_id: pulumi.Input[str],
                 start: pulumi.Input[bool]):
        """
        The set of arguments for constructing a StartFlowOperation resource.
        :param pulumi.Input[str] flow_id: Flow Id.
        :param pulumi.Input[bool] start: `true`: start mps stream link flow; `false`: stop.
        """
        pulumi.set(__self__, "flow_id", flow_id)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> pulumi.Input[str]:
        """
        Flow Id.
        """
        return pulumi.get(self, "flow_id")

    @flow_id.setter
    def flow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "flow_id", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[bool]:
        """
        `true`: start mps stream link flow; `false`: stop.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[bool]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class _StartFlowOperationState:
    def __init__(__self__, *,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering StartFlowOperation resources.
        :param pulumi.Input[str] flow_id: Flow Id.
        :param pulumi.Input[bool] start: `true`: start mps stream link flow; `false`: stop.
        """
        if flow_id is not None:
            pulumi.set(__self__, "flow_id", flow_id)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> Optional[pulumi.Input[str]]:
        """
        Flow Id.
        """
        return pulumi.get(self, "flow_id")

    @flow_id.setter
    def flow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_id", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[bool]]:
        """
        `true`: start mps stream link flow; `false`: stop.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "start", value)


class StartFlowOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps start_flow_operation

        ## Example Usage

        ### Start flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        operation = tencentcloud.mps.StartFlowOperation("operation",
            flow_id=tencentcloud_mps_flow["flow_rtp"]["id"],
            start=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Stop flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        operation = tencentcloud.mps.StartFlowOperation("operation",
            flow_id=tencentcloud_mps_flow["flow_rtp"]["id"],
            start=False)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] flow_id: Flow Id.
        :param pulumi.Input[bool] start: `true`: start mps stream link flow; `false`: stop.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StartFlowOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps start_flow_operation

        ## Example Usage

        ### Start flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        operation = tencentcloud.mps.StartFlowOperation("operation",
            flow_id=tencentcloud_mps_flow["flow_rtp"]["id"],
            start=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Stop flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        operation = tencentcloud.mps.StartFlowOperation("operation",
            flow_id=tencentcloud_mps_flow["flow_rtp"]["id"],
            start=False)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param StartFlowOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StartFlowOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StartFlowOperationArgs.__new__(StartFlowOperationArgs)

            if flow_id is None and not opts.urn:
                raise TypeError("Missing required property 'flow_id'")
            __props__.__dict__["flow_id"] = flow_id
            if start is None and not opts.urn:
                raise TypeError("Missing required property 'start'")
            __props__.__dict__["start"] = start
        super(StartFlowOperation, __self__).__init__(
            'tencentcloud:Mps/startFlowOperation:StartFlowOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            flow_id: Optional[pulumi.Input[str]] = None,
            start: Optional[pulumi.Input[bool]] = None) -> 'StartFlowOperation':
        """
        Get an existing StartFlowOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] flow_id: Flow Id.
        :param pulumi.Input[bool] start: `true`: start mps stream link flow; `false`: stop.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StartFlowOperationState.__new__(_StartFlowOperationState)

        __props__.__dict__["flow_id"] = flow_id
        __props__.__dict__["start"] = start
        return StartFlowOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> pulumi.Output[str]:
        """
        Flow Id.
        """
        return pulumi.get(self, "flow_id")

    @property
    @pulumi.getter
    def start(self) -> pulumi.Output[bool]:
        """
        `true`: start mps stream link flow; `false`: stop.
        """
        return pulumi.get(self, "start")

