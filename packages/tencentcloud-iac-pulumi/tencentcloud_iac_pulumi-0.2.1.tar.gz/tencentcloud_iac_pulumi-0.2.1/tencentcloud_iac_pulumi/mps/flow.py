# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FlowArgs', 'Flow']

@pulumi.input_type
class FlowArgs:
    def __init__(__self__, *,
                 flow_name: pulumi.Input[str],
                 max_bandwidth: pulumi.Input[int],
                 event_id: Optional[pulumi.Input[str]] = None,
                 input_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]]] = None):
        """
        The set of arguments for constructing a Flow resource.
        :param pulumi.Input[str] flow_name: Flow name.
        :param pulumi.Input[int] max_bandwidth: Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        :param pulumi.Input[str] event_id: The event ID associated with this Flow. Each flow can only be associated with one Event.
        :param pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]] input_groups: The input group for the flow.
        """
        pulumi.set(__self__, "flow_name", flow_name)
        pulumi.set(__self__, "max_bandwidth", max_bandwidth)
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if input_groups is not None:
            pulumi.set(__self__, "input_groups", input_groups)

    @property
    @pulumi.getter(name="flowName")
    def flow_name(self) -> pulumi.Input[str]:
        """
        Flow name.
        """
        return pulumi.get(self, "flow_name")

    @flow_name.setter
    def flow_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "flow_name", value)

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> pulumi.Input[int]:
        """
        Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        """
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_bandwidth", value)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[pulumi.Input[str]]:
        """
        The event ID associated with this Flow. Each flow can only be associated with one Event.
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_id", value)

    @property
    @pulumi.getter(name="inputGroups")
    def input_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]]]:
        """
        The input group for the flow.
        """
        return pulumi.get(self, "input_groups")

    @input_groups.setter
    def input_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]]]):
        pulumi.set(self, "input_groups", value)


@pulumi.input_type
class _FlowState:
    def __init__(__self__, *,
                 event_id: Optional[pulumi.Input[str]] = None,
                 flow_name: Optional[pulumi.Input[str]] = None,
                 input_groups: Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Flow resources.
        :param pulumi.Input[str] event_id: The event ID associated with this Flow. Each flow can only be associated with one Event.
        :param pulumi.Input[str] flow_name: Flow name.
        :param pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]] input_groups: The input group for the flow.
        :param pulumi.Input[int] max_bandwidth: Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        """
        if event_id is not None:
            pulumi.set(__self__, "event_id", event_id)
        if flow_name is not None:
            pulumi.set(__self__, "flow_name", flow_name)
        if input_groups is not None:
            pulumi.set(__self__, "input_groups", input_groups)
        if max_bandwidth is not None:
            pulumi.set(__self__, "max_bandwidth", max_bandwidth)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> Optional[pulumi.Input[str]]:
        """
        The event ID associated with this Flow. Each flow can only be associated with one Event.
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_id", value)

    @property
    @pulumi.getter(name="flowName")
    def flow_name(self) -> Optional[pulumi.Input[str]]:
        """
        Flow name.
        """
        return pulumi.get(self, "flow_name")

    @flow_name.setter
    def flow_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_name", value)

    @property
    @pulumi.getter(name="inputGroups")
    def input_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]]]:
        """
        The input group for the flow.
        """
        return pulumi.get(self, "input_groups")

    @input_groups.setter
    def input_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowInputGroupArgs']]]]):
        pulumi.set(self, "input_groups", value)

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        """
        return pulumi.get(self, "max_bandwidth")

    @max_bandwidth.setter
    def max_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bandwidth", value)


class Flow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_id: Optional[pulumi.Input[str]] = None,
                 flow_name: Optional[pulumi.Input[str]] = None,
                 input_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowInputGroupArgs']]]]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps flow

        ## Example Usage

        ### Create a mps RTP flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        event = tencentcloud.mps.Event("event",
            event_name="tf_test_event_srt_%d",
            description="tf test mps event description")
        flow = tencentcloud.mps.Flow("flow",
            flow_name="tf_test_mps_flow_srt_%d",
            max_bandwidth=10000000,
            input_groups=[tencentcloud.mps.FlowInputGroupArgs(
                input_name="test_inputname",
                protocol="SRT",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                srt_settings=tencentcloud.mps.FlowInputGroupSrtSettingsArgs(
                    mode="LISTENER",
                    stream_id="#!::u=johnny,r=resource,h=xxx.com,t=stream,m=play",
                    latency=1000,
                    recv_latency=1000,
                    peer_latency=1000,
                    peer_idle_timeout=1000,
                ),
            )],
            event_id=event.id)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a mps RTP flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        event_rtp = tencentcloud.mps.Event("eventRtp",
            event_name="tf_test_event_rtp_%d",
            description="tf test mps event description")
        flow_rtp = tencentcloud.mps.Flow("flowRtp",
            flow_name="tf_test_mps_flow_rtp_%d",
            max_bandwidth=10000000,
            input_groups=[tencentcloud.mps.FlowInputGroupArgs(
                input_name="test_inputname",
                protocol="RTP",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                rtp_settings=tencentcloud.mps.FlowInputGroupRtpSettingsArgs(
                    fec="none",
                    idle_timeout=1000,
                ),
            )],
            event_id=event_rtp.id)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a mps RTP flow and start it

        Before you start a mps flow, you need to create a output first.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        event_rtp = tencentcloud.mps.Event("eventRtp",
            event_name="your_event_name",
            description="tf test mps event description")
        flow_rtp = tencentcloud.mps.Flow("flowRtp",
            flow_name="your_flow_name",
            max_bandwidth=10000000,
            input_groups=[tencentcloud.mps.FlowInputGroupArgs(
                input_name="test_inputname",
                protocol="RTP",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                rtp_settings=tencentcloud.mps.FlowInputGroupRtpSettingsArgs(
                    fec="none",
                    idle_timeout=1000,
                ),
            )],
            event_id=event_rtp.id)
        output = tencentcloud.mps.Output("output",
            flow_id=flow_rtp.id,
            output=tencentcloud.mps.OutputOutputArgs(
                output_name="your_output_name",
                description="tf mps output group",
                protocol="RTP",
                output_region="ap-guangzhou",
                rtp_settings=tencentcloud.mps.OutputOutputRtpSettingsArgs(
                    destinations=[tencentcloud.mps.OutputOutputRtpSettingsDestinationArgs(
                        ip="203.205.141.84",
                        port=65535,
                    )],
                    fec="none",
                    idle_timeout=1000,
                ),
            ))
        operation = tencentcloud.mps.StartFlowOperation("operation",
            flow_id=flow_rtp.id,
            start=True,
            opts=pulumi.ResourceOptions(depends_on=[output]))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps flow can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/flow:Flow flow flow_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event_id: The event ID associated with this Flow. Each flow can only be associated with one Event.
        :param pulumi.Input[str] flow_name: Flow name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowInputGroupArgs']]]] input_groups: The input group for the flow.
        :param pulumi.Input[int] max_bandwidth: Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FlowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps flow

        ## Example Usage

        ### Create a mps RTP flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        event = tencentcloud.mps.Event("event",
            event_name="tf_test_event_srt_%d",
            description="tf test mps event description")
        flow = tencentcloud.mps.Flow("flow",
            flow_name="tf_test_mps_flow_srt_%d",
            max_bandwidth=10000000,
            input_groups=[tencentcloud.mps.FlowInputGroupArgs(
                input_name="test_inputname",
                protocol="SRT",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                srt_settings=tencentcloud.mps.FlowInputGroupSrtSettingsArgs(
                    mode="LISTENER",
                    stream_id="#!::u=johnny,r=resource,h=xxx.com,t=stream,m=play",
                    latency=1000,
                    recv_latency=1000,
                    peer_latency=1000,
                    peer_idle_timeout=1000,
                ),
            )],
            event_id=event.id)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a mps RTP flow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        event_rtp = tencentcloud.mps.Event("eventRtp",
            event_name="tf_test_event_rtp_%d",
            description="tf test mps event description")
        flow_rtp = tencentcloud.mps.Flow("flowRtp",
            flow_name="tf_test_mps_flow_rtp_%d",
            max_bandwidth=10000000,
            input_groups=[tencentcloud.mps.FlowInputGroupArgs(
                input_name="test_inputname",
                protocol="RTP",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                rtp_settings=tencentcloud.mps.FlowInputGroupRtpSettingsArgs(
                    fec="none",
                    idle_timeout=1000,
                ),
            )],
            event_id=event_rtp.id)
        ```
        <!--End PulumiCodeChooser -->

        ### Create a mps RTP flow and start it

        Before you start a mps flow, you need to create a output first.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        event_rtp = tencentcloud.mps.Event("eventRtp",
            event_name="your_event_name",
            description="tf test mps event description")
        flow_rtp = tencentcloud.mps.Flow("flowRtp",
            flow_name="your_flow_name",
            max_bandwidth=10000000,
            input_groups=[tencentcloud.mps.FlowInputGroupArgs(
                input_name="test_inputname",
                protocol="RTP",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                rtp_settings=tencentcloud.mps.FlowInputGroupRtpSettingsArgs(
                    fec="none",
                    idle_timeout=1000,
                ),
            )],
            event_id=event_rtp.id)
        output = tencentcloud.mps.Output("output",
            flow_id=flow_rtp.id,
            output=tencentcloud.mps.OutputOutputArgs(
                output_name="your_output_name",
                description="tf mps output group",
                protocol="RTP",
                output_region="ap-guangzhou",
                rtp_settings=tencentcloud.mps.OutputOutputRtpSettingsArgs(
                    destinations=[tencentcloud.mps.OutputOutputRtpSettingsDestinationArgs(
                        ip="203.205.141.84",
                        port=65535,
                    )],
                    fec="none",
                    idle_timeout=1000,
                ),
            ))
        operation = tencentcloud.mps.StartFlowOperation("operation",
            flow_id=flow_rtp.id,
            start=True,
            opts=pulumi.ResourceOptions(depends_on=[output]))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps flow can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/flow:Flow flow flow_id
        ```

        :param str resource_name: The name of the resource.
        :param FlowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FlowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event_id: Optional[pulumi.Input[str]] = None,
                 flow_name: Optional[pulumi.Input[str]] = None,
                 input_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowInputGroupArgs']]]]] = None,
                 max_bandwidth: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FlowArgs.__new__(FlowArgs)

            __props__.__dict__["event_id"] = event_id
            if flow_name is None and not opts.urn:
                raise TypeError("Missing required property 'flow_name'")
            __props__.__dict__["flow_name"] = flow_name
            __props__.__dict__["input_groups"] = input_groups
            if max_bandwidth is None and not opts.urn:
                raise TypeError("Missing required property 'max_bandwidth'")
            __props__.__dict__["max_bandwidth"] = max_bandwidth
        super(Flow, __self__).__init__(
            'tencentcloud:Mps/flow:Flow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event_id: Optional[pulumi.Input[str]] = None,
            flow_name: Optional[pulumi.Input[str]] = None,
            input_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowInputGroupArgs']]]]] = None,
            max_bandwidth: Optional[pulumi.Input[int]] = None) -> 'Flow':
        """
        Get an existing Flow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event_id: The event ID associated with this Flow. Each flow can only be associated with one Event.
        :param pulumi.Input[str] flow_name: Flow name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FlowInputGroupArgs']]]] input_groups: The input group for the flow.
        :param pulumi.Input[int] max_bandwidth: Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FlowState.__new__(_FlowState)

        __props__.__dict__["event_id"] = event_id
        __props__.__dict__["flow_name"] = flow_name
        __props__.__dict__["input_groups"] = input_groups
        __props__.__dict__["max_bandwidth"] = max_bandwidth
        return Flow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> pulumi.Output[Optional[str]]:
        """
        The event ID associated with this Flow. Each flow can only be associated with one Event.
        """
        return pulumi.get(self, "event_id")

    @property
    @pulumi.getter(name="flowName")
    def flow_name(self) -> pulumi.Output[str]:
        """
        Flow name.
        """
        return pulumi.get(self, "flow_name")

    @property
    @pulumi.getter(name="inputGroups")
    def input_groups(self) -> pulumi.Output[Sequence['outputs.FlowInputGroup']]:
        """
        The input group for the flow.
        """
        return pulumi.get(self, "input_groups")

    @property
    @pulumi.getter(name="maxBandwidth")
    def max_bandwidth(self) -> pulumi.Output[int]:
        """
        Maximum bandwidth, unit bps, optional [10000000, 20000000, 50000000].
        """
        return pulumi.get(self, "max_bandwidth")

