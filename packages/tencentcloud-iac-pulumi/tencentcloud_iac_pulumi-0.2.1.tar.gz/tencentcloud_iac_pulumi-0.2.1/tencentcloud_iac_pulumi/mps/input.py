# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InputArgs', 'Input']

@pulumi.input_type
class InputArgs:
    def __init__(__self__, *,
                 flow_id: pulumi.Input[str],
                 input_group: Optional[pulumi.Input['InputInputGroupArgs']] = None):
        """
        The set of arguments for constructing a Input resource.
        :param pulumi.Input[str] flow_id: Flow ID.
        :param pulumi.Input['InputInputGroupArgs'] input_group: The input group for the input. Only support one group for one `Mps.Input`. Use `for_each` to create multiple inputs Scenario.
        """
        pulumi.set(__self__, "flow_id", flow_id)
        if input_group is not None:
            pulumi.set(__self__, "input_group", input_group)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> pulumi.Input[str]:
        """
        Flow ID.
        """
        return pulumi.get(self, "flow_id")

    @flow_id.setter
    def flow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "flow_id", value)

    @property
    @pulumi.getter(name="inputGroup")
    def input_group(self) -> Optional[pulumi.Input['InputInputGroupArgs']]:
        """
        The input group for the input. Only support one group for one `Mps.Input`. Use `for_each` to create multiple inputs Scenario.
        """
        return pulumi.get(self, "input_group")

    @input_group.setter
    def input_group(self, value: Optional[pulumi.Input['InputInputGroupArgs']]):
        pulumi.set(self, "input_group", value)


@pulumi.input_type
class _InputState:
    def __init__(__self__, *,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 input_group: Optional[pulumi.Input['InputInputGroupArgs']] = None):
        """
        Input properties used for looking up and filtering Input resources.
        :param pulumi.Input[str] flow_id: Flow ID.
        :param pulumi.Input['InputInputGroupArgs'] input_group: The input group for the input. Only support one group for one `Mps.Input`. Use `for_each` to create multiple inputs Scenario.
        """
        if flow_id is not None:
            pulumi.set(__self__, "flow_id", flow_id)
        if input_group is not None:
            pulumi.set(__self__, "input_group", input_group)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> Optional[pulumi.Input[str]]:
        """
        Flow ID.
        """
        return pulumi.get(self, "flow_id")

    @flow_id.setter
    def flow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow_id", value)

    @property
    @pulumi.getter(name="inputGroup")
    def input_group(self) -> Optional[pulumi.Input['InputInputGroupArgs']]:
        """
        The input group for the input. Only support one group for one `Mps.Input`. Use `for_each` to create multiple inputs Scenario.
        """
        return pulumi.get(self, "input_group")

    @input_group.setter
    def input_group(self, value: Optional[pulumi.Input['InputInputGroupArgs']]):
        pulumi.set(self, "input_group", value)


class Input(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 input_group: Optional[pulumi.Input[pulumi.InputType['InputInputGroupArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps input

        ## Example Usage

        ### Create mps input group with SRT

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        input = tencentcloud.mps.Input("input",
            flow_id=tencentcloud_mps_flow["flow"]["id"],
            input_group=tencentcloud.mps.InputInputGroupArgs(
                input_name="your_input_name",
                protocol="SRT",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                srt_settings=tencentcloud.mps.InputInputGroupSrtSettingsArgs(
                    mode="LISTENER",
                    stream_id="#!::u=johnny,r=resource,h=xxx.com,t=stream,m=play",
                    latency=1000,
                    recv_latency=1000,
                    peer_latency=1000,
                    peer_idle_timeout=1000,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps input can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/input:Input input input_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] flow_id: Flow ID.
        :param pulumi.Input[pulumi.InputType['InputInputGroupArgs']] input_group: The input group for the input. Only support one group for one `Mps.Input`. Use `for_each` to create multiple inputs Scenario.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InputArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps input

        ## Example Usage

        ### Create mps input group with SRT

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        input = tencentcloud.mps.Input("input",
            flow_id=tencentcloud_mps_flow["flow"]["id"],
            input_group=tencentcloud.mps.InputInputGroupArgs(
                input_name="your_input_name",
                protocol="SRT",
                description="input name Description",
                allow_ip_lists=["0.0.0.0/0"],
                srt_settings=tencentcloud.mps.InputInputGroupSrtSettingsArgs(
                    mode="LISTENER",
                    stream_id="#!::u=johnny,r=resource,h=xxx.com,t=stream,m=play",
                    latency=1000,
                    recv_latency=1000,
                    peer_latency=1000,
                    peer_idle_timeout=1000,
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps input can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/input:Input input input_id
        ```

        :param str resource_name: The name of the resource.
        :param InputArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InputArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flow_id: Optional[pulumi.Input[str]] = None,
                 input_group: Optional[pulumi.Input[pulumi.InputType['InputInputGroupArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InputArgs.__new__(InputArgs)

            if flow_id is None and not opts.urn:
                raise TypeError("Missing required property 'flow_id'")
            __props__.__dict__["flow_id"] = flow_id
            __props__.__dict__["input_group"] = input_group
        super(Input, __self__).__init__(
            'tencentcloud:Mps/input:Input',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            flow_id: Optional[pulumi.Input[str]] = None,
            input_group: Optional[pulumi.Input[pulumi.InputType['InputInputGroupArgs']]] = None) -> 'Input':
        """
        Get an existing Input resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] flow_id: Flow ID.
        :param pulumi.Input[pulumi.InputType['InputInputGroupArgs']] input_group: The input group for the input. Only support one group for one `Mps.Input`. Use `for_each` to create multiple inputs Scenario.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InputState.__new__(_InputState)

        __props__.__dict__["flow_id"] = flow_id
        __props__.__dict__["input_group"] = input_group
        return Input(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="flowId")
    def flow_id(self) -> pulumi.Output[str]:
        """
        Flow ID.
        """
        return pulumi.get(self, "flow_id")

    @property
    @pulumi.getter(name="inputGroup")
    def input_group(self) -> pulumi.Output[Optional['outputs.InputInputGroup']]:
        """
        The input group for the input. Only support one group for one `Mps.Input`. Use `for_each` to create multiple inputs Scenario.
        """
        return pulumi.get(self, "input_group")

