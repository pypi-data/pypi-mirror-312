# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AiAnalysisTemplateArgs', 'AiAnalysisTemplate']

@pulumi.input_type
class AiAnalysisTemplateArgs:
    def __init__(__self__, *,
                 classification_configure: Optional[pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cover_configure: Optional[pulumi.Input['AiAnalysisTemplateCoverConfigureArgs']] = None,
                 frame_tag_configure: Optional[pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tag_configure: Optional[pulumi.Input['AiAnalysisTemplateTagConfigureArgs']] = None):
        """
        The set of arguments for constructing a AiAnalysisTemplate resource.
        :param pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs'] classification_configure: Ai classification task control parameters.
        :param pulumi.Input[str] comment: Ai analysis template description information, length limit: 256 characters.
        :param pulumi.Input['AiAnalysisTemplateCoverConfigureArgs'] cover_configure: Ai cover task control parameters.
        :param pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs'] frame_tag_configure: Ai frame tag task control parameters.
        :param pulumi.Input[str] name: Ai analysis template name, length limit: 64 characters.
        :param pulumi.Input['AiAnalysisTemplateTagConfigureArgs'] tag_configure: Ai tag task control parameters.
        """
        if classification_configure is not None:
            pulumi.set(__self__, "classification_configure", classification_configure)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cover_configure is not None:
            pulumi.set(__self__, "cover_configure", cover_configure)
        if frame_tag_configure is not None:
            pulumi.set(__self__, "frame_tag_configure", frame_tag_configure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tag_configure is not None:
            pulumi.set(__self__, "tag_configure", tag_configure)

    @property
    @pulumi.getter(name="classificationConfigure")
    def classification_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs']]:
        """
        Ai classification task control parameters.
        """
        return pulumi.get(self, "classification_configure")

    @classification_configure.setter
    def classification_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs']]):
        pulumi.set(self, "classification_configure", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Ai analysis template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="coverConfigure")
    def cover_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateCoverConfigureArgs']]:
        """
        Ai cover task control parameters.
        """
        return pulumi.get(self, "cover_configure")

    @cover_configure.setter
    def cover_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateCoverConfigureArgs']]):
        pulumi.set(self, "cover_configure", value)

    @property
    @pulumi.getter(name="frameTagConfigure")
    def frame_tag_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs']]:
        """
        Ai frame tag task control parameters.
        """
        return pulumi.get(self, "frame_tag_configure")

    @frame_tag_configure.setter
    def frame_tag_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs']]):
        pulumi.set(self, "frame_tag_configure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Ai analysis template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tagConfigure")
    def tag_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateTagConfigureArgs']]:
        """
        Ai tag task control parameters.
        """
        return pulumi.get(self, "tag_configure")

    @tag_configure.setter
    def tag_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateTagConfigureArgs']]):
        pulumi.set(self, "tag_configure", value)


@pulumi.input_type
class _AiAnalysisTemplateState:
    def __init__(__self__, *,
                 classification_configure: Optional[pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs']] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cover_configure: Optional[pulumi.Input['AiAnalysisTemplateCoverConfigureArgs']] = None,
                 frame_tag_configure: Optional[pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tag_configure: Optional[pulumi.Input['AiAnalysisTemplateTagConfigureArgs']] = None):
        """
        Input properties used for looking up and filtering AiAnalysisTemplate resources.
        :param pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs'] classification_configure: Ai classification task control parameters.
        :param pulumi.Input[str] comment: Ai analysis template description information, length limit: 256 characters.
        :param pulumi.Input['AiAnalysisTemplateCoverConfigureArgs'] cover_configure: Ai cover task control parameters.
        :param pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs'] frame_tag_configure: Ai frame tag task control parameters.
        :param pulumi.Input[str] name: Ai analysis template name, length limit: 64 characters.
        :param pulumi.Input['AiAnalysisTemplateTagConfigureArgs'] tag_configure: Ai tag task control parameters.
        """
        if classification_configure is not None:
            pulumi.set(__self__, "classification_configure", classification_configure)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if cover_configure is not None:
            pulumi.set(__self__, "cover_configure", cover_configure)
        if frame_tag_configure is not None:
            pulumi.set(__self__, "frame_tag_configure", frame_tag_configure)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tag_configure is not None:
            pulumi.set(__self__, "tag_configure", tag_configure)

    @property
    @pulumi.getter(name="classificationConfigure")
    def classification_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs']]:
        """
        Ai classification task control parameters.
        """
        return pulumi.get(self, "classification_configure")

    @classification_configure.setter
    def classification_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateClassificationConfigureArgs']]):
        pulumi.set(self, "classification_configure", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Ai analysis template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="coverConfigure")
    def cover_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateCoverConfigureArgs']]:
        """
        Ai cover task control parameters.
        """
        return pulumi.get(self, "cover_configure")

    @cover_configure.setter
    def cover_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateCoverConfigureArgs']]):
        pulumi.set(self, "cover_configure", value)

    @property
    @pulumi.getter(name="frameTagConfigure")
    def frame_tag_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs']]:
        """
        Ai frame tag task control parameters.
        """
        return pulumi.get(self, "frame_tag_configure")

    @frame_tag_configure.setter
    def frame_tag_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateFrameTagConfigureArgs']]):
        pulumi.set(self, "frame_tag_configure", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Ai analysis template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tagConfigure")
    def tag_configure(self) -> Optional[pulumi.Input['AiAnalysisTemplateTagConfigureArgs']]:
        """
        Ai tag task control parameters.
        """
        return pulumi.get(self, "tag_configure")

    @tag_configure.setter
    def tag_configure(self, value: Optional[pulumi.Input['AiAnalysisTemplateTagConfigureArgs']]):
        pulumi.set(self, "tag_configure", value)


class AiAnalysisTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 classification_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateClassificationConfigureArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cover_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateCoverConfigureArgs']]] = None,
                 frame_tag_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateFrameTagConfigureArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tag_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateTagConfigureArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps ai_analysis_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        ai_analysis_template = tencentcloud.mps.AiAnalysisTemplate("aiAnalysisTemplate",
            classification_configure=tencentcloud.mps.AiAnalysisTemplateClassificationConfigureArgs(
                switch="OFF",
            ),
            cover_configure=tencentcloud.mps.AiAnalysisTemplateCoverConfigureArgs(
                switch="ON",
            ),
            frame_tag_configure=tencentcloud.mps.AiAnalysisTemplateFrameTagConfigureArgs(
                switch="ON",
            ),
            tag_configure=tencentcloud.mps.AiAnalysisTemplateTagConfigureArgs(
                switch="ON",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps ai_analysis_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate ai_analysis_template ai_analysis_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateClassificationConfigureArgs']] classification_configure: Ai classification task control parameters.
        :param pulumi.Input[str] comment: Ai analysis template description information, length limit: 256 characters.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateCoverConfigureArgs']] cover_configure: Ai cover task control parameters.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateFrameTagConfigureArgs']] frame_tag_configure: Ai frame tag task control parameters.
        :param pulumi.Input[str] name: Ai analysis template name, length limit: 64 characters.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateTagConfigureArgs']] tag_configure: Ai tag task control parameters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AiAnalysisTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps ai_analysis_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        ai_analysis_template = tencentcloud.mps.AiAnalysisTemplate("aiAnalysisTemplate",
            classification_configure=tencentcloud.mps.AiAnalysisTemplateClassificationConfigureArgs(
                switch="OFF",
            ),
            cover_configure=tencentcloud.mps.AiAnalysisTemplateCoverConfigureArgs(
                switch="ON",
            ),
            frame_tag_configure=tencentcloud.mps.AiAnalysisTemplateFrameTagConfigureArgs(
                switch="ON",
            ),
            tag_configure=tencentcloud.mps.AiAnalysisTemplateTagConfigureArgs(
                switch="ON",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps ai_analysis_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate ai_analysis_template ai_analysis_template_id
        ```

        :param str resource_name: The name of the resource.
        :param AiAnalysisTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AiAnalysisTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 classification_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateClassificationConfigureArgs']]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 cover_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateCoverConfigureArgs']]] = None,
                 frame_tag_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateFrameTagConfigureArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tag_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateTagConfigureArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AiAnalysisTemplateArgs.__new__(AiAnalysisTemplateArgs)

            __props__.__dict__["classification_configure"] = classification_configure
            __props__.__dict__["comment"] = comment
            __props__.__dict__["cover_configure"] = cover_configure
            __props__.__dict__["frame_tag_configure"] = frame_tag_configure
            __props__.__dict__["name"] = name
            __props__.__dict__["tag_configure"] = tag_configure
        super(AiAnalysisTemplate, __self__).__init__(
            'tencentcloud:Mps/aiAnalysisTemplate:AiAnalysisTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            classification_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateClassificationConfigureArgs']]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            cover_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateCoverConfigureArgs']]] = None,
            frame_tag_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateFrameTagConfigureArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            tag_configure: Optional[pulumi.Input[pulumi.InputType['AiAnalysisTemplateTagConfigureArgs']]] = None) -> 'AiAnalysisTemplate':
        """
        Get an existing AiAnalysisTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateClassificationConfigureArgs']] classification_configure: Ai classification task control parameters.
        :param pulumi.Input[str] comment: Ai analysis template description information, length limit: 256 characters.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateCoverConfigureArgs']] cover_configure: Ai cover task control parameters.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateFrameTagConfigureArgs']] frame_tag_configure: Ai frame tag task control parameters.
        :param pulumi.Input[str] name: Ai analysis template name, length limit: 64 characters.
        :param pulumi.Input[pulumi.InputType['AiAnalysisTemplateTagConfigureArgs']] tag_configure: Ai tag task control parameters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AiAnalysisTemplateState.__new__(_AiAnalysisTemplateState)

        __props__.__dict__["classification_configure"] = classification_configure
        __props__.__dict__["comment"] = comment
        __props__.__dict__["cover_configure"] = cover_configure
        __props__.__dict__["frame_tag_configure"] = frame_tag_configure
        __props__.__dict__["name"] = name
        __props__.__dict__["tag_configure"] = tag_configure
        return AiAnalysisTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="classificationConfigure")
    def classification_configure(self) -> pulumi.Output[Optional['outputs.AiAnalysisTemplateClassificationConfigure']]:
        """
        Ai classification task control parameters.
        """
        return pulumi.get(self, "classification_configure")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Ai analysis template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="coverConfigure")
    def cover_configure(self) -> pulumi.Output[Optional['outputs.AiAnalysisTemplateCoverConfigure']]:
        """
        Ai cover task control parameters.
        """
        return pulumi.get(self, "cover_configure")

    @property
    @pulumi.getter(name="frameTagConfigure")
    def frame_tag_configure(self) -> pulumi.Output[Optional['outputs.AiAnalysisTemplateFrameTagConfigure']]:
        """
        Ai frame tag task control parameters.
        """
        return pulumi.get(self, "frame_tag_configure")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Ai analysis template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tagConfigure")
    def tag_configure(self) -> pulumi.Output[Optional['outputs.AiAnalysisTemplateTagConfigure']]:
        """
        Ai tag task control parameters.
        """
        return pulumi.get(self, "tag_configure")

