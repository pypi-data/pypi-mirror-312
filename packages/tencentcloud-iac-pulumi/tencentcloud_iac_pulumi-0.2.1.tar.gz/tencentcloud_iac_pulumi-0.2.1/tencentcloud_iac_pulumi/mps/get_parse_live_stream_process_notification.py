# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetParseLiveStreamProcessNotificationResult',
    'AwaitableGetParseLiveStreamProcessNotificationResult',
    'get_parse_live_stream_process_notification',
    'get_parse_live_stream_process_notification_output',
]

@pulumi.output_type
class GetParseLiveStreamProcessNotificationResult:
    """
    A collection of values returned by getParseLiveStreamProcessNotification.
    """
    def __init__(__self__, content=None, id=None, result_output_file=None):
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetParseLiveStreamProcessNotificationResult(GetParseLiveStreamProcessNotificationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetParseLiveStreamProcessNotificationResult(
            content=self.content,
            id=self.id,
            result_output_file=self.result_output_file)


def get_parse_live_stream_process_notification(content: Optional[str] = None,
                                               result_output_file: Optional[str] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetParseLiveStreamProcessNotificationResult:
    """
    Use this data source to query detailed information of mps parse_live_stream_process_notification

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    parse_live_stream_process_notification = tencentcloud.Mps.get_parse_live_stream_process_notification(content="your_content")
    ```
    <!--End PulumiCodeChooser -->


    :param str content: Live stream event notification obtained from CMQ.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['content'] = content
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mps/getParseLiveStreamProcessNotification:getParseLiveStreamProcessNotification', __args__, opts=opts, typ=GetParseLiveStreamProcessNotificationResult).value

    return AwaitableGetParseLiveStreamProcessNotificationResult(
        content=pulumi.get(__ret__, 'content'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_parse_live_stream_process_notification)
def get_parse_live_stream_process_notification_output(content: Optional[pulumi.Input[str]] = None,
                                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetParseLiveStreamProcessNotificationResult]:
    """
    Use this data source to query detailed information of mps parse_live_stream_process_notification

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    parse_live_stream_process_notification = tencentcloud.Mps.get_parse_live_stream_process_notification(content="your_content")
    ```
    <!--End PulumiCodeChooser -->


    :param str content: Live stream event notification obtained from CMQ.
    :param str result_output_file: Used to save results.
    """
    ...
