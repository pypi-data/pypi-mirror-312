# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EnableWorkflowConfigArgs', 'EnableWorkflowConfig']

@pulumi.input_type
class EnableWorkflowConfigArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 workflow_id: pulumi.Input[int]):
        """
        The set of arguments for constructing a EnableWorkflowConfig resource.
        :param pulumi.Input[bool] enabled: true: enable; false: disable.
        :param pulumi.Input[int] workflow_id: Workflow ID.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        true: enable; false: disable.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[int]:
        """
        Workflow ID.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "workflow_id", value)


@pulumi.input_type
class _EnableWorkflowConfigState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 workflow_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering EnableWorkflowConfig resources.
        :param pulumi.Input[bool] enabled: true: enable; false: disable.
        :param pulumi.Input[int] workflow_id: Workflow ID.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        true: enable; false: disable.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[int]]:
        """
        Workflow ID.
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "workflow_id", value)


class EnableWorkflowConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 workflow_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps enable_workflow_config

        ## Example Usage

        ### Enable the mps workflow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mps.Workflow("example",
            output_dir="/",
            task_priority=0,
            workflow_name="tf-workflow-enable-config",
            media_process_task=tencentcloud.mps.WorkflowMediaProcessTaskArgs(
                adaptive_dynamic_streaming_task_sets=[tencentcloud.mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs(
                    definition=12,
                    output_object_path="/out",
                    segment_object_name="/out",
                    sub_stream_object_name="/out/out/",
                    output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs(
                        type="COS",
                        cos_output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs(
                            bucket="cos-lock-1308919341",
                            region="ap-guangzhou",
                        ),
                    ),
                )],
                snapshot_by_time_offset_task_sets=[tencentcloud.mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs(
                    definition=10,
                    ext_time_offset_sets=["1s"],
                    output_object_path="/snapshot/",
                    time_offset_sets=[],
                    output_storage=tencentcloud.mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs(
                        type="COS",
                        cos_output_storage=tencentcloud.mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs(
                            bucket="cos-lock-1308919341",
                            region="ap-guangzhou",
                        ),
                    ),
                )],
                animated_graphic_task_sets=[tencentcloud.mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs(
                    definition=20000,
                    end_time_offset=0,
                    output_object_path="/test/",
                    start_time_offset=0,
                    output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs(
                        type="COS",
                        cos_output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs(
                            bucket="cos-lock-1308919341",
                            region="ap-guangzhou",
                        ),
                    ),
                )],
            ),
            ai_analysis_task=tencentcloud.mps.WorkflowAiAnalysisTaskArgs(
                definition=20,
            ),
            ai_content_review_task=tencentcloud.mps.WorkflowAiContentReviewTaskArgs(
                definition=20,
            ),
            ai_recognition_task=tencentcloud.mps.WorkflowAiRecognitionTaskArgs(
                definition=20,
            ),
            output_storage=tencentcloud.mps.WorkflowOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.WorkflowOutputStorageCosOutputStorageArgs(
                    bucket="cos-lock-1308919341",
                    region="ap-guangzhou",
                ),
            ),
            trigger=tencentcloud.mps.WorkflowTriggerArgs(
                type="CosFileUpload",
                cos_file_upload_trigger=tencentcloud.mps.WorkflowTriggerCosFileUploadTriggerArgs(
                    bucket="cos-lock-1308919341",
                    dir="/",
                    region="ap-guangzhou",
                ),
            ))
        config = tencentcloud.mps.EnableWorkflowConfig("config",
            workflow_id=example.id,
            enabled=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Disable the mps workflow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = tencentcloud.mps.EnableWorkflowConfig("config",
            workflow_id=tencentcloud_mps_workflow["example"]["id"],
            enabled=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps enable_workflow_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/enableWorkflowConfig:EnableWorkflowConfig enable_workflow_config enable_workflow_config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: true: enable; false: disable.
        :param pulumi.Input[int] workflow_id: Workflow ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnableWorkflowConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps enable_workflow_config

        ## Example Usage

        ### Enable the mps workflow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mps.Workflow("example",
            output_dir="/",
            task_priority=0,
            workflow_name="tf-workflow-enable-config",
            media_process_task=tencentcloud.mps.WorkflowMediaProcessTaskArgs(
                adaptive_dynamic_streaming_task_sets=[tencentcloud.mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetArgs(
                    definition=12,
                    output_object_path="/out",
                    segment_object_name="/out",
                    sub_stream_object_name="/out/out/",
                    output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageArgs(
                        type="COS",
                        cos_output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAdaptiveDynamicStreamingTaskSetOutputStorageCosOutputStorageArgs(
                            bucket="cos-lock-1308919341",
                            region="ap-guangzhou",
                        ),
                    ),
                )],
                snapshot_by_time_offset_task_sets=[tencentcloud.mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetArgs(
                    definition=10,
                    ext_time_offset_sets=["1s"],
                    output_object_path="/snapshot/",
                    time_offset_sets=[],
                    output_storage=tencentcloud.mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageArgs(
                        type="COS",
                        cos_output_storage=tencentcloud.mps.WorkflowMediaProcessTaskSnapshotByTimeOffsetTaskSetOutputStorageCosOutputStorageArgs(
                            bucket="cos-lock-1308919341",
                            region="ap-guangzhou",
                        ),
                    ),
                )],
                animated_graphic_task_sets=[tencentcloud.mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetArgs(
                    definition=20000,
                    end_time_offset=0,
                    output_object_path="/test/",
                    start_time_offset=0,
                    output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageArgs(
                        type="COS",
                        cos_output_storage=tencentcloud.mps.WorkflowMediaProcessTaskAnimatedGraphicTaskSetOutputStorageCosOutputStorageArgs(
                            bucket="cos-lock-1308919341",
                            region="ap-guangzhou",
                        ),
                    ),
                )],
            ),
            ai_analysis_task=tencentcloud.mps.WorkflowAiAnalysisTaskArgs(
                definition=20,
            ),
            ai_content_review_task=tencentcloud.mps.WorkflowAiContentReviewTaskArgs(
                definition=20,
            ),
            ai_recognition_task=tencentcloud.mps.WorkflowAiRecognitionTaskArgs(
                definition=20,
            ),
            output_storage=tencentcloud.mps.WorkflowOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.WorkflowOutputStorageCosOutputStorageArgs(
                    bucket="cos-lock-1308919341",
                    region="ap-guangzhou",
                ),
            ),
            trigger=tencentcloud.mps.WorkflowTriggerArgs(
                type="CosFileUpload",
                cos_file_upload_trigger=tencentcloud.mps.WorkflowTriggerCosFileUploadTriggerArgs(
                    bucket="cos-lock-1308919341",
                    dir="/",
                    region="ap-guangzhou",
                ),
            ))
        config = tencentcloud.mps.EnableWorkflowConfig("config",
            workflow_id=example.id,
            enabled=True)
        ```
        <!--End PulumiCodeChooser -->

        ### Disable the mps workflow

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = tencentcloud.mps.EnableWorkflowConfig("config",
            workflow_id=tencentcloud_mps_workflow["example"]["id"],
            enabled=False)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps enable_workflow_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/enableWorkflowConfig:EnableWorkflowConfig enable_workflow_config enable_workflow_config_id
        ```

        :param str resource_name: The name of the resource.
        :param EnableWorkflowConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnableWorkflowConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 workflow_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnableWorkflowConfigArgs.__new__(EnableWorkflowConfigArgs)

            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
            if workflow_id is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_id'")
            __props__.__dict__["workflow_id"] = workflow_id
        super(EnableWorkflowConfig, __self__).__init__(
            'tencentcloud:Mps/enableWorkflowConfig:EnableWorkflowConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            workflow_id: Optional[pulumi.Input[int]] = None) -> 'EnableWorkflowConfig':
        """
        Get an existing EnableWorkflowConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: true: enable; false: disable.
        :param pulumi.Input[int] workflow_id: Workflow ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnableWorkflowConfigState.__new__(_EnableWorkflowConfigState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["workflow_id"] = workflow_id
        return EnableWorkflowConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        true: enable; false: disable.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[int]:
        """
        Workflow ID.
        """
        return pulumi.get(self, "workflow_id")

