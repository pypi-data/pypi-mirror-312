# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ManageTaskOperationArgs', 'ManageTaskOperation']

@pulumi.input_type
class ManageTaskOperationArgs:
    def __init__(__self__, *,
                 operation_type: pulumi.Input[str],
                 task_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a ManageTaskOperation resource.
        :param pulumi.Input[str] operation_type: Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
        :param pulumi.Input[str] task_id: Video processing task ID.
        """
        pulumi.set(__self__, "operation_type", operation_type)
        pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Input[str]:
        """
        Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[str]:
        """
        Video processing task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_id", value)


@pulumi.input_type
class _ManageTaskOperationState:
    def __init__(__self__, *,
                 operation_type: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ManageTaskOperation resources.
        :param pulumi.Input[str] operation_type: Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
        :param pulumi.Input[str] task_id: Video processing task ID.
        """
        if operation_type is not None:
            pulumi.set(__self__, "operation_type", operation_type)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> Optional[pulumi.Input[str]]:
        """
        Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
        """
        return pulumi.get(self, "operation_type")

    @operation_type.setter
    def operation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_type", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Video processing task ID.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)


class ManageTaskOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 operation_type: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps manage_task_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        operation = tencentcloud.mps.ManageTaskOperation("operation",
            operation_type="Abort",
            task_id="2600010949-LiveScheduleTask-xxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] operation_type: Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
        :param pulumi.Input[str] task_id: Video processing task ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManageTaskOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps manage_task_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        operation = tencentcloud.mps.ManageTaskOperation("operation",
            operation_type="Abort",
            task_id="2600010949-LiveScheduleTask-xxxx")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ManageTaskOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManageTaskOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 operation_type: Optional[pulumi.Input[str]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManageTaskOperationArgs.__new__(ManageTaskOperationArgs)

            if operation_type is None and not opts.urn:
                raise TypeError("Missing required property 'operation_type'")
            __props__.__dict__["operation_type"] = operation_type
            if task_id is None and not opts.urn:
                raise TypeError("Missing required property 'task_id'")
            __props__.__dict__["task_id"] = task_id
        super(ManageTaskOperation, __self__).__init__(
            'tencentcloud:Mps/manageTaskOperation:ManageTaskOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            operation_type: Optional[pulumi.Input[str]] = None,
            task_id: Optional[pulumi.Input[str]] = None) -> 'ManageTaskOperation':
        """
        Get an existing ManageTaskOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] operation_type: Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
        :param pulumi.Input[str] task_id: Video processing task ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ManageTaskOperationState.__new__(_ManageTaskOperationState)

        __props__.__dict__["operation_type"] = operation_type
        __props__.__dict__["task_id"] = task_id
        return ManageTaskOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="operationType")
    def operation_type(self) -> pulumi.Output[str]:
        """
        Operation type. Valid values:`Abort`: task termination. Notice: If the task type is live stream processing (LiveStreamProcessTask), tasks whose task status is `WAITING` or `PROCESSING` can be terminated.For other task types, only tasks whose task status is `WAITING` can be terminated.
        """
        return pulumi.get(self, "operation_type")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[str]:
        """
        Video processing task ID.
        """
        return pulumi.get(self, "task_id")

