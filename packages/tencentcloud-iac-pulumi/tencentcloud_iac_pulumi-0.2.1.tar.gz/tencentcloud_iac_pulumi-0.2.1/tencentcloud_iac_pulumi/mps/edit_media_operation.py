# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EditMediaOperationArgs', 'EditMediaOperation']

@pulumi.input_type
class EditMediaOperationArgs:
    def __init__(__self__, *,
                 file_infos: pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]],
                 output_object_path: pulumi.Input[str],
                 output_storage: pulumi.Input['EditMediaOperationOutputStorageArgs'],
                 output_config: Optional[pulumi.Input['EditMediaOperationOutputConfigArgs']] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigArgs']] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a EditMediaOperation resource.
        :param pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]] file_infos: Information of input video file.
        :param pulumi.Input[str] output_object_path: The path to save the media processing output file.
        :param pulumi.Input['EditMediaOperationOutputStorageArgs'] output_storage: The storage location of the media processing output file.
        :param pulumi.Input['EditMediaOperationOutputConfigArgs'] output_config: Configuration for output files of video editing.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input['EditMediaOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[int] tasks_priority: Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
        """
        pulumi.set(__self__, "file_infos", file_infos)
        pulumi.set(__self__, "output_object_path", output_object_path)
        pulumi.set(__self__, "output_storage", output_storage)
        if output_config is not None:
            pulumi.set(__self__, "output_config", output_config)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if tasks_priority is not None:
            pulumi.set(__self__, "tasks_priority", tasks_priority)

    @property
    @pulumi.getter(name="fileInfos")
    def file_infos(self) -> pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]]:
        """
        Information of input video file.
        """
        return pulumi.get(self, "file_infos")

    @file_infos.setter
    def file_infos(self, value: pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]]):
        pulumi.set(self, "file_infos", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> pulumi.Input[str]:
        """
        The path to save the media processing output file.
        """
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> pulumi.Input['EditMediaOperationOutputStorageArgs']:
        """
        The storage location of the media processing output file.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: pulumi.Input['EditMediaOperationOutputStorageArgs']):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> Optional[pulumi.Input['EditMediaOperationOutputConfigArgs']]:
        """
        Configuration for output files of video editing.
        """
        return pulumi.get(self, "output_config")

    @output_config.setter
    def output_config(self, value: Optional[pulumi.Input['EditMediaOperationOutputConfigArgs']]):
        pulumi.set(self, "output_config", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigArgs']]:
        """
        Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter(name="tasksPriority")
    def tasks_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
        """
        return pulumi.get(self, "tasks_priority")

    @tasks_priority.setter
    def tasks_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tasks_priority", value)


@pulumi.input_type
class _EditMediaOperationState:
    def __init__(__self__, *,
                 file_infos: Optional[pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]]] = None,
                 output_config: Optional[pulumi.Input['EditMediaOperationOutputConfigArgs']] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['EditMediaOperationOutputStorageArgs']] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigArgs']] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering EditMediaOperation resources.
        :param pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]] file_infos: Information of input video file.
        :param pulumi.Input['EditMediaOperationOutputConfigArgs'] output_config: Configuration for output files of video editing.
        :param pulumi.Input[str] output_object_path: The path to save the media processing output file.
        :param pulumi.Input['EditMediaOperationOutputStorageArgs'] output_storage: The storage location of the media processing output file.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input['EditMediaOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[int] tasks_priority: Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
        """
        if file_infos is not None:
            pulumi.set(__self__, "file_infos", file_infos)
        if output_config is not None:
            pulumi.set(__self__, "output_config", output_config)
        if output_object_path is not None:
            pulumi.set(__self__, "output_object_path", output_object_path)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if tasks_priority is not None:
            pulumi.set(__self__, "tasks_priority", tasks_priority)

    @property
    @pulumi.getter(name="fileInfos")
    def file_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]]]:
        """
        Information of input video file.
        """
        return pulumi.get(self, "file_infos")

    @file_infos.setter
    def file_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EditMediaOperationFileInfoArgs']]]]):
        pulumi.set(self, "file_infos", value)

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> Optional[pulumi.Input['EditMediaOperationOutputConfigArgs']]:
        """
        Configuration for output files of video editing.
        """
        return pulumi.get(self, "output_config")

    @output_config.setter
    def output_config(self, value: Optional[pulumi.Input['EditMediaOperationOutputConfigArgs']]):
        pulumi.set(self, "output_config", value)

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to save the media processing output file.
        """
        return pulumi.get(self, "output_object_path")

    @output_object_path.setter
    def output_object_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_object_path", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['EditMediaOperationOutputStorageArgs']]:
        """
        The storage location of the media processing output file.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['EditMediaOperationOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigArgs']]:
        """
        Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['EditMediaOperationTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter(name="tasksPriority")
    def tasks_priority(self) -> Optional[pulumi.Input[int]]:
        """
        Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
        """
        return pulumi.get(self, "tasks_priority")

    @tasks_priority.setter
    def tasks_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tasks_priority", value)


class EditMediaOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EditMediaOperationFileInfoArgs']]]]] = None,
                 output_config: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationOutputConfigArgs']]] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationOutputStorageArgs']]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationTaskNotifyConfigArgs']]] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps edit_media_operation

        ## Example Usage

        ### Operation through COS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        output = tencentcloud.cos.Bucket("output", bucket=f"tf-bucket-mps-output-{local['app_id']}")
        object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
            key="/mps-test/test.mov")
        operation = tencentcloud.mps.EditMediaOperation("operation",
            file_infos=[tencentcloud.mps.EditMediaOperationFileInfoArgs(
                input_info=tencentcloud.mps.EditMediaOperationFileInfoInputInfoArgs(
                    type="COS",
                    cos_input_info=tencentcloud.mps.EditMediaOperationFileInfoInputInfoCosInputInfoArgs(
                        bucket=object.bucket,
                        region="%s",
                        object=object.key,
                    ),
                ),
                start_time_offset=60,
                end_time_offset=120,
            )],
            output_storage=tencentcloud.mps.EditMediaOperationOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.EditMediaOperationOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_object_path="/output")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EditMediaOperationFileInfoArgs']]]] file_infos: Information of input video file.
        :param pulumi.Input[pulumi.InputType['EditMediaOperationOutputConfigArgs']] output_config: Configuration for output files of video editing.
        :param pulumi.Input[str] output_object_path: The path to save the media processing output file.
        :param pulumi.Input[pulumi.InputType['EditMediaOperationOutputStorageArgs']] output_storage: The storage location of the media processing output file.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input[pulumi.InputType['EditMediaOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[int] tasks_priority: Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EditMediaOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps edit_media_operation

        ## Example Usage

        ### Operation through COS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        output = tencentcloud.cos.Bucket("output", bucket=f"tf-bucket-mps-output-{local['app_id']}")
        object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
            key="/mps-test/test.mov")
        operation = tencentcloud.mps.EditMediaOperation("operation",
            file_infos=[tencentcloud.mps.EditMediaOperationFileInfoArgs(
                input_info=tencentcloud.mps.EditMediaOperationFileInfoInputInfoArgs(
                    type="COS",
                    cos_input_info=tencentcloud.mps.EditMediaOperationFileInfoInputInfoCosInputInfoArgs(
                        bucket=object.bucket,
                        region="%s",
                        object=object.key,
                    ),
                ),
                start_time_offset=60,
                end_time_offset=120,
            )],
            output_storage=tencentcloud.mps.EditMediaOperationOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.EditMediaOperationOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_object_path="/output")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param EditMediaOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EditMediaOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EditMediaOperationFileInfoArgs']]]]] = None,
                 output_config: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationOutputConfigArgs']]] = None,
                 output_object_path: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationOutputStorageArgs']]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationTaskNotifyConfigArgs']]] = None,
                 tasks_priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EditMediaOperationArgs.__new__(EditMediaOperationArgs)

            if file_infos is None and not opts.urn:
                raise TypeError("Missing required property 'file_infos'")
            __props__.__dict__["file_infos"] = file_infos
            __props__.__dict__["output_config"] = output_config
            if output_object_path is None and not opts.urn:
                raise TypeError("Missing required property 'output_object_path'")
            __props__.__dict__["output_object_path"] = output_object_path
            if output_storage is None and not opts.urn:
                raise TypeError("Missing required property 'output_storage'")
            __props__.__dict__["output_storage"] = output_storage
            __props__.__dict__["session_context"] = session_context
            __props__.__dict__["session_id"] = session_id
            __props__.__dict__["task_notify_config"] = task_notify_config
            __props__.__dict__["tasks_priority"] = tasks_priority
        super(EditMediaOperation, __self__).__init__(
            'tencentcloud:Mps/editMediaOperation:EditMediaOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            file_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EditMediaOperationFileInfoArgs']]]]] = None,
            output_config: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationOutputConfigArgs']]] = None,
            output_object_path: Optional[pulumi.Input[str]] = None,
            output_storage: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationOutputStorageArgs']]] = None,
            session_context: Optional[pulumi.Input[str]] = None,
            session_id: Optional[pulumi.Input[str]] = None,
            task_notify_config: Optional[pulumi.Input[pulumi.InputType['EditMediaOperationTaskNotifyConfigArgs']]] = None,
            tasks_priority: Optional[pulumi.Input[int]] = None) -> 'EditMediaOperation':
        """
        Get an existing EditMediaOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['EditMediaOperationFileInfoArgs']]]] file_infos: Information of input video file.
        :param pulumi.Input[pulumi.InputType['EditMediaOperationOutputConfigArgs']] output_config: Configuration for output files of video editing.
        :param pulumi.Input[str] output_object_path: The path to save the media processing output file.
        :param pulumi.Input[pulumi.InputType['EditMediaOperationOutputStorageArgs']] output_storage: The storage location of the media processing output file.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input[pulumi.InputType['EditMediaOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
        :param pulumi.Input[int] tasks_priority: Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EditMediaOperationState.__new__(_EditMediaOperationState)

        __props__.__dict__["file_infos"] = file_infos
        __props__.__dict__["output_config"] = output_config
        __props__.__dict__["output_object_path"] = output_object_path
        __props__.__dict__["output_storage"] = output_storage
        __props__.__dict__["session_context"] = session_context
        __props__.__dict__["session_id"] = session_id
        __props__.__dict__["task_notify_config"] = task_notify_config
        __props__.__dict__["tasks_priority"] = tasks_priority
        return EditMediaOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fileInfos")
    def file_infos(self) -> pulumi.Output[Sequence['outputs.EditMediaOperationFileInfo']]:
        """
        Information of input video file.
        """
        return pulumi.get(self, "file_infos")

    @property
    @pulumi.getter(name="outputConfig")
    def output_config(self) -> pulumi.Output[Optional['outputs.EditMediaOperationOutputConfig']]:
        """
        Configuration for output files of video editing.
        """
        return pulumi.get(self, "output_config")

    @property
    @pulumi.getter(name="outputObjectPath")
    def output_object_path(self) -> pulumi.Output[str]:
        """
        The path to save the media processing output file.
        """
        return pulumi.get(self, "output_object_path")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> pulumi.Output['outputs.EditMediaOperationOutputStorage']:
        """
        The storage location of the media processing output file.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> pulumi.Output[Optional[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last three days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> pulumi.Output[Optional['outputs.EditMediaOperationTaskNotifyConfig']]:
        """
        Event notification information of task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @property
    @pulumi.getter(name="tasksPriority")
    def tasks_priority(self) -> pulumi.Output[Optional[int]]:
        """
        Task priority. The higher the value, the higher the priority. Value range: [-10,10]. If this parameter is left empty, 0 will be used.
        """
        return pulumi.get(self, "tasks_priority")

