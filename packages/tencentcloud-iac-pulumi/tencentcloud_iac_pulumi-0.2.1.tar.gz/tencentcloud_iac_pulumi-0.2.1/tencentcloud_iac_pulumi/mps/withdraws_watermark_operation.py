# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WithdrawsWatermarkOperationArgs', 'WithdrawsWatermarkOperation']

@pulumi.input_type
class WithdrawsWatermarkOperationArgs:
    def __init__(__self__, *,
                 input_info: pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs'],
                 session_context: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs']] = None):
        """
        The set of arguments for constructing a WithdrawsWatermarkOperation resource.
        :param pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs'] input_info: Input information of file for metadata getting.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field.
        :param pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        pulumi.set(__self__, "input_info", input_info)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs']:
        """
        Input information of file for metadata getting.
        """
        return pulumi.get(self, "input_info")

    @input_info.setter
    def input_info(self, value: pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs']):
        pulumi.set(self, "input_info", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs']]:
        """
        Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)


@pulumi.input_type
class _WithdrawsWatermarkOperationState:
    def __init__(__self__, *,
                 input_info: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs']] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs']] = None):
        """
        Input properties used for looking up and filtering WithdrawsWatermarkOperation resources.
        :param pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs'] input_info: Input information of file for metadata getting.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field.
        :param pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        if input_info is not None:
            pulumi.set(__self__, "input_info", input_info)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs']]:
        """
        Input information of file for metadata getting.
        """
        return pulumi.get(self, "input_info")

    @input_info.setter
    def input_info(self, value: Optional[pulumi.Input['WithdrawsWatermarkOperationInputInfoArgs']]):
        pulumi.set(self, "input_info", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs']]:
        """
        Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['WithdrawsWatermarkOperationTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)


class WithdrawsWatermarkOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 input_info: Optional[pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationInputInfoArgs']]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationTaskNotifyConfigArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps withdraws_watermark_operation

        ## Example Usage

        ### Withdraw the watermark from COS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_bucket = tencentcloud.cos.Bucket("exampleBucket",
            bucket=f"tf-test-mps-wm-{local['app_id']}",
            acl="public-read")
        example_bucket_object = tencentcloud.cos.BucketObject("exampleBucketObject",
            bucket=example_bucket.bucket,
            key="/test-file/test.mov",
            source="/Users/luoyin/Downloads/file_example_MOV_480_700kB.mov")
        operation = tencentcloud.mps.WithdrawsWatermarkOperation("operation",
            input_info=tencentcloud.mps.WithdrawsWatermarkOperationInputInfoArgs(
                type="COS",
                cos_input_info=tencentcloud.mps.WithdrawsWatermarkOperationInputInfoCosInputInfoArgs(
                    bucket=example_bucket_object.bucket,
                    region="%s",
                    object=example_bucket_object.key,
                ),
            ),
            session_context="this is a example session context")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationInputInfoArgs']] input_info: Input information of file for metadata getting.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field.
        :param pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WithdrawsWatermarkOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps withdraws_watermark_operation

        ## Example Usage

        ### Withdraw the watermark from COS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_bucket = tencentcloud.cos.Bucket("exampleBucket",
            bucket=f"tf-test-mps-wm-{local['app_id']}",
            acl="public-read")
        example_bucket_object = tencentcloud.cos.BucketObject("exampleBucketObject",
            bucket=example_bucket.bucket,
            key="/test-file/test.mov",
            source="/Users/luoyin/Downloads/file_example_MOV_480_700kB.mov")
        operation = tencentcloud.mps.WithdrawsWatermarkOperation("operation",
            input_info=tencentcloud.mps.WithdrawsWatermarkOperationInputInfoArgs(
                type="COS",
                cos_input_info=tencentcloud.mps.WithdrawsWatermarkOperationInputInfoCosInputInfoArgs(
                    bucket=example_bucket_object.bucket,
                    region="%s",
                    object=example_bucket_object.key,
                ),
            ),
            session_context="this is a example session context")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param WithdrawsWatermarkOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WithdrawsWatermarkOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 input_info: Optional[pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationInputInfoArgs']]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationTaskNotifyConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WithdrawsWatermarkOperationArgs.__new__(WithdrawsWatermarkOperationArgs)

            if input_info is None and not opts.urn:
                raise TypeError("Missing required property 'input_info'")
            __props__.__dict__["input_info"] = input_info
            __props__.__dict__["session_context"] = session_context
            __props__.__dict__["task_notify_config"] = task_notify_config
        super(WithdrawsWatermarkOperation, __self__).__init__(
            'tencentcloud:Mps/withdrawsWatermarkOperation:WithdrawsWatermarkOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            input_info: Optional[pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationInputInfoArgs']]] = None,
            session_context: Optional[pulumi.Input[str]] = None,
            task_notify_config: Optional[pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationTaskNotifyConfigArgs']]] = None) -> 'WithdrawsWatermarkOperation':
        """
        Get an existing WithdrawsWatermarkOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationInputInfoArgs']] input_info: Input information of file for metadata getting.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field.
        :param pulumi.Input[pulumi.InputType['WithdrawsWatermarkOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WithdrawsWatermarkOperationState.__new__(_WithdrawsWatermarkOperationState)

        __props__.__dict__["input_info"] = input_info
        __props__.__dict__["session_context"] = session_context
        __props__.__dict__["task_notify_config"] = task_notify_config
        return WithdrawsWatermarkOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> pulumi.Output['outputs.WithdrawsWatermarkOperationInputInfo']:
        """
        Input information of file for metadata getting.
        """
        return pulumi.get(self, "input_info")

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> pulumi.Output[Optional[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field.
        """
        return pulumi.get(self, "session_context")

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> pulumi.Output[Optional['outputs.WithdrawsWatermarkOperationTaskNotifyConfig']]:
        """
        Event notification information of a task. If this parameter is left empty, no event notifications will be obtained.
        """
        return pulumi.get(self, "task_notify_config")

