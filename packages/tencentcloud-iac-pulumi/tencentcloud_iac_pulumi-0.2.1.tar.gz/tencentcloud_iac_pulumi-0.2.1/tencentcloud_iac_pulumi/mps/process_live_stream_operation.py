# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProcessLiveStreamOperationArgs', 'ProcessLiveStreamOperation']

@pulumi.input_type
class ProcessLiveStreamOperationArgs:
    def __init__(__self__, *,
                 task_notify_config: pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs'],
                 url: pulumi.Input[str],
                 ai_analysis_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs']] = None,
                 ai_content_review_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs']] = None,
                 ai_quality_control_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs']] = None,
                 ai_recognition_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs']] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs']] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProcessLiveStreamOperation resource.
        :param pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of a task, which is used to specify the live stream processing result.
        :param pulumi.Input[str] url: Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
        :param pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs'] ai_analysis_task: AI video intelligent analysis input parameter types.
        :param pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs'] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs'] ai_quality_control_task: The parameters for a video quality control task.
        :param pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs'] ai_recognition_task: Type parameter of video content recognition task.
        :param pulumi.Input[str] output_dir: Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the `/` directory will be used.
        :param pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs'] output_storage: Target bucket of a live stream processing output file. This parameter is required if a file will be output.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        pulumi.set(__self__, "task_notify_config", task_notify_config)
        pulumi.set(__self__, "url", url)
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_quality_control_task is not None:
            pulumi.set(__self__, "ai_quality_control_task", ai_quality_control_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs']:
        """
        Event notification information of a task, which is used to specify the live stream processing result.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs']):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs']]:
        """
        AI video intelligent analysis input parameter types.
        """
        return pulumi.get(self, "ai_analysis_task")

    @ai_analysis_task.setter
    def ai_analysis_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs']]):
        pulumi.set(self, "ai_analysis_task", value)

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs']]:
        """
        Type parameter of a video content audit task.
        """
        return pulumi.get(self, "ai_content_review_task")

    @ai_content_review_task.setter
    def ai_content_review_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs']]):
        pulumi.set(self, "ai_content_review_task", value)

    @property
    @pulumi.getter(name="aiQualityControlTask")
    def ai_quality_control_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs']]:
        """
        The parameters for a video quality control task.
        """
        return pulumi.get(self, "ai_quality_control_task")

    @ai_quality_control_task.setter
    def ai_quality_control_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs']]):
        pulumi.set(self, "ai_quality_control_task", value)

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs']]:
        """
        Type parameter of video content recognition task.
        """
        return pulumi.get(self, "ai_recognition_task")

    @ai_recognition_task.setter
    def ai_recognition_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs']]):
        pulumi.set(self, "ai_recognition_task", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the `/` directory will be used.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs']]:
        """
        Target bucket of a live stream processing output file. This parameter is required if a file will be output.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[int]]:
        """
        The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)


@pulumi.input_type
class _ProcessLiveStreamOperationState:
    def __init__(__self__, *,
                 ai_analysis_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs']] = None,
                 ai_content_review_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs']] = None,
                 ai_quality_control_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs']] = None,
                 ai_recognition_task: Optional[pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs']] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs']] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs']] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ProcessLiveStreamOperation resources.
        :param pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs'] ai_analysis_task: AI video intelligent analysis input parameter types.
        :param pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs'] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs'] ai_quality_control_task: The parameters for a video quality control task.
        :param pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs'] ai_recognition_task: Type parameter of video content recognition task.
        :param pulumi.Input[str] output_dir: Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the `/` directory will be used.
        :param pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs'] output_storage: Target bucket of a live stream processing output file. This parameter is required if a file will be output.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs'] task_notify_config: Event notification information of a task, which is used to specify the live stream processing result.
        :param pulumi.Input[str] url: Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
        """
        if ai_analysis_task is not None:
            pulumi.set(__self__, "ai_analysis_task", ai_analysis_task)
        if ai_content_review_task is not None:
            pulumi.set(__self__, "ai_content_review_task", ai_content_review_task)
        if ai_quality_control_task is not None:
            pulumi.set(__self__, "ai_quality_control_task", ai_quality_control_task)
        if ai_recognition_task is not None:
            pulumi.set(__self__, "ai_recognition_task", ai_recognition_task)
        if output_dir is not None:
            pulumi.set(__self__, "output_dir", output_dir)
        if output_storage is not None:
            pulumi.set(__self__, "output_storage", output_storage)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if session_context is not None:
            pulumi.set(__self__, "session_context", session_context)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)
        if task_notify_config is not None:
            pulumi.set(__self__, "task_notify_config", task_notify_config)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs']]:
        """
        AI video intelligent analysis input parameter types.
        """
        return pulumi.get(self, "ai_analysis_task")

    @ai_analysis_task.setter
    def ai_analysis_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiAnalysisTaskArgs']]):
        pulumi.set(self, "ai_analysis_task", value)

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs']]:
        """
        Type parameter of a video content audit task.
        """
        return pulumi.get(self, "ai_content_review_task")

    @ai_content_review_task.setter
    def ai_content_review_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiContentReviewTaskArgs']]):
        pulumi.set(self, "ai_content_review_task", value)

    @property
    @pulumi.getter(name="aiQualityControlTask")
    def ai_quality_control_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs']]:
        """
        The parameters for a video quality control task.
        """
        return pulumi.get(self, "ai_quality_control_task")

    @ai_quality_control_task.setter
    def ai_quality_control_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiQualityControlTaskArgs']]):
        pulumi.set(self, "ai_quality_control_task", value)

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs']]:
        """
        Type parameter of video content recognition task.
        """
        return pulumi.get(self, "ai_recognition_task")

    @ai_recognition_task.setter
    def ai_recognition_task(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationAiRecognitionTaskArgs']]):
        pulumi.set(self, "ai_recognition_task", value)

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the `/` directory will be used.
        """
        return pulumi.get(self, "output_dir")

    @output_dir.setter
    def output_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_dir", value)

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs']]:
        """
        Target bucket of a live stream processing output file. This parameter is required if a file will be output.
        """
        return pulumi.get(self, "output_storage")

    @output_storage.setter
    def output_storage(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationOutputStorageArgs']]):
        pulumi.set(self, "output_storage", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[int]]:
        """
        The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> Optional[pulumi.Input[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @session_context.setter
    def session_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_context", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> Optional[pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs']]:
        """
        Event notification information of a task, which is used to specify the live stream processing result.
        """
        return pulumi.get(self, "task_notify_config")

    @task_notify_config.setter
    def task_notify_config(self, value: Optional[pulumi.Input['ProcessLiveStreamOperationTaskNotifyConfigArgs']]):
        pulumi.set(self, "task_notify_config", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class ProcessLiveStreamOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiAnalysisTaskArgs']]] = None,
                 ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiContentReviewTaskArgs']]] = None,
                 ai_quality_control_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiQualityControlTaskArgs']]] = None,
                 ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiRecognitionTaskArgs']]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationOutputStorageArgs']]] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationTaskNotifyConfigArgs']]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps process_live_stream_operation

        ## Example Usage

        ### Process mps live stream through CMQ

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        output = tencentcloud.cos.Bucket("output",
            bucket=f"tf-bucket-mps-process-live-stream-output-{local['app_id']}",
            force_clean=True,
            acl="public-read")
        operation = tencentcloud.mps.ProcessLiveStreamOperation("operation",
            url="http://www.abc.com/abc.m3u8",
            task_notify_config=tencentcloud.mps.ProcessLiveStreamOperationTaskNotifyConfigArgs(
                cmq_model="Queue",
                cmq_region="gz",
                queue_name="test",
                topic_name="test",
                notify_type="CMQ",
            ),
            output_storage=tencentcloud.mps.ProcessLiveStreamOperationOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_dir="/output/",
            ai_content_review_task=tencentcloud.mps.ProcessLiveStreamOperationAiContentReviewTaskArgs(
                definition=10,
            ),
            ai_recognition_task=tencentcloud.mps.ProcessLiveStreamOperationAiRecognitionTaskArgs(
                definition=10,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiAnalysisTaskArgs']] ai_analysis_task: AI video intelligent analysis input parameter types.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiContentReviewTaskArgs']] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiQualityControlTaskArgs']] ai_quality_control_task: The parameters for a video quality control task.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiRecognitionTaskArgs']] ai_recognition_task: Type parameter of video content recognition task.
        :param pulumi.Input[str] output_dir: Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the `/` directory will be used.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationOutputStorageArgs']] output_storage: Target bucket of a live stream processing output file. This parameter is required if a file will be output.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of a task, which is used to specify the live stream processing result.
        :param pulumi.Input[str] url: Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProcessLiveStreamOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps process_live_stream_operation

        ## Example Usage

        ### Process mps live stream through CMQ

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        output = tencentcloud.cos.Bucket("output",
            bucket=f"tf-bucket-mps-process-live-stream-output-{local['app_id']}",
            force_clean=True,
            acl="public-read")
        operation = tencentcloud.mps.ProcessLiveStreamOperation("operation",
            url="http://www.abc.com/abc.m3u8",
            task_notify_config=tencentcloud.mps.ProcessLiveStreamOperationTaskNotifyConfigArgs(
                cmq_model="Queue",
                cmq_region="gz",
                queue_name="test",
                topic_name="test",
                notify_type="CMQ",
            ),
            output_storage=tencentcloud.mps.ProcessLiveStreamOperationOutputStorageArgs(
                type="COS",
                cos_output_storage=tencentcloud.mps.ProcessLiveStreamOperationOutputStorageCosOutputStorageArgs(
                    bucket=output.bucket,
                    region="%s",
                ),
            ),
            output_dir="/output/",
            ai_content_review_task=tencentcloud.mps.ProcessLiveStreamOperationAiContentReviewTaskArgs(
                definition=10,
            ),
            ai_recognition_task=tencentcloud.mps.ProcessLiveStreamOperationAiRecognitionTaskArgs(
                definition=10,
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ProcessLiveStreamOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProcessLiveStreamOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiAnalysisTaskArgs']]] = None,
                 ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiContentReviewTaskArgs']]] = None,
                 ai_quality_control_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiQualityControlTaskArgs']]] = None,
                 ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiRecognitionTaskArgs']]] = None,
                 output_dir: Optional[pulumi.Input[str]] = None,
                 output_storage: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationOutputStorageArgs']]] = None,
                 schedule_id: Optional[pulumi.Input[int]] = None,
                 session_context: Optional[pulumi.Input[str]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 task_notify_config: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationTaskNotifyConfigArgs']]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProcessLiveStreamOperationArgs.__new__(ProcessLiveStreamOperationArgs)

            __props__.__dict__["ai_analysis_task"] = ai_analysis_task
            __props__.__dict__["ai_content_review_task"] = ai_content_review_task
            __props__.__dict__["ai_quality_control_task"] = ai_quality_control_task
            __props__.__dict__["ai_recognition_task"] = ai_recognition_task
            __props__.__dict__["output_dir"] = output_dir
            __props__.__dict__["output_storage"] = output_storage
            __props__.__dict__["schedule_id"] = schedule_id
            __props__.__dict__["session_context"] = session_context
            __props__.__dict__["session_id"] = session_id
            if task_notify_config is None and not opts.urn:
                raise TypeError("Missing required property 'task_notify_config'")
            __props__.__dict__["task_notify_config"] = task_notify_config
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
        super(ProcessLiveStreamOperation, __self__).__init__(
            'tencentcloud:Mps/processLiveStreamOperation:ProcessLiveStreamOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ai_analysis_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiAnalysisTaskArgs']]] = None,
            ai_content_review_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiContentReviewTaskArgs']]] = None,
            ai_quality_control_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiQualityControlTaskArgs']]] = None,
            ai_recognition_task: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiRecognitionTaskArgs']]] = None,
            output_dir: Optional[pulumi.Input[str]] = None,
            output_storage: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationOutputStorageArgs']]] = None,
            schedule_id: Optional[pulumi.Input[int]] = None,
            session_context: Optional[pulumi.Input[str]] = None,
            session_id: Optional[pulumi.Input[str]] = None,
            task_notify_config: Optional[pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationTaskNotifyConfigArgs']]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'ProcessLiveStreamOperation':
        """
        Get an existing ProcessLiveStreamOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiAnalysisTaskArgs']] ai_analysis_task: AI video intelligent analysis input parameter types.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiContentReviewTaskArgs']] ai_content_review_task: Type parameter of a video content audit task.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiQualityControlTaskArgs']] ai_quality_control_task: The parameters for a video quality control task.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationAiRecognitionTaskArgs']] ai_recognition_task: Type parameter of video content recognition task.
        :param pulumi.Input[str] output_dir: Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the `/` directory will be used.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationOutputStorageArgs']] output_storage: Target bucket of a live stream processing output file. This parameter is required if a file will be output.
        :param pulumi.Input[int] schedule_id: The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.
        :param pulumi.Input[str] session_context: The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        :param pulumi.Input[str] session_id: The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        :param pulumi.Input[pulumi.InputType['ProcessLiveStreamOperationTaskNotifyConfigArgs']] task_notify_config: Event notification information of a task, which is used to specify the live stream processing result.
        :param pulumi.Input[str] url: Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProcessLiveStreamOperationState.__new__(_ProcessLiveStreamOperationState)

        __props__.__dict__["ai_analysis_task"] = ai_analysis_task
        __props__.__dict__["ai_content_review_task"] = ai_content_review_task
        __props__.__dict__["ai_quality_control_task"] = ai_quality_control_task
        __props__.__dict__["ai_recognition_task"] = ai_recognition_task
        __props__.__dict__["output_dir"] = output_dir
        __props__.__dict__["output_storage"] = output_storage
        __props__.__dict__["schedule_id"] = schedule_id
        __props__.__dict__["session_context"] = session_context
        __props__.__dict__["session_id"] = session_id
        __props__.__dict__["task_notify_config"] = task_notify_config
        __props__.__dict__["url"] = url
        return ProcessLiveStreamOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aiAnalysisTask")
    def ai_analysis_task(self) -> pulumi.Output[Optional['outputs.ProcessLiveStreamOperationAiAnalysisTask']]:
        """
        AI video intelligent analysis input parameter types.
        """
        return pulumi.get(self, "ai_analysis_task")

    @property
    @pulumi.getter(name="aiContentReviewTask")
    def ai_content_review_task(self) -> pulumi.Output[Optional['outputs.ProcessLiveStreamOperationAiContentReviewTask']]:
        """
        Type parameter of a video content audit task.
        """
        return pulumi.get(self, "ai_content_review_task")

    @property
    @pulumi.getter(name="aiQualityControlTask")
    def ai_quality_control_task(self) -> pulumi.Output[Optional['outputs.ProcessLiveStreamOperationAiQualityControlTask']]:
        """
        The parameters for a video quality control task.
        """
        return pulumi.get(self, "ai_quality_control_task")

    @property
    @pulumi.getter(name="aiRecognitionTask")
    def ai_recognition_task(self) -> pulumi.Output[Optional['outputs.ProcessLiveStreamOperationAiRecognitionTask']]:
        """
        Type parameter of video content recognition task.
        """
        return pulumi.get(self, "ai_recognition_task")

    @property
    @pulumi.getter(name="outputDir")
    def output_dir(self) -> pulumi.Output[Optional[str]]:
        """
        Target directory of a live stream processing output file, such as `/movie/201909/`. If this parameter is left empty, the `/` directory will be used.
        """
        return pulumi.get(self, "output_dir")

    @property
    @pulumi.getter(name="outputStorage")
    def output_storage(self) -> pulumi.Output[Optional['outputs.ProcessLiveStreamOperationOutputStorage']]:
        """
        Target bucket of a live stream processing output file. This parameter is required if a file will be output.
        """
        return pulumi.get(self, "output_storage")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[Optional[int]]:
        """
        The scheme ID.Note 1: About `OutputStorage` and `OutputDir`:If an output storage and directory are specified for a subtask of the scheme, those output settings will be applied.If an output storage and directory are not specified for the subtasks of a scheme, the output parameters passed in the `ProcessMedia` API will be applied.Note 2: If `TaskNotifyConfig` is specified, the specified settings will be used instead of the default callback settings of the scheme.
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="sessionContext")
    def session_context(self) -> pulumi.Output[Optional[str]]:
        """
        The source context which is used to pass through the user request information. The task flow status change callback will return the value of this field. It can contain up to 1,000 characters.
        """
        return pulumi.get(self, "session_context")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID used for deduplication. If there was a request with the same ID in the last seven days, the current request will return an error. The ID can contain up to 50 characters. If this parameter is left empty or an empty string is entered, no deduplication will be performed.
        """
        return pulumi.get(self, "session_id")

    @property
    @pulumi.getter(name="taskNotifyConfig")
    def task_notify_config(self) -> pulumi.Output['outputs.ProcessLiveStreamOperationTaskNotifyConfig']:
        """
        Event notification information of a task, which is used to specify the live stream processing result.
        """
        return pulumi.get(self, "task_notify_config")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Live stream URL, which must be a live stream file address. RTMP, HLS, and FLV are supported.
        """
        return pulumi.get(self, "url")

