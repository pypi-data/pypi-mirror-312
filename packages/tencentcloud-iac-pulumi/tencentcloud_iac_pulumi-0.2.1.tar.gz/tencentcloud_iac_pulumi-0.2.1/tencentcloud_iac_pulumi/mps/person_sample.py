# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PersonSampleArgs', 'PersonSample']

@pulumi.input_type
class PersonSampleArgs:
    def __init__(__self__, *,
                 usages: pulumi.Input[Sequence[pulumi.Input[str]]],
                 description: Optional[pulumi.Input[str]] = None,
                 face_contents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PersonSample resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
        :param pulumi.Input[str] description: Material description, length limit: 1024 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] face_contents: Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
        :param pulumi.Input[str] name: Material name, length limit: 20 characters.
        """
        pulumi.set(__self__, "usages", usages)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if face_contents is not None:
            pulumi.set(__self__, "face_contents", face_contents)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def usages(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
        """
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "usages", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Material description, length limit: 1024 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="faceContents")
    def face_contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
        """
        return pulumi.get(self, "face_contents")

    @face_contents.setter
    def face_contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "face_contents", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Material name, length limit: 20 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PersonSampleState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 face_contents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering PersonSample resources.
        :param pulumi.Input[str] description: Material description, length limit: 1024 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] face_contents: Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
        :param pulumi.Input[str] name: Material name, length limit: 20 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if face_contents is not None:
            pulumi.set(__self__, "face_contents", face_contents)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Material description, length limit: 1024 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="faceContents")
    def face_contents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
        """
        return pulumi.get(self, "face_contents")

    @face_contents.setter
    def face_contents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "face_contents", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Material name, length limit: 20 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
        """
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "usages", value)


class PersonSample(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 face_contents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps person_sample

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import base64
        import tencentcloud_iac_pulumi as tencentcloud

        person_sample = tencentcloud.mps.PersonSample("personSample",
            usages=["Review.Face"],
            description="test",
            face_contents=[(lambda path: base64.b64encode(open(path).read().encode()).decode())("./person.png")])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps person_sample can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/personSample:PersonSample person_sample person_sample_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Material description, length limit: 1024 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] face_contents: Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
        :param pulumi.Input[str] name: Material name, length limit: 20 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PersonSampleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps person_sample

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import base64
        import tencentcloud_iac_pulumi as tencentcloud

        person_sample = tencentcloud.mps.PersonSample("personSample",
            usages=["Review.Face"],
            description="test",
            face_contents=[(lambda path: base64.b64encode(open(path).read().encode()).decode())("./person.png")])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps person_sample can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/personSample:PersonSample person_sample person_sample_id
        ```

        :param str resource_name: The name of the resource.
        :param PersonSampleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PersonSampleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 face_contents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PersonSampleArgs.__new__(PersonSampleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["face_contents"] = face_contents
            __props__.__dict__["name"] = name
            if usages is None and not opts.urn:
                raise TypeError("Missing required property 'usages'")
            __props__.__dict__["usages"] = usages
        super(PersonSample, __self__).__init__(
            'tencentcloud:Mps/personSample:PersonSample',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            face_contents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'PersonSample':
        """
        Get an existing PersonSample resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Material description, length limit: 1024 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] face_contents: Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
        :param pulumi.Input[str] name: Material name, length limit: 20 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PersonSampleState.__new__(_PersonSampleState)

        __props__.__dict__["description"] = description
        __props__.__dict__["face_contents"] = face_contents
        __props__.__dict__["name"] = name
        __props__.__dict__["usages"] = usages
        return PersonSample(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Material description, length limit: 1024 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="faceContents")
    def face_contents(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Material image [Base64](https://tools.ietf.org/html/rfc4648) encoded string only supports jpeg and png image formats. Array length limit: 5 images.Note: The picture must be a single portrait with clearer facial features, with a pixel size of not less than 200*200.
        """
        return pulumi.get(self, "face_contents")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Material name, length limit: 20 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def usages(self) -> pulumi.Output[Sequence[str]]:
        """
        Material application scene, optional value:1. Recognition.Face: used for content recognition 2. Review.Face: used for inappropriate content identification 3. All: contains all of the above, equivalent to 1+2.
        """
        return pulumi.get(self, "usages")

