# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMediaMetaDataResult',
    'AwaitableGetMediaMetaDataResult',
    'get_media_meta_data',
    'get_media_meta_data_output',
]

@pulumi.output_type
class GetMediaMetaDataResult:
    """
    A collection of values returned by getMediaMetaData.
    """
    def __init__(__self__, id=None, input_info=None, meta_datas=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if input_info and not isinstance(input_info, dict):
            raise TypeError("Expected argument 'input_info' to be a dict")
        pulumi.set(__self__, "input_info", input_info)
        if meta_datas and not isinstance(meta_datas, list):
            raise TypeError("Expected argument 'meta_datas' to be a list")
        pulumi.set(__self__, "meta_datas", meta_datas)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inputInfo")
    def input_info(self) -> 'outputs.GetMediaMetaDataInputInfoResult':
        return pulumi.get(self, "input_info")

    @property
    @pulumi.getter(name="metaDatas")
    def meta_datas(self) -> Sequence['outputs.GetMediaMetaDataMetaDataResult']:
        """
        Media metadata.
        """
        return pulumi.get(self, "meta_datas")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetMediaMetaDataResult(GetMediaMetaDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMediaMetaDataResult(
            id=self.id,
            input_info=self.input_info,
            meta_datas=self.meta_datas,
            result_output_file=self.result_output_file)


def get_media_meta_data(input_info: Optional[pulumi.InputType['GetMediaMetaDataInputInfoArgs']] = None,
                        result_output_file: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMediaMetaDataResult:
    """
    Use this data source to query detailed information of mps media_meta_data

    ## Example Usage

    ### Query the mps media meta data through COS

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
        key="/mps-test/test.mov")
    metadata = tencentcloud.Mps.get_media_meta_data(input_info=tencentcloud.mps.GetMediaMetaDataInputInfoArgs(
        type="COS",
        cos_input_info=tencentcloud.mps.GetMediaMetaDataInputInfoCosInputInfoArgs(
            bucket=object.bucket,
            region="%s",
            object=object.key,
        ),
    ))
    ```
    <!--End PulumiCodeChooser -->


    :param pulumi.InputType['GetMediaMetaDataInputInfoArgs'] input_info: Input information of file for metadata getting.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['inputInfo'] = input_info
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mps/getMediaMetaData:getMediaMetaData', __args__, opts=opts, typ=GetMediaMetaDataResult).value

    return AwaitableGetMediaMetaDataResult(
        id=pulumi.get(__ret__, 'id'),
        input_info=pulumi.get(__ret__, 'input_info'),
        meta_datas=pulumi.get(__ret__, 'meta_datas'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_media_meta_data)
def get_media_meta_data_output(input_info: Optional[pulumi.Input[pulumi.InputType['GetMediaMetaDataInputInfoArgs']]] = None,
                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMediaMetaDataResult]:
    """
    Use this data source to query detailed information of mps media_meta_data

    ## Example Usage

    ### Query the mps media meta data through COS

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    object = tencentcloud.Cos.get_bucket_object(bucket=f"keep-bucket-{local['app_id']}",
        key="/mps-test/test.mov")
    metadata = tencentcloud.Mps.get_media_meta_data(input_info=tencentcloud.mps.GetMediaMetaDataInputInfoArgs(
        type="COS",
        cos_input_info=tencentcloud.mps.GetMediaMetaDataInputInfoCosInputInfoArgs(
            bucket=object.bucket,
            region="%s",
            object=object.key,
        ),
    ))
    ```
    <!--End PulumiCodeChooser -->


    :param pulumi.InputType['GetMediaMetaDataInputInfoArgs'] input_info: Input information of file for metadata getting.
    :param str result_output_file: Used to save results.
    """
    ...
