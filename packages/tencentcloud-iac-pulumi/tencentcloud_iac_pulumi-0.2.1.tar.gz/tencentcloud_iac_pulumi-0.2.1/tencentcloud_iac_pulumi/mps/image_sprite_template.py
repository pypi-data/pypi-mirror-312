# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ImageSpriteTemplateArgs', 'ImageSpriteTemplate']

@pulumi.input_type
class ImageSpriteTemplateArgs:
    def __init__(__self__, *,
                 column_count: pulumi.Input[int],
                 row_count: pulumi.Input[int],
                 sample_interval: pulumi.Input[int],
                 sample_type: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ImageSpriteTemplate resource.
        :param pulumi.Input[int] column_count: The number of columns in the small image in the sprite.
        :param pulumi.Input[int] row_count: The number of rows in the small image in the sprite.
        :param pulumi.Input[int] sample_interval: Sampling interval.When SampleType is Percent, specify the percentage of the sampling interval.When SampleType is Time, specify the sampling interval time in seconds.
        :param pulumi.Input[str] sample_type: Sampling type, optional value:Percent/Time.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] fill_type: Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.Default value: black.
        :param pulumi.Input[str] format: Image format, the value can be jpg, png, webp. Default is jpg.
        :param pulumi.Input[int] height: The maximum value of the height (or short side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        :param pulumi.Input[str] name: Image sprite template name, length limit: 64 characters.
        :param pulumi.Input[str] resolution_adaptive: Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
        :param pulumi.Input[int] width: The maximum value of the width (or long side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        pulumi.set(__self__, "column_count", column_count)
        pulumi.set(__self__, "row_count", row_count)
        pulumi.set(__self__, "sample_interval", sample_interval)
        pulumi.set(__self__, "sample_type", sample_type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="columnCount")
    def column_count(self) -> pulumi.Input[int]:
        """
        The number of columns in the small image in the sprite.
        """
        return pulumi.get(self, "column_count")

    @column_count.setter
    def column_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "column_count", value)

    @property
    @pulumi.getter(name="rowCount")
    def row_count(self) -> pulumi.Input[int]:
        """
        The number of rows in the small image in the sprite.
        """
        return pulumi.get(self, "row_count")

    @row_count.setter
    def row_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "row_count", value)

    @property
    @pulumi.getter(name="sampleInterval")
    def sample_interval(self) -> pulumi.Input[int]:
        """
        Sampling interval.When SampleType is Percent, specify the percentage of the sampling interval.When SampleType is Time, specify the sampling interval time in seconds.
        """
        return pulumi.get(self, "sample_interval")

    @sample_interval.setter
    def sample_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "sample_interval", value)

    @property
    @pulumi.getter(name="sampleType")
    def sample_type(self) -> pulumi.Input[str]:
        """
        Sampling type, optional value:Percent/Time.
        """
        return pulumi.get(self, "sample_type")

    @sample_type.setter
    def sample_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "sample_type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.Default value: black.
        """
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Image format, the value can be jpg, png, webp. Default is jpg.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum value of the height (or short side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Image sprite template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        """
        Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
        """
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum value of the width (or long side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class _ImageSpriteTemplateState:
    def __init__(__self__, *,
                 column_count: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 row_count: Optional[pulumi.Input[int]] = None,
                 sample_interval: Optional[pulumi.Input[int]] = None,
                 sample_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ImageSpriteTemplate resources.
        :param pulumi.Input[int] column_count: The number of columns in the small image in the sprite.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] fill_type: Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.Default value: black.
        :param pulumi.Input[str] format: Image format, the value can be jpg, png, webp. Default is jpg.
        :param pulumi.Input[int] height: The maximum value of the height (or short side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        :param pulumi.Input[str] name: Image sprite template name, length limit: 64 characters.
        :param pulumi.Input[str] resolution_adaptive: Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
        :param pulumi.Input[int] row_count: The number of rows in the small image in the sprite.
        :param pulumi.Input[int] sample_interval: Sampling interval.When SampleType is Percent, specify the percentage of the sampling interval.When SampleType is Time, specify the sampling interval time in seconds.
        :param pulumi.Input[str] sample_type: Sampling type, optional value:Percent/Time.
        :param pulumi.Input[int] width: The maximum value of the width (or long side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        if column_count is not None:
            pulumi.set(__self__, "column_count", column_count)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if fill_type is not None:
            pulumi.set(__self__, "fill_type", fill_type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resolution_adaptive is not None:
            pulumi.set(__self__, "resolution_adaptive", resolution_adaptive)
        if row_count is not None:
            pulumi.set(__self__, "row_count", row_count)
        if sample_interval is not None:
            pulumi.set(__self__, "sample_interval", sample_interval)
        if sample_type is not None:
            pulumi.set(__self__, "sample_type", sample_type)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="columnCount")
    def column_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of columns in the small image in the sprite.
        """
        return pulumi.get(self, "column_count")

    @column_count.setter
    def column_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "column_count", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> Optional[pulumi.Input[str]]:
        """
        Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.Default value: black.
        """
        return pulumi.get(self, "fill_type")

    @fill_type.setter
    def fill_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        Image format, the value can be jpg, png, webp. Default is jpg.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum value of the height (or short side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Image sprite template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> Optional[pulumi.Input[str]]:
        """
        Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
        """
        return pulumi.get(self, "resolution_adaptive")

    @resolution_adaptive.setter
    def resolution_adaptive(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_adaptive", value)

    @property
    @pulumi.getter(name="rowCount")
    def row_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of rows in the small image in the sprite.
        """
        return pulumi.get(self, "row_count")

    @row_count.setter
    def row_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "row_count", value)

    @property
    @pulumi.getter(name="sampleInterval")
    def sample_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Sampling interval.When SampleType is Percent, specify the percentage of the sampling interval.When SampleType is Time, specify the sampling interval time in seconds.
        """
        return pulumi.get(self, "sample_interval")

    @sample_interval.setter
    def sample_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_interval", value)

    @property
    @pulumi.getter(name="sampleType")
    def sample_type(self) -> Optional[pulumi.Input[str]]:
        """
        Sampling type, optional value:Percent/Time.
        """
        return pulumi.get(self, "sample_type")

    @sample_type.setter
    def sample_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_type", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum value of the width (or long side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


class ImageSpriteTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 column_count: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 row_count: Optional[pulumi.Input[int]] = None,
                 sample_interval: Optional[pulumi.Input[int]] = None,
                 sample_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a mps image_sprite_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        image_sprite_template = tencentcloud.mps.ImageSpriteTemplate("imageSpriteTemplate",
            column_count=10,
            fill_type="stretch",
            format="jpg",
            height=143,
            resolution_adaptive="open",
            row_count=10,
            sample_interval=10,
            sample_type="Time",
            width=182)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps image_sprite_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/imageSpriteTemplate:ImageSpriteTemplate image_sprite_template image_sprite_template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] column_count: The number of columns in the small image in the sprite.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] fill_type: Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.Default value: black.
        :param pulumi.Input[str] format: Image format, the value can be jpg, png, webp. Default is jpg.
        :param pulumi.Input[int] height: The maximum value of the height (or short side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        :param pulumi.Input[str] name: Image sprite template name, length limit: 64 characters.
        :param pulumi.Input[str] resolution_adaptive: Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
        :param pulumi.Input[int] row_count: The number of rows in the small image in the sprite.
        :param pulumi.Input[int] sample_interval: Sampling interval.When SampleType is Percent, specify the percentage of the sampling interval.When SampleType is Time, specify the sampling interval time in seconds.
        :param pulumi.Input[str] sample_type: Sampling type, optional value:Percent/Time.
        :param pulumi.Input[int] width: The maximum value of the width (or long side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageSpriteTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mps image_sprite_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        image_sprite_template = tencentcloud.mps.ImageSpriteTemplate("imageSpriteTemplate",
            column_count=10,
            fill_type="stretch",
            format="jpg",
            height=143,
            resolution_adaptive="open",
            row_count=10,
            sample_interval=10,
            sample_type="Time",
            width=182)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mps image_sprite_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mps/imageSpriteTemplate:ImageSpriteTemplate image_sprite_template image_sprite_template_id
        ```

        :param str resource_name: The name of the resource.
        :param ImageSpriteTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageSpriteTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 column_count: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 fill_type: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resolution_adaptive: Optional[pulumi.Input[str]] = None,
                 row_count: Optional[pulumi.Input[int]] = None,
                 sample_interval: Optional[pulumi.Input[int]] = None,
                 sample_type: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageSpriteTemplateArgs.__new__(ImageSpriteTemplateArgs)

            if column_count is None and not opts.urn:
                raise TypeError("Missing required property 'column_count'")
            __props__.__dict__["column_count"] = column_count
            __props__.__dict__["comment"] = comment
            __props__.__dict__["fill_type"] = fill_type
            __props__.__dict__["format"] = format
            __props__.__dict__["height"] = height
            __props__.__dict__["name"] = name
            __props__.__dict__["resolution_adaptive"] = resolution_adaptive
            if row_count is None and not opts.urn:
                raise TypeError("Missing required property 'row_count'")
            __props__.__dict__["row_count"] = row_count
            if sample_interval is None and not opts.urn:
                raise TypeError("Missing required property 'sample_interval'")
            __props__.__dict__["sample_interval"] = sample_interval
            if sample_type is None and not opts.urn:
                raise TypeError("Missing required property 'sample_type'")
            __props__.__dict__["sample_type"] = sample_type
            __props__.__dict__["width"] = width
        super(ImageSpriteTemplate, __self__).__init__(
            'tencentcloud:Mps/imageSpriteTemplate:ImageSpriteTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            column_count: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            fill_type: Optional[pulumi.Input[str]] = None,
            format: Optional[pulumi.Input[str]] = None,
            height: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            resolution_adaptive: Optional[pulumi.Input[str]] = None,
            row_count: Optional[pulumi.Input[int]] = None,
            sample_interval: Optional[pulumi.Input[int]] = None,
            sample_type: Optional[pulumi.Input[str]] = None,
            width: Optional[pulumi.Input[int]] = None) -> 'ImageSpriteTemplate':
        """
        Get an existing ImageSpriteTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] column_count: The number of columns in the small image in the sprite.
        :param pulumi.Input[str] comment: Template description information, length limit: 256 characters.
        :param pulumi.Input[str] fill_type: Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.Default value: black.
        :param pulumi.Input[str] format: Image format, the value can be jpg, png, webp. Default is jpg.
        :param pulumi.Input[int] height: The maximum value of the height (or short side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        :param pulumi.Input[str] name: Image sprite template name, length limit: 64 characters.
        :param pulumi.Input[str] resolution_adaptive: Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
        :param pulumi.Input[int] row_count: The number of rows in the small image in the sprite.
        :param pulumi.Input[int] sample_interval: Sampling interval.When SampleType is Percent, specify the percentage of the sampling interval.When SampleType is Time, specify the sampling interval time in seconds.
        :param pulumi.Input[str] sample_type: Sampling type, optional value:Percent/Time.
        :param pulumi.Input[int] width: The maximum value of the width (or long side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageSpriteTemplateState.__new__(_ImageSpriteTemplateState)

        __props__.__dict__["column_count"] = column_count
        __props__.__dict__["comment"] = comment
        __props__.__dict__["fill_type"] = fill_type
        __props__.__dict__["format"] = format
        __props__.__dict__["height"] = height
        __props__.__dict__["name"] = name
        __props__.__dict__["resolution_adaptive"] = resolution_adaptive
        __props__.__dict__["row_count"] = row_count
        __props__.__dict__["sample_interval"] = sample_interval
        __props__.__dict__["sample_type"] = sample_type
        __props__.__dict__["width"] = width
        return ImageSpriteTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="columnCount")
    def column_count(self) -> pulumi.Output[int]:
        """
        The number of columns in the small image in the sprite.
        """
        return pulumi.get(self, "column_count")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Template description information, length limit: 256 characters.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="fillType")
    def fill_type(self) -> pulumi.Output[Optional[str]]:
        """
        Filling type, when the aspect ratio of the video stream configuration is inconsistent with the aspect ratio of the original video, the processing method for transcoding is filling. Optional filling type:stretch: Stretching, stretching each frame to fill the entire screen, which may cause the transcoded video to be squashed or stretched.black: Leave black, keep the video aspect ratio unchanged, and fill the rest of the edge with black.Default value: black.
        """
        return pulumi.get(self, "fill_type")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[str]]:
        """
        Image format, the value can be jpg, png, webp. Default is jpg.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def height(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum value of the height (or short side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Image sprite template name, length limit: 64 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resolutionAdaptive")
    def resolution_adaptive(self) -> pulumi.Output[Optional[str]]:
        """
        Adaptive resolution, optional value:open: At this time, Width represents the long side of the video, Height represents the short side of the video.close: At this point, Width represents the width of the video, and Height represents the height of the video.Default value: open.
        """
        return pulumi.get(self, "resolution_adaptive")

    @property
    @pulumi.getter(name="rowCount")
    def row_count(self) -> pulumi.Output[int]:
        """
        The number of rows in the small image in the sprite.
        """
        return pulumi.get(self, "row_count")

    @property
    @pulumi.getter(name="sampleInterval")
    def sample_interval(self) -> pulumi.Output[int]:
        """
        Sampling interval.When SampleType is Percent, specify the percentage of the sampling interval.When SampleType is Time, specify the sampling interval time in seconds.
        """
        return pulumi.get(self, "sample_interval")

    @property
    @pulumi.getter(name="sampleType")
    def sample_type(self) -> pulumi.Output[str]:
        """
        Sampling type, optional value:Percent/Time.
        """
        return pulumi.get(self, "sample_type")

    @property
    @pulumi.getter
    def width(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum value of the width (or long side) of the small image in the sprite image, value range: 0 and [128, 4096], unit: px.When Width and Height are both 0, the resolution is the same.When Width is 0 and Height is not 0, Width is scaled proportionally.When Width is not 0 and Height is 0, Height is scaled proportionally.When both Width and Height are not 0, the resolution is specified by the user.Default value: 0.
        """
        return pulumi.get(self, "width")

