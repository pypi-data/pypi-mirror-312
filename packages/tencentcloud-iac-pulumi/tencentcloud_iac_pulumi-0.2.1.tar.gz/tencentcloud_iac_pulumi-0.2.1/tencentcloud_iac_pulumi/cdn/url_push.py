# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UrlPushArgs', 'UrlPush']

@pulumi.input_type
class UrlPushArgs:
    def __init__(__self__, *,
                 urls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 area: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 parse_m3u8: Optional[pulumi.Input[bool]] = None,
                 redo: Optional[pulumi.Input[int]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UrlPush resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
        :param pulumi.Input[str] area: Specify push area. NOTE: only push same area cache contents.
        :param pulumi.Input[str] layer: Layer to push.
        :param pulumi.Input[bool] parse_m3u8: Whether to recursive parse m3u8 files.
        :param pulumi.Input[int] redo: Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
        :param pulumi.Input[str] user_agent: Specify `User-Agent` HTTP header, default: `TencentCdn`.
        """
        pulumi.set(__self__, "urls", urls)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if layer is not None:
            pulumi.set(__self__, "layer", layer)
        if parse_m3u8 is not None:
            pulumi.set(__self__, "parse_m3u8", parse_m3u8)
        if redo is not None:
            pulumi.set(__self__, "redo", redo)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "urls", value)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Specify push area. NOTE: only push same area cache contents.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def layer(self) -> Optional[pulumi.Input[str]]:
        """
        Layer to push.
        """
        return pulumi.get(self, "layer")

    @layer.setter
    def layer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layer", value)

    @property
    @pulumi.getter(name="parseM3u8")
    def parse_m3u8(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to recursive parse m3u8 files.
        """
        return pulumi.get(self, "parse_m3u8")

    @parse_m3u8.setter
    def parse_m3u8(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parse_m3u8", value)

    @property
    @pulumi.getter
    def redo(self) -> Optional[pulumi.Input[int]]:
        """
        Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
        """
        return pulumi.get(self, "redo")

    @redo.setter
    def redo(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redo", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        """
        Specify `User-Agent` HTTP header, default: `TencentCdn`.
        """
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class _UrlPushState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 parse_m3u8: Optional[pulumi.Input[bool]] = None,
                 push_histories: Optional[pulumi.Input[Sequence[pulumi.Input['UrlPushPushHistoryArgs']]]] = None,
                 redo: Optional[pulumi.Input[int]] = None,
                 task_id: Optional[pulumi.Input[str]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UrlPush resources.
        :param pulumi.Input[str] area: Specify push area. NOTE: only push same area cache contents.
        :param pulumi.Input[str] layer: Layer to push.
        :param pulumi.Input[bool] parse_m3u8: Whether to recursive parse m3u8 files.
        :param pulumi.Input[Sequence[pulumi.Input['UrlPushPushHistoryArgs']]] push_histories: logs of latest push task.
        :param pulumi.Input[int] redo: Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
        :param pulumi.Input[str] task_id: Push task id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
        :param pulumi.Input[str] user_agent: Specify `User-Agent` HTTP header, default: `TencentCdn`.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if layer is not None:
            pulumi.set(__self__, "layer", layer)
        if parse_m3u8 is not None:
            pulumi.set(__self__, "parse_m3u8", parse_m3u8)
        if push_histories is not None:
            pulumi.set(__self__, "push_histories", push_histories)
        if redo is not None:
            pulumi.set(__self__, "redo", redo)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)
        if urls is not None:
            pulumi.set(__self__, "urls", urls)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        Specify push area. NOTE: only push same area cache contents.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def layer(self) -> Optional[pulumi.Input[str]]:
        """
        Layer to push.
        """
        return pulumi.get(self, "layer")

    @layer.setter
    def layer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layer", value)

    @property
    @pulumi.getter(name="parseM3u8")
    def parse_m3u8(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to recursive parse m3u8 files.
        """
        return pulumi.get(self, "parse_m3u8")

    @parse_m3u8.setter
    def parse_m3u8(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parse_m3u8", value)

    @property
    @pulumi.getter(name="pushHistories")
    def push_histories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UrlPushPushHistoryArgs']]]]:
        """
        logs of latest push task.
        """
        return pulumi.get(self, "push_histories")

    @push_histories.setter
    def push_histories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UrlPushPushHistoryArgs']]]]):
        pulumi.set(self, "push_histories", value)

    @property
    @pulumi.getter
    def redo(self) -> Optional[pulumi.Input[int]]:
        """
        Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
        """
        return pulumi.get(self, "redo")

    @redo.setter
    def redo(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "redo", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        Push task id.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter
    def urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "urls", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[str]]:
        """
        Specify `User-Agent` HTTP header, default: `TencentCdn`.
        """
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_agent", value)


class UrlPush(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 parse_m3u8: Optional[pulumi.Input[bool]] = None,
                 redo: Optional[pulumi.Input[int]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to invoke a Url Push request.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.UrlPush("foo", urls=["https://www.example.com/b"])
        ```
        <!--End PulumiCodeChooser -->

        ### argument to request new push task with same urls

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.UrlPush("foo",
            redo=1,
            urls=["https://www.example.com/a"])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Specify push area. NOTE: only push same area cache contents.
        :param pulumi.Input[str] layer: Layer to push.
        :param pulumi.Input[bool] parse_m3u8: Whether to recursive parse m3u8 files.
        :param pulumi.Input[int] redo: Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
        :param pulumi.Input[str] user_agent: Specify `User-Agent` HTTP header, default: `TencentCdn`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UrlPushArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to invoke a Url Push request.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.UrlPush("foo", urls=["https://www.example.com/b"])
        ```
        <!--End PulumiCodeChooser -->

        ### argument to request new push task with same urls

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cdn.UrlPush("foo",
            redo=1,
            urls=["https://www.example.com/a"])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param UrlPushArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UrlPushArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 layer: Optional[pulumi.Input[str]] = None,
                 parse_m3u8: Optional[pulumi.Input[bool]] = None,
                 redo: Optional[pulumi.Input[int]] = None,
                 urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_agent: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UrlPushArgs.__new__(UrlPushArgs)

            __props__.__dict__["area"] = area
            __props__.__dict__["layer"] = layer
            __props__.__dict__["parse_m3u8"] = parse_m3u8
            __props__.__dict__["redo"] = redo
            if urls is None and not opts.urn:
                raise TypeError("Missing required property 'urls'")
            __props__.__dict__["urls"] = urls
            __props__.__dict__["user_agent"] = user_agent
            __props__.__dict__["push_histories"] = None
            __props__.__dict__["task_id"] = None
        super(UrlPush, __self__).__init__(
            'tencentcloud:Cdn/urlPush:UrlPush',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            layer: Optional[pulumi.Input[str]] = None,
            parse_m3u8: Optional[pulumi.Input[bool]] = None,
            push_histories: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UrlPushPushHistoryArgs']]]]] = None,
            redo: Optional[pulumi.Input[int]] = None,
            task_id: Optional[pulumi.Input[str]] = None,
            urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            user_agent: Optional[pulumi.Input[str]] = None) -> 'UrlPush':
        """
        Get an existing UrlPush resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: Specify push area. NOTE: only push same area cache contents.
        :param pulumi.Input[str] layer: Layer to push.
        :param pulumi.Input[bool] parse_m3u8: Whether to recursive parse m3u8 files.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UrlPushPushHistoryArgs']]]] push_histories: logs of latest push task.
        :param pulumi.Input[int] redo: Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
        :param pulumi.Input[str] task_id: Push task id.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
        :param pulumi.Input[str] user_agent: Specify `User-Agent` HTTP header, default: `TencentCdn`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UrlPushState.__new__(_UrlPushState)

        __props__.__dict__["area"] = area
        __props__.__dict__["layer"] = layer
        __props__.__dict__["parse_m3u8"] = parse_m3u8
        __props__.__dict__["push_histories"] = push_histories
        __props__.__dict__["redo"] = redo
        __props__.__dict__["task_id"] = task_id
        __props__.__dict__["urls"] = urls
        __props__.__dict__["user_agent"] = user_agent
        return UrlPush(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[Optional[str]]:
        """
        Specify push area. NOTE: only push same area cache contents.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def layer(self) -> pulumi.Output[Optional[str]]:
        """
        Layer to push.
        """
        return pulumi.get(self, "layer")

    @property
    @pulumi.getter(name="parseM3u8")
    def parse_m3u8(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to recursive parse m3u8 files.
        """
        return pulumi.get(self, "parse_m3u8")

    @property
    @pulumi.getter(name="pushHistories")
    def push_histories(self) -> pulumi.Output[Sequence['outputs.UrlPushPushHistory']]:
        """
        logs of latest push task.
        """
        return pulumi.get(self, "push_histories")

    @property
    @pulumi.getter
    def redo(self) -> pulumi.Output[Optional[int]]:
        """
        Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
        """
        return pulumi.get(self, "redo")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[str]:
        """
        Push task id.
        """
        return pulumi.get(self, "task_id")

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Output[Sequence[str]]:
        """
        List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
        """
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> pulumi.Output[Optional[str]]:
        """
        Specify `User-Agent` HTTP header, default: `TencentCdn`.
        """
        return pulumi.get(self, "user_agent")

