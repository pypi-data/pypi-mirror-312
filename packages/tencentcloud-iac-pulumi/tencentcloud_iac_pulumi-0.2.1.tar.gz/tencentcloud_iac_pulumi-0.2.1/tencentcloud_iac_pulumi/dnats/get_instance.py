# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, description=None, dnat_lists=None, elastic_ip=None, elastic_port=None, id=None, nat_id=None, private_ip=None, private_port=None, result_output_file=None, vpc_id=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dnat_lists and not isinstance(dnat_lists, list):
            raise TypeError("Expected argument 'dnat_lists' to be a list")
        pulumi.set(__self__, "dnat_lists", dnat_lists)
        if elastic_ip and not isinstance(elastic_ip, str):
            raise TypeError("Expected argument 'elastic_ip' to be a str")
        pulumi.set(__self__, "elastic_ip", elastic_ip)
        if elastic_port and not isinstance(elastic_port, str):
            raise TypeError("Expected argument 'elastic_port' to be a str")
        pulumi.set(__self__, "elastic_port", elastic_port)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nat_id and not isinstance(nat_id, str):
            raise TypeError("Expected argument 'nat_id' to be a str")
        pulumi.set(__self__, "nat_id", nat_id)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if private_port and not isinstance(private_port, str):
            raise TypeError("Expected argument 'private_port' to be a str")
        pulumi.set(__self__, "private_port", private_port)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnatLists")
    def dnat_lists(self) -> Sequence['outputs.GetInstanceDnatListResult']:
        """
        Information list of the DNATs.
        """
        return pulumi.get(self, "dnat_lists")

    @property
    @pulumi.getter(name="elasticIp")
    def elastic_ip(self) -> Optional[str]:
        """
        Network address of the EIP.
        """
        return pulumi.get(self, "elastic_ip")

    @property
    @pulumi.getter(name="elasticPort")
    def elastic_port(self) -> Optional[str]:
        """
        Port of the EIP.
        """
        return pulumi.get(self, "elastic_port")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="natId")
    def nat_id(self) -> Optional[str]:
        """
        ID of the NAT.
        """
        return pulumi.get(self, "nat_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        """
        Network address of the backend service.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privatePort")
    def private_port(self) -> Optional[str]:
        """
        Port of intranet.
        """
        return pulumi.get(self, "private_port")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            description=self.description,
            dnat_lists=self.dnat_lists,
            elastic_ip=self.elastic_ip,
            elastic_port=self.elastic_port,
            id=self.id,
            nat_id=self.nat_id,
            private_ip=self.private_ip,
            private_port=self.private_port,
            result_output_file=self.result_output_file,
            vpc_id=self.vpc_id)


def get_instance(description: Optional[str] = None,
                 elastic_ip: Optional[str] = None,
                 elastic_port: Optional[str] = None,
                 nat_id: Optional[str] = None,
                 private_ip: Optional[str] = None,
                 private_port: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 vpc_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Use this data source to query detailed information of DNATs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Dnats.get_instance(elastic_ip="123.207.115.136")
    ```
    <!--End PulumiCodeChooser -->


    :param str description: Description of the NAT forward.
    :param str elastic_ip: Network address of the EIP.
    :param str elastic_port: Port of the EIP.
    :param str nat_id: ID of the NAT gateway.
    :param str private_ip: Network address of the backend service.
    :param str private_port: Port of intranet.
    :param str result_output_file: Used to save results.
    :param str vpc_id: ID of the VPC.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['elasticIp'] = elastic_ip
    __args__['elasticPort'] = elastic_port
    __args__['natId'] = nat_id
    __args__['privateIp'] = private_ip
    __args__['privatePort'] = private_port
    __args__['resultOutputFile'] = result_output_file
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dnats/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        description=pulumi.get(__ret__, 'description'),
        dnat_lists=pulumi.get(__ret__, 'dnat_lists'),
        elastic_ip=pulumi.get(__ret__, 'elastic_ip'),
        elastic_port=pulumi.get(__ret__, 'elastic_port'),
        id=pulumi.get(__ret__, 'id'),
        nat_id=pulumi.get(__ret__, 'nat_id'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        private_port=pulumi.get(__ret__, 'private_port'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                        elastic_ip: Optional[pulumi.Input[Optional[str]]] = None,
                        elastic_port: Optional[pulumi.Input[Optional[str]]] = None,
                        nat_id: Optional[pulumi.Input[Optional[str]]] = None,
                        private_ip: Optional[pulumi.Input[Optional[str]]] = None,
                        private_port: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Use this data source to query detailed information of DNATs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Dnats.get_instance(elastic_ip="123.207.115.136")
    ```
    <!--End PulumiCodeChooser -->


    :param str description: Description of the NAT forward.
    :param str elastic_ip: Network address of the EIP.
    :param str elastic_port: Port of the EIP.
    :param str nat_id: ID of the NAT gateway.
    :param str private_ip: Network address of the backend service.
    :param str private_port: Port of intranet.
    :param str result_output_file: Used to save results.
    :param str vpc_id: ID of the VPC.
    """
    ...
