# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TimeshiftTemplateArgs', 'TimeshiftTemplate']

@pulumi.input_type
class TimeshiftTemplateArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[int],
                 template_name: pulumi.Input[str],
                 area: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 item_duration: Optional[pulumi.Input[int]] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None,
                 transcode_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a TimeshiftTemplate resource.
        :param pulumi.Input[int] duration: The time shifting duration.Unit: Second.
        :param pulumi.Input[str] template_name: The template name.Maximum length: 255 bytes.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[str] area: The region.`Mainland`: The Chinese mainland.`Overseas`: Outside the Chinese mainland.Default value: `Mainland`.
        :param pulumi.Input[str] description: The template description.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[int] item_duration: The segment size.Value range: 3-10.Unit: Second.Default value: 5.
        :param pulumi.Input[bool] remove_watermark: Whether to remove watermarks.If you pass in `true`, the original stream will be recorded.Default value: `false`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] transcode_template_ids: The transcoding template IDs.This API works only if `RemoveWatermark` is `false`.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "template_name", template_name)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if item_duration is not None:
            pulumi.set(__self__, "item_duration", item_duration)
        if remove_watermark is not None:
            pulumi.set(__self__, "remove_watermark", remove_watermark)
        if transcode_template_ids is not None:
            pulumi.set(__self__, "transcode_template_ids", transcode_template_ids)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[int]:
        """
        The time shifting duration.Unit: Second.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        The template name.Maximum length: 255 bytes.Only letters, numbers, underscores, and hyphens are supported.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        The region.`Mainland`: The Chinese mainland.`Overseas`: Outside the Chinese mainland.Default value: `Mainland`.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The template description.Only letters, numbers, underscores, and hyphens are supported.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="itemDuration")
    def item_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The segment size.Value range: 3-10.Unit: Second.Default value: 5.
        """
        return pulumi.get(self, "item_duration")

    @item_duration.setter
    def item_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "item_duration", value)

    @property
    @pulumi.getter(name="removeWatermark")
    def remove_watermark(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to remove watermarks.If you pass in `true`, the original stream will be recorded.Default value: `false`.
        """
        return pulumi.get(self, "remove_watermark")

    @remove_watermark.setter
    def remove_watermark(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_watermark", value)

    @property
    @pulumi.getter(name="transcodeTemplateIds")
    def transcode_template_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The transcoding template IDs.This API works only if `RemoveWatermark` is `false`.
        """
        return pulumi.get(self, "transcode_template_ids")

    @transcode_template_ids.setter
    def transcode_template_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "transcode_template_ids", value)


@pulumi.input_type
class _TimeshiftTemplateState:
    def __init__(__self__, *,
                 area: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 item_duration: Optional[pulumi.Input[int]] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 transcode_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering TimeshiftTemplate resources.
        :param pulumi.Input[str] area: The region.`Mainland`: The Chinese mainland.`Overseas`: Outside the Chinese mainland.Default value: `Mainland`.
        :param pulumi.Input[str] description: The template description.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[int] duration: The time shifting duration.Unit: Second.
        :param pulumi.Input[int] item_duration: The segment size.Value range: 3-10.Unit: Second.Default value: 5.
        :param pulumi.Input[bool] remove_watermark: Whether to remove watermarks.If you pass in `true`, the original stream will be recorded.Default value: `false`.
        :param pulumi.Input[str] template_name: The template name.Maximum length: 255 bytes.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] transcode_template_ids: The transcoding template IDs.This API works only if `RemoveWatermark` is `false`.
        """
        if area is not None:
            pulumi.set(__self__, "area", area)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if item_duration is not None:
            pulumi.set(__self__, "item_duration", item_duration)
        if remove_watermark is not None:
            pulumi.set(__self__, "remove_watermark", remove_watermark)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if transcode_template_ids is not None:
            pulumi.set(__self__, "transcode_template_ids", transcode_template_ids)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        """
        The region.`Mainland`: The Chinese mainland.`Overseas`: Outside the Chinese mainland.Default value: `Mainland`.
        """
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The template description.Only letters, numbers, underscores, and hyphens are supported.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[int]]:
        """
        The time shifting duration.Unit: Second.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="itemDuration")
    def item_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The segment size.Value range: 3-10.Unit: Second.Default value: 5.
        """
        return pulumi.get(self, "item_duration")

    @item_duration.setter
    def item_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "item_duration", value)

    @property
    @pulumi.getter(name="removeWatermark")
    def remove_watermark(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to remove watermarks.If you pass in `true`, the original stream will be recorded.Default value: `false`.
        """
        return pulumi.get(self, "remove_watermark")

    @remove_watermark.setter
    def remove_watermark(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_watermark", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        The template name.Maximum length: 255 bytes.Only letters, numbers, underscores, and hyphens are supported.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="transcodeTemplateIds")
    def transcode_template_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The transcoding template IDs.This API works only if `RemoveWatermark` is `false`.
        """
        return pulumi.get(self, "transcode_template_ids")

    @transcode_template_ids.setter
    def transcode_template_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "transcode_template_ids", value)


class TimeshiftTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 item_duration: Optional[pulumi.Input[int]] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 transcode_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a css timeshift_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        timeshift_template = tencentcloud.css.TimeshiftTemplate("timeshiftTemplate",
            area="Mainland",
            description="timeshift template",
            duration=604800,
            item_duration=5,
            remove_watermark=True,
            template_name="tf-test",
            transcode_template_ids=[])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css timeshift_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/timeshiftTemplate:TimeshiftTemplate timeshift_template templateId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: The region.`Mainland`: The Chinese mainland.`Overseas`: Outside the Chinese mainland.Default value: `Mainland`.
        :param pulumi.Input[str] description: The template description.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[int] duration: The time shifting duration.Unit: Second.
        :param pulumi.Input[int] item_duration: The segment size.Value range: 3-10.Unit: Second.Default value: 5.
        :param pulumi.Input[bool] remove_watermark: Whether to remove watermarks.If you pass in `true`, the original stream will be recorded.Default value: `false`.
        :param pulumi.Input[str] template_name: The template name.Maximum length: 255 bytes.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] transcode_template_ids: The transcoding template IDs.This API works only if `RemoveWatermark` is `false`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TimeshiftTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css timeshift_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        timeshift_template = tencentcloud.css.TimeshiftTemplate("timeshiftTemplate",
            area="Mainland",
            description="timeshift template",
            duration=604800,
            item_duration=5,
            remove_watermark=True,
            template_name="tf-test",
            transcode_template_ids=[])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css timeshift_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/timeshiftTemplate:TimeshiftTemplate timeshift_template templateId
        ```

        :param str resource_name: The name of the resource.
        :param TimeshiftTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TimeshiftTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 area: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 duration: Optional[pulumi.Input[int]] = None,
                 item_duration: Optional[pulumi.Input[int]] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 transcode_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TimeshiftTemplateArgs.__new__(TimeshiftTemplateArgs)

            __props__.__dict__["area"] = area
            __props__.__dict__["description"] = description
            if duration is None and not opts.urn:
                raise TypeError("Missing required property 'duration'")
            __props__.__dict__["duration"] = duration
            __props__.__dict__["item_duration"] = item_duration
            __props__.__dict__["remove_watermark"] = remove_watermark
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            __props__.__dict__["transcode_template_ids"] = transcode_template_ids
        super(TimeshiftTemplate, __self__).__init__(
            'tencentcloud:Css/timeshiftTemplate:TimeshiftTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            area: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            duration: Optional[pulumi.Input[int]] = None,
            item_duration: Optional[pulumi.Input[int]] = None,
            remove_watermark: Optional[pulumi.Input[bool]] = None,
            template_name: Optional[pulumi.Input[str]] = None,
            transcode_template_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'TimeshiftTemplate':
        """
        Get an existing TimeshiftTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] area: The region.`Mainland`: The Chinese mainland.`Overseas`: Outside the Chinese mainland.Default value: `Mainland`.
        :param pulumi.Input[str] description: The template description.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[int] duration: The time shifting duration.Unit: Second.
        :param pulumi.Input[int] item_duration: The segment size.Value range: 3-10.Unit: Second.Default value: 5.
        :param pulumi.Input[bool] remove_watermark: Whether to remove watermarks.If you pass in `true`, the original stream will be recorded.Default value: `false`.
        :param pulumi.Input[str] template_name: The template name.Maximum length: 255 bytes.Only letters, numbers, underscores, and hyphens are supported.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] transcode_template_ids: The transcoding template IDs.This API works only if `RemoveWatermark` is `false`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TimeshiftTemplateState.__new__(_TimeshiftTemplateState)

        __props__.__dict__["area"] = area
        __props__.__dict__["description"] = description
        __props__.__dict__["duration"] = duration
        __props__.__dict__["item_duration"] = item_duration
        __props__.__dict__["remove_watermark"] = remove_watermark
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["transcode_template_ids"] = transcode_template_ids
        return TimeshiftTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def area(self) -> pulumi.Output[Optional[str]]:
        """
        The region.`Mainland`: The Chinese mainland.`Overseas`: Outside the Chinese mainland.Default value: `Mainland`.
        """
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The template description.Only letters, numbers, underscores, and hyphens are supported.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[int]:
        """
        The time shifting duration.Unit: Second.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="itemDuration")
    def item_duration(self) -> pulumi.Output[Optional[int]]:
        """
        The segment size.Value range: 3-10.Unit: Second.Default value: 5.
        """
        return pulumi.get(self, "item_duration")

    @property
    @pulumi.getter(name="removeWatermark")
    def remove_watermark(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to remove watermarks.If you pass in `true`, the original stream will be recorded.Default value: `false`.
        """
        return pulumi.get(self, "remove_watermark")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        The template name.Maximum length: 255 bytes.Only letters, numbers, underscores, and hyphens are supported.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter(name="transcodeTemplateIds")
    def transcode_template_ids(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        The transcoding template IDs.This API works only if `RemoveWatermark` is `false`.
        """
        return pulumi.get(self, "transcode_template_ids")

