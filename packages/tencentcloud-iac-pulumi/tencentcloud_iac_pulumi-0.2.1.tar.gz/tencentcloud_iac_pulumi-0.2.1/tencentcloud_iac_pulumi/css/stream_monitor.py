# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamMonitorArgs', 'StreamMonitor']

@pulumi.input_type
class StreamMonitorArgs:
    def __init__(__self__, *,
                 input_lists: pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]],
                 output_info: pulumi.Input['StreamMonitorOutputInfoArgs'],
                 ai_asr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ai_format_diagnose: Optional[pulumi.Input[int]] = None,
                 ai_ocr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 allow_monitor_report: Optional[pulumi.Input[int]] = None,
                 asr_language: Optional[pulumi.Input[int]] = None,
                 check_stream_broken: Optional[pulumi.Input[int]] = None,
                 check_stream_low_frame_rate: Optional[pulumi.Input[int]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 notify_policy: Optional[pulumi.Input['StreamMonitorNotifyPolicyArgs']] = None,
                 ocr_language: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a StreamMonitor resource.
        :param pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]] input_lists: Wait monitor input info list.
        :param pulumi.Input['StreamMonitorOutputInfoArgs'] output_info: Monitor task output info.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_asr_input_index_lists: AI asr input index list.(first input index is 1.).
        :param pulumi.Input[int] ai_format_diagnose: If enable format diagnose.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_ocr_input_index_lists: Ai ocr input index list(first input index is 1.).
        :param pulumi.Input[int] allow_monitor_report: If store monitor event.
        :param pulumi.Input[int] asr_language: Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
        :param pulumi.Input[int] check_stream_broken: If enable stream broken check.
        :param pulumi.Input[int] check_stream_low_frame_rate: If enable low frame rate check.
        :param pulumi.Input[str] monitor_name: Monitor task name.
        :param pulumi.Input['StreamMonitorNotifyPolicyArgs'] notify_policy: Monitor event notify policy.
        :param pulumi.Input[int] ocr_language: Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
        """
        pulumi.set(__self__, "input_lists", input_lists)
        pulumi.set(__self__, "output_info", output_info)
        if ai_asr_input_index_lists is not None:
            pulumi.set(__self__, "ai_asr_input_index_lists", ai_asr_input_index_lists)
        if ai_format_diagnose is not None:
            pulumi.set(__self__, "ai_format_diagnose", ai_format_diagnose)
        if ai_ocr_input_index_lists is not None:
            pulumi.set(__self__, "ai_ocr_input_index_lists", ai_ocr_input_index_lists)
        if allow_monitor_report is not None:
            pulumi.set(__self__, "allow_monitor_report", allow_monitor_report)
        if asr_language is not None:
            pulumi.set(__self__, "asr_language", asr_language)
        if check_stream_broken is not None:
            pulumi.set(__self__, "check_stream_broken", check_stream_broken)
        if check_stream_low_frame_rate is not None:
            pulumi.set(__self__, "check_stream_low_frame_rate", check_stream_low_frame_rate)
        if monitor_name is not None:
            pulumi.set(__self__, "monitor_name", monitor_name)
        if notify_policy is not None:
            pulumi.set(__self__, "notify_policy", notify_policy)
        if ocr_language is not None:
            pulumi.set(__self__, "ocr_language", ocr_language)

    @property
    @pulumi.getter(name="inputLists")
    def input_lists(self) -> pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]]:
        """
        Wait monitor input info list.
        """
        return pulumi.get(self, "input_lists")

    @input_lists.setter
    def input_lists(self, value: pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]]):
        pulumi.set(self, "input_lists", value)

    @property
    @pulumi.getter(name="outputInfo")
    def output_info(self) -> pulumi.Input['StreamMonitorOutputInfoArgs']:
        """
        Monitor task output info.
        """
        return pulumi.get(self, "output_info")

    @output_info.setter
    def output_info(self, value: pulumi.Input['StreamMonitorOutputInfoArgs']):
        pulumi.set(self, "output_info", value)

    @property
    @pulumi.getter(name="aiAsrInputIndexLists")
    def ai_asr_input_index_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        AI asr input index list.(first input index is 1.).
        """
        return pulumi.get(self, "ai_asr_input_index_lists")

    @ai_asr_input_index_lists.setter
    def ai_asr_input_index_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ai_asr_input_index_lists", value)

    @property
    @pulumi.getter(name="aiFormatDiagnose")
    def ai_format_diagnose(self) -> Optional[pulumi.Input[int]]:
        """
        If enable format diagnose.
        """
        return pulumi.get(self, "ai_format_diagnose")

    @ai_format_diagnose.setter
    def ai_format_diagnose(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ai_format_diagnose", value)

    @property
    @pulumi.getter(name="aiOcrInputIndexLists")
    def ai_ocr_input_index_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Ai ocr input index list(first input index is 1.).
        """
        return pulumi.get(self, "ai_ocr_input_index_lists")

    @ai_ocr_input_index_lists.setter
    def ai_ocr_input_index_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ai_ocr_input_index_lists", value)

    @property
    @pulumi.getter(name="allowMonitorReport")
    def allow_monitor_report(self) -> Optional[pulumi.Input[int]]:
        """
        If store monitor event.
        """
        return pulumi.get(self, "allow_monitor_report")

    @allow_monitor_report.setter
    def allow_monitor_report(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allow_monitor_report", value)

    @property
    @pulumi.getter(name="asrLanguage")
    def asr_language(self) -> Optional[pulumi.Input[int]]:
        """
        Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
        """
        return pulumi.get(self, "asr_language")

    @asr_language.setter
    def asr_language(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "asr_language", value)

    @property
    @pulumi.getter(name="checkStreamBroken")
    def check_stream_broken(self) -> Optional[pulumi.Input[int]]:
        """
        If enable stream broken check.
        """
        return pulumi.get(self, "check_stream_broken")

    @check_stream_broken.setter
    def check_stream_broken(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "check_stream_broken", value)

    @property
    @pulumi.getter(name="checkStreamLowFrameRate")
    def check_stream_low_frame_rate(self) -> Optional[pulumi.Input[int]]:
        """
        If enable low frame rate check.
        """
        return pulumi.get(self, "check_stream_low_frame_rate")

    @check_stream_low_frame_rate.setter
    def check_stream_low_frame_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "check_stream_low_frame_rate", value)

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor task name.
        """
        return pulumi.get(self, "monitor_name")

    @monitor_name.setter
    def monitor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_name", value)

    @property
    @pulumi.getter(name="notifyPolicy")
    def notify_policy(self) -> Optional[pulumi.Input['StreamMonitorNotifyPolicyArgs']]:
        """
        Monitor event notify policy.
        """
        return pulumi.get(self, "notify_policy")

    @notify_policy.setter
    def notify_policy(self, value: Optional[pulumi.Input['StreamMonitorNotifyPolicyArgs']]):
        pulumi.set(self, "notify_policy", value)

    @property
    @pulumi.getter(name="ocrLanguage")
    def ocr_language(self) -> Optional[pulumi.Input[int]]:
        """
        Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
        """
        return pulumi.get(self, "ocr_language")

    @ocr_language.setter
    def ocr_language(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ocr_language", value)


@pulumi.input_type
class _StreamMonitorState:
    def __init__(__self__, *,
                 ai_asr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ai_format_diagnose: Optional[pulumi.Input[int]] = None,
                 ai_ocr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 allow_monitor_report: Optional[pulumi.Input[int]] = None,
                 asr_language: Optional[pulumi.Input[int]] = None,
                 check_stream_broken: Optional[pulumi.Input[int]] = None,
                 check_stream_low_frame_rate: Optional[pulumi.Input[int]] = None,
                 input_lists: Optional[pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 notify_policy: Optional[pulumi.Input['StreamMonitorNotifyPolicyArgs']] = None,
                 ocr_language: Optional[pulumi.Input[int]] = None,
                 output_info: Optional[pulumi.Input['StreamMonitorOutputInfoArgs']] = None):
        """
        Input properties used for looking up and filtering StreamMonitor resources.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_asr_input_index_lists: AI asr input index list.(first input index is 1.).
        :param pulumi.Input[int] ai_format_diagnose: If enable format diagnose.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_ocr_input_index_lists: Ai ocr input index list(first input index is 1.).
        :param pulumi.Input[int] allow_monitor_report: If store monitor event.
        :param pulumi.Input[int] asr_language: Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
        :param pulumi.Input[int] check_stream_broken: If enable stream broken check.
        :param pulumi.Input[int] check_stream_low_frame_rate: If enable low frame rate check.
        :param pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]] input_lists: Wait monitor input info list.
        :param pulumi.Input[str] monitor_name: Monitor task name.
        :param pulumi.Input['StreamMonitorNotifyPolicyArgs'] notify_policy: Monitor event notify policy.
        :param pulumi.Input[int] ocr_language: Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
        :param pulumi.Input['StreamMonitorOutputInfoArgs'] output_info: Monitor task output info.
        """
        if ai_asr_input_index_lists is not None:
            pulumi.set(__self__, "ai_asr_input_index_lists", ai_asr_input_index_lists)
        if ai_format_diagnose is not None:
            pulumi.set(__self__, "ai_format_diagnose", ai_format_diagnose)
        if ai_ocr_input_index_lists is not None:
            pulumi.set(__self__, "ai_ocr_input_index_lists", ai_ocr_input_index_lists)
        if allow_monitor_report is not None:
            pulumi.set(__self__, "allow_monitor_report", allow_monitor_report)
        if asr_language is not None:
            pulumi.set(__self__, "asr_language", asr_language)
        if check_stream_broken is not None:
            pulumi.set(__self__, "check_stream_broken", check_stream_broken)
        if check_stream_low_frame_rate is not None:
            pulumi.set(__self__, "check_stream_low_frame_rate", check_stream_low_frame_rate)
        if input_lists is not None:
            pulumi.set(__self__, "input_lists", input_lists)
        if monitor_name is not None:
            pulumi.set(__self__, "monitor_name", monitor_name)
        if notify_policy is not None:
            pulumi.set(__self__, "notify_policy", notify_policy)
        if ocr_language is not None:
            pulumi.set(__self__, "ocr_language", ocr_language)
        if output_info is not None:
            pulumi.set(__self__, "output_info", output_info)

    @property
    @pulumi.getter(name="aiAsrInputIndexLists")
    def ai_asr_input_index_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        AI asr input index list.(first input index is 1.).
        """
        return pulumi.get(self, "ai_asr_input_index_lists")

    @ai_asr_input_index_lists.setter
    def ai_asr_input_index_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ai_asr_input_index_lists", value)

    @property
    @pulumi.getter(name="aiFormatDiagnose")
    def ai_format_diagnose(self) -> Optional[pulumi.Input[int]]:
        """
        If enable format diagnose.
        """
        return pulumi.get(self, "ai_format_diagnose")

    @ai_format_diagnose.setter
    def ai_format_diagnose(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ai_format_diagnose", value)

    @property
    @pulumi.getter(name="aiOcrInputIndexLists")
    def ai_ocr_input_index_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Ai ocr input index list(first input index is 1.).
        """
        return pulumi.get(self, "ai_ocr_input_index_lists")

    @ai_ocr_input_index_lists.setter
    def ai_ocr_input_index_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "ai_ocr_input_index_lists", value)

    @property
    @pulumi.getter(name="allowMonitorReport")
    def allow_monitor_report(self) -> Optional[pulumi.Input[int]]:
        """
        If store monitor event.
        """
        return pulumi.get(self, "allow_monitor_report")

    @allow_monitor_report.setter
    def allow_monitor_report(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "allow_monitor_report", value)

    @property
    @pulumi.getter(name="asrLanguage")
    def asr_language(self) -> Optional[pulumi.Input[int]]:
        """
        Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
        """
        return pulumi.get(self, "asr_language")

    @asr_language.setter
    def asr_language(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "asr_language", value)

    @property
    @pulumi.getter(name="checkStreamBroken")
    def check_stream_broken(self) -> Optional[pulumi.Input[int]]:
        """
        If enable stream broken check.
        """
        return pulumi.get(self, "check_stream_broken")

    @check_stream_broken.setter
    def check_stream_broken(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "check_stream_broken", value)

    @property
    @pulumi.getter(name="checkStreamLowFrameRate")
    def check_stream_low_frame_rate(self) -> Optional[pulumi.Input[int]]:
        """
        If enable low frame rate check.
        """
        return pulumi.get(self, "check_stream_low_frame_rate")

    @check_stream_low_frame_rate.setter
    def check_stream_low_frame_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "check_stream_low_frame_rate", value)

    @property
    @pulumi.getter(name="inputLists")
    def input_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]]]:
        """
        Wait monitor input info list.
        """
        return pulumi.get(self, "input_lists")

    @input_lists.setter
    def input_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StreamMonitorInputListArgs']]]]):
        pulumi.set(self, "input_lists", value)

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor task name.
        """
        return pulumi.get(self, "monitor_name")

    @monitor_name.setter
    def monitor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_name", value)

    @property
    @pulumi.getter(name="notifyPolicy")
    def notify_policy(self) -> Optional[pulumi.Input['StreamMonitorNotifyPolicyArgs']]:
        """
        Monitor event notify policy.
        """
        return pulumi.get(self, "notify_policy")

    @notify_policy.setter
    def notify_policy(self, value: Optional[pulumi.Input['StreamMonitorNotifyPolicyArgs']]):
        pulumi.set(self, "notify_policy", value)

    @property
    @pulumi.getter(name="ocrLanguage")
    def ocr_language(self) -> Optional[pulumi.Input[int]]:
        """
        Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
        """
        return pulumi.get(self, "ocr_language")

    @ocr_language.setter
    def ocr_language(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ocr_language", value)

    @property
    @pulumi.getter(name="outputInfo")
    def output_info(self) -> Optional[pulumi.Input['StreamMonitorOutputInfoArgs']]:
        """
        Monitor task output info.
        """
        return pulumi.get(self, "output_info")

    @output_info.setter
    def output_info(self, value: Optional[pulumi.Input['StreamMonitorOutputInfoArgs']]):
        pulumi.set(self, "output_info", value)


class StreamMonitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_asr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ai_format_diagnose: Optional[pulumi.Input[int]] = None,
                 ai_ocr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 allow_monitor_report: Optional[pulumi.Input[int]] = None,
                 asr_language: Optional[pulumi.Input[int]] = None,
                 check_stream_broken: Optional[pulumi.Input[int]] = None,
                 check_stream_low_frame_rate: Optional[pulumi.Input[int]] = None,
                 input_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamMonitorInputListArgs']]]]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 notify_policy: Optional[pulumi.Input[pulumi.InputType['StreamMonitorNotifyPolicyArgs']]] = None,
                 ocr_language: Optional[pulumi.Input[int]] = None,
                 output_info: Optional[pulumi.Input[pulumi.InputType['StreamMonitorOutputInfoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a css stream_monitor

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        stream_monitor = tencentcloud.css.StreamMonitor("streamMonitor",
            ai_asr_input_index_lists=[1],
            ai_format_diagnose=1,
            ai_ocr_input_index_lists=[1],
            allow_monitor_report=1,
            asr_language=1,
            check_stream_broken=1,
            check_stream_low_frame_rate=1,
            input_lists=[tencentcloud.css.StreamMonitorInputListArgs(
                input_app="live",
                input_domain="177154.push.tlivecloud.com",
                input_stream_name="ppp",
            )],
            monitor_name="test",
            notify_policy=tencentcloud.css.StreamMonitorNotifyPolicyArgs(
                callback_url="http://example.com/test",
                notify_policy_type=1,
            ),
            ocr_language=1,
            output_info=tencentcloud.css.StreamMonitorOutputInfoArgs(
                output_domain="test122.jingxhu.top",
                output_stream_height=1080,
                output_stream_name="afc7847d-1fe1-43bc-b1e4-20d86303c393",
                output_stream_width=1920,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css stream_monitor can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/streamMonitor:StreamMonitor stream_monitor stream_monitor_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_asr_input_index_lists: AI asr input index list.(first input index is 1.).
        :param pulumi.Input[int] ai_format_diagnose: If enable format diagnose.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_ocr_input_index_lists: Ai ocr input index list(first input index is 1.).
        :param pulumi.Input[int] allow_monitor_report: If store monitor event.
        :param pulumi.Input[int] asr_language: Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
        :param pulumi.Input[int] check_stream_broken: If enable stream broken check.
        :param pulumi.Input[int] check_stream_low_frame_rate: If enable low frame rate check.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamMonitorInputListArgs']]]] input_lists: Wait monitor input info list.
        :param pulumi.Input[str] monitor_name: Monitor task name.
        :param pulumi.Input[pulumi.InputType['StreamMonitorNotifyPolicyArgs']] notify_policy: Monitor event notify policy.
        :param pulumi.Input[int] ocr_language: Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
        :param pulumi.Input[pulumi.InputType['StreamMonitorOutputInfoArgs']] output_info: Monitor task output info.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamMonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css stream_monitor

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        stream_monitor = tencentcloud.css.StreamMonitor("streamMonitor",
            ai_asr_input_index_lists=[1],
            ai_format_diagnose=1,
            ai_ocr_input_index_lists=[1],
            allow_monitor_report=1,
            asr_language=1,
            check_stream_broken=1,
            check_stream_low_frame_rate=1,
            input_lists=[tencentcloud.css.StreamMonitorInputListArgs(
                input_app="live",
                input_domain="177154.push.tlivecloud.com",
                input_stream_name="ppp",
            )],
            monitor_name="test",
            notify_policy=tencentcloud.css.StreamMonitorNotifyPolicyArgs(
                callback_url="http://example.com/test",
                notify_policy_type=1,
            ),
            ocr_language=1,
            output_info=tencentcloud.css.StreamMonitorOutputInfoArgs(
                output_domain="test122.jingxhu.top",
                output_stream_height=1080,
                output_stream_name="afc7847d-1fe1-43bc-b1e4-20d86303c393",
                output_stream_width=1920,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css stream_monitor can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/streamMonitor:StreamMonitor stream_monitor stream_monitor_id
        ```

        :param str resource_name: The name of the resource.
        :param StreamMonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamMonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ai_asr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ai_format_diagnose: Optional[pulumi.Input[int]] = None,
                 ai_ocr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 allow_monitor_report: Optional[pulumi.Input[int]] = None,
                 asr_language: Optional[pulumi.Input[int]] = None,
                 check_stream_broken: Optional[pulumi.Input[int]] = None,
                 check_stream_low_frame_rate: Optional[pulumi.Input[int]] = None,
                 input_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamMonitorInputListArgs']]]]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 notify_policy: Optional[pulumi.Input[pulumi.InputType['StreamMonitorNotifyPolicyArgs']]] = None,
                 ocr_language: Optional[pulumi.Input[int]] = None,
                 output_info: Optional[pulumi.Input[pulumi.InputType['StreamMonitorOutputInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamMonitorArgs.__new__(StreamMonitorArgs)

            __props__.__dict__["ai_asr_input_index_lists"] = ai_asr_input_index_lists
            __props__.__dict__["ai_format_diagnose"] = ai_format_diagnose
            __props__.__dict__["ai_ocr_input_index_lists"] = ai_ocr_input_index_lists
            __props__.__dict__["allow_monitor_report"] = allow_monitor_report
            __props__.__dict__["asr_language"] = asr_language
            __props__.__dict__["check_stream_broken"] = check_stream_broken
            __props__.__dict__["check_stream_low_frame_rate"] = check_stream_low_frame_rate
            if input_lists is None and not opts.urn:
                raise TypeError("Missing required property 'input_lists'")
            __props__.__dict__["input_lists"] = input_lists
            __props__.__dict__["monitor_name"] = monitor_name
            __props__.__dict__["notify_policy"] = notify_policy
            __props__.__dict__["ocr_language"] = ocr_language
            if output_info is None and not opts.urn:
                raise TypeError("Missing required property 'output_info'")
            __props__.__dict__["output_info"] = output_info
        super(StreamMonitor, __self__).__init__(
            'tencentcloud:Css/streamMonitor:StreamMonitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ai_asr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            ai_format_diagnose: Optional[pulumi.Input[int]] = None,
            ai_ocr_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            allow_monitor_report: Optional[pulumi.Input[int]] = None,
            asr_language: Optional[pulumi.Input[int]] = None,
            check_stream_broken: Optional[pulumi.Input[int]] = None,
            check_stream_low_frame_rate: Optional[pulumi.Input[int]] = None,
            input_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamMonitorInputListArgs']]]]] = None,
            monitor_name: Optional[pulumi.Input[str]] = None,
            notify_policy: Optional[pulumi.Input[pulumi.InputType['StreamMonitorNotifyPolicyArgs']]] = None,
            ocr_language: Optional[pulumi.Input[int]] = None,
            output_info: Optional[pulumi.Input[pulumi.InputType['StreamMonitorOutputInfoArgs']]] = None) -> 'StreamMonitor':
        """
        Get an existing StreamMonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_asr_input_index_lists: AI asr input index list.(first input index is 1.).
        :param pulumi.Input[int] ai_format_diagnose: If enable format diagnose.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ai_ocr_input_index_lists: Ai ocr input index list(first input index is 1.).
        :param pulumi.Input[int] allow_monitor_report: If store monitor event.
        :param pulumi.Input[int] asr_language: Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
        :param pulumi.Input[int] check_stream_broken: If enable stream broken check.
        :param pulumi.Input[int] check_stream_low_frame_rate: If enable low frame rate check.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StreamMonitorInputListArgs']]]] input_lists: Wait monitor input info list.
        :param pulumi.Input[str] monitor_name: Monitor task name.
        :param pulumi.Input[pulumi.InputType['StreamMonitorNotifyPolicyArgs']] notify_policy: Monitor event notify policy.
        :param pulumi.Input[int] ocr_language: Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
        :param pulumi.Input[pulumi.InputType['StreamMonitorOutputInfoArgs']] output_info: Monitor task output info.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamMonitorState.__new__(_StreamMonitorState)

        __props__.__dict__["ai_asr_input_index_lists"] = ai_asr_input_index_lists
        __props__.__dict__["ai_format_diagnose"] = ai_format_diagnose
        __props__.__dict__["ai_ocr_input_index_lists"] = ai_ocr_input_index_lists
        __props__.__dict__["allow_monitor_report"] = allow_monitor_report
        __props__.__dict__["asr_language"] = asr_language
        __props__.__dict__["check_stream_broken"] = check_stream_broken
        __props__.__dict__["check_stream_low_frame_rate"] = check_stream_low_frame_rate
        __props__.__dict__["input_lists"] = input_lists
        __props__.__dict__["monitor_name"] = monitor_name
        __props__.__dict__["notify_policy"] = notify_policy
        __props__.__dict__["ocr_language"] = ocr_language
        __props__.__dict__["output_info"] = output_info
        return StreamMonitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aiAsrInputIndexLists")
    def ai_asr_input_index_lists(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        AI asr input index list.(first input index is 1.).
        """
        return pulumi.get(self, "ai_asr_input_index_lists")

    @property
    @pulumi.getter(name="aiFormatDiagnose")
    def ai_format_diagnose(self) -> pulumi.Output[Optional[int]]:
        """
        If enable format diagnose.
        """
        return pulumi.get(self, "ai_format_diagnose")

    @property
    @pulumi.getter(name="aiOcrInputIndexLists")
    def ai_ocr_input_index_lists(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Ai ocr input index list(first input index is 1.).
        """
        return pulumi.get(self, "ai_ocr_input_index_lists")

    @property
    @pulumi.getter(name="allowMonitorReport")
    def allow_monitor_report(self) -> pulumi.Output[Optional[int]]:
        """
        If store monitor event.
        """
        return pulumi.get(self, "allow_monitor_report")

    @property
    @pulumi.getter(name="asrLanguage")
    def asr_language(self) -> pulumi.Output[Optional[int]]:
        """
        Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
        """
        return pulumi.get(self, "asr_language")

    @property
    @pulumi.getter(name="checkStreamBroken")
    def check_stream_broken(self) -> pulumi.Output[Optional[int]]:
        """
        If enable stream broken check.
        """
        return pulumi.get(self, "check_stream_broken")

    @property
    @pulumi.getter(name="checkStreamLowFrameRate")
    def check_stream_low_frame_rate(self) -> pulumi.Output[Optional[int]]:
        """
        If enable low frame rate check.
        """
        return pulumi.get(self, "check_stream_low_frame_rate")

    @property
    @pulumi.getter(name="inputLists")
    def input_lists(self) -> pulumi.Output[Sequence['outputs.StreamMonitorInputList']]:
        """
        Wait monitor input info list.
        """
        return pulumi.get(self, "input_lists")

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> pulumi.Output[Optional[str]]:
        """
        Monitor task name.
        """
        return pulumi.get(self, "monitor_name")

    @property
    @pulumi.getter(name="notifyPolicy")
    def notify_policy(self) -> pulumi.Output[Optional['outputs.StreamMonitorNotifyPolicy']]:
        """
        Monitor event notify policy.
        """
        return pulumi.get(self, "notify_policy")

    @property
    @pulumi.getter(name="ocrLanguage")
    def ocr_language(self) -> pulumi.Output[Optional[int]]:
        """
        Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
        """
        return pulumi.get(self, "ocr_language")

    @property
    @pulumi.getter(name="outputInfo")
    def output_info(self) -> pulumi.Output['outputs.StreamMonitorOutputInfo']:
        """
        Monitor task output info.
        """
        return pulumi.get(self, "output_info")

