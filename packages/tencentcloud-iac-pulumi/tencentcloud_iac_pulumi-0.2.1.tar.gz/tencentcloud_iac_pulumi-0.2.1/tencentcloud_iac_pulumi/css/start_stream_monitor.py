# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['StartStreamMonitorArgs', 'StartStreamMonitor']

@pulumi.input_type
class StartStreamMonitorArgs:
    def __init__(__self__, *,
                 monitor_id: pulumi.Input[str],
                 audible_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a StartStreamMonitor resource.
        :param pulumi.Input[str] monitor_id: Monitor id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] audible_input_index_lists: The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        """
        pulumi.set(__self__, "monitor_id", monitor_id)
        if audible_input_index_lists is not None:
            pulumi.set(__self__, "audible_input_index_lists", audible_input_index_lists)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Input[str]:
        """
        Monitor id.
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter(name="audibleInputIndexLists")
    def audible_input_index_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        """
        return pulumi.get(self, "audible_input_index_lists")

    @audible_input_index_lists.setter
    def audible_input_index_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "audible_input_index_lists", value)


@pulumi.input_type
class _StartStreamMonitorState:
    def __init__(__self__, *,
                 audible_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StartStreamMonitor resources.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] audible_input_index_lists: The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        :param pulumi.Input[str] monitor_id: Monitor id.
        """
        if audible_input_index_lists is not None:
            pulumi.set(__self__, "audible_input_index_lists", audible_input_index_lists)
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)

    @property
    @pulumi.getter(name="audibleInputIndexLists")
    def audible_input_index_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        """
        return pulumi.get(self, "audible_input_index_lists")

    @audible_input_index_lists.setter
    def audible_input_index_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "audible_input_index_lists", value)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor id.
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_id", value)


class StartStreamMonitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audible_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a css start_stream_monitor

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        start_stream_monitor = tencentcloud.css.StartStreamMonitor("startStreamMonitor",
            audible_input_index_lists=[1],
            monitor_id="3d5738dd-1ca2-4601-a6e9-004c5ec75c0b")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css start_stream_monitor can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/startStreamMonitor:StartStreamMonitor start_stream_monitor start_stream_monitor_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] audible_input_index_lists: The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        :param pulumi.Input[str] monitor_id: Monitor id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StartStreamMonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css start_stream_monitor

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        start_stream_monitor = tencentcloud.css.StartStreamMonitor("startStreamMonitor",
            audible_input_index_lists=[1],
            monitor_id="3d5738dd-1ca2-4601-a6e9-004c5ec75c0b")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css start_stream_monitor can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/startStreamMonitor:StartStreamMonitor start_stream_monitor start_stream_monitor_id
        ```

        :param str resource_name: The name of the resource.
        :param StartStreamMonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StartStreamMonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audible_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 monitor_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StartStreamMonitorArgs.__new__(StartStreamMonitorArgs)

            __props__.__dict__["audible_input_index_lists"] = audible_input_index_lists
            if monitor_id is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_id'")
            __props__.__dict__["monitor_id"] = monitor_id
        super(StartStreamMonitor, __self__).__init__(
            'tencentcloud:Css/startStreamMonitor:StartStreamMonitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audible_input_index_lists: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            monitor_id: Optional[pulumi.Input[str]] = None) -> 'StartStreamMonitor':
        """
        Get an existing StartStreamMonitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] audible_input_index_lists: The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        :param pulumi.Input[str] monitor_id: Monitor id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StartStreamMonitorState.__new__(_StartStreamMonitorState)

        __props__.__dict__["audible_input_index_lists"] = audible_input_index_lists
        __props__.__dict__["monitor_id"] = monitor_id
        return StartStreamMonitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="audibleInputIndexLists")
    def audible_input_index_lists(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        The input index for monitoring the screen audio, supports multiple input audio sources.The valid range for InputIndex is that it must already exist.If left blank, there will be no audio output by default.
        """
        return pulumi.get(self, "audible_input_index_lists")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> pulumi.Output[str]:
        """
        Monitor id.
        """
        return pulumi.get(self, "monitor_id")

