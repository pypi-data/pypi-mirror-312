# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PlayDomainCertAttachmentArgs', 'PlayDomainCertAttachment']

@pulumi.input_type
class PlayDomainCertAttachmentArgs:
    def __init__(__self__, *,
                 domain_info: pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs'],
                 cloud_cert_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PlayDomainCertAttachment resource.
        :param pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs'] domain_info: The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
        :param pulumi.Input[str] cloud_cert_id: Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
        """
        pulumi.set(__self__, "domain_info", domain_info)
        if cloud_cert_id is not None:
            pulumi.set(__self__, "cloud_cert_id", cloud_cert_id)

    @property
    @pulumi.getter(name="domainInfo")
    def domain_info(self) -> pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs']:
        """
        The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
        """
        return pulumi.get(self, "domain_info")

    @domain_info.setter
    def domain_info(self, value: pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs']):
        pulumi.set(self, "domain_info", value)

    @property
    @pulumi.getter(name="cloudCertId")
    def cloud_cert_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
        """
        return pulumi.get(self, "cloud_cert_id")

    @cloud_cert_id.setter
    def cloud_cert_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_cert_id", value)


@pulumi.input_type
class _PlayDomainCertAttachmentState:
    def __init__(__self__, *,
                 cert_expire_time: Optional[pulumi.Input[str]] = None,
                 cert_id: Optional[pulumi.Input[int]] = None,
                 cert_type: Optional[pulumi.Input[int]] = None,
                 certificate_alias: Optional[pulumi.Input[str]] = None,
                 cloud_cert_id: Optional[pulumi.Input[str]] = None,
                 domain_info: Optional[pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs']] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PlayDomainCertAttachment resources.
        :param pulumi.Input[str] cert_expire_time: certificate expiration time.
        :param pulumi.Input[int] cert_id: certificate ID.
        :param pulumi.Input[int] cert_type: certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
        :param pulumi.Input[str] certificate_alias: certificate remarks. Synonymous with CertName.
        :param pulumi.Input[str] cloud_cert_id: Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
        :param pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs'] domain_info: The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
        :param pulumi.Input[str] update_time: The time when the rule was last updated.
        """
        if cert_expire_time is not None:
            pulumi.set(__self__, "cert_expire_time", cert_expire_time)
        if cert_id is not None:
            pulumi.set(__self__, "cert_id", cert_id)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if certificate_alias is not None:
            pulumi.set(__self__, "certificate_alias", certificate_alias)
        if cloud_cert_id is not None:
            pulumi.set(__self__, "cloud_cert_id", cloud_cert_id)
        if domain_info is not None:
            pulumi.set(__self__, "domain_info", domain_info)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="certExpireTime")
    def cert_expire_time(self) -> Optional[pulumi.Input[str]]:
        """
        certificate expiration time.
        """
        return pulumi.get(self, "cert_expire_time")

    @cert_expire_time.setter
    def cert_expire_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_expire_time", value)

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> Optional[pulumi.Input[int]]:
        """
        certificate ID.
        """
        return pulumi.get(self, "cert_id")

    @cert_id.setter
    def cert_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_id", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input[int]]:
        """
        certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter(name="certificateAlias")
    def certificate_alias(self) -> Optional[pulumi.Input[str]]:
        """
        certificate remarks. Synonymous with CertName.
        """
        return pulumi.get(self, "certificate_alias")

    @certificate_alias.setter
    def certificate_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_alias", value)

    @property
    @pulumi.getter(name="cloudCertId")
    def cloud_cert_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
        """
        return pulumi.get(self, "cloud_cert_id")

    @cloud_cert_id.setter
    def cloud_cert_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_cert_id", value)

    @property
    @pulumi.getter(name="domainInfo")
    def domain_info(self) -> Optional[pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs']]:
        """
        The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
        """
        return pulumi.get(self, "domain_info")

    @domain_info.setter
    def domain_info(self, value: Optional[pulumi.Input['PlayDomainCertAttachmentDomainInfoArgs']]):
        pulumi.set(self, "domain_info", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the rule was last updated.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class PlayDomainCertAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_cert_id: Optional[pulumi.Input[str]] = None,
                 domain_info: Optional[pulumi.Input[pulumi.InputType['PlayDomainCertAttachmentDomainInfoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a css play_domain_cert_attachment. This resource is used for binding the play domain and specified certification together.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.Ssl.get_certificates(name="your_ssl_cert")
        play_domain_cert_attachment = tencentcloud.css.PlayDomainCertAttachment("playDomainCertAttachment",
            cloud_cert_id=foo.certificates[0].id,
            domain_info=tencentcloud.css.PlayDomainCertAttachmentDomainInfoArgs(
                domain_name="your_domain_name",
                status=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css play_domain_cert_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/playDomainCertAttachment:PlayDomainCertAttachment play_domain_cert_attachment domainName#cloudCertId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_cert_id: Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
        :param pulumi.Input[pulumi.InputType['PlayDomainCertAttachmentDomainInfoArgs']] domain_info: The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlayDomainCertAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css play_domain_cert_attachment. This resource is used for binding the play domain and specified certification together.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.Ssl.get_certificates(name="your_ssl_cert")
        play_domain_cert_attachment = tencentcloud.css.PlayDomainCertAttachment("playDomainCertAttachment",
            cloud_cert_id=foo.certificates[0].id,
            domain_info=tencentcloud.css.PlayDomainCertAttachmentDomainInfoArgs(
                domain_name="your_domain_name",
                status=1,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css play_domain_cert_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/playDomainCertAttachment:PlayDomainCertAttachment play_domain_cert_attachment domainName#cloudCertId
        ```

        :param str resource_name: The name of the resource.
        :param PlayDomainCertAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlayDomainCertAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_cert_id: Optional[pulumi.Input[str]] = None,
                 domain_info: Optional[pulumi.Input[pulumi.InputType['PlayDomainCertAttachmentDomainInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlayDomainCertAttachmentArgs.__new__(PlayDomainCertAttachmentArgs)

            __props__.__dict__["cloud_cert_id"] = cloud_cert_id
            if domain_info is None and not opts.urn:
                raise TypeError("Missing required property 'domain_info'")
            __props__.__dict__["domain_info"] = domain_info
            __props__.__dict__["cert_expire_time"] = None
            __props__.__dict__["cert_id"] = None
            __props__.__dict__["cert_type"] = None
            __props__.__dict__["certificate_alias"] = None
            __props__.__dict__["update_time"] = None
        super(PlayDomainCertAttachment, __self__).__init__(
            'tencentcloud:Css/playDomainCertAttachment:PlayDomainCertAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cert_expire_time: Optional[pulumi.Input[str]] = None,
            cert_id: Optional[pulumi.Input[int]] = None,
            cert_type: Optional[pulumi.Input[int]] = None,
            certificate_alias: Optional[pulumi.Input[str]] = None,
            cloud_cert_id: Optional[pulumi.Input[str]] = None,
            domain_info: Optional[pulumi.Input[pulumi.InputType['PlayDomainCertAttachmentDomainInfoArgs']]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'PlayDomainCertAttachment':
        """
        Get an existing PlayDomainCertAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cert_expire_time: certificate expiration time.
        :param pulumi.Input[int] cert_id: certificate ID.
        :param pulumi.Input[int] cert_type: certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
        :param pulumi.Input[str] certificate_alias: certificate remarks. Synonymous with CertName.
        :param pulumi.Input[str] cloud_cert_id: Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
        :param pulumi.Input[pulumi.InputType['PlayDomainCertAttachmentDomainInfoArgs']] domain_info: The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
        :param pulumi.Input[str] update_time: The time when the rule was last updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlayDomainCertAttachmentState.__new__(_PlayDomainCertAttachmentState)

        __props__.__dict__["cert_expire_time"] = cert_expire_time
        __props__.__dict__["cert_id"] = cert_id
        __props__.__dict__["cert_type"] = cert_type
        __props__.__dict__["certificate_alias"] = certificate_alias
        __props__.__dict__["cloud_cert_id"] = cloud_cert_id
        __props__.__dict__["domain_info"] = domain_info
        __props__.__dict__["update_time"] = update_time
        return PlayDomainCertAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certExpireTime")
    def cert_expire_time(self) -> pulumi.Output[str]:
        """
        certificate expiration time.
        """
        return pulumi.get(self, "cert_expire_time")

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> pulumi.Output[int]:
        """
        certificate ID.
        """
        return pulumi.get(self, "cert_id")

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> pulumi.Output[int]:
        """
        certificate type. 0: Self-owned certificate, 1: Tencent Cloud ssl managed certificate.
        """
        return pulumi.get(self, "cert_type")

    @property
    @pulumi.getter(name="certificateAlias")
    def certificate_alias(self) -> pulumi.Output[str]:
        """
        certificate remarks. Synonymous with CertName.
        """
        return pulumi.get(self, "certificate_alias")

    @property
    @pulumi.getter(name="cloudCertId")
    def cloud_cert_id(self) -> pulumi.Output[Optional[str]]:
        """
        Tencent cloud ssl certificate Id. Refer to `Ssl.Certificate` to create or obtain the resource ID.
        """
        return pulumi.get(self, "cloud_cert_id")

    @property
    @pulumi.getter(name="domainInfo")
    def domain_info(self) -> pulumi.Output['outputs.PlayDomainCertAttachmentDomainInfo']:
        """
        The playback domains to bind and whether to enable HTTPS for them. If `CloudCertId` is unspecified, and a domain is already bound with a certificate, this API will only update the HTTPS configuration of the domain.
        """
        return pulumi.get(self, "domain_info")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The time when the rule was last updated.
        """
        return pulumi.get(self, "update_time")

