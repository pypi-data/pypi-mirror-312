# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetXp2pDetailInfoListResult',
    'AwaitableGetXp2pDetailInfoListResult',
    'get_xp2p_detail_info_list',
    'get_xp2p_detail_info_list_output',
]

@pulumi.output_type
class GetXp2pDetailInfoListResult:
    """
    A collection of values returned by getXp2pDetailInfoList.
    """
    def __init__(__self__, data_info_lists=None, dimensions=None, id=None, query_time=None, result_output_file=None, stream_names=None, types=None):
        if data_info_lists and not isinstance(data_info_lists, list):
            raise TypeError("Expected argument 'data_info_lists' to be a list")
        pulumi.set(__self__, "data_info_lists", data_info_lists)
        if dimensions and not isinstance(dimensions, list):
            raise TypeError("Expected argument 'dimensions' to be a list")
        pulumi.set(__self__, "dimensions", dimensions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if query_time and not isinstance(query_time, str):
            raise TypeError("Expected argument 'query_time' to be a str")
        pulumi.set(__self__, "query_time", query_time)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if stream_names and not isinstance(stream_names, list):
            raise TypeError("Expected argument 'stream_names' to be a list")
        pulumi.set(__self__, "stream_names", stream_names)
        if types and not isinstance(types, list):
            raise TypeError("Expected argument 'types' to be a list")
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter(name="dataInfoLists")
    def data_info_lists(self) -> Sequence['outputs.GetXp2pDetailInfoListDataInfoListResult']:
        """
        P2P streaming statistical information.
        """
        return pulumi.get(self, "data_info_lists")

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="queryTime")
    def query_time(self) -> Optional[str]:
        return pulumi.get(self, "query_time")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="streamNames")
    def stream_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stream_names")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence[str]]:
        """
        Type, divided into two categories: live and vod.Note: This field may return null, indicating that no valid value is available.
        """
        return pulumi.get(self, "types")


class AwaitableGetXp2pDetailInfoListResult(GetXp2pDetailInfoListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetXp2pDetailInfoListResult(
            data_info_lists=self.data_info_lists,
            dimensions=self.dimensions,
            id=self.id,
            query_time=self.query_time,
            result_output_file=self.result_output_file,
            stream_names=self.stream_names,
            types=self.types)


def get_xp2p_detail_info_list(dimensions: Optional[Sequence[str]] = None,
                              query_time: Optional[str] = None,
                              result_output_file: Optional[str] = None,
                              stream_names: Optional[Sequence[str]] = None,
                              types: Optional[Sequence[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetXp2pDetailInfoListResult:
    """
    Use this data source to query detailed information of css xp2p_detail_info_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    xp2p_detail_info_list = tencentcloud.Css.get_xp2p_detail_info_list(query_time="2023-11-01T14:55:01+08:00",
        types=["live"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] dimensions: The dimension parameter can be used to specify the dimension for the query. If this parameter is not passed, the query will default to stream-level data. If you pass this parameter, it will only retrieve data for the specified dimension. The available dimension currently supported is AppId dimension, which allows you to query data based on the application ID. Please note that the returned fields will be related to the specified dimension.
    :param str query_time: The UTC minute granularity query time for querying usage data for a specific minute is in the format: yyyy-mm-ddTHH:MM:00Z. Please refer to the link https://cloud.tencent.com/document/product/266/11732#I.For example, if the local time is 2019-01-08 10:00:00 in Beijing, the corresponding UTC time would be 2019-01-08T10:00:00+08:00.This query supports data from the past six months.
    :param str result_output_file: Used to save results.
    :param Sequence[str] stream_names: The stream array can be used to specify the streams to be queried. If no stream is specified, the query will include all streams by default.
    :param Sequence[str] types: The type array can be used to specify the type of media content to be queried. The two available options are live for live streaming and vod for video on demand. If no type is specified, the query will include both live and VOD content by default.
    """
    __args__ = dict()
    __args__['dimensions'] = dimensions
    __args__['queryTime'] = query_time
    __args__['resultOutputFile'] = result_output_file
    __args__['streamNames'] = stream_names
    __args__['types'] = types
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Css/getXp2pDetailInfoList:getXp2pDetailInfoList', __args__, opts=opts, typ=GetXp2pDetailInfoListResult).value

    return AwaitableGetXp2pDetailInfoListResult(
        data_info_lists=pulumi.get(__ret__, 'data_info_lists'),
        dimensions=pulumi.get(__ret__, 'dimensions'),
        id=pulumi.get(__ret__, 'id'),
        query_time=pulumi.get(__ret__, 'query_time'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        stream_names=pulumi.get(__ret__, 'stream_names'),
        types=pulumi.get(__ret__, 'types'))


@_utilities.lift_output_func(get_xp2p_detail_info_list)
def get_xp2p_detail_info_list_output(dimensions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     query_time: Optional[pulumi.Input[Optional[str]]] = None,
                                     result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                     stream_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetXp2pDetailInfoListResult]:
    """
    Use this data source to query detailed information of css xp2p_detail_info_list

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    xp2p_detail_info_list = tencentcloud.Css.get_xp2p_detail_info_list(query_time="2023-11-01T14:55:01+08:00",
        types=["live"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] dimensions: The dimension parameter can be used to specify the dimension for the query. If this parameter is not passed, the query will default to stream-level data. If you pass this parameter, it will only retrieve data for the specified dimension. The available dimension currently supported is AppId dimension, which allows you to query data based on the application ID. Please note that the returned fields will be related to the specified dimension.
    :param str query_time: The UTC minute granularity query time for querying usage data for a specific minute is in the format: yyyy-mm-ddTHH:MM:00Z. Please refer to the link https://cloud.tencent.com/document/product/266/11732#I.For example, if the local time is 2019-01-08 10:00:00 in Beijing, the corresponding UTC time would be 2019-01-08T10:00:00+08:00.This query supports data from the past six months.
    :param str result_output_file: Used to save results.
    :param Sequence[str] stream_names: The stream array can be used to specify the streams to be queried. If no stream is specified, the query will include all streams by default.
    :param Sequence[str] types: The type array can be used to specify the type of media content to be queried. The two available options are live for live streaming and vod for video on demand. If no type is specified, the query will include both live and VOD content by default.
    """
    ...
