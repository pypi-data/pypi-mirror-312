# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AuthenticateDomainOwnerOperationArgs', 'AuthenticateDomainOwnerOperation']

@pulumi.input_type
class AuthenticateDomainOwnerOperationArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 verify_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AuthenticateDomainOwnerOperation resource.
        :param pulumi.Input[str] domain_name: The domain name to verify.
        :param pulumi.Input[str] verify_type: Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        if verify_type is not None:
            pulumi.set(__self__, "verify_type", verify_type)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        The domain name to verify.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="verifyType")
    def verify_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
        """
        return pulumi.get(self, "verify_type")

    @verify_type.setter
    def verify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_type", value)


@pulumi.input_type
class _AuthenticateDomainOwnerOperationState:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 verify_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AuthenticateDomainOwnerOperation resources.
        :param pulumi.Input[str] domain_name: The domain name to verify.
        :param pulumi.Input[str] verify_type: Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if verify_type is not None:
            pulumi.set(__self__, "verify_type", verify_type)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The domain name to verify.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="verifyType")
    def verify_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
        """
        return pulumi.get(self, "verify_type")

    @verify_type.setter
    def verify_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_type", value)


class AuthenticateDomainOwnerOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 verify_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to verify the domain ownership by specified way when DomainNeedVerifyOwner failed in domain creation.

        ## Example Usage

        ### dnsCheck way:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        dns_check = tencentcloud.css.AuthenticateDomainOwnerOperation("dnsCheck",
            domain_name="your_domain_name",
            verify_type="dnsCheck")
        ```
        <!--End PulumiCodeChooser -->

        ### fileCheck way:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        file_check = tencentcloud.css.AuthenticateDomainOwnerOperation("fileCheck",
            domain_name="your_domain_name",
            verify_type="fileCheck")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_name: The domain name to verify.
        :param pulumi.Input[str] verify_type: Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuthenticateDomainOwnerOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to verify the domain ownership by specified way when DomainNeedVerifyOwner failed in domain creation.

        ## Example Usage

        ### dnsCheck way:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        dns_check = tencentcloud.css.AuthenticateDomainOwnerOperation("dnsCheck",
            domain_name="your_domain_name",
            verify_type="dnsCheck")
        ```
        <!--End PulumiCodeChooser -->

        ### fileCheck way:

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        file_check = tencentcloud.css.AuthenticateDomainOwnerOperation("fileCheck",
            domain_name="your_domain_name",
            verify_type="fileCheck")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param AuthenticateDomainOwnerOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuthenticateDomainOwnerOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 verify_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuthenticateDomainOwnerOperationArgs.__new__(AuthenticateDomainOwnerOperationArgs)

            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["verify_type"] = verify_type
        super(AuthenticateDomainOwnerOperation, __self__).__init__(
            'tencentcloud:Css/authenticateDomainOwnerOperation:AuthenticateDomainOwnerOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            verify_type: Optional[pulumi.Input[str]] = None) -> 'AuthenticateDomainOwnerOperation':
        """
        Get an existing AuthenticateDomainOwnerOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_name: The domain name to verify.
        :param pulumi.Input[str] verify_type: Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuthenticateDomainOwnerOperationState.__new__(_AuthenticateDomainOwnerOperationState)

        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["verify_type"] = verify_type
        return AuthenticateDomainOwnerOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        The domain name to verify.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="verifyType")
    def verify_type(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
        """
        return pulumi.get(self, "verify_type")

