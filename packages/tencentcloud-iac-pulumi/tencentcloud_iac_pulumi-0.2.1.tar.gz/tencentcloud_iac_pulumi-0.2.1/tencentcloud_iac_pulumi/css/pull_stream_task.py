# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PullStreamTaskArgs', 'PullStreamTask']

@pulumi.input_type
class PullStreamTaskArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[str],
                 domain_name: pulumi.Input[str],
                 end_time: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 source_urls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 start_time: pulumi.Input[str],
                 stream_name: pulumi.Input[str],
                 backup_source_type: Optional[pulumi.Input[str]] = None,
                 backup_source_url: Optional[pulumi.Input[str]] = None,
                 callback_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 extra_cmd: Optional[pulumi.Input[str]] = None,
                 file_index: Optional[pulumi.Input[int]] = None,
                 offset_time: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 push_args: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 to_url: Optional[pulumi.Input[str]] = None,
                 vod_loop_times: Optional[pulumi.Input[int]] = None,
                 vod_refresh_type: Optional[pulumi.Input[str]] = None,
                 watermark_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]]] = None):
        """
        The set of arguments for constructing a PullStreamTask resource.
        :param pulumi.Input[str] app_name: push app name.
        :param pulumi.Input[str] domain_name: push domain name.
        :param pulumi.Input[str] end_time: task end time.
        :param pulumi.Input[str] source_type: `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_urls: Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        :param pulumi.Input[str] start_time: task begin time.
        :param pulumi.Input[str] stream_name: push stream name.
        :param pulumi.Input[str] backup_source_type: backup pull source type.
        :param pulumi.Input[str] backup_source_url: backup pull source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] callback_events: defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        :param pulumi.Input[str] callback_url: task event callback url.
        :param pulumi.Input[str] comment: desc for pull task.
        :param pulumi.Input[str] extra_cmd: ignore_region for ignore the input region and reblance inside the server.
        :param pulumi.Input[int] file_index: task enable or disable.
        :param pulumi.Input[int] offset_time: task enable or disable.
        :param pulumi.Input[str] operator: desc operator user name.
        :param pulumi.Input[str] push_args: other pushing args.
        :param pulumi.Input[str] status: task enable or disable.
        :param pulumi.Input[str] to_url: full target push url, DomainName, AppName, StreamName field must be empty.
        :param pulumi.Input[int] vod_loop_times: loop time for vod.
        :param pulumi.Input[str] vod_refresh_type: vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
        :param pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]] watermark_lists: watermark list, max 4 setting.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "source_urls", source_urls)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "stream_name", stream_name)
        if backup_source_type is not None:
            pulumi.set(__self__, "backup_source_type", backup_source_type)
        if backup_source_url is not None:
            pulumi.set(__self__, "backup_source_url", backup_source_url)
        if callback_events is not None:
            pulumi.set(__self__, "callback_events", callback_events)
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if extra_cmd is not None:
            pulumi.set(__self__, "extra_cmd", extra_cmd)
        if file_index is not None:
            pulumi.set(__self__, "file_index", file_index)
        if offset_time is not None:
            pulumi.set(__self__, "offset_time", offset_time)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if push_args is not None:
            pulumi.set(__self__, "push_args", push_args)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if to_url is not None:
            pulumi.set(__self__, "to_url", to_url)
        if vod_loop_times is not None:
            pulumi.set(__self__, "vod_loop_times", vod_loop_times)
        if vod_refresh_type is not None:
            pulumi.set(__self__, "vod_refresh_type", vod_refresh_type)
        if watermark_lists is not None:
            pulumi.set(__self__, "watermark_lists", watermark_lists)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[str]:
        """
        push app name.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        push domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        """
        task end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        """
        return pulumi.get(self, "source_urls")

    @source_urls.setter
    def source_urls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_urls", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        task begin time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        """
        push stream name.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="backupSourceType")
    def backup_source_type(self) -> Optional[pulumi.Input[str]]:
        """
        backup pull source type.
        """
        return pulumi.get(self, "backup_source_type")

    @backup_source_type.setter
    def backup_source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_source_type", value)

    @property
    @pulumi.getter(name="backupSourceUrl")
    def backup_source_url(self) -> Optional[pulumi.Input[str]]:
        """
        backup pull source.
        """
        return pulumi.get(self, "backup_source_url")

    @backup_source_url.setter
    def backup_source_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_source_url", value)

    @property
    @pulumi.getter(name="callbackEvents")
    def callback_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        """
        return pulumi.get(self, "callback_events")

    @callback_events.setter
    def callback_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "callback_events", value)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[pulumi.Input[str]]:
        """
        task event callback url.
        """
        return pulumi.get(self, "callback_url")

    @callback_url.setter
    def callback_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_url", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        desc for pull task.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="extraCmd")
    def extra_cmd(self) -> Optional[pulumi.Input[str]]:
        """
        ignore_region for ignore the input region and reblance inside the server.
        """
        return pulumi.get(self, "extra_cmd")

    @extra_cmd.setter
    def extra_cmd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_cmd", value)

    @property
    @pulumi.getter(name="fileIndex")
    def file_index(self) -> Optional[pulumi.Input[int]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "file_index")

    @file_index.setter
    def file_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_index", value)

    @property
    @pulumi.getter(name="offsetTime")
    def offset_time(self) -> Optional[pulumi.Input[int]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "offset_time")

    @offset_time.setter
    def offset_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset_time", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        desc operator user name.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="pushArgs")
    def push_args(self) -> Optional[pulumi.Input[str]]:
        """
        other pushing args.
        """
        return pulumi.get(self, "push_args")

    @push_args.setter
    def push_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "push_args", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="toUrl")
    def to_url(self) -> Optional[pulumi.Input[str]]:
        """
        full target push url, DomainName, AppName, StreamName field must be empty.
        """
        return pulumi.get(self, "to_url")

    @to_url.setter
    def to_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to_url", value)

    @property
    @pulumi.getter(name="vodLoopTimes")
    def vod_loop_times(self) -> Optional[pulumi.Input[int]]:
        """
        loop time for vod.
        """
        return pulumi.get(self, "vod_loop_times")

    @vod_loop_times.setter
    def vod_loop_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vod_loop_times", value)

    @property
    @pulumi.getter(name="vodRefreshType")
    def vod_refresh_type(self) -> Optional[pulumi.Input[str]]:
        """
        vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
        """
        return pulumi.get(self, "vod_refresh_type")

    @vod_refresh_type.setter
    def vod_refresh_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vod_refresh_type", value)

    @property
    @pulumi.getter(name="watermarkLists")
    def watermark_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]]]:
        """
        watermark list, max 4 setting.
        """
        return pulumi.get(self, "watermark_lists")

    @watermark_lists.setter
    def watermark_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]]]):
        pulumi.set(self, "watermark_lists", value)


@pulumi.input_type
class _PullStreamTaskState:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[str]] = None,
                 backup_source_type: Optional[pulumi.Input[str]] = None,
                 backup_source_url: Optional[pulumi.Input[str]] = None,
                 callback_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 create_by: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 extra_cmd: Optional[pulumi.Input[str]] = None,
                 file_index: Optional[pulumi.Input[int]] = None,
                 offset_time: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 push_args: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 source_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 to_url: Optional[pulumi.Input[str]] = None,
                 update_by: Optional[pulumi.Input[str]] = None,
                 update_time: Optional[pulumi.Input[str]] = None,
                 vod_loop_times: Optional[pulumi.Input[int]] = None,
                 vod_refresh_type: Optional[pulumi.Input[str]] = None,
                 watermark_lists: Optional[pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]]] = None):
        """
        Input properties used for looking up and filtering PullStreamTask resources.
        :param pulumi.Input[str] app_name: push app name.
        :param pulumi.Input[str] backup_source_type: backup pull source type.
        :param pulumi.Input[str] backup_source_url: backup pull source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] callback_events: defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        :param pulumi.Input[str] callback_url: task event callback url.
        :param pulumi.Input[str] comment: desc for pull task.
        :param pulumi.Input[str] create_by: desc who create the task.
        :param pulumi.Input[str] create_time: create time.
        :param pulumi.Input[str] domain_name: push domain name.
        :param pulumi.Input[str] end_time: task end time.
        :param pulumi.Input[str] extra_cmd: ignore_region for ignore the input region and reblance inside the server.
        :param pulumi.Input[int] file_index: task enable or disable.
        :param pulumi.Input[int] offset_time: task enable or disable.
        :param pulumi.Input[str] operator: desc operator user name.
        :param pulumi.Input[str] push_args: other pushing args.
        :param pulumi.Input[str] region: task run region.
        :param pulumi.Input[str] source_type: `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_urls: Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        :param pulumi.Input[str] start_time: task begin time.
        :param pulumi.Input[str] status: task enable or disable.
        :param pulumi.Input[str] stream_name: push stream name.
        :param pulumi.Input[str] to_url: full target push url, DomainName, AppName, StreamName field must be empty.
        :param pulumi.Input[str] update_by: desc who update the task.
        :param pulumi.Input[str] update_time: update time.
        :param pulumi.Input[int] vod_loop_times: loop time for vod.
        :param pulumi.Input[str] vod_refresh_type: vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
        :param pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]] watermark_lists: watermark list, max 4 setting.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if backup_source_type is not None:
            pulumi.set(__self__, "backup_source_type", backup_source_type)
        if backup_source_url is not None:
            pulumi.set(__self__, "backup_source_url", backup_source_url)
        if callback_events is not None:
            pulumi.set(__self__, "callback_events", callback_events)
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if create_by is not None:
            pulumi.set(__self__, "create_by", create_by)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if extra_cmd is not None:
            pulumi.set(__self__, "extra_cmd", extra_cmd)
        if file_index is not None:
            pulumi.set(__self__, "file_index", file_index)
        if offset_time is not None:
            pulumi.set(__self__, "offset_time", offset_time)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if push_args is not None:
            pulumi.set(__self__, "push_args", push_args)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if source_urls is not None:
            pulumi.set(__self__, "source_urls", source_urls)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)
        if to_url is not None:
            pulumi.set(__self__, "to_url", to_url)
        if update_by is not None:
            pulumi.set(__self__, "update_by", update_by)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if vod_loop_times is not None:
            pulumi.set(__self__, "vod_loop_times", vod_loop_times)
        if vod_refresh_type is not None:
            pulumi.set(__self__, "vod_refresh_type", vod_refresh_type)
        if watermark_lists is not None:
            pulumi.set(__self__, "watermark_lists", watermark_lists)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        """
        push app name.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="backupSourceType")
    def backup_source_type(self) -> Optional[pulumi.Input[str]]:
        """
        backup pull source type.
        """
        return pulumi.get(self, "backup_source_type")

    @backup_source_type.setter
    def backup_source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_source_type", value)

    @property
    @pulumi.getter(name="backupSourceUrl")
    def backup_source_url(self) -> Optional[pulumi.Input[str]]:
        """
        backup pull source.
        """
        return pulumi.get(self, "backup_source_url")

    @backup_source_url.setter
    def backup_source_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backup_source_url", value)

    @property
    @pulumi.getter(name="callbackEvents")
    def callback_events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        """
        return pulumi.get(self, "callback_events")

    @callback_events.setter
    def callback_events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "callback_events", value)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[pulumi.Input[str]]:
        """
        task event callback url.
        """
        return pulumi.get(self, "callback_url")

    @callback_url.setter
    def callback_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_url", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        desc for pull task.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="createBy")
    def create_by(self) -> Optional[pulumi.Input[str]]:
        """
        desc who create the task.
        """
        return pulumi.get(self, "create_by")

    @create_by.setter
    def create_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_by", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        push domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        task end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="extraCmd")
    def extra_cmd(self) -> Optional[pulumi.Input[str]]:
        """
        ignore_region for ignore the input region and reblance inside the server.
        """
        return pulumi.get(self, "extra_cmd")

    @extra_cmd.setter
    def extra_cmd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_cmd", value)

    @property
    @pulumi.getter(name="fileIndex")
    def file_index(self) -> Optional[pulumi.Input[int]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "file_index")

    @file_index.setter
    def file_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_index", value)

    @property
    @pulumi.getter(name="offsetTime")
    def offset_time(self) -> Optional[pulumi.Input[int]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "offset_time")

    @offset_time.setter
    def offset_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "offset_time", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        desc operator user name.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="pushArgs")
    def push_args(self) -> Optional[pulumi.Input[str]]:
        """
        other pushing args.
        """
        return pulumi.get(self, "push_args")

    @push_args.setter
    def push_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "push_args", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        task run region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        """
        return pulumi.get(self, "source_urls")

    @source_urls.setter
    def source_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "source_urls", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        task begin time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[pulumi.Input[str]]:
        """
        push stream name.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="toUrl")
    def to_url(self) -> Optional[pulumi.Input[str]]:
        """
        full target push url, DomainName, AppName, StreamName field must be empty.
        """
        return pulumi.get(self, "to_url")

    @to_url.setter
    def to_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "to_url", value)

    @property
    @pulumi.getter(name="updateBy")
    def update_by(self) -> Optional[pulumi.Input[str]]:
        """
        desc who update the task.
        """
        return pulumi.get(self, "update_by")

    @update_by.setter
    def update_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_by", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="vodLoopTimes")
    def vod_loop_times(self) -> Optional[pulumi.Input[int]]:
        """
        loop time for vod.
        """
        return pulumi.get(self, "vod_loop_times")

    @vod_loop_times.setter
    def vod_loop_times(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vod_loop_times", value)

    @property
    @pulumi.getter(name="vodRefreshType")
    def vod_refresh_type(self) -> Optional[pulumi.Input[str]]:
        """
        vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
        """
        return pulumi.get(self, "vod_refresh_type")

    @vod_refresh_type.setter
    def vod_refresh_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vod_refresh_type", value)

    @property
    @pulumi.getter(name="watermarkLists")
    def watermark_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]]]:
        """
        watermark list, max 4 setting.
        """
        return pulumi.get(self, "watermark_lists")

    @watermark_lists.setter
    def watermark_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PullStreamTaskWatermarkListArgs']]]]):
        pulumi.set(self, "watermark_lists", value)


class PullStreamTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 backup_source_type: Optional[pulumi.Input[str]] = None,
                 backup_source_url: Optional[pulumi.Input[str]] = None,
                 callback_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 extra_cmd: Optional[pulumi.Input[str]] = None,
                 file_index: Optional[pulumi.Input[int]] = None,
                 offset_time: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 push_args: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 source_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 to_url: Optional[pulumi.Input[str]] = None,
                 vod_loop_times: Optional[pulumi.Input[int]] = None,
                 vod_refresh_type: Optional[pulumi.Input[str]] = None,
                 watermark_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PullStreamTaskWatermarkListArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a css pull_stream_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        pull_stream_task = tencentcloud.css.PullStreamTask("pullStreamTask",
            app_name="app_name",
            comment="comment.",
            domain_name="domain_name",
            end_time="2022-11-16T22:09:28Z",
            operator="admin",
            source_type="source_type",
            source_urls=["source_urls"],
            start_time="2022-11-16T22:09:28Z",
            stream_name="stream_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css pull_stream_task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/pullStreamTask:PullStreamTask pull_stream_task pullStreamTask_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_name: push app name.
        :param pulumi.Input[str] backup_source_type: backup pull source type.
        :param pulumi.Input[str] backup_source_url: backup pull source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] callback_events: defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        :param pulumi.Input[str] callback_url: task event callback url.
        :param pulumi.Input[str] comment: desc for pull task.
        :param pulumi.Input[str] domain_name: push domain name.
        :param pulumi.Input[str] end_time: task end time.
        :param pulumi.Input[str] extra_cmd: ignore_region for ignore the input region and reblance inside the server.
        :param pulumi.Input[int] file_index: task enable or disable.
        :param pulumi.Input[int] offset_time: task enable or disable.
        :param pulumi.Input[str] operator: desc operator user name.
        :param pulumi.Input[str] push_args: other pushing args.
        :param pulumi.Input[str] source_type: `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_urls: Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        :param pulumi.Input[str] start_time: task begin time.
        :param pulumi.Input[str] status: task enable or disable.
        :param pulumi.Input[str] stream_name: push stream name.
        :param pulumi.Input[str] to_url: full target push url, DomainName, AppName, StreamName field must be empty.
        :param pulumi.Input[int] vod_loop_times: loop time for vod.
        :param pulumi.Input[str] vod_refresh_type: vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PullStreamTaskWatermarkListArgs']]]] watermark_lists: watermark list, max 4 setting.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PullStreamTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css pull_stream_task

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        pull_stream_task = tencentcloud.css.PullStreamTask("pullStreamTask",
            app_name="app_name",
            comment="comment.",
            domain_name="domain_name",
            end_time="2022-11-16T22:09:28Z",
            operator="admin",
            source_type="source_type",
            source_urls=["source_urls"],
            start_time="2022-11-16T22:09:28Z",
            stream_name="stream_name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css pull_stream_task can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/pullStreamTask:PullStreamTask pull_stream_task pullStreamTask_id
        ```

        :param str resource_name: The name of the resource.
        :param PullStreamTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PullStreamTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 backup_source_type: Optional[pulumi.Input[str]] = None,
                 backup_source_url: Optional[pulumi.Input[str]] = None,
                 callback_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 extra_cmd: Optional[pulumi.Input[str]] = None,
                 file_index: Optional[pulumi.Input[int]] = None,
                 offset_time: Optional[pulumi.Input[int]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 push_args: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 source_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 to_url: Optional[pulumi.Input[str]] = None,
                 vod_loop_times: Optional[pulumi.Input[int]] = None,
                 vod_refresh_type: Optional[pulumi.Input[str]] = None,
                 watermark_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PullStreamTaskWatermarkListArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PullStreamTaskArgs.__new__(PullStreamTaskArgs)

            if app_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_name'")
            __props__.__dict__["app_name"] = app_name
            __props__.__dict__["backup_source_type"] = backup_source_type
            __props__.__dict__["backup_source_url"] = backup_source_url
            __props__.__dict__["callback_events"] = callback_events
            __props__.__dict__["callback_url"] = callback_url
            __props__.__dict__["comment"] = comment
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if end_time is None and not opts.urn:
                raise TypeError("Missing required property 'end_time'")
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["extra_cmd"] = extra_cmd
            __props__.__dict__["file_index"] = file_index
            __props__.__dict__["offset_time"] = offset_time
            __props__.__dict__["operator"] = operator
            __props__.__dict__["push_args"] = push_args
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            if source_urls is None and not opts.urn:
                raise TypeError("Missing required property 'source_urls'")
            __props__.__dict__["source_urls"] = source_urls
            if start_time is None and not opts.urn:
                raise TypeError("Missing required property 'start_time'")
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["status"] = status
            if stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'stream_name'")
            __props__.__dict__["stream_name"] = stream_name
            __props__.__dict__["to_url"] = to_url
            __props__.__dict__["vod_loop_times"] = vod_loop_times
            __props__.__dict__["vod_refresh_type"] = vod_refresh_type
            __props__.__dict__["watermark_lists"] = watermark_lists
            __props__.__dict__["create_by"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["update_by"] = None
            __props__.__dict__["update_time"] = None
        super(PullStreamTask, __self__).__init__(
            'tencentcloud:Css/pullStreamTask:PullStreamTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_name: Optional[pulumi.Input[str]] = None,
            backup_source_type: Optional[pulumi.Input[str]] = None,
            backup_source_url: Optional[pulumi.Input[str]] = None,
            callback_events: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            callback_url: Optional[pulumi.Input[str]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            create_by: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            extra_cmd: Optional[pulumi.Input[str]] = None,
            file_index: Optional[pulumi.Input[int]] = None,
            offset_time: Optional[pulumi.Input[int]] = None,
            operator: Optional[pulumi.Input[str]] = None,
            push_args: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            source_type: Optional[pulumi.Input[str]] = None,
            source_urls: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            stream_name: Optional[pulumi.Input[str]] = None,
            to_url: Optional[pulumi.Input[str]] = None,
            update_by: Optional[pulumi.Input[str]] = None,
            update_time: Optional[pulumi.Input[str]] = None,
            vod_loop_times: Optional[pulumi.Input[int]] = None,
            vod_refresh_type: Optional[pulumi.Input[str]] = None,
            watermark_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PullStreamTaskWatermarkListArgs']]]]] = None) -> 'PullStreamTask':
        """
        Get an existing PullStreamTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_name: push app name.
        :param pulumi.Input[str] backup_source_type: backup pull source type.
        :param pulumi.Input[str] backup_source_url: backup pull source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] callback_events: defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        :param pulumi.Input[str] callback_url: task event callback url.
        :param pulumi.Input[str] comment: desc for pull task.
        :param pulumi.Input[str] create_by: desc who create the task.
        :param pulumi.Input[str] create_time: create time.
        :param pulumi.Input[str] domain_name: push domain name.
        :param pulumi.Input[str] end_time: task end time.
        :param pulumi.Input[str] extra_cmd: ignore_region for ignore the input region and reblance inside the server.
        :param pulumi.Input[int] file_index: task enable or disable.
        :param pulumi.Input[int] offset_time: task enable or disable.
        :param pulumi.Input[str] operator: desc operator user name.
        :param pulumi.Input[str] push_args: other pushing args.
        :param pulumi.Input[str] region: task run region.
        :param pulumi.Input[str] source_type: `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_urls: Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        :param pulumi.Input[str] start_time: task begin time.
        :param pulumi.Input[str] status: task enable or disable.
        :param pulumi.Input[str] stream_name: push stream name.
        :param pulumi.Input[str] to_url: full target push url, DomainName, AppName, StreamName field must be empty.
        :param pulumi.Input[str] update_by: desc who update the task.
        :param pulumi.Input[str] update_time: update time.
        :param pulumi.Input[int] vod_loop_times: loop time for vod.
        :param pulumi.Input[str] vod_refresh_type: vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PullStreamTaskWatermarkListArgs']]]] watermark_lists: watermark list, max 4 setting.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PullStreamTaskState.__new__(_PullStreamTaskState)

        __props__.__dict__["app_name"] = app_name
        __props__.__dict__["backup_source_type"] = backup_source_type
        __props__.__dict__["backup_source_url"] = backup_source_url
        __props__.__dict__["callback_events"] = callback_events
        __props__.__dict__["callback_url"] = callback_url
        __props__.__dict__["comment"] = comment
        __props__.__dict__["create_by"] = create_by
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["extra_cmd"] = extra_cmd
        __props__.__dict__["file_index"] = file_index
        __props__.__dict__["offset_time"] = offset_time
        __props__.__dict__["operator"] = operator
        __props__.__dict__["push_args"] = push_args
        __props__.__dict__["region"] = region
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["source_urls"] = source_urls
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["status"] = status
        __props__.__dict__["stream_name"] = stream_name
        __props__.__dict__["to_url"] = to_url
        __props__.__dict__["update_by"] = update_by
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["vod_loop_times"] = vod_loop_times
        __props__.__dict__["vod_refresh_type"] = vod_refresh_type
        __props__.__dict__["watermark_lists"] = watermark_lists
        return PullStreamTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[str]:
        """
        push app name.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="backupSourceType")
    def backup_source_type(self) -> pulumi.Output[Optional[str]]:
        """
        backup pull source type.
        """
        return pulumi.get(self, "backup_source_type")

    @property
    @pulumi.getter(name="backupSourceUrl")
    def backup_source_url(self) -> pulumi.Output[Optional[str]]:
        """
        backup pull source.
        """
        return pulumi.get(self, "backup_source_url")

    @property
    @pulumi.getter(name="callbackEvents")
    def callback_events(self) -> pulumi.Output[Sequence[str]]:
        """
        defind the callback event you need, null for all. TaskStart, TaskExit, VodSourceFileStart, VodSourceFileFinish, ResetTaskConfig, PullFileUnstable, PushStreamUnstable, PullFileFailed, PushStreamFailed, FileEndEarly.
        """
        return pulumi.get(self, "callback_events")

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> pulumi.Output[Optional[str]]:
        """
        task event callback url.
        """
        return pulumi.get(self, "callback_url")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        desc for pull task.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="createBy")
    def create_by(self) -> pulumi.Output[str]:
        """
        desc who create the task.
        """
        return pulumi.get(self, "create_by")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        push domain name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        task end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="extraCmd")
    def extra_cmd(self) -> pulumi.Output[Optional[str]]:
        """
        ignore_region for ignore the input region and reblance inside the server.
        """
        return pulumi.get(self, "extra_cmd")

    @property
    @pulumi.getter(name="fileIndex")
    def file_index(self) -> pulumi.Output[Optional[int]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "file_index")

    @property
    @pulumi.getter(name="offsetTime")
    def offset_time(self) -> pulumi.Output[Optional[int]]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "offset_time")

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Output[Optional[str]]:
        """
        desc operator user name.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="pushArgs")
    def push_args(self) -> pulumi.Output[Optional[str]]:
        """
        other pushing args.
        """
        return pulumi.get(self, "push_args")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        task run region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[str]:
        """
        `PullLivePushLive`: SourceUrls live type, `PullVodPushLive`: SourceUrls vod type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="sourceUrls")
    def source_urls(self) -> pulumi.Output[Sequence[str]]:
        """
        Pull Source media, SourceType=PullLivePushLive only 1 value, SourceType=PullLivePushLive can input multi values.
        """
        return pulumi.get(self, "source_urls")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        task begin time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        task enable or disable.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Output[str]:
        """
        push stream name.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="toUrl")
    def to_url(self) -> pulumi.Output[Optional[str]]:
        """
        full target push url, DomainName, AppName, StreamName field must be empty.
        """
        return pulumi.get(self, "to_url")

    @property
    @pulumi.getter(name="updateBy")
    def update_by(self) -> pulumi.Output[str]:
        """
        desc who update the task.
        """
        return pulumi.get(self, "update_by")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="vodLoopTimes")
    def vod_loop_times(self) -> pulumi.Output[int]:
        """
        loop time for vod.
        """
        return pulumi.get(self, "vod_loop_times")

    @property
    @pulumi.getter(name="vodRefreshType")
    def vod_refresh_type(self) -> pulumi.Output[str]:
        """
        vod refresh method. `ImmediateNewSource`: switch to new source at once, `ContinueBreakPoint`: switch to new source while old source finish.
        """
        return pulumi.get(self, "vod_refresh_type")

    @property
    @pulumi.getter(name="watermarkLists")
    def watermark_lists(self) -> pulumi.Output[Optional[Sequence['outputs.PullStreamTaskWatermarkList']]]:
        """
        watermark list, max 4 setting.
        """
        return pulumi.get(self, "watermark_lists")

