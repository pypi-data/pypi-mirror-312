# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WatermarkRuleAttachmentArgs', 'WatermarkRuleAttachment']

@pulumi.input_type
class WatermarkRuleAttachmentArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[str],
                 domain_name: pulumi.Input[str],
                 stream_name: pulumi.Input[str],
                 template_id: pulumi.Input[int]):
        """
        The set of arguments for constructing a WatermarkRuleAttachment resource.
        :param pulumi.Input[str] app_name: rule app name.
        :param pulumi.Input[str] domain_name: rule domain name.
        :param pulumi.Input[str] stream_name: rule stream name.
        :param pulumi.Input[int] template_id: The template Id can be acquired by the Id of `Css.Watermark`.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[str]:
        """
        rule app name.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        rule domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        """
        rule stream name.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Input[int]:
        """
        The template Id can be acquired by the Id of `Css.Watermark`.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class _WatermarkRuleAttachmentState:
    def __init__(__self__, *,
                 app_name: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WatermarkRuleAttachment resources.
        :param pulumi.Input[str] app_name: rule app name.
        :param pulumi.Input[str] create_time: create time.
        :param pulumi.Input[str] domain_name: rule domain name.
        :param pulumi.Input[str] stream_name: rule stream name.
        :param pulumi.Input[int] template_id: The template Id can be acquired by the Id of `Css.Watermark`.
        :param pulumi.Input[str] update_time: update time.
        """
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        """
        rule app name.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        rule domain name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[pulumi.Input[str]]:
        """
        rule stream name.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        """
        The template Id can be acquired by the Id of `Css.Watermark`.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class WatermarkRuleAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a css watermark_rule

        ## Example Usage

        ### Binding watermark rule with a css stream

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_pull_stream_task = tencentcloud.css.PullStreamTask("examplePullStreamTask",
            stream_name="tf_example_stream_name",
            source_type="PullLivePushLive",
            source_urls=["rtmp://xxx.com/live/stream"],
            domain_name="test.domain.com",
            app_name="live",
            start_time="2023-09-27T10:28:21Z",
            end_time="2023-09-27T17:28:21Z",
            operator="tf_admin",
            comment="This is a e2e test case.")
        example_watermark = tencentcloud.css.Watermark("exampleWatermark",
            picture_url="picture_url",
            watermark_name="watermark_name",
            x_position=0,
            y_position=0,
            width=0,
            height=0)
        watermark_rule_attachment = tencentcloud.css.WatermarkRuleAttachment("watermarkRuleAttachment",
            domain_name=example_pull_stream_task.domain_name,
            app_name=example_pull_stream_task.app_name,
            stream_name=example_pull_stream_task.stream_name,
            template_id=example_watermark.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css watermark_rule_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/watermarkRuleAttachment:WatermarkRuleAttachment watermark_rule domain_name#app_name#stream_name#template_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_name: rule app name.
        :param pulumi.Input[str] domain_name: rule domain name.
        :param pulumi.Input[str] stream_name: rule stream name.
        :param pulumi.Input[int] template_id: The template Id can be acquired by the Id of `Css.Watermark`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WatermarkRuleAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css watermark_rule

        ## Example Usage

        ### Binding watermark rule with a css stream

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_pull_stream_task = tencentcloud.css.PullStreamTask("examplePullStreamTask",
            stream_name="tf_example_stream_name",
            source_type="PullLivePushLive",
            source_urls=["rtmp://xxx.com/live/stream"],
            domain_name="test.domain.com",
            app_name="live",
            start_time="2023-09-27T10:28:21Z",
            end_time="2023-09-27T17:28:21Z",
            operator="tf_admin",
            comment="This is a e2e test case.")
        example_watermark = tencentcloud.css.Watermark("exampleWatermark",
            picture_url="picture_url",
            watermark_name="watermark_name",
            x_position=0,
            y_position=0,
            width=0,
            height=0)
        watermark_rule_attachment = tencentcloud.css.WatermarkRuleAttachment("watermarkRuleAttachment",
            domain_name=example_pull_stream_task.domain_name,
            app_name=example_pull_stream_task.app_name,
            stream_name=example_pull_stream_task.stream_name,
            template_id=example_watermark.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css watermark_rule_attachment can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/watermarkRuleAttachment:WatermarkRuleAttachment watermark_rule domain_name#app_name#stream_name#template_id
        ```

        :param str resource_name: The name of the resource.
        :param WatermarkRuleAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WatermarkRuleAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WatermarkRuleAttachmentArgs.__new__(WatermarkRuleAttachmentArgs)

            if app_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_name'")
            __props__.__dict__["app_name"] = app_name
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'stream_name'")
            __props__.__dict__["stream_name"] = stream_name
            if template_id is None and not opts.urn:
                raise TypeError("Missing required property 'template_id'")
            __props__.__dict__["template_id"] = template_id
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(WatermarkRuleAttachment, __self__).__init__(
            'tencentcloud:Css/watermarkRuleAttachment:WatermarkRuleAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_name: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            stream_name: Optional[pulumi.Input[str]] = None,
            template_id: Optional[pulumi.Input[int]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'WatermarkRuleAttachment':
        """
        Get an existing WatermarkRuleAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_name: rule app name.
        :param pulumi.Input[str] create_time: create time.
        :param pulumi.Input[str] domain_name: rule domain name.
        :param pulumi.Input[str] stream_name: rule stream name.
        :param pulumi.Input[int] template_id: The template Id can be acquired by the Id of `Css.Watermark`.
        :param pulumi.Input[str] update_time: update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WatermarkRuleAttachmentState.__new__(_WatermarkRuleAttachmentState)

        __props__.__dict__["app_name"] = app_name
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["stream_name"] = stream_name
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["update_time"] = update_time
        return WatermarkRuleAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[str]:
        """
        rule app name.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        rule domain name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Output[str]:
        """
        rule stream name.
        """
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[int]:
        """
        The template Id can be acquired by the Id of `Css.Watermark`.
        """
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

