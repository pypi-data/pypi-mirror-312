# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PlayAuthKeyConfigArgs', 'PlayAuthKeyConfig']

@pulumi.input_type
class PlayAuthKeyConfigArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 auth_back_key: Optional[pulumi.Input[str]] = None,
                 auth_delta: Optional[pulumi.Input[int]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a PlayAuthKeyConfig resource.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[str] auth_back_key: Alternate key for authentication. No transfer means that the current value is not modified.
        :param pulumi.Input[int] auth_delta: Valid time, unit: second. No transfer means that the current value is not modified.
        :param pulumi.Input[str] auth_key: Authentication key. No transfer means that the current value is not modified.
        :param pulumi.Input[int] enable: Enable or not, 0: Close, 1: Enable. No transfer means that the current value is not modified.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        if auth_back_key is not None:
            pulumi.set(__self__, "auth_back_key", auth_back_key)
        if auth_delta is not None:
            pulumi.set(__self__, "auth_delta", auth_delta)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="authBackKey")
    def auth_back_key(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate key for authentication. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_back_key")

    @auth_back_key.setter
    def auth_back_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_back_key", value)

    @property
    @pulumi.getter(name="authDelta")
    def auth_delta(self) -> Optional[pulumi.Input[int]]:
        """
        Valid time, unit: second. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_delta")

    @auth_delta.setter
    def auth_delta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_delta", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Enable or not, 0: Close, 1: Enable. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)


@pulumi.input_type
class _PlayAuthKeyConfigState:
    def __init__(__self__, *,
                 auth_back_key: Optional[pulumi.Input[str]] = None,
                 auth_delta: Optional[pulumi.Input[int]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering PlayAuthKeyConfig resources.
        :param pulumi.Input[str] auth_back_key: Alternate key for authentication. No transfer means that the current value is not modified.
        :param pulumi.Input[int] auth_delta: Valid time, unit: second. No transfer means that the current value is not modified.
        :param pulumi.Input[str] auth_key: Authentication key. No transfer means that the current value is not modified.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[int] enable: Enable or not, 0: Close, 1: Enable. No transfer means that the current value is not modified.
        """
        if auth_back_key is not None:
            pulumi.set(__self__, "auth_back_key", auth_back_key)
        if auth_delta is not None:
            pulumi.set(__self__, "auth_delta", auth_delta)
        if auth_key is not None:
            pulumi.set(__self__, "auth_key", auth_key)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter(name="authBackKey")
    def auth_back_key(self) -> Optional[pulumi.Input[str]]:
        """
        Alternate key for authentication. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_back_key")

    @auth_back_key.setter
    def auth_back_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_back_key", value)

    @property
    @pulumi.getter(name="authDelta")
    def auth_delta(self) -> Optional[pulumi.Input[int]]:
        """
        Valid time, unit: second. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_delta")

    @auth_delta.setter
    def auth_delta(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auth_delta", value)

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication key. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_key")

    @auth_key.setter
    def auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_key", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Enable or not, 0: Close, 1: Enable. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)


class PlayAuthKeyConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_back_key: Optional[pulumi.Input[str]] = None,
                 auth_delta: Optional[pulumi.Input[int]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a css play_auth_key_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        play_auth_key_config = tencentcloud.css.PlayAuthKeyConfig("playAuthKeyConfig",
            auth_back_key="testbackkey",
            auth_delta=3600,
            auth_key="testauthkey",
            domain_name="your_play_domain_name",
            enable=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css play_auth_key_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/playAuthKeyConfig:PlayAuthKeyConfig play_auth_key_config play_auth_key_config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_back_key: Alternate key for authentication. No transfer means that the current value is not modified.
        :param pulumi.Input[int] auth_delta: Valid time, unit: second. No transfer means that the current value is not modified.
        :param pulumi.Input[str] auth_key: Authentication key. No transfer means that the current value is not modified.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[int] enable: Enable or not, 0: Close, 1: Enable. No transfer means that the current value is not modified.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlayAuthKeyConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css play_auth_key_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        play_auth_key_config = tencentcloud.css.PlayAuthKeyConfig("playAuthKeyConfig",
            auth_back_key="testbackkey",
            auth_delta=3600,
            auth_key="testauthkey",
            domain_name="your_play_domain_name",
            enable=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css play_auth_key_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/playAuthKeyConfig:PlayAuthKeyConfig play_auth_key_config play_auth_key_config_id
        ```

        :param str resource_name: The name of the resource.
        :param PlayAuthKeyConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlayAuthKeyConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_back_key: Optional[pulumi.Input[str]] = None,
                 auth_delta: Optional[pulumi.Input[int]] = None,
                 auth_key: Optional[pulumi.Input[str]] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlayAuthKeyConfigArgs.__new__(PlayAuthKeyConfigArgs)

            __props__.__dict__["auth_back_key"] = auth_back_key
            __props__.__dict__["auth_delta"] = auth_delta
            __props__.__dict__["auth_key"] = auth_key
            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            __props__.__dict__["enable"] = enable
        super(PlayAuthKeyConfig, __self__).__init__(
            'tencentcloud:Css/playAuthKeyConfig:PlayAuthKeyConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_back_key: Optional[pulumi.Input[str]] = None,
            auth_delta: Optional[pulumi.Input[int]] = None,
            auth_key: Optional[pulumi.Input[str]] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[int]] = None) -> 'PlayAuthKeyConfig':
        """
        Get an existing PlayAuthKeyConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_back_key: Alternate key for authentication. No transfer means that the current value is not modified.
        :param pulumi.Input[int] auth_delta: Valid time, unit: second. No transfer means that the current value is not modified.
        :param pulumi.Input[str] auth_key: Authentication key. No transfer means that the current value is not modified.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[int] enable: Enable or not, 0: Close, 1: Enable. No transfer means that the current value is not modified.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlayAuthKeyConfigState.__new__(_PlayAuthKeyConfigState)

        __props__.__dict__["auth_back_key"] = auth_back_key
        __props__.__dict__["auth_delta"] = auth_delta
        __props__.__dict__["auth_key"] = auth_key
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["enable"] = enable
        return PlayAuthKeyConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authBackKey")
    def auth_back_key(self) -> pulumi.Output[Optional[str]]:
        """
        Alternate key for authentication. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_back_key")

    @property
    @pulumi.getter(name="authDelta")
    def auth_delta(self) -> pulumi.Output[Optional[int]]:
        """
        Valid time, unit: second. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_delta")

    @property
    @pulumi.getter(name="authKey")
    def auth_key(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication key. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "auth_key")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[int]]:
        """
        Enable or not, 0: Close, 1: Enable. No transfer means that the current value is not modified.
        """
        return pulumi.get(self, "enable")

