# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RecordTemplateArgs', 'RecordTemplate']

@pulumi.input_type
class RecordTemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 aac_param: Optional[pulumi.Input['RecordTemplateAacParamArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flv_param: Optional[pulumi.Input['RecordTemplateFlvParamArgs']] = None,
                 flv_special_param: Optional[pulumi.Input['RecordTemplateFlvSpecialParamArgs']] = None,
                 hls_param: Optional[pulumi.Input['RecordTemplateHlsParamArgs']] = None,
                 hls_special_param: Optional[pulumi.Input['RecordTemplateHlsSpecialParamArgs']] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 mp3_param: Optional[pulumi.Input['RecordTemplateMp3ParamArgs']] = None,
                 mp4_param: Optional[pulumi.Input['RecordTemplateMp4ParamArgs']] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RecordTemplate resource.
        :param pulumi.Input[str] template_name: Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        :param pulumi.Input['RecordTemplateAacParamArgs'] aac_param: Aac recording parameters are set when Aac recording is enabled.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input['RecordTemplateFlvParamArgs'] flv_param: Flv recording parameters are set when Flv recording is enabled.
        :param pulumi.Input['RecordTemplateFlvSpecialParamArgs'] flv_special_param: FLV records special parameters.
        :param pulumi.Input['RecordTemplateHlsParamArgs'] hls_param: Hls recording parameters, which are set when hls recording is enabled.
        :param pulumi.Input['RecordTemplateHlsSpecialParamArgs'] hls_special_param: HLS specific recording parameters.
        :param pulumi.Input[int] is_delay_live: Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        :param pulumi.Input['RecordTemplateMp3ParamArgs'] mp3_param: Mp3 recording parameters are set when Mp3 recording is turned on.
        :param pulumi.Input['RecordTemplateMp4ParamArgs'] mp4_param: Mp4 recording parameters are set when Mp4 recording is enabled.
        :param pulumi.Input[bool] remove_watermark: Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        """
        pulumi.set(__self__, "template_name", template_name)
        if aac_param is not None:
            pulumi.set(__self__, "aac_param", aac_param)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if flv_param is not None:
            pulumi.set(__self__, "flv_param", flv_param)
        if flv_special_param is not None:
            pulumi.set(__self__, "flv_special_param", flv_special_param)
        if hls_param is not None:
            pulumi.set(__self__, "hls_param", hls_param)
        if hls_special_param is not None:
            pulumi.set(__self__, "hls_special_param", hls_special_param)
        if is_delay_live is not None:
            pulumi.set(__self__, "is_delay_live", is_delay_live)
        if mp3_param is not None:
            pulumi.set(__self__, "mp3_param", mp3_param)
        if mp4_param is not None:
            pulumi.set(__self__, "mp4_param", mp4_param)
        if remove_watermark is not None:
            pulumi.set(__self__, "remove_watermark", remove_watermark)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="aacParam")
    def aac_param(self) -> Optional[pulumi.Input['RecordTemplateAacParamArgs']]:
        """
        Aac recording parameters are set when Aac recording is enabled.
        """
        return pulumi.get(self, "aac_param")

    @aac_param.setter
    def aac_param(self, value: Optional[pulumi.Input['RecordTemplateAacParamArgs']]):
        pulumi.set(self, "aac_param", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="flvParam")
    def flv_param(self) -> Optional[pulumi.Input['RecordTemplateFlvParamArgs']]:
        """
        Flv recording parameters are set when Flv recording is enabled.
        """
        return pulumi.get(self, "flv_param")

    @flv_param.setter
    def flv_param(self, value: Optional[pulumi.Input['RecordTemplateFlvParamArgs']]):
        pulumi.set(self, "flv_param", value)

    @property
    @pulumi.getter(name="flvSpecialParam")
    def flv_special_param(self) -> Optional[pulumi.Input['RecordTemplateFlvSpecialParamArgs']]:
        """
        FLV records special parameters.
        """
        return pulumi.get(self, "flv_special_param")

    @flv_special_param.setter
    def flv_special_param(self, value: Optional[pulumi.Input['RecordTemplateFlvSpecialParamArgs']]):
        pulumi.set(self, "flv_special_param", value)

    @property
    @pulumi.getter(name="hlsParam")
    def hls_param(self) -> Optional[pulumi.Input['RecordTemplateHlsParamArgs']]:
        """
        Hls recording parameters, which are set when hls recording is enabled.
        """
        return pulumi.get(self, "hls_param")

    @hls_param.setter
    def hls_param(self, value: Optional[pulumi.Input['RecordTemplateHlsParamArgs']]):
        pulumi.set(self, "hls_param", value)

    @property
    @pulumi.getter(name="hlsSpecialParam")
    def hls_special_param(self) -> Optional[pulumi.Input['RecordTemplateHlsSpecialParamArgs']]:
        """
        HLS specific recording parameters.
        """
        return pulumi.get(self, "hls_special_param")

    @hls_special_param.setter
    def hls_special_param(self, value: Optional[pulumi.Input['RecordTemplateHlsSpecialParamArgs']]):
        pulumi.set(self, "hls_special_param", value)

    @property
    @pulumi.getter(name="isDelayLive")
    def is_delay_live(self) -> Optional[pulumi.Input[int]]:
        """
        Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        """
        return pulumi.get(self, "is_delay_live")

    @is_delay_live.setter
    def is_delay_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_delay_live", value)

    @property
    @pulumi.getter(name="mp3Param")
    def mp3_param(self) -> Optional[pulumi.Input['RecordTemplateMp3ParamArgs']]:
        """
        Mp3 recording parameters are set when Mp3 recording is turned on.
        """
        return pulumi.get(self, "mp3_param")

    @mp3_param.setter
    def mp3_param(self, value: Optional[pulumi.Input['RecordTemplateMp3ParamArgs']]):
        pulumi.set(self, "mp3_param", value)

    @property
    @pulumi.getter(name="mp4Param")
    def mp4_param(self) -> Optional[pulumi.Input['RecordTemplateMp4ParamArgs']]:
        """
        Mp4 recording parameters are set when Mp4 recording is enabled.
        """
        return pulumi.get(self, "mp4_param")

    @mp4_param.setter
    def mp4_param(self, value: Optional[pulumi.Input['RecordTemplateMp4ParamArgs']]):
        pulumi.set(self, "mp4_param", value)

    @property
    @pulumi.getter(name="removeWatermark")
    def remove_watermark(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        """
        return pulumi.get(self, "remove_watermark")

    @remove_watermark.setter
    def remove_watermark(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_watermark", value)


@pulumi.input_type
class _RecordTemplateState:
    def __init__(__self__, *,
                 aac_param: Optional[pulumi.Input['RecordTemplateAacParamArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flv_param: Optional[pulumi.Input['RecordTemplateFlvParamArgs']] = None,
                 flv_special_param: Optional[pulumi.Input['RecordTemplateFlvSpecialParamArgs']] = None,
                 hls_param: Optional[pulumi.Input['RecordTemplateHlsParamArgs']] = None,
                 hls_special_param: Optional[pulumi.Input['RecordTemplateHlsSpecialParamArgs']] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 mp3_param: Optional[pulumi.Input['RecordTemplateMp3ParamArgs']] = None,
                 mp4_param: Optional[pulumi.Input['RecordTemplateMp4ParamArgs']] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RecordTemplate resources.
        :param pulumi.Input['RecordTemplateAacParamArgs'] aac_param: Aac recording parameters are set when Aac recording is enabled.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input['RecordTemplateFlvParamArgs'] flv_param: Flv recording parameters are set when Flv recording is enabled.
        :param pulumi.Input['RecordTemplateFlvSpecialParamArgs'] flv_special_param: FLV records special parameters.
        :param pulumi.Input['RecordTemplateHlsParamArgs'] hls_param: Hls recording parameters, which are set when hls recording is enabled.
        :param pulumi.Input['RecordTemplateHlsSpecialParamArgs'] hls_special_param: HLS specific recording parameters.
        :param pulumi.Input[int] is_delay_live: Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        :param pulumi.Input['RecordTemplateMp3ParamArgs'] mp3_param: Mp3 recording parameters are set when Mp3 recording is turned on.
        :param pulumi.Input['RecordTemplateMp4ParamArgs'] mp4_param: Mp4 recording parameters are set when Mp4 recording is enabled.
        :param pulumi.Input[bool] remove_watermark: Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        :param pulumi.Input[str] template_name: Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        if aac_param is not None:
            pulumi.set(__self__, "aac_param", aac_param)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if flv_param is not None:
            pulumi.set(__self__, "flv_param", flv_param)
        if flv_special_param is not None:
            pulumi.set(__self__, "flv_special_param", flv_special_param)
        if hls_param is not None:
            pulumi.set(__self__, "hls_param", hls_param)
        if hls_special_param is not None:
            pulumi.set(__self__, "hls_special_param", hls_special_param)
        if is_delay_live is not None:
            pulumi.set(__self__, "is_delay_live", is_delay_live)
        if mp3_param is not None:
            pulumi.set(__self__, "mp3_param", mp3_param)
        if mp4_param is not None:
            pulumi.set(__self__, "mp4_param", mp4_param)
        if remove_watermark is not None:
            pulumi.set(__self__, "remove_watermark", remove_watermark)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="aacParam")
    def aac_param(self) -> Optional[pulumi.Input['RecordTemplateAacParamArgs']]:
        """
        Aac recording parameters are set when Aac recording is enabled.
        """
        return pulumi.get(self, "aac_param")

    @aac_param.setter
    def aac_param(self, value: Optional[pulumi.Input['RecordTemplateAacParamArgs']]):
        pulumi.set(self, "aac_param", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="flvParam")
    def flv_param(self) -> Optional[pulumi.Input['RecordTemplateFlvParamArgs']]:
        """
        Flv recording parameters are set when Flv recording is enabled.
        """
        return pulumi.get(self, "flv_param")

    @flv_param.setter
    def flv_param(self, value: Optional[pulumi.Input['RecordTemplateFlvParamArgs']]):
        pulumi.set(self, "flv_param", value)

    @property
    @pulumi.getter(name="flvSpecialParam")
    def flv_special_param(self) -> Optional[pulumi.Input['RecordTemplateFlvSpecialParamArgs']]:
        """
        FLV records special parameters.
        """
        return pulumi.get(self, "flv_special_param")

    @flv_special_param.setter
    def flv_special_param(self, value: Optional[pulumi.Input['RecordTemplateFlvSpecialParamArgs']]):
        pulumi.set(self, "flv_special_param", value)

    @property
    @pulumi.getter(name="hlsParam")
    def hls_param(self) -> Optional[pulumi.Input['RecordTemplateHlsParamArgs']]:
        """
        Hls recording parameters, which are set when hls recording is enabled.
        """
        return pulumi.get(self, "hls_param")

    @hls_param.setter
    def hls_param(self, value: Optional[pulumi.Input['RecordTemplateHlsParamArgs']]):
        pulumi.set(self, "hls_param", value)

    @property
    @pulumi.getter(name="hlsSpecialParam")
    def hls_special_param(self) -> Optional[pulumi.Input['RecordTemplateHlsSpecialParamArgs']]:
        """
        HLS specific recording parameters.
        """
        return pulumi.get(self, "hls_special_param")

    @hls_special_param.setter
    def hls_special_param(self, value: Optional[pulumi.Input['RecordTemplateHlsSpecialParamArgs']]):
        pulumi.set(self, "hls_special_param", value)

    @property
    @pulumi.getter(name="isDelayLive")
    def is_delay_live(self) -> Optional[pulumi.Input[int]]:
        """
        Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        """
        return pulumi.get(self, "is_delay_live")

    @is_delay_live.setter
    def is_delay_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_delay_live", value)

    @property
    @pulumi.getter(name="mp3Param")
    def mp3_param(self) -> Optional[pulumi.Input['RecordTemplateMp3ParamArgs']]:
        """
        Mp3 recording parameters are set when Mp3 recording is turned on.
        """
        return pulumi.get(self, "mp3_param")

    @mp3_param.setter
    def mp3_param(self, value: Optional[pulumi.Input['RecordTemplateMp3ParamArgs']]):
        pulumi.set(self, "mp3_param", value)

    @property
    @pulumi.getter(name="mp4Param")
    def mp4_param(self) -> Optional[pulumi.Input['RecordTemplateMp4ParamArgs']]:
        """
        Mp4 recording parameters are set when Mp4 recording is enabled.
        """
        return pulumi.get(self, "mp4_param")

    @mp4_param.setter
    def mp4_param(self, value: Optional[pulumi.Input['RecordTemplateMp4ParamArgs']]):
        pulumi.set(self, "mp4_param", value)

    @property
    @pulumi.getter(name="removeWatermark")
    def remove_watermark(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        """
        return pulumi.get(self, "remove_watermark")

    @remove_watermark.setter
    def remove_watermark(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_watermark", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class RecordTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aac_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateAacParamArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flv_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateFlvParamArgs']]] = None,
                 flv_special_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateFlvSpecialParamArgs']]] = None,
                 hls_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateHlsParamArgs']]] = None,
                 hls_special_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateHlsSpecialParamArgs']]] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 mp3_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateMp3ParamArgs']]] = None,
                 mp4_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateMp4ParamArgs']]] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RecordTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RecordTemplateAacParamArgs']] aac_param: Aac recording parameters are set when Aac recording is enabled.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[pulumi.InputType['RecordTemplateFlvParamArgs']] flv_param: Flv recording parameters are set when Flv recording is enabled.
        :param pulumi.Input[pulumi.InputType['RecordTemplateFlvSpecialParamArgs']] flv_special_param: FLV records special parameters.
        :param pulumi.Input[pulumi.InputType['RecordTemplateHlsParamArgs']] hls_param: Hls recording parameters, which are set when hls recording is enabled.
        :param pulumi.Input[pulumi.InputType['RecordTemplateHlsSpecialParamArgs']] hls_special_param: HLS specific recording parameters.
        :param pulumi.Input[int] is_delay_live: Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        :param pulumi.Input[pulumi.InputType['RecordTemplateMp3ParamArgs']] mp3_param: Mp3 recording parameters are set when Mp3 recording is turned on.
        :param pulumi.Input[pulumi.InputType['RecordTemplateMp4ParamArgs']] mp4_param: Mp4 recording parameters are set when Mp4 recording is enabled.
        :param pulumi.Input[bool] remove_watermark: Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        :param pulumi.Input[str] template_name: Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RecordTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RecordTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aac_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateAacParamArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flv_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateFlvParamArgs']]] = None,
                 flv_special_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateFlvSpecialParamArgs']]] = None,
                 hls_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateHlsParamArgs']]] = None,
                 hls_special_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateHlsSpecialParamArgs']]] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 mp3_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateMp3ParamArgs']]] = None,
                 mp4_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateMp4ParamArgs']]] = None,
                 remove_watermark: Optional[pulumi.Input[bool]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordTemplateArgs.__new__(RecordTemplateArgs)

            __props__.__dict__["aac_param"] = aac_param
            __props__.__dict__["description"] = description
            __props__.__dict__["flv_param"] = flv_param
            __props__.__dict__["flv_special_param"] = flv_special_param
            __props__.__dict__["hls_param"] = hls_param
            __props__.__dict__["hls_special_param"] = hls_special_param
            __props__.__dict__["is_delay_live"] = is_delay_live
            __props__.__dict__["mp3_param"] = mp3_param
            __props__.__dict__["mp4_param"] = mp4_param
            __props__.__dict__["remove_watermark"] = remove_watermark
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
        super(RecordTemplate, __self__).__init__(
            'tencentcloud:Css/recordTemplate:RecordTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aac_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateAacParamArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            flv_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateFlvParamArgs']]] = None,
            flv_special_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateFlvSpecialParamArgs']]] = None,
            hls_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateHlsParamArgs']]] = None,
            hls_special_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateHlsSpecialParamArgs']]] = None,
            is_delay_live: Optional[pulumi.Input[int]] = None,
            mp3_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateMp3ParamArgs']]] = None,
            mp4_param: Optional[pulumi.Input[pulumi.InputType['RecordTemplateMp4ParamArgs']]] = None,
            remove_watermark: Optional[pulumi.Input[bool]] = None,
            template_name: Optional[pulumi.Input[str]] = None) -> 'RecordTemplate':
        """
        Get an existing RecordTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['RecordTemplateAacParamArgs']] aac_param: Aac recording parameters are set when Aac recording is enabled.
        :param pulumi.Input[str] description: Description.
        :param pulumi.Input[pulumi.InputType['RecordTemplateFlvParamArgs']] flv_param: Flv recording parameters are set when Flv recording is enabled.
        :param pulumi.Input[pulumi.InputType['RecordTemplateFlvSpecialParamArgs']] flv_special_param: FLV records special parameters.
        :param pulumi.Input[pulumi.InputType['RecordTemplateHlsParamArgs']] hls_param: Hls recording parameters, which are set when hls recording is enabled.
        :param pulumi.Input[pulumi.InputType['RecordTemplateHlsSpecialParamArgs']] hls_special_param: HLS specific recording parameters.
        :param pulumi.Input[int] is_delay_live: Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        :param pulumi.Input[pulumi.InputType['RecordTemplateMp3ParamArgs']] mp3_param: Mp3 recording parameters are set when Mp3 recording is turned on.
        :param pulumi.Input[pulumi.InputType['RecordTemplateMp4ParamArgs']] mp4_param: Mp4 recording parameters are set when Mp4 recording is enabled.
        :param pulumi.Input[bool] remove_watermark: Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        :param pulumi.Input[str] template_name: Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RecordTemplateState.__new__(_RecordTemplateState)

        __props__.__dict__["aac_param"] = aac_param
        __props__.__dict__["description"] = description
        __props__.__dict__["flv_param"] = flv_param
        __props__.__dict__["flv_special_param"] = flv_special_param
        __props__.__dict__["hls_param"] = hls_param
        __props__.__dict__["hls_special_param"] = hls_special_param
        __props__.__dict__["is_delay_live"] = is_delay_live
        __props__.__dict__["mp3_param"] = mp3_param
        __props__.__dict__["mp4_param"] = mp4_param
        __props__.__dict__["remove_watermark"] = remove_watermark
        __props__.__dict__["template_name"] = template_name
        return RecordTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aacParam")
    def aac_param(self) -> pulumi.Output[Optional['outputs.RecordTemplateAacParam']]:
        """
        Aac recording parameters are set when Aac recording is enabled.
        """
        return pulumi.get(self, "aac_param")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="flvParam")
    def flv_param(self) -> pulumi.Output[Optional['outputs.RecordTemplateFlvParam']]:
        """
        Flv recording parameters are set when Flv recording is enabled.
        """
        return pulumi.get(self, "flv_param")

    @property
    @pulumi.getter(name="flvSpecialParam")
    def flv_special_param(self) -> pulumi.Output[Optional['outputs.RecordTemplateFlvSpecialParam']]:
        """
        FLV records special parameters.
        """
        return pulumi.get(self, "flv_special_param")

    @property
    @pulumi.getter(name="hlsParam")
    def hls_param(self) -> pulumi.Output[Optional['outputs.RecordTemplateHlsParam']]:
        """
        Hls recording parameters, which are set when hls recording is enabled.
        """
        return pulumi.get(self, "hls_param")

    @property
    @pulumi.getter(name="hlsSpecialParam")
    def hls_special_param(self) -> pulumi.Output[Optional['outputs.RecordTemplateHlsSpecialParam']]:
        """
        HLS specific recording parameters.
        """
        return pulumi.get(self, "hls_special_param")

    @property
    @pulumi.getter(name="isDelayLive")
    def is_delay_live(self) -> pulumi.Output[Optional[int]]:
        """
        Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
        """
        return pulumi.get(self, "is_delay_live")

    @property
    @pulumi.getter(name="mp3Param")
    def mp3_param(self) -> pulumi.Output[Optional['outputs.RecordTemplateMp3Param']]:
        """
        Mp3 recording parameters are set when Mp3 recording is turned on.
        """
        return pulumi.get(self, "mp3_param")

    @property
    @pulumi.getter(name="mp4Param")
    def mp4_param(self) -> pulumi.Output[Optional['outputs.RecordTemplateMp4Param']]:
        """
        Mp4 recording parameters are set when Mp4 recording is enabled.
        """
        return pulumi.get(self, "mp4_param")

    @property
    @pulumi.getter(name="removeWatermark")
    def remove_watermark(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
        """
        return pulumi.get(self, "remove_watermark")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "template_name")

