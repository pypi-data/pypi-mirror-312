# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EnableOptimalSwitchingArgs', 'EnableOptimalSwitching']

@pulumi.input_type
class EnableOptimalSwitchingArgs:
    def __init__(__self__, *,
                 stream_name: pulumi.Input[str],
                 enable_switch: Optional[pulumi.Input[int]] = None,
                 host_group_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EnableOptimalSwitching resource.
        :param pulumi.Input[str] stream_name: Stream id.
        :param pulumi.Input[int] enable_switch: `0`:disabled, `1`:enable.
        :param pulumi.Input[str] host_group_name: Group name.
        """
        pulumi.set(__self__, "stream_name", stream_name)
        if enable_switch is not None:
            pulumi.set(__self__, "enable_switch", enable_switch)
        if host_group_name is not None:
            pulumi.set(__self__, "host_group_name", host_group_name)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        """
        Stream id.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="enableSwitch")
    def enable_switch(self) -> Optional[pulumi.Input[int]]:
        """
        `0`:disabled, `1`:enable.
        """
        return pulumi.get(self, "enable_switch")

    @enable_switch.setter
    def enable_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_switch", value)

    @property
    @pulumi.getter(name="hostGroupName")
    def host_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "host_group_name")

    @host_group_name.setter
    def host_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_group_name", value)


@pulumi.input_type
class _EnableOptimalSwitchingState:
    def __init__(__self__, *,
                 enable_switch: Optional[pulumi.Input[int]] = None,
                 host_group_name: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EnableOptimalSwitching resources.
        :param pulumi.Input[int] enable_switch: `0`:disabled, `1`:enable.
        :param pulumi.Input[str] host_group_name: Group name.
        :param pulumi.Input[str] stream_name: Stream id.
        """
        if enable_switch is not None:
            pulumi.set(__self__, "enable_switch", enable_switch)
        if host_group_name is not None:
            pulumi.set(__self__, "host_group_name", host_group_name)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="enableSwitch")
    def enable_switch(self) -> Optional[pulumi.Input[int]]:
        """
        `0`:disabled, `1`:enable.
        """
        return pulumi.get(self, "enable_switch")

    @enable_switch.setter
    def enable_switch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable_switch", value)

    @property
    @pulumi.getter(name="hostGroupName")
    def host_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "host_group_name")

    @host_group_name.setter
    def host_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_group_name", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[pulumi.Input[str]]:
        """
        Stream id.
        """
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_name", value)


class EnableOptimalSwitching(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_switch: Optional[pulumi.Input[int]] = None,
                 host_group_name: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a css enable_optimal_switching

        > **NOTE:** This resource is only valid when the push stream. When the push stream ends, it will be deleted.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        enable_optimal_switching = tencentcloud.css.EnableOptimalSwitching("enableOptimalSwitching",
            enable_switch=1,
            host_group_name="test-group",
            stream_name="1308919341_test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/enableOptimalSwitching:EnableOptimalSwitching enable_optimal_switching streamName
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] enable_switch: `0`:disabled, `1`:enable.
        :param pulumi.Input[str] host_group_name: Group name.
        :param pulumi.Input[str] stream_name: Stream id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnableOptimalSwitchingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css enable_optimal_switching

        > **NOTE:** This resource is only valid when the push stream. When the push stream ends, it will be deleted.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        enable_optimal_switching = tencentcloud.css.EnableOptimalSwitching("enableOptimalSwitching",
            enable_switch=1,
            host_group_name="test-group",
            stream_name="1308919341_test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/enableOptimalSwitching:EnableOptimalSwitching enable_optimal_switching streamName
        ```

        :param str resource_name: The name of the resource.
        :param EnableOptimalSwitchingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnableOptimalSwitchingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_switch: Optional[pulumi.Input[int]] = None,
                 host_group_name: Optional[pulumi.Input[str]] = None,
                 stream_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnableOptimalSwitchingArgs.__new__(EnableOptimalSwitchingArgs)

            __props__.__dict__["enable_switch"] = enable_switch
            __props__.__dict__["host_group_name"] = host_group_name
            if stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'stream_name'")
            __props__.__dict__["stream_name"] = stream_name
        super(EnableOptimalSwitching, __self__).__init__(
            'tencentcloud:Css/enableOptimalSwitching:EnableOptimalSwitching',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_switch: Optional[pulumi.Input[int]] = None,
            host_group_name: Optional[pulumi.Input[str]] = None,
            stream_name: Optional[pulumi.Input[str]] = None) -> 'EnableOptimalSwitching':
        """
        Get an existing EnableOptimalSwitching resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] enable_switch: `0`:disabled, `1`:enable.
        :param pulumi.Input[str] host_group_name: Group name.
        :param pulumi.Input[str] stream_name: Stream id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnableOptimalSwitchingState.__new__(_EnableOptimalSwitchingState)

        __props__.__dict__["enable_switch"] = enable_switch
        __props__.__dict__["host_group_name"] = host_group_name
        __props__.__dict__["stream_name"] = stream_name
        return EnableOptimalSwitching(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableSwitch")
    def enable_switch(self) -> pulumi.Output[Optional[int]]:
        """
        `0`:disabled, `1`:enable.
        """
        return pulumi.get(self, "enable_switch")

    @property
    @pulumi.getter(name="hostGroupName")
    def host_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        Group name.
        """
        return pulumi.get(self, "host_group_name")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Output[str]:
        """
        Stream id.
        """
        return pulumi.get(self, "stream_name")

