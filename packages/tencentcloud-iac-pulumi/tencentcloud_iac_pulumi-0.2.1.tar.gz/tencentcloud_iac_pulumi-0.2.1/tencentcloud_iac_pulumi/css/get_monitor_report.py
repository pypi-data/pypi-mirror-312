# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMonitorReportResult',
    'AwaitableGetMonitorReportResult',
    'get_monitor_report',
    'get_monitor_report_output',
]

@pulumi.output_type
class GetMonitorReportResult:
    """
    A collection of values returned by getMonitorReport.
    """
    def __init__(__self__, diagnose_results=None, id=None, monitor_id=None, mps_results=None, result_output_file=None):
        if diagnose_results and not isinstance(diagnose_results, list):
            raise TypeError("Expected argument 'diagnose_results' to be a list")
        pulumi.set(__self__, "diagnose_results", diagnose_results)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if monitor_id and not isinstance(monitor_id, str):
            raise TypeError("Expected argument 'monitor_id' to be a str")
        pulumi.set(__self__, "monitor_id", monitor_id)
        if mps_results and not isinstance(mps_results, list):
            raise TypeError("Expected argument 'mps_results' to be a list")
        pulumi.set(__self__, "mps_results", mps_results)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="diagnoseResults")
    def diagnose_results(self) -> Sequence['outputs.GetMonitorReportDiagnoseResultResult']:
        """
        The information about the media diagnostic result.Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "diagnose_results")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> str:
        return pulumi.get(self, "monitor_id")

    @property
    @pulumi.getter(name="mpsResults")
    def mps_results(self) -> Sequence['outputs.GetMonitorReportMpsResultResult']:
        """
        The information about the media processing result.Note: This field may return null, indicating that no valid value was found.
        """
        return pulumi.get(self, "mps_results")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetMonitorReportResult(GetMonitorReportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMonitorReportResult(
            diagnose_results=self.diagnose_results,
            id=self.id,
            monitor_id=self.monitor_id,
            mps_results=self.mps_results,
            result_output_file=self.result_output_file)


def get_monitor_report(monitor_id: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMonitorReportResult:
    """
    Use this data source to query detailed information of css monitor_report

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    monitor_report = tencentcloud.Css.get_monitor_report(monitor_id="0e8a12b5-df2a-4a1b-aa98-97d5610aa142")
    ```
    <!--End PulumiCodeChooser -->


    :param str monitor_id: Monitor ID.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['monitorId'] = monitor_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Css/getMonitorReport:getMonitorReport', __args__, opts=opts, typ=GetMonitorReportResult).value

    return AwaitableGetMonitorReportResult(
        diagnose_results=pulumi.get(__ret__, 'diagnose_results'),
        id=pulumi.get(__ret__, 'id'),
        monitor_id=pulumi.get(__ret__, 'monitor_id'),
        mps_results=pulumi.get(__ret__, 'mps_results'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_monitor_report)
def get_monitor_report_output(monitor_id: Optional[pulumi.Input[str]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMonitorReportResult]:
    """
    Use this data source to query detailed information of css monitor_report

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    monitor_report = tencentcloud.Css.get_monitor_report(monitor_id="0e8a12b5-df2a-4a1b-aa98-97d5610aa142")
    ```
    <!--End PulumiCodeChooser -->


    :param str monitor_id: Monitor ID.
    :param str result_output_file: Used to save results.
    """
    ...
