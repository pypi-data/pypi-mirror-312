# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DomainArgs', 'Domain']

@pulumi.input_type
class DomainArgs:
    def __init__(__self__, *,
                 domain_name: pulumi.Input[str],
                 domain_type: pulumi.Input[int],
                 enable: Optional[pulumi.Input[bool]] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 is_mini_program_live: Optional[pulumi.Input[int]] = None,
                 play_type: Optional[pulumi.Input[int]] = None,
                 verify_owner_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Domain resource.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[int] domain_type: Domain type: `0`: push stream. `1`: playback.
        :param pulumi.Input[bool] enable: Switch. true: enable the specified domain, false: disable the specified domain.
        :param pulumi.Input[int] is_delay_live: Whether it is LCB: `0`: LVB. `1`: LCB. Default value is 0.
        :param pulumi.Input[int] is_mini_program_live: `0`: LVB. `1`: LVB on Mini Program. Note: this field may return null, indicating that no valid values can be obtained. Default value is 0.
        :param pulumi.Input[int] play_type: Play Type. This parameter is valid only if `DomainType` is 1. Available values: `1`: in Mainland China. `2`: global. `3`: outside Mainland China. Default value is 1.
        :param pulumi.Input[str] verify_owner_type: Domain name attribution verification type. `dnsCheck`, `fileCheck`, `dbCheck`. The default is `dbCheck`.
        """
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_type", domain_type)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if is_delay_live is not None:
            pulumi.set(__self__, "is_delay_live", is_delay_live)
        if is_mini_program_live is not None:
            pulumi.set(__self__, "is_mini_program_live", is_mini_program_live)
        if play_type is not None:
            pulumi.set(__self__, "play_type", play_type)
        if verify_owner_type is not None:
            pulumi.set(__self__, "verify_owner_type", verify_owner_type)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> pulumi.Input[int]:
        """
        Domain type: `0`: push stream. `1`: playback.
        """
        return pulumi.get(self, "domain_type")

    @domain_type.setter
    def domain_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "domain_type", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch. true: enable the specified domain, false: disable the specified domain.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="isDelayLive")
    def is_delay_live(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is LCB: `0`: LVB. `1`: LCB. Default value is 0.
        """
        return pulumi.get(self, "is_delay_live")

    @is_delay_live.setter
    def is_delay_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_delay_live", value)

    @property
    @pulumi.getter(name="isMiniProgramLive")
    def is_mini_program_live(self) -> Optional[pulumi.Input[int]]:
        """
        `0`: LVB. `1`: LVB on Mini Program. Note: this field may return null, indicating that no valid values can be obtained. Default value is 0.
        """
        return pulumi.get(self, "is_mini_program_live")

    @is_mini_program_live.setter
    def is_mini_program_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_mini_program_live", value)

    @property
    @pulumi.getter(name="playType")
    def play_type(self) -> Optional[pulumi.Input[int]]:
        """
        Play Type. This parameter is valid only if `DomainType` is 1. Available values: `1`: in Mainland China. `2`: global. `3`: outside Mainland China. Default value is 1.
        """
        return pulumi.get(self, "play_type")

    @play_type.setter
    def play_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "play_type", value)

    @property
    @pulumi.getter(name="verifyOwnerType")
    def verify_owner_type(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name attribution verification type. `dnsCheck`, `fileCheck`, `dbCheck`. The default is `dbCheck`.
        """
        return pulumi.get(self, "verify_owner_type")

    @verify_owner_type.setter
    def verify_owner_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_owner_type", value)


@pulumi.input_type
class _DomainState:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 domain_type: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 is_mini_program_live: Optional[pulumi.Input[int]] = None,
                 play_type: Optional[pulumi.Input[int]] = None,
                 verify_owner_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Domain resources.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[int] domain_type: Domain type: `0`: push stream. `1`: playback.
        :param pulumi.Input[bool] enable: Switch. true: enable the specified domain, false: disable the specified domain.
        :param pulumi.Input[int] is_delay_live: Whether it is LCB: `0`: LVB. `1`: LCB. Default value is 0.
        :param pulumi.Input[int] is_mini_program_live: `0`: LVB. `1`: LVB on Mini Program. Note: this field may return null, indicating that no valid values can be obtained. Default value is 0.
        :param pulumi.Input[int] play_type: Play Type. This parameter is valid only if `DomainType` is 1. Available values: `1`: in Mainland China. `2`: global. `3`: outside Mainland China. Default value is 1.
        :param pulumi.Input[str] verify_owner_type: Domain name attribution verification type. `dnsCheck`, `fileCheck`, `dbCheck`. The default is `dbCheck`.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if domain_type is not None:
            pulumi.set(__self__, "domain_type", domain_type)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if is_delay_live is not None:
            pulumi.set(__self__, "is_delay_live", is_delay_live)
        if is_mini_program_live is not None:
            pulumi.set(__self__, "is_mini_program_live", is_mini_program_live)
        if play_type is not None:
            pulumi.set(__self__, "play_type", play_type)
        if verify_owner_type is not None:
            pulumi.set(__self__, "verify_owner_type", verify_owner_type)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> Optional[pulumi.Input[int]]:
        """
        Domain type: `0`: push stream. `1`: playback.
        """
        return pulumi.get(self, "domain_type")

    @domain_type.setter
    def domain_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "domain_type", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Switch. true: enable the specified domain, false: disable the specified domain.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="isDelayLive")
    def is_delay_live(self) -> Optional[pulumi.Input[int]]:
        """
        Whether it is LCB: `0`: LVB. `1`: LCB. Default value is 0.
        """
        return pulumi.get(self, "is_delay_live")

    @is_delay_live.setter
    def is_delay_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_delay_live", value)

    @property
    @pulumi.getter(name="isMiniProgramLive")
    def is_mini_program_live(self) -> Optional[pulumi.Input[int]]:
        """
        `0`: LVB. `1`: LVB on Mini Program. Note: this field may return null, indicating that no valid values can be obtained. Default value is 0.
        """
        return pulumi.get(self, "is_mini_program_live")

    @is_mini_program_live.setter
    def is_mini_program_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "is_mini_program_live", value)

    @property
    @pulumi.getter(name="playType")
    def play_type(self) -> Optional[pulumi.Input[int]]:
        """
        Play Type. This parameter is valid only if `DomainType` is 1. Available values: `1`: in Mainland China. `2`: global. `3`: outside Mainland China. Default value is 1.
        """
        return pulumi.get(self, "play_type")

    @play_type.setter
    def play_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "play_type", value)

    @property
    @pulumi.getter(name="verifyOwnerType")
    def verify_owner_type(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name attribution verification type. `dnsCheck`, `fileCheck`, `dbCheck`. The default is `dbCheck`.
        """
        return pulumi.get(self, "verify_owner_type")

    @verify_owner_type.setter
    def verify_owner_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "verify_owner_type", value)


class Domain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 domain_type: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 is_mini_program_live: Optional[pulumi.Input[int]] = None,
                 play_type: Optional[pulumi.Input[int]] = None,
                 verify_owner_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a css domain

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        domain = tencentcloud.css.Domain("domain",
            domain_name="iac-tf.cloud",
            domain_type=0,
            is_delay_live=0,
            is_mini_program_live=0,
            play_type=1,
            verify_owner_type="dbCheck")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/domain:Domain domain domain_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[int] domain_type: Domain type: `0`: push stream. `1`: playback.
        :param pulumi.Input[bool] enable: Switch. true: enable the specified domain, false: disable the specified domain.
        :param pulumi.Input[int] is_delay_live: Whether it is LCB: `0`: LVB. `1`: LCB. Default value is 0.
        :param pulumi.Input[int] is_mini_program_live: `0`: LVB. `1`: LVB on Mini Program. Note: this field may return null, indicating that no valid values can be obtained. Default value is 0.
        :param pulumi.Input[int] play_type: Play Type. This parameter is valid only if `DomainType` is 1. Available values: `1`: in Mainland China. `2`: global. `3`: outside Mainland China. Default value is 1.
        :param pulumi.Input[str] verify_owner_type: Domain name attribution verification type. `dnsCheck`, `fileCheck`, `dbCheck`. The default is `dbCheck`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css domain

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        domain = tencentcloud.css.Domain("domain",
            domain_name="iac-tf.cloud",
            domain_type=0,
            is_delay_live=0,
            is_mini_program_live=0,
            play_type=1,
            verify_owner_type="dbCheck")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css domain can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/domain:Domain domain domain_name
        ```

        :param str resource_name: The name of the resource.
        :param DomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 domain_type: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[bool]] = None,
                 is_delay_live: Optional[pulumi.Input[int]] = None,
                 is_mini_program_live: Optional[pulumi.Input[int]] = None,
                 play_type: Optional[pulumi.Input[int]] = None,
                 verify_owner_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainArgs.__new__(DomainArgs)

            if domain_name is None and not opts.urn:
                raise TypeError("Missing required property 'domain_name'")
            __props__.__dict__["domain_name"] = domain_name
            if domain_type is None and not opts.urn:
                raise TypeError("Missing required property 'domain_type'")
            __props__.__dict__["domain_type"] = domain_type
            __props__.__dict__["enable"] = enable
            __props__.__dict__["is_delay_live"] = is_delay_live
            __props__.__dict__["is_mini_program_live"] = is_mini_program_live
            __props__.__dict__["play_type"] = play_type
            __props__.__dict__["verify_owner_type"] = verify_owner_type
        super(Domain, __self__).__init__(
            'tencentcloud:Css/domain:Domain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            domain_name: Optional[pulumi.Input[str]] = None,
            domain_type: Optional[pulumi.Input[int]] = None,
            enable: Optional[pulumi.Input[bool]] = None,
            is_delay_live: Optional[pulumi.Input[int]] = None,
            is_mini_program_live: Optional[pulumi.Input[int]] = None,
            play_type: Optional[pulumi.Input[int]] = None,
            verify_owner_type: Optional[pulumi.Input[str]] = None) -> 'Domain':
        """
        Get an existing Domain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] domain_name: Domain Name.
        :param pulumi.Input[int] domain_type: Domain type: `0`: push stream. `1`: playback.
        :param pulumi.Input[bool] enable: Switch. true: enable the specified domain, false: disable the specified domain.
        :param pulumi.Input[int] is_delay_live: Whether it is LCB: `0`: LVB. `1`: LCB. Default value is 0.
        :param pulumi.Input[int] is_mini_program_live: `0`: LVB. `1`: LVB on Mini Program. Note: this field may return null, indicating that no valid values can be obtained. Default value is 0.
        :param pulumi.Input[int] play_type: Play Type. This parameter is valid only if `DomainType` is 1. Available values: `1`: in Mainland China. `2`: global. `3`: outside Mainland China. Default value is 1.
        :param pulumi.Input[str] verify_owner_type: Domain name attribution verification type. `dnsCheck`, `fileCheck`, `dbCheck`. The default is `dbCheck`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DomainState.__new__(_DomainState)

        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["domain_type"] = domain_type
        __props__.__dict__["enable"] = enable
        __props__.__dict__["is_delay_live"] = is_delay_live
        __props__.__dict__["is_mini_program_live"] = is_mini_program_live
        __props__.__dict__["play_type"] = play_type
        __props__.__dict__["verify_owner_type"] = verify_owner_type
        return Domain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[str]:
        """
        Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainType")
    def domain_type(self) -> pulumi.Output[int]:
        """
        Domain type: `0`: push stream. `1`: playback.
        """
        return pulumi.get(self, "domain_type")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Switch. true: enable the specified domain, false: disable the specified domain.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="isDelayLive")
    def is_delay_live(self) -> pulumi.Output[Optional[int]]:
        """
        Whether it is LCB: `0`: LVB. `1`: LCB. Default value is 0.
        """
        return pulumi.get(self, "is_delay_live")

    @property
    @pulumi.getter(name="isMiniProgramLive")
    def is_mini_program_live(self) -> pulumi.Output[Optional[int]]:
        """
        `0`: LVB. `1`: LVB on Mini Program. Note: this field may return null, indicating that no valid values can be obtained. Default value is 0.
        """
        return pulumi.get(self, "is_mini_program_live")

    @property
    @pulumi.getter(name="playType")
    def play_type(self) -> pulumi.Output[Optional[int]]:
        """
        Play Type. This parameter is valid only if `DomainType` is 1. Available values: `1`: in Mainland China. `2`: global. `3`: outside Mainland China. Default value is 1.
        """
        return pulumi.get(self, "play_type")

    @property
    @pulumi.getter(name="verifyOwnerType")
    def verify_owner_type(self) -> pulumi.Output[Optional[str]]:
        """
        Domain name attribution verification type. `dnsCheck`, `fileCheck`, `dbCheck`. The default is `dbCheck`.
        """
        return pulumi.get(self, "verify_owner_type")

