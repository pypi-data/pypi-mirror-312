# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['LiveTranscodeTemplateArgs', 'LiveTranscodeTemplate']

@pulumi.input_type
class LiveTranscodeTemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 video_bitrate: pulumi.Input[int],
                 acodec: Optional[pulumi.Input[str]] = None,
                 adapt_bitrate_percent: Optional[pulumi.Input[float]] = None,
                 ai_trans_code: Optional[pulumi.Input[int]] = None,
                 audio_bitrate: Optional[pulumi.Input[int]] = None,
                 bitrate_to_orig: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drm_tracks: Optional[pulumi.Input[str]] = None,
                 drm_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 fps_to_orig: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 height_to_orig: Optional[pulumi.Input[int]] = None,
                 need_audio: Optional[pulumi.Input[int]] = None,
                 need_video: Optional[pulumi.Input[int]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rotate: Optional[pulumi.Input[int]] = None,
                 short_edge_as_height: Optional[pulumi.Input[int]] = None,
                 vcodec: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a LiveTranscodeTemplate resource.
        :param pulumi.Input[str] template_name: template name, only support 0-9 and a-z.
        :param pulumi.Input[int] video_bitrate: video bitrate, 0 for origin, range 0kbps - 8000kbps.
        :param pulumi.Input[str] acodec: default aac, not support now.
        :param pulumi.Input[float] adapt_bitrate_percent: high speed mode adapt bitrate, support 0 - 0.5.
        :param pulumi.Input[int] ai_trans_code: enable high speed mode, default 0, 1 for enable, 0 for no.
        :param pulumi.Input[int] audio_bitrate: default 0, range 0 - 500.
        :param pulumi.Input[int] bitrate_to_orig: base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[str] description: template desc.
        :param pulumi.Input[str] drm_tracks: DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
        :param pulumi.Input[str] drm_type: DRM type, support fairplay/normalaes/widevine.
        :param pulumi.Input[int] fps: video fps, default 0, range 0 - 60.
        :param pulumi.Input[int] fps_to_orig: base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] gop: gop of the video, second, default origin of the video, range 2 - 6.
        :param pulumi.Input[int] height: template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
        :param pulumi.Input[int] height_to_orig: base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] need_audio: keep audio or not, default 1 for yes, 0 for no.
        :param pulumi.Input[int] need_video: keep video or not, default 1 for yes, 0 for no.
        :param pulumi.Input[str] profile: quality of the video, default baseline, support baseline/main/high.
        :param pulumi.Input[int] rotate: roate degree, default 0, support 0/90/180/270.
        :param pulumi.Input[int] short_edge_as_height: let the short edge as the height.
        :param pulumi.Input[str] vcodec: video codec, default origin, support h264/h265/origin.
        :param pulumi.Input[int] width: template width, default 0, range 0 - 3000, must be pow of 2.
        """
        pulumi.set(__self__, "template_name", template_name)
        pulumi.set(__self__, "video_bitrate", video_bitrate)
        if acodec is not None:
            pulumi.set(__self__, "acodec", acodec)
        if adapt_bitrate_percent is not None:
            pulumi.set(__self__, "adapt_bitrate_percent", adapt_bitrate_percent)
        if ai_trans_code is not None:
            pulumi.set(__self__, "ai_trans_code", ai_trans_code)
        if audio_bitrate is not None:
            pulumi.set(__self__, "audio_bitrate", audio_bitrate)
        if bitrate_to_orig is not None:
            pulumi.set(__self__, "bitrate_to_orig", bitrate_to_orig)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drm_tracks is not None:
            pulumi.set(__self__, "drm_tracks", drm_tracks)
        if drm_type is not None:
            pulumi.set(__self__, "drm_type", drm_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if fps_to_orig is not None:
            pulumi.set(__self__, "fps_to_orig", fps_to_orig)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_to_orig is not None:
            pulumi.set(__self__, "height_to_orig", height_to_orig)
        if need_audio is not None:
            pulumi.set(__self__, "need_audio", need_audio)
        if need_video is not None:
            pulumi.set(__self__, "need_video", need_video)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if short_edge_as_height is not None:
            pulumi.set(__self__, "short_edge_as_height", short_edge_as_height)
        if vcodec is not None:
            pulumi.set(__self__, "vcodec", vcodec)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        template name, only support 0-9 and a-z.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="videoBitrate")
    def video_bitrate(self) -> pulumi.Input[int]:
        """
        video bitrate, 0 for origin, range 0kbps - 8000kbps.
        """
        return pulumi.get(self, "video_bitrate")

    @video_bitrate.setter
    def video_bitrate(self, value: pulumi.Input[int]):
        pulumi.set(self, "video_bitrate", value)

    @property
    @pulumi.getter
    def acodec(self) -> Optional[pulumi.Input[str]]:
        """
        default aac, not support now.
        """
        return pulumi.get(self, "acodec")

    @acodec.setter
    def acodec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acodec", value)

    @property
    @pulumi.getter(name="adaptBitratePercent")
    def adapt_bitrate_percent(self) -> Optional[pulumi.Input[float]]:
        """
        high speed mode adapt bitrate, support 0 - 0.5.
        """
        return pulumi.get(self, "adapt_bitrate_percent")

    @adapt_bitrate_percent.setter
    def adapt_bitrate_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "adapt_bitrate_percent", value)

    @property
    @pulumi.getter(name="aiTransCode")
    def ai_trans_code(self) -> Optional[pulumi.Input[int]]:
        """
        enable high speed mode, default 0, 1 for enable, 0 for no.
        """
        return pulumi.get(self, "ai_trans_code")

    @ai_trans_code.setter
    def ai_trans_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ai_trans_code", value)

    @property
    @pulumi.getter(name="audioBitrate")
    def audio_bitrate(self) -> Optional[pulumi.Input[int]]:
        """
        default 0, range 0 - 500.
        """
        return pulumi.get(self, "audio_bitrate")

    @audio_bitrate.setter
    def audio_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_bitrate", value)

    @property
    @pulumi.getter(name="bitrateToOrig")
    def bitrate_to_orig(self) -> Optional[pulumi.Input[int]]:
        """
        base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "bitrate_to_orig")

    @bitrate_to_orig.setter
    def bitrate_to_orig(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate_to_orig", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        template desc.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="drmTracks")
    def drm_tracks(self) -> Optional[pulumi.Input[str]]:
        """
        DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
        """
        return pulumi.get(self, "drm_tracks")

    @drm_tracks.setter
    def drm_tracks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drm_tracks", value)

    @property
    @pulumi.getter(name="drmType")
    def drm_type(self) -> Optional[pulumi.Input[str]]:
        """
        DRM type, support fairplay/normalaes/widevine.
        """
        return pulumi.get(self, "drm_type")

    @drm_type.setter
    def drm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drm_type", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        """
        video fps, default 0, range 0 - 60.
        """
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fpsToOrig")
    def fps_to_orig(self) -> Optional[pulumi.Input[int]]:
        """
        base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "fps_to_orig")

    @fps_to_orig.setter
    def fps_to_orig(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps_to_orig", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        """
        gop of the video, second, default origin of the video, range 2 - 6.
        """
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightToOrig")
    def height_to_orig(self) -> Optional[pulumi.Input[int]]:
        """
        base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "height_to_orig")

    @height_to_orig.setter
    def height_to_orig(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height_to_orig", value)

    @property
    @pulumi.getter(name="needAudio")
    def need_audio(self) -> Optional[pulumi.Input[int]]:
        """
        keep audio or not, default 1 for yes, 0 for no.
        """
        return pulumi.get(self, "need_audio")

    @need_audio.setter
    def need_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_audio", value)

    @property
    @pulumi.getter(name="needVideo")
    def need_video(self) -> Optional[pulumi.Input[int]]:
        """
        keep video or not, default 1 for yes, 0 for no.
        """
        return pulumi.get(self, "need_video")

    @need_video.setter
    def need_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_video", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        quality of the video, default baseline, support baseline/main/high.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def rotate(self) -> Optional[pulumi.Input[int]]:
        """
        roate degree, default 0, support 0/90/180/270.
        """
        return pulumi.get(self, "rotate")

    @rotate.setter
    def rotate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotate", value)

    @property
    @pulumi.getter(name="shortEdgeAsHeight")
    def short_edge_as_height(self) -> Optional[pulumi.Input[int]]:
        """
        let the short edge as the height.
        """
        return pulumi.get(self, "short_edge_as_height")

    @short_edge_as_height.setter
    def short_edge_as_height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "short_edge_as_height", value)

    @property
    @pulumi.getter
    def vcodec(self) -> Optional[pulumi.Input[str]]:
        """
        video codec, default origin, support h264/h265/origin.
        """
        return pulumi.get(self, "vcodec")

    @vcodec.setter
    def vcodec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcodec", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        template width, default 0, range 0 - 3000, must be pow of 2.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class _LiveTranscodeTemplateState:
    def __init__(__self__, *,
                 acodec: Optional[pulumi.Input[str]] = None,
                 adapt_bitrate_percent: Optional[pulumi.Input[float]] = None,
                 ai_trans_code: Optional[pulumi.Input[int]] = None,
                 audio_bitrate: Optional[pulumi.Input[int]] = None,
                 bitrate_to_orig: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drm_tracks: Optional[pulumi.Input[str]] = None,
                 drm_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 fps_to_orig: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 height_to_orig: Optional[pulumi.Input[int]] = None,
                 need_audio: Optional[pulumi.Input[int]] = None,
                 need_video: Optional[pulumi.Input[int]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rotate: Optional[pulumi.Input[int]] = None,
                 short_edge_as_height: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vcodec: Optional[pulumi.Input[str]] = None,
                 video_bitrate: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering LiveTranscodeTemplate resources.
        :param pulumi.Input[str] acodec: default aac, not support now.
        :param pulumi.Input[float] adapt_bitrate_percent: high speed mode adapt bitrate, support 0 - 0.5.
        :param pulumi.Input[int] ai_trans_code: enable high speed mode, default 0, 1 for enable, 0 for no.
        :param pulumi.Input[int] audio_bitrate: default 0, range 0 - 500.
        :param pulumi.Input[int] bitrate_to_orig: base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[str] description: template desc.
        :param pulumi.Input[str] drm_tracks: DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
        :param pulumi.Input[str] drm_type: DRM type, support fairplay/normalaes/widevine.
        :param pulumi.Input[int] fps: video fps, default 0, range 0 - 60.
        :param pulumi.Input[int] fps_to_orig: base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] gop: gop of the video, second, default origin of the video, range 2 - 6.
        :param pulumi.Input[int] height: template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
        :param pulumi.Input[int] height_to_orig: base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] need_audio: keep audio or not, default 1 for yes, 0 for no.
        :param pulumi.Input[int] need_video: keep video or not, default 1 for yes, 0 for no.
        :param pulumi.Input[str] profile: quality of the video, default baseline, support baseline/main/high.
        :param pulumi.Input[int] rotate: roate degree, default 0, support 0/90/180/270.
        :param pulumi.Input[int] short_edge_as_height: let the short edge as the height.
        :param pulumi.Input[str] template_name: template name, only support 0-9 and a-z.
        :param pulumi.Input[str] vcodec: video codec, default origin, support h264/h265/origin.
        :param pulumi.Input[int] video_bitrate: video bitrate, 0 for origin, range 0kbps - 8000kbps.
        :param pulumi.Input[int] width: template width, default 0, range 0 - 3000, must be pow of 2.
        """
        if acodec is not None:
            pulumi.set(__self__, "acodec", acodec)
        if adapt_bitrate_percent is not None:
            pulumi.set(__self__, "adapt_bitrate_percent", adapt_bitrate_percent)
        if ai_trans_code is not None:
            pulumi.set(__self__, "ai_trans_code", ai_trans_code)
        if audio_bitrate is not None:
            pulumi.set(__self__, "audio_bitrate", audio_bitrate)
        if bitrate_to_orig is not None:
            pulumi.set(__self__, "bitrate_to_orig", bitrate_to_orig)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if drm_tracks is not None:
            pulumi.set(__self__, "drm_tracks", drm_tracks)
        if drm_type is not None:
            pulumi.set(__self__, "drm_type", drm_type)
        if fps is not None:
            pulumi.set(__self__, "fps", fps)
        if fps_to_orig is not None:
            pulumi.set(__self__, "fps_to_orig", fps_to_orig)
        if gop is not None:
            pulumi.set(__self__, "gop", gop)
        if height is not None:
            pulumi.set(__self__, "height", height)
        if height_to_orig is not None:
            pulumi.set(__self__, "height_to_orig", height_to_orig)
        if need_audio is not None:
            pulumi.set(__self__, "need_audio", need_audio)
        if need_video is not None:
            pulumi.set(__self__, "need_video", need_video)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if rotate is not None:
            pulumi.set(__self__, "rotate", rotate)
        if short_edge_as_height is not None:
            pulumi.set(__self__, "short_edge_as_height", short_edge_as_height)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if vcodec is not None:
            pulumi.set(__self__, "vcodec", vcodec)
        if video_bitrate is not None:
            pulumi.set(__self__, "video_bitrate", video_bitrate)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def acodec(self) -> Optional[pulumi.Input[str]]:
        """
        default aac, not support now.
        """
        return pulumi.get(self, "acodec")

    @acodec.setter
    def acodec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acodec", value)

    @property
    @pulumi.getter(name="adaptBitratePercent")
    def adapt_bitrate_percent(self) -> Optional[pulumi.Input[float]]:
        """
        high speed mode adapt bitrate, support 0 - 0.5.
        """
        return pulumi.get(self, "adapt_bitrate_percent")

    @adapt_bitrate_percent.setter
    def adapt_bitrate_percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "adapt_bitrate_percent", value)

    @property
    @pulumi.getter(name="aiTransCode")
    def ai_trans_code(self) -> Optional[pulumi.Input[int]]:
        """
        enable high speed mode, default 0, 1 for enable, 0 for no.
        """
        return pulumi.get(self, "ai_trans_code")

    @ai_trans_code.setter
    def ai_trans_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ai_trans_code", value)

    @property
    @pulumi.getter(name="audioBitrate")
    def audio_bitrate(self) -> Optional[pulumi.Input[int]]:
        """
        default 0, range 0 - 500.
        """
        return pulumi.get(self, "audio_bitrate")

    @audio_bitrate.setter
    def audio_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "audio_bitrate", value)

    @property
    @pulumi.getter(name="bitrateToOrig")
    def bitrate_to_orig(self) -> Optional[pulumi.Input[int]]:
        """
        base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "bitrate_to_orig")

    @bitrate_to_orig.setter
    def bitrate_to_orig(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bitrate_to_orig", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        template desc.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="drmTracks")
    def drm_tracks(self) -> Optional[pulumi.Input[str]]:
        """
        DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
        """
        return pulumi.get(self, "drm_tracks")

    @drm_tracks.setter
    def drm_tracks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drm_tracks", value)

    @property
    @pulumi.getter(name="drmType")
    def drm_type(self) -> Optional[pulumi.Input[str]]:
        """
        DRM type, support fairplay/normalaes/widevine.
        """
        return pulumi.get(self, "drm_type")

    @drm_type.setter
    def drm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "drm_type", value)

    @property
    @pulumi.getter
    def fps(self) -> Optional[pulumi.Input[int]]:
        """
        video fps, default 0, range 0 - 60.
        """
        return pulumi.get(self, "fps")

    @fps.setter
    def fps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps", value)

    @property
    @pulumi.getter(name="fpsToOrig")
    def fps_to_orig(self) -> Optional[pulumi.Input[int]]:
        """
        base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "fps_to_orig")

    @fps_to_orig.setter
    def fps_to_orig(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fps_to_orig", value)

    @property
    @pulumi.getter
    def gop(self) -> Optional[pulumi.Input[int]]:
        """
        gop of the video, second, default origin of the video, range 2 - 6.
        """
        return pulumi.get(self, "gop")

    @gop.setter
    def gop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gop", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[int]]:
        """
        template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="heightToOrig")
    def height_to_orig(self) -> Optional[pulumi.Input[int]]:
        """
        base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "height_to_orig")

    @height_to_orig.setter
    def height_to_orig(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "height_to_orig", value)

    @property
    @pulumi.getter(name="needAudio")
    def need_audio(self) -> Optional[pulumi.Input[int]]:
        """
        keep audio or not, default 1 for yes, 0 for no.
        """
        return pulumi.get(self, "need_audio")

    @need_audio.setter
    def need_audio(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_audio", value)

    @property
    @pulumi.getter(name="needVideo")
    def need_video(self) -> Optional[pulumi.Input[int]]:
        """
        keep video or not, default 1 for yes, 0 for no.
        """
        return pulumi.get(self, "need_video")

    @need_video.setter
    def need_video(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "need_video", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        quality of the video, default baseline, support baseline/main/high.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter
    def rotate(self) -> Optional[pulumi.Input[int]]:
        """
        roate degree, default 0, support 0/90/180/270.
        """
        return pulumi.get(self, "rotate")

    @rotate.setter
    def rotate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rotate", value)

    @property
    @pulumi.getter(name="shortEdgeAsHeight")
    def short_edge_as_height(self) -> Optional[pulumi.Input[int]]:
        """
        let the short edge as the height.
        """
        return pulumi.get(self, "short_edge_as_height")

    @short_edge_as_height.setter
    def short_edge_as_height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "short_edge_as_height", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        template name, only support 0-9 and a-z.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter
    def vcodec(self) -> Optional[pulumi.Input[str]]:
        """
        video codec, default origin, support h264/h265/origin.
        """
        return pulumi.get(self, "vcodec")

    @vcodec.setter
    def vcodec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vcodec", value)

    @property
    @pulumi.getter(name="videoBitrate")
    def video_bitrate(self) -> Optional[pulumi.Input[int]]:
        """
        video bitrate, 0 for origin, range 0kbps - 8000kbps.
        """
        return pulumi.get(self, "video_bitrate")

    @video_bitrate.setter
    def video_bitrate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "video_bitrate", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        template width, default 0, range 0 - 3000, must be pow of 2.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


class LiveTranscodeTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acodec: Optional[pulumi.Input[str]] = None,
                 adapt_bitrate_percent: Optional[pulumi.Input[float]] = None,
                 ai_trans_code: Optional[pulumi.Input[int]] = None,
                 audio_bitrate: Optional[pulumi.Input[int]] = None,
                 bitrate_to_orig: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drm_tracks: Optional[pulumi.Input[str]] = None,
                 drm_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 fps_to_orig: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 height_to_orig: Optional[pulumi.Input[int]] = None,
                 need_audio: Optional[pulumi.Input[int]] = None,
                 need_video: Optional[pulumi.Input[int]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rotate: Optional[pulumi.Input[int]] = None,
                 short_edge_as_height: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vcodec: Optional[pulumi.Input[str]] = None,
                 video_bitrate: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a css live_transcode_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        live_transcode_template = tencentcloud.css.LiveTranscodeTemplate("liveTranscodeTemplate",
            acodec="aac",
            adapt_bitrate_percent=0,
            ai_trans_code=0,
            audio_bitrate=128,
            bitrate_to_orig=0,
            description="This_is_a_tf_test_temp.",
            drm_tracks="SD",
            drm_type="fairplay",
            fps=0,
            fps_to_orig=0,
            gop=2,
            height=0,
            height_to_orig=0,
            need_audio=1,
            need_video=1,
            profile="baseline",
            rotate=0,
            short_edge_as_height=0,
            template_name="template_name",
            vcodec="origin",
            video_bitrate=100,
            width=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css live_transcode_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/liveTranscodeTemplate:LiveTranscodeTemplate live_transcode_template liveTranscodeTemplate_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acodec: default aac, not support now.
        :param pulumi.Input[float] adapt_bitrate_percent: high speed mode adapt bitrate, support 0 - 0.5.
        :param pulumi.Input[int] ai_trans_code: enable high speed mode, default 0, 1 for enable, 0 for no.
        :param pulumi.Input[int] audio_bitrate: default 0, range 0 - 500.
        :param pulumi.Input[int] bitrate_to_orig: base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[str] description: template desc.
        :param pulumi.Input[str] drm_tracks: DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
        :param pulumi.Input[str] drm_type: DRM type, support fairplay/normalaes/widevine.
        :param pulumi.Input[int] fps: video fps, default 0, range 0 - 60.
        :param pulumi.Input[int] fps_to_orig: base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] gop: gop of the video, second, default origin of the video, range 2 - 6.
        :param pulumi.Input[int] height: template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
        :param pulumi.Input[int] height_to_orig: base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] need_audio: keep audio or not, default 1 for yes, 0 for no.
        :param pulumi.Input[int] need_video: keep video or not, default 1 for yes, 0 for no.
        :param pulumi.Input[str] profile: quality of the video, default baseline, support baseline/main/high.
        :param pulumi.Input[int] rotate: roate degree, default 0, support 0/90/180/270.
        :param pulumi.Input[int] short_edge_as_height: let the short edge as the height.
        :param pulumi.Input[str] template_name: template name, only support 0-9 and a-z.
        :param pulumi.Input[str] vcodec: video codec, default origin, support h264/h265/origin.
        :param pulumi.Input[int] video_bitrate: video bitrate, 0 for origin, range 0kbps - 8000kbps.
        :param pulumi.Input[int] width: template width, default 0, range 0 - 3000, must be pow of 2.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LiveTranscodeTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css live_transcode_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        live_transcode_template = tencentcloud.css.LiveTranscodeTemplate("liveTranscodeTemplate",
            acodec="aac",
            adapt_bitrate_percent=0,
            ai_trans_code=0,
            audio_bitrate=128,
            bitrate_to_orig=0,
            description="This_is_a_tf_test_temp.",
            drm_tracks="SD",
            drm_type="fairplay",
            fps=0,
            fps_to_orig=0,
            gop=2,
            height=0,
            height_to_orig=0,
            need_audio=1,
            need_video=1,
            profile="baseline",
            rotate=0,
            short_edge_as_height=0,
            template_name="template_name",
            vcodec="origin",
            video_bitrate=100,
            width=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css live_transcode_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/liveTranscodeTemplate:LiveTranscodeTemplate live_transcode_template liveTranscodeTemplate_id
        ```

        :param str resource_name: The name of the resource.
        :param LiveTranscodeTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LiveTranscodeTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acodec: Optional[pulumi.Input[str]] = None,
                 adapt_bitrate_percent: Optional[pulumi.Input[float]] = None,
                 ai_trans_code: Optional[pulumi.Input[int]] = None,
                 audio_bitrate: Optional[pulumi.Input[int]] = None,
                 bitrate_to_orig: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 drm_tracks: Optional[pulumi.Input[str]] = None,
                 drm_type: Optional[pulumi.Input[str]] = None,
                 fps: Optional[pulumi.Input[int]] = None,
                 fps_to_orig: Optional[pulumi.Input[int]] = None,
                 gop: Optional[pulumi.Input[int]] = None,
                 height: Optional[pulumi.Input[int]] = None,
                 height_to_orig: Optional[pulumi.Input[int]] = None,
                 need_audio: Optional[pulumi.Input[int]] = None,
                 need_video: Optional[pulumi.Input[int]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 rotate: Optional[pulumi.Input[int]] = None,
                 short_edge_as_height: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 vcodec: Optional[pulumi.Input[str]] = None,
                 video_bitrate: Optional[pulumi.Input[int]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LiveTranscodeTemplateArgs.__new__(LiveTranscodeTemplateArgs)

            __props__.__dict__["acodec"] = acodec
            __props__.__dict__["adapt_bitrate_percent"] = adapt_bitrate_percent
            __props__.__dict__["ai_trans_code"] = ai_trans_code
            __props__.__dict__["audio_bitrate"] = audio_bitrate
            __props__.__dict__["bitrate_to_orig"] = bitrate_to_orig
            __props__.__dict__["description"] = description
            __props__.__dict__["drm_tracks"] = drm_tracks
            __props__.__dict__["drm_type"] = drm_type
            __props__.__dict__["fps"] = fps
            __props__.__dict__["fps_to_orig"] = fps_to_orig
            __props__.__dict__["gop"] = gop
            __props__.__dict__["height"] = height
            __props__.__dict__["height_to_orig"] = height_to_orig
            __props__.__dict__["need_audio"] = need_audio
            __props__.__dict__["need_video"] = need_video
            __props__.__dict__["profile"] = profile
            __props__.__dict__["rotate"] = rotate
            __props__.__dict__["short_edge_as_height"] = short_edge_as_height
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            __props__.__dict__["vcodec"] = vcodec
            if video_bitrate is None and not opts.urn:
                raise TypeError("Missing required property 'video_bitrate'")
            __props__.__dict__["video_bitrate"] = video_bitrate
            __props__.__dict__["width"] = width
        super(LiveTranscodeTemplate, __self__).__init__(
            'tencentcloud:Css/liveTranscodeTemplate:LiveTranscodeTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acodec: Optional[pulumi.Input[str]] = None,
            adapt_bitrate_percent: Optional[pulumi.Input[float]] = None,
            ai_trans_code: Optional[pulumi.Input[int]] = None,
            audio_bitrate: Optional[pulumi.Input[int]] = None,
            bitrate_to_orig: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            drm_tracks: Optional[pulumi.Input[str]] = None,
            drm_type: Optional[pulumi.Input[str]] = None,
            fps: Optional[pulumi.Input[int]] = None,
            fps_to_orig: Optional[pulumi.Input[int]] = None,
            gop: Optional[pulumi.Input[int]] = None,
            height: Optional[pulumi.Input[int]] = None,
            height_to_orig: Optional[pulumi.Input[int]] = None,
            need_audio: Optional[pulumi.Input[int]] = None,
            need_video: Optional[pulumi.Input[int]] = None,
            profile: Optional[pulumi.Input[str]] = None,
            rotate: Optional[pulumi.Input[int]] = None,
            short_edge_as_height: Optional[pulumi.Input[int]] = None,
            template_name: Optional[pulumi.Input[str]] = None,
            vcodec: Optional[pulumi.Input[str]] = None,
            video_bitrate: Optional[pulumi.Input[int]] = None,
            width: Optional[pulumi.Input[int]] = None) -> 'LiveTranscodeTemplate':
        """
        Get an existing LiveTranscodeTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] acodec: default aac, not support now.
        :param pulumi.Input[float] adapt_bitrate_percent: high speed mode adapt bitrate, support 0 - 0.5.
        :param pulumi.Input[int] ai_trans_code: enable high speed mode, default 0, 1 for enable, 0 for no.
        :param pulumi.Input[int] audio_bitrate: default 0, range 0 - 500.
        :param pulumi.Input[int] bitrate_to_orig: base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[str] description: template desc.
        :param pulumi.Input[str] drm_tracks: DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
        :param pulumi.Input[str] drm_type: DRM type, support fairplay/normalaes/widevine.
        :param pulumi.Input[int] fps: video fps, default 0, range 0 - 60.
        :param pulumi.Input[int] fps_to_orig: base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] gop: gop of the video, second, default origin of the video, range 2 - 6.
        :param pulumi.Input[int] height: template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
        :param pulumi.Input[int] height_to_orig: base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
        :param pulumi.Input[int] need_audio: keep audio or not, default 1 for yes, 0 for no.
        :param pulumi.Input[int] need_video: keep video or not, default 1 for yes, 0 for no.
        :param pulumi.Input[str] profile: quality of the video, default baseline, support baseline/main/high.
        :param pulumi.Input[int] rotate: roate degree, default 0, support 0/90/180/270.
        :param pulumi.Input[int] short_edge_as_height: let the short edge as the height.
        :param pulumi.Input[str] template_name: template name, only support 0-9 and a-z.
        :param pulumi.Input[str] vcodec: video codec, default origin, support h264/h265/origin.
        :param pulumi.Input[int] video_bitrate: video bitrate, 0 for origin, range 0kbps - 8000kbps.
        :param pulumi.Input[int] width: template width, default 0, range 0 - 3000, must be pow of 2.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LiveTranscodeTemplateState.__new__(_LiveTranscodeTemplateState)

        __props__.__dict__["acodec"] = acodec
        __props__.__dict__["adapt_bitrate_percent"] = adapt_bitrate_percent
        __props__.__dict__["ai_trans_code"] = ai_trans_code
        __props__.__dict__["audio_bitrate"] = audio_bitrate
        __props__.__dict__["bitrate_to_orig"] = bitrate_to_orig
        __props__.__dict__["description"] = description
        __props__.__dict__["drm_tracks"] = drm_tracks
        __props__.__dict__["drm_type"] = drm_type
        __props__.__dict__["fps"] = fps
        __props__.__dict__["fps_to_orig"] = fps_to_orig
        __props__.__dict__["gop"] = gop
        __props__.__dict__["height"] = height
        __props__.__dict__["height_to_orig"] = height_to_orig
        __props__.__dict__["need_audio"] = need_audio
        __props__.__dict__["need_video"] = need_video
        __props__.__dict__["profile"] = profile
        __props__.__dict__["rotate"] = rotate
        __props__.__dict__["short_edge_as_height"] = short_edge_as_height
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["vcodec"] = vcodec
        __props__.__dict__["video_bitrate"] = video_bitrate
        __props__.__dict__["width"] = width
        return LiveTranscodeTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acodec(self) -> pulumi.Output[Optional[str]]:
        """
        default aac, not support now.
        """
        return pulumi.get(self, "acodec")

    @property
    @pulumi.getter(name="adaptBitratePercent")
    def adapt_bitrate_percent(self) -> pulumi.Output[Optional[float]]:
        """
        high speed mode adapt bitrate, support 0 - 0.5.
        """
        return pulumi.get(self, "adapt_bitrate_percent")

    @property
    @pulumi.getter(name="aiTransCode")
    def ai_trans_code(self) -> pulumi.Output[Optional[int]]:
        """
        enable high speed mode, default 0, 1 for enable, 0 for no.
        """
        return pulumi.get(self, "ai_trans_code")

    @property
    @pulumi.getter(name="audioBitrate")
    def audio_bitrate(self) -> pulumi.Output[Optional[int]]:
        """
        default 0, range 0 - 500.
        """
        return pulumi.get(self, "audio_bitrate")

    @property
    @pulumi.getter(name="bitrateToOrig")
    def bitrate_to_orig(self) -> pulumi.Output[Optional[int]]:
        """
        base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "bitrate_to_orig")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        template desc.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="drmTracks")
    def drm_tracks(self) -> pulumi.Output[Optional[str]]:
        """
        DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
        """
        return pulumi.get(self, "drm_tracks")

    @property
    @pulumi.getter(name="drmType")
    def drm_type(self) -> pulumi.Output[Optional[str]]:
        """
        DRM type, support fairplay/normalaes/widevine.
        """
        return pulumi.get(self, "drm_type")

    @property
    @pulumi.getter
    def fps(self) -> pulumi.Output[Optional[int]]:
        """
        video fps, default 0, range 0 - 60.
        """
        return pulumi.get(self, "fps")

    @property
    @pulumi.getter(name="fpsToOrig")
    def fps_to_orig(self) -> pulumi.Output[Optional[int]]:
        """
        base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "fps_to_orig")

    @property
    @pulumi.getter
    def gop(self) -> pulumi.Output[Optional[int]]:
        """
        gop of the video, second, default origin of the video, range 2 - 6.
        """
        return pulumi.get(self, "gop")

    @property
    @pulumi.getter
    def height(self) -> pulumi.Output[Optional[int]]:
        """
        template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
        """
        return pulumi.get(self, "height")

    @property
    @pulumi.getter(name="heightToOrig")
    def height_to_orig(self) -> pulumi.Output[Optional[int]]:
        """
        base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
        """
        return pulumi.get(self, "height_to_orig")

    @property
    @pulumi.getter(name="needAudio")
    def need_audio(self) -> pulumi.Output[Optional[int]]:
        """
        keep audio or not, default 1 for yes, 0 for no.
        """
        return pulumi.get(self, "need_audio")

    @property
    @pulumi.getter(name="needVideo")
    def need_video(self) -> pulumi.Output[Optional[int]]:
        """
        keep video or not, default 1 for yes, 0 for no.
        """
        return pulumi.get(self, "need_video")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[Optional[str]]:
        """
        quality of the video, default baseline, support baseline/main/high.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter
    def rotate(self) -> pulumi.Output[Optional[int]]:
        """
        roate degree, default 0, support 0/90/180/270.
        """
        return pulumi.get(self, "rotate")

    @property
    @pulumi.getter(name="shortEdgeAsHeight")
    def short_edge_as_height(self) -> pulumi.Output[Optional[int]]:
        """
        let the short edge as the height.
        """
        return pulumi.get(self, "short_edge_as_height")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        template name, only support 0-9 and a-z.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter
    def vcodec(self) -> pulumi.Output[Optional[str]]:
        """
        video codec, default origin, support h264/h265/origin.
        """
        return pulumi.get(self, "vcodec")

    @property
    @pulumi.getter(name="videoBitrate")
    def video_bitrate(self) -> pulumi.Output[int]:
        """
        video bitrate, 0 for origin, range 0kbps - 8000kbps.
        """
        return pulumi.get(self, "video_bitrate")

    @property
    @pulumi.getter
    def width(self) -> pulumi.Output[Optional[int]]:
        """
        template width, default 0, range 0 - 3000, must be pow of 2.
        """
        return pulumi.get(self, "width")

