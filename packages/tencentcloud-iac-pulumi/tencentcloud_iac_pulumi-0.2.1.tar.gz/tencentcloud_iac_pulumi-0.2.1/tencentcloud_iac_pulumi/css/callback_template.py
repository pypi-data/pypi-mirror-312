# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CallbackTemplateArgs', 'CallbackTemplate']

@pulumi.input_type
class CallbackTemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 callback_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 porn_censorship_notify_url: Optional[pulumi.Input[str]] = None,
                 push_exception_notify_url: Optional[pulumi.Input[str]] = None,
                 record_notify_url: Optional[pulumi.Input[str]] = None,
                 snapshot_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_begin_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_end_notify_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CallbackTemplate resource.
        :param pulumi.Input[str] template_name: Template name.Maximum length: 255 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        :param pulumi.Input[str] callback_key: Callback Key, public callback URL.
        :param pulumi.Input[str] description: Description information.Maximum length: 1024 bytes.Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        :param pulumi.Input[str] porn_censorship_notify_url: PornCensorship callback URL.
        :param pulumi.Input[str] push_exception_notify_url: Streaming Exception Callback URL.
        :param pulumi.Input[str] record_notify_url: Recording callback URL.
        :param pulumi.Input[str] snapshot_notify_url: Snapshot callback URL.
        :param pulumi.Input[str] stream_begin_notify_url: Launch callback URL.
        :param pulumi.Input[str] stream_end_notify_url: Cutoff callback URL.
        """
        pulumi.set(__self__, "template_name", template_name)
        if callback_key is not None:
            pulumi.set(__self__, "callback_key", callback_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if porn_censorship_notify_url is not None:
            pulumi.set(__self__, "porn_censorship_notify_url", porn_censorship_notify_url)
        if push_exception_notify_url is not None:
            pulumi.set(__self__, "push_exception_notify_url", push_exception_notify_url)
        if record_notify_url is not None:
            pulumi.set(__self__, "record_notify_url", record_notify_url)
        if snapshot_notify_url is not None:
            pulumi.set(__self__, "snapshot_notify_url", snapshot_notify_url)
        if stream_begin_notify_url is not None:
            pulumi.set(__self__, "stream_begin_notify_url", stream_begin_notify_url)
        if stream_end_notify_url is not None:
            pulumi.set(__self__, "stream_end_notify_url", stream_end_notify_url)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Template name.Maximum length: 255 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="callbackKey")
    def callback_key(self) -> Optional[pulumi.Input[str]]:
        """
        Callback Key, public callback URL.
        """
        return pulumi.get(self, "callback_key")

    @callback_key.setter
    def callback_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description information.Maximum length: 1024 bytes.Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="pornCensorshipNotifyUrl")
    def porn_censorship_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        PornCensorship callback URL.
        """
        return pulumi.get(self, "porn_censorship_notify_url")

    @porn_censorship_notify_url.setter
    def porn_censorship_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "porn_censorship_notify_url", value)

    @property
    @pulumi.getter(name="pushExceptionNotifyUrl")
    def push_exception_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Streaming Exception Callback URL.
        """
        return pulumi.get(self, "push_exception_notify_url")

    @push_exception_notify_url.setter
    def push_exception_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "push_exception_notify_url", value)

    @property
    @pulumi.getter(name="recordNotifyUrl")
    def record_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Recording callback URL.
        """
        return pulumi.get(self, "record_notify_url")

    @record_notify_url.setter
    def record_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_notify_url", value)

    @property
    @pulumi.getter(name="snapshotNotifyUrl")
    def snapshot_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot callback URL.
        """
        return pulumi.get(self, "snapshot_notify_url")

    @snapshot_notify_url.setter
    def snapshot_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_notify_url", value)

    @property
    @pulumi.getter(name="streamBeginNotifyUrl")
    def stream_begin_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Launch callback URL.
        """
        return pulumi.get(self, "stream_begin_notify_url")

    @stream_begin_notify_url.setter
    def stream_begin_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_begin_notify_url", value)

    @property
    @pulumi.getter(name="streamEndNotifyUrl")
    def stream_end_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Cutoff callback URL.
        """
        return pulumi.get(self, "stream_end_notify_url")

    @stream_end_notify_url.setter
    def stream_end_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_end_notify_url", value)


@pulumi.input_type
class _CallbackTemplateState:
    def __init__(__self__, *,
                 callback_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 porn_censorship_notify_url: Optional[pulumi.Input[str]] = None,
                 push_exception_notify_url: Optional[pulumi.Input[str]] = None,
                 record_notify_url: Optional[pulumi.Input[str]] = None,
                 snapshot_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_begin_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_end_notify_url: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CallbackTemplate resources.
        :param pulumi.Input[str] callback_key: Callback Key, public callback URL.
        :param pulumi.Input[str] description: Description information.Maximum length: 1024 bytes.Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        :param pulumi.Input[str] porn_censorship_notify_url: PornCensorship callback URL.
        :param pulumi.Input[str] push_exception_notify_url: Streaming Exception Callback URL.
        :param pulumi.Input[str] record_notify_url: Recording callback URL.
        :param pulumi.Input[str] snapshot_notify_url: Snapshot callback URL.
        :param pulumi.Input[str] stream_begin_notify_url: Launch callback URL.
        :param pulumi.Input[str] stream_end_notify_url: Cutoff callback URL.
        :param pulumi.Input[str] template_name: Template name.Maximum length: 255 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        if callback_key is not None:
            pulumi.set(__self__, "callback_key", callback_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if porn_censorship_notify_url is not None:
            pulumi.set(__self__, "porn_censorship_notify_url", porn_censorship_notify_url)
        if push_exception_notify_url is not None:
            pulumi.set(__self__, "push_exception_notify_url", push_exception_notify_url)
        if record_notify_url is not None:
            pulumi.set(__self__, "record_notify_url", record_notify_url)
        if snapshot_notify_url is not None:
            pulumi.set(__self__, "snapshot_notify_url", snapshot_notify_url)
        if stream_begin_notify_url is not None:
            pulumi.set(__self__, "stream_begin_notify_url", stream_begin_notify_url)
        if stream_end_notify_url is not None:
            pulumi.set(__self__, "stream_end_notify_url", stream_end_notify_url)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="callbackKey")
    def callback_key(self) -> Optional[pulumi.Input[str]]:
        """
        Callback Key, public callback URL.
        """
        return pulumi.get(self, "callback_key")

    @callback_key.setter
    def callback_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description information.Maximum length: 1024 bytes.Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="pornCensorshipNotifyUrl")
    def porn_censorship_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        PornCensorship callback URL.
        """
        return pulumi.get(self, "porn_censorship_notify_url")

    @porn_censorship_notify_url.setter
    def porn_censorship_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "porn_censorship_notify_url", value)

    @property
    @pulumi.getter(name="pushExceptionNotifyUrl")
    def push_exception_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Streaming Exception Callback URL.
        """
        return pulumi.get(self, "push_exception_notify_url")

    @push_exception_notify_url.setter
    def push_exception_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "push_exception_notify_url", value)

    @property
    @pulumi.getter(name="recordNotifyUrl")
    def record_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Recording callback URL.
        """
        return pulumi.get(self, "record_notify_url")

    @record_notify_url.setter
    def record_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_notify_url", value)

    @property
    @pulumi.getter(name="snapshotNotifyUrl")
    def snapshot_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Snapshot callback URL.
        """
        return pulumi.get(self, "snapshot_notify_url")

    @snapshot_notify_url.setter
    def snapshot_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_notify_url", value)

    @property
    @pulumi.getter(name="streamBeginNotifyUrl")
    def stream_begin_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Launch callback URL.
        """
        return pulumi.get(self, "stream_begin_notify_url")

    @stream_begin_notify_url.setter
    def stream_begin_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_begin_notify_url", value)

    @property
    @pulumi.getter(name="streamEndNotifyUrl")
    def stream_end_notify_url(self) -> Optional[pulumi.Input[str]]:
        """
        Cutoff callback URL.
        """
        return pulumi.get(self, "stream_end_notify_url")

    @stream_end_notify_url.setter
    def stream_end_notify_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_end_notify_url", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name.Maximum length: 255 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class CallbackTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 callback_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 porn_censorship_notify_url: Optional[pulumi.Input[str]] = None,
                 push_exception_notify_url: Optional[pulumi.Input[str]] = None,
                 record_notify_url: Optional[pulumi.Input[str]] = None,
                 snapshot_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_begin_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_end_notify_url: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a css callback_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        callback_template = tencentcloud.css.CallbackTemplate("callbackTemplate",
            callback_key="adasda131312",
            description="this is demo",
            porn_censorship_notify_url="http://www.yourdomain.com/api/notify?action=porn",
            push_exception_notify_url="http://www.yourdomain.com/api/notify?action=pushException",
            record_notify_url="http://www.yourdomain.com/api/notify?action=record",
            snapshot_notify_url="http://www.yourdomain.com/api/notify?action=snapshot",
            stream_begin_notify_url="http://www.yourdomain.com/api/notify?action=streamBegin",
            stream_end_notify_url="http://www.yourdomain.com/api/notify?action=streamEnd",
            template_name="tf-test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css callback_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/callbackTemplate:CallbackTemplate callback_template templateId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] callback_key: Callback Key, public callback URL.
        :param pulumi.Input[str] description: Description information.Maximum length: 1024 bytes.Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        :param pulumi.Input[str] porn_censorship_notify_url: PornCensorship callback URL.
        :param pulumi.Input[str] push_exception_notify_url: Streaming Exception Callback URL.
        :param pulumi.Input[str] record_notify_url: Recording callback URL.
        :param pulumi.Input[str] snapshot_notify_url: Snapshot callback URL.
        :param pulumi.Input[str] stream_begin_notify_url: Launch callback URL.
        :param pulumi.Input[str] stream_end_notify_url: Cutoff callback URL.
        :param pulumi.Input[str] template_name: Template name.Maximum length: 255 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CallbackTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css callback_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        callback_template = tencentcloud.css.CallbackTemplate("callbackTemplate",
            callback_key="adasda131312",
            description="this is demo",
            porn_censorship_notify_url="http://www.yourdomain.com/api/notify?action=porn",
            push_exception_notify_url="http://www.yourdomain.com/api/notify?action=pushException",
            record_notify_url="http://www.yourdomain.com/api/notify?action=record",
            snapshot_notify_url="http://www.yourdomain.com/api/notify?action=snapshot",
            stream_begin_notify_url="http://www.yourdomain.com/api/notify?action=streamBegin",
            stream_end_notify_url="http://www.yourdomain.com/api/notify?action=streamEnd",
            template_name="tf-test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css callback_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/callbackTemplate:CallbackTemplate callback_template templateId
        ```

        :param str resource_name: The name of the resource.
        :param CallbackTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CallbackTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 callback_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 porn_censorship_notify_url: Optional[pulumi.Input[str]] = None,
                 push_exception_notify_url: Optional[pulumi.Input[str]] = None,
                 record_notify_url: Optional[pulumi.Input[str]] = None,
                 snapshot_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_begin_notify_url: Optional[pulumi.Input[str]] = None,
                 stream_end_notify_url: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CallbackTemplateArgs.__new__(CallbackTemplateArgs)

            __props__.__dict__["callback_key"] = callback_key
            __props__.__dict__["description"] = description
            __props__.__dict__["porn_censorship_notify_url"] = porn_censorship_notify_url
            __props__.__dict__["push_exception_notify_url"] = push_exception_notify_url
            __props__.__dict__["record_notify_url"] = record_notify_url
            __props__.__dict__["snapshot_notify_url"] = snapshot_notify_url
            __props__.__dict__["stream_begin_notify_url"] = stream_begin_notify_url
            __props__.__dict__["stream_end_notify_url"] = stream_end_notify_url
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
        super(CallbackTemplate, __self__).__init__(
            'tencentcloud:Css/callbackTemplate:CallbackTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            callback_key: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            porn_censorship_notify_url: Optional[pulumi.Input[str]] = None,
            push_exception_notify_url: Optional[pulumi.Input[str]] = None,
            record_notify_url: Optional[pulumi.Input[str]] = None,
            snapshot_notify_url: Optional[pulumi.Input[str]] = None,
            stream_begin_notify_url: Optional[pulumi.Input[str]] = None,
            stream_end_notify_url: Optional[pulumi.Input[str]] = None,
            template_name: Optional[pulumi.Input[str]] = None) -> 'CallbackTemplate':
        """
        Get an existing CallbackTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] callback_key: Callback Key, public callback URL.
        :param pulumi.Input[str] description: Description information.Maximum length: 1024 bytes.Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        :param pulumi.Input[str] porn_censorship_notify_url: PornCensorship callback URL.
        :param pulumi.Input[str] push_exception_notify_url: Streaming Exception Callback URL.
        :param pulumi.Input[str] record_notify_url: Recording callback URL.
        :param pulumi.Input[str] snapshot_notify_url: Snapshot callback URL.
        :param pulumi.Input[str] stream_begin_notify_url: Launch callback URL.
        :param pulumi.Input[str] stream_end_notify_url: Cutoff callback URL.
        :param pulumi.Input[str] template_name: Template name.Maximum length: 255 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CallbackTemplateState.__new__(_CallbackTemplateState)

        __props__.__dict__["callback_key"] = callback_key
        __props__.__dict__["description"] = description
        __props__.__dict__["porn_censorship_notify_url"] = porn_censorship_notify_url
        __props__.__dict__["push_exception_notify_url"] = push_exception_notify_url
        __props__.__dict__["record_notify_url"] = record_notify_url
        __props__.__dict__["snapshot_notify_url"] = snapshot_notify_url
        __props__.__dict__["stream_begin_notify_url"] = stream_begin_notify_url
        __props__.__dict__["stream_end_notify_url"] = stream_end_notify_url
        __props__.__dict__["template_name"] = template_name
        return CallbackTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="callbackKey")
    def callback_key(self) -> pulumi.Output[Optional[str]]:
        """
        Callback Key, public callback URL.
        """
        return pulumi.get(self, "callback_key")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description information.Maximum length: 1024 bytes.Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="pornCensorshipNotifyUrl")
    def porn_censorship_notify_url(self) -> pulumi.Output[Optional[str]]:
        """
        PornCensorship callback URL.
        """
        return pulumi.get(self, "porn_censorship_notify_url")

    @property
    @pulumi.getter(name="pushExceptionNotifyUrl")
    def push_exception_notify_url(self) -> pulumi.Output[Optional[str]]:
        """
        Streaming Exception Callback URL.
        """
        return pulumi.get(self, "push_exception_notify_url")

    @property
    @pulumi.getter(name="recordNotifyUrl")
    def record_notify_url(self) -> pulumi.Output[Optional[str]]:
        """
        Recording callback URL.
        """
        return pulumi.get(self, "record_notify_url")

    @property
    @pulumi.getter(name="snapshotNotifyUrl")
    def snapshot_notify_url(self) -> pulumi.Output[Optional[str]]:
        """
        Snapshot callback URL.
        """
        return pulumi.get(self, "snapshot_notify_url")

    @property
    @pulumi.getter(name="streamBeginNotifyUrl")
    def stream_begin_notify_url(self) -> pulumi.Output[Optional[str]]:
        """
        Launch callback URL.
        """
        return pulumi.get(self, "stream_begin_notify_url")

    @property
    @pulumi.getter(name="streamEndNotifyUrl")
    def stream_end_notify_url(self) -> pulumi.Output[Optional[str]]:
        """
        Cutoff callback URL.
        """
        return pulumi.get(self, "stream_end_notify_url")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Template name.Maximum length: 255 bytes. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
        """
        return pulumi.get(self, "template_name")

