# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['PadTemplateArgs', 'PadTemplate']

@pulumi.input_type
class PadTemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 url: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 max_duration: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 wait_duration: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a PadTemplate resource.
        :param pulumi.Input[str] template_name: Template namelimit 255 bytes.
        :param pulumi.Input[str] url: Pad content.
        :param pulumi.Input[str] description: Description content.limit length 1024 bytes.
        :param pulumi.Input[int] max_duration: Max pad duration.limit: 0 - 9999999 ms.
        :param pulumi.Input[int] type: Pad content type.1: picture.2: video.default: 1.
        :param pulumi.Input[int] wait_duration: Stop stream wait time.limit: 0 - 30000 ms.
        """
        pulumi.set(__self__, "template_name", template_name)
        pulumi.set(__self__, "url", url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Template namelimit 255 bytes.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        Pad content.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description content.limit length 1024 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Max pad duration.limit: 0 - 9999999 ms.
        """
        return pulumi.get(self, "max_duration")

    @max_duration.setter
    def max_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_duration", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        Pad content type.1: picture.2: video.default: 1.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Stop stream wait time.limit: 0 - 30000 ms.
        """
        return pulumi.get(self, "wait_duration")

    @wait_duration.setter
    def wait_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_duration", value)


@pulumi.input_type
class _PadTemplateState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 max_duration: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 wait_duration: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering PadTemplate resources.
        :param pulumi.Input[str] description: Description content.limit length 1024 bytes.
        :param pulumi.Input[int] max_duration: Max pad duration.limit: 0 - 9999999 ms.
        :param pulumi.Input[str] template_name: Template namelimit 255 bytes.
        :param pulumi.Input[int] type: Pad content type.1: picture.2: video.default: 1.
        :param pulumi.Input[str] url: Pad content.
        :param pulumi.Input[int] wait_duration: Stop stream wait time.limit: 0 - 30000 ms.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max_duration is not None:
            pulumi.set(__self__, "max_duration", max_duration)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if wait_duration is not None:
            pulumi.set(__self__, "wait_duration", wait_duration)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description content.limit length 1024 bytes.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Max pad duration.limit: 0 - 9999999 ms.
        """
        return pulumi.get(self, "max_duration")

    @max_duration.setter
    def max_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_duration", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template namelimit 255 bytes.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        Pad content type.1: picture.2: video.default: 1.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        Pad content.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Stop stream wait time.limit: 0 - 30000 ms.
        """
        return pulumi.get(self, "wait_duration")

    @wait_duration.setter
    def wait_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_duration", value)


class PadTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 max_duration: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 wait_duration: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a css pad_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        pad_template = tencentcloud.css.PadTemplate("padTemplate",
            description="pad template",
            max_duration=120000,
            template_name="tf-pad",
            type=1,
            url="https://livewatermark-1251132611.cos.ap-guangzhou.myqcloud.com/1308919341/watermark_img_1698736540399_1441698123618_.pic.jpg",
            wait_duration=2000)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css pad_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/padTemplate:PadTemplate pad_template templateId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description content.limit length 1024 bytes.
        :param pulumi.Input[int] max_duration: Max pad duration.limit: 0 - 9999999 ms.
        :param pulumi.Input[str] template_name: Template namelimit 255 bytes.
        :param pulumi.Input[int] type: Pad content type.1: picture.2: video.default: 1.
        :param pulumi.Input[str] url: Pad content.
        :param pulumi.Input[int] wait_duration: Stop stream wait time.limit: 0 - 30000 ms.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PadTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a css pad_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        pad_template = tencentcloud.css.PadTemplate("padTemplate",
            description="pad template",
            max_duration=120000,
            template_name="tf-pad",
            type=1,
            url="https://livewatermark-1251132611.cos.ap-guangzhou.myqcloud.com/1308919341/watermark_img_1698736540399_1441698123618_.pic.jpg",
            wait_duration=2000)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        css pad_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Css/padTemplate:PadTemplate pad_template templateId
        ```

        :param str resource_name: The name of the resource.
        :param PadTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PadTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 max_duration: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 wait_duration: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PadTemplateArgs.__new__(PadTemplateArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["max_duration"] = max_duration
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            __props__.__dict__["type"] = type
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["wait_duration"] = wait_duration
        super(PadTemplate, __self__).__init__(
            'tencentcloud:Css/padTemplate:PadTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            max_duration: Optional[pulumi.Input[int]] = None,
            template_name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[int]] = None,
            url: Optional[pulumi.Input[str]] = None,
            wait_duration: Optional[pulumi.Input[int]] = None) -> 'PadTemplate':
        """
        Get an existing PadTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description content.limit length 1024 bytes.
        :param pulumi.Input[int] max_duration: Max pad duration.limit: 0 - 9999999 ms.
        :param pulumi.Input[str] template_name: Template namelimit 255 bytes.
        :param pulumi.Input[int] type: Pad content type.1: picture.2: video.default: 1.
        :param pulumi.Input[str] url: Pad content.
        :param pulumi.Input[int] wait_duration: Stop stream wait time.limit: 0 - 30000 ms.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PadTemplateState.__new__(_PadTemplateState)

        __props__.__dict__["description"] = description
        __props__.__dict__["max_duration"] = max_duration
        __props__.__dict__["template_name"] = template_name
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        __props__.__dict__["wait_duration"] = wait_duration
        return PadTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description content.limit length 1024 bytes.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> pulumi.Output[Optional[int]]:
        """
        Max pad duration.limit: 0 - 9999999 ms.
        """
        return pulumi.get(self, "max_duration")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Template namelimit 255 bytes.
        """
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[int]]:
        """
        Pad content type.1: picture.2: video.default: 1.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        Pad content.
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="waitDuration")
    def wait_duration(self) -> pulumi.Output[Optional[int]]:
        """
        Stop stream wait time.limit: 0 - 30000 ms.
        """
        return pulumi.get(self, "wait_duration")

