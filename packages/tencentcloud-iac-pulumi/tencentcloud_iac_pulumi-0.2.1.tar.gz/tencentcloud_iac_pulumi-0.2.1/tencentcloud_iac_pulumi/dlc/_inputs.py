# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AddUsersToWorkGroupAttachmentAddInfoArgs',
    'AttachUserPolicyOperationPolicySetArgs',
    'AttachWorkGroupPolicyOperationPolicySetArgs',
    'BindWorkGroupsToUserAttachmentAddInfoArgs',
    'DataEngineCrontabResumeSuspendStrategyArgs',
    'DataEngineDataEngineConfigPairArgs',
    'DataEngineSessionResourceTemplateArgs',
    'DetachUserPolicyOperationPolicySetArgs',
    'DetachWorkGroupPolicyOperationPolicySetArgs',
    'UpdateRowFilterOperationPolicyArgs',
    'UserDataEngineConfigDataEngineConfigPairArgs',
    'UserDataEngineConfigSessionResourceTemplateArgs',
    'GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs',
    'GetDescribeUserInfoFilterArgs',
    'GetDescribeWorkGroupInfoFilterArgs',
]

@pulumi.input_type
class AddUsersToWorkGroupAttachmentAddInfoArgs:
    def __init__(__self__, *,
                 user_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 work_group_id: pulumi.Input[int]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_ids: User id set, matched with CAM side uin.
        :param pulumi.Input[int] work_group_id: Work group id.
        """
        pulumi.set(__self__, "user_ids", user_ids)
        pulumi.set(__self__, "work_group_id", work_group_id)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        User id set, matched with CAM side uin.
        """
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "user_ids", value)

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> pulumi.Input[int]:
        """
        Work group id.
        """
        return pulumi.get(self, "work_group_id")

    @work_group_id.setter
    def work_group_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "work_group_id", value)


@pulumi.input_type
class AttachUserPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] catalog: For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        :param pulumi.Input[str] database: Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        :param pulumi.Input[str] operation: Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        :param pulumi.Input[str] table: For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        :param pulumi.Input[str] column: For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] create_time: The time when the permission was created. Leave the input parameter blank.
        :param pulumi.Input[str] data_engine: Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] function: For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        :param pulumi.Input[int] id: Policy id.
        :param pulumi.Input[str] mode: Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        :param pulumi.Input[str] operator: Operator, do not fill in the input parameters.
        :param pulumi.Input[str] policy_type: Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        :param pulumi.Input[bool] re_auth: Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        :param pulumi.Input[str] source: Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        :param pulumi.Input[int] source_id: The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        :param pulumi.Input[str] source_name: The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        :param pulumi.Input[str] view: For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        """
        For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        """
        For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the permission was created. Leave the input parameter blank.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        """
        For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator, do not fill in the input parameters.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        """
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class AttachWorkGroupPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] catalog: For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        :param pulumi.Input[str] database: Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        :param pulumi.Input[str] operation: Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        :param pulumi.Input[str] table: For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        :param pulumi.Input[str] column: For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] create_time: The time when the permission was created. Leave the input parameter blank.
        :param pulumi.Input[str] data_engine: Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] function: For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        :param pulumi.Input[int] id: Policy id.
        :param pulumi.Input[str] mode: Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        :param pulumi.Input[str] operator: Operator, do not fill in the input parameters.
        :param pulumi.Input[str] policy_type: Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        :param pulumi.Input[bool] re_auth: Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        :param pulumi.Input[str] source: Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        :param pulumi.Input[int] source_id: The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        :param pulumi.Input[str] source_name: The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        :param pulumi.Input[str] view: For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        """
        For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        """
        For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the permission was created. Leave the input parameter blank.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        """
        For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator, do not fill in the input parameters.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        """
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class BindWorkGroupsToUserAttachmentAddInfoArgs:
    def __init__(__self__, *,
                 user_id: pulumi.Input[str],
                 work_group_ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[str] user_id: User id, matched with CAM side uin.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] work_group_ids: Work group id set.
        """
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "work_group_ids", work_group_ids)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        User id, matched with CAM side uin.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="workGroupIds")
    def work_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Work group id set.
        """
        return pulumi.get(self, "work_group_ids")

    @work_group_ids.setter
    def work_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "work_group_ids", value)


@pulumi.input_type
class DataEngineCrontabResumeSuspendStrategyArgs:
    def __init__(__self__, *,
                 resume_time: Optional[pulumi.Input[str]] = None,
                 suspend_strategy: Optional[pulumi.Input[int]] = None,
                 suspend_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resume_time: Scheduled pull-up time: For example: 8 o&amp;#39;clock on Monday is expressed as 1000000-08:00:00.
        :param pulumi.Input[int] suspend_strategy: Suspend configuration: 0 (default): wait for the task to end before suspending, 1: force suspend.
        :param pulumi.Input[str] suspend_time: Scheduled suspension time: For example: 20 o&amp;#39;clock on Monday is expressed as 1000000-20:00:00.
        """
        if resume_time is not None:
            pulumi.set(__self__, "resume_time", resume_time)
        if suspend_strategy is not None:
            pulumi.set(__self__, "suspend_strategy", suspend_strategy)
        if suspend_time is not None:
            pulumi.set(__self__, "suspend_time", suspend_time)

    @property
    @pulumi.getter(name="resumeTime")
    def resume_time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled pull-up time: For example: 8 o&amp;#39;clock on Monday is expressed as 1000000-08:00:00.
        """
        return pulumi.get(self, "resume_time")

    @resume_time.setter
    def resume_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resume_time", value)

    @property
    @pulumi.getter(name="suspendStrategy")
    def suspend_strategy(self) -> Optional[pulumi.Input[int]]:
        """
        Suspend configuration: 0 (default): wait for the task to end before suspending, 1: force suspend.
        """
        return pulumi.get(self, "suspend_strategy")

    @suspend_strategy.setter
    def suspend_strategy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "suspend_strategy", value)

    @property
    @pulumi.getter(name="suspendTime")
    def suspend_time(self) -> Optional[pulumi.Input[str]]:
        """
        Scheduled suspension time: For example: 20 o&amp;#39;clock on Monday is expressed as 1000000-20:00:00.
        """
        return pulumi.get(self, "suspend_time")

    @suspend_time.setter
    def suspend_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspend_time", value)


@pulumi.input_type
class DataEngineDataEngineConfigPairArgs:
    def __init__(__self__, *,
                 config_item: pulumi.Input[str],
                 config_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] config_item: Configuration items.
        :param pulumi.Input[str] config_value: Configuration value.
        """
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> pulumi.Input[str]:
        """
        Configuration items.
        """
        return pulumi.get(self, "config_item")

    @config_item.setter
    def config_item(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_item", value)

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> pulumi.Input[str]:
        """
        Configuration value.
        """
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_value", value)


@pulumi.input_type
class DataEngineSessionResourceTemplateArgs:
    def __init__(__self__, *,
                 driver_size: Optional[pulumi.Input[str]] = None,
                 executor_max_numbers: Optional[pulumi.Input[int]] = None,
                 executor_nums: Optional[pulumi.Input[int]] = None,
                 executor_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] driver_size: Engine driver size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        :param pulumi.Input[int] executor_max_numbers: Specify the executor max number (in a dynamic configuration scenario), the minimum value is 1, and the maximum value is less than the cluster specification (when ExecutorMaxNumbers is less than ExecutorNums, the value is set to ExecutorNums).
        :param pulumi.Input[int] executor_nums: Specify the number of executors. The minimum value is 1 and the maximum value is less than the cluster specification.
        :param pulumi.Input[str] executor_size: Engine executor size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        """
        if driver_size is not None:
            pulumi.set(__self__, "driver_size", driver_size)
        if executor_max_numbers is not None:
            pulumi.set(__self__, "executor_max_numbers", executor_max_numbers)
        if executor_nums is not None:
            pulumi.set(__self__, "executor_nums", executor_nums)
        if executor_size is not None:
            pulumi.set(__self__, "executor_size", executor_size)

    @property
    @pulumi.getter(name="driverSize")
    def driver_size(self) -> Optional[pulumi.Input[str]]:
        """
        Engine driver size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        """
        return pulumi.get(self, "driver_size")

    @driver_size.setter
    def driver_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_size", value)

    @property
    @pulumi.getter(name="executorMaxNumbers")
    def executor_max_numbers(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the executor max number (in a dynamic configuration scenario), the minimum value is 1, and the maximum value is less than the cluster specification (when ExecutorMaxNumbers is less than ExecutorNums, the value is set to ExecutorNums).
        """
        return pulumi.get(self, "executor_max_numbers")

    @executor_max_numbers.setter
    def executor_max_numbers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_max_numbers", value)

    @property
    @pulumi.getter(name="executorNums")
    def executor_nums(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the number of executors. The minimum value is 1 and the maximum value is less than the cluster specification.
        """
        return pulumi.get(self, "executor_nums")

    @executor_nums.setter
    def executor_nums(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_nums", value)

    @property
    @pulumi.getter(name="executorSize")
    def executor_size(self) -> Optional[pulumi.Input[str]]:
        """
        Engine executor size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        """
        return pulumi.get(self, "executor_size")

    @executor_size.setter
    def executor_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_size", value)


@pulumi.input_type
class DetachUserPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] catalog: For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        :param pulumi.Input[str] database: Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        :param pulumi.Input[str] operation: Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        :param pulumi.Input[str] table: For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        :param pulumi.Input[str] column: For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] create_time: The time when the permission was created. Leave the input parameter blank.
        :param pulumi.Input[str] data_engine: Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] function: For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        :param pulumi.Input[int] id: Policy id.
        :param pulumi.Input[str] mode: Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        :param pulumi.Input[str] operator: Operator, do not fill in the input parameters.
        :param pulumi.Input[str] policy_type: Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        :param pulumi.Input[bool] re_auth: Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        :param pulumi.Input[str] source: Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        :param pulumi.Input[int] source_id: The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        :param pulumi.Input[str] source_name: The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        :param pulumi.Input[str] view: For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        """
        For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        """
        For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the permission was created. Leave the input parameter blank.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        """
        For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator, do not fill in the input parameters.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        """
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class DetachWorkGroupPolicyOperationPolicySetArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] catalog: For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        :param pulumi.Input[str] database: Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        :param pulumi.Input[str] operation: Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        :param pulumi.Input[str] table: For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        :param pulumi.Input[str] column: For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] create_time: The time when the permission was created. Leave the input parameter blank.
        :param pulumi.Input[str] data_engine: Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] function: For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        :param pulumi.Input[int] id: Policy id.
        :param pulumi.Input[str] mode: Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        :param pulumi.Input[str] operator: Operator, do not fill in the input parameters.
        :param pulumi.Input[str] policy_type: Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        :param pulumi.Input[bool] re_auth: Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        :param pulumi.Input[str] source: Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        :param pulumi.Input[int] source_id: The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        :param pulumi.Input[str] source_name: The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        :param pulumi.Input[str] view: For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        """
        For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        """
        For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the permission was created. Leave the input parameter blank.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        """
        For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator, do not fill in the input parameters.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        """
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class UpdateRowFilterOperationPolicyArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 database: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 table: pulumi.Input[str],
                 column: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 data_engine: Optional[pulumi.Input[str]] = None,
                 function: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 policy_type: Optional[pulumi.Input[str]] = None,
                 re_auth: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[int]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] catalog: For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        :param pulumi.Input[str] database: Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        :param pulumi.Input[str] operation: Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        :param pulumi.Input[str] table: For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        :param pulumi.Input[str] column: For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] create_time: The time when the permission was created. Leave the input parameter blank.
        :param pulumi.Input[str] data_engine: Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        :param pulumi.Input[str] function: For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        :param pulumi.Input[int] id: Policy id.
        :param pulumi.Input[str] mode: Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        :param pulumi.Input[str] operator: Operator, do not fill in the input parameters.
        :param pulumi.Input[str] policy_type: Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        :param pulumi.Input[bool] re_auth: Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        :param pulumi.Input[str] source: Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        :param pulumi.Input[int] source_id: The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        :param pulumi.Input[str] source_name: The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        :param pulumi.Input[str] view: For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        pulumi.set(__self__, "catalog", catalog)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "table", table)
        if column is not None:
            pulumi.set(__self__, "column", column)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if data_engine is not None:
            pulumi.set(__self__, "data_engine", data_engine)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)
        if re_auth is not None:
            pulumi.set(__self__, "re_auth", re_auth)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        For the data source name that requires authorization, only * (representing all resources at this level) is supported under the administrator level; in the case of data source level and database level authentication, only COSDataCatalog or * is supported; in data table level authentication, it is possible Fill in the user-defined data source. If left blank, it defaults to DataLakeCatalog. note: If a user-defined data source is authenticated, the permissions that dlc can manage are a subset of the accounts provided by the user when accessing the data source.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        Database name that requires authorization, fill in * to represent all databases under the current catalog. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level, only blanks are allowed to be filled in. For other types, the database can be specified arbitrarily.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        Authorized permission operations provide different operations for different levels of authentication. administrator permissions: ALL, default is ALL if left blank; data connection level authentication: CREATE; database level authentication: ALL, CREATE, ALTER, DROP; data table permissions: ALL, SELECT, INSERT, ALTER, DELETE, DROP, UPDATE. note: under data table permissions, only SELECT operations are supported when the specified data source is not COSDataCatalog.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[str]:
        """
        For the table name that requires authorization, fill in * to represent all tables under the current database. when the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. For other types, data tables can be specified arbitrarily.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[str]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input[str]]:
        """
        For columns that require authorization, fill in * to represent all current columns. When the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time when the permission was created. Leave the input parameter blank.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="dataEngine")
    def data_engine(self) -> Optional[pulumi.Input[str]]:
        """
        Data engines that require authorization, fill in * to represent all current engines. when the authorization type is administrator level, only * is allowed.
        """
        return pulumi.get(self, "data_engine")

    @data_engine.setter
    def data_engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine", value)

    @property
    @pulumi.getter
    def function(self) -> Optional[pulumi.Input[str]]:
        """
        For the function name that requires authorization, fill in * to represent all functions under the current catalog. when the authorization type is administrator level, only * is allowed to be filled in. When the authorization type is data connection level, only blanks are allowed to be filled in. in other types, functions can be specified arbitrarily.
        """
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy id.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization mode, please leave this parameter blank. COMMON: normal mode; SENIOR: advanced mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator, do not fill in the input parameters.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Authorization type, currently supports eight authorization types: ADMIN: Administrator level authentication DATASOURCE: data connection level authentication DATABASE: database level authentication TABLE: Table level authentication VIEW: view level authentication FUNCTION: Function level authentication COLUMN: Column level authentication ENGINE: Data engine authentication. if left blank, the default is administrator level authentication.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the user can perform secondary authorization. when it is true, the authorized user can re-authorize the permissions obtained this time to other sub-users. default is false.
        """
        return pulumi.get(self, "re_auth")

    @re_auth.setter
    def re_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "re_auth", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        Permission source, please leave it blank. USER: permissions come from the user itself; WORKGROUP: permissions come from the bound workgroup.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the Source field is WORKGROUP.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workgroup to which the permission belongs. this value only exists when the source of the permission is a workgroup. that is, this field has a value only when the value of the source field is WORKGROUP.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        """
        For views that require authorization, fill in * to represent all views under the current database. When the authorization type is administrator level, only * is allowed to be filled in. when the authorization type is data connection level or database level, only blanks are allowed to be filled in. for other types, the view can be specified arbitrarily.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class UserDataEngineConfigDataEngineConfigPairArgs:
    def __init__(__self__, *,
                 config_item: pulumi.Input[str],
                 config_value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] config_item: Config key.
        :param pulumi.Input[str] config_value: Config value.
        """
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> pulumi.Input[str]:
        """
        Config key.
        """
        return pulumi.get(self, "config_item")

    @config_item.setter
    def config_item(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_item", value)

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> pulumi.Input[str]:
        """
        Config value.
        """
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "config_value", value)


@pulumi.input_type
class UserDataEngineConfigSessionResourceTemplateArgs:
    def __init__(__self__, *,
                 driver_size: Optional[pulumi.Input[str]] = None,
                 executor_max_numbers: Optional[pulumi.Input[int]] = None,
                 executor_nums: Optional[pulumi.Input[int]] = None,
                 executor_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] driver_size: Engine driver size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        :param pulumi.Input[int] executor_max_numbers: Specify the executor max number (in a dynamic configuration scenario), the minimum value is 1, and the maximum value is less than the cluster specification (when ExecutorMaxNumbers is less than ExecutorNums, the value is set to ExecutorNums).
        :param pulumi.Input[int] executor_nums: Specify the number of executors. The minimum value is 1 and the maximum value is less than the cluster specification.
        :param pulumi.Input[str] executor_size: Engine executor size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        """
        if driver_size is not None:
            pulumi.set(__self__, "driver_size", driver_size)
        if executor_max_numbers is not None:
            pulumi.set(__self__, "executor_max_numbers", executor_max_numbers)
        if executor_nums is not None:
            pulumi.set(__self__, "executor_nums", executor_nums)
        if executor_size is not None:
            pulumi.set(__self__, "executor_size", executor_size)

    @property
    @pulumi.getter(name="driverSize")
    def driver_size(self) -> Optional[pulumi.Input[str]]:
        """
        Engine driver size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        """
        return pulumi.get(self, "driver_size")

    @driver_size.setter
    def driver_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "driver_size", value)

    @property
    @pulumi.getter(name="executorMaxNumbers")
    def executor_max_numbers(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the executor max number (in a dynamic configuration scenario), the minimum value is 1, and the maximum value is less than the cluster specification (when ExecutorMaxNumbers is less than ExecutorNums, the value is set to ExecutorNums).
        """
        return pulumi.get(self, "executor_max_numbers")

    @executor_max_numbers.setter
    def executor_max_numbers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_max_numbers", value)

    @property
    @pulumi.getter(name="executorNums")
    def executor_nums(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the number of executors. The minimum value is 1 and the maximum value is less than the cluster specification.
        """
        return pulumi.get(self, "executor_nums")

    @executor_nums.setter
    def executor_nums(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "executor_nums", value)

    @property
    @pulumi.getter(name="executorSize")
    def executor_size(self) -> Optional[pulumi.Input[str]]:
        """
        Engine executor size specification only supports: small/medium/large/xlarge/m.small/m.medium/m.large/m.xlarge.
        """
        return pulumi.get(self, "executor_size")

    @executor_size.setter
    def executor_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "executor_size", value)


@pulumi.input_type
class GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs:
    def __init__(__self__, *,
                 config_item: str,
                 config_value: str):
        """
        :param str config_item: Configuration item.
        :param str config_value: Configuration value.
        """
        pulumi.set(__self__, "config_item", config_item)
        pulumi.set(__self__, "config_value", config_value)

    @property
    @pulumi.getter(name="configItem")
    def config_item(self) -> str:
        """
        Configuration item.
        """
        return pulumi.get(self, "config_item")

    @config_item.setter
    def config_item(self, value: str):
        pulumi.set(self, "config_item", value)

    @property
    @pulumi.getter(name="configValue")
    def config_value(self) -> str:
        """
        Configuration value.
        """
        return pulumi.get(self, "config_value")

    @config_value.setter
    def config_value(self, value: str):
        pulumi.set(self, "config_value", value)


@pulumi.input_type
class GetDescribeUserInfoFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Attribute name. If there are multiple Filters, the relationship between Filters is a logical OR (OR) relationship.
        :param Sequence[str] values: Attribute value, if there are multiple Values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Attribute name. If there are multiple Filters, the relationship between Filters is a logical OR (OR) relationship.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Attribute value, if there are multiple Values in the same filter, the relationship between values under the same filter is a logical OR relationship.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDescribeWorkGroupInfoFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: Attribute name. If there are multiple Filters, the relationship between filters is a logical or (OR) relationship.
        :param Sequence[str] values: Attribute value, if there are multiple values in the same filter, the relationship between values under the same filter is a logical or relationship.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Attribute name. If there are multiple Filters, the relationship between filters is a logical or (OR) relationship.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Attribute value, if there are multiple values in the same filter, the relationship between values under the same filter is a logical or relationship.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


