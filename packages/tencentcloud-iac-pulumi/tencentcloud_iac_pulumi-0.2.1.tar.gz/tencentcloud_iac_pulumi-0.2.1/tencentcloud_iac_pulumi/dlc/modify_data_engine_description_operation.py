# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ModifyDataEngineDescriptionOperationArgs', 'ModifyDataEngineDescriptionOperation']

@pulumi.input_type
class ModifyDataEngineDescriptionOperationArgs:
    def __init__(__self__, *,
                 data_engine_name: pulumi.Input[str],
                 message: pulumi.Input[str]):
        """
        The set of arguments for constructing a ModifyDataEngineDescriptionOperation resource.
        :param pulumi.Input[str] data_engine_name: The name of the engine to modify.
        :param pulumi.Input[str] message: Engine description information, the maximum length is 250.
        """
        pulumi.set(__self__, "data_engine_name", data_engine_name)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> pulumi.Input[str]:
        """
        The name of the engine to modify.
        """
        return pulumi.get(self, "data_engine_name")

    @data_engine_name.setter
    def data_engine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_engine_name", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Engine description information, the maximum length is 250.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class _ModifyDataEngineDescriptionOperationState:
    def __init__(__self__, *,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ModifyDataEngineDescriptionOperation resources.
        :param pulumi.Input[str] data_engine_name: The name of the engine to modify.
        :param pulumi.Input[str] message: Engine description information, the maximum length is 250.
        """
        if data_engine_name is not None:
            pulumi.set(__self__, "data_engine_name", data_engine_name)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the engine to modify.
        """
        return pulumi.get(self, "data_engine_name")

    @data_engine_name.setter
    def data_engine_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine_name", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Engine description information, the maximum length is 250.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


class ModifyDataEngineDescriptionOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc modify_data_engine_description_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        modify_data_engine_description_operation = tencentcloud.dlc.ModifyDataEngineDescriptionOperation("modifyDataEngineDescriptionOperation",
            data_engine_name="testEngine",
            message="test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc modify_data_engine_description_operation can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/modifyDataEngineDescriptionOperation:ModifyDataEngineDescriptionOperation modify_data_engine_description_operation modify_data_engine_description_operation_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_engine_name: The name of the engine to modify.
        :param pulumi.Input[str] message: Engine description information, the maximum length is 250.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModifyDataEngineDescriptionOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc modify_data_engine_description_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        modify_data_engine_description_operation = tencentcloud.dlc.ModifyDataEngineDescriptionOperation("modifyDataEngineDescriptionOperation",
            data_engine_name="testEngine",
            message="test")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc modify_data_engine_description_operation can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/modifyDataEngineDescriptionOperation:ModifyDataEngineDescriptionOperation modify_data_engine_description_operation modify_data_engine_description_operation_id
        ```

        :param str resource_name: The name of the resource.
        :param ModifyDataEngineDescriptionOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModifyDataEngineDescriptionOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModifyDataEngineDescriptionOperationArgs.__new__(ModifyDataEngineDescriptionOperationArgs)

            if data_engine_name is None and not opts.urn:
                raise TypeError("Missing required property 'data_engine_name'")
            __props__.__dict__["data_engine_name"] = data_engine_name
            if message is None and not opts.urn:
                raise TypeError("Missing required property 'message'")
            __props__.__dict__["message"] = message
        super(ModifyDataEngineDescriptionOperation, __self__).__init__(
            'tencentcloud:Dlc/modifyDataEngineDescriptionOperation:ModifyDataEngineDescriptionOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_engine_name: Optional[pulumi.Input[str]] = None,
            message: Optional[pulumi.Input[str]] = None) -> 'ModifyDataEngineDescriptionOperation':
        """
        Get an existing ModifyDataEngineDescriptionOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_engine_name: The name of the engine to modify.
        :param pulumi.Input[str] message: Engine description information, the maximum length is 250.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModifyDataEngineDescriptionOperationState.__new__(_ModifyDataEngineDescriptionOperationState)

        __props__.__dict__["data_engine_name"] = data_engine_name
        __props__.__dict__["message"] = message
        return ModifyDataEngineDescriptionOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> pulumi.Output[str]:
        """
        The name of the engine to modify.
        """
        return pulumi.get(self, "data_engine_name")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        """
        Engine description information, the maximum length is 250.
        """
        return pulumi.get(self, "message")

