# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDescribeUpdatableDataEnginesResult',
    'AwaitableGetDescribeUpdatableDataEnginesResult',
    'get_describe_updatable_data_engines',
    'get_describe_updatable_data_engines_output',
]

@pulumi.output_type
class GetDescribeUpdatableDataEnginesResult:
    """
    A collection of values returned by getDescribeUpdatableDataEngines.
    """
    def __init__(__self__, data_engine_basic_infos=None, data_engine_config_command=None, id=None, result_output_file=None):
        if data_engine_basic_infos and not isinstance(data_engine_basic_infos, list):
            raise TypeError("Expected argument 'data_engine_basic_infos' to be a list")
        pulumi.set(__self__, "data_engine_basic_infos", data_engine_basic_infos)
        if data_engine_config_command and not isinstance(data_engine_config_command, str):
            raise TypeError("Expected argument 'data_engine_config_command' to be a str")
        pulumi.set(__self__, "data_engine_config_command", data_engine_config_command)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="dataEngineBasicInfos")
    def data_engine_basic_infos(self) -> Sequence['outputs.GetDescribeUpdatableDataEnginesDataEngineBasicInfoResult']:
        """
        Engine basic information.
        """
        return pulumi.get(self, "data_engine_basic_infos")

    @property
    @pulumi.getter(name="dataEngineConfigCommand")
    def data_engine_config_command(self) -> str:
        return pulumi.get(self, "data_engine_config_command")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDescribeUpdatableDataEnginesResult(GetDescribeUpdatableDataEnginesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeUpdatableDataEnginesResult(
            data_engine_basic_infos=self.data_engine_basic_infos,
            data_engine_config_command=self.data_engine_config_command,
            id=self.id,
            result_output_file=self.result_output_file)


def get_describe_updatable_data_engines(data_engine_config_command: Optional[str] = None,
                                        result_output_file: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeUpdatableDataEnginesResult:
    """
    Use this data source to query detailed information of dlc describe_updatable_data_engines

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_updatable_data_engines = tencentcloud.Dlc.get_describe_updatable_data_engines(data_engine_config_command="UpdateSparkSQLLakefsPath")
    ```
    <!--End PulumiCodeChooser -->


    :param str data_engine_config_command: Engine configuration operation command, UpdateSparkSQLLakefsPath updates the managed table path, UpdateSparkSQLResultPath updates the result bucket path.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['dataEngineConfigCommand'] = data_engine_config_command
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dlc/getDescribeUpdatableDataEngines:getDescribeUpdatableDataEngines', __args__, opts=opts, typ=GetDescribeUpdatableDataEnginesResult).value

    return AwaitableGetDescribeUpdatableDataEnginesResult(
        data_engine_basic_infos=pulumi.get(__ret__, 'data_engine_basic_infos'),
        data_engine_config_command=pulumi.get(__ret__, 'data_engine_config_command'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_describe_updatable_data_engines)
def get_describe_updatable_data_engines_output(data_engine_config_command: Optional[pulumi.Input[str]] = None,
                                               result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeUpdatableDataEnginesResult]:
    """
    Use this data source to query detailed information of dlc describe_updatable_data_engines

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_updatable_data_engines = tencentcloud.Dlc.get_describe_updatable_data_engines(data_engine_config_command="UpdateSparkSQLLakefsPath")
    ```
    <!--End PulumiCodeChooser -->


    :param str data_engine_config_command: Engine configuration operation command, UpdateSparkSQLLakefsPath updates the managed table path, UpdateSparkSQLResultPath updates the result bucket path.
    :param str result_output_file: Used to save results.
    """
    ...
