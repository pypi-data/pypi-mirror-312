# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDescribeWorkGroupInfoResult',
    'AwaitableGetDescribeWorkGroupInfoResult',
    'get_describe_work_group_info',
    'get_describe_work_group_info_output',
]

@pulumi.output_type
class GetDescribeWorkGroupInfoResult:
    """
    A collection of values returned by getDescribeWorkGroupInfo.
    """
    def __init__(__self__, filters=None, id=None, result_output_file=None, sort_by=None, sorting=None, type=None, work_group_id=None, work_group_infos=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sort_by and not isinstance(sort_by, str):
            raise TypeError("Expected argument 'sort_by' to be a str")
        pulumi.set(__self__, "sort_by", sort_by)
        if sorting and not isinstance(sorting, str):
            raise TypeError("Expected argument 'sorting' to be a str")
        pulumi.set(__self__, "sorting", sorting)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if work_group_id and not isinstance(work_group_id, int):
            raise TypeError("Expected argument 'work_group_id' to be a int")
        pulumi.set(__self__, "work_group_id", work_group_id)
        if work_group_infos and not isinstance(work_group_infos, list):
            raise TypeError("Expected argument 'work_group_infos' to be a list")
        pulumi.set(__self__, "work_group_infos", work_group_infos)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetDescribeWorkGroupInfoFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[str]:
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter
    def sorting(self) -> Optional[str]:
        return pulumi.get(self, "sorting")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of information contained. User: user information; DataAuth: data permissions; EngineAuth: engine permissions.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> Optional[int]:
        """
        Work group id.
        """
        return pulumi.get(self, "work_group_id")

    @property
    @pulumi.getter(name="workGroupInfos")
    def work_group_infos(self) -> Sequence['outputs.GetDescribeWorkGroupInfoWorkGroupInfoResult']:
        """
        Workgroup details.
        """
        return pulumi.get(self, "work_group_infos")


class AwaitableGetDescribeWorkGroupInfoResult(GetDescribeWorkGroupInfoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeWorkGroupInfoResult(
            filters=self.filters,
            id=self.id,
            result_output_file=self.result_output_file,
            sort_by=self.sort_by,
            sorting=self.sorting,
            type=self.type,
            work_group_id=self.work_group_id,
            work_group_infos=self.work_group_infos)


def get_describe_work_group_info(filters: Optional[Sequence[pulumi.InputType['GetDescribeWorkGroupInfoFilterArgs']]] = None,
                                 result_output_file: Optional[str] = None,
                                 sort_by: Optional[str] = None,
                                 sorting: Optional[str] = None,
                                 type: Optional[str] = None,
                                 work_group_id: Optional[int] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeWorkGroupInfoResult:
    """
    Use this data source to query detailed information of dlc describe_work_group_info

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_work_group_info = tencentcloud.Dlc.get_describe_work_group_info(sort_by="create-time",
        sorting="desc",
        type="User",
        work_group_id=23181)
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetDescribeWorkGroupInfoFilterArgs']] filters: Query filter conditions. when Type is User, fuzzy search with Key as user-name is supported; when Type is DataAuth, key is supported; policy-type: permission type; policy-source: data source; data-name: database table fuzzy search; when Type is EngineAuth, supports key; policy-type: permission type; policy-source: data source; engine-name: fuzzy search of library tables.
    :param str result_output_file: Used to save results.
    :param str sort_by: Sorting fields, when Type is User, support create-time, user-name, when type is DataAuth, support create-time, when type is EngineAuth, support create-time.
    :param str sorting: Sorting method, desc means forward order, asc means reverse order, the default is asc.
    :param str type: Query information type, only support: User: user information/DataAuth: data permission/EngineAuth: engine permission.
    :param int work_group_id: Work group id.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['resultOutputFile'] = result_output_file
    __args__['sortBy'] = sort_by
    __args__['sorting'] = sorting
    __args__['type'] = type
    __args__['workGroupId'] = work_group_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dlc/getDescribeWorkGroupInfo:getDescribeWorkGroupInfo', __args__, opts=opts, typ=GetDescribeWorkGroupInfoResult).value

    return AwaitableGetDescribeWorkGroupInfoResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sort_by=pulumi.get(__ret__, 'sort_by'),
        sorting=pulumi.get(__ret__, 'sorting'),
        type=pulumi.get(__ret__, 'type'),
        work_group_id=pulumi.get(__ret__, 'work_group_id'),
        work_group_infos=pulumi.get(__ret__, 'work_group_infos'))


@_utilities.lift_output_func(get_describe_work_group_info)
def get_describe_work_group_info_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetDescribeWorkGroupInfoFilterArgs']]]]] = None,
                                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                        sort_by: Optional[pulumi.Input[Optional[str]]] = None,
                                        sorting: Optional[pulumi.Input[Optional[str]]] = None,
                                        type: Optional[pulumi.Input[Optional[str]]] = None,
                                        work_group_id: Optional[pulumi.Input[Optional[int]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeWorkGroupInfoResult]:
    """
    Use this data source to query detailed information of dlc describe_work_group_info

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_work_group_info = tencentcloud.Dlc.get_describe_work_group_info(sort_by="create-time",
        sorting="desc",
        type="User",
        work_group_id=23181)
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetDescribeWorkGroupInfoFilterArgs']] filters: Query filter conditions. when Type is User, fuzzy search with Key as user-name is supported; when Type is DataAuth, key is supported; policy-type: permission type; policy-source: data source; data-name: database table fuzzy search; when Type is EngineAuth, supports key; policy-type: permission type; policy-source: data source; engine-name: fuzzy search of library tables.
    :param str result_output_file: Used to save results.
    :param str sort_by: Sorting fields, when Type is User, support create-time, user-name, when type is DataAuth, support create-time, when type is EngineAuth, support create-time.
    :param str sorting: Sorting method, desc means forward order, asc means reverse order, the default is asc.
    :param str type: Query information type, only support: User: user information/DataAuth: data permission/EngineAuth: engine permission.
    :param int work_group_id: Work group id.
    """
    ...
