# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BindWorkGroupsToUserAttachmentArgs', 'BindWorkGroupsToUserAttachment']

@pulumi.input_type
class BindWorkGroupsToUserAttachmentArgs:
    def __init__(__self__, *,
                 add_info: pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs']):
        """
        The set of arguments for constructing a BindWorkGroupsToUserAttachment resource.
        :param pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs'] add_info: Bind user and workgroup information.
        """
        pulumi.set(__self__, "add_info", add_info)

    @property
    @pulumi.getter(name="addInfo")
    def add_info(self) -> pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs']:
        """
        Bind user and workgroup information.
        """
        return pulumi.get(self, "add_info")

    @add_info.setter
    def add_info(self, value: pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs']):
        pulumi.set(self, "add_info", value)


@pulumi.input_type
class _BindWorkGroupsToUserAttachmentState:
    def __init__(__self__, *,
                 add_info: Optional[pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs']] = None):
        """
        Input properties used for looking up and filtering BindWorkGroupsToUserAttachment resources.
        :param pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs'] add_info: Bind user and workgroup information.
        """
        if add_info is not None:
            pulumi.set(__self__, "add_info", add_info)

    @property
    @pulumi.getter(name="addInfo")
    def add_info(self) -> Optional[pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs']]:
        """
        Bind user and workgroup information.
        """
        return pulumi.get(self, "add_info")

    @add_info.setter
    def add_info(self, value: Optional[pulumi.Input['BindWorkGroupsToUserAttachmentAddInfoArgs']]):
        pulumi.set(self, "add_info", value)


class BindWorkGroupsToUserAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_info: Optional[pulumi.Input[pulumi.InputType['BindWorkGroupsToUserAttachmentAddInfoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc bind_work_groups_to_user

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bind_work_groups_to_user = tencentcloud.dlc.BindWorkGroupsToUserAttachment("bindWorkGroupsToUser", add_info=tencentcloud.dlc.BindWorkGroupsToUserAttachmentAddInfoArgs(
            user_id="100032772113",
            work_group_ids=[
                23184,
                23181,
            ],
        ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc bind_work_groups_to_user can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/bindWorkGroupsToUserAttachment:BindWorkGroupsToUserAttachment bind_work_groups_to_user bind_work_groups_to_user_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['BindWorkGroupsToUserAttachmentAddInfoArgs']] add_info: Bind user and workgroup information.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BindWorkGroupsToUserAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc bind_work_groups_to_user

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        bind_work_groups_to_user = tencentcloud.dlc.BindWorkGroupsToUserAttachment("bindWorkGroupsToUser", add_info=tencentcloud.dlc.BindWorkGroupsToUserAttachmentAddInfoArgs(
            user_id="100032772113",
            work_group_ids=[
                23184,
                23181,
            ],
        ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc bind_work_groups_to_user can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/bindWorkGroupsToUserAttachment:BindWorkGroupsToUserAttachment bind_work_groups_to_user bind_work_groups_to_user_id
        ```

        :param str resource_name: The name of the resource.
        :param BindWorkGroupsToUserAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BindWorkGroupsToUserAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 add_info: Optional[pulumi.Input[pulumi.InputType['BindWorkGroupsToUserAttachmentAddInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BindWorkGroupsToUserAttachmentArgs.__new__(BindWorkGroupsToUserAttachmentArgs)

            if add_info is None and not opts.urn:
                raise TypeError("Missing required property 'add_info'")
            __props__.__dict__["add_info"] = add_info
        super(BindWorkGroupsToUserAttachment, __self__).__init__(
            'tencentcloud:Dlc/bindWorkGroupsToUserAttachment:BindWorkGroupsToUserAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            add_info: Optional[pulumi.Input[pulumi.InputType['BindWorkGroupsToUserAttachmentAddInfoArgs']]] = None) -> 'BindWorkGroupsToUserAttachment':
        """
        Get an existing BindWorkGroupsToUserAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['BindWorkGroupsToUserAttachmentAddInfoArgs']] add_info: Bind user and workgroup information.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BindWorkGroupsToUserAttachmentState.__new__(_BindWorkGroupsToUserAttachmentState)

        __props__.__dict__["add_info"] = add_info
        return BindWorkGroupsToUserAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addInfo")
    def add_info(self) -> pulumi.Output['outputs.BindWorkGroupsToUserAttachmentAddInfo']:
        """
        Bind user and workgroup information.
        """
        return pulumi.get(self, "add_info")

