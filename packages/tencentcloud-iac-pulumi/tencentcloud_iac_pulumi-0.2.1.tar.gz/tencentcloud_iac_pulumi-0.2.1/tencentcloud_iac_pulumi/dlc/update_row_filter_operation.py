# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UpdateRowFilterOperationArgs', 'UpdateRowFilterOperation']

@pulumi.input_type
class UpdateRowFilterOperationArgs:
    def __init__(__self__, *,
                 policy: pulumi.Input['UpdateRowFilterOperationPolicyArgs'],
                 policy_id: pulumi.Input[int]):
        """
        The set of arguments for constructing a UpdateRowFilterOperation resource.
        :param pulumi.Input['UpdateRowFilterOperationPolicyArgs'] policy: New filtering strategy.
        :param pulumi.Input[int] policy_id: The id of the row filtering policy.
        """
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "policy_id", policy_id)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input['UpdateRowFilterOperationPolicyArgs']:
        """
        New filtering strategy.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input['UpdateRowFilterOperationPolicyArgs']):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Input[int]:
        """
        The id of the row filtering policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "policy_id", value)


@pulumi.input_type
class _UpdateRowFilterOperationState:
    def __init__(__self__, *,
                 policy: Optional[pulumi.Input['UpdateRowFilterOperationPolicyArgs']] = None,
                 policy_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering UpdateRowFilterOperation resources.
        :param pulumi.Input['UpdateRowFilterOperationPolicyArgs'] policy: New filtering strategy.
        :param pulumi.Input[int] policy_id: The id of the row filtering policy.
        """
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input['UpdateRowFilterOperationPolicyArgs']]:
        """
        New filtering strategy.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input['UpdateRowFilterOperationPolicyArgs']]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[pulumi.Input[int]]:
        """
        The id of the row filtering policy.
        """
        return pulumi.get(self, "policy_id")

    @policy_id.setter
    def policy_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "policy_id", value)


class UpdateRowFilterOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy: Optional[pulumi.Input[pulumi.InputType['UpdateRowFilterOperationPolicyArgs']]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc update_row_filter_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        update_row_filter_operation = tencentcloud.dlc.UpdateRowFilterOperation("updateRowFilterOperation",
            policy=tencentcloud.dlc.UpdateRowFilterOperationPolicyArgs(
                catalog="DataLakeCatalog",
                column="",
                database="test_iac_keep",
                function="",
                mode="SENIOR",
                operation="value!=\\"0\\"",
                policy_type="ROWFILTER",
                re_auth=False,
                source="USER",
                table="test_table",
                view="",
            ),
            policy_id=103704)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['UpdateRowFilterOperationPolicyArgs']] policy: New filtering strategy.
        :param pulumi.Input[int] policy_id: The id of the row filtering policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpdateRowFilterOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc update_row_filter_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        update_row_filter_operation = tencentcloud.dlc.UpdateRowFilterOperation("updateRowFilterOperation",
            policy=tencentcloud.dlc.UpdateRowFilterOperationPolicyArgs(
                catalog="DataLakeCatalog",
                column="",
                database="test_iac_keep",
                function="",
                mode="SENIOR",
                operation="value!=\\"0\\"",
                policy_type="ROWFILTER",
                re_auth=False,
                source="USER",
                table="test_table",
                view="",
            ),
            policy_id=103704)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param UpdateRowFilterOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpdateRowFilterOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy: Optional[pulumi.Input[pulumi.InputType['UpdateRowFilterOperationPolicyArgs']]] = None,
                 policy_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpdateRowFilterOperationArgs.__new__(UpdateRowFilterOperationArgs)

            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
            if policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'policy_id'")
            __props__.__dict__["policy_id"] = policy_id
        super(UpdateRowFilterOperation, __self__).__init__(
            'tencentcloud:Dlc/updateRowFilterOperation:UpdateRowFilterOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policy: Optional[pulumi.Input[pulumi.InputType['UpdateRowFilterOperationPolicyArgs']]] = None,
            policy_id: Optional[pulumi.Input[int]] = None) -> 'UpdateRowFilterOperation':
        """
        Get an existing UpdateRowFilterOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['UpdateRowFilterOperationPolicyArgs']] policy: New filtering strategy.
        :param pulumi.Input[int] policy_id: The id of the row filtering policy.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UpdateRowFilterOperationState.__new__(_UpdateRowFilterOperationState)

        __props__.__dict__["policy"] = policy
        __props__.__dict__["policy_id"] = policy_id
        return UpdateRowFilterOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output['outputs.UpdateRowFilterOperationPolicy']:
        """
        New filtering strategy.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[int]:
        """
        The id of the row filtering policy.
        """
        return pulumi.get(self, "policy_id")

