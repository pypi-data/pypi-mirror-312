# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['WorkGroupArgs', 'WorkGroup']

@pulumi.input_type
class WorkGroupArgs:
    def __init__(__self__, *,
                 work_group_name: pulumi.Input[str],
                 work_group_description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkGroup resource.
        :param pulumi.Input[str] work_group_name: Name of Work Group.
        :param pulumi.Input[str] work_group_description: Description of Work Group.
        """
        pulumi.set(__self__, "work_group_name", work_group_name)
        if work_group_description is not None:
            pulumi.set(__self__, "work_group_description", work_group_description)

    @property
    @pulumi.getter(name="workGroupName")
    def work_group_name(self) -> pulumi.Input[str]:
        """
        Name of Work Group.
        """
        return pulumi.get(self, "work_group_name")

    @work_group_name.setter
    def work_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "work_group_name", value)

    @property
    @pulumi.getter(name="workGroupDescription")
    def work_group_description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of Work Group.
        """
        return pulumi.get(self, "work_group_description")

    @work_group_description.setter
    def work_group_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_group_description", value)


@pulumi.input_type
class _WorkGroupState:
    def __init__(__self__, *,
                 user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 work_group_description: Optional[pulumi.Input[str]] = None,
                 work_group_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkGroup resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_ids: A collection of user IDs that has been bound to the workgroup.
        :param pulumi.Input[str] work_group_description: Description of Work Group.
        :param pulumi.Input[str] work_group_name: Name of Work Group.
        """
        if user_ids is not None:
            pulumi.set(__self__, "user_ids", user_ids)
        if work_group_description is not None:
            pulumi.set(__self__, "work_group_description", work_group_description)
        if work_group_name is not None:
            pulumi.set(__self__, "work_group_name", work_group_name)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A collection of user IDs that has been bound to the workgroup.
        """
        return pulumi.get(self, "user_ids")

    @user_ids.setter
    def user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_ids", value)

    @property
    @pulumi.getter(name="workGroupDescription")
    def work_group_description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of Work Group.
        """
        return pulumi.get(self, "work_group_description")

    @work_group_description.setter
    def work_group_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_group_description", value)

    @property
    @pulumi.getter(name="workGroupName")
    def work_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of Work Group.
        """
        return pulumi.get(self, "work_group_name")

    @work_group_name.setter
    def work_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_group_name", value)


class WorkGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 work_group_description: Optional[pulumi.Input[str]] = None,
                 work_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc work_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        work_group = tencentcloud.dlc.WorkGroup("workGroup",
            work_group_description="dlc workgroup test",
            work_group_name="tf-demo")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc work_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/workGroup:WorkGroup work_group work_group_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] work_group_description: Description of Work Group.
        :param pulumi.Input[str] work_group_name: Name of Work Group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc work_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        work_group = tencentcloud.dlc.WorkGroup("workGroup",
            work_group_description="dlc workgroup test",
            work_group_name="tf-demo")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc work_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/workGroup:WorkGroup work_group work_group_id
        ```

        :param str resource_name: The name of the resource.
        :param WorkGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 work_group_description: Optional[pulumi.Input[str]] = None,
                 work_group_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkGroupArgs.__new__(WorkGroupArgs)

            __props__.__dict__["work_group_description"] = work_group_description
            if work_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'work_group_name'")
            __props__.__dict__["work_group_name"] = work_group_name
            __props__.__dict__["user_ids"] = None
        super(WorkGroup, __self__).__init__(
            'tencentcloud:Dlc/workGroup:WorkGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            work_group_description: Optional[pulumi.Input[str]] = None,
            work_group_name: Optional[pulumi.Input[str]] = None) -> 'WorkGroup':
        """
        Get an existing WorkGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_ids: A collection of user IDs that has been bound to the workgroup.
        :param pulumi.Input[str] work_group_description: Description of Work Group.
        :param pulumi.Input[str] work_group_name: Name of Work Group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkGroupState.__new__(_WorkGroupState)

        __props__.__dict__["user_ids"] = user_ids
        __props__.__dict__["work_group_description"] = work_group_description
        __props__.__dict__["work_group_name"] = work_group_name
        return WorkGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A collection of user IDs that has been bound to the workgroup.
        """
        return pulumi.get(self, "user_ids")

    @property
    @pulumi.getter(name="workGroupDescription")
    def work_group_description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of Work Group.
        """
        return pulumi.get(self, "work_group_description")

    @property
    @pulumi.getter(name="workGroupName")
    def work_group_name(self) -> pulumi.Output[str]:
        """
        Name of Work Group.
        """
        return pulumi.get(self, "work_group_name")

