# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RestartDataEngineOperationArgs', 'RestartDataEngineOperation']

@pulumi.input_type
class RestartDataEngineOperationArgs:
    def __init__(__self__, *,
                 data_engine_id: pulumi.Input[str],
                 forced_operation: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RestartDataEngineOperation resource.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input[bool] forced_operation: Whether to force restart and ignore tasks.
        """
        pulumi.set(__self__, "data_engine_id", data_engine_id)
        if forced_operation is not None:
            pulumi.set(__self__, "forced_operation", forced_operation)

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> pulumi.Input[str]:
        """
        Engine unique id.
        """
        return pulumi.get(self, "data_engine_id")

    @data_engine_id.setter
    def data_engine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_engine_id", value)

    @property
    @pulumi.getter(name="forcedOperation")
    def forced_operation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force restart and ignore tasks.
        """
        return pulumi.get(self, "forced_operation")

    @forced_operation.setter
    def forced_operation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forced_operation", value)


@pulumi.input_type
class _RestartDataEngineOperationState:
    def __init__(__self__, *,
                 data_engine_id: Optional[pulumi.Input[str]] = None,
                 forced_operation: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering RestartDataEngineOperation resources.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input[bool] forced_operation: Whether to force restart and ignore tasks.
        """
        if data_engine_id is not None:
            pulumi.set(__self__, "data_engine_id", data_engine_id)
        if forced_operation is not None:
            pulumi.set(__self__, "forced_operation", forced_operation)

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Engine unique id.
        """
        return pulumi.get(self, "data_engine_id")

    @data_engine_id.setter
    def data_engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine_id", value)

    @property
    @pulumi.getter(name="forcedOperation")
    def forced_operation(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force restart and ignore tasks.
        """
        return pulumi.get(self, "forced_operation")

    @forced_operation.setter
    def forced_operation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forced_operation", value)


class RestartDataEngineOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_id: Optional[pulumi.Input[str]] = None,
                 forced_operation: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc restart_data_engine

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        restart_data_engine = tencentcloud.dlc.RestartDataEngineOperation("restartDataEngine",
            data_engine_id="DataEngine-g5ds87d8",
            forced_operation=False)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input[bool] forced_operation: Whether to force restart and ignore tasks.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestartDataEngineOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc restart_data_engine

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        restart_data_engine = tencentcloud.dlc.RestartDataEngineOperation("restartDataEngine",
            data_engine_id="DataEngine-g5ds87d8",
            forced_operation=False)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param RestartDataEngineOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestartDataEngineOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_id: Optional[pulumi.Input[str]] = None,
                 forced_operation: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestartDataEngineOperationArgs.__new__(RestartDataEngineOperationArgs)

            if data_engine_id is None and not opts.urn:
                raise TypeError("Missing required property 'data_engine_id'")
            __props__.__dict__["data_engine_id"] = data_engine_id
            __props__.__dict__["forced_operation"] = forced_operation
        super(RestartDataEngineOperation, __self__).__init__(
            'tencentcloud:Dlc/restartDataEngineOperation:RestartDataEngineOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_engine_id: Optional[pulumi.Input[str]] = None,
            forced_operation: Optional[pulumi.Input[bool]] = None) -> 'RestartDataEngineOperation':
        """
        Get an existing RestartDataEngineOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input[bool] forced_operation: Whether to force restart and ignore tasks.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestartDataEngineOperationState.__new__(_RestartDataEngineOperationState)

        __props__.__dict__["data_engine_id"] = data_engine_id
        __props__.__dict__["forced_operation"] = forced_operation
        return RestartDataEngineOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> pulumi.Output[str]:
        """
        Engine unique id.
        """
        return pulumi.get(self, "data_engine_id")

    @property
    @pulumi.getter(name="forcedOperation")
    def forced_operation(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to force restart and ignore tasks.
        """
        return pulumi.get(self, "forced_operation")

