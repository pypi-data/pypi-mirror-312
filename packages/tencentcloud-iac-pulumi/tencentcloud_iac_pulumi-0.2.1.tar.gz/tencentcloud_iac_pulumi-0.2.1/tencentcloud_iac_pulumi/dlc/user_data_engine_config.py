# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserDataEngineConfigArgs', 'UserDataEngineConfig']

@pulumi.input_type
class UserDataEngineConfigArgs:
    def __init__(__self__, *,
                 data_engine_id: pulumi.Input[str],
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]]] = None,
                 session_resource_template: Optional[pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs']] = None):
        """
        The set of arguments for constructing a UserDataEngineConfig resource.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]] data_engine_config_pairs: Engine configuration items.
        :param pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs'] session_resource_template: Job engine resource configuration template.
        """
        pulumi.set(__self__, "data_engine_id", data_engine_id)
        if data_engine_config_pairs is not None:
            pulumi.set(__self__, "data_engine_config_pairs", data_engine_config_pairs)
        if session_resource_template is not None:
            pulumi.set(__self__, "session_resource_template", session_resource_template)

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> pulumi.Input[str]:
        """
        Engine unique id.
        """
        return pulumi.get(self, "data_engine_id")

    @data_engine_id.setter
    def data_engine_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_engine_id", value)

    @property
    @pulumi.getter(name="dataEngineConfigPairs")
    def data_engine_config_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]]]:
        """
        Engine configuration items.
        """
        return pulumi.get(self, "data_engine_config_pairs")

    @data_engine_config_pairs.setter
    def data_engine_config_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]]]):
        pulumi.set(self, "data_engine_config_pairs", value)

    @property
    @pulumi.getter(name="sessionResourceTemplate")
    def session_resource_template(self) -> Optional[pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs']]:
        """
        Job engine resource configuration template.
        """
        return pulumi.get(self, "session_resource_template")

    @session_resource_template.setter
    def session_resource_template(self, value: Optional[pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs']]):
        pulumi.set(self, "session_resource_template", value)


@pulumi.input_type
class _UserDataEngineConfigState:
    def __init__(__self__, *,
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]]] = None,
                 data_engine_id: Optional[pulumi.Input[str]] = None,
                 session_resource_template: Optional[pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs']] = None):
        """
        Input properties used for looking up and filtering UserDataEngineConfig resources.
        :param pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]] data_engine_config_pairs: Engine configuration items.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs'] session_resource_template: Job engine resource configuration template.
        """
        if data_engine_config_pairs is not None:
            pulumi.set(__self__, "data_engine_config_pairs", data_engine_config_pairs)
        if data_engine_id is not None:
            pulumi.set(__self__, "data_engine_id", data_engine_id)
        if session_resource_template is not None:
            pulumi.set(__self__, "session_resource_template", session_resource_template)

    @property
    @pulumi.getter(name="dataEngineConfigPairs")
    def data_engine_config_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]]]:
        """
        Engine configuration items.
        """
        return pulumi.get(self, "data_engine_config_pairs")

    @data_engine_config_pairs.setter
    def data_engine_config_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserDataEngineConfigDataEngineConfigPairArgs']]]]):
        pulumi.set(self, "data_engine_config_pairs", value)

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> Optional[pulumi.Input[str]]:
        """
        Engine unique id.
        """
        return pulumi.get(self, "data_engine_id")

    @data_engine_id.setter
    def data_engine_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine_id", value)

    @property
    @pulumi.getter(name="sessionResourceTemplate")
    def session_resource_template(self) -> Optional[pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs']]:
        """
        Job engine resource configuration template.
        """
        return pulumi.get(self, "session_resource_template")

    @session_resource_template.setter
    def session_resource_template(self, value: Optional[pulumi.Input['UserDataEngineConfigSessionResourceTemplateArgs']]):
        pulumi.set(self, "session_resource_template", value)


class UserDataEngineConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDataEngineConfigDataEngineConfigPairArgs']]]]] = None,
                 data_engine_id: Optional[pulumi.Input[str]] = None,
                 session_resource_template: Optional[pulumi.Input[pulumi.InputType['UserDataEngineConfigSessionResourceTemplateArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc user_data_engine_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user_data_engine_config = tencentcloud.dlc.UserDataEngineConfig("userDataEngineConfig",
            data_engine_config_pairs=[tencentcloud.dlc.UserDataEngineConfigDataEngineConfigPairArgs(
                config_item="qq",
                config_value="ff",
            )],
            data_engine_id="DataEngine-cgkvbas6",
            session_resource_template=tencentcloud.dlc.UserDataEngineConfigSessionResourceTemplateArgs(
                driver_size="small",
                executor_max_numbers=1,
                executor_nums=1,
                executor_size="small",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc user_data_engine_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/userDataEngineConfig:UserDataEngineConfig user_data_engine_config user_data_engine_config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDataEngineConfigDataEngineConfigPairArgs']]]] data_engine_config_pairs: Engine configuration items.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input[pulumi.InputType['UserDataEngineConfigSessionResourceTemplateArgs']] session_resource_template: Job engine resource configuration template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserDataEngineConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc user_data_engine_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user_data_engine_config = tencentcloud.dlc.UserDataEngineConfig("userDataEngineConfig",
            data_engine_config_pairs=[tencentcloud.dlc.UserDataEngineConfigDataEngineConfigPairArgs(
                config_item="qq",
                config_value="ff",
            )],
            data_engine_id="DataEngine-cgkvbas6",
            session_resource_template=tencentcloud.dlc.UserDataEngineConfigSessionResourceTemplateArgs(
                driver_size="small",
                executor_max_numbers=1,
                executor_nums=1,
                executor_size="small",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc user_data_engine_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/userDataEngineConfig:UserDataEngineConfig user_data_engine_config user_data_engine_config_id
        ```

        :param str resource_name: The name of the resource.
        :param UserDataEngineConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserDataEngineConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDataEngineConfigDataEngineConfigPairArgs']]]]] = None,
                 data_engine_id: Optional[pulumi.Input[str]] = None,
                 session_resource_template: Optional[pulumi.Input[pulumi.InputType['UserDataEngineConfigSessionResourceTemplateArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserDataEngineConfigArgs.__new__(UserDataEngineConfigArgs)

            __props__.__dict__["data_engine_config_pairs"] = data_engine_config_pairs
            if data_engine_id is None and not opts.urn:
                raise TypeError("Missing required property 'data_engine_id'")
            __props__.__dict__["data_engine_id"] = data_engine_id
            __props__.__dict__["session_resource_template"] = session_resource_template
        super(UserDataEngineConfig, __self__).__init__(
            'tencentcloud:Dlc/userDataEngineConfig:UserDataEngineConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDataEngineConfigDataEngineConfigPairArgs']]]]] = None,
            data_engine_id: Optional[pulumi.Input[str]] = None,
            session_resource_template: Optional[pulumi.Input[pulumi.InputType['UserDataEngineConfigSessionResourceTemplateArgs']]] = None) -> 'UserDataEngineConfig':
        """
        Get an existing UserDataEngineConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserDataEngineConfigDataEngineConfigPairArgs']]]] data_engine_config_pairs: Engine configuration items.
        :param pulumi.Input[str] data_engine_id: Engine unique id.
        :param pulumi.Input[pulumi.InputType['UserDataEngineConfigSessionResourceTemplateArgs']] session_resource_template: Job engine resource configuration template.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserDataEngineConfigState.__new__(_UserDataEngineConfigState)

        __props__.__dict__["data_engine_config_pairs"] = data_engine_config_pairs
        __props__.__dict__["data_engine_id"] = data_engine_id
        __props__.__dict__["session_resource_template"] = session_resource_template
        return UserDataEngineConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataEngineConfigPairs")
    def data_engine_config_pairs(self) -> pulumi.Output[Optional[Sequence['outputs.UserDataEngineConfigDataEngineConfigPair']]]:
        """
        Engine configuration items.
        """
        return pulumi.get(self, "data_engine_config_pairs")

    @property
    @pulumi.getter(name="dataEngineId")
    def data_engine_id(self) -> pulumi.Output[str]:
        """
        Engine unique id.
        """
        return pulumi.get(self, "data_engine_id")

    @property
    @pulumi.getter(name="sessionResourceTemplate")
    def session_resource_template(self) -> pulumi.Output[Optional['outputs.UserDataEngineConfigSessionResourceTemplate']]:
        """
        Job engine resource configuration template.
        """
        return pulumi.get(self, "session_resource_template")

