# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ModifyUserTypOperationArgs', 'ModifyUserTypOperation']

@pulumi.input_type
class ModifyUserTypOperationArgs:
    def __init__(__self__, *,
                 user_id: pulumi.Input[str],
                 user_type: pulumi.Input[str]):
        """
        The set of arguments for constructing a ModifyUserTypOperation resource.
        :param pulumi.Input[str] user_id: User id (uin), if left blank, it defaults to the caller's sub-uin.
        :param pulumi.Input[str] user_type: User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
        """
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        User id (uin), if left blank, it defaults to the caller's sub-uin.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Input[str]:
        """
        User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_type", value)


@pulumi.input_type
class _ModifyUserTypOperationState:
    def __init__(__self__, *,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ModifyUserTypOperation resources.
        :param pulumi.Input[str] user_id: User id (uin), if left blank, it defaults to the caller's sub-uin.
        :param pulumi.Input[str] user_type: User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
        """
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        User id (uin), if left blank, it defaults to the caller's sub-uin.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)


class ModifyUserTypOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc modify_user_typ_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        modify_user_typ_operation = tencentcloud.dlc.ModifyUserTypOperation("modifyUserTypOperation",
            user_id="127382378",
            user_type="ADMIN")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc modify_user_typ_operation can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/modifyUserTypOperation:ModifyUserTypOperation modify_user_typ_operation modify_user_typ_operation_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] user_id: User id (uin), if left blank, it defaults to the caller's sub-uin.
        :param pulumi.Input[str] user_type: User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModifyUserTypOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc modify_user_typ_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        modify_user_typ_operation = tencentcloud.dlc.ModifyUserTypOperation("modifyUserTypOperation",
            user_id="127382378",
            user_type="ADMIN")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc modify_user_typ_operation can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/modifyUserTypOperation:ModifyUserTypOperation modify_user_typ_operation modify_user_typ_operation_id
        ```

        :param str resource_name: The name of the resource.
        :param ModifyUserTypOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModifyUserTypOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModifyUserTypOperationArgs.__new__(ModifyUserTypOperationArgs)

            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            if user_type is None and not opts.urn:
                raise TypeError("Missing required property 'user_type'")
            __props__.__dict__["user_type"] = user_type
        super(ModifyUserTypOperation, __self__).__init__(
            'tencentcloud:Dlc/modifyUserTypOperation:ModifyUserTypOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            user_type: Optional[pulumi.Input[str]] = None) -> 'ModifyUserTypOperation':
        """
        Get an existing ModifyUserTypOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] user_id: User id (uin), if left blank, it defaults to the caller's sub-uin.
        :param pulumi.Input[str] user_type: User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModifyUserTypOperationState.__new__(_ModifyUserTypOperationState)

        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_type"] = user_type
        return ModifyUserTypOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        User id (uin), if left blank, it defaults to the caller's sub-uin.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[str]:
        """
        User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
        """
        return pulumi.get(self, "user_type")

