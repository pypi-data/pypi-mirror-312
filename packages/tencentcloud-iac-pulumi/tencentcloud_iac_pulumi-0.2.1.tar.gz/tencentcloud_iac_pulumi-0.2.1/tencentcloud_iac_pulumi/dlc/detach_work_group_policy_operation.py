# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DetachWorkGroupPolicyOperationArgs', 'DetachWorkGroupPolicyOperation']

@pulumi.input_type
class DetachWorkGroupPolicyOperationArgs:
    def __init__(__self__, *,
                 work_group_id: pulumi.Input[int],
                 policy_sets: Optional[pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]]] = None):
        """
        The set of arguments for constructing a DetachWorkGroupPolicyOperation resource.
        :param pulumi.Input[int] work_group_id: Work group id.
        :param pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]] policy_sets: The set of policies to be bound.
        """
        pulumi.set(__self__, "work_group_id", work_group_id)
        if policy_sets is not None:
            pulumi.set(__self__, "policy_sets", policy_sets)

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> pulumi.Input[int]:
        """
        Work group id.
        """
        return pulumi.get(self, "work_group_id")

    @work_group_id.setter
    def work_group_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "work_group_id", value)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]]]:
        """
        The set of policies to be bound.
        """
        return pulumi.get(self, "policy_sets")

    @policy_sets.setter
    def policy_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]]]):
        pulumi.set(self, "policy_sets", value)


@pulumi.input_type
class _DetachWorkGroupPolicyOperationState:
    def __init__(__self__, *,
                 policy_sets: Optional[pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]]] = None,
                 work_group_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DetachWorkGroupPolicyOperation resources.
        :param pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]] policy_sets: The set of policies to be bound.
        :param pulumi.Input[int] work_group_id: Work group id.
        """
        if policy_sets is not None:
            pulumi.set(__self__, "policy_sets", policy_sets)
        if work_group_id is not None:
            pulumi.set(__self__, "work_group_id", work_group_id)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]]]:
        """
        The set of policies to be bound.
        """
        return pulumi.get(self, "policy_sets")

    @policy_sets.setter
    def policy_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DetachWorkGroupPolicyOperationPolicySetArgs']]]]):
        pulumi.set(self, "policy_sets", value)

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Work group id.
        """
        return pulumi.get(self, "work_group_id")

    @work_group_id.setter
    def work_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "work_group_id", value)


class DetachWorkGroupPolicyOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DetachWorkGroupPolicyOperationPolicySetArgs']]]]] = None,
                 work_group_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a DetachWorkGroupPolicyOperation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DetachWorkGroupPolicyOperationPolicySetArgs']]]] policy_sets: The set of policies to be bound.
        :param pulumi.Input[int] work_group_id: Work group id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DetachWorkGroupPolicyOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DetachWorkGroupPolicyOperation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DetachWorkGroupPolicyOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DetachWorkGroupPolicyOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 policy_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DetachWorkGroupPolicyOperationPolicySetArgs']]]]] = None,
                 work_group_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DetachWorkGroupPolicyOperationArgs.__new__(DetachWorkGroupPolicyOperationArgs)

            __props__.__dict__["policy_sets"] = policy_sets
            if work_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'work_group_id'")
            __props__.__dict__["work_group_id"] = work_group_id
        super(DetachWorkGroupPolicyOperation, __self__).__init__(
            'tencentcloud:Dlc/detachWorkGroupPolicyOperation:DetachWorkGroupPolicyOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            policy_sets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DetachWorkGroupPolicyOperationPolicySetArgs']]]]] = None,
            work_group_id: Optional[pulumi.Input[int]] = None) -> 'DetachWorkGroupPolicyOperation':
        """
        Get an existing DetachWorkGroupPolicyOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DetachWorkGroupPolicyOperationPolicySetArgs']]]] policy_sets: The set of policies to be bound.
        :param pulumi.Input[int] work_group_id: Work group id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DetachWorkGroupPolicyOperationState.__new__(_DetachWorkGroupPolicyOperationState)

        __props__.__dict__["policy_sets"] = policy_sets
        __props__.__dict__["work_group_id"] = work_group_id
        return DetachWorkGroupPolicyOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="policySets")
    def policy_sets(self) -> pulumi.Output[Optional[Sequence['outputs.DetachWorkGroupPolicyOperationPolicySet']]]:
        """
        The set of policies to be bound.
        """
        return pulumi.get(self, "policy_sets")

    @property
    @pulumi.getter(name="workGroupId")
    def work_group_id(self) -> pulumi.Output[int]:
        """
        Work group id.
        """
        return pulumi.get(self, "work_group_id")

