# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataEngineArgs', 'DataEngine']

@pulumi.input_type
class DataEngineArgs:
    def __init__(__self__, *,
                 auto_resume: pulumi.Input[bool],
                 cluster_type: pulumi.Input[str],
                 data_engine_name: pulumi.Input[str],
                 engine_type: pulumi.Input[str],
                 mode: pulumi.Input[int],
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_suspend: Optional[pulumi.Input[bool]] = None,
                 auto_suspend_time: Optional[pulumi.Input[int]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 crontab_resume_suspend: Optional[pulumi.Input[int]] = None,
                 crontab_resume_suspend_strategy: Optional[pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs']] = None,
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]]] = None,
                 default_data_engine: Optional[pulumi.Input[bool]] = None,
                 elastic_limit: Optional[pulumi.Input[int]] = None,
                 elastic_switch: Optional[pulumi.Input[bool]] = None,
                 engine_exec_type: Optional[pulumi.Input[str]] = None,
                 image_version_name: Optional[pulumi.Input[str]] = None,
                 main_cluster_name: Optional[pulumi.Input[str]] = None,
                 max_clusters: Optional[pulumi.Input[int]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 min_clusters: Optional[pulumi.Input[int]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 session_resource_template: Optional[pulumi.Input['DataEngineSessionResourceTemplateArgs']] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 tolerable_queue_time: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a DataEngine resource.
        :param pulumi.Input[bool] auto_resume: Whether to automatically start the cluster, prepay not support.
        :param pulumi.Input[str] cluster_type: Engine cluster type, only support: spark_cu/presto_cu.
        :param pulumi.Input[str] data_engine_name: Engine name.
        :param pulumi.Input[str] engine_type: Engine type, only support: spark/presto.
        :param pulumi.Input[int] mode: Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        :param pulumi.Input[int] auto_renew: Engine auto renew, only support 0: Default, 1: AutoRenewON, 2: AutoRenewOFF.
        :param pulumi.Input[bool] auto_suspend: Whether to automatically suspend the cluster, prepay not support.
        :param pulumi.Input[int] auto_suspend_time: Cluster automatic suspension time, default 10 minutes.
        :param pulumi.Input[str] cidr_block: Engine VPC network segment, just like 192.0.2.1/24.
        :param pulumi.Input[int] crontab_resume_suspend: Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        :param pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs'] crontab_resume_suspend_strategy: Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        :param pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]] data_engine_config_pairs: Cluster advanced configuration.
        :param pulumi.Input[bool] default_data_engine: Whether it is the default virtual cluster.
        :param pulumi.Input[int] elastic_limit: For spark Batch ExecType, yearly and monthly cluster elastic limit.
        :param pulumi.Input[bool] elastic_switch: For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        :param pulumi.Input[str] engine_exec_type: Engine exec type, only support SQL(default) or BATCH.
        :param pulumi.Input[str] image_version_name: Cluster image version name. Such as SuperSQL-P 1.1; SuperSQL-S 3.2, etc., do not upload, and create a cluster with the latest mirror version by default.
        :param pulumi.Input[str] main_cluster_name: Primary cluster name, specified when creating a disaster recovery cluster.
        :param pulumi.Input[int] max_clusters: Engine max cluster size, MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] max_concurrency: Maximum number of concurrent tasks in a single cluster, default 5.
        :param pulumi.Input[str] message: Engine description information.
        :param pulumi.Input[int] min_clusters: Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[str] resource_type: Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        :param pulumi.Input['DataEngineSessionResourceTemplateArgs'] session_resource_template: For spark Batch ExecType, cluster session resource configuration template.
        :param pulumi.Input[int] size: Cluster size. Required when updating.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        :param pulumi.Input[int] tolerable_queue_time: Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        """
        pulumi.set(__self__, "auto_resume", auto_resume)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "data_engine_name", data_engine_name)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "mode", mode)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_suspend is not None:
            pulumi.set(__self__, "auto_suspend", auto_suspend)
        if auto_suspend_time is not None:
            pulumi.set(__self__, "auto_suspend_time", auto_suspend_time)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if crontab_resume_suspend is not None:
            pulumi.set(__self__, "crontab_resume_suspend", crontab_resume_suspend)
        if crontab_resume_suspend_strategy is not None:
            pulumi.set(__self__, "crontab_resume_suspend_strategy", crontab_resume_suspend_strategy)
        if data_engine_config_pairs is not None:
            pulumi.set(__self__, "data_engine_config_pairs", data_engine_config_pairs)
        if default_data_engine is not None:
            pulumi.set(__self__, "default_data_engine", default_data_engine)
        if elastic_limit is not None:
            pulumi.set(__self__, "elastic_limit", elastic_limit)
        if elastic_switch is not None:
            pulumi.set(__self__, "elastic_switch", elastic_switch)
        if engine_exec_type is not None:
            pulumi.set(__self__, "engine_exec_type", engine_exec_type)
        if image_version_name is not None:
            pulumi.set(__self__, "image_version_name", image_version_name)
        if main_cluster_name is not None:
            pulumi.set(__self__, "main_cluster_name", main_cluster_name)
        if max_clusters is not None:
            pulumi.set(__self__, "max_clusters", max_clusters)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if min_clusters is not None:
            pulumi.set(__self__, "min_clusters", min_clusters)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if session_resource_template is not None:
            pulumi.set(__self__, "session_resource_template", session_resource_template)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)
        if tolerable_queue_time is not None:
            pulumi.set(__self__, "tolerable_queue_time", tolerable_queue_time)

    @property
    @pulumi.getter(name="autoResume")
    def auto_resume(self) -> pulumi.Input[bool]:
        """
        Whether to automatically start the cluster, prepay not support.
        """
        return pulumi.get(self, "auto_resume")

    @auto_resume.setter
    def auto_resume(self, value: pulumi.Input[bool]):
        pulumi.set(self, "auto_resume", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[str]:
        """
        Engine cluster type, only support: spark_cu/presto_cu.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> pulumi.Input[str]:
        """
        Engine name.
        """
        return pulumi.get(self, "data_engine_name")

    @data_engine_name.setter
    def data_engine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_engine_name", value)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Input[str]:
        """
        Engine type, only support: spark/presto.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[int]:
        """
        Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[int]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[int]]:
        """
        Engine auto renew, only support 0: Default, 1: AutoRenewON, 2: AutoRenewOFF.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="autoSuspend")
    def auto_suspend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically suspend the cluster, prepay not support.
        """
        return pulumi.get(self, "auto_suspend")

    @auto_suspend.setter
    def auto_suspend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_suspend", value)

    @property
    @pulumi.getter(name="autoSuspendTime")
    def auto_suspend_time(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster automatic suspension time, default 10 minutes.
        """
        return pulumi.get(self, "auto_suspend_time")

    @auto_suspend_time.setter
    def auto_suspend_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_suspend_time", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Engine VPC network segment, just like 192.0.2.1/24.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="crontabResumeSuspend")
    def crontab_resume_suspend(self) -> Optional[pulumi.Input[int]]:
        """
        Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        """
        return pulumi.get(self, "crontab_resume_suspend")

    @crontab_resume_suspend.setter
    def crontab_resume_suspend(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crontab_resume_suspend", value)

    @property
    @pulumi.getter(name="crontabResumeSuspendStrategy")
    def crontab_resume_suspend_strategy(self) -> Optional[pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs']]:
        """
        Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        """
        return pulumi.get(self, "crontab_resume_suspend_strategy")

    @crontab_resume_suspend_strategy.setter
    def crontab_resume_suspend_strategy(self, value: Optional[pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs']]):
        pulumi.set(self, "crontab_resume_suspend_strategy", value)

    @property
    @pulumi.getter(name="dataEngineConfigPairs")
    def data_engine_config_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]]]:
        """
        Cluster advanced configuration.
        """
        return pulumi.get(self, "data_engine_config_pairs")

    @data_engine_config_pairs.setter
    def data_engine_config_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]]]):
        pulumi.set(self, "data_engine_config_pairs", value)

    @property
    @pulumi.getter(name="defaultDataEngine")
    def default_data_engine(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether it is the default virtual cluster.
        """
        return pulumi.get(self, "default_data_engine")

    @default_data_engine.setter
    def default_data_engine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_data_engine", value)

    @property
    @pulumi.getter(name="elasticLimit")
    def elastic_limit(self) -> Optional[pulumi.Input[int]]:
        """
        For spark Batch ExecType, yearly and monthly cluster elastic limit.
        """
        return pulumi.get(self, "elastic_limit")

    @elastic_limit.setter
    def elastic_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elastic_limit", value)

    @property
    @pulumi.getter(name="elasticSwitch")
    def elastic_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        """
        return pulumi.get(self, "elastic_switch")

    @elastic_switch.setter
    def elastic_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elastic_switch", value)

    @property
    @pulumi.getter(name="engineExecType")
    def engine_exec_type(self) -> Optional[pulumi.Input[str]]:
        """
        Engine exec type, only support SQL(default) or BATCH.
        """
        return pulumi.get(self, "engine_exec_type")

    @engine_exec_type.setter
    def engine_exec_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_exec_type", value)

    @property
    @pulumi.getter(name="imageVersionName")
    def image_version_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster image version name. Such as SuperSQL-P 1.1; SuperSQL-S 3.2, etc., do not upload, and create a cluster with the latest mirror version by default.
        """
        return pulumi.get(self, "image_version_name")

    @image_version_name.setter
    def image_version_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_version_name", value)

    @property
    @pulumi.getter(name="mainClusterName")
    def main_cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Primary cluster name, specified when creating a disaster recovery cluster.
        """
        return pulumi.get(self, "main_cluster_name")

    @main_cluster_name.setter
    def main_cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "main_cluster_name", value)

    @property
    @pulumi.getter(name="maxClusters")
    def max_clusters(self) -> Optional[pulumi.Input[int]]:
        """
        Engine max cluster size, MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        """
        return pulumi.get(self, "max_clusters")

    @max_clusters.setter
    def max_clusters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clusters", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent tasks in a single cluster, default 5.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Engine description information.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="minClusters")
    def min_clusters(self) -> Optional[pulumi.Input[int]]:
        """
        Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        """
        return pulumi.get(self, "min_clusters")

    @min_clusters.setter
    def min_clusters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_clusters", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Engine pay mode type, only support 0: postPay, 1: prePay(default).
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="sessionResourceTemplate")
    def session_resource_template(self) -> Optional[pulumi.Input['DataEngineSessionResourceTemplateArgs']]:
        """
        For spark Batch ExecType, cluster session resource configuration template.
        """
        return pulumi.get(self, "session_resource_template")

    @session_resource_template.setter
    def session_resource_template(self, value: Optional[pulumi.Input['DataEngineSessionResourceTemplateArgs']]):
        pulumi.set(self, "session_resource_template", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster size. Required when updating.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter(name="tolerableQueueTime")
    def tolerable_queue_time(self) -> Optional[pulumi.Input[int]]:
        """
        Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        """
        return pulumi.get(self, "tolerable_queue_time")

    @tolerable_queue_time.setter
    def tolerable_queue_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerable_queue_time", value)


@pulumi.input_type
class _DataEngineState:
    def __init__(__self__, *,
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_resume: Optional[pulumi.Input[bool]] = None,
                 auto_suspend: Optional[pulumi.Input[bool]] = None,
                 auto_suspend_time: Optional[pulumi.Input[int]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 crontab_resume_suspend: Optional[pulumi.Input[int]] = None,
                 crontab_resume_suspend_strategy: Optional[pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs']] = None,
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]]] = None,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 default_data_engine: Optional[pulumi.Input[bool]] = None,
                 elastic_limit: Optional[pulumi.Input[int]] = None,
                 elastic_switch: Optional[pulumi.Input[bool]] = None,
                 engine_exec_type: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 image_version_name: Optional[pulumi.Input[str]] = None,
                 main_cluster_name: Optional[pulumi.Input[str]] = None,
                 max_clusters: Optional[pulumi.Input[int]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 min_clusters: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 session_resource_template: Optional[pulumi.Input['DataEngineSessionResourceTemplateArgs']] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 tolerable_queue_time: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DataEngine resources.
        :param pulumi.Input[int] auto_renew: Engine auto renew, only support 0: Default, 1: AutoRenewON, 2: AutoRenewOFF.
        :param pulumi.Input[bool] auto_resume: Whether to automatically start the cluster, prepay not support.
        :param pulumi.Input[bool] auto_suspend: Whether to automatically suspend the cluster, prepay not support.
        :param pulumi.Input[int] auto_suspend_time: Cluster automatic suspension time, default 10 minutes.
        :param pulumi.Input[str] cidr_block: Engine VPC network segment, just like 192.0.2.1/24.
        :param pulumi.Input[str] cluster_type: Engine cluster type, only support: spark_cu/presto_cu.
        :param pulumi.Input[int] crontab_resume_suspend: Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        :param pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs'] crontab_resume_suspend_strategy: Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        :param pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]] data_engine_config_pairs: Cluster advanced configuration.
        :param pulumi.Input[str] data_engine_name: Engine name.
        :param pulumi.Input[bool] default_data_engine: Whether it is the default virtual cluster.
        :param pulumi.Input[int] elastic_limit: For spark Batch ExecType, yearly and monthly cluster elastic limit.
        :param pulumi.Input[bool] elastic_switch: For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        :param pulumi.Input[str] engine_exec_type: Engine exec type, only support SQL(default) or BATCH.
        :param pulumi.Input[str] engine_type: Engine type, only support: spark/presto.
        :param pulumi.Input[str] image_version_name: Cluster image version name. Such as SuperSQL-P 1.1; SuperSQL-S 3.2, etc., do not upload, and create a cluster with the latest mirror version by default.
        :param pulumi.Input[str] main_cluster_name: Primary cluster name, specified when creating a disaster recovery cluster.
        :param pulumi.Input[int] max_clusters: Engine max cluster size, MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] max_concurrency: Maximum number of concurrent tasks in a single cluster, default 5.
        :param pulumi.Input[str] message: Engine description information.
        :param pulumi.Input[int] min_clusters: Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] mode: Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[str] resource_type: Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        :param pulumi.Input['DataEngineSessionResourceTemplateArgs'] session_resource_template: For spark Batch ExecType, cluster session resource configuration template.
        :param pulumi.Input[int] size: Cluster size. Required when updating.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        :param pulumi.Input[int] tolerable_queue_time: Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        """
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_resume is not None:
            pulumi.set(__self__, "auto_resume", auto_resume)
        if auto_suspend is not None:
            pulumi.set(__self__, "auto_suspend", auto_suspend)
        if auto_suspend_time is not None:
            pulumi.set(__self__, "auto_suspend_time", auto_suspend_time)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if crontab_resume_suspend is not None:
            pulumi.set(__self__, "crontab_resume_suspend", crontab_resume_suspend)
        if crontab_resume_suspend_strategy is not None:
            pulumi.set(__self__, "crontab_resume_suspend_strategy", crontab_resume_suspend_strategy)
        if data_engine_config_pairs is not None:
            pulumi.set(__self__, "data_engine_config_pairs", data_engine_config_pairs)
        if data_engine_name is not None:
            pulumi.set(__self__, "data_engine_name", data_engine_name)
        if default_data_engine is not None:
            pulumi.set(__self__, "default_data_engine", default_data_engine)
        if elastic_limit is not None:
            pulumi.set(__self__, "elastic_limit", elastic_limit)
        if elastic_switch is not None:
            pulumi.set(__self__, "elastic_switch", elastic_switch)
        if engine_exec_type is not None:
            pulumi.set(__self__, "engine_exec_type", engine_exec_type)
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if image_version_name is not None:
            pulumi.set(__self__, "image_version_name", image_version_name)
        if main_cluster_name is not None:
            pulumi.set(__self__, "main_cluster_name", main_cluster_name)
        if max_clusters is not None:
            pulumi.set(__self__, "max_clusters", max_clusters)
        if max_concurrency is not None:
            pulumi.set(__self__, "max_concurrency", max_concurrency)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if min_clusters is not None:
            pulumi.set(__self__, "min_clusters", min_clusters)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if session_resource_template is not None:
            pulumi.set(__self__, "session_resource_template", session_resource_template)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)
        if tolerable_queue_time is not None:
            pulumi.set(__self__, "tolerable_queue_time", tolerable_queue_time)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[int]]:
        """
        Engine auto renew, only support 0: Default, 1: AutoRenewON, 2: AutoRenewOFF.
        """
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew", value)

    @property
    @pulumi.getter(name="autoResume")
    def auto_resume(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically start the cluster, prepay not support.
        """
        return pulumi.get(self, "auto_resume")

    @auto_resume.setter
    def auto_resume(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_resume", value)

    @property
    @pulumi.getter(name="autoSuspend")
    def auto_suspend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to automatically suspend the cluster, prepay not support.
        """
        return pulumi.get(self, "auto_suspend")

    @auto_suspend.setter
    def auto_suspend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_suspend", value)

    @property
    @pulumi.getter(name="autoSuspendTime")
    def auto_suspend_time(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster automatic suspension time, default 10 minutes.
        """
        return pulumi.get(self, "auto_suspend_time")

    @auto_suspend_time.setter
    def auto_suspend_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_suspend_time", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Engine VPC network segment, just like 192.0.2.1/24.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        Engine cluster type, only support: spark_cu/presto_cu.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="crontabResumeSuspend")
    def crontab_resume_suspend(self) -> Optional[pulumi.Input[int]]:
        """
        Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        """
        return pulumi.get(self, "crontab_resume_suspend")

    @crontab_resume_suspend.setter
    def crontab_resume_suspend(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "crontab_resume_suspend", value)

    @property
    @pulumi.getter(name="crontabResumeSuspendStrategy")
    def crontab_resume_suspend_strategy(self) -> Optional[pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs']]:
        """
        Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        """
        return pulumi.get(self, "crontab_resume_suspend_strategy")

    @crontab_resume_suspend_strategy.setter
    def crontab_resume_suspend_strategy(self, value: Optional[pulumi.Input['DataEngineCrontabResumeSuspendStrategyArgs']]):
        pulumi.set(self, "crontab_resume_suspend_strategy", value)

    @property
    @pulumi.getter(name="dataEngineConfigPairs")
    def data_engine_config_pairs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]]]:
        """
        Cluster advanced configuration.
        """
        return pulumi.get(self, "data_engine_config_pairs")

    @data_engine_config_pairs.setter
    def data_engine_config_pairs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataEngineDataEngineConfigPairArgs']]]]):
        pulumi.set(self, "data_engine_config_pairs", value)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> Optional[pulumi.Input[str]]:
        """
        Engine name.
        """
        return pulumi.get(self, "data_engine_name")

    @data_engine_name.setter
    def data_engine_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine_name", value)

    @property
    @pulumi.getter(name="defaultDataEngine")
    def default_data_engine(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether it is the default virtual cluster.
        """
        return pulumi.get(self, "default_data_engine")

    @default_data_engine.setter
    def default_data_engine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_data_engine", value)

    @property
    @pulumi.getter(name="elasticLimit")
    def elastic_limit(self) -> Optional[pulumi.Input[int]]:
        """
        For spark Batch ExecType, yearly and monthly cluster elastic limit.
        """
        return pulumi.get(self, "elastic_limit")

    @elastic_limit.setter
    def elastic_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "elastic_limit", value)

    @property
    @pulumi.getter(name="elasticSwitch")
    def elastic_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        """
        return pulumi.get(self, "elastic_switch")

    @elastic_switch.setter
    def elastic_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "elastic_switch", value)

    @property
    @pulumi.getter(name="engineExecType")
    def engine_exec_type(self) -> Optional[pulumi.Input[str]]:
        """
        Engine exec type, only support SQL(default) or BATCH.
        """
        return pulumi.get(self, "engine_exec_type")

    @engine_exec_type.setter
    def engine_exec_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_exec_type", value)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[str]]:
        """
        Engine type, only support: spark/presto.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter(name="imageVersionName")
    def image_version_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster image version name. Such as SuperSQL-P 1.1; SuperSQL-S 3.2, etc., do not upload, and create a cluster with the latest mirror version by default.
        """
        return pulumi.get(self, "image_version_name")

    @image_version_name.setter
    def image_version_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_version_name", value)

    @property
    @pulumi.getter(name="mainClusterName")
    def main_cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        Primary cluster name, specified when creating a disaster recovery cluster.
        """
        return pulumi.get(self, "main_cluster_name")

    @main_cluster_name.setter
    def main_cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "main_cluster_name", value)

    @property
    @pulumi.getter(name="maxClusters")
    def max_clusters(self) -> Optional[pulumi.Input[int]]:
        """
        Engine max cluster size, MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        """
        return pulumi.get(self, "max_clusters")

    @max_clusters.setter
    def max_clusters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_clusters", value)

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of concurrent tasks in a single cluster, default 5.
        """
        return pulumi.get(self, "max_concurrency")

    @max_concurrency.setter
    def max_concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_concurrency", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Engine description information.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="minClusters")
    def min_clusters(self) -> Optional[pulumi.Input[int]]:
        """
        Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        """
        return pulumi.get(self, "min_clusters")

    @min_clusters.setter
    def min_clusters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_clusters", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[int]]:
        """
        Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Engine pay mode type, only support 0: postPay, 1: prePay(default).
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="sessionResourceTemplate")
    def session_resource_template(self) -> Optional[pulumi.Input['DataEngineSessionResourceTemplateArgs']]:
        """
        For spark Batch ExecType, cluster session resource configuration template.
        """
        return pulumi.get(self, "session_resource_template")

    @session_resource_template.setter
    def session_resource_template(self, value: Optional[pulumi.Input['DataEngineSessionResourceTemplateArgs']]):
        pulumi.set(self, "session_resource_template", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Cluster size. Required when updating.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter(name="tolerableQueueTime")
    def tolerable_queue_time(self) -> Optional[pulumi.Input[int]]:
        """
        Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        """
        return pulumi.get(self, "tolerable_queue_time")

    @tolerable_queue_time.setter
    def tolerable_queue_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tolerable_queue_time", value)


class DataEngine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_resume: Optional[pulumi.Input[bool]] = None,
                 auto_suspend: Optional[pulumi.Input[bool]] = None,
                 auto_suspend_time: Optional[pulumi.Input[int]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 crontab_resume_suspend: Optional[pulumi.Input[int]] = None,
                 crontab_resume_suspend_strategy: Optional[pulumi.Input[pulumi.InputType['DataEngineCrontabResumeSuspendStrategyArgs']]] = None,
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataEngineDataEngineConfigPairArgs']]]]] = None,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 default_data_engine: Optional[pulumi.Input[bool]] = None,
                 elastic_limit: Optional[pulumi.Input[int]] = None,
                 elastic_switch: Optional[pulumi.Input[bool]] = None,
                 engine_exec_type: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 image_version_name: Optional[pulumi.Input[str]] = None,
                 main_cluster_name: Optional[pulumi.Input[str]] = None,
                 max_clusters: Optional[pulumi.Input[int]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 min_clusters: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 session_resource_template: Optional[pulumi.Input[pulumi.InputType['DataEngineSessionResourceTemplateArgs']]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 tolerable_queue_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc data_engine

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        data_engine = tencentcloud.dlc.DataEngine("dataEngine",
            auto_resume=False,
            auto_suspend=False,
            cidr_block="10.255.0.0/16",
            cluster_type="spark_cu",
            crontab_resume_suspend=0,
            data_engine_name="testSpark",
            default_data_engine=False,
            engine_exec_type="BATCH",
            engine_type="spark",
            max_clusters=1,
            message="test spark1",
            min_clusters=1,
            mode=1,
            pay_mode=0,
            size=16,
            time_span=1,
            time_unit="h")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc data_engine can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/dataEngine:DataEngine data_engine data_engine_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew: Engine auto renew, only support 0: Default, 1: AutoRenewON, 2: AutoRenewOFF.
        :param pulumi.Input[bool] auto_resume: Whether to automatically start the cluster, prepay not support.
        :param pulumi.Input[bool] auto_suspend: Whether to automatically suspend the cluster, prepay not support.
        :param pulumi.Input[int] auto_suspend_time: Cluster automatic suspension time, default 10 minutes.
        :param pulumi.Input[str] cidr_block: Engine VPC network segment, just like 192.0.2.1/24.
        :param pulumi.Input[str] cluster_type: Engine cluster type, only support: spark_cu/presto_cu.
        :param pulumi.Input[int] crontab_resume_suspend: Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        :param pulumi.Input[pulumi.InputType['DataEngineCrontabResumeSuspendStrategyArgs']] crontab_resume_suspend_strategy: Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataEngineDataEngineConfigPairArgs']]]] data_engine_config_pairs: Cluster advanced configuration.
        :param pulumi.Input[str] data_engine_name: Engine name.
        :param pulumi.Input[bool] default_data_engine: Whether it is the default virtual cluster.
        :param pulumi.Input[int] elastic_limit: For spark Batch ExecType, yearly and monthly cluster elastic limit.
        :param pulumi.Input[bool] elastic_switch: For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        :param pulumi.Input[str] engine_exec_type: Engine exec type, only support SQL(default) or BATCH.
        :param pulumi.Input[str] engine_type: Engine type, only support: spark/presto.
        :param pulumi.Input[str] image_version_name: Cluster image version name. Such as SuperSQL-P 1.1; SuperSQL-S 3.2, etc., do not upload, and create a cluster with the latest mirror version by default.
        :param pulumi.Input[str] main_cluster_name: Primary cluster name, specified when creating a disaster recovery cluster.
        :param pulumi.Input[int] max_clusters: Engine max cluster size, MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] max_concurrency: Maximum number of concurrent tasks in a single cluster, default 5.
        :param pulumi.Input[str] message: Engine description information.
        :param pulumi.Input[int] min_clusters: Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] mode: Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[str] resource_type: Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        :param pulumi.Input[pulumi.InputType['DataEngineSessionResourceTemplateArgs']] session_resource_template: For spark Batch ExecType, cluster session resource configuration template.
        :param pulumi.Input[int] size: Cluster size. Required when updating.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        :param pulumi.Input[int] tolerable_queue_time: Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataEngineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc data_engine

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        data_engine = tencentcloud.dlc.DataEngine("dataEngine",
            auto_resume=False,
            auto_suspend=False,
            cidr_block="10.255.0.0/16",
            cluster_type="spark_cu",
            crontab_resume_suspend=0,
            data_engine_name="testSpark",
            default_data_engine=False,
            engine_exec_type="BATCH",
            engine_type="spark",
            max_clusters=1,
            message="test spark1",
            min_clusters=1,
            mode=1,
            pay_mode=0,
            size=16,
            time_span=1,
            time_unit="h")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc data_engine can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/dataEngine:DataEngine data_engine data_engine_id
        ```

        :param str resource_name: The name of the resource.
        :param DataEngineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataEngineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew: Optional[pulumi.Input[int]] = None,
                 auto_resume: Optional[pulumi.Input[bool]] = None,
                 auto_suspend: Optional[pulumi.Input[bool]] = None,
                 auto_suspend_time: Optional[pulumi.Input[int]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 crontab_resume_suspend: Optional[pulumi.Input[int]] = None,
                 crontab_resume_suspend_strategy: Optional[pulumi.Input[pulumi.InputType['DataEngineCrontabResumeSuspendStrategyArgs']]] = None,
                 data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataEngineDataEngineConfigPairArgs']]]]] = None,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 default_data_engine: Optional[pulumi.Input[bool]] = None,
                 elastic_limit: Optional[pulumi.Input[int]] = None,
                 elastic_switch: Optional[pulumi.Input[bool]] = None,
                 engine_exec_type: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 image_version_name: Optional[pulumi.Input[str]] = None,
                 main_cluster_name: Optional[pulumi.Input[str]] = None,
                 max_clusters: Optional[pulumi.Input[int]] = None,
                 max_concurrency: Optional[pulumi.Input[int]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 min_clusters: Optional[pulumi.Input[int]] = None,
                 mode: Optional[pulumi.Input[int]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 session_resource_template: Optional[pulumi.Input[pulumi.InputType['DataEngineSessionResourceTemplateArgs']]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 tolerable_queue_time: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataEngineArgs.__new__(DataEngineArgs)

            __props__.__dict__["auto_renew"] = auto_renew
            if auto_resume is None and not opts.urn:
                raise TypeError("Missing required property 'auto_resume'")
            __props__.__dict__["auto_resume"] = auto_resume
            __props__.__dict__["auto_suspend"] = auto_suspend
            __props__.__dict__["auto_suspend_time"] = auto_suspend_time
            __props__.__dict__["cidr_block"] = cidr_block
            if cluster_type is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_type'")
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["crontab_resume_suspend"] = crontab_resume_suspend
            __props__.__dict__["crontab_resume_suspend_strategy"] = crontab_resume_suspend_strategy
            __props__.__dict__["data_engine_config_pairs"] = data_engine_config_pairs
            if data_engine_name is None and not opts.urn:
                raise TypeError("Missing required property 'data_engine_name'")
            __props__.__dict__["data_engine_name"] = data_engine_name
            __props__.__dict__["default_data_engine"] = default_data_engine
            __props__.__dict__["elastic_limit"] = elastic_limit
            __props__.__dict__["elastic_switch"] = elastic_switch
            __props__.__dict__["engine_exec_type"] = engine_exec_type
            if engine_type is None and not opts.urn:
                raise TypeError("Missing required property 'engine_type'")
            __props__.__dict__["engine_type"] = engine_type
            __props__.__dict__["image_version_name"] = image_version_name
            __props__.__dict__["main_cluster_name"] = main_cluster_name
            __props__.__dict__["max_clusters"] = max_clusters
            __props__.__dict__["max_concurrency"] = max_concurrency
            __props__.__dict__["message"] = message
            __props__.__dict__["min_clusters"] = min_clusters
            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__.__dict__["mode"] = mode
            __props__.__dict__["pay_mode"] = pay_mode
            __props__.__dict__["resource_type"] = resource_type
            __props__.__dict__["session_resource_template"] = session_resource_template
            __props__.__dict__["size"] = size
            __props__.__dict__["time_span"] = time_span
            __props__.__dict__["time_unit"] = time_unit
            __props__.__dict__["tolerable_queue_time"] = tolerable_queue_time
        super(DataEngine, __self__).__init__(
            'tencentcloud:Dlc/dataEngine:DataEngine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew: Optional[pulumi.Input[int]] = None,
            auto_resume: Optional[pulumi.Input[bool]] = None,
            auto_suspend: Optional[pulumi.Input[bool]] = None,
            auto_suspend_time: Optional[pulumi.Input[int]] = None,
            cidr_block: Optional[pulumi.Input[str]] = None,
            cluster_type: Optional[pulumi.Input[str]] = None,
            crontab_resume_suspend: Optional[pulumi.Input[int]] = None,
            crontab_resume_suspend_strategy: Optional[pulumi.Input[pulumi.InputType['DataEngineCrontabResumeSuspendStrategyArgs']]] = None,
            data_engine_config_pairs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataEngineDataEngineConfigPairArgs']]]]] = None,
            data_engine_name: Optional[pulumi.Input[str]] = None,
            default_data_engine: Optional[pulumi.Input[bool]] = None,
            elastic_limit: Optional[pulumi.Input[int]] = None,
            elastic_switch: Optional[pulumi.Input[bool]] = None,
            engine_exec_type: Optional[pulumi.Input[str]] = None,
            engine_type: Optional[pulumi.Input[str]] = None,
            image_version_name: Optional[pulumi.Input[str]] = None,
            main_cluster_name: Optional[pulumi.Input[str]] = None,
            max_clusters: Optional[pulumi.Input[int]] = None,
            max_concurrency: Optional[pulumi.Input[int]] = None,
            message: Optional[pulumi.Input[str]] = None,
            min_clusters: Optional[pulumi.Input[int]] = None,
            mode: Optional[pulumi.Input[int]] = None,
            pay_mode: Optional[pulumi.Input[int]] = None,
            resource_type: Optional[pulumi.Input[str]] = None,
            session_resource_template: Optional[pulumi.Input[pulumi.InputType['DataEngineSessionResourceTemplateArgs']]] = None,
            size: Optional[pulumi.Input[int]] = None,
            time_span: Optional[pulumi.Input[int]] = None,
            time_unit: Optional[pulumi.Input[str]] = None,
            tolerable_queue_time: Optional[pulumi.Input[int]] = None) -> 'DataEngine':
        """
        Get an existing DataEngine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew: Engine auto renew, only support 0: Default, 1: AutoRenewON, 2: AutoRenewOFF.
        :param pulumi.Input[bool] auto_resume: Whether to automatically start the cluster, prepay not support.
        :param pulumi.Input[bool] auto_suspend: Whether to automatically suspend the cluster, prepay not support.
        :param pulumi.Input[int] auto_suspend_time: Cluster automatic suspension time, default 10 minutes.
        :param pulumi.Input[str] cidr_block: Engine VPC network segment, just like 192.0.2.1/24.
        :param pulumi.Input[str] cluster_type: Engine cluster type, only support: spark_cu/presto_cu.
        :param pulumi.Input[int] crontab_resume_suspend: Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        :param pulumi.Input[pulumi.InputType['DataEngineCrontabResumeSuspendStrategyArgs']] crontab_resume_suspend_strategy: Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DataEngineDataEngineConfigPairArgs']]]] data_engine_config_pairs: Cluster advanced configuration.
        :param pulumi.Input[str] data_engine_name: Engine name.
        :param pulumi.Input[bool] default_data_engine: Whether it is the default virtual cluster.
        :param pulumi.Input[int] elastic_limit: For spark Batch ExecType, yearly and monthly cluster elastic limit.
        :param pulumi.Input[bool] elastic_switch: For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        :param pulumi.Input[str] engine_exec_type: Engine exec type, only support SQL(default) or BATCH.
        :param pulumi.Input[str] engine_type: Engine type, only support: spark/presto.
        :param pulumi.Input[str] image_version_name: Cluster image version name. Such as SuperSQL-P 1.1; SuperSQL-S 3.2, etc., do not upload, and create a cluster with the latest mirror version by default.
        :param pulumi.Input[str] main_cluster_name: Primary cluster name, specified when creating a disaster recovery cluster.
        :param pulumi.Input[int] max_clusters: Engine max cluster size, MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] max_concurrency: Maximum number of concurrent tasks in a single cluster, default 5.
        :param pulumi.Input[str] message: Engine description information.
        :param pulumi.Input[int] min_clusters: Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        :param pulumi.Input[int] mode: Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[str] resource_type: Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        :param pulumi.Input[pulumi.InputType['DataEngineSessionResourceTemplateArgs']] session_resource_template: For spark Batch ExecType, cluster session resource configuration template.
        :param pulumi.Input[int] size: Cluster size. Required when updating.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        :param pulumi.Input[int] tolerable_queue_time: Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DataEngineState.__new__(_DataEngineState)

        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["auto_resume"] = auto_resume
        __props__.__dict__["auto_suspend"] = auto_suspend
        __props__.__dict__["auto_suspend_time"] = auto_suspend_time
        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["crontab_resume_suspend"] = crontab_resume_suspend
        __props__.__dict__["crontab_resume_suspend_strategy"] = crontab_resume_suspend_strategy
        __props__.__dict__["data_engine_config_pairs"] = data_engine_config_pairs
        __props__.__dict__["data_engine_name"] = data_engine_name
        __props__.__dict__["default_data_engine"] = default_data_engine
        __props__.__dict__["elastic_limit"] = elastic_limit
        __props__.__dict__["elastic_switch"] = elastic_switch
        __props__.__dict__["engine_exec_type"] = engine_exec_type
        __props__.__dict__["engine_type"] = engine_type
        __props__.__dict__["image_version_name"] = image_version_name
        __props__.__dict__["main_cluster_name"] = main_cluster_name
        __props__.__dict__["max_clusters"] = max_clusters
        __props__.__dict__["max_concurrency"] = max_concurrency
        __props__.__dict__["message"] = message
        __props__.__dict__["min_clusters"] = min_clusters
        __props__.__dict__["mode"] = mode
        __props__.__dict__["pay_mode"] = pay_mode
        __props__.__dict__["resource_type"] = resource_type
        __props__.__dict__["session_resource_template"] = session_resource_template
        __props__.__dict__["size"] = size
        __props__.__dict__["time_span"] = time_span
        __props__.__dict__["time_unit"] = time_unit
        __props__.__dict__["tolerable_queue_time"] = tolerable_queue_time
        return DataEngine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[int]]:
        """
        Engine auto renew, only support 0: Default, 1: AutoRenewON, 2: AutoRenewOFF.
        """
        return pulumi.get(self, "auto_renew")

    @property
    @pulumi.getter(name="autoResume")
    def auto_resume(self) -> pulumi.Output[bool]:
        """
        Whether to automatically start the cluster, prepay not support.
        """
        return pulumi.get(self, "auto_resume")

    @property
    @pulumi.getter(name="autoSuspend")
    def auto_suspend(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to automatically suspend the cluster, prepay not support.
        """
        return pulumi.get(self, "auto_suspend")

    @property
    @pulumi.getter(name="autoSuspendTime")
    def auto_suspend_time(self) -> pulumi.Output[int]:
        """
        Cluster automatic suspension time, default 10 minutes.
        """
        return pulumi.get(self, "auto_suspend_time")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[Optional[str]]:
        """
        Engine VPC network segment, just like 192.0.2.1/24.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[str]:
        """
        Engine cluster type, only support: spark_cu/presto_cu.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter(name="crontabResumeSuspend")
    def crontab_resume_suspend(self) -> pulumi.Output[Optional[int]]:
        """
        Engine crontab resume or suspend strategy, only support: 0: Wait(default), 1: Kill.
        """
        return pulumi.get(self, "crontab_resume_suspend")

    @property
    @pulumi.getter(name="crontabResumeSuspendStrategy")
    def crontab_resume_suspend_strategy(self) -> pulumi.Output['outputs.DataEngineCrontabResumeSuspendStrategy']:
        """
        Engine auto suspend strategy, when AutoSuspend is true, CrontabResumeSuspend must stop.
        """
        return pulumi.get(self, "crontab_resume_suspend_strategy")

    @property
    @pulumi.getter(name="dataEngineConfigPairs")
    def data_engine_config_pairs(self) -> pulumi.Output[Optional[Sequence['outputs.DataEngineDataEngineConfigPair']]]:
        """
        Cluster advanced configuration.
        """
        return pulumi.get(self, "data_engine_config_pairs")

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> pulumi.Output[str]:
        """
        Engine name.
        """
        return pulumi.get(self, "data_engine_name")

    @property
    @pulumi.getter(name="defaultDataEngine")
    def default_data_engine(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether it is the default virtual cluster.
        """
        return pulumi.get(self, "default_data_engine")

    @property
    @pulumi.getter(name="elasticLimit")
    def elastic_limit(self) -> pulumi.Output[Optional[int]]:
        """
        For spark Batch ExecType, yearly and monthly cluster elastic limit.
        """
        return pulumi.get(self, "elastic_limit")

    @property
    @pulumi.getter(name="elasticSwitch")
    def elastic_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        For spark Batch ExecType, yearly and monthly cluster whether to enable elasticity.
        """
        return pulumi.get(self, "elastic_switch")

    @property
    @pulumi.getter(name="engineExecType")
    def engine_exec_type(self) -> pulumi.Output[Optional[str]]:
        """
        Engine exec type, only support SQL(default) or BATCH.
        """
        return pulumi.get(self, "engine_exec_type")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Output[str]:
        """
        Engine type, only support: spark/presto.
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter(name="imageVersionName")
    def image_version_name(self) -> pulumi.Output[str]:
        """
        Cluster image version name. Such as SuperSQL-P 1.1; SuperSQL-S 3.2, etc., do not upload, and create a cluster with the latest mirror version by default.
        """
        return pulumi.get(self, "image_version_name")

    @property
    @pulumi.getter(name="mainClusterName")
    def main_cluster_name(self) -> pulumi.Output[Optional[str]]:
        """
        Primary cluster name, specified when creating a disaster recovery cluster.
        """
        return pulumi.get(self, "main_cluster_name")

    @property
    @pulumi.getter(name="maxClusters")
    def max_clusters(self) -> pulumi.Output[Optional[int]]:
        """
        Engine max cluster size, MaxClusters less than or equal to 10 and MaxClusters bigger than MinClusters.
        """
        return pulumi.get(self, "max_clusters")

    @property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> pulumi.Output[int]:
        """
        Maximum number of concurrent tasks in a single cluster, default 5.
        """
        return pulumi.get(self, "max_concurrency")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[Optional[str]]:
        """
        Engine description information.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="minClusters")
    def min_clusters(self) -> pulumi.Output[Optional[int]]:
        """
        Engine min size, greater than or equal to 1 and MaxClusters bigger than MinClusters.
        """
        return pulumi.get(self, "min_clusters")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[int]:
        """
        Engine mode, only support 1: ByAmount, 2: YearlyAndMonthly.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Engine pay mode type, only support 0: postPay, 1: prePay(default).
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        """
        Engine resource type not match, only support: Standard_CU/Memory_CU(only BATCH ExecType).
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="sessionResourceTemplate")
    def session_resource_template(self) -> pulumi.Output['outputs.DataEngineSessionResourceTemplate']:
        """
        For spark Batch ExecType, cluster session resource configuration template.
        """
        return pulumi.get(self, "session_resource_template")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[Optional[int]]:
        """
        Cluster size. Required when updating.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Output[Optional[int]]:
        """
        Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter(name="tolerableQueueTime")
    def tolerable_queue_time(self) -> pulumi.Output[Optional[int]]:
        """
        Tolerable queuing time, default 0. scaling may be triggered when tasks are queued for longer than the tolerable time. if this parameter is 0, it means that capacity expansion may be triggered immediately once a task is queued.
        """
        return pulumi.get(self, "tolerable_queue_time")

