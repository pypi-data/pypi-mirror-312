# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCheckDataEngineConfigPairsValidityResult',
    'AwaitableGetCheckDataEngineConfigPairsValidityResult',
    'get_check_data_engine_config_pairs_validity',
    'get_check_data_engine_config_pairs_validity_output',
]

@pulumi.output_type
class GetCheckDataEngineConfigPairsValidityResult:
    """
    A collection of values returned by getCheckDataEngineConfigPairsValidity.
    """
    def __init__(__self__, child_image_version_id=None, data_engine_config_pairs=None, id=None, image_version_id=None, is_available=None, result_output_file=None, unavailable_configs=None):
        if child_image_version_id and not isinstance(child_image_version_id, str):
            raise TypeError("Expected argument 'child_image_version_id' to be a str")
        pulumi.set(__self__, "child_image_version_id", child_image_version_id)
        if data_engine_config_pairs and not isinstance(data_engine_config_pairs, list):
            raise TypeError("Expected argument 'data_engine_config_pairs' to be a list")
        pulumi.set(__self__, "data_engine_config_pairs", data_engine_config_pairs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_version_id and not isinstance(image_version_id, str):
            raise TypeError("Expected argument 'image_version_id' to be a str")
        pulumi.set(__self__, "image_version_id", image_version_id)
        if is_available and not isinstance(is_available, bool):
            raise TypeError("Expected argument 'is_available' to be a bool")
        pulumi.set(__self__, "is_available", is_available)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if unavailable_configs and not isinstance(unavailable_configs, list):
            raise TypeError("Expected argument 'unavailable_configs' to be a list")
        pulumi.set(__self__, "unavailable_configs", unavailable_configs)

    @property
    @pulumi.getter(name="childImageVersionId")
    def child_image_version_id(self) -> Optional[str]:
        return pulumi.get(self, "child_image_version_id")

    @property
    @pulumi.getter(name="dataEngineConfigPairs")
    def data_engine_config_pairs(self) -> Optional[Sequence['outputs.GetCheckDataEngineConfigPairsValidityDataEngineConfigPairResult']]:
        return pulumi.get(self, "data_engine_config_pairs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageVersionId")
    def image_version_id(self) -> Optional[str]:
        return pulumi.get(self, "image_version_id")

    @property
    @pulumi.getter(name="isAvailable")
    def is_available(self) -> bool:
        """
        Parameter validity: true: valid, false: at least one invalid parameter exists.
        """
        return pulumi.get(self, "is_available")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="unavailableConfigs")
    def unavailable_configs(self) -> Sequence[str]:
        """
        Invalid parameter set.
        """
        return pulumi.get(self, "unavailable_configs")


class AwaitableGetCheckDataEngineConfigPairsValidityResult(GetCheckDataEngineConfigPairsValidityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCheckDataEngineConfigPairsValidityResult(
            child_image_version_id=self.child_image_version_id,
            data_engine_config_pairs=self.data_engine_config_pairs,
            id=self.id,
            image_version_id=self.image_version_id,
            is_available=self.is_available,
            result_output_file=self.result_output_file,
            unavailable_configs=self.unavailable_configs)


def get_check_data_engine_config_pairs_validity(child_image_version_id: Optional[str] = None,
                                                data_engine_config_pairs: Optional[Sequence[pulumi.InputType['GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs']]] = None,
                                                image_version_id: Optional[str] = None,
                                                result_output_file: Optional[str] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCheckDataEngineConfigPairsValidityResult:
    """
    Use this data source to query detailed information of dlc check_data_engine_config_pairs_validity

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    check_data_engine_config_pairs_validity = tencentcloud.Dlc.get_check_data_engine_config_pairs_validity(child_image_version_id="d3ftghd4-9a7e-4f64-a3f4-f38507c69742")
    ```
    <!--End PulumiCodeChooser -->


    :param str child_image_version_id: Engine Image version id.
    :param Sequence[pulumi.InputType['GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs']] data_engine_config_pairs: User-defined parameters.
    :param str image_version_id: Engine major version id. If a minor version id exists, you only need to pass in the minor version id. If it does not exist, the latest minor version id under the current major version will be obtained.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['childImageVersionId'] = child_image_version_id
    __args__['dataEngineConfigPairs'] = data_engine_config_pairs
    __args__['imageVersionId'] = image_version_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dlc/getCheckDataEngineConfigPairsValidity:getCheckDataEngineConfigPairsValidity', __args__, opts=opts, typ=GetCheckDataEngineConfigPairsValidityResult).value

    return AwaitableGetCheckDataEngineConfigPairsValidityResult(
        child_image_version_id=pulumi.get(__ret__, 'child_image_version_id'),
        data_engine_config_pairs=pulumi.get(__ret__, 'data_engine_config_pairs'),
        id=pulumi.get(__ret__, 'id'),
        image_version_id=pulumi.get(__ret__, 'image_version_id'),
        is_available=pulumi.get(__ret__, 'is_available'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        unavailable_configs=pulumi.get(__ret__, 'unavailable_configs'))


@_utilities.lift_output_func(get_check_data_engine_config_pairs_validity)
def get_check_data_engine_config_pairs_validity_output(child_image_version_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                       data_engine_config_pairs: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs']]]]] = None,
                                                       image_version_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCheckDataEngineConfigPairsValidityResult]:
    """
    Use this data source to query detailed information of dlc check_data_engine_config_pairs_validity

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    check_data_engine_config_pairs_validity = tencentcloud.Dlc.get_check_data_engine_config_pairs_validity(child_image_version_id="d3ftghd4-9a7e-4f64-a3f4-f38507c69742")
    ```
    <!--End PulumiCodeChooser -->


    :param str child_image_version_id: Engine Image version id.
    :param Sequence[pulumi.InputType['GetCheckDataEngineConfigPairsValidityDataEngineConfigPairArgs']] data_engine_config_pairs: User-defined parameters.
    :param str image_version_id: Engine major version id. If a minor version id exists, you only need to pass in the minor version id. If it does not exist, the latest minor version id under the current major version will be obtained.
    :param str result_output_file: Used to save results.
    """
    ...
