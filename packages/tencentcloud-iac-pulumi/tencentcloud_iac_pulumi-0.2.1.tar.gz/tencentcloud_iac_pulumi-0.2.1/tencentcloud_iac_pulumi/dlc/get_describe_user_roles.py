# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDescribeUserRolesResult',
    'AwaitableGetDescribeUserRolesResult',
    'get_describe_user_roles',
    'get_describe_user_roles_output',
]

@pulumi.output_type
class GetDescribeUserRolesResult:
    """
    A collection of values returned by getDescribeUserRoles.
    """
    def __init__(__self__, fuzzy=None, id=None, result_output_file=None, sort_by=None, sorting=None, user_roles=None):
        if fuzzy and not isinstance(fuzzy, str):
            raise TypeError("Expected argument 'fuzzy' to be a str")
        pulumi.set(__self__, "fuzzy", fuzzy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sort_by and not isinstance(sort_by, str):
            raise TypeError("Expected argument 'sort_by' to be a str")
        pulumi.set(__self__, "sort_by", sort_by)
        if sorting and not isinstance(sorting, str):
            raise TypeError("Expected argument 'sorting' to be a str")
        pulumi.set(__self__, "sorting", sorting)
        if user_roles and not isinstance(user_roles, list):
            raise TypeError("Expected argument 'user_roles' to be a list")
        pulumi.set(__self__, "user_roles", user_roles)

    @property
    @pulumi.getter
    def fuzzy(self) -> Optional[str]:
        return pulumi.get(self, "fuzzy")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[str]:
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter
    def sorting(self) -> Optional[str]:
        return pulumi.get(self, "sorting")

    @property
    @pulumi.getter(name="userRoles")
    def user_roles(self) -> Sequence['outputs.GetDescribeUserRolesUserRoleResult']:
        """
        User role information.
        """
        return pulumi.get(self, "user_roles")


class AwaitableGetDescribeUserRolesResult(GetDescribeUserRolesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeUserRolesResult(
            fuzzy=self.fuzzy,
            id=self.id,
            result_output_file=self.result_output_file,
            sort_by=self.sort_by,
            sorting=self.sorting,
            user_roles=self.user_roles)


def get_describe_user_roles(fuzzy: Optional[str] = None,
                            result_output_file: Optional[str] = None,
                            sort_by: Optional[str] = None,
                            sorting: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeUserRolesResult:
    """
    Use this data source to query detailed information of dlc describe_user_roles

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_user_roles = tencentcloud.Dlc.get_describe_user_roles(fuzzy="1")
    ```
    <!--End PulumiCodeChooser -->


    :param str fuzzy: List according to ARN blur.
    :param str result_output_file: Used to save results.
    :param str sort_by: The return results are sorted according to this field.
    :param str sorting: Positive or inverted, such as DESC.
    """
    __args__ = dict()
    __args__['fuzzy'] = fuzzy
    __args__['resultOutputFile'] = result_output_file
    __args__['sortBy'] = sort_by
    __args__['sorting'] = sorting
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dlc/getDescribeUserRoles:getDescribeUserRoles', __args__, opts=opts, typ=GetDescribeUserRolesResult).value

    return AwaitableGetDescribeUserRolesResult(
        fuzzy=pulumi.get(__ret__, 'fuzzy'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sort_by=pulumi.get(__ret__, 'sort_by'),
        sorting=pulumi.get(__ret__, 'sorting'),
        user_roles=pulumi.get(__ret__, 'user_roles'))


@_utilities.lift_output_func(get_describe_user_roles)
def get_describe_user_roles_output(fuzzy: Optional[pulumi.Input[Optional[str]]] = None,
                                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                   sort_by: Optional[pulumi.Input[Optional[str]]] = None,
                                   sorting: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeUserRolesResult]:
    """
    Use this data source to query detailed information of dlc describe_user_roles

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_user_roles = tencentcloud.Dlc.get_describe_user_roles(fuzzy="1")
    ```
    <!--End PulumiCodeChooser -->


    :param str fuzzy: List according to ARN blur.
    :param str result_output_file: Used to save results.
    :param str sort_by: The return results are sorted according to this field.
    :param str sorting: Positive or inverted, such as DESC.
    """
    ...
