# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDescribeDataEngineResult',
    'AwaitableGetDescribeDataEngineResult',
    'get_describe_data_engine',
    'get_describe_data_engine_output',
]

@pulumi.output_type
class GetDescribeDataEngineResult:
    """
    A collection of values returned by getDescribeDataEngine.
    """
    def __init__(__self__, data_engine_name=None, data_engines=None, id=None, result_output_file=None):
        if data_engine_name and not isinstance(data_engine_name, str):
            raise TypeError("Expected argument 'data_engine_name' to be a str")
        pulumi.set(__self__, "data_engine_name", data_engine_name)
        if data_engines and not isinstance(data_engines, list):
            raise TypeError("Expected argument 'data_engines' to be a list")
        pulumi.set(__self__, "data_engines", data_engines)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> str:
        """
        Engine name.
        """
        return pulumi.get(self, "data_engine_name")

    @property
    @pulumi.getter(name="dataEngines")
    def data_engines(self) -> Sequence['outputs.GetDescribeDataEngineDataEngineResult']:
        """
        Data engine details.
        """
        return pulumi.get(self, "data_engines")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDescribeDataEngineResult(GetDescribeDataEngineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeDataEngineResult(
            data_engine_name=self.data_engine_name,
            data_engines=self.data_engines,
            id=self.id,
            result_output_file=self.result_output_file)


def get_describe_data_engine(data_engine_name: Optional[str] = None,
                             result_output_file: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeDataEngineResult:
    """
    Use this data source to query detailed information of dlc describe_data_engine

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_data_engine = tencentcloud.Dlc.get_describe_data_engine(data_engine_name="testSpark")
    ```
    <!--End PulumiCodeChooser -->


    :param str data_engine_name: Engine name.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['dataEngineName'] = data_engine_name
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dlc/getDescribeDataEngine:getDescribeDataEngine', __args__, opts=opts, typ=GetDescribeDataEngineResult).value

    return AwaitableGetDescribeDataEngineResult(
        data_engine_name=pulumi.get(__ret__, 'data_engine_name'),
        data_engines=pulumi.get(__ret__, 'data_engines'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_describe_data_engine)
def get_describe_data_engine_output(data_engine_name: Optional[pulumi.Input[str]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeDataEngineResult]:
    """
    Use this data source to query detailed information of dlc describe_data_engine

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_data_engine = tencentcloud.Dlc.get_describe_data_engine(data_engine_name="testSpark")
    ```
    <!--End PulumiCodeChooser -->


    :param str data_engine_name: Engine name.
    :param str result_output_file: Used to save results.
    """
    ...
