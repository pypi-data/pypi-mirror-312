# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RenewDataEngineOperationArgs', 'RenewDataEngineOperation']

@pulumi.input_type
class RenewDataEngineOperationArgs:
    def __init__(__self__, *,
                 data_engine_name: pulumi.Input[str],
                 time_span: pulumi.Input[int],
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RenewDataEngineOperation resource.
        :param pulumi.Input[str] data_engine_name: Data engine name.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[int] renew_flag: Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. if the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: make it clear that there will be no automatic renewal. if this parameter is not passed, the default value is 0.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        pulumi.set(__self__, "data_engine_name", data_engine_name)
        pulumi.set(__self__, "time_span", time_span)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> pulumi.Input[str]:
        """
        Data engine name.
        """
        return pulumi.get(self, "data_engine_name")

    @data_engine_name.setter
    def data_engine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_engine_name", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Input[int]:
        """
        Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: pulumi.Input[int]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Engine pay mode type, only support 0: postPay, 1: prePay(default).
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. if the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: make it clear that there will be no automatic renewal. if this parameter is not passed, the default value is 0.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)


@pulumi.input_type
class _RenewDataEngineOperationState:
    def __init__(__self__, *,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RenewDataEngineOperation resources.
        :param pulumi.Input[str] data_engine_name: Data engine name.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[int] renew_flag: Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. if the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: make it clear that there will be no automatic renewal. if this parameter is not passed, the default value is 0.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        if data_engine_name is not None:
            pulumi.set(__self__, "data_engine_name", data_engine_name)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if renew_flag is not None:
            pulumi.set(__self__, "renew_flag", renew_flag)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> Optional[pulumi.Input[str]]:
        """
        Data engine name.
        """
        return pulumi.get(self, "data_engine_name")

    @data_engine_name.setter
    def data_engine_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_engine_name", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Engine pay mode type, only support 0: postPay, 1: prePay(default).
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. if the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: make it clear that there will be no automatic renewal. if this parameter is not passed, the default value is 0.
        """
        return pulumi.get(self, "renew_flag")

    @renew_flag.setter
    def renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renew_flag", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)


class RenewDataEngineOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc renew_data_engine

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        renew_data_engine = tencentcloud.dlc.RenewDataEngineOperation("renewDataEngine",
            data_engine_name="testEngine",
            pay_mode=1,
            renew_flag=1,
            time_span=3600,
            time_unit="m")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc renew_data_engine can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/renewDataEngineOperation:RenewDataEngineOperation renew_data_engine renew_data_engine_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_engine_name: Data engine name.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[int] renew_flag: Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. if the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: make it clear that there will be no automatic renewal. if this parameter is not passed, the default value is 0.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RenewDataEngineOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc renew_data_engine

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        renew_data_engine = tencentcloud.dlc.RenewDataEngineOperation("renewDataEngine",
            data_engine_name="testEngine",
            pay_mode=1,
            renew_flag=1,
            time_span=3600,
            time_unit="m")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc renew_data_engine can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/renewDataEngineOperation:RenewDataEngineOperation renew_data_engine renew_data_engine_id
        ```

        :param str resource_name: The name of the resource.
        :param RenewDataEngineOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RenewDataEngineOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_engine_name: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 renew_flag: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RenewDataEngineOperationArgs.__new__(RenewDataEngineOperationArgs)

            if data_engine_name is None and not opts.urn:
                raise TypeError("Missing required property 'data_engine_name'")
            __props__.__dict__["data_engine_name"] = data_engine_name
            __props__.__dict__["pay_mode"] = pay_mode
            __props__.__dict__["renew_flag"] = renew_flag
            if time_span is None and not opts.urn:
                raise TypeError("Missing required property 'time_span'")
            __props__.__dict__["time_span"] = time_span
            __props__.__dict__["time_unit"] = time_unit
        super(RenewDataEngineOperation, __self__).__init__(
            'tencentcloud:Dlc/renewDataEngineOperation:RenewDataEngineOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            data_engine_name: Optional[pulumi.Input[str]] = None,
            pay_mode: Optional[pulumi.Input[int]] = None,
            renew_flag: Optional[pulumi.Input[int]] = None,
            time_span: Optional[pulumi.Input[int]] = None,
            time_unit: Optional[pulumi.Input[str]] = None) -> 'RenewDataEngineOperation':
        """
        Get an existing RenewDataEngineOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] data_engine_name: Data engine name.
        :param pulumi.Input[int] pay_mode: Engine pay mode type, only support 0: postPay, 1: prePay(default).
        :param pulumi.Input[int] renew_flag: Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. if the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: make it clear that there will be no automatic renewal. if this parameter is not passed, the default value is 0.
        :param pulumi.Input[int] time_span: Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        :param pulumi.Input[str] time_unit: Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RenewDataEngineOperationState.__new__(_RenewDataEngineOperationState)

        __props__.__dict__["data_engine_name"] = data_engine_name
        __props__.__dict__["pay_mode"] = pay_mode
        __props__.__dict__["renew_flag"] = renew_flag
        __props__.__dict__["time_span"] = time_span
        __props__.__dict__["time_unit"] = time_unit
        return RenewDataEngineOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dataEngineName")
    def data_engine_name(self) -> pulumi.Output[str]:
        """
        Data engine name.
        """
        return pulumi.get(self, "data_engine_name")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Engine pay mode type, only support 0: postPay, 1: prePay(default).
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Automatic renewal flag, 0, initial state, automatic renewal is not performed by default. if the user has prepaid non-stop service privileges, automatic renewal will occur. 1: Automatic renewal. 2: make it clear that there will be no automatic renewal. if this parameter is not passed, the default value is 0.
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Output[int]:
        """
        Engine TimeSpan, prePay: minimum of 1, representing one month of purchasing resources, with a maximum of 120, default 3600, postPay: fixed fee of 3600.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Engine TimeUnit, prePay: use m(default), postPay: use h.
        """
        return pulumi.get(self, "time_unit")

