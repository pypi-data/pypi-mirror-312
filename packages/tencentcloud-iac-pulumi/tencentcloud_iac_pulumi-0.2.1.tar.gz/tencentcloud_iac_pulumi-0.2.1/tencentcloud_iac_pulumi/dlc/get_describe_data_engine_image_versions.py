# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDescribeDataEngineImageVersionsResult',
    'AwaitableGetDescribeDataEngineImageVersionsResult',
    'get_describe_data_engine_image_versions',
    'get_describe_data_engine_image_versions_output',
]

@pulumi.output_type
class GetDescribeDataEngineImageVersionsResult:
    """
    A collection of values returned by getDescribeDataEngineImageVersions.
    """
    def __init__(__self__, engine_type=None, id=None, image_parent_versions=None, result_output_file=None):
        if engine_type and not isinstance(engine_type, str):
            raise TypeError("Expected argument 'engine_type' to be a str")
        pulumi.set(__self__, "engine_type", engine_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_parent_versions and not isinstance(image_parent_versions, list):
            raise TypeError("Expected argument 'image_parent_versions' to be a list")
        pulumi.set(__self__, "image_parent_versions", image_parent_versions)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> str:
        """
        Engine type only support: SparkSQL/PrestoSQL/SparkBatch.
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageParentVersions")
    def image_parent_versions(self) -> Sequence['outputs.GetDescribeDataEngineImageVersionsImageParentVersionResult']:
        """
        Cluster large version image information list.
        """
        return pulumi.get(self, "image_parent_versions")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDescribeDataEngineImageVersionsResult(GetDescribeDataEngineImageVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDescribeDataEngineImageVersionsResult(
            engine_type=self.engine_type,
            id=self.id,
            image_parent_versions=self.image_parent_versions,
            result_output_file=self.result_output_file)


def get_describe_data_engine_image_versions(engine_type: Optional[str] = None,
                                            result_output_file: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDescribeDataEngineImageVersionsResult:
    """
    Use this data source to query detailed information of dlc describe_data_engine_image_versions

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_data_engine_image_versions = tencentcloud.Dlc.get_describe_data_engine_image_versions(engine_type="SparkBatch")
    ```
    <!--End PulumiCodeChooser -->


    :param str engine_type: Engine type only support: SparkSQL/PrestoSQL/SparkBatch.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['engineType'] = engine_type
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dlc/getDescribeDataEngineImageVersions:getDescribeDataEngineImageVersions', __args__, opts=opts, typ=GetDescribeDataEngineImageVersionsResult).value

    return AwaitableGetDescribeDataEngineImageVersionsResult(
        engine_type=pulumi.get(__ret__, 'engine_type'),
        id=pulumi.get(__ret__, 'id'),
        image_parent_versions=pulumi.get(__ret__, 'image_parent_versions'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_describe_data_engine_image_versions)
def get_describe_data_engine_image_versions_output(engine_type: Optional[pulumi.Input[str]] = None,
                                                   result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDescribeDataEngineImageVersionsResult]:
    """
    Use this data source to query detailed information of dlc describe_data_engine_image_versions

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    describe_data_engine_image_versions = tencentcloud.Dlc.get_describe_data_engine_image_versions(engine_type="SparkBatch")
    ```
    <!--End PulumiCodeChooser -->


    :param str engine_type: Engine type only support: SparkSQL/PrestoSQL/SparkBatch.
    :param str result_output_file: Used to save results.
    """
    ...
