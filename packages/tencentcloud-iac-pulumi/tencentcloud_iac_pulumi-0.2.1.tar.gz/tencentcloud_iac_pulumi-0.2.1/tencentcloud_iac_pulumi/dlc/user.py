# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 user_id: pulumi.Input[str],
                 user_alias: Optional[pulumi.Input[str]] = None,
                 user_description: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] user_id: The sub-user uin that needs to be authorized.
        :param pulumi.Input[str] user_alias: User alias, the character length is less than 50.
        :param pulumi.Input[str] user_description: User description information, easy to distinguish between different users.
        :param pulumi.Input[str] user_type: User Type. `ADMIN` or `COMMONN`.
        """
        pulumi.set(__self__, "user_id", user_id)
        if user_alias is not None:
            pulumi.set(__self__, "user_alias", user_alias)
        if user_description is not None:
            pulumi.set(__self__, "user_description", user_description)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        The sub-user uin that needs to be authorized.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userAlias")
    def user_alias(self) -> Optional[pulumi.Input[str]]:
        """
        User alias, the character length is less than 50.
        """
        return pulumi.get(self, "user_alias")

    @user_alias.setter
    def user_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_alias", value)

    @property
    @pulumi.getter(name="userDescription")
    def user_description(self) -> Optional[pulumi.Input[str]]:
        """
        User description information, easy to distinguish between different users.
        """
        return pulumi.get(self, "user_description")

    @user_description.setter
    def user_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_description", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        User Type. `ADMIN` or `COMMONN`.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 user_alias: Optional[pulumi.Input[str]] = None,
                 user_description: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 work_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[str] user_alias: User alias, the character length is less than 50.
        :param pulumi.Input[str] user_description: User description information, easy to distinguish between different users.
        :param pulumi.Input[str] user_id: The sub-user uin that needs to be authorized.
        :param pulumi.Input[str] user_type: User Type. `ADMIN` or `COMMONN`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] work_group_ids: A collection of workgroup IDs bound to the user.
        """
        if user_alias is not None:
            pulumi.set(__self__, "user_alias", user_alias)
        if user_description is not None:
            pulumi.set(__self__, "user_description", user_description)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)
        if work_group_ids is not None:
            pulumi.set(__self__, "work_group_ids", work_group_ids)

    @property
    @pulumi.getter(name="userAlias")
    def user_alias(self) -> Optional[pulumi.Input[str]]:
        """
        User alias, the character length is less than 50.
        """
        return pulumi.get(self, "user_alias")

    @user_alias.setter
    def user_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_alias", value)

    @property
    @pulumi.getter(name="userDescription")
    def user_description(self) -> Optional[pulumi.Input[str]]:
        """
        User description information, easy to distinguish between different users.
        """
        return pulumi.get(self, "user_description")

    @user_description.setter
    def user_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_description", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[str]]:
        """
        The sub-user uin that needs to be authorized.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[str]]:
        """
        User Type. `ADMIN` or `COMMONN`.
        """
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_type", value)

    @property
    @pulumi.getter(name="workGroupIds")
    def work_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A collection of workgroup IDs bound to the user.
        """
        return pulumi.get(self, "work_group_ids")

    @work_group_ids.setter
    def work_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "work_group_ids", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 user_alias: Optional[pulumi.Input[str]] = None,
                 user_description: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dlc user

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user = tencentcloud.dlc.User("user",
            user_alias="terraform-test",
            user_description="for terraform test",
            user_id="100027012454",
            user_type="COMMON")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc user can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/user:User user user_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] user_alias: User alias, the character length is less than 50.
        :param pulumi.Input[str] user_description: User description information, easy to distinguish between different users.
        :param pulumi.Input[str] user_id: The sub-user uin that needs to be authorized.
        :param pulumi.Input[str] user_type: User Type. `ADMIN` or `COMMONN`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dlc user

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        user = tencentcloud.dlc.User("user",
            user_alias="terraform-test",
            user_description="for terraform test",
            user_id="100027012454",
            user_type="COMMON")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dlc user can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dlc/user:User user user_id
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 user_alias: Optional[pulumi.Input[str]] = None,
                 user_description: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[str]] = None,
                 user_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["user_alias"] = user_alias
            __props__.__dict__["user_description"] = user_description
            if user_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_id'")
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["user_type"] = user_type
            __props__.__dict__["work_group_ids"] = None
        super(User, __self__).__init__(
            'tencentcloud:Dlc/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            user_alias: Optional[pulumi.Input[str]] = None,
            user_description: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[str]] = None,
            user_type: Optional[pulumi.Input[str]] = None,
            work_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] user_alias: User alias, the character length is less than 50.
        :param pulumi.Input[str] user_description: User description information, easy to distinguish between different users.
        :param pulumi.Input[str] user_id: The sub-user uin that needs to be authorized.
        :param pulumi.Input[str] user_type: User Type. `ADMIN` or `COMMONN`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] work_group_ids: A collection of workgroup IDs bound to the user.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["user_alias"] = user_alias
        __props__.__dict__["user_description"] = user_description
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_type"] = user_type
        __props__.__dict__["work_group_ids"] = work_group_ids
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="userAlias")
    def user_alias(self) -> pulumi.Output[Optional[str]]:
        """
        User alias, the character length is less than 50.
        """
        return pulumi.get(self, "user_alias")

    @property
    @pulumi.getter(name="userDescription")
    def user_description(self) -> pulumi.Output[Optional[str]]:
        """
        User description information, easy to distinguish between different users.
        """
        return pulumi.get(self, "user_description")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[str]:
        """
        The sub-user uin that needs to be authorized.
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[Optional[str]]:
        """
        User Type. `ADMIN` or `COMMONN`.
        """
        return pulumi.get(self, "user_type")

    @property
    @pulumi.getter(name="workGroupIds")
    def work_group_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        A collection of workgroup IDs bound to the user.
        """
        return pulumi.get(self, "work_group_ids")

