# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DatasourceCloudArgs', 'DatasourceCloud']

@pulumi.input_type
class DatasourceCloudArgs:
    def __init__(__self__, *,
                 charset: pulumi.Input[str],
                 db_name: pulumi.Input[str],
                 db_pwd: pulumi.Input[str],
                 db_type: pulumi.Input[str],
                 db_user: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 service_type: pulumi.Input['DatasourceCloudServiceTypeArgs'],
                 source_name: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 extra_param: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DatasourceCloud resource.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input['DatasourceCloudServiceTypeArgs'] service_type: Service type, Own or Cloud.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] vpc_id: Vpc identification.
        :param pulumi.Input[str] cluster_id: Cluster id.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] extra_param: Extended parameters.
        :param pulumi.Input[str] region_id: Region identifier.
        :param pulumi.Input[str] uniq_vpc_id: Unified vpc identification.
        :param pulumi.Input[str] vip: Public cloud intranet ip.
        :param pulumi.Input[str] vport: Public cloud intranet port.
        """
        pulumi.set(__self__, "charset", charset)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "db_pwd", db_pwd)
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "db_user", db_user)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if data_origin_datasource_id is not None:
            pulumi.set(__self__, "data_origin_datasource_id", data_origin_datasource_id)
        if data_origin_project_id is not None:
            pulumi.set(__self__, "data_origin_project_id", data_origin_project_id)
        if extra_param is not None:
            pulumi.set(__self__, "extra_param", extra_param)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Input[str]:
        """
        Charset.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: pulumi.Input[str]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbPwd")
    def db_pwd(self) -> pulumi.Input[str]:
        """
        Password.
        """
        return pulumi.get(self, "db_pwd")

    @db_pwd.setter
    def db_pwd(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_pwd", value)

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> pulumi.Input[str]:
        """
        `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
        """
        return pulumi.get(self, "db_type")

    @db_type.setter
    def db_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_type", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> pulumi.Input[str]:
        """
        User name.
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Input['DatasourceCloudServiceTypeArgs']:
        """
        Service type, Own or Cloud.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: pulumi.Input['DatasourceCloudServiceTypeArgs']):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Input[str]:
        """
        Datasource name in BI.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Vpc identification.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource identification, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin", value)

    @property
    @pulumi.getter(name="dataOriginDatasourceId")
    def data_origin_datasource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_datasource_id")

    @data_origin_datasource_id.setter
    def data_origin_datasource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_datasource_id", value)

    @property
    @pulumi.getter(name="dataOriginProjectId")
    def data_origin_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_project_id")

    @data_origin_project_id.setter
    def data_origin_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_project_id", value)

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> Optional[pulumi.Input[str]]:
        """
        Extended parameters.
        """
        return pulumi.get(self, "extra_param")

    @extra_param.setter
    def extra_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_param", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        Region identifier.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unified vpc identification.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        Public cloud intranet ip.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[str]]:
        """
        Public cloud intranet port.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vport", value)


@pulumi.input_type
class _DatasourceCloudState:
    def __init__(__self__, *,
                 charset: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_pwd: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 extra_param: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input['DatasourceCloudServiceTypeArgs']] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DatasourceCloud resources.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] cluster_id: Cluster id.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[str] extra_param: Extended parameters.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[str] region_id: Region identifier.
        :param pulumi.Input['DatasourceCloudServiceTypeArgs'] service_type: Service type, Own or Cloud.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] uniq_vpc_id: Unified vpc identification.
        :param pulumi.Input[str] vip: Public cloud intranet ip.
        :param pulumi.Input[str] vpc_id: Vpc identification.
        :param pulumi.Input[str] vport: Public cloud intranet port.
        """
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if data_origin_datasource_id is not None:
            pulumi.set(__self__, "data_origin_datasource_id", data_origin_datasource_id)
        if data_origin_project_id is not None:
            pulumi.set(__self__, "data_origin_project_id", data_origin_project_id)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if db_pwd is not None:
            pulumi.set(__self__, "db_pwd", db_pwd)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if extra_param is not None:
            pulumi.set(__self__, "extra_param", extra_param)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if region_id is not None:
            pulumi.set(__self__, "region_id", region_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[str]]:
        """
        Charset.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource identification, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin", value)

    @property
    @pulumi.getter(name="dataOriginDatasourceId")
    def data_origin_datasource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_datasource_id")

    @data_origin_datasource_id.setter
    def data_origin_datasource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_datasource_id", value)

    @property
    @pulumi.getter(name="dataOriginProjectId")
    def data_origin_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_project_id")

    @data_origin_project_id.setter
    def data_origin_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_project_id", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbPwd")
    def db_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "db_pwd")

    @db_pwd.setter
    def db_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_pwd", value)

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[pulumi.Input[str]]:
        """
        `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
        """
        return pulumi.get(self, "db_type")

    @db_type.setter
    def db_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_type", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> Optional[pulumi.Input[str]]:
        """
        Extended parameters.
        """
        return pulumi.get(self, "extra_param")

    @extra_param.setter
    def extra_param(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extra_param", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> Optional[pulumi.Input[str]]:
        """
        Region identifier.
        """
        return pulumi.get(self, "region_id")

    @region_id.setter
    def region_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input['DatasourceCloudServiceTypeArgs']]:
        """
        Service type, Own or Cloud.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input['DatasourceCloudServiceTypeArgs']]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        Datasource name in BI.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unified vpc identification.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        Public cloud intranet ip.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc identification.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[str]]:
        """
        Public cloud intranet port.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vport", value)


class DatasourceCloud(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_pwd: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 extra_param: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[pulumi.InputType['DatasourceCloudServiceTypeArgs']]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a bi datasource_cloud

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        datasource_cloud = tencentcloud.bi.DatasourceCloud("datasourceCloud",
            charset="utf8",
            db_name="bi_dev",
            db_pwd="xxxxxx",
            db_type="MYSQL",
            db_user="root",
            project_id="11015056",
            region_id="gz",
            service_type=tencentcloud.bi.DatasourceCloudServiceTypeArgs(
                instance_id="cdb-12viotu5",
                region="ap-guangzhou",
                type="Cloud",
            ),
            source_name="tf-test1",
            vip="10.0.0.4",
            vpc_id="5292713",
            vport="3306")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] cluster_id: Cluster id.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[str] extra_param: Extended parameters.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[str] region_id: Region identifier.
        :param pulumi.Input[pulumi.InputType['DatasourceCloudServiceTypeArgs']] service_type: Service type, Own or Cloud.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] uniq_vpc_id: Unified vpc identification.
        :param pulumi.Input[str] vip: Public cloud intranet ip.
        :param pulumi.Input[str] vpc_id: Vpc identification.
        :param pulumi.Input[str] vport: Public cloud intranet port.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatasourceCloudArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a bi datasource_cloud

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        datasource_cloud = tencentcloud.bi.DatasourceCloud("datasourceCloud",
            charset="utf8",
            db_name="bi_dev",
            db_pwd="xxxxxx",
            db_type="MYSQL",
            db_user="root",
            project_id="11015056",
            region_id="gz",
            service_type=tencentcloud.bi.DatasourceCloudServiceTypeArgs(
                instance_id="cdb-12viotu5",
                region="ap-guangzhou",
                type="Cloud",
            ),
            source_name="tf-test1",
            vip="10.0.0.4",
            vpc_id="5292713",
            vport="3306")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param DatasourceCloudArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatasourceCloudArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_pwd: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 extra_param: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 region_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[pulumi.InputType['DatasourceCloudServiceTypeArgs']]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatasourceCloudArgs.__new__(DatasourceCloudArgs)

            if charset is None and not opts.urn:
                raise TypeError("Missing required property 'charset'")
            __props__.__dict__["charset"] = charset
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["data_origin"] = data_origin
            __props__.__dict__["data_origin_datasource_id"] = data_origin_datasource_id
            __props__.__dict__["data_origin_project_id"] = data_origin_project_id
            if db_name is None and not opts.urn:
                raise TypeError("Missing required property 'db_name'")
            __props__.__dict__["db_name"] = db_name
            if db_pwd is None and not opts.urn:
                raise TypeError("Missing required property 'db_pwd'")
            __props__.__dict__["db_pwd"] = None if db_pwd is None else pulumi.Output.secret(db_pwd)
            if db_type is None and not opts.urn:
                raise TypeError("Missing required property 'db_type'")
            __props__.__dict__["db_type"] = db_type
            if db_user is None and not opts.urn:
                raise TypeError("Missing required property 'db_user'")
            __props__.__dict__["db_user"] = db_user
            __props__.__dict__["extra_param"] = extra_param
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["region_id"] = region_id
            if service_type is None and not opts.urn:
                raise TypeError("Missing required property 'service_type'")
            __props__.__dict__["service_type"] = service_type
            if source_name is None and not opts.urn:
                raise TypeError("Missing required property 'source_name'")
            __props__.__dict__["source_name"] = source_name
            __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
            __props__.__dict__["vip"] = vip
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["vport"] = vport
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["dbPwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(DatasourceCloud, __self__).__init__(
            'tencentcloud:Bi/datasourceCloud:DatasourceCloud',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            charset: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            data_origin: Optional[pulumi.Input[str]] = None,
            data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
            data_origin_project_id: Optional[pulumi.Input[str]] = None,
            db_name: Optional[pulumi.Input[str]] = None,
            db_pwd: Optional[pulumi.Input[str]] = None,
            db_type: Optional[pulumi.Input[str]] = None,
            db_user: Optional[pulumi.Input[str]] = None,
            extra_param: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            region_id: Optional[pulumi.Input[str]] = None,
            service_type: Optional[pulumi.Input[pulumi.InputType['DatasourceCloudServiceTypeArgs']]] = None,
            source_name: Optional[pulumi.Input[str]] = None,
            uniq_vpc_id: Optional[pulumi.Input[str]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[str]] = None) -> 'DatasourceCloud':
        """
        Get an existing DatasourceCloud resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] cluster_id: Cluster id.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[str] extra_param: Extended parameters.
        :param pulumi.Input[str] project_id: Project id.
        :param pulumi.Input[str] region_id: Region identifier.
        :param pulumi.Input[pulumi.InputType['DatasourceCloudServiceTypeArgs']] service_type: Service type, Own or Cloud.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] uniq_vpc_id: Unified vpc identification.
        :param pulumi.Input[str] vip: Public cloud intranet ip.
        :param pulumi.Input[str] vpc_id: Vpc identification.
        :param pulumi.Input[str] vport: Public cloud intranet port.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatasourceCloudState.__new__(_DatasourceCloudState)

        __props__.__dict__["charset"] = charset
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["data_origin_datasource_id"] = data_origin_datasource_id
        __props__.__dict__["data_origin_project_id"] = data_origin_project_id
        __props__.__dict__["db_name"] = db_name
        __props__.__dict__["db_pwd"] = db_pwd
        __props__.__dict__["db_type"] = db_type
        __props__.__dict__["db_user"] = db_user
        __props__.__dict__["extra_param"] = extra_param
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["region_id"] = region_id
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["source_name"] = source_name
        __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vport"] = vport
        return DatasourceCloud(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Output[str]:
        """
        Charset.
        """
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        """
        Cluster id.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[Optional[str]]:
        """
        Third-party datasource identification, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin")

    @property
    @pulumi.getter(name="dataOriginDatasourceId")
    def data_origin_datasource_id(self) -> pulumi.Output[Optional[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_datasource_id")

    @property
    @pulumi.getter(name="dataOriginProjectId")
    def data_origin_project_id(self) -> pulumi.Output[Optional[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_project_id")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Output[str]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbPwd")
    def db_pwd(self) -> pulumi.Output[str]:
        """
        Password.
        """
        return pulumi.get(self, "db_pwd")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> pulumi.Output[str]:
        """
        `MYSQL`, `TDSQL-C_MYSQL`, `TDSQL_MYSQL`, `MSSQL`, `POSTGRESQL`, `MARIADB`.
        """
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> pulumi.Output[str]:
        """
        User name.
        """
        return pulumi.get(self, "db_user")

    @property
    @pulumi.getter(name="extraParam")
    def extra_param(self) -> pulumi.Output[str]:
        """
        Extended parameters.
        """
        return pulumi.get(self, "extra_param")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> pulumi.Output[Optional[str]]:
        """
        Region identifier.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output['outputs.DatasourceCloudServiceType']:
        """
        Service type, Own or Cloud.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Output[str]:
        """
        Datasource name in BI.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Unified vpc identification.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[Optional[str]]:
        """
        Public cloud intranet ip.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Vpc identification.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[Optional[str]]:
        """
        Public cloud intranet port.
        """
        return pulumi.get(self, "vport")

