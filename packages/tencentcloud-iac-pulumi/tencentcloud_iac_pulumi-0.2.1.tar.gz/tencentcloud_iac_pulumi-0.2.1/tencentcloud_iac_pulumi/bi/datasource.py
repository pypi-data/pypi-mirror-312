# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DatasourceArgs', 'Datasource']

@pulumi.input_type
class DatasourceArgs:
    def __init__(__self__, *,
                 charset: pulumi.Input[str],
                 db_host: pulumi.Input[str],
                 db_name: pulumi.Input[str],
                 db_port: pulumi.Input[int],
                 db_pwd: pulumi.Input[str],
                 db_type: pulumi.Input[str],
                 db_user: pulumi.Input[str],
                 project_id: pulumi.Input[int],
                 source_name: pulumi.Input[str],
                 catalog: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Datasource resource.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] db_host: Host.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[int] db_port: Port.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `MSSQL`, `POSTGRE`, `ORACLE`, `CLICKHOUSE`, `TIDB`, `HIVE`, `PRESTO`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[int] project_id: Project id.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] catalog: Catalog.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] service_type: Own or Cloud, default: `Own`.
        :param pulumi.Input[str] uniq_vpc_id: Tencent cloud private network unified identity.
        :param pulumi.Input[str] vpc_id: Tencent cloud private network identity.
        """
        pulumi.set(__self__, "charset", charset)
        pulumi.set(__self__, "db_host", db_host)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "db_port", db_port)
        pulumi.set(__self__, "db_pwd", db_pwd)
        pulumi.set(__self__, "db_type", db_type)
        pulumi.set(__self__, "db_user", db_user)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "source_name", source_name)
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if data_origin_datasource_id is not None:
            pulumi.set(__self__, "data_origin_datasource_id", data_origin_datasource_id)
        if data_origin_project_id is not None:
            pulumi.set(__self__, "data_origin_project_id", data_origin_project_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Input[str]:
        """
        Charset.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: pulumi.Input[str]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> pulumi.Input[str]:
        """
        Host.
        """
        return pulumi.get(self, "db_host")

    @db_host.setter
    def db_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_host", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Input[str]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> pulumi.Input[int]:
        """
        Port.
        """
        return pulumi.get(self, "db_port")

    @db_port.setter
    def db_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "db_port", value)

    @property
    @pulumi.getter(name="dbPwd")
    def db_pwd(self) -> pulumi.Input[str]:
        """
        Password.
        """
        return pulumi.get(self, "db_pwd")

    @db_pwd.setter
    def db_pwd(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_pwd", value)

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> pulumi.Input[str]:
        """
        `MYSQL`, `MSSQL`, `POSTGRE`, `ORACLE`, `CLICKHOUSE`, `TIDB`, `HIVE`, `PRESTO`.
        """
        return pulumi.get(self, "db_type")

    @db_type.setter
    def db_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_type", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> pulumi.Input[str]:
        """
        User name.
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[int]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Input[str]:
        """
        Datasource name in BI.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource identification, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin", value)

    @property
    @pulumi.getter(name="dataOriginDatasourceId")
    def data_origin_datasource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_datasource_id")

    @data_origin_datasource_id.setter
    def data_origin_datasource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_datasource_id", value)

    @property
    @pulumi.getter(name="dataOriginProjectId")
    def data_origin_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_project_id")

    @data_origin_project_id.setter
    def data_origin_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_project_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Own or Cloud, default: `Own`.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent cloud private network unified identity.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent cloud private network identity.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _DatasourceState:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 db_host: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_port: Optional[pulumi.Input[int]] = None,
                 db_pwd: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Datasource resources.
        :param pulumi.Input[str] catalog: Catalog.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] db_host: Host.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[int] db_port: Port.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `MSSQL`, `POSTGRE`, `ORACLE`, `CLICKHOUSE`, `TIDB`, `HIVE`, `PRESTO`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[int] project_id: Project id.
        :param pulumi.Input[str] service_type: Own or Cloud, default: `Own`.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] uniq_vpc_id: Tencent cloud private network unified identity.
        :param pulumi.Input[str] vpc_id: Tencent cloud private network identity.
        """
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if charset is not None:
            pulumi.set(__self__, "charset", charset)
        if data_origin is not None:
            pulumi.set(__self__, "data_origin", data_origin)
        if data_origin_datasource_id is not None:
            pulumi.set(__self__, "data_origin_datasource_id", data_origin_datasource_id)
        if data_origin_project_id is not None:
            pulumi.set(__self__, "data_origin_project_id", data_origin_project_id)
        if db_host is not None:
            pulumi.set(__self__, "db_host", db_host)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if db_port is not None:
            pulumi.set(__self__, "db_port", db_port)
        if db_pwd is not None:
            pulumi.set(__self__, "db_pwd", db_pwd)
        if db_type is not None:
            pulumi.set(__self__, "db_type", db_type)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def charset(self) -> Optional[pulumi.Input[str]]:
        """
        Charset.
        """
        return pulumi.get(self, "charset")

    @charset.setter
    def charset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charset", value)

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource identification, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin")

    @data_origin.setter
    def data_origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin", value)

    @property
    @pulumi.getter(name="dataOriginDatasourceId")
    def data_origin_datasource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_datasource_id")

    @data_origin_datasource_id.setter
    def data_origin_datasource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_datasource_id", value)

    @property
    @pulumi.getter(name="dataOriginProjectId")
    def data_origin_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_project_id")

    @data_origin_project_id.setter
    def data_origin_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_origin_project_id", value)

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> Optional[pulumi.Input[str]]:
        """
        Host.
        """
        return pulumi.get(self, "db_host")

    @db_host.setter
    def db_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_host", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "db_port")

    @db_port.setter
    def db_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "db_port", value)

    @property
    @pulumi.getter(name="dbPwd")
    def db_pwd(self) -> Optional[pulumi.Input[str]]:
        """
        Password.
        """
        return pulumi.get(self, "db_pwd")

    @db_pwd.setter
    def db_pwd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_pwd", value)

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> Optional[pulumi.Input[str]]:
        """
        `MYSQL`, `MSSQL`, `POSTGRE`, `ORACLE`, `CLICKHOUSE`, `TIDB`, `HIVE`, `PRESTO`.
        """
        return pulumi.get(self, "db_type")

    @db_type.setter
    def db_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_type", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[pulumi.Input[str]]:
        """
        User name.
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Own or Cloud, default: `Own`.
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        Datasource name in BI.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent cloud private network unified identity.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Tencent cloud private network identity.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Datasource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 db_host: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_port: Optional[pulumi.Input[int]] = None,
                 db_pwd: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a bi datasource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        datasource = tencentcloud.bi.Datasource("datasource",
            charset="utf8",
            db_host="bj-cdb-1lxqg5r6.sql.tencentcdb.com",
            db_name="tf-test",
            db_port=63694,
            db_pwd="ABc123,,,",
            db_type="MYSQL",
            db_user="root",
            project_id=11015030,
            source_name="tf-source-name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        bi datasource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Bi/datasource:Datasource datasource datasource_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog: Catalog.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] db_host: Host.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[int] db_port: Port.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `MSSQL`, `POSTGRE`, `ORACLE`, `CLICKHOUSE`, `TIDB`, `HIVE`, `PRESTO`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[int] project_id: Project id.
        :param pulumi.Input[str] service_type: Own or Cloud, default: `Own`.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] uniq_vpc_id: Tencent cloud private network unified identity.
        :param pulumi.Input[str] vpc_id: Tencent cloud private network identity.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatasourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a bi datasource

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        datasource = tencentcloud.bi.Datasource("datasource",
            charset="utf8",
            db_host="bj-cdb-1lxqg5r6.sql.tencentcdb.com",
            db_name="tf-test",
            db_port=63694,
            db_pwd="ABc123,,,",
            db_type="MYSQL",
            db_user="root",
            project_id=11015030,
            source_name="tf-source-name")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        bi datasource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Bi/datasource:Datasource datasource datasource_id
        ```

        :param str resource_name: The name of the resource.
        :param DatasourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatasourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog: Optional[pulumi.Input[str]] = None,
                 charset: Optional[pulumi.Input[str]] = None,
                 data_origin: Optional[pulumi.Input[str]] = None,
                 data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
                 data_origin_project_id: Optional[pulumi.Input[str]] = None,
                 db_host: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_port: Optional[pulumi.Input[int]] = None,
                 db_pwd: Optional[pulumi.Input[str]] = None,
                 db_type: Optional[pulumi.Input[str]] = None,
                 db_user: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 service_type: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatasourceArgs.__new__(DatasourceArgs)

            __props__.__dict__["catalog"] = catalog
            if charset is None and not opts.urn:
                raise TypeError("Missing required property 'charset'")
            __props__.__dict__["charset"] = charset
            __props__.__dict__["data_origin"] = data_origin
            __props__.__dict__["data_origin_datasource_id"] = data_origin_datasource_id
            __props__.__dict__["data_origin_project_id"] = data_origin_project_id
            if db_host is None and not opts.urn:
                raise TypeError("Missing required property 'db_host'")
            __props__.__dict__["db_host"] = db_host
            if db_name is None and not opts.urn:
                raise TypeError("Missing required property 'db_name'")
            __props__.__dict__["db_name"] = db_name
            if db_port is None and not opts.urn:
                raise TypeError("Missing required property 'db_port'")
            __props__.__dict__["db_port"] = db_port
            if db_pwd is None and not opts.urn:
                raise TypeError("Missing required property 'db_pwd'")
            __props__.__dict__["db_pwd"] = None if db_pwd is None else pulumi.Output.secret(db_pwd)
            if db_type is None and not opts.urn:
                raise TypeError("Missing required property 'db_type'")
            __props__.__dict__["db_type"] = db_type
            if db_user is None and not opts.urn:
                raise TypeError("Missing required property 'db_user'")
            __props__.__dict__["db_user"] = db_user
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["service_type"] = service_type
            if source_name is None and not opts.urn:
                raise TypeError("Missing required property 'source_name'")
            __props__.__dict__["source_name"] = source_name
            __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
            __props__.__dict__["vpc_id"] = vpc_id
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["dbPwd"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Datasource, __self__).__init__(
            'tencentcloud:Bi/datasource:Datasource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            catalog: Optional[pulumi.Input[str]] = None,
            charset: Optional[pulumi.Input[str]] = None,
            data_origin: Optional[pulumi.Input[str]] = None,
            data_origin_datasource_id: Optional[pulumi.Input[str]] = None,
            data_origin_project_id: Optional[pulumi.Input[str]] = None,
            db_host: Optional[pulumi.Input[str]] = None,
            db_name: Optional[pulumi.Input[str]] = None,
            db_port: Optional[pulumi.Input[int]] = None,
            db_pwd: Optional[pulumi.Input[str]] = None,
            db_type: Optional[pulumi.Input[str]] = None,
            db_user: Optional[pulumi.Input[str]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            service_type: Optional[pulumi.Input[str]] = None,
            source_name: Optional[pulumi.Input[str]] = None,
            uniq_vpc_id: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Datasource':
        """
        Get an existing Datasource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] catalog: Catalog.
        :param pulumi.Input[str] charset: Charset.
        :param pulumi.Input[str] data_origin: Third-party datasource identification, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_datasource_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] data_origin_project_id: Third-party datasource project id, this parameter can be ignored.
        :param pulumi.Input[str] db_host: Host.
        :param pulumi.Input[str] db_name: Database name.
        :param pulumi.Input[int] db_port: Port.
        :param pulumi.Input[str] db_pwd: Password.
        :param pulumi.Input[str] db_type: `MYSQL`, `MSSQL`, `POSTGRE`, `ORACLE`, `CLICKHOUSE`, `TIDB`, `HIVE`, `PRESTO`.
        :param pulumi.Input[str] db_user: User name.
        :param pulumi.Input[int] project_id: Project id.
        :param pulumi.Input[str] service_type: Own or Cloud, default: `Own`.
        :param pulumi.Input[str] source_name: Datasource name in BI.
        :param pulumi.Input[str] uniq_vpc_id: Tencent cloud private network unified identity.
        :param pulumi.Input[str] vpc_id: Tencent cloud private network identity.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatasourceState.__new__(_DatasourceState)

        __props__.__dict__["catalog"] = catalog
        __props__.__dict__["charset"] = charset
        __props__.__dict__["data_origin"] = data_origin
        __props__.__dict__["data_origin_datasource_id"] = data_origin_datasource_id
        __props__.__dict__["data_origin_project_id"] = data_origin_project_id
        __props__.__dict__["db_host"] = db_host
        __props__.__dict__["db_name"] = db_name
        __props__.__dict__["db_port"] = db_port
        __props__.__dict__["db_pwd"] = db_pwd
        __props__.__dict__["db_type"] = db_type
        __props__.__dict__["db_user"] = db_user
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["service_type"] = service_type
        __props__.__dict__["source_name"] = source_name
        __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
        __props__.__dict__["vpc_id"] = vpc_id
        return Datasource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Output[Optional[str]]:
        """
        Catalog.
        """
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def charset(self) -> pulumi.Output[str]:
        """
        Charset.
        """
        return pulumi.get(self, "charset")

    @property
    @pulumi.getter(name="dataOrigin")
    def data_origin(self) -> pulumi.Output[Optional[str]]:
        """
        Third-party datasource identification, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin")

    @property
    @pulumi.getter(name="dataOriginDatasourceId")
    def data_origin_datasource_id(self) -> pulumi.Output[Optional[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_datasource_id")

    @property
    @pulumi.getter(name="dataOriginProjectId")
    def data_origin_project_id(self) -> pulumi.Output[Optional[str]]:
        """
        Third-party datasource project id, this parameter can be ignored.
        """
        return pulumi.get(self, "data_origin_project_id")

    @property
    @pulumi.getter(name="dbHost")
    def db_host(self) -> pulumi.Output[str]:
        """
        Host.
        """
        return pulumi.get(self, "db_host")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Output[str]:
        """
        Database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbPort")
    def db_port(self) -> pulumi.Output[int]:
        """
        Port.
        """
        return pulumi.get(self, "db_port")

    @property
    @pulumi.getter(name="dbPwd")
    def db_pwd(self) -> pulumi.Output[str]:
        """
        Password.
        """
        return pulumi.get(self, "db_pwd")

    @property
    @pulumi.getter(name="dbType")
    def db_type(self) -> pulumi.Output[str]:
        """
        `MYSQL`, `MSSQL`, `POSTGRE`, `ORACLE`, `CLICKHOUSE`, `TIDB`, `HIVE`, `PRESTO`.
        """
        return pulumi.get(self, "db_type")

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> pulumi.Output[str]:
        """
        User name.
        """
        return pulumi.get(self, "db_user")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[int]:
        """
        Project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> pulumi.Output[Optional[str]]:
        """
        Own or Cloud, default: `Own`.
        """
        return pulumi.get(self, "service_type")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> pulumi.Output[str]:
        """
        Datasource name in BI.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Tencent cloud private network unified identity.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        Tencent cloud private network identity.
        """
        return pulumi.get(self, "vpc_id")

