# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectResult:
    """
    A collection of values returned by getProject.
    """
    def __init__(__self__, all_page=None, extra=None, id=None, keyword=None, lists=None, module_collection=None, msg=None, page_no=None, result_output_file=None):
        if all_page and not isinstance(all_page, bool):
            raise TypeError("Expected argument 'all_page' to be a bool")
        pulumi.set(__self__, "all_page", all_page)
        if extra and not isinstance(extra, str):
            raise TypeError("Expected argument 'extra' to be a str")
        pulumi.set(__self__, "extra", extra)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keyword and not isinstance(keyword, str):
            raise TypeError("Expected argument 'keyword' to be a str")
        pulumi.set(__self__, "keyword", keyword)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if module_collection and not isinstance(module_collection, str):
            raise TypeError("Expected argument 'module_collection' to be a str")
        pulumi.set(__self__, "module_collection", module_collection)
        if msg and not isinstance(msg, str):
            raise TypeError("Expected argument 'msg' to be a str")
        pulumi.set(__self__, "msg", msg)
        if page_no and not isinstance(page_no, int):
            raise TypeError("Expected argument 'page_no' to be a int")
        pulumi.set(__self__, "page_no", page_no)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="allPage")
    def all_page(self) -> Optional[bool]:
        return pulumi.get(self, "all_page")

    @property
    @pulumi.getter
    def extra(self) -> str:
        """
        Additional information(Note: This field may return null, indicating that no valid value can be obtained).
        """
        return pulumi.get(self, "extra")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def keyword(self) -> Optional[str]:
        return pulumi.get(self, "keyword")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetProjectListResult']:
        """
        Array(Note: This field may return null, indicating that no valid value can be obtained).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="moduleCollection")
    def module_collection(self) -> Optional[str]:
        return pulumi.get(self, "module_collection")

    @property
    @pulumi.getter
    def msg(self) -> str:
        """
        Interface information(Note: This field may return null, indicating that no valid value can be obtained).
        """
        return pulumi.get(self, "msg")

    @property
    @pulumi.getter(name="pageNo")
    def page_no(self) -> Optional[int]:
        return pulumi.get(self, "page_no")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            all_page=self.all_page,
            extra=self.extra,
            id=self.id,
            keyword=self.keyword,
            lists=self.lists,
            module_collection=self.module_collection,
            msg=self.msg,
            page_no=self.page_no,
            result_output_file=self.result_output_file)


def get_project(all_page: Optional[bool] = None,
                keyword: Optional[str] = None,
                module_collection: Optional[str] = None,
                page_no: Optional[int] = None,
                result_output_file: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    Use this data source to query detailed information of bi project

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    project = tencentcloud.Bi.get_project(all_page=True,
        keyword="abc",
        module_collection="sys_common_user",
        page_no=1)
    ```
    <!--End PulumiCodeChooser -->


    :param bool all_page: Whether to display all, if true, ignore paging.
    :param str keyword: Retrieve fuzzy fields.
    :param str module_collection: Role information, can be ignored.
    :param int page_no: Page number.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['allPage'] = all_page
    __args__['keyword'] = keyword
    __args__['moduleCollection'] = module_collection
    __args__['pageNo'] = page_no
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Bi/getProject:getProject', __args__, opts=opts, typ=GetProjectResult).value

    return AwaitableGetProjectResult(
        all_page=pulumi.get(__ret__, 'all_page'),
        extra=pulumi.get(__ret__, 'extra'),
        id=pulumi.get(__ret__, 'id'),
        keyword=pulumi.get(__ret__, 'keyword'),
        lists=pulumi.get(__ret__, 'lists'),
        module_collection=pulumi.get(__ret__, 'module_collection'),
        msg=pulumi.get(__ret__, 'msg'),
        page_no=pulumi.get(__ret__, 'page_no'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_project)
def get_project_output(all_page: Optional[pulumi.Input[Optional[bool]]] = None,
                       keyword: Optional[pulumi.Input[Optional[str]]] = None,
                       module_collection: Optional[pulumi.Input[Optional[str]]] = None,
                       page_no: Optional[pulumi.Input[Optional[int]]] = None,
                       result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProjectResult]:
    """
    Use this data source to query detailed information of bi project

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    project = tencentcloud.Bi.get_project(all_page=True,
        keyword="abc",
        module_collection="sys_common_user",
        page_no=1)
    ```
    <!--End PulumiCodeChooser -->


    :param bool all_page: Whether to display all, if true, ignore paging.
    :param str keyword: Retrieve fuzzy fields.
    :param str module_collection: Role information, can be ignored.
    :param int page_no: Page number.
    :param str result_output_file: Used to save results.
    """
    ...
