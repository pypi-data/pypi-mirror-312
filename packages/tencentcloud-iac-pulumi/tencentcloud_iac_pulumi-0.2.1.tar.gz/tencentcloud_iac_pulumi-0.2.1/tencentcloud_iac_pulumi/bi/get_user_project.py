# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetUserProjectResult',
    'AwaitableGetUserProjectResult',
    'get_user_project',
    'get_user_project_output',
]

@pulumi.output_type
class GetUserProjectResult:
    """
    A collection of values returned by getUserProject.
    """
    def __init__(__self__, all_page=None, id=None, lists=None, project_id=None, result_output_file=None):
        if all_page and not isinstance(all_page, bool):
            raise TypeError("Expected argument 'all_page' to be a bool")
        pulumi.set(__self__, "all_page", all_page)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if project_id and not isinstance(project_id, int):
            raise TypeError("Expected argument 'project_id' to be a int")
        pulumi.set(__self__, "project_id", project_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="allPage")
    def all_page(self) -> Optional[bool]:
        return pulumi.get(self, "all_page")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetUserProjectListResult']:
        """
        Array(Note: This field may return null, indicating that no valid value can be obtained).
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetUserProjectResult(GetUserProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserProjectResult(
            all_page=self.all_page,
            id=self.id,
            lists=self.lists,
            project_id=self.project_id,
            result_output_file=self.result_output_file)


def get_user_project(all_page: Optional[bool] = None,
                     project_id: Optional[int] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserProjectResult:
    """
    Use this data source to query detailed information of bi user_project

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    user_project = tencentcloud.Bi.get_user_project(all_page=True,
        project_id=123)
    ```
    <!--End PulumiCodeChooser -->


    :param bool all_page: Whether to display all, if true, ignore paging.
    :param int project_id: Project id.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['allPage'] = all_page
    __args__['projectId'] = project_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Bi/getUserProject:getUserProject', __args__, opts=opts, typ=GetUserProjectResult).value

    return AwaitableGetUserProjectResult(
        all_page=pulumi.get(__ret__, 'all_page'),
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        project_id=pulumi.get(__ret__, 'project_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_user_project)
def get_user_project_output(all_page: Optional[pulumi.Input[Optional[bool]]] = None,
                            project_id: Optional[pulumi.Input[Optional[int]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserProjectResult]:
    """
    Use this data source to query detailed information of bi user_project

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    user_project = tencentcloud.Bi.get_user_project(all_page=True,
        project_id=123)
    ```
    <!--End PulumiCodeChooser -->


    :param bool all_page: Whether to display all, if true, ignore paging.
    :param int project_id: Project id.
    :param str result_output_file: Used to save results.
    """
    ...
