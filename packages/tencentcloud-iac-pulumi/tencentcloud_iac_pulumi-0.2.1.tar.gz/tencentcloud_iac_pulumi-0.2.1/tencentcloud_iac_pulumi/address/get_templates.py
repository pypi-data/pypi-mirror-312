# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTemplatesResult',
    'AwaitableGetTemplatesResult',
    'get_templates',
    'get_templates_output',
]

@pulumi.output_type
class GetTemplatesResult:
    """
    A collection of values returned by getTemplates.
    """
    def __init__(__self__, id=None, name=None, result_output_file=None, template_lists=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if template_lists and not isinstance(template_lists, list):
            raise TypeError("Expected argument 'template_lists' to be a list")
        pulumi.set(__self__, "template_lists", template_lists)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the address template.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of address template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="templateLists")
    def template_lists(self) -> Sequence['outputs.GetTemplatesTemplateListResult']:
        """
        Information list of the dedicated address templates.
        """
        return pulumi.get(self, "template_lists")


class AwaitableGetTemplatesResult(GetTemplatesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTemplatesResult(
            id=self.id,
            name=self.name,
            result_output_file=self.result_output_file,
            template_lists=self.template_lists)


def get_templates(id: Optional[str] = None,
                  name: Optional[str] = None,
                  result_output_file: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTemplatesResult:
    """
    Use this data source to query detailed information of address templates.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    name = tencentcloud.Address.get_templates(name="test")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: ID of the address template to query.
    :param str name: Name of the address template to query.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Address/getTemplates:getTemplates', __args__, opts=opts, typ=GetTemplatesResult).value

    return AwaitableGetTemplatesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        template_lists=pulumi.get(__ret__, 'template_lists'))


@_utilities.lift_output_func(get_templates)
def get_templates_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                         name: Optional[pulumi.Input[Optional[str]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTemplatesResult]:
    """
    Use this data source to query detailed information of address templates.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    name = tencentcloud.Address.get_templates(name="test")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: ID of the address template to query.
    :param str name: Name of the address template to query.
    :param str result_output_file: Used to save results.
    """
    ...
