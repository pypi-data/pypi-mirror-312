# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AddressTemplateArgs', 'AddressTemplate']

@pulumi.input_type
class AddressTemplateArgs:
    def __init__(__self__, *,
                 detail: pulumi.Input[str],
                 ip_string: pulumi.Input[str],
                 type: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AddressTemplate resource.
        :param pulumi.Input[str] detail: Template Detail.
        :param pulumi.Input[str] ip_string: Type is 1, ip template eg: 1.1.1.1,2.2.2.2; Type is 5, domain name template eg: www.qq.com, www.tencent.com.
        :param pulumi.Input[int] type: 1: ip template; 5: domain name templates.
        :param pulumi.Input[str] name: Template name.
        """
        pulumi.set(__self__, "detail", detail)
        pulumi.set(__self__, "ip_string", ip_string)
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def detail(self) -> pulumi.Input[str]:
        """
        Template Detail.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: pulumi.Input[str]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter(name="ipString")
    def ip_string(self) -> pulumi.Input[str]:
        """
        Type is 1, ip template eg: 1.1.1.1,2.2.2.2; Type is 5, domain name template eg: www.qq.com, www.tencent.com.
        """
        return pulumi.get(self, "ip_string")

    @ip_string.setter
    def ip_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_string", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[int]:
        """
        1: ip template; 5: domain name templates.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[int]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AddressTemplateState:
    def __init__(__self__, *,
                 detail: Optional[pulumi.Input[str]] = None,
                 ip_string: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AddressTemplate resources.
        :param pulumi.Input[str] detail: Template Detail.
        :param pulumi.Input[str] ip_string: Type is 1, ip template eg: 1.1.1.1,2.2.2.2; Type is 5, domain name template eg: www.qq.com, www.tencent.com.
        :param pulumi.Input[str] name: Template name.
        :param pulumi.Input[int] type: 1: ip template; 5: domain name templates.
        """
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if ip_string is not None:
            pulumi.set(__self__, "ip_string", ip_string)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[str]]:
        """
        Template Detail.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter(name="ipString")
    def ip_string(self) -> Optional[pulumi.Input[str]]:
        """
        Type is 1, ip template eg: 1.1.1.1,2.2.2.2; Type is 5, domain name template eg: www.qq.com, www.tencent.com.
        """
        return pulumi.get(self, "ip_string")

    @ip_string.setter
    def ip_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_string", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[int]]:
        """
        1: ip template; 5: domain name templates.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "type", value)


class AddressTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 detail: Optional[pulumi.Input[str]] = None,
                 ip_string: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a cfw address_template

        ## Example Usage

        ### If type is 1

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.AddressTemplate("example",
            detail="test template",
            ip_string="1.1.1.1,2.2.2.2",
            type=1)
        ```
        <!--End PulumiCodeChooser -->

        ### If type is 5

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.AddressTemplate("example",
            detail="test template",
            ip_string="www.qq.com,www.tencent.com",
            type=5)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfw address_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cfw/addressTemplate:AddressTemplate example mb_1300846651_1695611353900
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] detail: Template Detail.
        :param pulumi.Input[str] ip_string: Type is 1, ip template eg: 1.1.1.1,2.2.2.2; Type is 5, domain name template eg: www.qq.com, www.tencent.com.
        :param pulumi.Input[str] name: Template name.
        :param pulumi.Input[int] type: 1: ip template; 5: domain name templates.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AddressTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfw address_template

        ## Example Usage

        ### If type is 1

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.AddressTemplate("example",
            detail="test template",
            ip_string="1.1.1.1,2.2.2.2",
            type=1)
        ```
        <!--End PulumiCodeChooser -->

        ### If type is 5

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.AddressTemplate("example",
            detail="test template",
            ip_string="www.qq.com,www.tencent.com",
            type=5)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfw address_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cfw/addressTemplate:AddressTemplate example mb_1300846651_1695611353900
        ```

        :param str resource_name: The name of the resource.
        :param AddressTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AddressTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 detail: Optional[pulumi.Input[str]] = None,
                 ip_string: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AddressTemplateArgs.__new__(AddressTemplateArgs)

            if detail is None and not opts.urn:
                raise TypeError("Missing required property 'detail'")
            __props__.__dict__["detail"] = detail
            if ip_string is None and not opts.urn:
                raise TypeError("Missing required property 'ip_string'")
            __props__.__dict__["ip_string"] = ip_string
            __props__.__dict__["name"] = name
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(AddressTemplate, __self__).__init__(
            'tencentcloud:Cfw/addressTemplate:AddressTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            detail: Optional[pulumi.Input[str]] = None,
            ip_string: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[int]] = None) -> 'AddressTemplate':
        """
        Get an existing AddressTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] detail: Template Detail.
        :param pulumi.Input[str] ip_string: Type is 1, ip template eg: 1.1.1.1,2.2.2.2; Type is 5, domain name template eg: www.qq.com, www.tencent.com.
        :param pulumi.Input[str] name: Template name.
        :param pulumi.Input[int] type: 1: ip template; 5: domain name templates.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AddressTemplateState.__new__(_AddressTemplateState)

        __props__.__dict__["detail"] = detail
        __props__.__dict__["ip_string"] = ip_string
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        return AddressTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def detail(self) -> pulumi.Output[str]:
        """
        Template Detail.
        """
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="ipString")
    def ip_string(self) -> pulumi.Output[str]:
        """
        Type is 1, ip template eg: 1.1.1.1,2.2.2.2; Type is 5, domain name template eg: www.qq.com, www.tencent.com.
        """
        return pulumi.get(self, "ip_string")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Template name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[int]:
        """
        1: ip template; 5: domain name templates.
        """
        return pulumi.get(self, "type")

