# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['BlockIgnoreArgs', 'BlockIgnore']

@pulumi.input_type
class BlockIgnoreArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 end_time: pulumi.Input[str],
                 rule_type: pulumi.Input[int],
                 comment: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BlockIgnore resource.
        :param pulumi.Input[str] direction: Rule direction, 0 outbound, 1 inbound, 3 intranet.
        :param pulumi.Input[str] end_time: Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
        :param pulumi.Input[int] rule_type: Rule type, 1 block, 2 ignore, domain block is not supported.
        :param pulumi.Input[str] comment: Remarks information, length cannot exceed 50.
        :param pulumi.Input[str] domain: Rule domain name, one of IP and Domain is required.
        :param pulumi.Input[str] ip: Rule IP address, one of IP and Domain is required.
        :param pulumi.Input[str] start_time: Rule start time.
        """
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "rule_type", rule_type)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        """
        Rule direction, 0 outbound, 1 inbound, 3 intranet.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        """
        Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Input[int]:
        """
        Rule type, 1 block, 2 ignore, domain block is not supported.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Remarks information, length cannot exceed 50.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Rule domain name, one of IP and Domain is required.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Rule IP address, one of IP and Domain is required.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Rule start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class _BlockIgnoreState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BlockIgnore resources.
        :param pulumi.Input[str] comment: Remarks information, length cannot exceed 50.
        :param pulumi.Input[str] direction: Rule direction, 0 outbound, 1 inbound, 3 intranet.
        :param pulumi.Input[str] domain: Rule domain name, one of IP and Domain is required.
        :param pulumi.Input[str] end_time: Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
        :param pulumi.Input[str] ip: Rule IP address, one of IP and Domain is required.
        :param pulumi.Input[int] rule_type: Rule type, 1 block, 2 ignore, domain block is not supported.
        :param pulumi.Input[str] start_time: Rule start time.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if direction is not None:
            pulumi.set(__self__, "direction", direction)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if rule_type is not None:
            pulumi.set(__self__, "rule_type", rule_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Remarks information, length cannot exceed 50.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def direction(self) -> Optional[pulumi.Input[str]]:
        """
        Rule direction, 0 outbound, 1 inbound, 3 intranet.
        """
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Rule domain name, one of IP and Domain is required.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Rule IP address, one of IP and Domain is required.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> Optional[pulumi.Input[int]]:
        """
        Rule type, 1 block, 2 ignore, domain block is not supported.
        """
        return pulumi.get(self, "rule_type")

    @rule_type.setter
    def rule_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        Rule start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


class BlockIgnore(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cfw block_ignore

        > **NOTE:** If create domain rule, `RuleType` not support set 2.

        ## Example Usage

        ### If create ip rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.BlockIgnore("example",
            comment="remark.",
            direction="0",
            end_time="2023-10-01 00:00:00",
            ip="1.1.1.1",
            rule_type=1,
            start_time="2023-09-01 00:00:00")
        ```
        <!--End PulumiCodeChooser -->

        ### If create domain rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.BlockIgnore("example",
            comment="remark.",
            direction="1",
            domain="domain.com",
            end_time="2023-10-01 00:00:00",
            rule_type=1,
            start_time="2023-09-01 00:00:00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfw block_ignore_list can be imported using the id, e.g.

        If import ip rule

        ```sh
        $ pulumi import tencentcloud:Cfw/blockIgnore:BlockIgnore example 1.1.1.1##0#1
        ```

        If import domain rule

        ```sh
        $ pulumi import tencentcloud:Cfw/blockIgnore:BlockIgnore example domain.com##0#1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Remarks information, length cannot exceed 50.
        :param pulumi.Input[str] direction: Rule direction, 0 outbound, 1 inbound, 3 intranet.
        :param pulumi.Input[str] domain: Rule domain name, one of IP and Domain is required.
        :param pulumi.Input[str] end_time: Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
        :param pulumi.Input[str] ip: Rule IP address, one of IP and Domain is required.
        :param pulumi.Input[int] rule_type: Rule type, 1 block, 2 ignore, domain block is not supported.
        :param pulumi.Input[str] start_time: Rule start time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BlockIgnoreArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfw block_ignore

        > **NOTE:** If create domain rule, `RuleType` not support set 2.

        ## Example Usage

        ### If create ip rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.BlockIgnore("example",
            comment="remark.",
            direction="0",
            end_time="2023-10-01 00:00:00",
            ip="1.1.1.1",
            rule_type=1,
            start_time="2023-09-01 00:00:00")
        ```
        <!--End PulumiCodeChooser -->

        ### If create domain rule

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.BlockIgnore("example",
            comment="remark.",
            direction="1",
            domain="domain.com",
            end_time="2023-10-01 00:00:00",
            rule_type=1,
            start_time="2023-09-01 00:00:00")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cfw block_ignore_list can be imported using the id, e.g.

        If import ip rule

        ```sh
        $ pulumi import tencentcloud:Cfw/blockIgnore:BlockIgnore example 1.1.1.1##0#1
        ```

        If import domain rule

        ```sh
        $ pulumi import tencentcloud:Cfw/blockIgnore:BlockIgnore example domain.com##0#1
        ```

        :param str resource_name: The name of the resource.
        :param BlockIgnoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BlockIgnoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 direction: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 rule_type: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BlockIgnoreArgs.__new__(BlockIgnoreArgs)

            __props__.__dict__["comment"] = comment
            if direction is None and not opts.urn:
                raise TypeError("Missing required property 'direction'")
            __props__.__dict__["direction"] = direction
            __props__.__dict__["domain"] = domain
            if end_time is None and not opts.urn:
                raise TypeError("Missing required property 'end_time'")
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["ip"] = ip
            if rule_type is None and not opts.urn:
                raise TypeError("Missing required property 'rule_type'")
            __props__.__dict__["rule_type"] = rule_type
            __props__.__dict__["start_time"] = start_time
        super(BlockIgnore, __self__).__init__(
            'tencentcloud:Cfw/blockIgnore:BlockIgnore',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            direction: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            rule_type: Optional[pulumi.Input[int]] = None,
            start_time: Optional[pulumi.Input[str]] = None) -> 'BlockIgnore':
        """
        Get an existing BlockIgnore resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Remarks information, length cannot exceed 50.
        :param pulumi.Input[str] direction: Rule direction, 0 outbound, 1 inbound, 3 intranet.
        :param pulumi.Input[str] domain: Rule domain name, one of IP and Domain is required.
        :param pulumi.Input[str] end_time: Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
        :param pulumi.Input[str] ip: Rule IP address, one of IP and Domain is required.
        :param pulumi.Input[int] rule_type: Rule type, 1 block, 2 ignore, domain block is not supported.
        :param pulumi.Input[str] start_time: Rule start time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BlockIgnoreState.__new__(_BlockIgnoreState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["direction"] = direction
        __props__.__dict__["domain"] = domain
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["ip"] = ip
        __props__.__dict__["rule_type"] = rule_type
        __props__.__dict__["start_time"] = start_time
        return BlockIgnore(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Remarks information, length cannot exceed 50.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Output[str]:
        """
        Rule direction, 0 outbound, 1 inbound, 3 intranet.
        """
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        Rule domain name, one of IP and Domain is required.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[Optional[str]]:
        """
        Rule IP address, one of IP and Domain is required.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> pulumi.Output[int]:
        """
        Rule type, 1 block, 2 ignore, domain block is not supported.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        Rule start time.
        """
        return pulumi.get(self, "start_time")

