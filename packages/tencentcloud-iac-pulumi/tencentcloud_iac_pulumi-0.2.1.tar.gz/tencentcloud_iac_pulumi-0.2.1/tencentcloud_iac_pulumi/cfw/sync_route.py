# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SyncRouteArgs', 'SyncRoute']

@pulumi.input_type
class SyncRouteArgs:
    def __init__(__self__, *,
                 sync_type: pulumi.Input[str],
                 fw_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SyncRoute resource.
        :param pulumi.Input[str] sync_type: Synchronization operation type: Route, synchronize firewall routing.
        :param pulumi.Input[str] fw_type: Firewall type; nat: nat firewall; ew: inter-vpc firewall.
        """
        pulumi.set(__self__, "sync_type", sync_type)
        if fw_type is not None:
            pulumi.set(__self__, "fw_type", fw_type)

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> pulumi.Input[str]:
        """
        Synchronization operation type: Route, synchronize firewall routing.
        """
        return pulumi.get(self, "sync_type")

    @sync_type.setter
    def sync_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "sync_type", value)

    @property
    @pulumi.getter(name="fwType")
    def fw_type(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall type; nat: nat firewall; ew: inter-vpc firewall.
        """
        return pulumi.get(self, "fw_type")

    @fw_type.setter
    def fw_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_type", value)


@pulumi.input_type
class _SyncRouteState:
    def __init__(__self__, *,
                 fw_type: Optional[pulumi.Input[str]] = None,
                 sync_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SyncRoute resources.
        :param pulumi.Input[str] fw_type: Firewall type; nat: nat firewall; ew: inter-vpc firewall.
        :param pulumi.Input[str] sync_type: Synchronization operation type: Route, synchronize firewall routing.
        """
        if fw_type is not None:
            pulumi.set(__self__, "fw_type", fw_type)
        if sync_type is not None:
            pulumi.set(__self__, "sync_type", sync_type)

    @property
    @pulumi.getter(name="fwType")
    def fw_type(self) -> Optional[pulumi.Input[str]]:
        """
        Firewall type; nat: nat firewall; ew: inter-vpc firewall.
        """
        return pulumi.get(self, "fw_type")

    @fw_type.setter
    def fw_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fw_type", value)

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> Optional[pulumi.Input[str]]:
        """
        Synchronization operation type: Route, synchronize firewall routing.
        """
        return pulumi.get(self, "sync_type")

    @sync_type.setter
    def sync_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_type", value)


class SyncRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fw_type: Optional[pulumi.Input[str]] = None,
                 sync_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cfw sync_route

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.SyncRoute("example",
            fw_type="nat",
            sync_type="Route")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] fw_type: Firewall type; nat: nat firewall; ew: inter-vpc firewall.
        :param pulumi.Input[str] sync_type: Synchronization operation type: Route, synchronize firewall routing.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyncRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfw sync_route

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.cfw.SyncRoute("example",
            fw_type="nat",
            sync_type="Route")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SyncRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyncRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 fw_type: Optional[pulumi.Input[str]] = None,
                 sync_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyncRouteArgs.__new__(SyncRouteArgs)

            __props__.__dict__["fw_type"] = fw_type
            if sync_type is None and not opts.urn:
                raise TypeError("Missing required property 'sync_type'")
            __props__.__dict__["sync_type"] = sync_type
        super(SyncRoute, __self__).__init__(
            'tencentcloud:Cfw/syncRoute:SyncRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            fw_type: Optional[pulumi.Input[str]] = None,
            sync_type: Optional[pulumi.Input[str]] = None) -> 'SyncRoute':
        """
        Get an existing SyncRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] fw_type: Firewall type; nat: nat firewall; ew: inter-vpc firewall.
        :param pulumi.Input[str] sync_type: Synchronization operation type: Route, synchronize firewall routing.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SyncRouteState.__new__(_SyncRouteState)

        __props__.__dict__["fw_type"] = fw_type
        __props__.__dict__["sync_type"] = sync_type
        return SyncRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fwType")
    def fw_type(self) -> pulumi.Output[Optional[str]]:
        """
        Firewall type; nat: nat firewall; ew: inter-vpc firewall.
        """
        return pulumi.get(self, "fw_type")

    @property
    @pulumi.getter(name="syncType")
    def sync_type(self) -> pulumi.Output[str]:
        """
        Synchronization operation type: Route, synchronize firewall routing.
        """
        return pulumi.get(self, "sync_type")

