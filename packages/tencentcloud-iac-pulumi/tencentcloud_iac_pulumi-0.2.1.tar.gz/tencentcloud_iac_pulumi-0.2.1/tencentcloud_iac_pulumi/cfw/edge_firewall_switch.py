# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EdgeFirewallSwitchArgs', 'EdgeFirewallSwitch']

@pulumi.input_type
class EdgeFirewallSwitchArgs:
    def __init__(__self__, *,
                 enable: pulumi.Input[int],
                 public_ip: pulumi.Input[str],
                 switch_mode: pulumi.Input[int],
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EdgeFirewallSwitch resource.
        :param pulumi.Input[int] enable: Switch, 0: off, 1: on.
        :param pulumi.Input[str] public_ip: Public Ip.
        :param pulumi.Input[int] switch_mode: 0: bypass; 1: serial.
        :param pulumi.Input[str] subnet_id: The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switch_mode` is 1 and `enable` is 1, this field is required.
        """
        pulumi.set(__self__, "enable", enable)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "switch_mode", switch_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Input[int]:
        """
        Switch, 0: off, 1: on.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: pulumi.Input[int]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Input[str]:
        """
        Public Ip.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="switchMode")
    def switch_mode(self) -> pulumi.Input[int]:
        """
        0: bypass; 1: serial.
        """
        return pulumi.get(self, "switch_mode")

    @switch_mode.setter
    def switch_mode(self, value: pulumi.Input[int]):
        pulumi.set(self, "switch_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switch_mode` is 1 and `enable` is 1, this field is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class _EdgeFirewallSwitchState:
    def __init__(__self__, *,
                 enable: Optional[pulumi.Input[int]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 switch_mode: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering EdgeFirewallSwitch resources.
        :param pulumi.Input[int] enable: Switch, 0: off, 1: on.
        :param pulumi.Input[str] public_ip: Public Ip.
        :param pulumi.Input[str] subnet_id: The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switch_mode` is 1 and `enable` is 1, this field is required.
        :param pulumi.Input[int] switch_mode: 0: bypass; 1: serial.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if switch_mode is not None:
            pulumi.set(__self__, "switch_mode", switch_mode)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Switch, 0: off, 1: on.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Public Ip.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switch_mode` is 1 and `enable` is 1, this field is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="switchMode")
    def switch_mode(self) -> Optional[pulumi.Input[int]]:
        """
        0: bypass; 1: serial.
        """
        return pulumi.get(self, "switch_mode")

    @switch_mode.setter
    def switch_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switch_mode", value)


class EdgeFirewallSwitch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 switch_mode: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a cfw edge_firewall_switch

        ## Example Usage

        ### If not set subnet_id

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_edge_fw_switches = tencentcloud.Cfw.get_edge_fw_switches()
        example_edge_firewall_switch = tencentcloud.cfw.EdgeFirewallSwitch("exampleEdgeFirewallSwitch",
            public_ip=example_edge_fw_switches.datas[0].public_ip,
            switch_mode=1,
            enable=0)
        ```
        <!--End PulumiCodeChooser -->

        ### If set subnet id

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_edge_fw_switches = tencentcloud.Cfw.get_edge_fw_switches()
        example_edge_firewall_switch = tencentcloud.cfw.EdgeFirewallSwitch("exampleEdgeFirewallSwitch",
            public_ip=example_edge_fw_switches.datas[0].public_ip,
            subnet_id="subnet-id",
            switch_mode=1,
            enable=1)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] enable: Switch, 0: off, 1: on.
        :param pulumi.Input[str] public_ip: Public Ip.
        :param pulumi.Input[str] subnet_id: The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switch_mode` is 1 and `enable` is 1, this field is required.
        :param pulumi.Input[int] switch_mode: 0: bypass; 1: serial.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EdgeFirewallSwitchArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cfw edge_firewall_switch

        ## Example Usage

        ### If not set subnet_id

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_edge_fw_switches = tencentcloud.Cfw.get_edge_fw_switches()
        example_edge_firewall_switch = tencentcloud.cfw.EdgeFirewallSwitch("exampleEdgeFirewallSwitch",
            public_ip=example_edge_fw_switches.datas[0].public_ip,
            switch_mode=1,
            enable=0)
        ```
        <!--End PulumiCodeChooser -->

        ### If set subnet id

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        example_edge_fw_switches = tencentcloud.Cfw.get_edge_fw_switches()
        example_edge_firewall_switch = tencentcloud.cfw.EdgeFirewallSwitch("exampleEdgeFirewallSwitch",
            public_ip=example_edge_fw_switches.datas[0].public_ip,
            subnet_id="subnet-id",
            switch_mode=1,
            enable=1)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param EdgeFirewallSwitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EdgeFirewallSwitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 switch_mode: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EdgeFirewallSwitchArgs.__new__(EdgeFirewallSwitchArgs)

            if enable is None and not opts.urn:
                raise TypeError("Missing required property 'enable'")
            __props__.__dict__["enable"] = enable
            if public_ip is None and not opts.urn:
                raise TypeError("Missing required property 'public_ip'")
            __props__.__dict__["public_ip"] = public_ip
            __props__.__dict__["subnet_id"] = subnet_id
            if switch_mode is None and not opts.urn:
                raise TypeError("Missing required property 'switch_mode'")
            __props__.__dict__["switch_mode"] = switch_mode
        super(EdgeFirewallSwitch, __self__).__init__(
            'tencentcloud:Cfw/edgeFirewallSwitch:EdgeFirewallSwitch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable: Optional[pulumi.Input[int]] = None,
            public_ip: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            switch_mode: Optional[pulumi.Input[int]] = None) -> 'EdgeFirewallSwitch':
        """
        Get an existing EdgeFirewallSwitch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] enable: Switch, 0: off, 1: on.
        :param pulumi.Input[str] public_ip: Public Ip.
        :param pulumi.Input[str] subnet_id: The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switch_mode` is 1 and `enable` is 1, this field is required.
        :param pulumi.Input[int] switch_mode: 0: bypass; 1: serial.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EdgeFirewallSwitchState.__new__(_EdgeFirewallSwitchState)

        __props__.__dict__["enable"] = enable
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["switch_mode"] = switch_mode
        return EdgeFirewallSwitch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[int]:
        """
        Switch, 0: off, 1: on.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[str]:
        """
        Public Ip.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switch_mode` is 1 and `enable` is 1, this field is required.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="switchMode")
    def switch_mode(self) -> pulumi.Output[int]:
        """
        0: bypass; 1: serial.
        """
        return pulumi.get(self, "switch_mode")

