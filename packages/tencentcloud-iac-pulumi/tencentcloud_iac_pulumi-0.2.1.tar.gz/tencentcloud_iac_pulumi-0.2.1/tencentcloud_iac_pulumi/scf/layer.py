# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LayerArgs', 'Layer']

@pulumi.input_type
class LayerArgs:
    def __init__(__self__, *,
                 compatible_runtimes: pulumi.Input[Sequence[pulumi.Input[str]]],
                 content: pulumi.Input['LayerContentArgs'],
                 layer_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 license_info: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Layer resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compatible_runtimes: The compatible runtimes of layer.
        :param pulumi.Input['LayerContentArgs'] content: The source code of layer.
        :param pulumi.Input[str] layer_name: The name of layer.
        :param pulumi.Input[str] description: The description of layer.
        :param pulumi.Input[str] license_info: The license info of layer.
        """
        pulumi.set(__self__, "compatible_runtimes", compatible_runtimes)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "layer_name", layer_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if license_info is not None:
            pulumi.set(__self__, "license_info", license_info)

    @property
    @pulumi.getter(name="compatibleRuntimes")
    def compatible_runtimes(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The compatible runtimes of layer.
        """
        return pulumi.get(self, "compatible_runtimes")

    @compatible_runtimes.setter
    def compatible_runtimes(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "compatible_runtimes", value)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['LayerContentArgs']:
        """
        The source code of layer.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['LayerContentArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> pulumi.Input[str]:
        """
        The name of layer.
        """
        return pulumi.get(self, "layer_name")

    @layer_name.setter
    def layer_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "layer_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of layer.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="licenseInfo")
    def license_info(self) -> Optional[pulumi.Input[str]]:
        """
        The license info of layer.
        """
        return pulumi.get(self, "license_info")

    @license_info.setter
    def license_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_info", value)


@pulumi.input_type
class _LayerState:
    def __init__(__self__, *,
                 code_sha256: Optional[pulumi.Input[str]] = None,
                 compatible_runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 content: Optional[pulumi.Input['LayerContentArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 layer_name: Optional[pulumi.Input[str]] = None,
                 layer_version: Optional[pulumi.Input[int]] = None,
                 license_info: Optional[pulumi.Input[str]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Layer resources.
        :param pulumi.Input[str] code_sha256: The code type of layer.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compatible_runtimes: The compatible runtimes of layer.
        :param pulumi.Input['LayerContentArgs'] content: The source code of layer.
        :param pulumi.Input[str] create_time: The create time of layer.
        :param pulumi.Input[str] description: The description of layer.
        :param pulumi.Input[str] layer_name: The name of layer.
        :param pulumi.Input[int] layer_version: The version of layer.
        :param pulumi.Input[str] license_info: The license info of layer.
        :param pulumi.Input[str] location: The download location url of layer.
        :param pulumi.Input[str] status: The current status of layer.
        """
        if code_sha256 is not None:
            pulumi.set(__self__, "code_sha256", code_sha256)
        if compatible_runtimes is not None:
            pulumi.set(__self__, "compatible_runtimes", compatible_runtimes)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if layer_name is not None:
            pulumi.set(__self__, "layer_name", layer_name)
        if layer_version is not None:
            pulumi.set(__self__, "layer_version", layer_version)
        if license_info is not None:
            pulumi.set(__self__, "license_info", license_info)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="codeSha256")
    def code_sha256(self) -> Optional[pulumi.Input[str]]:
        """
        The code type of layer.
        """
        return pulumi.get(self, "code_sha256")

    @code_sha256.setter
    def code_sha256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code_sha256", value)

    @property
    @pulumi.getter(name="compatibleRuntimes")
    def compatible_runtimes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The compatible runtimes of layer.
        """
        return pulumi.get(self, "compatible_runtimes")

    @compatible_runtimes.setter
    def compatible_runtimes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "compatible_runtimes", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input['LayerContentArgs']]:
        """
        The source code of layer.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input['LayerContentArgs']]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The create time of layer.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of layer.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of layer.
        """
        return pulumi.get(self, "layer_name")

    @layer_name.setter
    def layer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layer_name", value)

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> Optional[pulumi.Input[int]]:
        """
        The version of layer.
        """
        return pulumi.get(self, "layer_version")

    @layer_version.setter
    def layer_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "layer_version", value)

    @property
    @pulumi.getter(name="licenseInfo")
    def license_info(self) -> Optional[pulumi.Input[str]]:
        """
        The license info of layer.
        """
        return pulumi.get(self, "license_info")

    @license_info.setter
    def license_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_info", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        The download location url of layer.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The current status of layer.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class Layer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compatible_runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 content: Optional[pulumi.Input[pulumi.InputType['LayerContentArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 layer_name: Optional[pulumi.Input[str]] = None,
                 license_info: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provide a resource to create a SCF layer.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Layer("foo",
            compatible_runtimes=["Python3.6"],
            content=tencentcloud.scf.LayerContentArgs(
                cos_bucket_name="test-bucket",
                cos_bucket_region="ap-guangzhou",
                cos_object_name="/foo.zip",
            ),
            description="foo",
            layer_name="foo",
            license_info="foo")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Scf layer can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Scf/layer:Layer layer layerId#layerVersion
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compatible_runtimes: The compatible runtimes of layer.
        :param pulumi.Input[pulumi.InputType['LayerContentArgs']] content: The source code of layer.
        :param pulumi.Input[str] description: The description of layer.
        :param pulumi.Input[str] layer_name: The name of layer.
        :param pulumi.Input[str] license_info: The license info of layer.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LayerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provide a resource to create a SCF layer.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.scf.Layer("foo",
            compatible_runtimes=["Python3.6"],
            content=tencentcloud.scf.LayerContentArgs(
                cos_bucket_name="test-bucket",
                cos_bucket_region="ap-guangzhou",
                cos_object_name="/foo.zip",
            ),
            description="foo",
            layer_name="foo",
            license_info="foo")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Scf layer can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Scf/layer:Layer layer layerId#layerVersion
        ```

        :param str resource_name: The name of the resource.
        :param LayerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LayerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compatible_runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 content: Optional[pulumi.Input[pulumi.InputType['LayerContentArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 layer_name: Optional[pulumi.Input[str]] = None,
                 license_info: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LayerArgs.__new__(LayerArgs)

            if compatible_runtimes is None and not opts.urn:
                raise TypeError("Missing required property 'compatible_runtimes'")
            __props__.__dict__["compatible_runtimes"] = compatible_runtimes
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            if layer_name is None and not opts.urn:
                raise TypeError("Missing required property 'layer_name'")
            __props__.__dict__["layer_name"] = layer_name
            __props__.__dict__["license_info"] = license_info
            __props__.__dict__["code_sha256"] = None
            __props__.__dict__["create_time"] = None
            __props__.__dict__["layer_version"] = None
            __props__.__dict__["location"] = None
            __props__.__dict__["status"] = None
        super(Layer, __self__).__init__(
            'tencentcloud:Scf/layer:Layer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            code_sha256: Optional[pulumi.Input[str]] = None,
            compatible_runtimes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            content: Optional[pulumi.Input[pulumi.InputType['LayerContentArgs']]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            layer_name: Optional[pulumi.Input[str]] = None,
            layer_version: Optional[pulumi.Input[int]] = None,
            license_info: Optional[pulumi.Input[str]] = None,
            location: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'Layer':
        """
        Get an existing Layer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] code_sha256: The code type of layer.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compatible_runtimes: The compatible runtimes of layer.
        :param pulumi.Input[pulumi.InputType['LayerContentArgs']] content: The source code of layer.
        :param pulumi.Input[str] create_time: The create time of layer.
        :param pulumi.Input[str] description: The description of layer.
        :param pulumi.Input[str] layer_name: The name of layer.
        :param pulumi.Input[int] layer_version: The version of layer.
        :param pulumi.Input[str] license_info: The license info of layer.
        :param pulumi.Input[str] location: The download location url of layer.
        :param pulumi.Input[str] status: The current status of layer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LayerState.__new__(_LayerState)

        __props__.__dict__["code_sha256"] = code_sha256
        __props__.__dict__["compatible_runtimes"] = compatible_runtimes
        __props__.__dict__["content"] = content
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["layer_name"] = layer_name
        __props__.__dict__["layer_version"] = layer_version
        __props__.__dict__["license_info"] = license_info
        __props__.__dict__["location"] = location
        __props__.__dict__["status"] = status
        return Layer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="codeSha256")
    def code_sha256(self) -> pulumi.Output[str]:
        """
        The code type of layer.
        """
        return pulumi.get(self, "code_sha256")

    @property
    @pulumi.getter(name="compatibleRuntimes")
    def compatible_runtimes(self) -> pulumi.Output[Sequence[str]]:
        """
        The compatible runtimes of layer.
        """
        return pulumi.get(self, "compatible_runtimes")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output['outputs.LayerContent']:
        """
        The source code of layer.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The create time of layer.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of layer.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="layerName")
    def layer_name(self) -> pulumi.Output[str]:
        """
        The name of layer.
        """
        return pulumi.get(self, "layer_name")

    @property
    @pulumi.getter(name="layerVersion")
    def layer_version(self) -> pulumi.Output[int]:
        """
        The version of layer.
        """
        return pulumi.get(self, "layer_version")

    @property
    @pulumi.getter(name="licenseInfo")
    def license_info(self) -> pulumi.Output[Optional[str]]:
        """
        The license info of layer.
        """
        return pulumi.get(self, "license_info")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[str]:
        """
        The download location url of layer.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The current status of layer.
        """
        return pulumi.get(self, "status")

