# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetNamespacesResult',
    'AwaitableGetNamespacesResult',
    'get_namespaces',
    'get_namespaces_output',
]

@pulumi.output_type
class GetNamespacesResult:
    """
    A collection of values returned by getNamespaces.
    """
    def __init__(__self__, description=None, id=None, namespace=None, namespaces=None, result_output_file=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the SCF namespace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Name of the SCF namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def namespaces(self) -> Sequence['outputs.GetNamespacesNamespaceResult']:
        """
        An information list of namespace. Each element contains the following attributes:
        """
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetNamespacesResult(GetNamespacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNamespacesResult(
            description=self.description,
            id=self.id,
            namespace=self.namespace,
            namespaces=self.namespaces,
            result_output_file=self.result_output_file)


def get_namespaces(description: Optional[str] = None,
                   namespace: Optional[str] = None,
                   result_output_file: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNamespacesResult:
    """
    Use this data source to query SCF namespaces.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_namespace = tencentcloud.scf.Namespace("fooNamespace", namespace="ci-test-scf")
    foo_namespaces = tencentcloud.Scf.get_namespaces_output(namespace=foo_namespace.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str description: Description of the SCF namespace to be queried.
    :param str namespace: Name of the SCF namespace to be queried.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['description'] = description
    __args__['namespace'] = namespace
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Scf/getNamespaces:getNamespaces', __args__, opts=opts, typ=GetNamespacesResult).value

    return AwaitableGetNamespacesResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'),
        namespaces=pulumi.get(__ret__, 'namespaces'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_namespaces)
def get_namespaces_output(description: Optional[pulumi.Input[Optional[str]]] = None,
                          namespace: Optional[pulumi.Input[Optional[str]]] = None,
                          result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNamespacesResult]:
    """
    Use this data source to query SCF namespaces.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_namespace = tencentcloud.scf.Namespace("fooNamespace", namespace="ci-test-scf")
    foo_namespaces = tencentcloud.Scf.get_namespaces_output(namespace=foo_namespace.id)
    ```
    <!--End PulumiCodeChooser -->


    :param str description: Description of the SCF namespace to be queried.
    :param str namespace: Name of the SCF namespace to be queried.
    :param str result_output_file: Used to save results.
    """
    ...
