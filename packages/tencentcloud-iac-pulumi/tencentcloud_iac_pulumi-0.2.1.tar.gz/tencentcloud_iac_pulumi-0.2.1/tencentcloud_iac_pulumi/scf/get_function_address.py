# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetFunctionAddressResult',
    'AwaitableGetFunctionAddressResult',
    'get_function_address',
    'get_function_address_output',
]

@pulumi.output_type
class GetFunctionAddressResult:
    """
    A collection of values returned by getFunctionAddress.
    """
    def __init__(__self__, code_sha256=None, function_name=None, id=None, namespace=None, qualifier=None, result_output_file=None, url=None):
        if code_sha256 and not isinstance(code_sha256, str):
            raise TypeError("Expected argument 'code_sha256' to be a str")
        pulumi.set(__self__, "code_sha256", code_sha256)
        if function_name and not isinstance(function_name, str):
            raise TypeError("Expected argument 'function_name' to be a str")
        pulumi.set(__self__, "function_name", function_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if qualifier and not isinstance(qualifier, str):
            raise TypeError("Expected argument 'qualifier' to be a str")
        pulumi.set(__self__, "qualifier", qualifier)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="codeSha256")
    def code_sha256(self) -> str:
        """
        SHA256 code of the function.
        """
        return pulumi.get(self, "code_sha256")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[str]:
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Cos address of the function.
        """
        return pulumi.get(self, "url")


class AwaitableGetFunctionAddressResult(GetFunctionAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFunctionAddressResult(
            code_sha256=self.code_sha256,
            function_name=self.function_name,
            id=self.id,
            namespace=self.namespace,
            qualifier=self.qualifier,
            result_output_file=self.result_output_file,
            url=self.url)


def get_function_address(function_name: Optional[str] = None,
                         namespace: Optional[str] = None,
                         qualifier: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFunctionAddressResult:
    """
    Use this data source to query detailed information of scf function_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    function_address = tencentcloud.Scf.get_function_address(function_name="keep-1676351130",
        namespace="default",
        qualifier="$LATEST")
    ```
    <!--End PulumiCodeChooser -->


    :param str function_name: Function name.
    :param str namespace: Function namespace.
    :param str qualifier: Function version.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['functionName'] = function_name
    __args__['namespace'] = namespace
    __args__['qualifier'] = qualifier
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Scf/getFunctionAddress:getFunctionAddress', __args__, opts=opts, typ=GetFunctionAddressResult).value

    return AwaitableGetFunctionAddressResult(
        code_sha256=pulumi.get(__ret__, 'code_sha256'),
        function_name=pulumi.get(__ret__, 'function_name'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'),
        qualifier=pulumi.get(__ret__, 'qualifier'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        url=pulumi.get(__ret__, 'url'))


@_utilities.lift_output_func(get_function_address)
def get_function_address_output(function_name: Optional[pulumi.Input[str]] = None,
                                namespace: Optional[pulumi.Input[Optional[str]]] = None,
                                qualifier: Optional[pulumi.Input[Optional[str]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFunctionAddressResult]:
    """
    Use this data source to query detailed information of scf function_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    function_address = tencentcloud.Scf.get_function_address(function_name="keep-1676351130",
        namespace="default",
        qualifier="$LATEST")
    ```
    <!--End PulumiCodeChooser -->


    :param str function_name: Function name.
    :param str namespace: Function namespace.
    :param str qualifier: Function version.
    :param str result_output_file: Used to save results.
    """
    ...
