# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SyncInvokeFunctionArgs', 'SyncInvokeFunction']

@pulumi.input_type
class SyncInvokeFunctionArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[str],
                 event: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None,
                 routing_key: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SyncInvokeFunction resource.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] event: Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event input parameter.
        :param pulumi.Input[str] log_type: Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function execution log (up to 4KB).
        :param pulumi.Input[str] namespace: Namespace. default is used if it's left empty.
        :param pulumi.Input[str] qualifier: Version or alias of the function. It defaults to $DEFAULT.
        :param pulumi.Input[str] routing_key: Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
        """
        pulumi.set(__self__, "function_name", function_name)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)
        if routing_key is not None:
            pulumi.set(__self__, "routing_key", routing_key)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        """
        Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event input parameter.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function execution log (up to 4KB).
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace. default is used if it's left empty.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        Version or alias of the function. It defaults to $DEFAULT.
        """
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifier", value)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
        """
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_key", value)


@pulumi.input_type
class _SyncInvokeFunctionState:
    def __init__(__self__, *,
                 event: Optional[pulumi.Input[str]] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None,
                 routing_key: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SyncInvokeFunction resources.
        :param pulumi.Input[str] event: Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event input parameter.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] log_type: Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function execution log (up to 4KB).
        :param pulumi.Input[str] namespace: Namespace. default is used if it's left empty.
        :param pulumi.Input[str] qualifier: Version or alias of the function. It defaults to $DEFAULT.
        :param pulumi.Input[str] routing_key: Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
        """
        if event is not None:
            pulumi.set(__self__, "event", event)
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)
        if routing_key is not None:
            pulumi.set(__self__, "routing_key", routing_key)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        """
        Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event input parameter.
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function execution log (up to 4KB).
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace. default is used if it's left empty.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        Version or alias of the function. It defaults to $DEFAULT.
        """
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifier", value)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> Optional[pulumi.Input[str]]:
        """
        Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
        """
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "routing_key", value)


class SyncInvokeFunction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None,
                 routing_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a scf sync_invoke_function

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        invoke_function = tencentcloud.scf.SyncInvokeFunction("invokeFunction",
            function_name="keep-1676351130",
            namespace="default",
            qualifier="2")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event: Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event input parameter.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] log_type: Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function execution log (up to 4KB).
        :param pulumi.Input[str] namespace: Namespace. default is used if it's left empty.
        :param pulumi.Input[str] qualifier: Version or alias of the function. It defaults to $DEFAULT.
        :param pulumi.Input[str] routing_key: Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyncInvokeFunctionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a scf sync_invoke_function

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        invoke_function = tencentcloud.scf.SyncInvokeFunction("invokeFunction",
            function_name="keep-1676351130",
            namespace="default",
            qualifier="2")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SyncInvokeFunctionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyncInvokeFunctionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None,
                 routing_key: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyncInvokeFunctionArgs.__new__(SyncInvokeFunctionArgs)

            __props__.__dict__["event"] = event
            if function_name is None and not opts.urn:
                raise TypeError("Missing required property 'function_name'")
            __props__.__dict__["function_name"] = function_name
            __props__.__dict__["log_type"] = log_type
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["qualifier"] = qualifier
            __props__.__dict__["routing_key"] = routing_key
        super(SyncInvokeFunction, __self__).__init__(
            'tencentcloud:Scf/syncInvokeFunction:SyncInvokeFunction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            event: Optional[pulumi.Input[str]] = None,
            function_name: Optional[pulumi.Input[str]] = None,
            log_type: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            qualifier: Optional[pulumi.Input[str]] = None,
            routing_key: Optional[pulumi.Input[str]] = None) -> 'SyncInvokeFunction':
        """
        Get an existing SyncInvokeFunction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] event: Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event input parameter.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] log_type: Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function execution log (up to 4KB).
        :param pulumi.Input[str] namespace: Namespace. default is used if it's left empty.
        :param pulumi.Input[str] qualifier: Version or alias of the function. It defaults to $DEFAULT.
        :param pulumi.Input[str] routing_key: Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SyncInvokeFunctionState.__new__(_SyncInvokeFunctionState)

        __props__.__dict__["event"] = event
        __props__.__dict__["function_name"] = function_name
        __props__.__dict__["log_type"] = log_type
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["qualifier"] = qualifier
        __props__.__dict__["routing_key"] = routing_key
        return SyncInvokeFunction(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Output[Optional[str]]:
        """
        Function running parameter, which is in the JSON format. Maximum parameter size is 6 MB. This field corresponds to event input parameter.
        """
        return pulumi.get(self, "event")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Output[str]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Output[Optional[str]]:
        """
        Valid value: None (default) or Tail. If the value is Tail, log in the response will contain the corresponding function execution log (up to 4KB).
        """
        return pulumi.get(self, "log_type")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        Namespace. default is used if it's left empty.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def qualifier(self) -> pulumi.Output[Optional[str]]:
        """
        Version or alias of the function. It defaults to $DEFAULT.
        """
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> pulumi.Output[Optional[str]]:
        """
        Traffic routing config in json format, e.g., {k:v}. Please note that both k and v must be strings. Up to 1024 bytes allowed.
        """
        return pulumi.get(self, "routing_key")

