# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAsyncEventManagementResult',
    'AwaitableGetAsyncEventManagementResult',
    'get_async_event_management',
    'get_async_event_management_output',
]

@pulumi.output_type
class GetAsyncEventManagementResult:
    """
    A collection of values returned by getAsyncEventManagement.
    """
    def __init__(__self__, event_lists=None, function_name=None, id=None, invoke_request_id=None, invoke_types=None, namespace=None, order=None, orderby=None, qualifier=None, result_output_file=None, statuses=None):
        if event_lists and not isinstance(event_lists, list):
            raise TypeError("Expected argument 'event_lists' to be a list")
        pulumi.set(__self__, "event_lists", event_lists)
        if function_name and not isinstance(function_name, str):
            raise TypeError("Expected argument 'function_name' to be a str")
        pulumi.set(__self__, "function_name", function_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if invoke_request_id and not isinstance(invoke_request_id, str):
            raise TypeError("Expected argument 'invoke_request_id' to be a str")
        pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        if invoke_types and not isinstance(invoke_types, list):
            raise TypeError("Expected argument 'invoke_types' to be a list")
        pulumi.set(__self__, "invoke_types", invoke_types)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if orderby and not isinstance(orderby, str):
            raise TypeError("Expected argument 'orderby' to be a str")
        pulumi.set(__self__, "orderby", orderby)
        if qualifier and not isinstance(qualifier, str):
            raise TypeError("Expected argument 'qualifier' to be a str")
        pulumi.set(__self__, "qualifier", qualifier)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="eventLists")
    def event_lists(self) -> Sequence['outputs.GetAsyncEventManagementEventListResult']:
        """
        Async event list.
        """
        return pulumi.get(self, "event_lists")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> Optional[str]:
        """
        Invocation request ID.
        """
        return pulumi.get(self, "invoke_request_id")

    @property
    @pulumi.getter(name="invokeTypes")
    def invoke_types(self) -> Optional[Sequence[str]]:
        """
        Invocation type.
        """
        return pulumi.get(self, "invoke_types")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def orderby(self) -> Optional[str]:
        return pulumi.get(self, "orderby")

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[str]:
        """
        Function version.
        """
        return pulumi.get(self, "qualifier")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        Event status. Values: `RUNNING`; `FINISHED` (invoked successfully); `ABORTED` (invocation ended); `FAILED` (invocation failed).
        """
        return pulumi.get(self, "statuses")


class AwaitableGetAsyncEventManagementResult(GetAsyncEventManagementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAsyncEventManagementResult(
            event_lists=self.event_lists,
            function_name=self.function_name,
            id=self.id,
            invoke_request_id=self.invoke_request_id,
            invoke_types=self.invoke_types,
            namespace=self.namespace,
            order=self.order,
            orderby=self.orderby,
            qualifier=self.qualifier,
            result_output_file=self.result_output_file,
            statuses=self.statuses)


def get_async_event_management(function_name: Optional[str] = None,
                               invoke_request_id: Optional[str] = None,
                               invoke_types: Optional[Sequence[str]] = None,
                               namespace: Optional[str] = None,
                               order: Optional[str] = None,
                               orderby: Optional[str] = None,
                               qualifier: Optional[str] = None,
                               result_output_file: Optional[str] = None,
                               statuses: Optional[Sequence[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAsyncEventManagementResult:
    """
    Use this data source to query detailed information of scf async_event_management

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    async_event_management = tencentcloud.Scf.get_async_event_management(function_name="keep-1676351130",
        namespace="default",
        order="ASC",
        orderby="StartTime",
        qualifier="$LATEST")
    ```
    <!--End PulumiCodeChooser -->


    :param str function_name: Function name.
    :param str invoke_request_id: Filter (event invocation request ID).
    :param Sequence[str] invoke_types: Filter (invocation type list), Values: CMQ, CKAFKA_TRIGGER, APIGW, COS, TRIGGER_TIMER, MPS_TRIGGER, CLS_TRIGGER, OTHERS.
    :param str namespace: Function namespace.
    :param str order: Valid values: ASC, DESC. Default value: DESC.
    :param str orderby: Valid values: StartTime, EndTime. Default value: StartTime.
    :param str qualifier: Filter (function version).
    :param str result_output_file: Used to save results.
    :param Sequence[str] statuses: Filter (event status list), Values: RUNNING, FINISHED, ABORTED, FAILED.
    """
    __args__ = dict()
    __args__['functionName'] = function_name
    __args__['invokeRequestId'] = invoke_request_id
    __args__['invokeTypes'] = invoke_types
    __args__['namespace'] = namespace
    __args__['order'] = order
    __args__['orderby'] = orderby
    __args__['qualifier'] = qualifier
    __args__['resultOutputFile'] = result_output_file
    __args__['statuses'] = statuses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Scf/getAsyncEventManagement:getAsyncEventManagement', __args__, opts=opts, typ=GetAsyncEventManagementResult).value

    return AwaitableGetAsyncEventManagementResult(
        event_lists=pulumi.get(__ret__, 'event_lists'),
        function_name=pulumi.get(__ret__, 'function_name'),
        id=pulumi.get(__ret__, 'id'),
        invoke_request_id=pulumi.get(__ret__, 'invoke_request_id'),
        invoke_types=pulumi.get(__ret__, 'invoke_types'),
        namespace=pulumi.get(__ret__, 'namespace'),
        order=pulumi.get(__ret__, 'order'),
        orderby=pulumi.get(__ret__, 'orderby'),
        qualifier=pulumi.get(__ret__, 'qualifier'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        statuses=pulumi.get(__ret__, 'statuses'))


@_utilities.lift_output_func(get_async_event_management)
def get_async_event_management_output(function_name: Optional[pulumi.Input[str]] = None,
                                      invoke_request_id: Optional[pulumi.Input[Optional[str]]] = None,
                                      invoke_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                      namespace: Optional[pulumi.Input[Optional[str]]] = None,
                                      order: Optional[pulumi.Input[Optional[str]]] = None,
                                      orderby: Optional[pulumi.Input[Optional[str]]] = None,
                                      qualifier: Optional[pulumi.Input[Optional[str]]] = None,
                                      result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                      statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAsyncEventManagementResult]:
    """
    Use this data source to query detailed information of scf async_event_management

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    async_event_management = tencentcloud.Scf.get_async_event_management(function_name="keep-1676351130",
        namespace="default",
        order="ASC",
        orderby="StartTime",
        qualifier="$LATEST")
    ```
    <!--End PulumiCodeChooser -->


    :param str function_name: Function name.
    :param str invoke_request_id: Filter (event invocation request ID).
    :param Sequence[str] invoke_types: Filter (invocation type list), Values: CMQ, CKAFKA_TRIGGER, APIGW, COS, TRIGGER_TIMER, MPS_TRIGGER, CLS_TRIGGER, OTHERS.
    :param str namespace: Function namespace.
    :param str order: Valid values: ASC, DESC. Default value: DESC.
    :param str orderby: Valid values: StartTime, EndTime. Default value: StartTime.
    :param str qualifier: Filter (function version).
    :param str result_output_file: Used to save results.
    :param Sequence[str] statuses: Filter (event status list), Values: RUNNING, FINISHED, ABORTED, FAILED.
    """
    ...
