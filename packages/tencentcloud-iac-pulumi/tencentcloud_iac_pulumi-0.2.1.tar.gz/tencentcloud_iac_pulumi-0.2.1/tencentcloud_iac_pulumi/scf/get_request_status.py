# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRequestStatusResult',
    'AwaitableGetRequestStatusResult',
    'get_request_status',
    'get_request_status_output',
]

@pulumi.output_type
class GetRequestStatusResult:
    """
    A collection of values returned by getRequestStatus.
    """
    def __init__(__self__, datas=None, end_time=None, function_name=None, function_request_id=None, id=None, namespace=None, result_output_file=None, start_time=None):
        if datas and not isinstance(datas, list):
            raise TypeError("Expected argument 'datas' to be a list")
        pulumi.set(__self__, "datas", datas)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if function_name and not isinstance(function_name, str):
            raise TypeError("Expected argument 'function_name' to be a str")
        pulumi.set(__self__, "function_name", function_name)
        if function_request_id and not isinstance(function_request_id, str):
            raise TypeError("Expected argument 'function_request_id' to be a str")
        pulumi.set(__self__, "function_request_id", function_request_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def datas(self) -> Sequence['outputs.GetRequestStatusDataResult']:
        """
        Details of the function running statusNote: this field may return `null`, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "datas")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="functionRequestId")
    def function_request_id(self) -> str:
        return pulumi.get(self, "function_request_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Request start time.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetRequestStatusResult(GetRequestStatusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRequestStatusResult(
            datas=self.datas,
            end_time=self.end_time,
            function_name=self.function_name,
            function_request_id=self.function_request_id,
            id=self.id,
            namespace=self.namespace,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_request_status(end_time: Optional[str] = None,
                       function_name: Optional[str] = None,
                       function_request_id: Optional[str] = None,
                       namespace: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       start_time: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRequestStatusResult:
    """
    Use this data source to query detailed information of scf request_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    request_status = tencentcloud.Scf.get_request_status(function_name="keep-1676351130",
        function_request_id="9de9405a-e33a-498d-bb59-e80b7bed1191",
        namespace="default")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time of the query. such as `2017-05-16 20:59:59`. If `StartTime` is not specified, `EndTime` defaults to the current time. If `StartTime` is specified, `EndTime` is required, and it need to be later than the `StartTime`.
    :param str function_name: Function name.
    :param str function_request_id: ID of the request to be queried.
    :param str namespace: Function namespace.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time of the query, for example `2017-05-16 20:00:00`. If it's left empty, it defaults to 15 minutes before the current time.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['functionName'] = function_name
    __args__['functionRequestId'] = function_request_id
    __args__['namespace'] = namespace
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Scf/getRequestStatus:getRequestStatus', __args__, opts=opts, typ=GetRequestStatusResult).value

    return AwaitableGetRequestStatusResult(
        datas=pulumi.get(__ret__, 'datas'),
        end_time=pulumi.get(__ret__, 'end_time'),
        function_name=pulumi.get(__ret__, 'function_name'),
        function_request_id=pulumi.get(__ret__, 'function_request_id'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_request_status)
def get_request_status_output(end_time: Optional[pulumi.Input[Optional[str]]] = None,
                              function_name: Optional[pulumi.Input[str]] = None,
                              function_request_id: Optional[pulumi.Input[str]] = None,
                              namespace: Optional[pulumi.Input[Optional[str]]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              start_time: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRequestStatusResult]:
    """
    Use this data source to query detailed information of scf request_status

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    request_status = tencentcloud.Scf.get_request_status(function_name="keep-1676351130",
        function_request_id="9de9405a-e33a-498d-bb59-e80b7bed1191",
        namespace="default")
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: End time of the query. such as `2017-05-16 20:59:59`. If `StartTime` is not specified, `EndTime` defaults to the current time. If `StartTime` is specified, `EndTime` is required, and it need to be later than the `StartTime`.
    :param str function_name: Function name.
    :param str function_request_id: ID of the request to be queried.
    :param str namespace: Function namespace.
    :param str result_output_file: Used to save results.
    :param str start_time: Start time of the query, for example `2017-05-16 20:00:00`. If it's left empty, it defaults to 15 minutes before the current time.
    """
    ...
