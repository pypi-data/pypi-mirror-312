# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ReservedConcurrencyConfigArgs', 'ReservedConcurrencyConfig']

@pulumi.input_type
class ReservedConcurrencyConfigArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[str],
                 reserved_concurrency_mem: pulumi.Input[int],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReservedConcurrencyConfig resource.
        :param pulumi.Input[str] function_name: Specifies the function of which you want to configure the reserved quota.
        :param pulumi.Input[int] reserved_concurrency_mem: Reserved memory quota of the function. Note: the upper limit for the total reserved quota of the function is the user's total concurrency memory minus 12800.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        """
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "reserved_concurrency_mem", reserved_concurrency_mem)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        """
        Specifies the function of which you want to configure the reserved quota.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="reservedConcurrencyMem")
    def reserved_concurrency_mem(self) -> pulumi.Input[int]:
        """
        Reserved memory quota of the function. Note: the upper limit for the total reserved quota of the function is the user's total concurrency memory minus 12800.
        """
        return pulumi.get(self, "reserved_concurrency_mem")

    @reserved_concurrency_mem.setter
    def reserved_concurrency_mem(self, value: pulumi.Input[int]):
        pulumi.set(self, "reserved_concurrency_mem", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Function namespace. Default value: default.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _ReservedConcurrencyConfigState:
    def __init__(__self__, *,
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 reserved_concurrency_mem: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ReservedConcurrencyConfig resources.
        :param pulumi.Input[str] function_name: Specifies the function of which you want to configure the reserved quota.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        :param pulumi.Input[int] reserved_concurrency_mem: Reserved memory quota of the function. Note: the upper limit for the total reserved quota of the function is the user's total concurrency memory minus 12800.
        """
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if reserved_concurrency_mem is not None:
            pulumi.set(__self__, "reserved_concurrency_mem", reserved_concurrency_mem)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the function of which you want to configure the reserved quota.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Function namespace. Default value: default.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="reservedConcurrencyMem")
    def reserved_concurrency_mem(self) -> Optional[pulumi.Input[int]]:
        """
        Reserved memory quota of the function. Note: the upper limit for the total reserved quota of the function is the user's total concurrency memory minus 12800.
        """
        return pulumi.get(self, "reserved_concurrency_mem")

    @reserved_concurrency_mem.setter
    def reserved_concurrency_mem(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reserved_concurrency_mem", value)


class ReservedConcurrencyConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 reserved_concurrency_mem: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a scf reserved_concurrency_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        reserved_concurrency_config = tencentcloud.scf.ReservedConcurrencyConfig("reservedConcurrencyConfig",
            function_name="keep-1676351130",
            namespace="default",
            reserved_concurrency_mem=128000)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        scf reserved_concurrency_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Scf/reservedConcurrencyConfig:ReservedConcurrencyConfig reserved_concurrency_config reserved_concurrency_config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] function_name: Specifies the function of which you want to configure the reserved quota.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        :param pulumi.Input[int] reserved_concurrency_mem: Reserved memory quota of the function. Note: the upper limit for the total reserved quota of the function is the user's total concurrency memory minus 12800.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReservedConcurrencyConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a scf reserved_concurrency_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        reserved_concurrency_config = tencentcloud.scf.ReservedConcurrencyConfig("reservedConcurrencyConfig",
            function_name="keep-1676351130",
            namespace="default",
            reserved_concurrency_mem=128000)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        scf reserved_concurrency_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Scf/reservedConcurrencyConfig:ReservedConcurrencyConfig reserved_concurrency_config reserved_concurrency_config_id
        ```

        :param str resource_name: The name of the resource.
        :param ReservedConcurrencyConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReservedConcurrencyConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 reserved_concurrency_mem: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReservedConcurrencyConfigArgs.__new__(ReservedConcurrencyConfigArgs)

            if function_name is None and not opts.urn:
                raise TypeError("Missing required property 'function_name'")
            __props__.__dict__["function_name"] = function_name
            __props__.__dict__["namespace"] = namespace
            if reserved_concurrency_mem is None and not opts.urn:
                raise TypeError("Missing required property 'reserved_concurrency_mem'")
            __props__.__dict__["reserved_concurrency_mem"] = reserved_concurrency_mem
        super(ReservedConcurrencyConfig, __self__).__init__(
            'tencentcloud:Scf/reservedConcurrencyConfig:ReservedConcurrencyConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            function_name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            reserved_concurrency_mem: Optional[pulumi.Input[int]] = None) -> 'ReservedConcurrencyConfig':
        """
        Get an existing ReservedConcurrencyConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] function_name: Specifies the function of which you want to configure the reserved quota.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        :param pulumi.Input[int] reserved_concurrency_mem: Reserved memory quota of the function. Note: the upper limit for the total reserved quota of the function is the user's total concurrency memory minus 12800.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ReservedConcurrencyConfigState.__new__(_ReservedConcurrencyConfigState)

        __props__.__dict__["function_name"] = function_name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["reserved_concurrency_mem"] = reserved_concurrency_mem
        return ReservedConcurrencyConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Output[str]:
        """
        Specifies the function of which you want to configure the reserved quota.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        Function namespace. Default value: default.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="reservedConcurrencyMem")
    def reserved_concurrency_mem(self) -> pulumi.Output[int]:
        """
        Reserved memory quota of the function. Note: the upper limit for the total reserved quota of the function is the user's total concurrency memory minus 12800.
        """
        return pulumi.get(self, "reserved_concurrency_mem")

