# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TerminateAsyncEventArgs', 'TerminateAsyncEvent']

@pulumi.input_type
class TerminateAsyncEventArgs:
    def __init__(__self__, *,
                 function_name: pulumi.Input[str],
                 invoke_request_id: pulumi.Input[str],
                 grace_shutdown: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TerminateAsyncEvent resource.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] invoke_request_id: Terminated invocation request ID.
        :param pulumi.Input[bool] grace_shutdown: Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending termination signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7]. It's set to false by default.
        :param pulumi.Input[str] namespace: Namespace.
        """
        pulumi.set(__self__, "function_name", function_name)
        pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        if grace_shutdown is not None:
            pulumi.set(__self__, "grace_shutdown", grace_shutdown)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> pulumi.Input[str]:
        """
        Terminated invocation request ID.
        """
        return pulumi.get(self, "invoke_request_id")

    @invoke_request_id.setter
    def invoke_request_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "invoke_request_id", value)

    @property
    @pulumi.getter(name="graceShutdown")
    def grace_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending termination signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7]. It's set to false by default.
        """
        return pulumi.get(self, "grace_shutdown")

    @grace_shutdown.setter
    def grace_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "grace_shutdown", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _TerminateAsyncEventState:
    def __init__(__self__, *,
                 function_name: Optional[pulumi.Input[str]] = None,
                 grace_shutdown: Optional[pulumi.Input[bool]] = None,
                 invoke_request_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TerminateAsyncEvent resources.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[bool] grace_shutdown: Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending termination signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7]. It's set to false by default.
        :param pulumi.Input[str] invoke_request_id: Terminated invocation request ID.
        :param pulumi.Input[str] namespace: Namespace.
        """
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if grace_shutdown is not None:
            pulumi.set(__self__, "grace_shutdown", grace_shutdown)
        if invoke_request_id is not None:
            pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter(name="graceShutdown")
    def grace_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending termination signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7]. It's set to false by default.
        """
        return pulumi.get(self, "grace_shutdown")

    @grace_shutdown.setter
    def grace_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "grace_shutdown", value)

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> Optional[pulumi.Input[str]]:
        """
        Terminated invocation request ID.
        """
        return pulumi.get(self, "invoke_request_id")

    @invoke_request_id.setter
    def invoke_request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invoke_request_id", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


class TerminateAsyncEvent(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 grace_shutdown: Optional[pulumi.Input[bool]] = None,
                 invoke_request_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a scf terminate_async_event

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        terminate_async_event = tencentcloud.scf.TerminateAsyncEvent("terminateAsyncEvent",
            function_name="keep-1676351130",
            grace_shutdown=True,
            invoke_request_id="9de9405a-e33a-498d-bb59-e80b7bed1191",
            namespace="default")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[bool] grace_shutdown: Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending termination signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7]. It's set to false by default.
        :param pulumi.Input[str] invoke_request_id: Terminated invocation request ID.
        :param pulumi.Input[str] namespace: Namespace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TerminateAsyncEventArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a scf terminate_async_event

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        terminate_async_event = tencentcloud.scf.TerminateAsyncEvent("terminateAsyncEvent",
            function_name="keep-1676351130",
            grace_shutdown=True,
            invoke_request_id="9de9405a-e33a-498d-bb59-e80b7bed1191",
            namespace="default")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TerminateAsyncEventArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TerminateAsyncEventArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 grace_shutdown: Optional[pulumi.Input[bool]] = None,
                 invoke_request_id: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TerminateAsyncEventArgs.__new__(TerminateAsyncEventArgs)

            if function_name is None and not opts.urn:
                raise TypeError("Missing required property 'function_name'")
            __props__.__dict__["function_name"] = function_name
            __props__.__dict__["grace_shutdown"] = grace_shutdown
            if invoke_request_id is None and not opts.urn:
                raise TypeError("Missing required property 'invoke_request_id'")
            __props__.__dict__["invoke_request_id"] = invoke_request_id
            __props__.__dict__["namespace"] = namespace
        super(TerminateAsyncEvent, __self__).__init__(
            'tencentcloud:Scf/terminateAsyncEvent:TerminateAsyncEvent',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            function_name: Optional[pulumi.Input[str]] = None,
            grace_shutdown: Optional[pulumi.Input[bool]] = None,
            invoke_request_id: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None) -> 'TerminateAsyncEvent':
        """
        Get an existing TerminateAsyncEvent resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[bool] grace_shutdown: Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending termination signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7]. It's set to false by default.
        :param pulumi.Input[str] invoke_request_id: Terminated invocation request ID.
        :param pulumi.Input[str] namespace: Namespace.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TerminateAsyncEventState.__new__(_TerminateAsyncEventState)

        __props__.__dict__["function_name"] = function_name
        __props__.__dict__["grace_shutdown"] = grace_shutdown
        __props__.__dict__["invoke_request_id"] = invoke_request_id
        __props__.__dict__["namespace"] = namespace
        return TerminateAsyncEvent(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Output[str]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="graceShutdown")
    def grace_shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable grace shutdown. If it's true, a SIGTERM signal is sent to the specified request. See [Sending termination signal](https://www.tencentcloud.com/document/product/583/63969?from_cn_redirect=1#.E5.8F.91.E9.80.81.E7.BB.88.E6.AD.A2.E4.BF.A1.E5.8F.B7]. It's set to false by default.
        """
        return pulumi.get(self, "grace_shutdown")

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> pulumi.Output[str]:
        """
        Terminated invocation request ID.
        """
        return pulumi.get(self, "invoke_request_id")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        Namespace.
        """
        return pulumi.get(self, "namespace")

