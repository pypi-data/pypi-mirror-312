# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetLogsResult',
    'AwaitableGetLogsResult',
    'get_logs',
    'get_logs_output',
]

@pulumi.output_type
class GetLogsResult:
    """
    A collection of values returned by getLogs.
    """
    def __init__(__self__, end_time=None, function_name=None, id=None, invoke_request_id=None, limit=None, logs=None, namespace=None, offset=None, order=None, order_by=None, result_output_file=None, ret_code=None, start_time=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if function_name and not isinstance(function_name, str):
            raise TypeError("Expected argument 'function_name' to be a str")
        pulumi.set(__self__, "function_name", function_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if invoke_request_id and not isinstance(invoke_request_id, str):
            raise TypeError("Expected argument 'invoke_request_id' to be a str")
        pulumi.set(__self__, "invoke_request_id", invoke_request_id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if logs and not isinstance(logs, list):
            raise TypeError("Expected argument 'logs' to be a list")
        pulumi.set(__self__, "logs", logs)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if ret_code and not isinstance(ret_code, str):
            raise TypeError("Expected argument 'ret_code' to be a str")
        pulumi.set(__self__, "ret_code", ret_code)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        """
        Name of the SCF function.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="invokeRequestId")
    def invoke_request_id(self) -> Optional[str]:
        return pulumi.get(self, "invoke_request_id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def logs(self) -> Sequence['outputs.GetLogsLogResult']:
        """
        An information list of logs. Each element contains the following attributes:
        """
        return pulumi.get(self, "logs")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="retCode")
    def ret_code(self) -> Optional[str]:
        """
        Execution result of function, `0` means the execution is successful, other values indicate failure.
        """
        return pulumi.get(self, "ret_code")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        Point in time at which the function begins execution.
        """
        return pulumi.get(self, "start_time")


class AwaitableGetLogsResult(GetLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLogsResult(
            end_time=self.end_time,
            function_name=self.function_name,
            id=self.id,
            invoke_request_id=self.invoke_request_id,
            limit=self.limit,
            logs=self.logs,
            namespace=self.namespace,
            offset=self.offset,
            order=self.order,
            order_by=self.order_by,
            result_output_file=self.result_output_file,
            ret_code=self.ret_code,
            start_time=self.start_time)


def get_logs(end_time: Optional[str] = None,
             function_name: Optional[str] = None,
             invoke_request_id: Optional[str] = None,
             limit: Optional[int] = None,
             namespace: Optional[str] = None,
             offset: Optional[int] = None,
             order: Optional[str] = None,
             order_by: Optional[str] = None,
             result_output_file: Optional[str] = None,
             ret_code: Optional[str] = None,
             start_time: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLogsResult:
    """
    Use this data source to query SCF function logs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_function = tencentcloud.scf.Function("fooFunction",
        handler="main.do_it",
        runtime="Python3.6",
        cos_bucket_name="scf-code-1234567890",
        cos_object_name="code.zip",
        cos_bucket_region="ap-guangzhou")
    foo_logs = tencentcloud.Scf.get_logs_output(function_name=foo_function.name)
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: The end time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `start_time`.
    :param str function_name: Name of the SCF function to be queried.
    :param str invoke_request_id: Corresponding requestId when executing function.
    :param int limit: Number of logs, the default is `10000`, offset+limit cannot be greater than 10000.
    :param str namespace: Namespace of the SCF function to be queried.
    :param int offset: Log offset, default is `0`, offset+limit cannot be greater than 10000.
    :param str order: Order to sort the log, optional values `desc` and `asc`, default `desc`.
    :param str order_by: Sort the logs according to the following fields: `function_name`, `duration`, `mem_usage`, `start_time`, default `start_time`.
    :param str result_output_file: Used to save results.
    :param str ret_code: Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
    :param str start_time: The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `end_time`.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['functionName'] = function_name
    __args__['invokeRequestId'] = invoke_request_id
    __args__['limit'] = limit
    __args__['namespace'] = namespace
    __args__['offset'] = offset
    __args__['order'] = order
    __args__['orderBy'] = order_by
    __args__['resultOutputFile'] = result_output_file
    __args__['retCode'] = ret_code
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Scf/getLogs:getLogs', __args__, opts=opts, typ=GetLogsResult).value

    return AwaitableGetLogsResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        function_name=pulumi.get(__ret__, 'function_name'),
        id=pulumi.get(__ret__, 'id'),
        invoke_request_id=pulumi.get(__ret__, 'invoke_request_id'),
        limit=pulumi.get(__ret__, 'limit'),
        logs=pulumi.get(__ret__, 'logs'),
        namespace=pulumi.get(__ret__, 'namespace'),
        offset=pulumi.get(__ret__, 'offset'),
        order=pulumi.get(__ret__, 'order'),
        order_by=pulumi.get(__ret__, 'order_by'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        ret_code=pulumi.get(__ret__, 'ret_code'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_logs)
def get_logs_output(end_time: Optional[pulumi.Input[Optional[str]]] = None,
                    function_name: Optional[pulumi.Input[str]] = None,
                    invoke_request_id: Optional[pulumi.Input[Optional[str]]] = None,
                    limit: Optional[pulumi.Input[Optional[int]]] = None,
                    namespace: Optional[pulumi.Input[Optional[str]]] = None,
                    offset: Optional[pulumi.Input[Optional[int]]] = None,
                    order: Optional[pulumi.Input[Optional[str]]] = None,
                    order_by: Optional[pulumi.Input[Optional[str]]] = None,
                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    ret_code: Optional[pulumi.Input[Optional[str]]] = None,
                    start_time: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLogsResult]:
    """
    Use this data source to query SCF function logs.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud
    import tencentcloud_iac_pulumi as tencentcloud

    foo_function = tencentcloud.scf.Function("fooFunction",
        handler="main.do_it",
        runtime="Python3.6",
        cos_bucket_name="scf-code-1234567890",
        cos_object_name="code.zip",
        cos_bucket_region="ap-guangzhou")
    foo_logs = tencentcloud.Scf.get_logs_output(function_name=foo_function.name)
    ```
    <!--End PulumiCodeChooser -->


    :param str end_time: The end time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `start_time`.
    :param str function_name: Name of the SCF function to be queried.
    :param str invoke_request_id: Corresponding requestId when executing function.
    :param int limit: Number of logs, the default is `10000`, offset+limit cannot be greater than 10000.
    :param str namespace: Namespace of the SCF function to be queried.
    :param int offset: Log offset, default is `0`, offset+limit cannot be greater than 10000.
    :param str order: Order to sort the log, optional values `desc` and `asc`, default `desc`.
    :param str order_by: Sort the logs according to the following fields: `function_name`, `duration`, `mem_usage`, `start_time`, default `start_time`.
    :param str result_output_file: Used to save results.
    :param str ret_code: Use to filter log, optional value: `not0` only returns the error log. `is0` only returns the correct log. `TimeLimitExceeded` returns the log of the function call timeout. `ResourceLimitExceeded` returns the function call generation resource overrun log. `UserCodeException` returns logs of the user code error that occurred in the function call. Not passing the parameter means returning all logs.
    :param str start_time: The start time of the query, the format is `2017-05-16 20:00:00`, which can only be within one day from `end_time`.
    """
    ...
