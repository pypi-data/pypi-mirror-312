# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetFunctionAliasesResult',
    'AwaitableGetFunctionAliasesResult',
    'get_function_aliases',
    'get_function_aliases_output',
]

@pulumi.output_type
class GetFunctionAliasesResult:
    """
    A collection of values returned by getFunctionAliases.
    """
    def __init__(__self__, aliases=None, function_name=None, function_version=None, id=None, namespace=None, result_output_file=None):
        if aliases and not isinstance(aliases, list):
            raise TypeError("Expected argument 'aliases' to be a list")
        pulumi.set(__self__, "aliases", aliases)
        if function_name and not isinstance(function_name, str):
            raise TypeError("Expected argument 'function_name' to be a str")
        pulumi.set(__self__, "function_name", function_name)
        if function_version and not isinstance(function_version, str):
            raise TypeError("Expected argument 'function_version' to be a str")
        pulumi.set(__self__, "function_version", function_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def aliases(self) -> Sequence['outputs.GetFunctionAliasesAliasResult']:
        """
        Alias list.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> str:
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter(name="functionVersion")
    def function_version(self) -> Optional[str]:
        """
        Master version pointed to by the alias.
        """
        return pulumi.get(self, "function_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetFunctionAliasesResult(GetFunctionAliasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFunctionAliasesResult(
            aliases=self.aliases,
            function_name=self.function_name,
            function_version=self.function_version,
            id=self.id,
            namespace=self.namespace,
            result_output_file=self.result_output_file)


def get_function_aliases(function_name: Optional[str] = None,
                         function_version: Optional[str] = None,
                         namespace: Optional[str] = None,
                         result_output_file: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFunctionAliasesResult:
    """
    Use this data source to query detailed information of scf function_aliases

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    function_aliases = tencentcloud.Scf.get_function_aliases(function_name="keep-1676351130",
        namespace="default")
    ```
    <!--End PulumiCodeChooser -->


    :param str function_name: Function name.
    :param str function_version: If this parameter is provided, only aliases associated with this function version will be returned.
    :param str namespace: Function namespace.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['functionName'] = function_name
    __args__['functionVersion'] = function_version
    __args__['namespace'] = namespace
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Scf/getFunctionAliases:getFunctionAliases', __args__, opts=opts, typ=GetFunctionAliasesResult).value

    return AwaitableGetFunctionAliasesResult(
        aliases=pulumi.get(__ret__, 'aliases'),
        function_name=pulumi.get(__ret__, 'function_name'),
        function_version=pulumi.get(__ret__, 'function_version'),
        id=pulumi.get(__ret__, 'id'),
        namespace=pulumi.get(__ret__, 'namespace'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_function_aliases)
def get_function_aliases_output(function_name: Optional[pulumi.Input[str]] = None,
                                function_version: Optional[pulumi.Input[Optional[str]]] = None,
                                namespace: Optional[pulumi.Input[Optional[str]]] = None,
                                result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFunctionAliasesResult]:
    """
    Use this data source to query detailed information of scf function_aliases

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    function_aliases = tencentcloud.Scf.get_function_aliases(function_name="keep-1676351130",
        namespace="default")
    ```
    <!--End PulumiCodeChooser -->


    :param str function_name: Function name.
    :param str function_version: If this parameter is provided, only aliases associated with this function version will be returned.
    :param str namespace: Function namespace.
    :param str result_output_file: Used to save results.
    """
    ...
