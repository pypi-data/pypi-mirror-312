# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionEventInvokeConfigArgs', 'FunctionEventInvokeConfig']

@pulumi.input_type
class FunctionEventInvokeConfigArgs:
    def __init__(__self__, *,
                 async_trigger_config: pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs'],
                 function_name: pulumi.Input[str],
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FunctionEventInvokeConfig resource.
        :param pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs'] async_trigger_config: Async retry configuration information.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        """
        pulumi.set(__self__, "async_trigger_config", async_trigger_config)
        pulumi.set(__self__, "function_name", function_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="asyncTriggerConfig")
    def async_trigger_config(self) -> pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs']:
        """
        Async retry configuration information.
        """
        return pulumi.get(self, "async_trigger_config")

    @async_trigger_config.setter
    def async_trigger_config(self, value: pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs']):
        pulumi.set(self, "async_trigger_config", value)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Input[str]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Function namespace. Default value: default.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class _FunctionEventInvokeConfigState:
    def __init__(__self__, *,
                 async_trigger_config: Optional[pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs']] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FunctionEventInvokeConfig resources.
        :param pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs'] async_trigger_config: Async retry configuration information.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        """
        if async_trigger_config is not None:
            pulumi.set(__self__, "async_trigger_config", async_trigger_config)
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="asyncTriggerConfig")
    def async_trigger_config(self) -> Optional[pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs']]:
        """
        Async retry configuration information.
        """
        return pulumi.get(self, "async_trigger_config")

    @async_trigger_config.setter
    def async_trigger_config(self, value: Optional[pulumi.Input['FunctionEventInvokeConfigAsyncTriggerConfigArgs']]):
        pulumi.set(self, "async_trigger_config", value)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Function namespace. Default value: default.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


class FunctionEventInvokeConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 async_trigger_config: Optional[pulumi.Input[pulumi.InputType['FunctionEventInvokeConfigAsyncTriggerConfigArgs']]] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a scf function_event_invoke_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        function_event_invoke_config = tencentcloud.scf.FunctionEventInvokeConfig("functionEventInvokeConfig",
            async_trigger_config=tencentcloud.scf.FunctionEventInvokeConfigAsyncTriggerConfigArgs(
                msg_ttl=24,
                retry_configs=[tencentcloud.scf.FunctionEventInvokeConfigAsyncTriggerConfigRetryConfigArgs(
                    retry_num=2,
                )],
            ),
            function_name="keep-1676351130",
            namespace="default")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        scf function_event_invoke_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Scf/functionEventInvokeConfig:FunctionEventInvokeConfig function_event_invoke_config function_name#namespace
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['FunctionEventInvokeConfigAsyncTriggerConfigArgs']] async_trigger_config: Async retry configuration information.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FunctionEventInvokeConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a scf function_event_invoke_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        function_event_invoke_config = tencentcloud.scf.FunctionEventInvokeConfig("functionEventInvokeConfig",
            async_trigger_config=tencentcloud.scf.FunctionEventInvokeConfigAsyncTriggerConfigArgs(
                msg_ttl=24,
                retry_configs=[tencentcloud.scf.FunctionEventInvokeConfigAsyncTriggerConfigRetryConfigArgs(
                    retry_num=2,
                )],
            ),
            function_name="keep-1676351130",
            namespace="default")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        scf function_event_invoke_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Scf/functionEventInvokeConfig:FunctionEventInvokeConfig function_event_invoke_config function_name#namespace
        ```

        :param str resource_name: The name of the resource.
        :param FunctionEventInvokeConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionEventInvokeConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 async_trigger_config: Optional[pulumi.Input[pulumi.InputType['FunctionEventInvokeConfigAsyncTriggerConfigArgs']]] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionEventInvokeConfigArgs.__new__(FunctionEventInvokeConfigArgs)

            if async_trigger_config is None and not opts.urn:
                raise TypeError("Missing required property 'async_trigger_config'")
            __props__.__dict__["async_trigger_config"] = async_trigger_config
            if function_name is None and not opts.urn:
                raise TypeError("Missing required property 'function_name'")
            __props__.__dict__["function_name"] = function_name
            __props__.__dict__["namespace"] = namespace
        super(FunctionEventInvokeConfig, __self__).__init__(
            'tencentcloud:Scf/functionEventInvokeConfig:FunctionEventInvokeConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            async_trigger_config: Optional[pulumi.Input[pulumi.InputType['FunctionEventInvokeConfigAsyncTriggerConfigArgs']]] = None,
            function_name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None) -> 'FunctionEventInvokeConfig':
        """
        Get an existing FunctionEventInvokeConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['FunctionEventInvokeConfigAsyncTriggerConfigArgs']] async_trigger_config: Async retry configuration information.
        :param pulumi.Input[str] function_name: Function name.
        :param pulumi.Input[str] namespace: Function namespace. Default value: default.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionEventInvokeConfigState.__new__(_FunctionEventInvokeConfigState)

        __props__.__dict__["async_trigger_config"] = async_trigger_config
        __props__.__dict__["function_name"] = function_name
        __props__.__dict__["namespace"] = namespace
        return FunctionEventInvokeConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="asyncTriggerConfig")
    def async_trigger_config(self) -> pulumi.Output['outputs.FunctionEventInvokeConfigAsyncTriggerConfig']:
        """
        Async retry configuration information.
        """
        return pulumi.get(self, "async_trigger_config")

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> pulumi.Output[str]:
        """
        Function name.
        """
        return pulumi.get(self, "function_name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        Function namespace. Default value: default.
        """
        return pulumi.get(self, "namespace")

