# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetGatewayNodesResult',
    'AwaitableGetGatewayNodesResult',
    'get_gateway_nodes',
    'get_gateway_nodes_output',
]

@pulumi.output_type
class GetGatewayNodesResult:
    """
    A collection of values returned by getGatewayNodes.
    """
    def __init__(__self__, gateway_id=None, group_id=None, id=None, node_lists=None, result_output_file=None):
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if node_lists and not isinstance(node_lists, list):
            raise TypeError("Expected argument 'node_lists' to be a list")
        pulumi.set(__self__, "node_lists", node_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        Group IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nodeLists")
    def node_lists(self) -> Sequence['outputs.GetGatewayNodesNodeListResult']:
        """
        nodes information.
        """
        return pulumi.get(self, "node_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetGatewayNodesResult(GetGatewayNodesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewayNodesResult(
            gateway_id=self.gateway_id,
            group_id=self.group_id,
            id=self.id,
            node_lists=self.node_lists,
            result_output_file=self.result_output_file)


def get_gateway_nodes(gateway_id: Optional[str] = None,
                      group_id: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewayNodesResult:
    """
    Use this data source to query detailed information of tse gateway_nodes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    gateway_nodes = tencentcloud.Tse.get_gateway_nodes(gateway_id="gateway-ddbb709b",
        group_id="group-013c0d8e")
    ```
    <!--End PulumiCodeChooser -->


    :param str gateway_id: gateway ID.
    :param str group_id: gateway group ID.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['gatewayId'] = gateway_id
    __args__['groupId'] = group_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tse/getGatewayNodes:getGatewayNodes', __args__, opts=opts, typ=GetGatewayNodesResult).value

    return AwaitableGetGatewayNodesResult(
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        node_lists=pulumi.get(__ret__, 'node_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_gateway_nodes)
def get_gateway_nodes_output(gateway_id: Optional[pulumi.Input[str]] = None,
                             group_id: Optional[pulumi.Input[Optional[str]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGatewayNodesResult]:
    """
    Use this data source to query detailed information of tse gateway_nodes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    gateway_nodes = tencentcloud.Tse.get_gateway_nodes(gateway_id="gateway-ddbb709b",
        group_id="group-013c0d8e")
    ```
    <!--End PulumiCodeChooser -->


    :param str gateway_id: gateway ID.
    :param str group_id: gateway group ID.
    :param str result_output_file: Used to save results.
    """
    ...
