# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CngwServiceArgs', 'CngwService']

@pulumi.input_type
class CngwServiceArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[str],
                 path: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 retries: pulumi.Input[int],
                 timeout: pulumi.Input[int],
                 upstream_info: pulumi.Input['CngwServiceUpstreamInfoArgs'],
                 upstream_type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a CngwService resource.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] path: path.
        :param pulumi.Input[str] protocol: protocol. Reference value:`https`, `http`, `tcp`, `udp`.
        :param pulumi.Input[int] retries: retry times.
        :param pulumi.Input[int] timeout: time out, unit:ms.
        :param pulumi.Input['CngwServiceUpstreamInfoArgs'] upstream_info: service config information.
        :param pulumi.Input[str] upstream_type: service type. Reference value:`Kubernetes`, `Registry`, `IPList`, `HostIP`, `Scf`.
        :param pulumi.Input[str] name: service name.
        :param pulumi.Input[Mapping[str, Any]] tags: Deprecate ineffective tags Tag description list.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "retries", retries)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "upstream_info", upstream_info)
        pulumi.set(__self__, "upstream_type", upstream_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            warnings.warn("""Deprecate ineffective tags""", DeprecationWarning)
            pulumi.log.warn("""tags is deprecated: Deprecate ineffective tags""")
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        protocol. Reference value:`https`, `http`, `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Input[int]:
        """
        retry times.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: pulumi.Input[int]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[int]:
        """
        time out, unit:ms.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="upstreamInfo")
    def upstream_info(self) -> pulumi.Input['CngwServiceUpstreamInfoArgs']:
        """
        service config information.
        """
        return pulumi.get(self, "upstream_info")

    @upstream_info.setter
    def upstream_info(self, value: pulumi.Input['CngwServiceUpstreamInfoArgs']):
        pulumi.set(self, "upstream_info", value)

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> pulumi.Input[str]:
        """
        service type. Reference value:`Kubernetes`, `Registry`, `IPList`, `HostIP`, `Scf`.
        """
        return pulumi.get(self, "upstream_type")

    @upstream_type.setter
    def upstream_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "upstream_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Deprecate ineffective tags Tag description list.
        """
        warnings.warn("""Deprecate ineffective tags""", DeprecationWarning)
        pulumi.log.warn("""tags is deprecated: Deprecate ineffective tags""")

        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CngwServiceState:
    def __init__(__self__, *,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 upstream_info: Optional[pulumi.Input['CngwServiceUpstreamInfoArgs']] = None,
                 upstream_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CngwService resources.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] name: service name.
        :param pulumi.Input[str] path: path.
        :param pulumi.Input[str] protocol: protocol. Reference value:`https`, `http`, `tcp`, `udp`.
        :param pulumi.Input[int] retries: retry times.
        :param pulumi.Input[str] service_id: service id.
        :param pulumi.Input[Mapping[str, Any]] tags: Deprecate ineffective tags Tag description list.
        :param pulumi.Input[int] timeout: time out, unit:ms.
        :param pulumi.Input['CngwServiceUpstreamInfoArgs'] upstream_info: service config information.
        :param pulumi.Input[str] upstream_type: service type. Reference value:`Kubernetes`, `Registry`, `IPList`, `HostIP`, `Scf`.
        """
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if tags is not None:
            warnings.warn("""Deprecate ineffective tags""", DeprecationWarning)
            pulumi.log.warn("""tags is deprecated: Deprecate ineffective tags""")
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if upstream_info is not None:
            pulumi.set(__self__, "upstream_info", upstream_info)
        if upstream_type is not None:
            pulumi.set(__self__, "upstream_type", upstream_type)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        protocol. Reference value:`https`, `http`, `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        retry times.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        service id.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Deprecate ineffective tags Tag description list.
        """
        warnings.warn("""Deprecate ineffective tags""", DeprecationWarning)
        pulumi.log.warn("""tags is deprecated: Deprecate ineffective tags""")

        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        time out, unit:ms.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="upstreamInfo")
    def upstream_info(self) -> Optional[pulumi.Input['CngwServiceUpstreamInfoArgs']]:
        """
        service config information.
        """
        return pulumi.get(self, "upstream_info")

    @upstream_info.setter
    def upstream_info(self, value: Optional[pulumi.Input['CngwServiceUpstreamInfoArgs']]):
        pulumi.set(self, "upstream_info", value)

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> Optional[pulumi.Input[str]]:
        """
        service type. Reference value:`Kubernetes`, `Registry`, `IPList`, `HostIP`, `Scf`.
        """
        return pulumi.get(self, "upstream_type")

    @upstream_type.setter
    def upstream_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_type", value)


class CngwService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 upstream_info: Optional[pulumi.Input[pulumi.InputType['CngwServiceUpstreamInfoArgs']]] = None,
                 upstream_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tse cngw_service

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        cngw_gateway = tencentcloud.tse.CngwGateway("cngwGateway",
            description="terraform test1",
            enable_cls=True,
            engine_region="ap-guangzhou",
            feature_version="STANDARD",
            gateway_version="2.5.1",
            ingress_class_name="tse-nginx-ingress",
            internet_max_bandwidth_out=0,
            trade_type=0,
            type="kong",
            node_config=tencentcloud.tse.CngwGatewayNodeConfigArgs(
                number=2,
                specification="1c2g",
            ),
            vpc_config=tencentcloud.tse.CngwGatewayVpcConfigArgs(
                subnet_id=subnet.id,
                vpc_id=vpc.id,
            ),
            tags={
                "createdBy": "terraform",
            })
        cngw_service = tencentcloud.tse.CngwService("cngwService",
            gateway_id=cngw_gateway.id,
            path="/test",
            protocol="http",
            retries=5,
            timeout=60000,
            upstream_type="HostIP",
            upstream_info=tencentcloud.tse.CngwServiceUpstreamInfoArgs(
                algorithm="round-robin",
                auto_scaling_cvm_port=0,
                host="arunma.cn",
                port=8012,
                slow_start=0,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_service can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwService:CngwService cngw_service gatewayId#name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] name: service name.
        :param pulumi.Input[str] path: path.
        :param pulumi.Input[str] protocol: protocol. Reference value:`https`, `http`, `tcp`, `udp`.
        :param pulumi.Input[int] retries: retry times.
        :param pulumi.Input[Mapping[str, Any]] tags: Deprecate ineffective tags Tag description list.
        :param pulumi.Input[int] timeout: time out, unit:ms.
        :param pulumi.Input[pulumi.InputType['CngwServiceUpstreamInfoArgs']] upstream_info: service config information.
        :param pulumi.Input[str] upstream_type: service type. Reference value:`Kubernetes`, `Registry`, `IPList`, `HostIP`, `Scf`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CngwServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tse cngw_service

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        cngw_gateway = tencentcloud.tse.CngwGateway("cngwGateway",
            description="terraform test1",
            enable_cls=True,
            engine_region="ap-guangzhou",
            feature_version="STANDARD",
            gateway_version="2.5.1",
            ingress_class_name="tse-nginx-ingress",
            internet_max_bandwidth_out=0,
            trade_type=0,
            type="kong",
            node_config=tencentcloud.tse.CngwGatewayNodeConfigArgs(
                number=2,
                specification="1c2g",
            ),
            vpc_config=tencentcloud.tse.CngwGatewayVpcConfigArgs(
                subnet_id=subnet.id,
                vpc_id=vpc.id,
            ),
            tags={
                "createdBy": "terraform",
            })
        cngw_service = tencentcloud.tse.CngwService("cngwService",
            gateway_id=cngw_gateway.id,
            path="/test",
            protocol="http",
            retries=5,
            timeout=60000,
            upstream_type="HostIP",
            upstream_info=tencentcloud.tse.CngwServiceUpstreamInfoArgs(
                algorithm="round-robin",
                auto_scaling_cvm_port=0,
                host="arunma.cn",
                port=8012,
                slow_start=0,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_service can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwService:CngwService cngw_service gatewayId#name
        ```

        :param str resource_name: The name of the resource.
        :param CngwServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CngwServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 upstream_info: Optional[pulumi.Input[pulumi.InputType['CngwServiceUpstreamInfoArgs']]] = None,
                 upstream_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CngwServiceArgs.__new__(CngwServiceArgs)

            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["name"] = name
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            if retries is None and not opts.urn:
                raise TypeError("Missing required property 'retries'")
            __props__.__dict__["retries"] = retries
            __props__.__dict__["tags"] = tags
            if timeout is None and not opts.urn:
                raise TypeError("Missing required property 'timeout'")
            __props__.__dict__["timeout"] = timeout
            if upstream_info is None and not opts.urn:
                raise TypeError("Missing required property 'upstream_info'")
            __props__.__dict__["upstream_info"] = upstream_info
            if upstream_type is None and not opts.urn:
                raise TypeError("Missing required property 'upstream_type'")
            __props__.__dict__["upstream_type"] = upstream_type
            __props__.__dict__["service_id"] = None
        super(CngwService, __self__).__init__(
            'tencentcloud:Tse/cngwService:CngwService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            retries: Optional[pulumi.Input[int]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            timeout: Optional[pulumi.Input[int]] = None,
            upstream_info: Optional[pulumi.Input[pulumi.InputType['CngwServiceUpstreamInfoArgs']]] = None,
            upstream_type: Optional[pulumi.Input[str]] = None) -> 'CngwService':
        """
        Get an existing CngwService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] name: service name.
        :param pulumi.Input[str] path: path.
        :param pulumi.Input[str] protocol: protocol. Reference value:`https`, `http`, `tcp`, `udp`.
        :param pulumi.Input[int] retries: retry times.
        :param pulumi.Input[str] service_id: service id.
        :param pulumi.Input[Mapping[str, Any]] tags: Deprecate ineffective tags Tag description list.
        :param pulumi.Input[int] timeout: time out, unit:ms.
        :param pulumi.Input[pulumi.InputType['CngwServiceUpstreamInfoArgs']] upstream_info: service config information.
        :param pulumi.Input[str] upstream_type: service type. Reference value:`Kubernetes`, `Registry`, `IPList`, `HostIP`, `Scf`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CngwServiceState.__new__(_CngwServiceState)

        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["retries"] = retries
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["upstream_info"] = upstream_info
        __props__.__dict__["upstream_type"] = upstream_type
        return CngwService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        protocol. Reference value:`https`, `http`, `tcp`, `udp`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Output[int]:
        """
        retry times.
        """
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        service id.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Deprecate ineffective tags Tag description list.
        """
        warnings.warn("""Deprecate ineffective tags""", DeprecationWarning)
        pulumi.log.warn("""tags is deprecated: Deprecate ineffective tags""")

        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[int]:
        """
        time out, unit:ms.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="upstreamInfo")
    def upstream_info(self) -> pulumi.Output['outputs.CngwServiceUpstreamInfo']:
        """
        service config information.
        """
        return pulumi.get(self, "upstream_info")

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> pulumi.Output[str]:
        """
        service type. Reference value:`Kubernetes`, `Registry`, `IPList`, `HostIP`, `Scf`.
        """
        return pulumi.get(self, "upstream_type")

