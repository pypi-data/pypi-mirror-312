# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 engine_name: pulumi.Input[str],
                 engine_product_version: pulumi.Input[str],
                 engine_region: pulumi.Input[str],
                 engine_type: pulumi.Input[str],
                 engine_version: pulumi.Input[str],
                 trade_type: pulumi.Input[int],
                 enable_client_internet_access: Optional[pulumi.Input[bool]] = None,
                 engine_node_num: Optional[pulumi.Input[int]] = None,
                 engine_region_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]]] = None,
                 engine_resource_spec: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] engine_name: engien name. Reference value: nacos-test.
        :param pulumi.Input[str] engine_product_version: Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
        :param pulumi.Input[str] engine_region: engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
        :param pulumi.Input[str] engine_type: engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
        :param pulumi.Input[str] engine_version: An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
        :param pulumi.Input[int] trade_type: trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
        :param pulumi.Input[bool] enable_client_internet_access: Client public network access, `true`: on, `false`: off, default: false.
        :param pulumi.Input[int] engine_node_num: engine node num. see EngineProductVersion.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]] engine_region_infos: Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
        :param pulumi.Input[str] engine_resource_spec: engine spec ID. see EngineProductVersion.
        :param pulumi.Input[int] prepaid_period: Prepaid time, in monthly units.
        :param pulumi.Input[int] prepaid_renew_flag: Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] vpc_id: VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        pulumi.set(__self__, "engine_name", engine_name)
        pulumi.set(__self__, "engine_product_version", engine_product_version)
        pulumi.set(__self__, "engine_region", engine_region)
        pulumi.set(__self__, "engine_type", engine_type)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "trade_type", trade_type)
        if enable_client_internet_access is not None:
            pulumi.set(__self__, "enable_client_internet_access", enable_client_internet_access)
        if engine_node_num is not None:
            pulumi.set(__self__, "engine_node_num", engine_node_num)
        if engine_region_infos is not None:
            pulumi.set(__self__, "engine_region_infos", engine_region_infos)
        if engine_resource_spec is not None:
            pulumi.set(__self__, "engine_resource_spec", engine_resource_spec)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if prepaid_renew_flag is not None:
            pulumi.set(__self__, "prepaid_renew_flag", prepaid_renew_flag)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> pulumi.Input[str]:
        """
        engien name. Reference value: nacos-test.
        """
        return pulumi.get(self, "engine_name")

    @engine_name.setter
    def engine_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_name", value)

    @property
    @pulumi.getter(name="engineProductVersion")
    def engine_product_version(self) -> pulumi.Input[str]:
        """
        Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
        """
        return pulumi.get(self, "engine_product_version")

    @engine_product_version.setter
    def engine_product_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_product_version", value)

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> pulumi.Input[str]:
        """
        engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
        """
        return pulumi.get(self, "engine_region")

    @engine_region.setter
    def engine_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_region", value)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Input[str]:
        """
        engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Input[str]:
        """
        An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="tradeType")
    def trade_type(self) -> pulumi.Input[int]:
        """
        trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
        """
        return pulumi.get(self, "trade_type")

    @trade_type.setter
    def trade_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "trade_type", value)

    @property
    @pulumi.getter(name="enableClientInternetAccess")
    def enable_client_internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Client public network access, `true`: on, `false`: off, default: false.
        """
        return pulumi.get(self, "enable_client_internet_access")

    @enable_client_internet_access.setter
    def enable_client_internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_client_internet_access", value)

    @property
    @pulumi.getter(name="engineNodeNum")
    def engine_node_num(self) -> Optional[pulumi.Input[int]]:
        """
        engine node num. see EngineProductVersion.
        """
        return pulumi.get(self, "engine_node_num")

    @engine_node_num.setter
    def engine_node_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine_node_num", value)

    @property
    @pulumi.getter(name="engineRegionInfos")
    def engine_region_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]]]:
        """
        Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
        """
        return pulumi.get(self, "engine_region_infos")

    @engine_region_infos.setter
    def engine_region_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]]]):
        pulumi.set(self, "engine_region_infos", value)

    @property
    @pulumi.getter(name="engineResourceSpec")
    def engine_resource_spec(self) -> Optional[pulumi.Input[str]]:
        """
        engine spec ID. see EngineProductVersion.
        """
        return pulumi.get(self, "engine_resource_spec")

    @engine_resource_spec.setter
    def engine_resource_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_resource_spec", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid time, in monthly units.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
        """
        return pulumi.get(self, "prepaid_renew_flag")

    @prepaid_renew_flag.setter
    def prepaid_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 enable_client_internet_access: Optional[pulumi.Input[bool]] = None,
                 engine_name: Optional[pulumi.Input[str]] = None,
                 engine_node_num: Optional[pulumi.Input[int]] = None,
                 engine_product_version: Optional[pulumi.Input[str]] = None,
                 engine_region: Optional[pulumi.Input[str]] = None,
                 engine_region_infos: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]]] = None,
                 engine_resource_spec: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trade_type: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[bool] enable_client_internet_access: Client public network access, `true`: on, `false`: off, default: false.
        :param pulumi.Input[str] engine_name: engien name. Reference value: nacos-test.
        :param pulumi.Input[int] engine_node_num: engine node num. see EngineProductVersion.
        :param pulumi.Input[str] engine_product_version: Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
        :param pulumi.Input[str] engine_region: engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]] engine_region_infos: Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
        :param pulumi.Input[str] engine_resource_spec: engine spec ID. see EngineProductVersion.
        :param pulumi.Input[str] engine_type: engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
        :param pulumi.Input[str] engine_version: An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
        :param pulumi.Input[int] prepaid_period: Prepaid time, in monthly units.
        :param pulumi.Input[int] prepaid_renew_flag: Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trade_type: trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
        :param pulumi.Input[str] vpc_id: VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        if enable_client_internet_access is not None:
            pulumi.set(__self__, "enable_client_internet_access", enable_client_internet_access)
        if engine_name is not None:
            pulumi.set(__self__, "engine_name", engine_name)
        if engine_node_num is not None:
            pulumi.set(__self__, "engine_node_num", engine_node_num)
        if engine_product_version is not None:
            pulumi.set(__self__, "engine_product_version", engine_product_version)
        if engine_region is not None:
            pulumi.set(__self__, "engine_region", engine_region)
        if engine_region_infos is not None:
            pulumi.set(__self__, "engine_region_infos", engine_region_infos)
        if engine_resource_spec is not None:
            pulumi.set(__self__, "engine_resource_spec", engine_resource_spec)
        if engine_type is not None:
            pulumi.set(__self__, "engine_type", engine_type)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if prepaid_renew_flag is not None:
            pulumi.set(__self__, "prepaid_renew_flag", prepaid_renew_flag)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trade_type is not None:
            pulumi.set(__self__, "trade_type", trade_type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="enableClientInternetAccess")
    def enable_client_internet_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Client public network access, `true`: on, `false`: off, default: false.
        """
        return pulumi.get(self, "enable_client_internet_access")

    @enable_client_internet_access.setter
    def enable_client_internet_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_client_internet_access", value)

    @property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> Optional[pulumi.Input[str]]:
        """
        engien name. Reference value: nacos-test.
        """
        return pulumi.get(self, "engine_name")

    @engine_name.setter
    def engine_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_name", value)

    @property
    @pulumi.getter(name="engineNodeNum")
    def engine_node_num(self) -> Optional[pulumi.Input[int]]:
        """
        engine node num. see EngineProductVersion.
        """
        return pulumi.get(self, "engine_node_num")

    @engine_node_num.setter
    def engine_node_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine_node_num", value)

    @property
    @pulumi.getter(name="engineProductVersion")
    def engine_product_version(self) -> Optional[pulumi.Input[str]]:
        """
        Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
        """
        return pulumi.get(self, "engine_product_version")

    @engine_product_version.setter
    def engine_product_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_product_version", value)

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> Optional[pulumi.Input[str]]:
        """
        engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
        """
        return pulumi.get(self, "engine_region")

    @engine_region.setter
    def engine_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_region", value)

    @property
    @pulumi.getter(name="engineRegionInfos")
    def engine_region_infos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]]]:
        """
        Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
        """
        return pulumi.get(self, "engine_region_infos")

    @engine_region_infos.setter
    def engine_region_infos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoArgs']]]]):
        pulumi.set(self, "engine_region_infos", value)

    @property
    @pulumi.getter(name="engineResourceSpec")
    def engine_resource_spec(self) -> Optional[pulumi.Input[str]]:
        """
        engine spec ID. see EngineProductVersion.
        """
        return pulumi.get(self, "engine_resource_spec")

    @engine_resource_spec.setter
    def engine_resource_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_resource_spec", value)

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> Optional[pulumi.Input[str]]:
        """
        engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
        """
        return pulumi.get(self, "engine_type")

    @engine_type.setter
    def engine_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_type", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Prepaid time, in monthly units.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
        """
        return pulumi.get(self, "prepaid_renew_flag")

    @prepaid_renew_flag.setter
    def prepaid_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tradeType")
    def trade_type(self) -> Optional[pulumi.Input[int]]:
        """
        trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
        """
        return pulumi.get(self, "trade_type")

    @trade_type.setter
    def trade_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trade_type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_client_internet_access: Optional[pulumi.Input[bool]] = None,
                 engine_name: Optional[pulumi.Input[str]] = None,
                 engine_node_num: Optional[pulumi.Input[int]] = None,
                 engine_product_version: Optional[pulumi.Input[str]] = None,
                 engine_region: Optional[pulumi.Input[str]] = None,
                 engine_region_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceEngineRegionInfoArgs']]]]] = None,
                 engine_resource_spec: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trade_type: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tse instance

        ## Example Usage

        ### Create zookeeper standard version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        zookeeper_standard = tencentcloud.tse.Instance("zookeeperStandard",
            engine_name="zookeeper-test",
            engine_node_num=3,
            engine_product_version="STANDARD",
            engine_region="ap-guangzhou",
            engine_resource_spec="spec-qvj6k7t4q",
            engine_type="zookeeper",
            engine_version="3.5.9.4",
            subnet_id="subnet-dwj7ipnc",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-4owdpnwr")
        ```
        <!--End PulumiCodeChooser -->

        ### Create zookeeper professional version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        zookeeper_professional = tencentcloud.tse.Instance("zookeeperProfessional",
            engine_name="zookeeper-test",
            engine_node_num=3,
            engine_product_version="PROFESSIONAL",
            engine_region="ap-guangzhou",
            engine_region_infos=[tencentcloud.tse.InstanceEngineRegionInfoArgs(
                engine_region="ap-guangzhou",
                replica=3,
                vpc_infos=[
                    tencentcloud.tse.InstanceEngineRegionInfoVpcInfoArgs(
                        subnet_id="subnet-dwj7ipnc",
                        vpc_id="vpc-4owdpnwr",
                    ),
                    tencentcloud.tse.InstanceEngineRegionInfoVpcInfoArgs(
                        subnet_id="subnet-403mgks4",
                        vpc_id="vpc-b1puef4z",
                    ),
                ],
            )],
            engine_resource_spec="spec-qvj6k7t4q",
            engine_type="zookeeper",
            engine_version="3.5.9.4",
            subnet_id="subnet-dwj7ipnc",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-4owdpnwr")
        ```
        <!--End PulumiCodeChooser -->

        ### Create nacos standard version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        nacos = tencentcloud.tse.Instance("nacos",
            enable_client_internet_access=False,
            engine_name="test",
            engine_node_num=3,
            engine_product_version="STANDARD",
            engine_region="ap-guangzhou",
            engine_resource_spec="spec-1160a35a",
            engine_type="nacos",
            engine_version="2.0.3.4",
            subnet_id="subnet-5vpegquy",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-99xmasf9")
        ```
        <!--End PulumiCodeChooser -->

        ### Create polaris base version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        polaris = tencentcloud.tse.Instance("polaris",
            enable_client_internet_access=False,
            engine_name="test",
            engine_node_num=2,
            engine_product_version="BASE",
            engine_region="ap-guangzhou",
            engine_resource_spec="spec-c160bas1",
            engine_type="polaris",
            engine_version="1.16.0.1",
            subnet_id="subnet-5vpegquy",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-99xmasf9")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/instance:Instance instance instance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_client_internet_access: Client public network access, `true`: on, `false`: off, default: false.
        :param pulumi.Input[str] engine_name: engien name. Reference value: nacos-test.
        :param pulumi.Input[int] engine_node_num: engine node num. see EngineProductVersion.
        :param pulumi.Input[str] engine_product_version: Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
        :param pulumi.Input[str] engine_region: engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceEngineRegionInfoArgs']]]] engine_region_infos: Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
        :param pulumi.Input[str] engine_resource_spec: engine spec ID. see EngineProductVersion.
        :param pulumi.Input[str] engine_type: engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
        :param pulumi.Input[str] engine_version: An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
        :param pulumi.Input[int] prepaid_period: Prepaid time, in monthly units.
        :param pulumi.Input[int] prepaid_renew_flag: Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trade_type: trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
        :param pulumi.Input[str] vpc_id: VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tse instance

        ## Example Usage

        ### Create zookeeper standard version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        zookeeper_standard = tencentcloud.tse.Instance("zookeeperStandard",
            engine_name="zookeeper-test",
            engine_node_num=3,
            engine_product_version="STANDARD",
            engine_region="ap-guangzhou",
            engine_resource_spec="spec-qvj6k7t4q",
            engine_type="zookeeper",
            engine_version="3.5.9.4",
            subnet_id="subnet-dwj7ipnc",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-4owdpnwr")
        ```
        <!--End PulumiCodeChooser -->

        ### Create zookeeper professional version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        zookeeper_professional = tencentcloud.tse.Instance("zookeeperProfessional",
            engine_name="zookeeper-test",
            engine_node_num=3,
            engine_product_version="PROFESSIONAL",
            engine_region="ap-guangzhou",
            engine_region_infos=[tencentcloud.tse.InstanceEngineRegionInfoArgs(
                engine_region="ap-guangzhou",
                replica=3,
                vpc_infos=[
                    tencentcloud.tse.InstanceEngineRegionInfoVpcInfoArgs(
                        subnet_id="subnet-dwj7ipnc",
                        vpc_id="vpc-4owdpnwr",
                    ),
                    tencentcloud.tse.InstanceEngineRegionInfoVpcInfoArgs(
                        subnet_id="subnet-403mgks4",
                        vpc_id="vpc-b1puef4z",
                    ),
                ],
            )],
            engine_resource_spec="spec-qvj6k7t4q",
            engine_type="zookeeper",
            engine_version="3.5.9.4",
            subnet_id="subnet-dwj7ipnc",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-4owdpnwr")
        ```
        <!--End PulumiCodeChooser -->

        ### Create nacos standard version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        nacos = tencentcloud.tse.Instance("nacos",
            enable_client_internet_access=False,
            engine_name="test",
            engine_node_num=3,
            engine_product_version="STANDARD",
            engine_region="ap-guangzhou",
            engine_resource_spec="spec-1160a35a",
            engine_type="nacos",
            engine_version="2.0.3.4",
            subnet_id="subnet-5vpegquy",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-99xmasf9")
        ```
        <!--End PulumiCodeChooser -->

        ### Create polaris base version

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        polaris = tencentcloud.tse.Instance("polaris",
            enable_client_internet_access=False,
            engine_name="test",
            engine_node_num=2,
            engine_product_version="BASE",
            engine_region="ap-guangzhou",
            engine_resource_spec="spec-c160bas1",
            engine_type="polaris",
            engine_version="1.16.0.1",
            subnet_id="subnet-5vpegquy",
            tags={
                "createdBy": "terraform",
            },
            trade_type=0,
            vpc_id="vpc-99xmasf9")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/instance:Instance instance instance_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enable_client_internet_access: Optional[pulumi.Input[bool]] = None,
                 engine_name: Optional[pulumi.Input[str]] = None,
                 engine_node_num: Optional[pulumi.Input[int]] = None,
                 engine_product_version: Optional[pulumi.Input[str]] = None,
                 engine_region: Optional[pulumi.Input[str]] = None,
                 engine_region_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceEngineRegionInfoArgs']]]]] = None,
                 engine_resource_spec: Optional[pulumi.Input[str]] = None,
                 engine_type: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trade_type: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["enable_client_internet_access"] = enable_client_internet_access
            if engine_name is None and not opts.urn:
                raise TypeError("Missing required property 'engine_name'")
            __props__.__dict__["engine_name"] = engine_name
            __props__.__dict__["engine_node_num"] = engine_node_num
            if engine_product_version is None and not opts.urn:
                raise TypeError("Missing required property 'engine_product_version'")
            __props__.__dict__["engine_product_version"] = engine_product_version
            if engine_region is None and not opts.urn:
                raise TypeError("Missing required property 'engine_region'")
            __props__.__dict__["engine_region"] = engine_region
            __props__.__dict__["engine_region_infos"] = engine_region_infos
            __props__.__dict__["engine_resource_spec"] = engine_resource_spec
            if engine_type is None and not opts.urn:
                raise TypeError("Missing required property 'engine_type'")
            __props__.__dict__["engine_type"] = engine_type
            if engine_version is None and not opts.urn:
                raise TypeError("Missing required property 'engine_version'")
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["prepaid_renew_flag"] = prepaid_renew_flag
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if trade_type is None and not opts.urn:
                raise TypeError("Missing required property 'trade_type'")
            __props__.__dict__["trade_type"] = trade_type
            __props__.__dict__["vpc_id"] = vpc_id
        super(Instance, __self__).__init__(
            'tencentcloud:Tse/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enable_client_internet_access: Optional[pulumi.Input[bool]] = None,
            engine_name: Optional[pulumi.Input[str]] = None,
            engine_node_num: Optional[pulumi.Input[int]] = None,
            engine_product_version: Optional[pulumi.Input[str]] = None,
            engine_region: Optional[pulumi.Input[str]] = None,
            engine_region_infos: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceEngineRegionInfoArgs']]]]] = None,
            engine_resource_spec: Optional[pulumi.Input[str]] = None,
            engine_type: Optional[pulumi.Input[str]] = None,
            engine_version: Optional[pulumi.Input[str]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            prepaid_renew_flag: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            trade_type: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enable_client_internet_access: Client public network access, `true`: on, `false`: off, default: false.
        :param pulumi.Input[str] engine_name: engien name. Reference value: nacos-test.
        :param pulumi.Input[int] engine_node_num: engine node num. see EngineProductVersion.
        :param pulumi.Input[str] engine_product_version: Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
        :param pulumi.Input[str] engine_region: engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceEngineRegionInfoArgs']]]] engine_region_infos: Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
        :param pulumi.Input[str] engine_resource_spec: engine spec ID. see EngineProductVersion.
        :param pulumi.Input[str] engine_type: engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
        :param pulumi.Input[str] engine_version: An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
        :param pulumi.Input[int] prepaid_period: Prepaid time, in monthly units.
        :param pulumi.Input[int] prepaid_renew_flag: Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trade_type: trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
        :param pulumi.Input[str] vpc_id: VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["enable_client_internet_access"] = enable_client_internet_access
        __props__.__dict__["engine_name"] = engine_name
        __props__.__dict__["engine_node_num"] = engine_node_num
        __props__.__dict__["engine_product_version"] = engine_product_version
        __props__.__dict__["engine_region"] = engine_region
        __props__.__dict__["engine_region_infos"] = engine_region_infos
        __props__.__dict__["engine_resource_spec"] = engine_resource_spec
        __props__.__dict__["engine_type"] = engine_type
        __props__.__dict__["engine_version"] = engine_version
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["prepaid_renew_flag"] = prepaid_renew_flag
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trade_type"] = trade_type
        __props__.__dict__["vpc_id"] = vpc_id
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="enableClientInternetAccess")
    def enable_client_internet_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Client public network access, `true`: on, `false`: off, default: false.
        """
        return pulumi.get(self, "enable_client_internet_access")

    @property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> pulumi.Output[str]:
        """
        engien name. Reference value: nacos-test.
        """
        return pulumi.get(self, "engine_name")

    @property
    @pulumi.getter(name="engineNodeNum")
    def engine_node_num(self) -> pulumi.Output[Optional[int]]:
        """
        engine node num. see EngineProductVersion.
        """
        return pulumi.get(self, "engine_node_num")

    @property
    @pulumi.getter(name="engineProductVersion")
    def engine_product_version(self) -> pulumi.Output[str]:
        """
        Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
        """
        return pulumi.get(self, "engine_product_version")

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> pulumi.Output[str]:
        """
        engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
        """
        return pulumi.get(self, "engine_region")

    @property
    @pulumi.getter(name="engineRegionInfos")
    def engine_region_infos(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceEngineRegionInfo']]]:
        """
        Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
        """
        return pulumi.get(self, "engine_region_infos")

    @property
    @pulumi.getter(name="engineResourceSpec")
    def engine_resource_spec(self) -> pulumi.Output[Optional[str]]:
        """
        engine spec ID. see EngineProductVersion.
        """
        return pulumi.get(self, "engine_resource_spec")

    @property
    @pulumi.getter(name="engineType")
    def engine_type(self) -> pulumi.Output[str]:
        """
        engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
        """
        return pulumi.get(self, "engine_type")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[str]:
        """
        An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        Prepaid time, in monthly units.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
        """
        return pulumi.get(self, "prepaid_renew_flag")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[Optional[str]]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tradeType")
    def trade_type(self) -> pulumi.Output[int]:
        """
        trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
        """
        return pulumi.get(self, "trade_type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        return pulumi.get(self, "vpc_id")

