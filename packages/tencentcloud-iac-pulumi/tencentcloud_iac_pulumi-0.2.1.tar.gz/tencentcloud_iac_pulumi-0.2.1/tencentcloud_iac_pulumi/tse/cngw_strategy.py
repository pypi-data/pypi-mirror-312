# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CngwStrategyArgs', 'CngwStrategy']

@pulumi.input_type
class CngwStrategyArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[str],
                 strategy_name: pulumi.Input[str],
                 config: Optional[pulumi.Input['CngwStrategyConfigArgs']] = None,
                 cron_config: Optional[pulumi.Input['CngwStrategyCronConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CngwStrategy resource.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] strategy_name: strategy name, up to 20 characters.
        :param pulumi.Input['CngwStrategyConfigArgs'] config: configuration of metric scaling.
        :param pulumi.Input['CngwStrategyCronConfigArgs'] cron_config: configuration of timed scaling.
        :param pulumi.Input[str] description: description information, up to 120 characters.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "strategy_name", strategy_name)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if cron_config is not None:
            pulumi.set(__self__, "cron_config", cron_config)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> pulumi.Input[str]:
        """
        strategy name, up to 20 characters.
        """
        return pulumi.get(self, "strategy_name")

    @strategy_name.setter
    def strategy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "strategy_name", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['CngwStrategyConfigArgs']]:
        """
        configuration of metric scaling.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['CngwStrategyConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="cronConfig")
    def cron_config(self) -> Optional[pulumi.Input['CngwStrategyCronConfigArgs']]:
        """
        configuration of timed scaling.
        """
        return pulumi.get(self, "cron_config")

    @cron_config.setter
    def cron_config(self, value: Optional[pulumi.Input['CngwStrategyCronConfigArgs']]):
        pulumi.set(self, "cron_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description information, up to 120 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _CngwStrategyState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input['CngwStrategyConfigArgs']] = None,
                 cron_config: Optional[pulumi.Input['CngwStrategyCronConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 strategy_id: Optional[pulumi.Input[str]] = None,
                 strategy_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CngwStrategy resources.
        :param pulumi.Input['CngwStrategyConfigArgs'] config: configuration of metric scaling.
        :param pulumi.Input['CngwStrategyCronConfigArgs'] cron_config: configuration of timed scaling.
        :param pulumi.Input[str] description: description information, up to 120 characters.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] strategy_id: strategy ID
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] strategy_name: strategy name, up to 20 characters.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if cron_config is not None:
            pulumi.set(__self__, "cron_config", cron_config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)
        if strategy_name is not None:
            pulumi.set(__self__, "strategy_name", strategy_name)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['CngwStrategyConfigArgs']]:
        """
        configuration of metric scaling.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['CngwStrategyConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="cronConfig")
    def cron_config(self) -> Optional[pulumi.Input['CngwStrategyCronConfigArgs']]:
        """
        configuration of timed scaling.
        """
        return pulumi.get(self, "cron_config")

    @cron_config.setter
    def cron_config(self, value: Optional[pulumi.Input['CngwStrategyCronConfigArgs']]):
        pulumi.set(self, "cron_config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description information, up to 120 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        strategy ID
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_id", value)

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> Optional[pulumi.Input[str]]:
        """
        strategy name, up to 20 characters.
        """
        return pulumi.get(self, "strategy_name")

    @strategy_name.setter
    def strategy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_name", value)


class CngwStrategy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['CngwStrategyConfigArgs']]] = None,
                 cron_config: Optional[pulumi.Input[pulumi.InputType['CngwStrategyCronConfigArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 strategy_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tse cngw_strategy

        > **NOTE:** Please pay attention to the correctness of the cycle when modifying the `params` of `cron_config`, otherwise the modification will not be successful.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cngw_strategy = tencentcloud.tse.CngwStrategy("cngwStrategy",
            config=tencentcloud.tse.CngwStrategyConfigArgs(
                behavior=tencentcloud.tse.CngwStrategyConfigBehaviorArgs(
                    scale_down=tencentcloud.tse.CngwStrategyConfigBehaviorScaleDownArgs(
                        policies=[tencentcloud.tse.CngwStrategyConfigBehaviorScaleDownPolicyArgs(
                            period_seconds=9,
                            type="Pods",
                            value=1,
                        )],
                        select_policy="Max",
                        stabilization_window_seconds=301,
                    ),
                    scale_up=tencentcloud.tse.CngwStrategyConfigBehaviorScaleUpArgs(
                        policies=[tencentcloud.tse.CngwStrategyConfigBehaviorScaleUpPolicyArgs(
                            period_seconds=10,
                            type="Pods",
                            value=1,
                        )],
                        select_policy="Max",
                        stabilization_window_seconds=31,
                    ),
                ),
                max_replicas=2,
                metrics=[tencentcloud.tse.CngwStrategyConfigMetricArgs(
                    resource_name="cpu",
                    target_value=1,
                    type="Resource",
                )],
            ),
            cron_config=tencentcloud.tse.CngwStrategyCronConfigArgs(
                params=[tencentcloud.tse.CngwStrategyCronConfigParamArgs(
                    crontab="0 00 00 * * *",
                    period="* * *",
                    start_at="00:00",
                    target_replicas=2,
                )],
            ),
            description="aaaaa",
            gateway_id="gateway-cf8c99c3",
            strategy_name="test-cron")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_strategy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwStrategy:CngwStrategy cngw_strategy gateway-cf8c99c3#strategy-a6744ff8
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CngwStrategyConfigArgs']] config: configuration of metric scaling.
        :param pulumi.Input[pulumi.InputType['CngwStrategyCronConfigArgs']] cron_config: configuration of timed scaling.
        :param pulumi.Input[str] description: description information, up to 120 characters.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] strategy_name: strategy name, up to 20 characters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CngwStrategyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tse cngw_strategy

        > **NOTE:** Please pay attention to the correctness of the cycle when modifying the `params` of `cron_config`, otherwise the modification will not be successful.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cngw_strategy = tencentcloud.tse.CngwStrategy("cngwStrategy",
            config=tencentcloud.tse.CngwStrategyConfigArgs(
                behavior=tencentcloud.tse.CngwStrategyConfigBehaviorArgs(
                    scale_down=tencentcloud.tse.CngwStrategyConfigBehaviorScaleDownArgs(
                        policies=[tencentcloud.tse.CngwStrategyConfigBehaviorScaleDownPolicyArgs(
                            period_seconds=9,
                            type="Pods",
                            value=1,
                        )],
                        select_policy="Max",
                        stabilization_window_seconds=301,
                    ),
                    scale_up=tencentcloud.tse.CngwStrategyConfigBehaviorScaleUpArgs(
                        policies=[tencentcloud.tse.CngwStrategyConfigBehaviorScaleUpPolicyArgs(
                            period_seconds=10,
                            type="Pods",
                            value=1,
                        )],
                        select_policy="Max",
                        stabilization_window_seconds=31,
                    ),
                ),
                max_replicas=2,
                metrics=[tencentcloud.tse.CngwStrategyConfigMetricArgs(
                    resource_name="cpu",
                    target_value=1,
                    type="Resource",
                )],
            ),
            cron_config=tencentcloud.tse.CngwStrategyCronConfigArgs(
                params=[tencentcloud.tse.CngwStrategyCronConfigParamArgs(
                    crontab="0 00 00 * * *",
                    period="* * *",
                    start_at="00:00",
                    target_replicas=2,
                )],
            ),
            description="aaaaa",
            gateway_id="gateway-cf8c99c3",
            strategy_name="test-cron")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_strategy can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwStrategy:CngwStrategy cngw_strategy gateway-cf8c99c3#strategy-a6744ff8
        ```

        :param str resource_name: The name of the resource.
        :param CngwStrategyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CngwStrategyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[pulumi.InputType['CngwStrategyConfigArgs']]] = None,
                 cron_config: Optional[pulumi.Input[pulumi.InputType['CngwStrategyCronConfigArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 strategy_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CngwStrategyArgs.__new__(CngwStrategyArgs)

            __props__.__dict__["config"] = config
            __props__.__dict__["cron_config"] = cron_config
            __props__.__dict__["description"] = description
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            if strategy_name is None and not opts.urn:
                raise TypeError("Missing required property 'strategy_name'")
            __props__.__dict__["strategy_name"] = strategy_name
            __props__.__dict__["strategy_id"] = None
        super(CngwStrategy, __self__).__init__(
            'tencentcloud:Tse/cngwStrategy:CngwStrategy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[pulumi.InputType['CngwStrategyConfigArgs']]] = None,
            cron_config: Optional[pulumi.Input[pulumi.InputType['CngwStrategyCronConfigArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            strategy_id: Optional[pulumi.Input[str]] = None,
            strategy_name: Optional[pulumi.Input[str]] = None) -> 'CngwStrategy':
        """
        Get an existing CngwStrategy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CngwStrategyConfigArgs']] config: configuration of metric scaling.
        :param pulumi.Input[pulumi.InputType['CngwStrategyCronConfigArgs']] cron_config: configuration of timed scaling.
        :param pulumi.Input[str] description: description information, up to 120 characters.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] strategy_id: strategy ID
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] strategy_name: strategy name, up to 20 characters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CngwStrategyState.__new__(_CngwStrategyState)

        __props__.__dict__["config"] = config
        __props__.__dict__["cron_config"] = cron_config
        __props__.__dict__["description"] = description
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["strategy_id"] = strategy_id
        __props__.__dict__["strategy_name"] = strategy_name
        return CngwStrategy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[Optional['outputs.CngwStrategyConfig']]:
        """
        configuration of metric scaling.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="cronConfig")
    def cron_config(self) -> pulumi.Output[Optional['outputs.CngwStrategyCronConfig']]:
        """
        configuration of timed scaling.
        """
        return pulumi.get(self, "cron_config")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        description information, up to 120 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> pulumi.Output[str]:
        """
        strategy ID
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "strategy_id")

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> pulumi.Output[str]:
        """
        strategy name, up to 20 characters.
        """
        return pulumi.get(self, "strategy_name")

