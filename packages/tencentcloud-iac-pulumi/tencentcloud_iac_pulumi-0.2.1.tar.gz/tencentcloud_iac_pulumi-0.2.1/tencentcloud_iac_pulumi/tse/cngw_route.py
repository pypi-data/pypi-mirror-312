# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CngwRouteArgs', 'CngwRoute']

@pulumi.input_type
class CngwRouteArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[str],
                 service_id: pulumi.Input[str],
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 force_https: Optional[pulumi.Input[bool]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_name: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a CngwRoute resource.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] service_id: ID of the service which the route belongs to.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] destination_ports: destination port for Layer 4 matching.
        :param pulumi.Input[bool] force_https: This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        :param pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]] headers: the headers of route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: host list.
        :param pulumi.Input[int] https_redirect_status_code: https redirection status code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: path list.
        :param pulumi.Input[bool] preserve_host: whether to keep the host when forwarding to the backend.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: the protocol list of route.Reference value:`https`,`http`.
        :param pulumi.Input[str] route_name: the name of the route, unique in the instance.
        :param pulumi.Input[bool] strip_path: whether to strip path when forwarding to the backend.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "service_id", service_id)
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if force_https is not None:
            warnings.warn("""This field has been deprecated and will be deleted in subsequent versions.""", DeprecationWarning)
            pulumi.log.warn("""force_https is deprecated: This field has been deprecated and will be deleted in subsequent versions.""")
        if force_https is not None:
            pulumi.set(__self__, "force_https", force_https)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if https_redirect_status_code is not None:
            pulumi.set(__self__, "https_redirect_status_code", https_redirect_status_code)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if preserve_host is not None:
            pulumi.set(__self__, "preserve_host", preserve_host)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_name is not None:
            pulumi.set(__self__, "route_name", route_name)
        if strip_path is not None:
            pulumi.set(__self__, "strip_path", strip_path)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        ID of the service which the route belongs to.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        destination port for Layer 4 matching.
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="forceHttps")
    def force_https(self) -> Optional[pulumi.Input[bool]]:
        """
        This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        """
        warnings.warn("""This field has been deprecated and will be deleted in subsequent versions.""", DeprecationWarning)
        pulumi.log.warn("""force_https is deprecated: This field has been deprecated and will be deleted in subsequent versions.""")

        return pulumi.get(self, "force_https")

    @force_https.setter
    def force_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_https", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]]]:
        """
        the headers of route.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        host list.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="httpsRedirectStatusCode")
    def https_redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        https redirection status code.
        """
        return pulumi.get(self, "https_redirect_status_code")

    @https_redirect_status_code.setter
    def https_redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_redirect_status_code", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        path list.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)

    @property
    @pulumi.getter(name="preserveHost")
    def preserve_host(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to keep the host when forwarding to the backend.
        """
        return pulumi.get(self, "preserve_host")

    @preserve_host.setter
    def preserve_host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_host", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the protocol list of route.Reference value:`https`,`http`.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="routeName")
    def route_name(self) -> Optional[pulumi.Input[str]]:
        """
        the name of the route, unique in the instance.
        """
        return pulumi.get(self, "route_name")

    @route_name.setter
    def route_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_name", value)

    @property
    @pulumi.getter(name="stripPath")
    def strip_path(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to strip path when forwarding to the backend.
        """
        return pulumi.get(self, "strip_path")

    @strip_path.setter
    def strip_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strip_path", value)


@pulumi.input_type
class _CngwRouteState:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 force_https: Optional[pulumi.Input[bool]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_id: Optional[pulumi.Input[str]] = None,
                 route_name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering CngwRoute resources.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] destination_ports: destination port for Layer 4 matching.
        :param pulumi.Input[bool] force_https: This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]] headers: the headers of route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: host list.
        :param pulumi.Input[int] https_redirect_status_code: https redirection status code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: path list.
        :param pulumi.Input[bool] preserve_host: whether to keep the host when forwarding to the backend.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: the protocol list of route.Reference value:`https`,`http`.
        :param pulumi.Input[str] route_id: the id of the route, unique in the instance.
        :param pulumi.Input[str] route_name: the name of the route, unique in the instance.
        :param pulumi.Input[str] service_id: ID of the service which the route belongs to.
        :param pulumi.Input[bool] strip_path: whether to strip path when forwarding to the backend.
        """
        if destination_ports is not None:
            pulumi.set(__self__, "destination_ports", destination_ports)
        if force_https is not None:
            warnings.warn("""This field has been deprecated and will be deleted in subsequent versions.""", DeprecationWarning)
            pulumi.log.warn("""force_https is deprecated: This field has been deprecated and will be deleted in subsequent versions.""")
        if force_https is not None:
            pulumi.set(__self__, "force_https", force_https)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if https_redirect_status_code is not None:
            pulumi.set(__self__, "https_redirect_status_code", https_redirect_status_code)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if preserve_host is not None:
            pulumi.set(__self__, "preserve_host", preserve_host)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if route_id is not None:
            pulumi.set(__self__, "route_id", route_id)
        if route_name is not None:
            pulumi.set(__self__, "route_name", route_name)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if strip_path is not None:
            pulumi.set(__self__, "strip_path", strip_path)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        destination port for Layer 4 matching.
        """
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter(name="forceHttps")
    def force_https(self) -> Optional[pulumi.Input[bool]]:
        """
        This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        """
        warnings.warn("""This field has been deprecated and will be deleted in subsequent versions.""", DeprecationWarning)
        pulumi.log.warn("""force_https is deprecated: This field has been deprecated and will be deleted in subsequent versions.""")

        return pulumi.get(self, "force_https")

    @force_https.setter
    def force_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_https", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]]]:
        """
        the headers of route.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        host list.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="httpsRedirectStatusCode")
    def https_redirect_status_code(self) -> Optional[pulumi.Input[int]]:
        """
        https redirection status code.
        """
        return pulumi.get(self, "https_redirect_status_code")

    @https_redirect_status_code.setter
    def https_redirect_status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "https_redirect_status_code", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        path list.
        """
        return pulumi.get(self, "paths")

    @paths.setter
    def paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "paths", value)

    @property
    @pulumi.getter(name="preserveHost")
    def preserve_host(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to keep the host when forwarding to the backend.
        """
        return pulumi.get(self, "preserve_host")

    @preserve_host.setter
    def preserve_host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_host", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        the protocol list of route.Reference value:`https`,`http`.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> Optional[pulumi.Input[str]]:
        """
        the id of the route, unique in the instance.
        """
        return pulumi.get(self, "route_id")

    @route_id.setter
    def route_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_id", value)

    @property
    @pulumi.getter(name="routeName")
    def route_name(self) -> Optional[pulumi.Input[str]]:
        """
        the name of the route, unique in the instance.
        """
        return pulumi.get(self, "route_name")

    @route_name.setter
    def route_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_name", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the service which the route belongs to.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="stripPath")
    def strip_path(self) -> Optional[pulumi.Input[bool]]:
        """
        whether to strip path when forwarding to the backend.
        """
        return pulumi.get(self, "strip_path")

    @strip_path.setter
    def strip_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strip_path", value)


class CngwRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 force_https: Optional[pulumi.Input[bool]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CngwRouteHeaderArgs']]]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a tse cngw_route

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        cngw_gateway = tencentcloud.tse.CngwGateway("cngwGateway",
            description="terraform test1",
            enable_cls=True,
            engine_region="ap-guangzhou",
            feature_version="STANDARD",
            gateway_version="2.5.1",
            ingress_class_name="tse-nginx-ingress",
            internet_max_bandwidth_out=0,
            trade_type=0,
            type="kong",
            node_config=tencentcloud.tse.CngwGatewayNodeConfigArgs(
                number=2,
                specification="1c2g",
            ),
            vpc_config=tencentcloud.tse.CngwGatewayVpcConfigArgs(
                subnet_id=subnet.id,
                vpc_id=vpc.id,
            ),
            tags={
                "createdBy": "terraform",
            })
        cngw_service = tencentcloud.tse.CngwService("cngwService",
            gateway_id=cngw_gateway.id,
            path="/test",
            protocol="http",
            retries=5,
            timeout=60000,
            upstream_type="HostIP",
            upstream_info=tencentcloud.tse.CngwServiceUpstreamInfoArgs(
                algorithm="round-robin",
                auto_scaling_cvm_port=0,
                host="arunma.cn",
                port=8012,
                slow_start=0,
            ))
        cngw_route = tencentcloud.tse.CngwRoute("cngwRoute",
            destination_ports=[],
            gateway_id=cngw_gateway.id,
            hosts=["192.168.0.1:9090"],
            https_redirect_status_code=426,
            paths=["/user"],
            headers=[tencentcloud.tse.CngwRouteHeaderArgs(
                key="req",
                value="terraform",
            )],
            preserve_host=False,
            protocols=[
                "http",
                "https",
            ],
            route_name="terraform-route",
            service_id=cngw_service.service_id,
            strip_path=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] destination_ports: destination port for Layer 4 matching.
        :param pulumi.Input[bool] force_https: This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CngwRouteHeaderArgs']]]] headers: the headers of route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: host list.
        :param pulumi.Input[int] https_redirect_status_code: https redirection status code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: path list.
        :param pulumi.Input[bool] preserve_host: whether to keep the host when forwarding to the backend.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: the protocol list of route.Reference value:`https`,`http`.
        :param pulumi.Input[str] route_name: the name of the route, unique in the instance.
        :param pulumi.Input[str] service_id: ID of the service which the route belongs to.
        :param pulumi.Input[bool] strip_path: whether to strip path when forwarding to the backend.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CngwRouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tse cngw_route

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        cngw_gateway = tencentcloud.tse.CngwGateway("cngwGateway",
            description="terraform test1",
            enable_cls=True,
            engine_region="ap-guangzhou",
            feature_version="STANDARD",
            gateway_version="2.5.1",
            ingress_class_name="tse-nginx-ingress",
            internet_max_bandwidth_out=0,
            trade_type=0,
            type="kong",
            node_config=tencentcloud.tse.CngwGatewayNodeConfigArgs(
                number=2,
                specification="1c2g",
            ),
            vpc_config=tencentcloud.tse.CngwGatewayVpcConfigArgs(
                subnet_id=subnet.id,
                vpc_id=vpc.id,
            ),
            tags={
                "createdBy": "terraform",
            })
        cngw_service = tencentcloud.tse.CngwService("cngwService",
            gateway_id=cngw_gateway.id,
            path="/test",
            protocol="http",
            retries=5,
            timeout=60000,
            upstream_type="HostIP",
            upstream_info=tencentcloud.tse.CngwServiceUpstreamInfoArgs(
                algorithm="round-robin",
                auto_scaling_cvm_port=0,
                host="arunma.cn",
                port=8012,
                slow_start=0,
            ))
        cngw_route = tencentcloud.tse.CngwRoute("cngwRoute",
            destination_ports=[],
            gateway_id=cngw_gateway.id,
            hosts=["192.168.0.1:9090"],
            https_redirect_status_code=426,
            paths=["/user"],
            headers=[tencentcloud.tse.CngwRouteHeaderArgs(
                key="req",
                value="terraform",
            )],
            preserve_host=False,
            protocols=[
                "http",
                "https",
            ],
            route_name="terraform-route",
            service_id=cngw_service.service_id,
            strip_path=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param CngwRouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CngwRouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 force_https: Optional[pulumi.Input[bool]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CngwRouteHeaderArgs']]]]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 https_redirect_status_code: Optional[pulumi.Input[int]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_host: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 route_name: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 strip_path: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CngwRouteArgs.__new__(CngwRouteArgs)

            __props__.__dict__["destination_ports"] = destination_ports
            __props__.__dict__["force_https"] = force_https
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["headers"] = headers
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["https_redirect_status_code"] = https_redirect_status_code
            __props__.__dict__["methods"] = methods
            __props__.__dict__["paths"] = paths
            __props__.__dict__["preserve_host"] = preserve_host
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["route_name"] = route_name
            if service_id is None and not opts.urn:
                raise TypeError("Missing required property 'service_id'")
            __props__.__dict__["service_id"] = service_id
            __props__.__dict__["strip_path"] = strip_path
            __props__.__dict__["route_id"] = None
        super(CngwRoute, __self__).__init__(
            'tencentcloud:Tse/cngwRoute:CngwRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            force_https: Optional[pulumi.Input[bool]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CngwRouteHeaderArgs']]]]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            https_redirect_status_code: Optional[pulumi.Input[int]] = None,
            methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            paths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            preserve_host: Optional[pulumi.Input[bool]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            route_id: Optional[pulumi.Input[str]] = None,
            route_name: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            strip_path: Optional[pulumi.Input[bool]] = None) -> 'CngwRoute':
        """
        Get an existing CngwRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] destination_ports: destination port for Layer 4 matching.
        :param pulumi.Input[bool] force_https: This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CngwRouteHeaderArgs']]]] headers: the headers of route.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: host list.
        :param pulumi.Input[int] https_redirect_status_code: https redirection status code.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] paths: path list.
        :param pulumi.Input[bool] preserve_host: whether to keep the host when forwarding to the backend.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: the protocol list of route.Reference value:`https`,`http`.
        :param pulumi.Input[str] route_id: the id of the route, unique in the instance.
        :param pulumi.Input[str] route_name: the name of the route, unique in the instance.
        :param pulumi.Input[str] service_id: ID of the service which the route belongs to.
        :param pulumi.Input[bool] strip_path: whether to strip path when forwarding to the backend.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CngwRouteState.__new__(_CngwRouteState)

        __props__.__dict__["destination_ports"] = destination_ports
        __props__.__dict__["force_https"] = force_https
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["headers"] = headers
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["https_redirect_status_code"] = https_redirect_status_code
        __props__.__dict__["methods"] = methods
        __props__.__dict__["paths"] = paths
        __props__.__dict__["preserve_host"] = preserve_host
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["route_id"] = route_id
        __props__.__dict__["route_name"] = route_name
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["strip_path"] = strip_path
        return CngwRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        destination port for Layer 4 matching.
        """
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="forceHttps")
    def force_https(self) -> pulumi.Output[Optional[bool]]:
        """
        This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
        """
        warnings.warn("""This field has been deprecated and will be deleted in subsequent versions.""", DeprecationWarning)
        pulumi.log.warn("""force_https is deprecated: This field has been deprecated and will be deleted in subsequent versions.""")

        return pulumi.get(self, "force_https")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Sequence['outputs.CngwRouteHeader']]]:
        """
        the headers of route.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        host list.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="httpsRedirectStatusCode")
    def https_redirect_status_code(self) -> pulumi.Output[Optional[int]]:
        """
        https redirection status code.
        """
        return pulumi.get(self, "https_redirect_status_code")

    @property
    @pulumi.getter
    def methods(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def paths(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        path list.
        """
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter(name="preserveHost")
    def preserve_host(self) -> pulumi.Output[Optional[bool]]:
        """
        whether to keep the host when forwarding to the backend.
        """
        return pulumi.get(self, "preserve_host")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        the protocol list of route.Reference value:`https`,`http`.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="routeId")
    def route_id(self) -> pulumi.Output[str]:
        """
        the id of the route, unique in the instance.
        """
        return pulumi.get(self, "route_id")

    @property
    @pulumi.getter(name="routeName")
    def route_name(self) -> pulumi.Output[Optional[str]]:
        """
        the name of the route, unique in the instance.
        """
        return pulumi.get(self, "route_name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        ID of the service which the route belongs to.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="stripPath")
    def strip_path(self) -> pulumi.Output[Optional[bool]]:
        """
        whether to strip path when forwarding to the backend.
        """
        return pulumi.get(self, "strip_path")

