# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CngwGroupArgs', 'CngwGroup']

@pulumi.input_type
class CngwGroupArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[str],
                 node_config: pulumi.Input['CngwGroupNodeConfigArgs'],
                 subnet_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 internet_config: Optional[pulumi.Input['CngwGroupInternetConfigArgs']] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CngwGroup resource.
        :param pulumi.Input[str] gateway_id: gateway IDonly postpaid gateway supported.
        :param pulumi.Input['CngwGroupNodeConfigArgs'] node_config: group node configration.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value:- subnet-ahde9me9.
        :param pulumi.Input[str] description: description information of group.
        :param pulumi.Input['CngwGroupInternetConfigArgs'] internet_config: internet configration.
        :param pulumi.Input[int] internet_max_bandwidth_out: public network outbound traffic bandwidth,[1,2048]Mbps.
        :param pulumi.Input[str] name: gateway group name.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "node_config", node_config)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internet_config is not None:
            pulumi.set(__self__, "internet_config", internet_config)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        gateway IDonly postpaid gateway supported.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> pulumi.Input['CngwGroupNodeConfigArgs']:
        """
        group node configration.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: pulumi.Input['CngwGroupNodeConfigArgs']):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value:- subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description information of group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="internetConfig")
    def internet_config(self) -> Optional[pulumi.Input['CngwGroupInternetConfigArgs']]:
        """
        internet configration.
        """
        return pulumi.get(self, "internet_config")

    @internet_config.setter
    def internet_config(self, value: Optional[pulumi.Input['CngwGroupInternetConfigArgs']]):
        pulumi.set(self, "internet_config", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        public network outbound traffic bandwidth,[1,2048]Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        gateway group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CngwGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 internet_config: Optional[pulumi.Input['CngwGroupInternetConfigArgs']] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input['CngwGroupNodeConfigArgs']] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CngwGroup resources.
        :param pulumi.Input[str] description: description information of group.
        :param pulumi.Input[str] gateway_id: gateway IDonly postpaid gateway supported.
        :param pulumi.Input[str] group_id: gateway group id.
        :param pulumi.Input['CngwGroupInternetConfigArgs'] internet_config: internet configration.
        :param pulumi.Input[int] internet_max_bandwidth_out: public network outbound traffic bandwidth,[1,2048]Mbps.
        :param pulumi.Input[str] name: gateway group name.
        :param pulumi.Input['CngwGroupNodeConfigArgs'] node_config: group node configration.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value:- subnet-ahde9me9.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if internet_config is not None:
            pulumi.set(__self__, "internet_config", internet_config)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if node_config is not None:
            pulumi.set(__self__, "node_config", node_config)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description information of group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway IDonly postpaid gateway supported.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway group id.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="internetConfig")
    def internet_config(self) -> Optional[pulumi.Input['CngwGroupInternetConfigArgs']]:
        """
        internet configration.
        """
        return pulumi.get(self, "internet_config")

    @internet_config.setter
    def internet_config(self, value: Optional[pulumi.Input['CngwGroupInternetConfigArgs']]):
        pulumi.set(self, "internet_config", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        public network outbound traffic bandwidth,[1,2048]Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        gateway group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> Optional[pulumi.Input['CngwGroupNodeConfigArgs']]:
        """
        group node configration.
        """
        return pulumi.get(self, "node_config")

    @node_config.setter
    def node_config(self, value: Optional[pulumi.Input['CngwGroupNodeConfigArgs']]):
        pulumi.set(self, "node_config", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value:- subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


class CngwGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 internet_config: Optional[pulumi.Input[pulumi.InputType['CngwGroupInternetConfigArgs']]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['CngwGroupNodeConfigArgs']]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tse cngw_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        cngw_gateway = tencentcloud.tse.CngwGateway("cngwGateway",
            description="terraform test1",
            enable_cls=True,
            engine_region="ap-guangzhou",
            feature_version="STANDARD",
            gateway_version="2.5.1",
            ingress_class_name="tse-nginx-ingress",
            internet_max_bandwidth_out=0,
            trade_type=0,
            type="kong",
            node_config=tencentcloud.tse.CngwGatewayNodeConfigArgs(
                number=2,
                specification="1c2g",
            ),
            vpc_config=tencentcloud.tse.CngwGatewayVpcConfigArgs(
                subnet_id=subnet.id,
                vpc_id=vpc.id,
            ),
            tags={
                "createdBy": "terraform",
            })
        cngw_group = tencentcloud.tse.CngwGroup("cngwGroup",
            description="terraform desc",
            gateway_id=cngw_gateway.id,
            subnet_id=subnet.id,
            node_config=tencentcloud.tse.CngwGroupNodeConfigArgs(
                number=2,
                specification="1c2g",
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: description information of group.
        :param pulumi.Input[str] gateway_id: gateway IDonly postpaid gateway supported.
        :param pulumi.Input[pulumi.InputType['CngwGroupInternetConfigArgs']] internet_config: internet configration.
        :param pulumi.Input[int] internet_max_bandwidth_out: public network outbound traffic bandwidth,[1,2048]Mbps.
        :param pulumi.Input[str] name: gateway group name.
        :param pulumi.Input[pulumi.InputType['CngwGroupNodeConfigArgs']] node_config: group node configration.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value:- subnet-ahde9me9.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CngwGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tse cngw_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-4"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        cngw_gateway = tencentcloud.tse.CngwGateway("cngwGateway",
            description="terraform test1",
            enable_cls=True,
            engine_region="ap-guangzhou",
            feature_version="STANDARD",
            gateway_version="2.5.1",
            ingress_class_name="tse-nginx-ingress",
            internet_max_bandwidth_out=0,
            trade_type=0,
            type="kong",
            node_config=tencentcloud.tse.CngwGatewayNodeConfigArgs(
                number=2,
                specification="1c2g",
            ),
            vpc_config=tencentcloud.tse.CngwGatewayVpcConfigArgs(
                subnet_id=subnet.id,
                vpc_id=vpc.id,
            ),
            tags={
                "createdBy": "terraform",
            })
        cngw_group = tencentcloud.tse.CngwGroup("cngwGroup",
            description="terraform desc",
            gateway_id=cngw_gateway.id,
            subnet_id=subnet.id,
            node_config=tencentcloud.tse.CngwGroupNodeConfigArgs(
                number=2,
                specification="1c2g",
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param CngwGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CngwGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 internet_config: Optional[pulumi.Input[pulumi.InputType['CngwGroupInternetConfigArgs']]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 node_config: Optional[pulumi.Input[pulumi.InputType['CngwGroupNodeConfigArgs']]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CngwGroupArgs.__new__(CngwGroupArgs)

            __props__.__dict__["description"] = description
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["internet_config"] = internet_config
            __props__.__dict__["internet_max_bandwidth_out"] = internet_max_bandwidth_out
            __props__.__dict__["name"] = name
            if node_config is None and not opts.urn:
                raise TypeError("Missing required property 'node_config'")
            __props__.__dict__["node_config"] = node_config
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["group_id"] = None
        super(CngwGroup, __self__).__init__(
            'tencentcloud:Tse/cngwGroup:CngwGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            internet_config: Optional[pulumi.Input[pulumi.InputType['CngwGroupInternetConfigArgs']]] = None,
            internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            node_config: Optional[pulumi.Input[pulumi.InputType['CngwGroupNodeConfigArgs']]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None) -> 'CngwGroup':
        """
        Get an existing CngwGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: description information of group.
        :param pulumi.Input[str] gateway_id: gateway IDonly postpaid gateway supported.
        :param pulumi.Input[str] group_id: gateway group id.
        :param pulumi.Input[pulumi.InputType['CngwGroupInternetConfigArgs']] internet_config: internet configration.
        :param pulumi.Input[int] internet_max_bandwidth_out: public network outbound traffic bandwidth,[1,2048]Mbps.
        :param pulumi.Input[str] name: gateway group name.
        :param pulumi.Input[pulumi.InputType['CngwGroupNodeConfigArgs']] node_config: group node configration.
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value:- subnet-ahde9me9.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CngwGroupState.__new__(_CngwGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["internet_config"] = internet_config
        __props__.__dict__["internet_max_bandwidth_out"] = internet_max_bandwidth_out
        __props__.__dict__["name"] = name
        __props__.__dict__["node_config"] = node_config
        __props__.__dict__["subnet_id"] = subnet_id
        return CngwGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        description information of group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        gateway IDonly postpaid gateway supported.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        gateway group id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="internetConfig")
    def internet_config(self) -> pulumi.Output[Optional['outputs.CngwGroupInternetConfig']]:
        """
        internet configration.
        """
        return pulumi.get(self, "internet_config")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> pulumi.Output[Optional[int]]:
        """
        public network outbound traffic bandwidth,[1,2048]Mbps.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        gateway group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfig")
    def node_config(self) -> pulumi.Output['outputs.CngwGroupNodeConfig']:
        """
        group node configration.
        """
        return pulumi.get(self, "node_config")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value:- subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

