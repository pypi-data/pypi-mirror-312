# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CngwCanaryRuleCanaryRule',
    'CngwCanaryRuleCanaryRuleBalancedServiceList',
    'CngwCanaryRuleCanaryRuleConditionList',
    'CngwGatewayInstancePort',
    'CngwGatewayInternetConfig',
    'CngwGatewayNodeConfig',
    'CngwGatewayVpcConfig',
    'CngwGroupInternetConfig',
    'CngwGroupNodeConfig',
    'CngwNetworkAccessControlAccessControl',
    'CngwRouteHeader',
    'CngwRouteRateLimitLimitDetail',
    'CngwRouteRateLimitLimitDetailExternalRedis',
    'CngwRouteRateLimitLimitDetailQpsThreshold',
    'CngwRouteRateLimitLimitDetailRateLimitResponse',
    'CngwRouteRateLimitLimitDetailRateLimitResponseHeader',
    'CngwServiceRateLimitLimitDetail',
    'CngwServiceRateLimitLimitDetailExternalRedis',
    'CngwServiceRateLimitLimitDetailQpsThreshold',
    'CngwServiceRateLimitLimitDetailRateLimitResponse',
    'CngwServiceRateLimitLimitDetailRateLimitResponseHeader',
    'CngwServiceUpstreamInfo',
    'CngwServiceUpstreamInfoTarget',
    'CngwStrategyConfig',
    'CngwStrategyConfigBehavior',
    'CngwStrategyConfigBehaviorScaleDown',
    'CngwStrategyConfigBehaviorScaleDownPolicy',
    'CngwStrategyConfigBehaviorScaleUp',
    'CngwStrategyConfigBehaviorScaleUpPolicy',
    'CngwStrategyConfigMetric',
    'CngwStrategyCronConfig',
    'CngwStrategyCronConfigParam',
    'InstanceEngineRegionInfo',
    'InstanceEngineRegionInfoVpcInfo',
    'GetAccessAddressEnvAddressInfoResult',
    'GetAccessAddressLimiterAddressInfoResult',
    'GetGatewayCanaryRulesResultResult',
    'GetGatewayCanaryRulesResultCanaryRuleListResult',
    'GetGatewayCanaryRulesResultCanaryRuleListBalancedServiceListResult',
    'GetGatewayCanaryRulesResultCanaryRuleListConditionListResult',
    'GetGatewayCertificatesFilterResult',
    'GetGatewayCertificatesResultResult',
    'GetGatewayCertificatesResultCertificatesListResult',
    'GetGatewayNodesNodeListResult',
    'GetGatewayRoutesResultResult',
    'GetGatewayRoutesResultRouteListResult',
    'GetGatewayRoutesResultRouteListHeaderResult',
    'GetGatewayServicesFilterResult',
    'GetGatewayServicesResultResult',
    'GetGatewayServicesResultServiceListResult',
    'GetGatewayServicesResultServiceListUpstreamInfoResult',
    'GetGatewayServicesResultServiceListUpstreamInfoTargetResult',
    'GetGatewaysFilterResult',
    'GetGatewaysResultResult',
    'GetGatewaysResultGatewayListResult',
    'GetGatewaysResultGatewayListInstancePortResult',
    'GetGatewaysResultGatewayListNodeConfigResult',
    'GetGatewaysResultGatewayListTagResult',
    'GetGatewaysResultGatewayListVpcConfigResult',
    'GetGroupsFilterResult',
    'GetGroupsResultResult',
    'GetGroupsResultGatewayGroupListResult',
    'GetGroupsResultGatewayGroupListBindingStrategyResult',
    'GetGroupsResultGatewayGroupListBindingStrategyConfigResult',
    'GetGroupsResultGatewayGroupListBindingStrategyConfigMetricResult',
    'GetGroupsResultGatewayGroupListBindingStrategyCronConfigResult',
    'GetGroupsResultGatewayGroupListBindingStrategyCronConfigParamResult',
    'GetGroupsResultGatewayGroupListNodeConfigResult',
    'GetNacosReplicasReplicaResult',
    'GetNacosServerInterfacesContentResult',
    'GetZookeeperReplicasReplicaResult',
    'GetZookeeperServerInterfacesContentResult',
]

@pulumi.output_type
class CngwCanaryRuleCanaryRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "balancedServiceLists":
            suggest = "balanced_service_lists"
        elif key == "conditionLists":
            suggest = "condition_lists"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwCanaryRuleCanaryRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwCanaryRuleCanaryRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwCanaryRuleCanaryRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 priority: int,
                 balanced_service_lists: Optional[Sequence['outputs.CngwCanaryRuleCanaryRuleBalancedServiceList']] = None,
                 condition_lists: Optional[Sequence['outputs.CngwCanaryRuleCanaryRuleConditionList']] = None,
                 service_id: Optional[str] = None,
                 service_name: Optional[str] = None):
        """
        :param bool enabled: the status of canary rule.
        :param int priority: priority. The value ranges from 0 to 100; the larger the value, the higher the priority; the priority cannot be repeated between different rules.
        :param Sequence['CngwCanaryRuleCanaryRuleBalancedServiceListArgs'] balanced_service_lists: service weight configuration.
        :param Sequence['CngwCanaryRuleCanaryRuleConditionListArgs'] condition_lists: parameter matching condition list.
        :param str service_id: service ID.
        :param str service_name: service name.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "priority", priority)
        if balanced_service_lists is not None:
            pulumi.set(__self__, "balanced_service_lists", balanced_service_lists)
        if condition_lists is not None:
            pulumi.set(__self__, "condition_lists", condition_lists)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        the status of canary rule.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority. The value ranges from 0 to 100; the larger the value, the higher the priority; the priority cannot be repeated between different rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="balancedServiceLists")
    def balanced_service_lists(self) -> Optional[Sequence['outputs.CngwCanaryRuleCanaryRuleBalancedServiceList']]:
        """
        service weight configuration.
        """
        return pulumi.get(self, "balanced_service_lists")

    @property
    @pulumi.getter(name="conditionLists")
    def condition_lists(self) -> Optional[Sequence['outputs.CngwCanaryRuleCanaryRuleConditionList']]:
        """
        parameter matching condition list.
        """
        return pulumi.get(self, "condition_lists")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[str]:
        """
        service ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        service name.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class CngwCanaryRuleCanaryRuleBalancedServiceList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceId":
            suggest = "service_id"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "upstreamName":
            suggest = "upstream_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwCanaryRuleCanaryRuleBalancedServiceList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwCanaryRuleCanaryRuleBalancedServiceList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwCanaryRuleCanaryRuleBalancedServiceList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 percent: Optional[float] = None,
                 service_id: Optional[str] = None,
                 service_name: Optional[str] = None,
                 upstream_name: Optional[str] = None):
        """
        :param float percent: percent, 10 is 10%, valid values:0 to 100.
        :param str service_id: service ID, required when used as an input parameter.
        :param str service_name: service name, meaningless when used as an input parameter.
        :param str upstream_name: upstream name, meaningless when used as an input parameter.
        """
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if upstream_name is not None:
            pulumi.set(__self__, "upstream_name", upstream_name)

    @property
    @pulumi.getter
    def percent(self) -> Optional[float]:
        """
        percent, 10 is 10%, valid values:0 to 100.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[str]:
        """
        service ID, required when used as an input parameter.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        service name, meaningless when used as an input parameter.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="upstreamName")
    def upstream_name(self) -> Optional[str]:
        """
        upstream name, meaningless when used as an input parameter.
        """
        return pulumi.get(self, "upstream_name")


@pulumi.output_type
class CngwCanaryRuleCanaryRuleConditionList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "globalConfigId":
            suggest = "global_config_id"
        elif key == "globalConfigName":
            suggest = "global_config_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwCanaryRuleCanaryRuleConditionList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwCanaryRuleCanaryRuleConditionList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwCanaryRuleCanaryRuleConditionList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 delimiter: Optional[str] = None,
                 global_config_id: Optional[str] = None,
                 global_config_name: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str type: type.Reference value:`path`,`method`,`query`,`header`,`cookie`,`body`,`system`.
        :param str delimiter: delimiter. valid when operator is in or not in, reference value:`,`, `;`,`\\n`.
        :param str global_config_id: global configuration ID.
        :param str global_config_name: global configuration name.
        :param str key: parameter name.
        :param str operator: operator.Reference value:`le`,`eq`,`lt`,`ne`,`ge`,`gt`,`regex`,`exists`,`in`,`not in`,`prefix`,`exact`,`regex`.
        :param str value: parameter value.
        """
        pulumi.set(__self__, "type", type)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if global_config_id is not None:
            pulumi.set(__self__, "global_config_id", global_config_id)
        if global_config_name is not None:
            pulumi.set(__self__, "global_config_name", global_config_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type.Reference value:`path`,`method`,`query`,`header`,`cookie`,`body`,`system`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        """
        delimiter. valid when operator is in or not in, reference value:`,`, `;`,`\\n`.
        """
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="globalConfigId")
    def global_config_id(self) -> Optional[str]:
        """
        global configuration ID.
        """
        return pulumi.get(self, "global_config_id")

    @property
    @pulumi.getter(name="globalConfigName")
    def global_config_name(self) -> Optional[str]:
        """
        global configuration name.
        """
        return pulumi.get(self, "global_config_name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        parameter name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        operator.Reference value:`le`,`eq`,`lt`,`ne`,`ge`,`gt`,`regex`,`exists`,`in`,`not in`,`prefix`,`exact`,`regex`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CngwGatewayInstancePort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpPort":
            suggest = "http_port"
        elif key == "httpsPort":
            suggest = "https_port"
        elif key == "tcpPort":
            suggest = "tcp_port"
        elif key == "udpPort":
            suggest = "udp_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwGatewayInstancePort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwGatewayInstancePort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwGatewayInstancePort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_port: Optional[str] = None,
                 https_port: Optional[str] = None,
                 tcp_port: Optional[str] = None,
                 udp_port: Optional[str] = None):
        """
        :param str http_port: Http port range.
        :param str https_port: Https port range.
        :param str tcp_port: Tcp port range.
        :param str udp_port: Udp port range.
        """
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if tcp_port is not None:
            pulumi.set(__self__, "tcp_port", tcp_port)
        if udp_port is not None:
            pulumi.set(__self__, "udp_port", udp_port)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[str]:
        """
        Http port range.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[str]:
        """
        Https port range.
        """
        return pulumi.get(self, "https_port")

    @property
    @pulumi.getter(name="tcpPort")
    def tcp_port(self) -> Optional[str]:
        """
        Tcp port range.
        """
        return pulumi.get(self, "tcp_port")

    @property
    @pulumi.getter(name="udpPort")
    def udp_port(self) -> Optional[str]:
        """
        Udp port range.
        """
        return pulumi.get(self, "udp_port")


@pulumi.output_type
class CngwGatewayInternetConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internetAddressVersion":
            suggest = "internet_address_version"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "internetPayMode":
            suggest = "internet_pay_mode"
        elif key == "masterZoneId":
            suggest = "master_zone_id"
        elif key == "multiZoneFlag":
            suggest = "multi_zone_flag"
        elif key == "slaType":
            suggest = "sla_type"
        elif key == "slaveZoneId":
            suggest = "slave_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwGatewayInternetConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwGatewayInternetConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwGatewayInternetConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 internet_address_version: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 internet_pay_mode: Optional[str] = None,
                 master_zone_id: Optional[str] = None,
                 multi_zone_flag: Optional[bool] = None,
                 sla_type: Optional[str] = None,
                 slave_zone_id: Optional[str] = None):
        """
        :param str description: description of clb.
        :param str internet_address_version: internet type. Reference value: `IPV4`(default value), `IPV6`.
        :param int internet_max_bandwidth_out: public network bandwidth.
        :param str internet_pay_mode: trade type of internet. Reference value: `BANDWIDTH`, `TRAFFIC`(default value).
        :param str master_zone_id: primary availability zone.
        :param bool multi_zone_flag: Whether load balancing has multiple availability zones.
        :param str sla_type: specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        :param str slave_zone_id: alternate availability zone.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internet_address_version is not None:
            pulumi.set(__self__, "internet_address_version", internet_address_version)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if internet_pay_mode is not None:
            pulumi.set(__self__, "internet_pay_mode", internet_pay_mode)
        if master_zone_id is not None:
            pulumi.set(__self__, "master_zone_id", master_zone_id)
        if multi_zone_flag is not None:
            pulumi.set(__self__, "multi_zone_flag", multi_zone_flag)
        if sla_type is not None:
            pulumi.set(__self__, "sla_type", sla_type)
        if slave_zone_id is not None:
            pulumi.set(__self__, "slave_zone_id", slave_zone_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of clb.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="internetAddressVersion")
    def internet_address_version(self) -> Optional[str]:
        """
        internet type. Reference value: `IPV4`(default value), `IPV6`.
        """
        return pulumi.get(self, "internet_address_version")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        """
        public network bandwidth.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="internetPayMode")
    def internet_pay_mode(self) -> Optional[str]:
        """
        trade type of internet. Reference value: `BANDWIDTH`, `TRAFFIC`(default value).
        """
        return pulumi.get(self, "internet_pay_mode")

    @property
    @pulumi.getter(name="masterZoneId")
    def master_zone_id(self) -> Optional[str]:
        """
        primary availability zone.
        """
        return pulumi.get(self, "master_zone_id")

    @property
    @pulumi.getter(name="multiZoneFlag")
    def multi_zone_flag(self) -> Optional[bool]:
        """
        Whether load balancing has multiple availability zones.
        """
        return pulumi.get(self, "multi_zone_flag")

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> Optional[str]:
        """
        specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        """
        return pulumi.get(self, "sla_type")

    @property
    @pulumi.getter(name="slaveZoneId")
    def slave_zone_id(self) -> Optional[str]:
        """
        alternate availability zone.
        """
        return pulumi.get(self, "slave_zone_id")


@pulumi.output_type
class CngwGatewayNodeConfig(dict):
    def __init__(__self__, *,
                 number: int,
                 specification: str):
        """
        :param int number: node number, 2-50.
        :param str specification: specification, 1c2g|2c4g|4c8g|8c16g.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "specification", specification)

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        node number, 2-50.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def specification(self) -> str:
        """
        specification, 1c2g|2c4g|4c8g|8c16g.
        """
        return pulumi.get(self, "specification")


@pulumi.output_type
class CngwGatewayVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwGatewayVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwGatewayVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwGatewayVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        :param str vpc_id: VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class CngwGroupInternetConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "internetAddressVersion":
            suggest = "internet_address_version"
        elif key == "internetMaxBandwidthOut":
            suggest = "internet_max_bandwidth_out"
        elif key == "internetPayMode":
            suggest = "internet_pay_mode"
        elif key == "masterZoneId":
            suggest = "master_zone_id"
        elif key == "multiZoneFlag":
            suggest = "multi_zone_flag"
        elif key == "slaType":
            suggest = "sla_type"
        elif key == "slaveZoneId":
            suggest = "slave_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwGroupInternetConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwGroupInternetConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwGroupInternetConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 internet_address_version: Optional[str] = None,
                 internet_max_bandwidth_out: Optional[int] = None,
                 internet_pay_mode: Optional[str] = None,
                 master_zone_id: Optional[str] = None,
                 multi_zone_flag: Optional[bool] = None,
                 sla_type: Optional[str] = None,
                 slave_zone_id: Optional[str] = None):
        """
        :param str description: description of clb.
        :param str internet_address_version: internet type. Reference value:- IPV4 (default value)- IPV6.
        :param int internet_max_bandwidth_out: public network bandwidth.
        :param str internet_pay_mode: trade type of internet. Reference value:- BANDWIDTH- TRAFFIC (default value).
        :param str master_zone_id: primary availability zone.
        :param bool multi_zone_flag: Whether load balancing has multiple availability zones.
        :param str sla_type: specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        :param str slave_zone_id: alternate availability zone.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internet_address_version is not None:
            pulumi.set(__self__, "internet_address_version", internet_address_version)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if internet_pay_mode is not None:
            pulumi.set(__self__, "internet_pay_mode", internet_pay_mode)
        if master_zone_id is not None:
            pulumi.set(__self__, "master_zone_id", master_zone_id)
        if multi_zone_flag is not None:
            pulumi.set(__self__, "multi_zone_flag", multi_zone_flag)
        if sla_type is not None:
            pulumi.set(__self__, "sla_type", sla_type)
        if slave_zone_id is not None:
            pulumi.set(__self__, "slave_zone_id", slave_zone_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        description of clb.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="internetAddressVersion")
    def internet_address_version(self) -> Optional[str]:
        """
        internet type. Reference value:- IPV4 (default value)- IPV6.
        """
        return pulumi.get(self, "internet_address_version")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[int]:
        """
        public network bandwidth.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="internetPayMode")
    def internet_pay_mode(self) -> Optional[str]:
        """
        trade type of internet. Reference value:- BANDWIDTH- TRAFFIC (default value).
        """
        return pulumi.get(self, "internet_pay_mode")

    @property
    @pulumi.getter(name="masterZoneId")
    def master_zone_id(self) -> Optional[str]:
        """
        primary availability zone.
        """
        return pulumi.get(self, "master_zone_id")

    @property
    @pulumi.getter(name="multiZoneFlag")
    def multi_zone_flag(self) -> Optional[bool]:
        """
        Whether load balancing has multiple availability zones.
        """
        return pulumi.get(self, "multi_zone_flag")

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> Optional[str]:
        """
        specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        """
        return pulumi.get(self, "sla_type")

    @property
    @pulumi.getter(name="slaveZoneId")
    def slave_zone_id(self) -> Optional[str]:
        """
        alternate availability zone.
        """
        return pulumi.get(self, "slave_zone_id")


@pulumi.output_type
class CngwGroupNodeConfig(dict):
    def __init__(__self__, *,
                 number: int,
                 specification: str):
        """
        :param int number: group node number, 2-50.
        :param str specification: group specification, 1c2g|2c4g|4c8g|8c16g.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "specification", specification)

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        group node number, 2-50.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def specification(self) -> str:
        """
        group specification, 1c2g|2c4g|4c8g|8c16g.
        """
        return pulumi.get(self, "specification")


@pulumi.output_type
class CngwNetworkAccessControlAccessControl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrBlackLists":
            suggest = "cidr_black_lists"
        elif key == "cidrWhiteLists":
            suggest = "cidr_white_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwNetworkAccessControlAccessControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwNetworkAccessControlAccessControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwNetworkAccessControlAccessControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_black_lists: Optional[Sequence[str]] = None,
                 cidr_white_lists: Optional[Sequence[str]] = None,
                 mode: Optional[str] = None):
        """
        :param Sequence[str] cidr_black_lists: Black list.
        :param Sequence[str] cidr_white_lists: White list.
        :param str mode: Access mode: `Whitelist`, `Blacklist`.
        """
        if cidr_black_lists is not None:
            pulumi.set(__self__, "cidr_black_lists", cidr_black_lists)
        if cidr_white_lists is not None:
            pulumi.set(__self__, "cidr_white_lists", cidr_white_lists)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="cidrBlackLists")
    def cidr_black_lists(self) -> Optional[Sequence[str]]:
        """
        Black list.
        """
        return pulumi.get(self, "cidr_black_lists")

    @property
    @pulumi.getter(name="cidrWhiteLists")
    def cidr_white_lists(self) -> Optional[Sequence[str]]:
        """
        White list.
        """
        return pulumi.get(self, "cidr_white_lists")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Access mode: `Whitelist`, `Blacklist`.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class CngwRouteHeader(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: key of header.
        :param str value: value of header.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key of header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CngwRouteRateLimitLimitDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hideClientHeaders":
            suggest = "hide_client_headers"
        elif key == "isDelay":
            suggest = "is_delay"
        elif key == "limitBy":
            suggest = "limit_by"
        elif key == "qpsThresholds":
            suggest = "qps_thresholds"
        elif key == "responseType":
            suggest = "response_type"
        elif key == "externalRedis":
            suggest = "external_redis"
        elif key == "lineUpTime":
            suggest = "line_up_time"
        elif key == "rateLimitResponse":
            suggest = "rate_limit_response"
        elif key == "rateLimitResponseUrl":
            suggest = "rate_limit_response_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwRouteRateLimitLimitDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwRouteRateLimitLimitDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwRouteRateLimitLimitDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 hide_client_headers: bool,
                 is_delay: bool,
                 limit_by: str,
                 qps_thresholds: Sequence['outputs.CngwRouteRateLimitLimitDetailQpsThreshold'],
                 response_type: str,
                 external_redis: Optional['outputs.CngwRouteRateLimitLimitDetailExternalRedis'] = None,
                 header: Optional[str] = None,
                 line_up_time: Optional[int] = None,
                 path: Optional[str] = None,
                 policy: Optional[str] = None,
                 rate_limit_response: Optional['outputs.CngwRouteRateLimitLimitDetailRateLimitResponse'] = None,
                 rate_limit_response_url: Optional[str] = None):
        """
        :param bool enabled: status of service rate limit.
        :param bool hide_client_headers: whether to hide the headers of client.
        :param bool is_delay: whether to enable request queuing.
        :param str limit_by: basis for service rate limit.Reference value:`ip`,`service`,`consumer`,`credential`,`path`,`header`.
        :param Sequence['CngwRouteRateLimitLimitDetailQpsThresholdArgs'] qps_thresholds: qps threshold.
        :param str response_type: response strategy.Reference value:`url`: forward request according to url,`text`: response configuration,`default`: return directly.
        :param 'CngwRouteRateLimitLimitDetailExternalRedisArgs' external_redis: external redis information, maybe null.
        :param str header: request headers that require rate limit.
        :param int line_up_time: queue time.
        :param str path: request paths that require rate limit.
        :param str policy: counter policy.Reference value:`local`,`redis`,`external_redis`.
        :param 'CngwRouteRateLimitLimitDetailRateLimitResponseArgs' rate_limit_response: response configuration, the response strategy is text, maybe null.
        :param str rate_limit_response_url: request forwarding address, maybe null.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hide_client_headers", hide_client_headers)
        pulumi.set(__self__, "is_delay", is_delay)
        pulumi.set(__self__, "limit_by", limit_by)
        pulumi.set(__self__, "qps_thresholds", qps_thresholds)
        pulumi.set(__self__, "response_type", response_type)
        if external_redis is not None:
            pulumi.set(__self__, "external_redis", external_redis)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if line_up_time is not None:
            pulumi.set(__self__, "line_up_time", line_up_time)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if rate_limit_response is not None:
            pulumi.set(__self__, "rate_limit_response", rate_limit_response)
        if rate_limit_response_url is not None:
            pulumi.set(__self__, "rate_limit_response_url", rate_limit_response_url)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        status of service rate limit.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hideClientHeaders")
    def hide_client_headers(self) -> bool:
        """
        whether to hide the headers of client.
        """
        return pulumi.get(self, "hide_client_headers")

    @property
    @pulumi.getter(name="isDelay")
    def is_delay(self) -> bool:
        """
        whether to enable request queuing.
        """
        return pulumi.get(self, "is_delay")

    @property
    @pulumi.getter(name="limitBy")
    def limit_by(self) -> str:
        """
        basis for service rate limit.Reference value:`ip`,`service`,`consumer`,`credential`,`path`,`header`.
        """
        return pulumi.get(self, "limit_by")

    @property
    @pulumi.getter(name="qpsThresholds")
    def qps_thresholds(self) -> Sequence['outputs.CngwRouteRateLimitLimitDetailQpsThreshold']:
        """
        qps threshold.
        """
        return pulumi.get(self, "qps_thresholds")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> str:
        """
        response strategy.Reference value:`url`: forward request according to url,`text`: response configuration,`default`: return directly.
        """
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter(name="externalRedis")
    def external_redis(self) -> Optional['outputs.CngwRouteRateLimitLimitDetailExternalRedis']:
        """
        external redis information, maybe null.
        """
        return pulumi.get(self, "external_redis")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        request headers that require rate limit.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="lineUpTime")
    def line_up_time(self) -> Optional[int]:
        """
        queue time.
        """
        return pulumi.get(self, "line_up_time")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        request paths that require rate limit.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        counter policy.Reference value:`local`,`redis`,`external_redis`.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="rateLimitResponse")
    def rate_limit_response(self) -> Optional['outputs.CngwRouteRateLimitLimitDetailRateLimitResponse']:
        """
        response configuration, the response strategy is text, maybe null.
        """
        return pulumi.get(self, "rate_limit_response")

    @property
    @pulumi.getter(name="rateLimitResponseUrl")
    def rate_limit_response_url(self) -> Optional[str]:
        """
        request forwarding address, maybe null.
        """
        return pulumi.get(self, "rate_limit_response_url")


@pulumi.output_type
class CngwRouteRateLimitLimitDetailExternalRedis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redisHost":
            suggest = "redis_host"
        elif key == "redisPassword":
            suggest = "redis_password"
        elif key == "redisPort":
            suggest = "redis_port"
        elif key == "redisTimeout":
            suggest = "redis_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwRouteRateLimitLimitDetailExternalRedis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwRouteRateLimitLimitDetailExternalRedis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwRouteRateLimitLimitDetailExternalRedis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redis_host: str,
                 redis_password: str,
                 redis_port: int,
                 redis_timeout: int):
        """
        :param str redis_host: redis ip, maybe null.
        :param str redis_password: redis password, maybe null.
        :param int redis_port: redis port, maybe null.
        :param int redis_timeout: redis timeout, unit: `ms`, maybe null.
        """
        pulumi.set(__self__, "redis_host", redis_host)
        pulumi.set(__self__, "redis_password", redis_password)
        pulumi.set(__self__, "redis_port", redis_port)
        pulumi.set(__self__, "redis_timeout", redis_timeout)

    @property
    @pulumi.getter(name="redisHost")
    def redis_host(self) -> str:
        """
        redis ip, maybe null.
        """
        return pulumi.get(self, "redis_host")

    @property
    @pulumi.getter(name="redisPassword")
    def redis_password(self) -> str:
        """
        redis password, maybe null.
        """
        return pulumi.get(self, "redis_password")

    @property
    @pulumi.getter(name="redisPort")
    def redis_port(self) -> int:
        """
        redis port, maybe null.
        """
        return pulumi.get(self, "redis_port")

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> int:
        """
        redis timeout, unit: `ms`, maybe null.
        """
        return pulumi.get(self, "redis_timeout")


@pulumi.output_type
class CngwRouteRateLimitLimitDetailQpsThreshold(dict):
    def __init__(__self__, *,
                 max: int,
                 unit: str):
        """
        :param int max: the max threshold.
        :param str unit: qps threshold unit.Reference value:`second`,`minute`,`hour`,`day`,`month`,`year`.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        the max threshold.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        qps threshold unit.Reference value:`second`,`minute`,`hour`,`day`,`month`,`year`.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class CngwRouteRateLimitLimitDetailRateLimitResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpStatus":
            suggest = "http_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwRouteRateLimitLimitDetailRateLimitResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwRouteRateLimitLimitDetailRateLimitResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwRouteRateLimitLimitDetailRateLimitResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 headers: Optional[Sequence['outputs.CngwRouteRateLimitLimitDetailRateLimitResponseHeader']] = None,
                 http_status: Optional[int] = None):
        """
        :param str body: custom response body, maybe bull.
        :param Sequence['CngwRouteRateLimitLimitDetailRateLimitResponseHeaderArgs'] headers: headrs.
        :param int http_status: http status code.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_status is not None:
            pulumi.set(__self__, "http_status", http_status)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        custom response body, maybe bull.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.CngwRouteRateLimitLimitDetailRateLimitResponseHeader']]:
        """
        headrs.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[int]:
        """
        http status code.
        """
        return pulumi.get(self, "http_status")


@pulumi.output_type
class CngwRouteRateLimitLimitDetailRateLimitResponseHeader(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: key of header.
        :param str value: value of header.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key of header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CngwServiceRateLimitLimitDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hideClientHeaders":
            suggest = "hide_client_headers"
        elif key == "isDelay":
            suggest = "is_delay"
        elif key == "limitBy":
            suggest = "limit_by"
        elif key == "qpsThresholds":
            suggest = "qps_thresholds"
        elif key == "responseType":
            suggest = "response_type"
        elif key == "externalRedis":
            suggest = "external_redis"
        elif key == "lineUpTime":
            suggest = "line_up_time"
        elif key == "rateLimitResponse":
            suggest = "rate_limit_response"
        elif key == "rateLimitResponseUrl":
            suggest = "rate_limit_response_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwServiceRateLimitLimitDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwServiceRateLimitLimitDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwServiceRateLimitLimitDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 hide_client_headers: bool,
                 is_delay: bool,
                 limit_by: str,
                 qps_thresholds: Sequence['outputs.CngwServiceRateLimitLimitDetailQpsThreshold'],
                 response_type: str,
                 external_redis: Optional['outputs.CngwServiceRateLimitLimitDetailExternalRedis'] = None,
                 header: Optional[str] = None,
                 line_up_time: Optional[int] = None,
                 path: Optional[str] = None,
                 policy: Optional[str] = None,
                 rate_limit_response: Optional['outputs.CngwServiceRateLimitLimitDetailRateLimitResponse'] = None,
                 rate_limit_response_url: Optional[str] = None):
        """
        :param bool enabled: status of service rate limit.
        :param bool hide_client_headers: whether to hide the headers of client.
        :param bool is_delay: whether to enable request queuing.
        :param str limit_by: basis for service rate limit.Reference value: `ip`, `service`, `consumer`, `credential`, `path`, `header`.
        :param Sequence['CngwServiceRateLimitLimitDetailQpsThresholdArgs'] qps_thresholds: qps threshold.
        :param str response_type: response strategy.Reference value: `url`: forward request according to url, `text`: response configuration, `default`: return directly.
        :param 'CngwServiceRateLimitLimitDetailExternalRedisArgs' external_redis: external redis information, maybe null.
        :param str header: request headers that require rate limit.
        :param int line_up_time: queue time.
        :param str path: request paths that require rate limit.
        :param str policy: counter policy.Reference value: `local`, `redis`, `external_redis`.
        :param 'CngwServiceRateLimitLimitDetailRateLimitResponseArgs' rate_limit_response: response configuration, the response strategy is text, maybe null.
        :param str rate_limit_response_url: request forwarding address, maybe null.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hide_client_headers", hide_client_headers)
        pulumi.set(__self__, "is_delay", is_delay)
        pulumi.set(__self__, "limit_by", limit_by)
        pulumi.set(__self__, "qps_thresholds", qps_thresholds)
        pulumi.set(__self__, "response_type", response_type)
        if external_redis is not None:
            pulumi.set(__self__, "external_redis", external_redis)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if line_up_time is not None:
            pulumi.set(__self__, "line_up_time", line_up_time)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if rate_limit_response is not None:
            pulumi.set(__self__, "rate_limit_response", rate_limit_response)
        if rate_limit_response_url is not None:
            pulumi.set(__self__, "rate_limit_response_url", rate_limit_response_url)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        status of service rate limit.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="hideClientHeaders")
    def hide_client_headers(self) -> bool:
        """
        whether to hide the headers of client.
        """
        return pulumi.get(self, "hide_client_headers")

    @property
    @pulumi.getter(name="isDelay")
    def is_delay(self) -> bool:
        """
        whether to enable request queuing.
        """
        return pulumi.get(self, "is_delay")

    @property
    @pulumi.getter(name="limitBy")
    def limit_by(self) -> str:
        """
        basis for service rate limit.Reference value: `ip`, `service`, `consumer`, `credential`, `path`, `header`.
        """
        return pulumi.get(self, "limit_by")

    @property
    @pulumi.getter(name="qpsThresholds")
    def qps_thresholds(self) -> Sequence['outputs.CngwServiceRateLimitLimitDetailQpsThreshold']:
        """
        qps threshold.
        """
        return pulumi.get(self, "qps_thresholds")

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> str:
        """
        response strategy.Reference value: `url`: forward request according to url, `text`: response configuration, `default`: return directly.
        """
        return pulumi.get(self, "response_type")

    @property
    @pulumi.getter(name="externalRedis")
    def external_redis(self) -> Optional['outputs.CngwServiceRateLimitLimitDetailExternalRedis']:
        """
        external redis information, maybe null.
        """
        return pulumi.get(self, "external_redis")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        """
        request headers that require rate limit.
        """
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="lineUpTime")
    def line_up_time(self) -> Optional[int]:
        """
        queue time.
        """
        return pulumi.get(self, "line_up_time")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        request paths that require rate limit.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        counter policy.Reference value: `local`, `redis`, `external_redis`.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="rateLimitResponse")
    def rate_limit_response(self) -> Optional['outputs.CngwServiceRateLimitLimitDetailRateLimitResponse']:
        """
        response configuration, the response strategy is text, maybe null.
        """
        return pulumi.get(self, "rate_limit_response")

    @property
    @pulumi.getter(name="rateLimitResponseUrl")
    def rate_limit_response_url(self) -> Optional[str]:
        """
        request forwarding address, maybe null.
        """
        return pulumi.get(self, "rate_limit_response_url")


@pulumi.output_type
class CngwServiceRateLimitLimitDetailExternalRedis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "redisHost":
            suggest = "redis_host"
        elif key == "redisPassword":
            suggest = "redis_password"
        elif key == "redisPort":
            suggest = "redis_port"
        elif key == "redisTimeout":
            suggest = "redis_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwServiceRateLimitLimitDetailExternalRedis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwServiceRateLimitLimitDetailExternalRedis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwServiceRateLimitLimitDetailExternalRedis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 redis_host: str,
                 redis_password: str,
                 redis_port: int,
                 redis_timeout: int):
        """
        :param str redis_host: redis ip, maybe null.
        :param str redis_password: redis password, maybe null.
        :param int redis_port: redis port, maybe null.
        :param int redis_timeout: redis timeout, unit: `ms`, maybe null.
        """
        pulumi.set(__self__, "redis_host", redis_host)
        pulumi.set(__self__, "redis_password", redis_password)
        pulumi.set(__self__, "redis_port", redis_port)
        pulumi.set(__self__, "redis_timeout", redis_timeout)

    @property
    @pulumi.getter(name="redisHost")
    def redis_host(self) -> str:
        """
        redis ip, maybe null.
        """
        return pulumi.get(self, "redis_host")

    @property
    @pulumi.getter(name="redisPassword")
    def redis_password(self) -> str:
        """
        redis password, maybe null.
        """
        return pulumi.get(self, "redis_password")

    @property
    @pulumi.getter(name="redisPort")
    def redis_port(self) -> int:
        """
        redis port, maybe null.
        """
        return pulumi.get(self, "redis_port")

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> int:
        """
        redis timeout, unit: `ms`, maybe null.
        """
        return pulumi.get(self, "redis_timeout")


@pulumi.output_type
class CngwServiceRateLimitLimitDetailQpsThreshold(dict):
    def __init__(__self__, *,
                 max: int,
                 unit: str):
        """
        :param int max: the max threshold.
        :param str unit: qps threshold unit.Reference value:`second`, `minute`, `hour`, `day`, `month`, `year`.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        the max threshold.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def unit(self) -> str:
        """
        qps threshold unit.Reference value:`second`, `minute`, `hour`, `day`, `month`, `year`.
        """
        return pulumi.get(self, "unit")


@pulumi.output_type
class CngwServiceRateLimitLimitDetailRateLimitResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpStatus":
            suggest = "http_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwServiceRateLimitLimitDetailRateLimitResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwServiceRateLimitLimitDetailRateLimitResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwServiceRateLimitLimitDetailRateLimitResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 headers: Optional[Sequence['outputs.CngwServiceRateLimitLimitDetailRateLimitResponseHeader']] = None,
                 http_status: Optional[int] = None):
        """
        :param str body: custom response body, maybe bull.
        :param Sequence['CngwServiceRateLimitLimitDetailRateLimitResponseHeaderArgs'] headers: headrs.
        :param int http_status: http status code.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_status is not None:
            pulumi.set(__self__, "http_status", http_status)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        custom response body, maybe bull.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.CngwServiceRateLimitLimitDetailRateLimitResponseHeader']]:
        """
        headrs.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[int]:
        """
        http status code.
        """
        return pulumi.get(self, "http_status")


@pulumi.output_type
class CngwServiceRateLimitLimitDetailRateLimitResponseHeader(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: key of header.
        :param str value: value of header.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        key of header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        value of header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CngwServiceUpstreamInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoScalingCvmPort":
            suggest = "auto_scaling_cvm_port"
        elif key == "autoScalingGroupId":
            suggest = "auto_scaling_group_id"
        elif key == "autoScalingHookStatus":
            suggest = "auto_scaling_hook_status"
        elif key == "autoScalingTatCmdStatus":
            suggest = "auto_scaling_tat_cmd_status"
        elif key == "realSourceType":
            suggest = "real_source_type"
        elif key == "scfLambdaName":
            suggest = "scf_lambda_name"
        elif key == "scfLambdaQualifier":
            suggest = "scf_lambda_qualifier"
        elif key == "scfNamespace":
            suggest = "scf_namespace"
        elif key == "scfType":
            suggest = "scf_type"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "slowStart":
            suggest = "slow_start"
        elif key == "sourceId":
            suggest = "source_id"
        elif key == "sourceName":
            suggest = "source_name"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwServiceUpstreamInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwServiceUpstreamInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwServiceUpstreamInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: Optional[str] = None,
                 auto_scaling_cvm_port: Optional[int] = None,
                 auto_scaling_group_id: Optional[str] = None,
                 auto_scaling_hook_status: Optional[str] = None,
                 auto_scaling_tat_cmd_status: Optional[str] = None,
                 host: Optional[str] = None,
                 namespace: Optional[str] = None,
                 port: Optional[int] = None,
                 real_source_type: Optional[str] = None,
                 scf_lambda_name: Optional[str] = None,
                 scf_lambda_qualifier: Optional[str] = None,
                 scf_namespace: Optional[str] = None,
                 scf_type: Optional[str] = None,
                 service_name: Optional[str] = None,
                 slow_start: Optional[int] = None,
                 source_id: Optional[str] = None,
                 source_name: Optional[str] = None,
                 source_type: Optional[str] = None,
                 targets: Optional[Sequence['outputs.CngwServiceUpstreamInfoTarget']] = None):
        """
        :param str algorithm: load balance algorithm,default: `round-robin`, `least-connections` and `consisten_hashing` also support.
        :param int auto_scaling_cvm_port: auto scaling group port of cvm.
        :param str auto_scaling_group_id: auto scaling group ID of cvm.
        :param str auto_scaling_hook_status: hook status in auto scaling group of cvm.
        :param str auto_scaling_tat_cmd_status: tat cmd status in auto scaling group of cvm.
        :param str host: an IP address or domain name.
        :param str namespace: namespace.
        :param int port: backend service port.valid values: `1` to `65535`.
        :param str real_source_type: exact source service type.
        :param str scf_lambda_name: scf lambda name.
        :param str scf_lambda_qualifier: scf lambda version.
        :param str scf_namespace: scf lambda namespace.
        :param str scf_type: scf lambda type.
        :param str service_name: the name of the service in registry or kubernetes.
        :param int slow_start: slow start time, unit: `second`, when it is enabled, weight of the node is increased from 1 to the target value gradually.
        :param str source_id: service source ID.
        :param str source_name: the name of source service.
        :param str source_type: source service type.
        :param Sequence['CngwServiceUpstreamInfoTargetArgs'] targets: provided when service type is IPList.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if auto_scaling_cvm_port is not None:
            pulumi.set(__self__, "auto_scaling_cvm_port", auto_scaling_cvm_port)
        if auto_scaling_group_id is not None:
            pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        if auto_scaling_hook_status is not None:
            pulumi.set(__self__, "auto_scaling_hook_status", auto_scaling_hook_status)
        if auto_scaling_tat_cmd_status is not None:
            pulumi.set(__self__, "auto_scaling_tat_cmd_status", auto_scaling_tat_cmd_status)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if real_source_type is not None:
            pulumi.set(__self__, "real_source_type", real_source_type)
        if scf_lambda_name is not None:
            pulumi.set(__self__, "scf_lambda_name", scf_lambda_name)
        if scf_lambda_qualifier is not None:
            pulumi.set(__self__, "scf_lambda_qualifier", scf_lambda_qualifier)
        if scf_namespace is not None:
            pulumi.set(__self__, "scf_namespace", scf_namespace)
        if scf_type is not None:
            pulumi.set(__self__, "scf_type", scf_type)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if slow_start is not None:
            pulumi.set(__self__, "slow_start", slow_start)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[str]:
        """
        load balance algorithm,default: `round-robin`, `least-connections` and `consisten_hashing` also support.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="autoScalingCvmPort")
    def auto_scaling_cvm_port(self) -> Optional[int]:
        """
        auto scaling group port of cvm.
        """
        return pulumi.get(self, "auto_scaling_cvm_port")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> Optional[str]:
        """
        auto scaling group ID of cvm.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter(name="autoScalingHookStatus")
    def auto_scaling_hook_status(self) -> Optional[str]:
        """
        hook status in auto scaling group of cvm.
        """
        return pulumi.get(self, "auto_scaling_hook_status")

    @property
    @pulumi.getter(name="autoScalingTatCmdStatus")
    def auto_scaling_tat_cmd_status(self) -> Optional[str]:
        """
        tat cmd status in auto scaling group of cvm.
        """
        return pulumi.get(self, "auto_scaling_tat_cmd_status")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        an IP address or domain name.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        backend service port.valid values: `1` to `65535`.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="realSourceType")
    def real_source_type(self) -> Optional[str]:
        """
        exact source service type.
        """
        return pulumi.get(self, "real_source_type")

    @property
    @pulumi.getter(name="scfLambdaName")
    def scf_lambda_name(self) -> Optional[str]:
        """
        scf lambda name.
        """
        return pulumi.get(self, "scf_lambda_name")

    @property
    @pulumi.getter(name="scfLambdaQualifier")
    def scf_lambda_qualifier(self) -> Optional[str]:
        """
        scf lambda version.
        """
        return pulumi.get(self, "scf_lambda_qualifier")

    @property
    @pulumi.getter(name="scfNamespace")
    def scf_namespace(self) -> Optional[str]:
        """
        scf lambda namespace.
        """
        return pulumi.get(self, "scf_namespace")

    @property
    @pulumi.getter(name="scfType")
    def scf_type(self) -> Optional[str]:
        """
        scf lambda type.
        """
        return pulumi.get(self, "scf_type")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        the name of the service in registry or kubernetes.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="slowStart")
    def slow_start(self) -> Optional[int]:
        """
        slow start time, unit: `second`, when it is enabled, weight of the node is increased from 1 to the target value gradually.
        """
        return pulumi.get(self, "slow_start")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        """
        service source ID.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[str]:
        """
        the name of source service.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        """
        source service type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.CngwServiceUpstreamInfoTarget']]:
        """
        provided when service type is IPList.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class CngwServiceUpstreamInfoTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdTime":
            suggest = "created_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwServiceUpstreamInfoTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwServiceUpstreamInfoTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwServiceUpstreamInfoTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 port: int,
                 weight: int,
                 created_time: Optional[str] = None,
                 health: Optional[str] = None,
                 source: Optional[str] = None):
        """
        :param str host: host.
        :param int port: port.
        :param int weight: weight.
        :param str created_time: created time.
        :param str health: health.
        :param str source: source of target.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight.
        """
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[str]:
        """
        created time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        """
        health.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        """
        source of target.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class CngwStrategyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createTime":
            suggest = "create_time"
        elif key == "maxReplicas":
            suggest = "max_replicas"
        elif key == "modifyTime":
            suggest = "modify_time"
        elif key == "strategyId":
            suggest = "strategy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior: Optional['outputs.CngwStrategyConfigBehavior'] = None,
                 create_time: Optional[str] = None,
                 max_replicas: Optional[int] = None,
                 metrics: Optional[Sequence['outputs.CngwStrategyConfigMetric']] = None,
                 modify_time: Optional[str] = None,
                 strategy_id: Optional[str] = None):
        """
        :param 'CngwStrategyConfigBehaviorArgs' behavior: behavior configuration of metric
               Note: This field may return null, indicating that a valid value is not available.
        :param str create_time: create time
               Note: This field may return null, indicating that a valid value is not available.
        :param int max_replicas: max number of replica for metric scaling.
        :param Sequence['CngwStrategyConfigMetricArgs'] metrics: metric list.
        :param str modify_time: modify time
               Note: This field may return null, indicating that a valid value is not available.
        :param str strategy_id: strategy ID
               Note: This field may return null, indicating that a valid value is not available.
        """
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter
    def behavior(self) -> Optional['outputs.CngwStrategyConfigBehavior']:
        """
        behavior configuration of metric
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        """
        create time
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[int]:
        """
        max number of replica for metric scaling.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['outputs.CngwStrategyConfigMetric']]:
        """
        metric list.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[str]:
        """
        modify time
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[str]:
        """
        strategy ID
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "strategy_id")


@pulumi.output_type
class CngwStrategyConfigBehavior(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scaleDown":
            suggest = "scale_down"
        elif key == "scaleUp":
            suggest = "scale_up"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyConfigBehavior. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyConfigBehavior.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyConfigBehavior.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scale_down: Optional['outputs.CngwStrategyConfigBehaviorScaleDown'] = None,
                 scale_up: Optional['outputs.CngwStrategyConfigBehaviorScaleUp'] = None):
        """
        :param 'CngwStrategyConfigBehaviorScaleDownArgs' scale_down: configuration of down scale
               Note: This field may return null, indicating that a valid value is not available.
        :param 'CngwStrategyConfigBehaviorScaleUpArgs' scale_up: configuration of up scale
               Note: This field may return null, indicating that a valid value is not available.
        """
        if scale_down is not None:
            pulumi.set(__self__, "scale_down", scale_down)
        if scale_up is not None:
            pulumi.set(__self__, "scale_up", scale_up)

    @property
    @pulumi.getter(name="scaleDown")
    def scale_down(self) -> Optional['outputs.CngwStrategyConfigBehaviorScaleDown']:
        """
        configuration of down scale
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "scale_down")

    @property
    @pulumi.getter(name="scaleUp")
    def scale_up(self) -> Optional['outputs.CngwStrategyConfigBehaviorScaleUp']:
        """
        configuration of up scale
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "scale_up")


@pulumi.output_type
class CngwStrategyConfigBehaviorScaleDown(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectPolicy":
            suggest = "select_policy"
        elif key == "stabilizationWindowSeconds":
            suggest = "stabilization_window_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyConfigBehaviorScaleDown. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyConfigBehaviorScaleDown.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyConfigBehaviorScaleDown.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policies: Optional[Sequence['outputs.CngwStrategyConfigBehaviorScaleDownPolicy']] = None,
                 select_policy: Optional[str] = None,
                 stabilization_window_seconds: Optional[int] = None):
        """
        :param Sequence['CngwStrategyConfigBehaviorScaleDownPolicyArgs'] policies: policies of scale down
               Note: This field may return null, indicating that a valid value is not available.
        :param str select_policy: type of policy, default value: max
               Note: This field may return null, indicating that a valid value is not available.
        :param int stabilization_window_seconds: stability window time, unit:second, default 300 when scale down
               Note: This field may return null, indicating that a valid value is not available.
        """
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if select_policy is not None:
            pulumi.set(__self__, "select_policy", select_policy)
        if stabilization_window_seconds is not None:
            pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.CngwStrategyConfigBehaviorScaleDownPolicy']]:
        """
        policies of scale down
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> Optional[str]:
        """
        type of policy, default value: max
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "select_policy")

    @property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[int]:
        """
        stability window time, unit:second, default 300 when scale down
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "stabilization_window_seconds")


@pulumi.output_type
class CngwStrategyConfigBehaviorScaleDownPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "periodSeconds":
            suggest = "period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyConfigBehaviorScaleDownPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyConfigBehaviorScaleDownPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyConfigBehaviorScaleDownPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period_seconds: Optional[int] = None,
                 type: Optional[str] = None,
                 value: Optional[int] = None):
        """
        :param int period_seconds: period of scale up
               Note: This field may return null, indicating that a valid value is not available.
        :param str type: type, default value: Pods
               Note: This field may return null, indicating that a valid value is not available.
        :param int value: value
               Note: This field may return null, indicating that a valid value is not available.
        """
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        period of scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type, default value: Pods
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        value
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CngwStrategyConfigBehaviorScaleUp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "selectPolicy":
            suggest = "select_policy"
        elif key == "stabilizationWindowSeconds":
            suggest = "stabilization_window_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyConfigBehaviorScaleUp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyConfigBehaviorScaleUp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyConfigBehaviorScaleUp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policies: Optional[Sequence['outputs.CngwStrategyConfigBehaviorScaleUpPolicy']] = None,
                 select_policy: Optional[str] = None,
                 stabilization_window_seconds: Optional[int] = None):
        """
        :param Sequence['CngwStrategyConfigBehaviorScaleUpPolicyArgs'] policies: policies of scale up
               Note: This field may return null, indicating that a valid value is not available.
        :param str select_policy: type of policy, default value: max
               Note: This field may return null, indicating that a valid value is not available.
        :param int stabilization_window_seconds: stability window time, unit:second, default 0 when scale up
               Note: This field may return null, indicating that a valid value is not available.
        """
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if select_policy is not None:
            pulumi.set(__self__, "select_policy", select_policy)
        if stabilization_window_seconds is not None:
            pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @property
    @pulumi.getter
    def policies(self) -> Optional[Sequence['outputs.CngwStrategyConfigBehaviorScaleUpPolicy']]:
        """
        policies of scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> Optional[str]:
        """
        type of policy, default value: max
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "select_policy")

    @property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[int]:
        """
        stability window time, unit:second, default 0 when scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "stabilization_window_seconds")


@pulumi.output_type
class CngwStrategyConfigBehaviorScaleUpPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "periodSeconds":
            suggest = "period_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyConfigBehaviorScaleUpPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyConfigBehaviorScaleUpPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyConfigBehaviorScaleUpPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period_seconds: Optional[int] = None,
                 type: Optional[str] = None,
                 value: Optional[int] = None):
        """
        :param int period_seconds: period of scale up
               Note: This field may return null, indicating that a valid value is not available.
        :param str type: type, default value: Pods
               Note: This field may return null, indicating that a valid value is not available.
        :param int value: value
               Note: This field may return null, indicating that a valid value is not available.
        """
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[int]:
        """
        period of scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "period_seconds")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type, default value: Pods
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[int]:
        """
        value
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CngwStrategyConfigMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceName":
            suggest = "resource_name"
        elif key == "targetType":
            suggest = "target_type"
        elif key == "targetValue":
            suggest = "target_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyConfigMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyConfigMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyConfigMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_name: Optional[str] = None,
                 target_type: Optional[str] = None,
                 target_value: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param str resource_name: metric name. Reference value:
               - cpu
               - memory
               Note: This field may return null, indicating that a valid value is not available.
        :param str target_type: target type of metric, currently only supports `Utilization`
               Note: This field may return null, indicating that a valid value is not available.
        :param int target_value: target value of metric
               Note: This field may return null, indicating that a valid value is not available.
        :param str type: metric type. Deafault value
               - Resource.
        """
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[str]:
        """
        metric name. Reference value:
        - cpu
        - memory
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[str]:
        """
        target type of metric, currently only supports `Utilization`
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[int]:
        """
        target value of metric
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_value")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        metric type. Deafault value
        - Resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CngwStrategyCronConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "strategyId":
            suggest = "strategy_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyCronConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyCronConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyCronConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 params: Optional[Sequence['outputs.CngwStrategyCronConfigParam']] = None,
                 strategy_id: Optional[str] = None):
        """
        :param Sequence['CngwStrategyCronConfigParamArgs'] params: parameter list of timed scaling
               Note: This field may return null, indicating that a valid value is not available.
        :param str strategy_id: strategy ID
               Note: This field may return null, indicating that a valid value is not available.
        """
        if params is not None:
            pulumi.set(__self__, "params", params)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter
    def params(self) -> Optional[Sequence['outputs.CngwStrategyCronConfigParam']]:
        """
        parameter list of timed scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[str]:
        """
        strategy ID
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "strategy_id")


@pulumi.output_type
class CngwStrategyCronConfigParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startAt":
            suggest = "start_at"
        elif key == "targetReplicas":
            suggest = "target_replicas"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CngwStrategyCronConfigParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CngwStrategyCronConfigParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CngwStrategyCronConfigParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 crontab: Optional[str] = None,
                 period: Optional[str] = None,
                 start_at: Optional[str] = None,
                 target_replicas: Optional[int] = None):
        """
        :param str crontab: cron expression of timed scaling, no input required
               Note: This field may return null, indicating that a valid value is not available.
        :param str period: period of timed scaling
               Note: This field may return null, indicating that a valid value is not available.
        :param str start_at: start time of timed scaling
               Note: This field may return null, indicating that a valid value is not available.
        :param int target_replicas: the number of target nodes for the timed scaling. Do not exceed the max number of replica for metric scaling
               Note: This field may return null, indicating that a valid value is not available.
        """
        if crontab is not None:
            pulumi.set(__self__, "crontab", crontab)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if start_at is not None:
            pulumi.set(__self__, "start_at", start_at)
        if target_replicas is not None:
            pulumi.set(__self__, "target_replicas", target_replicas)

    @property
    @pulumi.getter
    def crontab(self) -> Optional[str]:
        """
        cron expression of timed scaling, no input required
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "crontab")

    @property
    @pulumi.getter
    def period(self) -> Optional[str]:
        """
        period of timed scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> Optional[str]:
        """
        start time of timed scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "start_at")

    @property
    @pulumi.getter(name="targetReplicas")
    def target_replicas(self) -> Optional[int]:
        """
        the number of target nodes for the timed scaling. Do not exceed the max number of replica for metric scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_replicas")


@pulumi.output_type
class InstanceEngineRegionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineRegion":
            suggest = "engine_region"
        elif key == "vpcInfos":
            suggest = "vpc_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceEngineRegionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceEngineRegionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceEngineRegionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_region: str,
                 replica: int,
                 vpc_infos: Sequence['outputs.InstanceEngineRegionInfoVpcInfo']):
        """
        :param str engine_region: Engine node region.
        :param int replica: The number of nodes allocated in this region.
        :param Sequence['InstanceEngineRegionInfoVpcInfoArgs'] vpc_infos: Cluster network information.
        """
        pulumi.set(__self__, "engine_region", engine_region)
        pulumi.set(__self__, "replica", replica)
        pulumi.set(__self__, "vpc_infos", vpc_infos)

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> str:
        """
        Engine node region.
        """
        return pulumi.get(self, "engine_region")

    @property
    @pulumi.getter
    def replica(self) -> int:
        """
        The number of nodes allocated in this region.
        """
        return pulumi.get(self, "replica")

    @property
    @pulumi.getter(name="vpcInfos")
    def vpc_infos(self) -> Sequence['outputs.InstanceEngineRegionInfoVpcInfo']:
        """
        Cluster network information.
        """
        return pulumi.get(self, "vpc_infos")


@pulumi.output_type
class InstanceEngineRegionInfoVpcInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"
        elif key == "intranetAddress":
            suggest = "intranet_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceEngineRegionInfoVpcInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceEngineRegionInfoVpcInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceEngineRegionInfoVpcInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str,
                 intranet_address: Optional[str] = None):
        """
        :param str subnet_id: Subnet ID.
        :param str vpc_id: Vpc Id.
        :param str intranet_address: Intranet access addressNote: This field may return null, indicating that a valid value is not available..
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if intranet_address is not None:
            pulumi.set(__self__, "intranet_address", intranet_address)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Vpc Id.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> Optional[str]:
        """
        Intranet access addressNote: This field may return null, indicating that a valid value is not available..
        """
        return pulumi.get(self, "intranet_address")


@pulumi.output_type
class GetAccessAddressEnvAddressInfoResult(dict):
    def __init__(__self__, *,
                 config_internet_service_ip: str,
                 config_intranet_address: str,
                 enable_config_internet: bool,
                 enable_config_intranet: bool,
                 env_name: str,
                 internet_band_width: int):
        """
        :param str config_internet_service_ip: config public network ip.
        :param str config_intranet_address: config Intranet access addressNote: This field may return null, indicating that a valid value is not available.
        :param bool enable_config_internet: Whether to enable the config public network.
        :param bool enable_config_intranet: Whether to enable the config Intranet clbNote: This field may return null, indicating that a valid value is not available.
        :param str env_name: env name.
        :param int internet_band_width: Client public network bandwidthNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "config_internet_service_ip", config_internet_service_ip)
        pulumi.set(__self__, "config_intranet_address", config_intranet_address)
        pulumi.set(__self__, "enable_config_internet", enable_config_internet)
        pulumi.set(__self__, "enable_config_intranet", enable_config_intranet)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "internet_band_width", internet_band_width)

    @property
    @pulumi.getter(name="configInternetServiceIp")
    def config_internet_service_ip(self) -> str:
        """
        config public network ip.
        """
        return pulumi.get(self, "config_internet_service_ip")

    @property
    @pulumi.getter(name="configIntranetAddress")
    def config_intranet_address(self) -> str:
        """
        config Intranet access addressNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "config_intranet_address")

    @property
    @pulumi.getter(name="enableConfigInternet")
    def enable_config_internet(self) -> bool:
        """
        Whether to enable the config public network.
        """
        return pulumi.get(self, "enable_config_internet")

    @property
    @pulumi.getter(name="enableConfigIntranet")
    def enable_config_intranet(self) -> bool:
        """
        Whether to enable the config Intranet clbNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "enable_config_intranet")

    @property
    @pulumi.getter(name="envName")
    def env_name(self) -> str:
        """
        env name.
        """
        return pulumi.get(self, "env_name")

    @property
    @pulumi.getter(name="internetBandWidth")
    def internet_band_width(self) -> int:
        """
        Client public network bandwidthNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "internet_band_width")


@pulumi.output_type
class GetAccessAddressLimiterAddressInfoResult(dict):
    def __init__(__self__, *,
                 intranet_address: str):
        """
        :param str intranet_address: VPC access IP address listNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "intranet_address", intranet_address)

    @property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> str:
        """
        VPC access IP address listNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "intranet_address")


@pulumi.output_type
class GetGatewayCanaryRulesResultResult(dict):
    def __init__(__self__, *,
                 canary_rule_lists: Sequence['outputs.GetGatewayCanaryRulesResultCanaryRuleListResult'],
                 total_count: int):
        """
        :param Sequence['GetGatewayCanaryRulesResultCanaryRuleListArgs'] canary_rule_lists: canary rule list.
        :param int total_count: total count.
        """
        pulumi.set(__self__, "canary_rule_lists", canary_rule_lists)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="canaryRuleLists")
    def canary_rule_lists(self) -> Sequence['outputs.GetGatewayCanaryRulesResultCanaryRuleListResult']:
        """
        canary rule list.
        """
        return pulumi.get(self, "canary_rule_lists")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        total count.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetGatewayCanaryRulesResultCanaryRuleListResult(dict):
    def __init__(__self__, *,
                 balanced_service_lists: Sequence['outputs.GetGatewayCanaryRulesResultCanaryRuleListBalancedServiceListResult'],
                 condition_lists: Sequence['outputs.GetGatewayCanaryRulesResultCanaryRuleListConditionListResult'],
                 enabled: bool,
                 priority: int,
                 service_id: str,
                 service_name: str):
        """
        :param Sequence['GetGatewayCanaryRulesResultCanaryRuleListBalancedServiceListArgs'] balanced_service_lists: service weight configuration.
        :param Sequence['GetGatewayCanaryRulesResultCanaryRuleListConditionListArgs'] condition_lists: parameter matching condition list.
        :param bool enabled: the status of canary rule.
        :param int priority: priority. The value ranges from 0 to 100; the larger the value, the higher the priority; the priority cannot be repeated between different rules.
        :param str service_id: service ID.
        :param str service_name: service name.
        """
        pulumi.set(__self__, "balanced_service_lists", balanced_service_lists)
        pulumi.set(__self__, "condition_lists", condition_lists)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="balancedServiceLists")
    def balanced_service_lists(self) -> Sequence['outputs.GetGatewayCanaryRulesResultCanaryRuleListBalancedServiceListResult']:
        """
        service weight configuration.
        """
        return pulumi.get(self, "balanced_service_lists")

    @property
    @pulumi.getter(name="conditionLists")
    def condition_lists(self) -> Sequence['outputs.GetGatewayCanaryRulesResultCanaryRuleListConditionListResult']:
        """
        parameter matching condition list.
        """
        return pulumi.get(self, "condition_lists")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        the status of canary rule.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def priority(self) -> int:
        """
        priority. The value ranges from 0 to 100; the larger the value, the higher the priority; the priority cannot be repeated between different rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        service ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        service name.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetGatewayCanaryRulesResultCanaryRuleListBalancedServiceListResult(dict):
    def __init__(__self__, *,
                 percent: float,
                 service_id: str,
                 service_name: str,
                 upstream_name: str):
        """
        :param float percent: percent, 10 is 10%, valid values: 0 to 100.
        :param str service_id: service ID.
        :param str service_name: service name.
        :param str upstream_name: upstream name.
        """
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "upstream_name", upstream_name)

    @property
    @pulumi.getter
    def percent(self) -> float:
        """
        percent, 10 is 10%, valid values: 0 to 100.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        service ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="upstreamName")
    def upstream_name(self) -> str:
        """
        upstream name.
        """
        return pulumi.get(self, "upstream_name")


@pulumi.output_type
class GetGatewayCanaryRulesResultCanaryRuleListConditionListResult(dict):
    def __init__(__self__, *,
                 delimiter: str,
                 global_config_id: str,
                 global_config_name: str,
                 key: str,
                 operator: str,
                 type: str,
                 value: str):
        """
        :param str delimiter: delimiter. valid when operator is in or not in, reference value:`,`, `;`,`\\n`.
        :param str global_config_id: global configuration ID.
        :param str global_config_name: global configuration name.
        :param str key: parameter name.
        :param str operator: operator.Reference value:`le`, `eq`, `lt`, `ne`, `ge`, `gt`, `regex`, `exists`, `in`, `not in`,  `prefix`, `exact`, `regex`.
        :param str type: type.Reference value:- path- method- query- header- cookie- body- system.
        :param str value: parameter value.
        """
        pulumi.set(__self__, "delimiter", delimiter)
        pulumi.set(__self__, "global_config_id", global_config_id)
        pulumi.set(__self__, "global_config_name", global_config_name)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def delimiter(self) -> str:
        """
        delimiter. valid when operator is in or not in, reference value:`,`, `;`,`\\n`.
        """
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="globalConfigId")
    def global_config_id(self) -> str:
        """
        global configuration ID.
        """
        return pulumi.get(self, "global_config_id")

    @property
    @pulumi.getter(name="globalConfigName")
    def global_config_name(self) -> str:
        """
        global configuration name.
        """
        return pulumi.get(self, "global_config_name")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        parameter name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator.Reference value:`le`, `eq`, `lt`, `ne`, `ge`, `gt`, `regex`, `exists`, `in`, `not in`,  `prefix`, `exact`, `regex`.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type.Reference value:- path- method- query- header- cookie- body- system.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGatewayCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Filter name.
        :param str value: Filter value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Filter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGatewayCertificatesResultResult(dict):
    def __init__(__self__, *,
                 certificates_lists: Sequence['outputs.GetGatewayCertificatesResultCertificatesListResult'],
                 total: int):
        """
        :param Sequence['GetGatewayCertificatesResultCertificatesListArgs'] certificates_lists: Certificate list of gateway. Note: This field may return null, indicating that a valid value is not available.
        :param int total: Total count. Note: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "certificates_lists", certificates_lists)
        pulumi.set(__self__, "total", total)

    @property
    @pulumi.getter(name="certificatesLists")
    def certificates_lists(self) -> Sequence['outputs.GetGatewayCertificatesResultCertificatesListResult']:
        """
        Certificate list of gateway. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "certificates_lists")

    @property
    @pulumi.getter
    def total(self) -> int:
        """
        Total count. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "total")


@pulumi.output_type
class GetGatewayCertificatesResultCertificatesListResult(dict):
    def __init__(__self__, *,
                 bind_domains: Sequence[str],
                 cert_id: str,
                 cert_source: str,
                 create_time: str,
                 crt: str,
                 expire_time: str,
                 id: str,
                 issue_time: str,
                 key: str,
                 name: str,
                 status: str):
        """
        :param Sequence[str] bind_domains: Domains of the binding. Note: This field may return null, indicating that a valid value is not available.
        :param str cert_id: Certificate ID of ssl platform. Note: This field may return null, indicating that a valid value is not available.
        :param str cert_source: Source of certificate. Reference value:- native. Source: konga- ssl. Source: ssl platform. Note: This field may return null, indicating that a valid value is not available.
        :param str create_time: Upload time of certificate. Note: This field may return null, indicating that a valid value is not available.
        :param str crt: Pem format of certificate. Note: This field may return null, indicating that a valid value is not available.
        :param str expire_time: Expiration time of certificate. Note: This field may return null, indicating that a valid value is not available.
        :param str id: Certificate ID. Note: This field may return null, indicating that a valid value is not available.
        :param str issue_time: Issuance time of certificateNote: This field may return null, indicating that a valid value is not available.
        :param str key: Filter name.
        :param str name: Certificate name. Note: This field may return null, indicating that a valid value is not available.
        :param str status: Status of certificate. Reference value:- expired- active. Note: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "bind_domains", bind_domains)
        pulumi.set(__self__, "cert_id", cert_id)
        pulumi.set(__self__, "cert_source", cert_source)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "crt", crt)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "issue_time", issue_time)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="bindDomains")
    def bind_domains(self) -> Sequence[str]:
        """
        Domains of the binding. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "bind_domains")

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> str:
        """
        Certificate ID of ssl platform. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "cert_id")

    @property
    @pulumi.getter(name="certSource")
    def cert_source(self) -> str:
        """
        Source of certificate. Reference value:- native. Source: konga- ssl. Source: ssl platform. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "cert_source")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Upload time of certificate. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def crt(self) -> str:
        """
        Pem format of certificate. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "crt")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        Expiration time of certificate. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Certificate ID. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="issueTime")
    def issue_time(self) -> str:
        """
        Issuance time of certificateNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "issue_time")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Filter name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Certificate name. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of certificate. Reference value:- expired- active. Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetGatewayNodesNodeListResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 group_name: str,
                 node_id: str,
                 node_ip: str,
                 status: str,
                 zone: str,
                 zone_id: str):
        """
        :param str group_id: gateway group ID.
        :param str group_name: Group nameNote: This field may return null, indicating that a valid value is not available.
        :param str node_id: gateway node id.
        :param str node_ip: gateway node ip.
        :param str status: statusNote: This field may return null, indicating that a valid value is not available.
        :param str zone: ZoneNote: This field may return null, indicating that a valid value is not available.
        :param str zone_id: Zone idNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "node_id", node_id)
        pulumi.set(__self__, "node_ip", node_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        gateway group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        Group nameNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> str:
        """
        gateway node id.
        """
        return pulumi.get(self, "node_id")

    @property
    @pulumi.getter(name="nodeIp")
    def node_ip(self) -> str:
        """
        gateway node ip.
        """
        return pulumi.get(self, "node_ip")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        statusNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        ZoneNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Zone idNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetGatewayRoutesResultResult(dict):
    def __init__(__self__, *,
                 route_lists: Sequence['outputs.GetGatewayRoutesResultRouteListResult'],
                 total_count: int):
        """
        :param Sequence['GetGatewayRoutesResultRouteListArgs'] route_lists: route list.
        :param int total_count: total count.
        """
        pulumi.set(__self__, "route_lists", route_lists)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="routeLists")
    def route_lists(self) -> Sequence['outputs.GetGatewayRoutesResultRouteListResult']:
        """
        route list.
        """
        return pulumi.get(self, "route_lists")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        total count.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetGatewayRoutesResultRouteListResult(dict):
    def __init__(__self__, *,
                 created_time: str,
                 destination_ports: Sequence[int],
                 force_https: bool,
                 headers: Sequence['outputs.GetGatewayRoutesResultRouteListHeaderResult'],
                 hosts: Sequence[str],
                 https_redirect_status_code: int,
                 id: str,
                 methods: Sequence[str],
                 name: str,
                 paths: Sequence[str],
                 preserve_host: bool,
                 protocols: Sequence[str],
                 service_id: str,
                 service_name: str,
                 strip_path: bool):
        """
        :param str created_time: created time.
        :param Sequence[int] destination_ports: destination port for Layer 4 matching.
        :param bool force_https: whether to enable forced HTTPS, no longer use.
        :param Sequence['GetGatewayRoutesResultRouteListHeaderArgs'] headers: the headers of route.
        :param Sequence[str] hosts: host list.
        :param int https_redirect_status_code: https redirection status code.
        :param str id: service ID.
        :param Sequence[str] methods: method list.
        :param str name: service name.
        :param Sequence[str] paths: path list.
        :param bool preserve_host: whether to keep the host when forwarding to the backend.
        :param Sequence[str] protocols: protocol list.
        :param str service_id: service ID.
        :param str service_name: service name.
        :param bool strip_path: whether to strip path when forwarding to the backend.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "destination_ports", destination_ports)
        pulumi.set(__self__, "force_https", force_https)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "https_redirect_status_code", https_redirect_status_code)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "methods", methods)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "preserve_host", preserve_host)
        pulumi.set(__self__, "protocols", protocols)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "strip_path", strip_path)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        created time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Sequence[int]:
        """
        destination port for Layer 4 matching.
        """
        return pulumi.get(self, "destination_ports")

    @property
    @pulumi.getter(name="forceHttps")
    def force_https(self) -> bool:
        """
        whether to enable forced HTTPS, no longer use.
        """
        return pulumi.get(self, "force_https")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetGatewayRoutesResultRouteListHeaderResult']:
        """
        the headers of route.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence[str]:
        """
        host list.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="httpsRedirectStatusCode")
    def https_redirect_status_code(self) -> int:
        """
        https redirection status code.
        """
        return pulumi.get(self, "https_redirect_status_code")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        service ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def methods(self) -> Sequence[str]:
        """
        method list.
        """
        return pulumi.get(self, "methods")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def paths(self) -> Sequence[str]:
        """
        path list.
        """
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter(name="preserveHost")
    def preserve_host(self) -> bool:
        """
        whether to keep the host when forwarding to the backend.
        """
        return pulumi.get(self, "preserve_host")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence[str]:
        """
        protocol list.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        service ID.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        service name.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="stripPath")
    def strip_path(self) -> bool:
        """
        whether to strip path when forwarding to the backend.
        """
        return pulumi.get(self, "strip_path")


@pulumi.output_type
class GetGatewayRoutesResultRouteListHeaderResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key of header.
        :param str value: value of header.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key of header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value of header.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGatewayServicesFilterResult(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: filter name.
        :param str value: filter value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        filter name.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        filter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetGatewayServicesResultResult(dict):
    def __init__(__self__, *,
                 service_lists: Sequence['outputs.GetGatewayServicesResultServiceListResult'],
                 total_count: int):
        """
        :param Sequence['GetGatewayServicesResultServiceListArgs'] service_lists: service list.
        :param int total_count: total count.
        """
        pulumi.set(__self__, "service_lists", service_lists)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="serviceLists")
    def service_lists(self) -> Sequence['outputs.GetGatewayServicesResultServiceListResult']:
        """
        service list.
        """
        return pulumi.get(self, "service_lists")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        total count.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetGatewayServicesResultServiceListResult(dict):
    def __init__(__self__, *,
                 created_time: str,
                 editable: bool,
                 id: str,
                 name: str,
                 tags: Sequence[str],
                 upstream_infos: Sequence['outputs.GetGatewayServicesResultServiceListUpstreamInfoResult'],
                 upstream_type: str):
        """
        :param str created_time: created time.
        :param bool editable: editable status.
        :param str id: service ID.
        :param str name: service name.
        :param Sequence[str] tags: tag list.
        :param Sequence['GetGatewayServicesResultServiceListUpstreamInfoArgs'] upstream_infos: upstream information.
        :param str upstream_type: service type.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "editable", editable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "upstream_infos", upstream_infos)
        pulumi.set(__self__, "upstream_type", upstream_type)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        created time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def editable(self) -> bool:
        """
        editable status.
        """
        return pulumi.get(self, "editable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        service ID.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        tag list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="upstreamInfos")
    def upstream_infos(self) -> Sequence['outputs.GetGatewayServicesResultServiceListUpstreamInfoResult']:
        """
        upstream information.
        """
        return pulumi.get(self, "upstream_infos")

    @property
    @pulumi.getter(name="upstreamType")
    def upstream_type(self) -> str:
        """
        service type.
        """
        return pulumi.get(self, "upstream_type")


@pulumi.output_type
class GetGatewayServicesResultServiceListUpstreamInfoResult(dict):
    def __init__(__self__, *,
                 algorithm: str,
                 auto_scaling_cvm_port: int,
                 auto_scaling_group_id: str,
                 auto_scaling_hook_status: str,
                 auto_scaling_tat_cmd_status: str,
                 host: str,
                 namespace: str,
                 port: int,
                 real_source_type: str,
                 scf_lambda_name: str,
                 scf_lambda_qualifier: str,
                 scf_namespace: str,
                 scf_type: str,
                 service_name: str,
                 slow_start: int,
                 source_id: str,
                 source_name: str,
                 source_type: str,
                 targets: Sequence['outputs.GetGatewayServicesResultServiceListUpstreamInfoTargetResult']):
        """
        :param str algorithm: load balance algorithm,default:round-robin,least-connections and consisten_hashing also support.
        :param int auto_scaling_cvm_port: auto scaling group port of cvm.
        :param str auto_scaling_group_id: auto scaling group ID of cvm.
        :param str auto_scaling_hook_status: hook status in auto scaling group of cvm.
        :param str auto_scaling_tat_cmd_status: tat cmd status in auto scaling group of cvm.
        :param str host: Host.
        :param str namespace: namespace.
        :param int port: port.
        :param str real_source_type: exact source service type.
        :param str scf_lambda_name: scf lambda name.
        :param str scf_lambda_qualifier: scf lambda version.
        :param str scf_namespace: scf lambda namespace.
        :param str scf_type: scf lambda type.
        :param str service_name: the name of the service in registry or kubernetes.
        :param int slow_start: slow start time, unit:second,when it&#39;s enabled, weight of the node is increased from 1 to the target value gradually.
        :param str source_id: service source ID.
        :param str source_name: the name of source service.
        :param str source_type: source service type.
        :param Sequence['GetGatewayServicesResultServiceListUpstreamInfoTargetArgs'] targets: provided when service type is IPList.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "auto_scaling_cvm_port", auto_scaling_cvm_port)
        pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        pulumi.set(__self__, "auto_scaling_hook_status", auto_scaling_hook_status)
        pulumi.set(__self__, "auto_scaling_tat_cmd_status", auto_scaling_tat_cmd_status)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "real_source_type", real_source_type)
        pulumi.set(__self__, "scf_lambda_name", scf_lambda_name)
        pulumi.set(__self__, "scf_lambda_qualifier", scf_lambda_qualifier)
        pulumi.set(__self__, "scf_namespace", scf_namespace)
        pulumi.set(__self__, "scf_type", scf_type)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "slow_start", slow_start)
        pulumi.set(__self__, "source_id", source_id)
        pulumi.set(__self__, "source_name", source_name)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        """
        load balance algorithm,default:round-robin,least-connections and consisten_hashing also support.
        """
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="autoScalingCvmPort")
    def auto_scaling_cvm_port(self) -> int:
        """
        auto scaling group port of cvm.
        """
        return pulumi.get(self, "auto_scaling_cvm_port")

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> str:
        """
        auto scaling group ID of cvm.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @property
    @pulumi.getter(name="autoScalingHookStatus")
    def auto_scaling_hook_status(self) -> str:
        """
        hook status in auto scaling group of cvm.
        """
        return pulumi.get(self, "auto_scaling_hook_status")

    @property
    @pulumi.getter(name="autoScalingTatCmdStatus")
    def auto_scaling_tat_cmd_status(self) -> str:
        """
        tat cmd status in auto scaling group of cvm.
        """
        return pulumi.get(self, "auto_scaling_tat_cmd_status")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="realSourceType")
    def real_source_type(self) -> str:
        """
        exact source service type.
        """
        return pulumi.get(self, "real_source_type")

    @property
    @pulumi.getter(name="scfLambdaName")
    def scf_lambda_name(self) -> str:
        """
        scf lambda name.
        """
        return pulumi.get(self, "scf_lambda_name")

    @property
    @pulumi.getter(name="scfLambdaQualifier")
    def scf_lambda_qualifier(self) -> str:
        """
        scf lambda version.
        """
        return pulumi.get(self, "scf_lambda_qualifier")

    @property
    @pulumi.getter(name="scfNamespace")
    def scf_namespace(self) -> str:
        """
        scf lambda namespace.
        """
        return pulumi.get(self, "scf_namespace")

    @property
    @pulumi.getter(name="scfType")
    def scf_type(self) -> str:
        """
        scf lambda type.
        """
        return pulumi.get(self, "scf_type")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        the name of the service in registry or kubernetes.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="slowStart")
    def slow_start(self) -> int:
        """
        slow start time, unit:second,when it&#39;s enabled, weight of the node is increased from 1 to the target value gradually.
        """
        return pulumi.get(self, "slow_start")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> str:
        """
        service source ID.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> str:
        """
        the name of source service.
        """
        return pulumi.get(self, "source_name")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        """
        source service type.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetGatewayServicesResultServiceListUpstreamInfoTargetResult']:
        """
        provided when service type is IPList.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetGatewayServicesResultServiceListUpstreamInfoTargetResult(dict):
    def __init__(__self__, *,
                 created_time: str,
                 health: str,
                 host: str,
                 port: int,
                 source: str,
                 weight: int):
        """
        :param str created_time: created time.
        :param str health: health.
        :param str host: Host.
        :param int port: port.
        :param str source: source of target.
        :param int weight: weight.
        """
        pulumi.set(__self__, "created_time", created_time)
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> str:
        """
        created time.
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        health.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        source of target.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: filter name.
        :param Sequence[str] values: filter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        filter value.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGatewaysResultResult(dict):
    def __init__(__self__, *,
                 gateway_lists: Sequence['outputs.GetGatewaysResultGatewayListResult'],
                 total_count: int):
        """
        :param Sequence['GetGatewaysResultGatewayListArgs'] gateway_lists: gateway list.
        :param int total_count: total count.
        """
        pulumi.set(__self__, "gateway_lists", gateway_lists)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="gatewayLists")
    def gateway_lists(self) -> Sequence['outputs.GetGatewaysResultGatewayListResult']:
        """
        gateway list.
        """
        return pulumi.get(self, "gateway_lists")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        total count.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetGatewaysResultGatewayListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 create_time: str,
                 cur_deadline: str,
                 description: str,
                 enable_cls: bool,
                 enable_internet: bool,
                 engine_region: str,
                 feature_version: str,
                 gateway_id: str,
                 gateway_minor_version: str,
                 gateway_version: str,
                 ingress_class_name: str,
                 instance_ports: Sequence['outputs.GetGatewaysResultGatewayListInstancePortResult'],
                 internet_max_bandwidth_out: int,
                 internet_pay_mode: str,
                 isolate_time: str,
                 load_balancer_type: str,
                 name: str,
                 node_configs: Sequence['outputs.GetGatewaysResultGatewayListNodeConfigResult'],
                 public_ip_addresses: Sequence[str],
                 status: str,
                 tags: Sequence['outputs.GetGatewaysResultGatewayListTagResult'],
                 trade_type: int,
                 type: str,
                 vpc_configs: Sequence['outputs.GetGatewaysResultGatewayListVpcConfigResult']):
        """
        :param int auto_renew_flag: auto renew flag, `0`: default status, `1`: auto renew, `2`: auto not renew.
        :param str create_time: create time.
        :param str cur_deadline: expire date, for prepaid type.Note: This field may return null, indicating that a valid value is not available.
        :param str description: description of gateway.
        :param bool enable_cls: whether to enable CLS log.
        :param bool enable_internet: whether to open the public network of client.Note: This field may return null, indicating that a valid value is not available.
        :param str engine_region: engine region of gateway.
        :param str feature_version: product version. `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
        :param str gateway_id: gateway ID.
        :param str gateway_minor_version: minor version of gateway.
        :param str gateway_version: gateway version. Reference value: `2.4.1`, `2.5.1`.
        :param str ingress_class_name: ingress class name.
        :param Sequence['GetGatewaysResultGatewayListInstancePortArgs'] instance_ports: the port information that the instance monitors.
        :param int internet_max_bandwidth_out: public network outbound traffic bandwidth.
        :param str internet_pay_mode: trade type of internet. `BANDWIDTH`, `TRAFFIC`.
        :param str isolate_time: isolation time, used when the gateway is isolated.
        :param str load_balancer_type: load balance type of public internet.
        :param str name: filter name.
        :param Sequence['GetGatewaysResultGatewayListNodeConfigArgs'] node_configs: original node config.
        :param Sequence[str] public_ip_addresses: addresses of public internet.
        :param str status: status of gateway. May return values: `Creating`, `CreateFailed`, `Running`, `Modifying`, `UpdatingSpec`, `UpdateFailed`, `Deleting`, `DeleteFailed`, `Isolating`.
        :param Sequence['GetGatewaysResultGatewayListTagArgs'] tags: tags information of gatewayNote: This field may return null, indicating that a valid value is not available.
        :param int trade_type: trade type. `0`: postpaid, `1`: Prepaid.
        :param str type: gateway type.
        :param Sequence['GetGatewaysResultGatewayListVpcConfigArgs'] vpc_configs: vpc information.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "cur_deadline", cur_deadline)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_cls", enable_cls)
        pulumi.set(__self__, "enable_internet", enable_internet)
        pulumi.set(__self__, "engine_region", engine_region)
        pulumi.set(__self__, "feature_version", feature_version)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "gateway_minor_version", gateway_minor_version)
        pulumi.set(__self__, "gateway_version", gateway_version)
        pulumi.set(__self__, "ingress_class_name", ingress_class_name)
        pulumi.set(__self__, "instance_ports", instance_ports)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        pulumi.set(__self__, "internet_pay_mode", internet_pay_mode)
        pulumi.set(__self__, "isolate_time", isolate_time)
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_configs", node_configs)
        pulumi.set(__self__, "public_ip_addresses", public_ip_addresses)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trade_type", trade_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vpc_configs", vpc_configs)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        auto renew flag, `0`: default status, `1`: auto renew, `2`: auto not renew.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="curDeadline")
    def cur_deadline(self) -> str:
        """
        expire date, for prepaid type.Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "cur_deadline")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        description of gateway.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableCls")
    def enable_cls(self) -> bool:
        """
        whether to enable CLS log.
        """
        return pulumi.get(self, "enable_cls")

    @property
    @pulumi.getter(name="enableInternet")
    def enable_internet(self) -> bool:
        """
        whether to open the public network of client.Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "enable_internet")

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> str:
        """
        engine region of gateway.
        """
        return pulumi.get(self, "engine_region")

    @property
    @pulumi.getter(name="featureVersion")
    def feature_version(self) -> str:
        """
        product version. `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
        """
        return pulumi.get(self, "feature_version")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="gatewayMinorVersion")
    def gateway_minor_version(self) -> str:
        """
        minor version of gateway.
        """
        return pulumi.get(self, "gateway_minor_version")

    @property
    @pulumi.getter(name="gatewayVersion")
    def gateway_version(self) -> str:
        """
        gateway version. Reference value: `2.4.1`, `2.5.1`.
        """
        return pulumi.get(self, "gateway_version")

    @property
    @pulumi.getter(name="ingressClassName")
    def ingress_class_name(self) -> str:
        """
        ingress class name.
        """
        return pulumi.get(self, "ingress_class_name")

    @property
    @pulumi.getter(name="instancePorts")
    def instance_ports(self) -> Sequence['outputs.GetGatewaysResultGatewayListInstancePortResult']:
        """
        the port information that the instance monitors.
        """
        return pulumi.get(self, "instance_ports")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        """
        public network outbound traffic bandwidth.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="internetPayMode")
    def internet_pay_mode(self) -> str:
        """
        trade type of internet. `BANDWIDTH`, `TRAFFIC`.
        """
        return pulumi.get(self, "internet_pay_mode")

    @property
    @pulumi.getter(name="isolateTime")
    def isolate_time(self) -> str:
        """
        isolation time, used when the gateway is isolated.
        """
        return pulumi.get(self, "isolate_time")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> str:
        """
        load balance type of public internet.
        """
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfigs")
    def node_configs(self) -> Sequence['outputs.GetGatewaysResultGatewayListNodeConfigResult']:
        """
        original node config.
        """
        return pulumi.get(self, "node_configs")

    @property
    @pulumi.getter(name="publicIpAddresses")
    def public_ip_addresses(self) -> Sequence[str]:
        """
        addresses of public internet.
        """
        return pulumi.get(self, "public_ip_addresses")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status of gateway. May return values: `Creating`, `CreateFailed`, `Running`, `Modifying`, `UpdatingSpec`, `UpdateFailed`, `Deleting`, `DeleteFailed`, `Isolating`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetGatewaysResultGatewayListTagResult']:
        """
        tags information of gatewayNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tradeType")
    def trade_type(self) -> int:
        """
        trade type. `0`: postpaid, `1`: Prepaid.
        """
        return pulumi.get(self, "trade_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        gateway type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcConfigs")
    def vpc_configs(self) -> Sequence['outputs.GetGatewaysResultGatewayListVpcConfigResult']:
        """
        vpc information.
        """
        return pulumi.get(self, "vpc_configs")


@pulumi.output_type
class GetGatewaysResultGatewayListInstancePortResult(dict):
    def __init__(__self__, *,
                 http_port: str,
                 https_port: str):
        """
        :param str http_port: http port.
        :param str https_port: https port.
        """
        pulumi.set(__self__, "http_port", http_port)
        pulumi.set(__self__, "https_port", https_port)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> str:
        """
        http port.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> str:
        """
        https port.
        """
        return pulumi.get(self, "https_port")


@pulumi.output_type
class GetGatewaysResultGatewayListNodeConfigResult(dict):
    def __init__(__self__, *,
                 number: int,
                 specification: str):
        """
        :param int number: node number, 2-50.
        :param str specification: specification, 1c2g|2c4g|4c8g|8c16g.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "specification", specification)

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        node number, 2-50.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def specification(self) -> str:
        """
        specification, 1c2g|2c4g|4c8g|8c16g.
        """
        return pulumi.get(self, "specification")


@pulumi.output_type
class GetGatewaysResultGatewayListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetGatewaysResultGatewayListVpcConfigResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 vpc_id: str):
        """
        :param str subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet.
        :param str vpc_id: subnet ID. Assign an IP address to the engine in the VPC subnet.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: filter name.
        :param Sequence[str] values: filter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        filter values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGroupsResultResult(dict):
    def __init__(__self__, *,
                 gateway_group_lists: Sequence['outputs.GetGroupsResultGatewayGroupListResult'],
                 total_count: int):
        """
        :param Sequence['GetGroupsResultGatewayGroupListArgs'] gateway_group_lists: group list of gateway.
        :param int total_count: total count.
        """
        pulumi.set(__self__, "gateway_group_lists", gateway_group_lists)
        pulumi.set(__self__, "total_count", total_count)

    @property
    @pulumi.getter(name="gatewayGroupLists")
    def gateway_group_lists(self) -> Sequence['outputs.GetGroupsResultGatewayGroupListResult']:
        """
        group list of gateway.
        """
        return pulumi.get(self, "gateway_group_lists")

    @property
    @pulumi.getter(name="totalCount")
    def total_count(self) -> int:
        """
        total count.
        """
        return pulumi.get(self, "total_count")


@pulumi.output_type
class GetGroupsResultGatewayGroupListResult(dict):
    def __init__(__self__, *,
                 binding_strategies: Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyResult'],
                 create_time: str,
                 description: str,
                 gateway_id: str,
                 group_id: str,
                 internet_max_bandwidth_out: int,
                 is_first_group: int,
                 modify_time: str,
                 name: str,
                 node_configs: Sequence['outputs.GetGroupsResultGatewayGroupListNodeConfigResult'],
                 status: str,
                 subnet_ids: str):
        """
        :param Sequence['GetGroupsResultGatewayGroupListBindingStrategyArgs'] binding_strategies: associated strategy informationNote: This field may return null, indicating that a valid value is not available.
        :param str create_time: group create time.
        :param str description: group description.
        :param str gateway_id: gateway ID.
        :param str group_id: group Id.
        :param int internet_max_bandwidth_out: public network outbound traffic bandwidth.
        :param int is_first_group: whether it is the default group- 0: false.- 1: yes.
        :param str modify_time: modify time.
        :param str name: filter name.
        :param Sequence['GetGroupsResultGatewayGroupListNodeConfigArgs'] node_configs: group node configration.
        :param str status: group status.
        :param str subnet_ids: subnet IDs.
        """
        pulumi.set(__self__, "binding_strategies", binding_strategies)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        pulumi.set(__self__, "is_first_group", is_first_group)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "node_configs", node_configs)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="bindingStrategies")
    def binding_strategies(self) -> Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyResult']:
        """
        associated strategy informationNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "binding_strategies")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        group create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        group Id.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> int:
        """
        public network outbound traffic bandwidth.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @property
    @pulumi.getter(name="isFirstGroup")
    def is_first_group(self) -> int:
        """
        whether it is the default group- 0: false.- 1: yes.
        """
        return pulumi.get(self, "is_first_group")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        modify time.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        filter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nodeConfigs")
    def node_configs(self) -> Sequence['outputs.GetGroupsResultGatewayGroupListNodeConfigResult']:
        """
        group node configration.
        """
        return pulumi.get(self, "node_configs")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        group status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> str:
        """
        subnet IDs.
        """
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class GetGroupsResultGatewayGroupListBindingStrategyResult(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyConfigResult'],
                 create_time: str,
                 cron_configs: Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyCronConfigResult'],
                 description: str,
                 gateway_id: str,
                 max_replicas: int,
                 modify_time: str,
                 strategy_id: str,
                 strategy_name: str):
        """
        :param Sequence['GetGroupsResultGatewayGroupListBindingStrategyConfigArgs'] configs: auto scaling configurationNote: This field may return null, indicating that a valid value is not available.
        :param str create_time: group create time.
        :param Sequence['GetGroupsResultGatewayGroupListBindingStrategyCronConfigArgs'] cron_configs: timing scaling configurationNote: This field may return null, indicating that a valid value is not available.
        :param str description: group description.
        :param str gateway_id: gateway ID.
        :param int max_replicas: maximum number of replicas.
        :param str modify_time: modify time.
        :param str strategy_id: strategy ID.
        :param str strategy_name: strategy nameNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "cron_configs", cron_configs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "strategy_id", strategy_id)
        pulumi.set(__self__, "strategy_name", strategy_name)

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyConfigResult']:
        """
        auto scaling configurationNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        group create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="cronConfigs")
    def cron_configs(self) -> Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyCronConfigResult']:
        """
        timing scaling configurationNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "cron_configs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        group description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        maximum number of replicas.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        modify time.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> str:
        """
        strategy ID.
        """
        return pulumi.get(self, "strategy_id")

    @property
    @pulumi.getter(name="strategyName")
    def strategy_name(self) -> str:
        """
        strategy nameNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "strategy_name")


@pulumi.output_type
class GetGroupsResultGatewayGroupListBindingStrategyConfigResult(dict):
    def __init__(__self__, *,
                 auto_scaler_id: str,
                 create_time: str,
                 enabled: bool,
                 max_replicas: int,
                 metrics: Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyConfigMetricResult'],
                 modify_time: str,
                 strategy_id: str):
        """
        :param str auto_scaler_id: auto scaler IDNote: This field may return null, indicating that a valid value is not available.
        :param str create_time: group create time.
        :param bool enabled: whether to enable timing auto scaling.
        :param int max_replicas: maximum number of replicas.
        :param Sequence['GetGroupsResultGatewayGroupListBindingStrategyConfigMetricArgs'] metrics: metric listNote: This field may return null, indicating that a valid value is not available.
        :param str modify_time: modify time.
        :param str strategy_id: strategy ID.
        """
        pulumi.set(__self__, "auto_scaler_id", auto_scaler_id)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_replicas", max_replicas)
        pulumi.set(__self__, "metrics", metrics)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter(name="autoScalerId")
    def auto_scaler_id(self) -> str:
        """
        auto scaler IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "auto_scaler_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        group create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable timing auto scaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> int:
        """
        maximum number of replicas.
        """
        return pulumi.get(self, "max_replicas")

    @property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyConfigMetricResult']:
        """
        metric listNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        modify time.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> str:
        """
        strategy ID.
        """
        return pulumi.get(self, "strategy_id")


@pulumi.output_type
class GetGroupsResultGatewayGroupListBindingStrategyConfigMetricResult(dict):
    def __init__(__self__, *,
                 resource_name: str,
                 target_type: str,
                 target_value: int,
                 type: str):
        """
        :param str resource_name: metric resource nameNote: This field may return null, indicating that a valid value is not available.
        :param str target_type: metric target typeNote: This field may return null, indicating that a valid value is not available.
        :param int target_value: metric target valueNote: This field may return null, indicating that a valid value is not available.
        :param str type: metric typeNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "target_type", target_type)
        pulumi.set(__self__, "target_value", target_value)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> str:
        """
        metric resource nameNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "resource_name")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        """
        metric target typeNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_type")

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> int:
        """
        metric target valueNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_value")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        metric typeNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGroupsResultGatewayGroupListBindingStrategyCronConfigResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 enabled: bool,
                 modify_time: str,
                 params: Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyCronConfigParamResult'],
                 strategy_id: str):
        """
        :param str create_time: group create time.
        :param bool enabled: whether to enable timing auto scaling.
        :param str modify_time: modify time.
        :param Sequence['GetGroupsResultGatewayGroupListBindingStrategyCronConfigParamArgs'] params: params of timing auto scaling.
        :param str strategy_id: strategy ID.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        group create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        whether to enable timing auto scaling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        modify time.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter
    def params(self) -> Sequence['outputs.GetGroupsResultGatewayGroupListBindingStrategyCronConfigParamResult']:
        """
        params of timing auto scaling.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> str:
        """
        strategy ID.
        """
        return pulumi.get(self, "strategy_id")


@pulumi.output_type
class GetGroupsResultGatewayGroupListBindingStrategyCronConfigParamResult(dict):
    def __init__(__self__, *,
                 crontab: str,
                 period: str,
                 start_at: str,
                 target_replicas: int):
        """
        :param str crontab: cron expression.
        :param str period: period of timing auto scaling.
        :param str start_at: start time.
        :param int target_replicas: target replicas.
        """
        pulumi.set(__self__, "crontab", crontab)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "start_at", start_at)
        pulumi.set(__self__, "target_replicas", target_replicas)

    @property
    @pulumi.getter
    def crontab(self) -> str:
        """
        cron expression.
        """
        return pulumi.get(self, "crontab")

    @property
    @pulumi.getter
    def period(self) -> str:
        """
        period of timing auto scaling.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_at")

    @property
    @pulumi.getter(name="targetReplicas")
    def target_replicas(self) -> int:
        """
        target replicas.
        """
        return pulumi.get(self, "target_replicas")


@pulumi.output_type
class GetGroupsResultGatewayGroupListNodeConfigResult(dict):
    def __init__(__self__, *,
                 number: int,
                 specification: str):
        """
        :param int number: group node number, 2-50.
        :param str specification: group specification, 1c2g|2c4g|4c8g|8c16g.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "specification", specification)

    @property
    @pulumi.getter
    def number(self) -> int:
        """
        group node number, 2-50.
        """
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def specification(self) -> str:
        """
        group specification, 1c2g|2c4g|4c8g|8c16g.
        """
        return pulumi.get(self, "specification")


@pulumi.output_type
class GetNacosReplicasReplicaResult(dict):
    def __init__(__self__, *,
                 name: str,
                 role: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str,
                 zone: str,
                 zone_id: str):
        """
        :param str name: name.
        :param str role: role.
        :param str status: status.
        :param str subnet_id: Subnet IDNote: This field may return null, indicating that a valid value is not available.
        :param str vpc_id: VPC IDNote: This field may return null, indicating that a valid value is not available.
        :param str zone: Available area NameNote: This field may return null, indicating that a valid value is not available.
        :param str zone_id: Available area IDNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Available area NameNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Available area IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetNacosServerInterfacesContentResult(dict):
    def __init__(__self__, *,
                 interface: str):
        """
        :param str interface: interface nameNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        interface nameNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "interface")


@pulumi.output_type
class GetZookeeperReplicasReplicaResult(dict):
    def __init__(__self__, *,
                 alias_name: str,
                 name: str,
                 role: str,
                 status: str,
                 subnet_id: str,
                 vpc_id: str,
                 zone: str,
                 zone_id: str):
        """
        :param str alias_name: aliasNote: This field may return null, indicating that a valid value is not available.
        :param str name: name.
        :param str role: role.
        :param str status: status.
        :param str subnet_id: Subnet IDNote: This field may return null, indicating that a valid value is not available.
        :param str vpc_id: VPC IDNote: This field may return null, indicating that a valid value is not available.
        :param str zone: Available area IDNote: This field may return null, indicating that a valid value is not available.
        :param str zone_id: Available area IDNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "alias_name", alias_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> str:
        """
        aliasNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "alias_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        Subnet IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        VPC IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Available area IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        Available area IDNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetZookeeperServerInterfacesContentResult(dict):
    def __init__(__self__, *,
                 interface: str):
        """
        :param str interface: interface nameNote: This field may return null, indicating that a valid value is not available.
        """
        pulumi.set(__self__, "interface", interface)

    @property
    @pulumi.getter
    def interface(self) -> str:
        """
        interface nameNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "interface")


