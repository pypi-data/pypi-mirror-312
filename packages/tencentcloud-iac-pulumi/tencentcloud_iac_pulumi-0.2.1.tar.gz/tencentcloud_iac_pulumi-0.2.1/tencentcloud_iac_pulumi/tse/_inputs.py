# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'CngwCanaryRuleCanaryRuleArgs',
    'CngwCanaryRuleCanaryRuleBalancedServiceListArgs',
    'CngwCanaryRuleCanaryRuleConditionListArgs',
    'CngwGatewayInstancePortArgs',
    'CngwGatewayInternetConfigArgs',
    'CngwGatewayNodeConfigArgs',
    'CngwGatewayVpcConfigArgs',
    'CngwGroupInternetConfigArgs',
    'CngwGroupNodeConfigArgs',
    'CngwNetworkAccessControlAccessControlArgs',
    'CngwRouteHeaderArgs',
    'CngwRouteRateLimitLimitDetailArgs',
    'CngwRouteRateLimitLimitDetailExternalRedisArgs',
    'CngwRouteRateLimitLimitDetailQpsThresholdArgs',
    'CngwRouteRateLimitLimitDetailRateLimitResponseArgs',
    'CngwRouteRateLimitLimitDetailRateLimitResponseHeaderArgs',
    'CngwServiceRateLimitLimitDetailArgs',
    'CngwServiceRateLimitLimitDetailExternalRedisArgs',
    'CngwServiceRateLimitLimitDetailQpsThresholdArgs',
    'CngwServiceRateLimitLimitDetailRateLimitResponseArgs',
    'CngwServiceRateLimitLimitDetailRateLimitResponseHeaderArgs',
    'CngwServiceUpstreamInfoArgs',
    'CngwServiceUpstreamInfoTargetArgs',
    'CngwStrategyConfigArgs',
    'CngwStrategyConfigBehaviorArgs',
    'CngwStrategyConfigBehaviorScaleDownArgs',
    'CngwStrategyConfigBehaviorScaleDownPolicyArgs',
    'CngwStrategyConfigBehaviorScaleUpArgs',
    'CngwStrategyConfigBehaviorScaleUpPolicyArgs',
    'CngwStrategyConfigMetricArgs',
    'CngwStrategyCronConfigArgs',
    'CngwStrategyCronConfigParamArgs',
    'InstanceEngineRegionInfoArgs',
    'InstanceEngineRegionInfoVpcInfoArgs',
    'GetGatewayCertificatesFilterArgs',
    'GetGatewayServicesFilterArgs',
    'GetGatewaysFilterArgs',
    'GetGroupsFilterArgs',
]

@pulumi.input_type
class CngwCanaryRuleCanaryRuleArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 priority: pulumi.Input[int],
                 balanced_service_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleBalancedServiceListArgs']]]] = None,
                 condition_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleConditionListArgs']]]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: the status of canary rule.
        :param pulumi.Input[int] priority: priority. The value ranges from 0 to 100; the larger the value, the higher the priority; the priority cannot be repeated between different rules.
        :param pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleBalancedServiceListArgs']]] balanced_service_lists: service weight configuration.
        :param pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleConditionListArgs']]] condition_lists: parameter matching condition list.
        :param pulumi.Input[str] service_id: service ID.
        :param pulumi.Input[str] service_name: service name.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "priority", priority)
        if balanced_service_lists is not None:
            pulumi.set(__self__, "balanced_service_lists", balanced_service_lists)
        if condition_lists is not None:
            pulumi.set(__self__, "condition_lists", condition_lists)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        the status of canary rule.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        priority. The value ranges from 0 to 100; the larger the value, the higher the priority; the priority cannot be repeated between different rules.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="balancedServiceLists")
    def balanced_service_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleBalancedServiceListArgs']]]]:
        """
        service weight configuration.
        """
        return pulumi.get(self, "balanced_service_lists")

    @balanced_service_lists.setter
    def balanced_service_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleBalancedServiceListArgs']]]]):
        pulumi.set(self, "balanced_service_lists", value)

    @property
    @pulumi.getter(name="conditionLists")
    def condition_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleConditionListArgs']]]]:
        """
        parameter matching condition list.
        """
        return pulumi.get(self, "condition_lists")

    @condition_lists.setter
    def condition_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwCanaryRuleCanaryRuleConditionListArgs']]]]):
        pulumi.set(self, "condition_lists", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        service ID.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        service name.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class CngwCanaryRuleCanaryRuleBalancedServiceListArgs:
    def __init__(__self__, *,
                 percent: Optional[pulumi.Input[float]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 upstream_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] percent: percent, 10 is 10%, valid values:0 to 100.
        :param pulumi.Input[str] service_id: service ID, required when used as an input parameter.
        :param pulumi.Input[str] service_name: service name, meaningless when used as an input parameter.
        :param pulumi.Input[str] upstream_name: upstream name, meaningless when used as an input parameter.
        """
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if upstream_name is not None:
            pulumi.set(__self__, "upstream_name", upstream_name)

    @property
    @pulumi.getter
    def percent(self) -> Optional[pulumi.Input[float]]:
        """
        percent, 10 is 10%, valid values:0 to 100.
        """
        return pulumi.get(self, "percent")

    @percent.setter
    def percent(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percent", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        service ID, required when used as an input parameter.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        service name, meaningless when used as an input parameter.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="upstreamName")
    def upstream_name(self) -> Optional[pulumi.Input[str]]:
        """
        upstream name, meaningless when used as an input parameter.
        """
        return pulumi.get(self, "upstream_name")

    @upstream_name.setter
    def upstream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_name", value)


@pulumi.input_type
class CngwCanaryRuleCanaryRuleConditionListArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 global_config_id: Optional[pulumi.Input[str]] = None,
                 global_config_name: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: type.Reference value:`path`,`method`,`query`,`header`,`cookie`,`body`,`system`.
        :param pulumi.Input[str] delimiter: delimiter. valid when operator is in or not in, reference value:`,`, `;`,`\\n`.
        :param pulumi.Input[str] global_config_id: global configuration ID.
        :param pulumi.Input[str] global_config_name: global configuration name.
        :param pulumi.Input[str] key: parameter name.
        :param pulumi.Input[str] operator: operator.Reference value:`le`,`eq`,`lt`,`ne`,`ge`,`gt`,`regex`,`exists`,`in`,`not in`,`prefix`,`exact`,`regex`.
        :param pulumi.Input[str] value: parameter value.
        """
        pulumi.set(__self__, "type", type)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if global_config_id is not None:
            pulumi.set(__self__, "global_config_id", global_config_id)
        if global_config_name is not None:
            pulumi.set(__self__, "global_config_name", global_config_name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        type.Reference value:`path`,`method`,`query`,`header`,`cookie`,`body`,`system`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        delimiter. valid when operator is in or not in, reference value:`,`, `;`,`\\n`.
        """
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="globalConfigId")
    def global_config_id(self) -> Optional[pulumi.Input[str]]:
        """
        global configuration ID.
        """
        return pulumi.get(self, "global_config_id")

    @global_config_id.setter
    def global_config_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_config_id", value)

    @property
    @pulumi.getter(name="globalConfigName")
    def global_config_name(self) -> Optional[pulumi.Input[str]]:
        """
        global configuration name.
        """
        return pulumi.get(self, "global_config_name")

    @global_config_name.setter
    def global_config_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_config_name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        parameter name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        operator.Reference value:`le`,`eq`,`lt`,`ne`,`ge`,`gt`,`regex`,`exists`,`in`,`not in`,`prefix`,`exact`,`regex`.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        parameter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CngwGatewayInstancePortArgs:
    def __init__(__self__, *,
                 http_port: Optional[pulumi.Input[str]] = None,
                 https_port: Optional[pulumi.Input[str]] = None,
                 tcp_port: Optional[pulumi.Input[str]] = None,
                 udp_port: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] http_port: Http port range.
        :param pulumi.Input[str] https_port: Https port range.
        :param pulumi.Input[str] tcp_port: Tcp port range.
        :param pulumi.Input[str] udp_port: Udp port range.
        """
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if https_port is not None:
            pulumi.set(__self__, "https_port", https_port)
        if tcp_port is not None:
            pulumi.set(__self__, "tcp_port", tcp_port)
        if udp_port is not None:
            pulumi.set(__self__, "udp_port", udp_port)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[pulumi.Input[str]]:
        """
        Http port range.
        """
        return pulumi.get(self, "http_port")

    @http_port.setter
    def http_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_port", value)

    @property
    @pulumi.getter(name="httpsPort")
    def https_port(self) -> Optional[pulumi.Input[str]]:
        """
        Https port range.
        """
        return pulumi.get(self, "https_port")

    @https_port.setter
    def https_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_port", value)

    @property
    @pulumi.getter(name="tcpPort")
    def tcp_port(self) -> Optional[pulumi.Input[str]]:
        """
        Tcp port range.
        """
        return pulumi.get(self, "tcp_port")

    @tcp_port.setter
    def tcp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_port", value)

    @property
    @pulumi.getter(name="udpPort")
    def udp_port(self) -> Optional[pulumi.Input[str]]:
        """
        Udp port range.
        """
        return pulumi.get(self, "udp_port")

    @udp_port.setter
    def udp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_port", value)


@pulumi.input_type
class CngwGatewayInternetConfigArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 internet_address_version: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 internet_pay_mode: Optional[pulumi.Input[str]] = None,
                 master_zone_id: Optional[pulumi.Input[str]] = None,
                 multi_zone_flag: Optional[pulumi.Input[bool]] = None,
                 sla_type: Optional[pulumi.Input[str]] = None,
                 slave_zone_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of clb.
        :param pulumi.Input[str] internet_address_version: internet type. Reference value: `IPV4`(default value), `IPV6`.
        :param pulumi.Input[int] internet_max_bandwidth_out: public network bandwidth.
        :param pulumi.Input[str] internet_pay_mode: trade type of internet. Reference value: `BANDWIDTH`, `TRAFFIC`(default value).
        :param pulumi.Input[str] master_zone_id: primary availability zone.
        :param pulumi.Input[bool] multi_zone_flag: Whether load balancing has multiple availability zones.
        :param pulumi.Input[str] sla_type: specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        :param pulumi.Input[str] slave_zone_id: alternate availability zone.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internet_address_version is not None:
            pulumi.set(__self__, "internet_address_version", internet_address_version)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if internet_pay_mode is not None:
            pulumi.set(__self__, "internet_pay_mode", internet_pay_mode)
        if master_zone_id is not None:
            pulumi.set(__self__, "master_zone_id", master_zone_id)
        if multi_zone_flag is not None:
            pulumi.set(__self__, "multi_zone_flag", multi_zone_flag)
        if sla_type is not None:
            pulumi.set(__self__, "sla_type", sla_type)
        if slave_zone_id is not None:
            pulumi.set(__self__, "slave_zone_id", slave_zone_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of clb.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="internetAddressVersion")
    def internet_address_version(self) -> Optional[pulumi.Input[str]]:
        """
        internet type. Reference value: `IPV4`(default value), `IPV6`.
        """
        return pulumi.get(self, "internet_address_version")

    @internet_address_version.setter
    def internet_address_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_address_version", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        public network bandwidth.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="internetPayMode")
    def internet_pay_mode(self) -> Optional[pulumi.Input[str]]:
        """
        trade type of internet. Reference value: `BANDWIDTH`, `TRAFFIC`(default value).
        """
        return pulumi.get(self, "internet_pay_mode")

    @internet_pay_mode.setter
    def internet_pay_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_pay_mode", value)

    @property
    @pulumi.getter(name="masterZoneId")
    def master_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        primary availability zone.
        """
        return pulumi.get(self, "master_zone_id")

    @master_zone_id.setter
    def master_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_zone_id", value)

    @property
    @pulumi.getter(name="multiZoneFlag")
    def multi_zone_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether load balancing has multiple availability zones.
        """
        return pulumi.get(self, "multi_zone_flag")

    @multi_zone_flag.setter
    def multi_zone_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_zone_flag", value)

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> Optional[pulumi.Input[str]]:
        """
        specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        """
        return pulumi.get(self, "sla_type")

    @sla_type.setter
    def sla_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_type", value)

    @property
    @pulumi.getter(name="slaveZoneId")
    def slave_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        alternate availability zone.
        """
        return pulumi.get(self, "slave_zone_id")

    @slave_zone_id.setter
    def slave_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_zone_id", value)


@pulumi.input_type
class CngwGatewayNodeConfigArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 specification: pulumi.Input[str]):
        """
        :param pulumi.Input[int] number: node number, 2-50.
        :param pulumi.Input[str] specification: specification, 1c2g|2c4g|4c8g|8c16g.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "specification", specification)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        """
        node number, 2-50.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def specification(self) -> pulumi.Input[str]:
        """
        specification, 1c2g|2c4g|4c8g|8c16g.
        """
        return pulumi.get(self, "specification")

    @specification.setter
    def specification(self, value: pulumi.Input[str]):
        pulumi.set(self, "specification", value)


@pulumi.input_type
class CngwGatewayVpcConfigArgs:
    def __init__(__self__, *,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        :param pulumi.Input[str] vpc_id: VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class CngwGroupInternetConfigArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 internet_address_version: Optional[pulumi.Input[str]] = None,
                 internet_max_bandwidth_out: Optional[pulumi.Input[int]] = None,
                 internet_pay_mode: Optional[pulumi.Input[str]] = None,
                 master_zone_id: Optional[pulumi.Input[str]] = None,
                 multi_zone_flag: Optional[pulumi.Input[bool]] = None,
                 sla_type: Optional[pulumi.Input[str]] = None,
                 slave_zone_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: description of clb.
        :param pulumi.Input[str] internet_address_version: internet type. Reference value:- IPV4 (default value)- IPV6.
        :param pulumi.Input[int] internet_max_bandwidth_out: public network bandwidth.
        :param pulumi.Input[str] internet_pay_mode: trade type of internet. Reference value:- BANDWIDTH- TRAFFIC (default value).
        :param pulumi.Input[str] master_zone_id: primary availability zone.
        :param pulumi.Input[bool] multi_zone_flag: Whether load balancing has multiple availability zones.
        :param pulumi.Input[str] sla_type: specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        :param pulumi.Input[str] slave_zone_id: alternate availability zone.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if internet_address_version is not None:
            pulumi.set(__self__, "internet_address_version", internet_address_version)
        if internet_max_bandwidth_out is not None:
            pulumi.set(__self__, "internet_max_bandwidth_out", internet_max_bandwidth_out)
        if internet_pay_mode is not None:
            pulumi.set(__self__, "internet_pay_mode", internet_pay_mode)
        if master_zone_id is not None:
            pulumi.set(__self__, "master_zone_id", master_zone_id)
        if multi_zone_flag is not None:
            pulumi.set(__self__, "multi_zone_flag", multi_zone_flag)
        if sla_type is not None:
            pulumi.set(__self__, "sla_type", sla_type)
        if slave_zone_id is not None:
            pulumi.set(__self__, "slave_zone_id", slave_zone_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        description of clb.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="internetAddressVersion")
    def internet_address_version(self) -> Optional[pulumi.Input[str]]:
        """
        internet type. Reference value:- IPV4 (default value)- IPV6.
        """
        return pulumi.get(self, "internet_address_version")

    @internet_address_version.setter
    def internet_address_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_address_version", value)

    @property
    @pulumi.getter(name="internetMaxBandwidthOut")
    def internet_max_bandwidth_out(self) -> Optional[pulumi.Input[int]]:
        """
        public network bandwidth.
        """
        return pulumi.get(self, "internet_max_bandwidth_out")

    @internet_max_bandwidth_out.setter
    def internet_max_bandwidth_out(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "internet_max_bandwidth_out", value)

    @property
    @pulumi.getter(name="internetPayMode")
    def internet_pay_mode(self) -> Optional[pulumi.Input[str]]:
        """
        trade type of internet. Reference value:- BANDWIDTH- TRAFFIC (default value).
        """
        return pulumi.get(self, "internet_pay_mode")

    @internet_pay_mode.setter
    def internet_pay_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_pay_mode", value)

    @property
    @pulumi.getter(name="masterZoneId")
    def master_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        primary availability zone.
        """
        return pulumi.get(self, "master_zone_id")

    @master_zone_id.setter
    def master_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_zone_id", value)

    @property
    @pulumi.getter(name="multiZoneFlag")
    def multi_zone_flag(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether load balancing has multiple availability zones.
        """
        return pulumi.get(self, "multi_zone_flag")

    @multi_zone_flag.setter
    def multi_zone_flag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_zone_flag", value)

    @property
    @pulumi.getter(name="slaType")
    def sla_type(self) -> Optional[pulumi.Input[str]]:
        """
        specification type of clb. Default shared type when this parameter is empty. Reference value:- SLA LCU-supported.
        """
        return pulumi.get(self, "sla_type")

    @sla_type.setter
    def sla_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sla_type", value)

    @property
    @pulumi.getter(name="slaveZoneId")
    def slave_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        alternate availability zone.
        """
        return pulumi.get(self, "slave_zone_id")

    @slave_zone_id.setter
    def slave_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slave_zone_id", value)


@pulumi.input_type
class CngwGroupNodeConfigArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 specification: pulumi.Input[str]):
        """
        :param pulumi.Input[int] number: group node number, 2-50.
        :param pulumi.Input[str] specification: group specification, 1c2g|2c4g|4c8g|8c16g.
        """
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "specification", specification)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        """
        group node number, 2-50.
        """
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter
    def specification(self) -> pulumi.Input[str]:
        """
        group specification, 1c2g|2c4g|4c8g|8c16g.
        """
        return pulumi.get(self, "specification")

    @specification.setter
    def specification(self, value: pulumi.Input[str]):
        pulumi.set(self, "specification", value)


@pulumi.input_type
class CngwNetworkAccessControlAccessControlArgs:
    def __init__(__self__, *,
                 cidr_black_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cidr_white_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidr_black_lists: Black list.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidr_white_lists: White list.
        :param pulumi.Input[str] mode: Access mode: `Whitelist`, `Blacklist`.
        """
        if cidr_black_lists is not None:
            pulumi.set(__self__, "cidr_black_lists", cidr_black_lists)
        if cidr_white_lists is not None:
            pulumi.set(__self__, "cidr_white_lists", cidr_white_lists)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="cidrBlackLists")
    def cidr_black_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Black list.
        """
        return pulumi.get(self, "cidr_black_lists")

    @cidr_black_lists.setter
    def cidr_black_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidr_black_lists", value)

    @property
    @pulumi.getter(name="cidrWhiteLists")
    def cidr_white_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        White list.
        """
        return pulumi.get(self, "cidr_white_lists")

    @cidr_white_lists.setter
    def cidr_white_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidr_white_lists", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Access mode: `Whitelist`, `Blacklist`.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class CngwRouteHeaderArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: key of header.
        :param pulumi.Input[str] value: value of header.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key of header.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CngwRouteRateLimitLimitDetailArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 hide_client_headers: pulumi.Input[bool],
                 is_delay: pulumi.Input[bool],
                 limit_by: pulumi.Input[str],
                 qps_thresholds: pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailQpsThresholdArgs']]],
                 response_type: pulumi.Input[str],
                 external_redis: Optional[pulumi.Input['CngwRouteRateLimitLimitDetailExternalRedisArgs']] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 line_up_time: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 rate_limit_response: Optional[pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseArgs']] = None,
                 rate_limit_response_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: status of service rate limit.
        :param pulumi.Input[bool] hide_client_headers: whether to hide the headers of client.
        :param pulumi.Input[bool] is_delay: whether to enable request queuing.
        :param pulumi.Input[str] limit_by: basis for service rate limit.Reference value:`ip`,`service`,`consumer`,`credential`,`path`,`header`.
        :param pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailQpsThresholdArgs']]] qps_thresholds: qps threshold.
        :param pulumi.Input[str] response_type: response strategy.Reference value:`url`: forward request according to url,`text`: response configuration,`default`: return directly.
        :param pulumi.Input['CngwRouteRateLimitLimitDetailExternalRedisArgs'] external_redis: external redis information, maybe null.
        :param pulumi.Input[str] header: request headers that require rate limit.
        :param pulumi.Input[int] line_up_time: queue time.
        :param pulumi.Input[str] path: request paths that require rate limit.
        :param pulumi.Input[str] policy: counter policy.Reference value:`local`,`redis`,`external_redis`.
        :param pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseArgs'] rate_limit_response: response configuration, the response strategy is text, maybe null.
        :param pulumi.Input[str] rate_limit_response_url: request forwarding address, maybe null.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hide_client_headers", hide_client_headers)
        pulumi.set(__self__, "is_delay", is_delay)
        pulumi.set(__self__, "limit_by", limit_by)
        pulumi.set(__self__, "qps_thresholds", qps_thresholds)
        pulumi.set(__self__, "response_type", response_type)
        if external_redis is not None:
            pulumi.set(__self__, "external_redis", external_redis)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if line_up_time is not None:
            pulumi.set(__self__, "line_up_time", line_up_time)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if rate_limit_response is not None:
            pulumi.set(__self__, "rate_limit_response", rate_limit_response)
        if rate_limit_response_url is not None:
            pulumi.set(__self__, "rate_limit_response_url", rate_limit_response_url)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        status of service rate limit.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hideClientHeaders")
    def hide_client_headers(self) -> pulumi.Input[bool]:
        """
        whether to hide the headers of client.
        """
        return pulumi.get(self, "hide_client_headers")

    @hide_client_headers.setter
    def hide_client_headers(self, value: pulumi.Input[bool]):
        pulumi.set(self, "hide_client_headers", value)

    @property
    @pulumi.getter(name="isDelay")
    def is_delay(self) -> pulumi.Input[bool]:
        """
        whether to enable request queuing.
        """
        return pulumi.get(self, "is_delay")

    @is_delay.setter
    def is_delay(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_delay", value)

    @property
    @pulumi.getter(name="limitBy")
    def limit_by(self) -> pulumi.Input[str]:
        """
        basis for service rate limit.Reference value:`ip`,`service`,`consumer`,`credential`,`path`,`header`.
        """
        return pulumi.get(self, "limit_by")

    @limit_by.setter
    def limit_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "limit_by", value)

    @property
    @pulumi.getter(name="qpsThresholds")
    def qps_thresholds(self) -> pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailQpsThresholdArgs']]]:
        """
        qps threshold.
        """
        return pulumi.get(self, "qps_thresholds")

    @qps_thresholds.setter
    def qps_thresholds(self, value: pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailQpsThresholdArgs']]]):
        pulumi.set(self, "qps_thresholds", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> pulumi.Input[str]:
        """
        response strategy.Reference value:`url`: forward request according to url,`text`: response configuration,`default`: return directly.
        """
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_type", value)

    @property
    @pulumi.getter(name="externalRedis")
    def external_redis(self) -> Optional[pulumi.Input['CngwRouteRateLimitLimitDetailExternalRedisArgs']]:
        """
        external redis information, maybe null.
        """
        return pulumi.get(self, "external_redis")

    @external_redis.setter
    def external_redis(self, value: Optional[pulumi.Input['CngwRouteRateLimitLimitDetailExternalRedisArgs']]):
        pulumi.set(self, "external_redis", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        request headers that require rate limit.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="lineUpTime")
    def line_up_time(self) -> Optional[pulumi.Input[int]]:
        """
        queue time.
        """
        return pulumi.get(self, "line_up_time")

    @line_up_time.setter
    def line_up_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line_up_time", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        request paths that require rate limit.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        counter policy.Reference value:`local`,`redis`,`external_redis`.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="rateLimitResponse")
    def rate_limit_response(self) -> Optional[pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseArgs']]:
        """
        response configuration, the response strategy is text, maybe null.
        """
        return pulumi.get(self, "rate_limit_response")

    @rate_limit_response.setter
    def rate_limit_response(self, value: Optional[pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseArgs']]):
        pulumi.set(self, "rate_limit_response", value)

    @property
    @pulumi.getter(name="rateLimitResponseUrl")
    def rate_limit_response_url(self) -> Optional[pulumi.Input[str]]:
        """
        request forwarding address, maybe null.
        """
        return pulumi.get(self, "rate_limit_response_url")

    @rate_limit_response_url.setter
    def rate_limit_response_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_limit_response_url", value)


@pulumi.input_type
class CngwRouteRateLimitLimitDetailExternalRedisArgs:
    def __init__(__self__, *,
                 redis_host: pulumi.Input[str],
                 redis_password: pulumi.Input[str],
                 redis_port: pulumi.Input[int],
                 redis_timeout: pulumi.Input[int]):
        """
        :param pulumi.Input[str] redis_host: redis ip, maybe null.
        :param pulumi.Input[str] redis_password: redis password, maybe null.
        :param pulumi.Input[int] redis_port: redis port, maybe null.
        :param pulumi.Input[int] redis_timeout: redis timeout, unit: `ms`, maybe null.
        """
        pulumi.set(__self__, "redis_host", redis_host)
        pulumi.set(__self__, "redis_password", redis_password)
        pulumi.set(__self__, "redis_port", redis_port)
        pulumi.set(__self__, "redis_timeout", redis_timeout)

    @property
    @pulumi.getter(name="redisHost")
    def redis_host(self) -> pulumi.Input[str]:
        """
        redis ip, maybe null.
        """
        return pulumi.get(self, "redis_host")

    @redis_host.setter
    def redis_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "redis_host", value)

    @property
    @pulumi.getter(name="redisPassword")
    def redis_password(self) -> pulumi.Input[str]:
        """
        redis password, maybe null.
        """
        return pulumi.get(self, "redis_password")

    @redis_password.setter
    def redis_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "redis_password", value)

    @property
    @pulumi.getter(name="redisPort")
    def redis_port(self) -> pulumi.Input[int]:
        """
        redis port, maybe null.
        """
        return pulumi.get(self, "redis_port")

    @redis_port.setter
    def redis_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "redis_port", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> pulumi.Input[int]:
        """
        redis timeout, unit: `ms`, maybe null.
        """
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "redis_timeout", value)


@pulumi.input_type
class CngwRouteRateLimitLimitDetailQpsThresholdArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[int],
                 unit: pulumi.Input[str]):
        """
        :param pulumi.Input[int] max: the max threshold.
        :param pulumi.Input[str] unit: qps threshold unit.Reference value:`second`,`minute`,`hour`,`day`,`month`,`year`.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        the max threshold.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        qps threshold unit.Reference value:`second`,`minute`,`hour`,`day`,`month`,`year`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class CngwRouteRateLimitLimitDetailRateLimitResponseArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseHeaderArgs']]]] = None,
                 http_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] body: custom response body, maybe bull.
        :param pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseHeaderArgs']]] headers: headrs.
        :param pulumi.Input[int] http_status: http status code.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_status is not None:
            pulumi.set(__self__, "http_status", http_status)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        custom response body, maybe bull.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseHeaderArgs']]]]:
        """
        headrs.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwRouteRateLimitLimitDetailRateLimitResponseHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[pulumi.Input[int]]:
        """
        http status code.
        """
        return pulumi.get(self, "http_status")

    @http_status.setter
    def http_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_status", value)


@pulumi.input_type
class CngwRouteRateLimitLimitDetailRateLimitResponseHeaderArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: key of header.
        :param pulumi.Input[str] value: value of header.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key of header.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CngwServiceRateLimitLimitDetailArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 hide_client_headers: pulumi.Input[bool],
                 is_delay: pulumi.Input[bool],
                 limit_by: pulumi.Input[str],
                 qps_thresholds: pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailQpsThresholdArgs']]],
                 response_type: pulumi.Input[str],
                 external_redis: Optional[pulumi.Input['CngwServiceRateLimitLimitDetailExternalRedisArgs']] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 line_up_time: Optional[pulumi.Input[int]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 rate_limit_response: Optional[pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseArgs']] = None,
                 rate_limit_response_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] enabled: status of service rate limit.
        :param pulumi.Input[bool] hide_client_headers: whether to hide the headers of client.
        :param pulumi.Input[bool] is_delay: whether to enable request queuing.
        :param pulumi.Input[str] limit_by: basis for service rate limit.Reference value: `ip`, `service`, `consumer`, `credential`, `path`, `header`.
        :param pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailQpsThresholdArgs']]] qps_thresholds: qps threshold.
        :param pulumi.Input[str] response_type: response strategy.Reference value: `url`: forward request according to url, `text`: response configuration, `default`: return directly.
        :param pulumi.Input['CngwServiceRateLimitLimitDetailExternalRedisArgs'] external_redis: external redis information, maybe null.
        :param pulumi.Input[str] header: request headers that require rate limit.
        :param pulumi.Input[int] line_up_time: queue time.
        :param pulumi.Input[str] path: request paths that require rate limit.
        :param pulumi.Input[str] policy: counter policy.Reference value: `local`, `redis`, `external_redis`.
        :param pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseArgs'] rate_limit_response: response configuration, the response strategy is text, maybe null.
        :param pulumi.Input[str] rate_limit_response_url: request forwarding address, maybe null.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "hide_client_headers", hide_client_headers)
        pulumi.set(__self__, "is_delay", is_delay)
        pulumi.set(__self__, "limit_by", limit_by)
        pulumi.set(__self__, "qps_thresholds", qps_thresholds)
        pulumi.set(__self__, "response_type", response_type)
        if external_redis is not None:
            pulumi.set(__self__, "external_redis", external_redis)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if line_up_time is not None:
            pulumi.set(__self__, "line_up_time", line_up_time)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if rate_limit_response is not None:
            pulumi.set(__self__, "rate_limit_response", rate_limit_response)
        if rate_limit_response_url is not None:
            pulumi.set(__self__, "rate_limit_response_url", rate_limit_response_url)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        """
        status of service rate limit.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="hideClientHeaders")
    def hide_client_headers(self) -> pulumi.Input[bool]:
        """
        whether to hide the headers of client.
        """
        return pulumi.get(self, "hide_client_headers")

    @hide_client_headers.setter
    def hide_client_headers(self, value: pulumi.Input[bool]):
        pulumi.set(self, "hide_client_headers", value)

    @property
    @pulumi.getter(name="isDelay")
    def is_delay(self) -> pulumi.Input[bool]:
        """
        whether to enable request queuing.
        """
        return pulumi.get(self, "is_delay")

    @is_delay.setter
    def is_delay(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_delay", value)

    @property
    @pulumi.getter(name="limitBy")
    def limit_by(self) -> pulumi.Input[str]:
        """
        basis for service rate limit.Reference value: `ip`, `service`, `consumer`, `credential`, `path`, `header`.
        """
        return pulumi.get(self, "limit_by")

    @limit_by.setter
    def limit_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "limit_by", value)

    @property
    @pulumi.getter(name="qpsThresholds")
    def qps_thresholds(self) -> pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailQpsThresholdArgs']]]:
        """
        qps threshold.
        """
        return pulumi.get(self, "qps_thresholds")

    @qps_thresholds.setter
    def qps_thresholds(self, value: pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailQpsThresholdArgs']]]):
        pulumi.set(self, "qps_thresholds", value)

    @property
    @pulumi.getter(name="responseType")
    def response_type(self) -> pulumi.Input[str]:
        """
        response strategy.Reference value: `url`: forward request according to url, `text`: response configuration, `default`: return directly.
        """
        return pulumi.get(self, "response_type")

    @response_type.setter
    def response_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_type", value)

    @property
    @pulumi.getter(name="externalRedis")
    def external_redis(self) -> Optional[pulumi.Input['CngwServiceRateLimitLimitDetailExternalRedisArgs']]:
        """
        external redis information, maybe null.
        """
        return pulumi.get(self, "external_redis")

    @external_redis.setter
    def external_redis(self, value: Optional[pulumi.Input['CngwServiceRateLimitLimitDetailExternalRedisArgs']]):
        pulumi.set(self, "external_redis", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        """
        request headers that require rate limit.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="lineUpTime")
    def line_up_time(self) -> Optional[pulumi.Input[int]]:
        """
        queue time.
        """
        return pulumi.get(self, "line_up_time")

    @line_up_time.setter
    def line_up_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line_up_time", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        request paths that require rate limit.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        counter policy.Reference value: `local`, `redis`, `external_redis`.
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="rateLimitResponse")
    def rate_limit_response(self) -> Optional[pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseArgs']]:
        """
        response configuration, the response strategy is text, maybe null.
        """
        return pulumi.get(self, "rate_limit_response")

    @rate_limit_response.setter
    def rate_limit_response(self, value: Optional[pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseArgs']]):
        pulumi.set(self, "rate_limit_response", value)

    @property
    @pulumi.getter(name="rateLimitResponseUrl")
    def rate_limit_response_url(self) -> Optional[pulumi.Input[str]]:
        """
        request forwarding address, maybe null.
        """
        return pulumi.get(self, "rate_limit_response_url")

    @rate_limit_response_url.setter
    def rate_limit_response_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rate_limit_response_url", value)


@pulumi.input_type
class CngwServiceRateLimitLimitDetailExternalRedisArgs:
    def __init__(__self__, *,
                 redis_host: pulumi.Input[str],
                 redis_password: pulumi.Input[str],
                 redis_port: pulumi.Input[int],
                 redis_timeout: pulumi.Input[int]):
        """
        :param pulumi.Input[str] redis_host: redis ip, maybe null.
        :param pulumi.Input[str] redis_password: redis password, maybe null.
        :param pulumi.Input[int] redis_port: redis port, maybe null.
        :param pulumi.Input[int] redis_timeout: redis timeout, unit: `ms`, maybe null.
        """
        pulumi.set(__self__, "redis_host", redis_host)
        pulumi.set(__self__, "redis_password", redis_password)
        pulumi.set(__self__, "redis_port", redis_port)
        pulumi.set(__self__, "redis_timeout", redis_timeout)

    @property
    @pulumi.getter(name="redisHost")
    def redis_host(self) -> pulumi.Input[str]:
        """
        redis ip, maybe null.
        """
        return pulumi.get(self, "redis_host")

    @redis_host.setter
    def redis_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "redis_host", value)

    @property
    @pulumi.getter(name="redisPassword")
    def redis_password(self) -> pulumi.Input[str]:
        """
        redis password, maybe null.
        """
        return pulumi.get(self, "redis_password")

    @redis_password.setter
    def redis_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "redis_password", value)

    @property
    @pulumi.getter(name="redisPort")
    def redis_port(self) -> pulumi.Input[int]:
        """
        redis port, maybe null.
        """
        return pulumi.get(self, "redis_port")

    @redis_port.setter
    def redis_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "redis_port", value)

    @property
    @pulumi.getter(name="redisTimeout")
    def redis_timeout(self) -> pulumi.Input[int]:
        """
        redis timeout, unit: `ms`, maybe null.
        """
        return pulumi.get(self, "redis_timeout")

    @redis_timeout.setter
    def redis_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "redis_timeout", value)


@pulumi.input_type
class CngwServiceRateLimitLimitDetailQpsThresholdArgs:
    def __init__(__self__, *,
                 max: pulumi.Input[int],
                 unit: pulumi.Input[str]):
        """
        :param pulumi.Input[int] max: the max threshold.
        :param pulumi.Input[str] unit: qps threshold unit.Reference value:`second`, `minute`, `hour`, `day`, `month`, `year`.
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter
    def max(self) -> pulumi.Input[int]:
        """
        the max threshold.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: pulumi.Input[int]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        qps threshold unit.Reference value:`second`, `minute`, `hour`, `day`, `month`, `year`.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class CngwServiceRateLimitLimitDetailRateLimitResponseArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseHeaderArgs']]]] = None,
                 http_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] body: custom response body, maybe bull.
        :param pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseHeaderArgs']]] headers: headrs.
        :param pulumi.Input[int] http_status: http status code.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_status is not None:
            pulumi.set(__self__, "http_status", http_status)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        custom response body, maybe bull.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseHeaderArgs']]]]:
        """
        headrs.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwServiceRateLimitLimitDetailRateLimitResponseHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="httpStatus")
    def http_status(self) -> Optional[pulumi.Input[int]]:
        """
        http status code.
        """
        return pulumi.get(self, "http_status")

    @http_status.setter
    def http_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_status", value)


@pulumi.input_type
class CngwServiceRateLimitLimitDetailRateLimitResponseHeaderArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: key of header.
        :param pulumi.Input[str] value: value of header.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        key of header.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        value of header.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CngwServiceUpstreamInfoArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 auto_scaling_cvm_port: Optional[pulumi.Input[int]] = None,
                 auto_scaling_group_id: Optional[pulumi.Input[str]] = None,
                 auto_scaling_hook_status: Optional[pulumi.Input[str]] = None,
                 auto_scaling_tat_cmd_status: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 real_source_type: Optional[pulumi.Input[str]] = None,
                 scf_lambda_name: Optional[pulumi.Input[str]] = None,
                 scf_lambda_qualifier: Optional[pulumi.Input[str]] = None,
                 scf_namespace: Optional[pulumi.Input[str]] = None,
                 scf_type: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 slow_start: Optional[pulumi.Input[int]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 source_name: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input['CngwServiceUpstreamInfoTargetArgs']]]] = None):
        """
        :param pulumi.Input[str] algorithm: load balance algorithm,default: `round-robin`, `least-connections` and `consisten_hashing` also support.
        :param pulumi.Input[int] auto_scaling_cvm_port: auto scaling group port of cvm.
        :param pulumi.Input[str] auto_scaling_group_id: auto scaling group ID of cvm.
        :param pulumi.Input[str] auto_scaling_hook_status: hook status in auto scaling group of cvm.
        :param pulumi.Input[str] auto_scaling_tat_cmd_status: tat cmd status in auto scaling group of cvm.
        :param pulumi.Input[str] host: an IP address or domain name.
        :param pulumi.Input[str] namespace: namespace.
        :param pulumi.Input[int] port: backend service port.valid values: `1` to `65535`.
        :param pulumi.Input[str] real_source_type: exact source service type.
        :param pulumi.Input[str] scf_lambda_name: scf lambda name.
        :param pulumi.Input[str] scf_lambda_qualifier: scf lambda version.
        :param pulumi.Input[str] scf_namespace: scf lambda namespace.
        :param pulumi.Input[str] scf_type: scf lambda type.
        :param pulumi.Input[str] service_name: the name of the service in registry or kubernetes.
        :param pulumi.Input[int] slow_start: slow start time, unit: `second`, when it is enabled, weight of the node is increased from 1 to the target value gradually.
        :param pulumi.Input[str] source_id: service source ID.
        :param pulumi.Input[str] source_name: the name of source service.
        :param pulumi.Input[str] source_type: source service type.
        :param pulumi.Input[Sequence[pulumi.Input['CngwServiceUpstreamInfoTargetArgs']]] targets: provided when service type is IPList.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if auto_scaling_cvm_port is not None:
            pulumi.set(__self__, "auto_scaling_cvm_port", auto_scaling_cvm_port)
        if auto_scaling_group_id is not None:
            pulumi.set(__self__, "auto_scaling_group_id", auto_scaling_group_id)
        if auto_scaling_hook_status is not None:
            pulumi.set(__self__, "auto_scaling_hook_status", auto_scaling_hook_status)
        if auto_scaling_tat_cmd_status is not None:
            pulumi.set(__self__, "auto_scaling_tat_cmd_status", auto_scaling_tat_cmd_status)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if real_source_type is not None:
            pulumi.set(__self__, "real_source_type", real_source_type)
        if scf_lambda_name is not None:
            pulumi.set(__self__, "scf_lambda_name", scf_lambda_name)
        if scf_lambda_qualifier is not None:
            pulumi.set(__self__, "scf_lambda_qualifier", scf_lambda_qualifier)
        if scf_namespace is not None:
            pulumi.set(__self__, "scf_namespace", scf_namespace)
        if scf_type is not None:
            pulumi.set(__self__, "scf_type", scf_type)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if slow_start is not None:
            pulumi.set(__self__, "slow_start", slow_start)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if source_name is not None:
            pulumi.set(__self__, "source_name", source_name)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        load balance algorithm,default: `round-robin`, `least-connections` and `consisten_hashing` also support.
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="autoScalingCvmPort")
    def auto_scaling_cvm_port(self) -> Optional[pulumi.Input[int]]:
        """
        auto scaling group port of cvm.
        """
        return pulumi.get(self, "auto_scaling_cvm_port")

    @auto_scaling_cvm_port.setter
    def auto_scaling_cvm_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_scaling_cvm_port", value)

    @property
    @pulumi.getter(name="autoScalingGroupId")
    def auto_scaling_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        auto scaling group ID of cvm.
        """
        return pulumi.get(self, "auto_scaling_group_id")

    @auto_scaling_group_id.setter
    def auto_scaling_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_scaling_group_id", value)

    @property
    @pulumi.getter(name="autoScalingHookStatus")
    def auto_scaling_hook_status(self) -> Optional[pulumi.Input[str]]:
        """
        hook status in auto scaling group of cvm.
        """
        return pulumi.get(self, "auto_scaling_hook_status")

    @auto_scaling_hook_status.setter
    def auto_scaling_hook_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_scaling_hook_status", value)

    @property
    @pulumi.getter(name="autoScalingTatCmdStatus")
    def auto_scaling_tat_cmd_status(self) -> Optional[pulumi.Input[str]]:
        """
        tat cmd status in auto scaling group of cvm.
        """
        return pulumi.get(self, "auto_scaling_tat_cmd_status")

    @auto_scaling_tat_cmd_status.setter
    def auto_scaling_tat_cmd_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_scaling_tat_cmd_status", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        an IP address or domain name.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        backend service port.valid values: `1` to `65535`.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="realSourceType")
    def real_source_type(self) -> Optional[pulumi.Input[str]]:
        """
        exact source service type.
        """
        return pulumi.get(self, "real_source_type")

    @real_source_type.setter
    def real_source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "real_source_type", value)

    @property
    @pulumi.getter(name="scfLambdaName")
    def scf_lambda_name(self) -> Optional[pulumi.Input[str]]:
        """
        scf lambda name.
        """
        return pulumi.get(self, "scf_lambda_name")

    @scf_lambda_name.setter
    def scf_lambda_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scf_lambda_name", value)

    @property
    @pulumi.getter(name="scfLambdaQualifier")
    def scf_lambda_qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        scf lambda version.
        """
        return pulumi.get(self, "scf_lambda_qualifier")

    @scf_lambda_qualifier.setter
    def scf_lambda_qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scf_lambda_qualifier", value)

    @property
    @pulumi.getter(name="scfNamespace")
    def scf_namespace(self) -> Optional[pulumi.Input[str]]:
        """
        scf lambda namespace.
        """
        return pulumi.get(self, "scf_namespace")

    @scf_namespace.setter
    def scf_namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scf_namespace", value)

    @property
    @pulumi.getter(name="scfType")
    def scf_type(self) -> Optional[pulumi.Input[str]]:
        """
        scf lambda type.
        """
        return pulumi.get(self, "scf_type")

    @scf_type.setter
    def scf_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scf_type", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        the name of the service in registry or kubernetes.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="slowStart")
    def slow_start(self) -> Optional[pulumi.Input[int]]:
        """
        slow start time, unit: `second`, when it is enabled, weight of the node is increased from 1 to the target value gradually.
        """
        return pulumi.get(self, "slow_start")

    @slow_start.setter
    def slow_start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slow_start", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        service source ID.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="sourceName")
    def source_name(self) -> Optional[pulumi.Input[str]]:
        """
        the name of source service.
        """
        return pulumi.get(self, "source_name")

    @source_name.setter
    def source_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        """
        source service type.
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwServiceUpstreamInfoTargetArgs']]]]:
        """
        provided when service type is IPList.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwServiceUpstreamInfoTargetArgs']]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class CngwServiceUpstreamInfoTargetArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 weight: pulumi.Input[int],
                 created_time: Optional[pulumi.Input[str]] = None,
                 health: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: host.
        :param pulumi.Input[int] port: port.
        :param pulumi.Input[int] weight: weight.
        :param pulumi.Input[str] created_time: created time.
        :param pulumi.Input[str] health: health.
        :param pulumi.Input[str] source: source of target.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "weight", weight)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        host.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[str]]:
        """
        created time.
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input[str]]:
        """
        health.
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        source of target.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class CngwStrategyConfigArgs:
    def __init__(__self__, *,
                 behavior: Optional[pulumi.Input['CngwStrategyConfigBehaviorArgs']] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 max_replicas: Optional[pulumi.Input[int]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigMetricArgs']]]] = None,
                 modify_time: Optional[pulumi.Input[str]] = None,
                 strategy_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['CngwStrategyConfigBehaviorArgs'] behavior: behavior configuration of metric
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] create_time: create time
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[int] max_replicas: max number of replica for metric scaling.
        :param pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigMetricArgs']]] metrics: metric list.
        :param pulumi.Input[str] modify_time: modify time
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] strategy_id: strategy ID
               Note: This field may return null, indicating that a valid value is not available.
        """
        if behavior is not None:
            pulumi.set(__self__, "behavior", behavior)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if max_replicas is not None:
            pulumi.set(__self__, "max_replicas", max_replicas)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if modify_time is not None:
            pulumi.set(__self__, "modify_time", modify_time)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input['CngwStrategyConfigBehaviorArgs']]:
        """
        behavior configuration of metric
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input['CngwStrategyConfigBehaviorArgs']]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        create time
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="maxReplicas")
    def max_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        max number of replica for metric scaling.
        """
        return pulumi.get(self, "max_replicas")

    @max_replicas.setter
    def max_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_replicas", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigMetricArgs']]]]:
        """
        metric list.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigMetricArgs']]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> Optional[pulumi.Input[str]]:
        """
        modify time
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "modify_time")

    @modify_time.setter
    def modify_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "modify_time", value)

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        strategy ID
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_id", value)


@pulumi.input_type
class CngwStrategyConfigBehaviorArgs:
    def __init__(__self__, *,
                 scale_down: Optional[pulumi.Input['CngwStrategyConfigBehaviorScaleDownArgs']] = None,
                 scale_up: Optional[pulumi.Input['CngwStrategyConfigBehaviorScaleUpArgs']] = None):
        """
        :param pulumi.Input['CngwStrategyConfigBehaviorScaleDownArgs'] scale_down: configuration of down scale
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input['CngwStrategyConfigBehaviorScaleUpArgs'] scale_up: configuration of up scale
               Note: This field may return null, indicating that a valid value is not available.
        """
        if scale_down is not None:
            pulumi.set(__self__, "scale_down", scale_down)
        if scale_up is not None:
            pulumi.set(__self__, "scale_up", scale_up)

    @property
    @pulumi.getter(name="scaleDown")
    def scale_down(self) -> Optional[pulumi.Input['CngwStrategyConfigBehaviorScaleDownArgs']]:
        """
        configuration of down scale
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "scale_down")

    @scale_down.setter
    def scale_down(self, value: Optional[pulumi.Input['CngwStrategyConfigBehaviorScaleDownArgs']]):
        pulumi.set(self, "scale_down", value)

    @property
    @pulumi.getter(name="scaleUp")
    def scale_up(self) -> Optional[pulumi.Input['CngwStrategyConfigBehaviorScaleUpArgs']]:
        """
        configuration of up scale
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "scale_up")

    @scale_up.setter
    def scale_up(self, value: Optional[pulumi.Input['CngwStrategyConfigBehaviorScaleUpArgs']]):
        pulumi.set(self, "scale_up", value)


@pulumi.input_type
class CngwStrategyConfigBehaviorScaleDownArgs:
    def __init__(__self__, *,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleDownPolicyArgs']]]] = None,
                 select_policy: Optional[pulumi.Input[str]] = None,
                 stabilization_window_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleDownPolicyArgs']]] policies: policies of scale down
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] select_policy: type of policy, default value: max
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[int] stabilization_window_seconds: stability window time, unit:second, default 300 when scale down
               Note: This field may return null, indicating that a valid value is not available.
        """
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if select_policy is not None:
            pulumi.set(__self__, "select_policy", select_policy)
        if stabilization_window_seconds is not None:
            pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleDownPolicyArgs']]]]:
        """
        policies of scale down
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleDownPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> Optional[pulumi.Input[str]]:
        """
        type of policy, default value: max
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "select_policy")

    @select_policy.setter
    def select_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_policy", value)

    @property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        stability window time, unit:second, default 300 when scale down
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "stabilization_window_seconds")

    @stabilization_window_seconds.setter
    def stabilization_window_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stabilization_window_seconds", value)


@pulumi.input_type
class CngwStrategyConfigBehaviorScaleDownPolicyArgs:
    def __init__(__self__, *,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] period_seconds: period of scale up
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] type: type, default value: Pods
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[int] value: value
               Note: This field may return null, indicating that a valid value is not available.
        """
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        period of scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type, default value: Pods
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        value
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CngwStrategyConfigBehaviorScaleUpArgs:
    def __init__(__self__, *,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleUpPolicyArgs']]]] = None,
                 select_policy: Optional[pulumi.Input[str]] = None,
                 stabilization_window_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleUpPolicyArgs']]] policies: policies of scale up
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] select_policy: type of policy, default value: max
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[int] stabilization_window_seconds: stability window time, unit:second, default 0 when scale up
               Note: This field may return null, indicating that a valid value is not available.
        """
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if select_policy is not None:
            pulumi.set(__self__, "select_policy", select_policy)
        if stabilization_window_seconds is not None:
            pulumi.set(__self__, "stabilization_window_seconds", stabilization_window_seconds)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleUpPolicyArgs']]]]:
        """
        policies of scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyConfigBehaviorScaleUpPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="selectPolicy")
    def select_policy(self) -> Optional[pulumi.Input[str]]:
        """
        type of policy, default value: max
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "select_policy")

    @select_policy.setter
    def select_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "select_policy", value)

    @property
    @pulumi.getter(name="stabilizationWindowSeconds")
    def stabilization_window_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        stability window time, unit:second, default 0 when scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "stabilization_window_seconds")

    @stabilization_window_seconds.setter
    def stabilization_window_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stabilization_window_seconds", value)


@pulumi.input_type
class CngwStrategyConfigBehaviorScaleUpPolicyArgs:
    def __init__(__self__, *,
                 period_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] period_seconds: period of scale up
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] type: type, default value: Pods
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[int] value: value
               Note: This field may return null, indicating that a valid value is not available.
        """
        if period_seconds is not None:
            pulumi.set(__self__, "period_seconds", period_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="periodSeconds")
    def period_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        period of scale up
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "period_seconds")

    @period_seconds.setter
    def period_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        type, default value: Pods
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[int]]:
        """
        value
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CngwStrategyConfigMetricArgs:
    def __init__(__self__, *,
                 resource_name: Optional[pulumi.Input[str]] = None,
                 target_type: Optional[pulumi.Input[str]] = None,
                 target_value: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource_name: metric name. Reference value:
               - cpu
               - memory
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] target_type: target type of metric, currently only supports `Utilization`
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[int] target_value: target value of metric
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] type: metric type. Deafault value
               - Resource.
        """
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)
        if target_type is not None:
            pulumi.set(__self__, "target_type", target_type)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        metric name. Reference value:
        - cpu
        - memory
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> Optional[pulumi.Input[str]]:
        """
        target type of metric, currently only supports `Utilization`
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[pulumi.Input[int]]:
        """
        target value of metric
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        metric type. Deafault value
        - Resource.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class CngwStrategyCronConfigArgs:
    def __init__(__self__, *,
                 params: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyCronConfigParamArgs']]]] = None,
                 strategy_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CngwStrategyCronConfigParamArgs']]] params: parameter list of timed scaling
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] strategy_id: strategy ID
               Note: This field may return null, indicating that a valid value is not available.
        """
        if params is not None:
            pulumi.set(__self__, "params", params)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyCronConfigParamArgs']]]]:
        """
        parameter list of timed scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CngwStrategyCronConfigParamArgs']]]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        strategy ID
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_id", value)


@pulumi.input_type
class CngwStrategyCronConfigParamArgs:
    def __init__(__self__, *,
                 crontab: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 start_at: Optional[pulumi.Input[str]] = None,
                 target_replicas: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] crontab: cron expression of timed scaling, no input required
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] period: period of timed scaling
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[str] start_at: start time of timed scaling
               Note: This field may return null, indicating that a valid value is not available.
        :param pulumi.Input[int] target_replicas: the number of target nodes for the timed scaling. Do not exceed the max number of replica for metric scaling
               Note: This field may return null, indicating that a valid value is not available.
        """
        if crontab is not None:
            pulumi.set(__self__, "crontab", crontab)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if start_at is not None:
            pulumi.set(__self__, "start_at", start_at)
        if target_replicas is not None:
            pulumi.set(__self__, "target_replicas", target_replicas)

    @property
    @pulumi.getter
    def crontab(self) -> Optional[pulumi.Input[str]]:
        """
        cron expression of timed scaling, no input required
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "crontab")

    @crontab.setter
    def crontab(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crontab", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        """
        period of timed scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> Optional[pulumi.Input[str]]:
        """
        start time of timed scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "start_at")

    @start_at.setter
    def start_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_at", value)

    @property
    @pulumi.getter(name="targetReplicas")
    def target_replicas(self) -> Optional[pulumi.Input[int]]:
        """
        the number of target nodes for the timed scaling. Do not exceed the max number of replica for metric scaling
        Note: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "target_replicas")

    @target_replicas.setter
    def target_replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_replicas", value)


@pulumi.input_type
class InstanceEngineRegionInfoArgs:
    def __init__(__self__, *,
                 engine_region: pulumi.Input[str],
                 replica: pulumi.Input[int],
                 vpc_infos: pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]]):
        """
        :param pulumi.Input[str] engine_region: Engine node region.
        :param pulumi.Input[int] replica: The number of nodes allocated in this region.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]] vpc_infos: Cluster network information.
        """
        pulumi.set(__self__, "engine_region", engine_region)
        pulumi.set(__self__, "replica", replica)
        pulumi.set(__self__, "vpc_infos", vpc_infos)

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> pulumi.Input[str]:
        """
        Engine node region.
        """
        return pulumi.get(self, "engine_region")

    @engine_region.setter
    def engine_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "engine_region", value)

    @property
    @pulumi.getter
    def replica(self) -> pulumi.Input[int]:
        """
        The number of nodes allocated in this region.
        """
        return pulumi.get(self, "replica")

    @replica.setter
    def replica(self, value: pulumi.Input[int]):
        pulumi.set(self, "replica", value)

    @property
    @pulumi.getter(name="vpcInfos")
    def vpc_infos(self) -> pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]]:
        """
        Cluster network information.
        """
        return pulumi.get(self, "vpc_infos")

    @vpc_infos.setter
    def vpc_infos(self, value: pulumi.Input[Sequence[pulumi.Input['InstanceEngineRegionInfoVpcInfoArgs']]]):
        pulumi.set(self, "vpc_infos", value)


@pulumi.input_type
class InstanceEngineRegionInfoVpcInfoArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 intranet_address: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: Subnet ID.
        :param pulumi.Input[str] vpc_id: Vpc Id.
        :param pulumi.Input[str] intranet_address: Intranet access addressNote: This field may return null, indicating that a valid value is not available..
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if intranet_address is not None:
            pulumi.set(__self__, "intranet_address", intranet_address)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet ID.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Vpc Id.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> Optional[pulumi.Input[str]]:
        """
        Intranet access addressNote: This field may return null, indicating that a valid value is not available..
        """
        return pulumi.get(self, "intranet_address")

    @intranet_address.setter
    def intranet_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intranet_address", value)


@pulumi.input_type
class GetGatewayCertificatesFilterArgs:
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Filter name.
        :param str value: Filter value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Filter name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Filter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGatewayServicesFilterArgs:
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: filter name.
        :param str value: filter value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        filter name.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        filter value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetGatewaysFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: filter name.
        :param Sequence[str] values: filter value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        filter value.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetGroupsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        """
        :param str name: filter name.
        :param Sequence[str] values: filter values.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        filter values.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


