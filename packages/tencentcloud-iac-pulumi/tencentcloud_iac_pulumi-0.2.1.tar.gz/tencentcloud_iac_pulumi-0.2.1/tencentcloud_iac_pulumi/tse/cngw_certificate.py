# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CngwCertificateArgs', 'CngwCertificate']

@pulumi.input_type
class CngwCertificateArgs:
    def __init__(__self__, *,
                 bind_domains: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cert_id: pulumi.Input[str],
                 gateway_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CngwCertificate resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bind_domains: Domains of the binding.
        :param pulumi.Input[str] cert_id: Certificate ID of ssl platform.
        :param pulumi.Input[str] gateway_id: Gateway ID.
        :param pulumi.Input[str] name: Certificate name.
        """
        pulumi.set(__self__, "bind_domains", bind_domains)
        pulumi.set(__self__, "cert_id", cert_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="bindDomains")
    def bind_domains(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Domains of the binding.
        """
        return pulumi.get(self, "bind_domains")

    @bind_domains.setter
    def bind_domains(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "bind_domains", value)

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> pulumi.Input[str]:
        """
        Certificate ID of ssl platform.
        """
        return pulumi.get(self, "cert_id")

    @cert_id.setter
    def cert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cert_id", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        Gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CngwCertificateState:
    def __init__(__self__, *,
                 bind_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cert_id: Optional[pulumi.Input[str]] = None,
                 crt: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CngwCertificate resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bind_domains: Domains of the binding.
        :param pulumi.Input[str] cert_id: Certificate ID of ssl platform.
        :param pulumi.Input[str] crt: Pem format of certificate.
        :param pulumi.Input[str] gateway_id: Gateway ID.
        :param pulumi.Input[str] key: Private key of certificate.
        :param pulumi.Input[str] name: Certificate name.
        """
        if bind_domains is not None:
            pulumi.set(__self__, "bind_domains", bind_domains)
        if cert_id is not None:
            pulumi.set(__self__, "cert_id", cert_id)
        if crt is not None:
            pulumi.set(__self__, "crt", crt)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="bindDomains")
    def bind_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Domains of the binding.
        """
        return pulumi.get(self, "bind_domains")

    @bind_domains.setter
    def bind_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bind_domains", value)

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID of ssl platform.
        """
        return pulumi.get(self, "cert_id")

    @cert_id.setter
    def cert_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_id", value)

    @property
    @pulumi.getter
    def crt(self) -> Optional[pulumi.Input[str]]:
        """
        Pem format of certificate.
        """
        return pulumi.get(self, "crt")

    @crt.setter
    def crt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crt", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Private key of certificate.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class CngwCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bind_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cert_id: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tse cngw_certificate

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cngw_certificate = tencentcloud.tse.CngwCertificate("cngwCertificate",
            bind_domains=["example1.com"],
            cert_id="vYSQkJ3K",
            gateway_id="gateway-ddbb709b")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_certificate can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwCertificate:CngwCertificate cngw_certificate gatewayId#Id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bind_domains: Domains of the binding.
        :param pulumi.Input[str] cert_id: Certificate ID of ssl platform.
        :param pulumi.Input[str] gateway_id: Gateway ID.
        :param pulumi.Input[str] name: Certificate name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CngwCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tse cngw_certificate

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cngw_certificate = tencentcloud.tse.CngwCertificate("cngwCertificate",
            bind_domains=["example1.com"],
            cert_id="vYSQkJ3K",
            gateway_id="gateway-ddbb709b")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_certificate can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwCertificate:CngwCertificate cngw_certificate gatewayId#Id
        ```

        :param str resource_name: The name of the resource.
        :param CngwCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CngwCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bind_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cert_id: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CngwCertificateArgs.__new__(CngwCertificateArgs)

            if bind_domains is None and not opts.urn:
                raise TypeError("Missing required property 'bind_domains'")
            __props__.__dict__["bind_domains"] = bind_domains
            if cert_id is None and not opts.urn:
                raise TypeError("Missing required property 'cert_id'")
            __props__.__dict__["cert_id"] = cert_id
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["name"] = name
            __props__.__dict__["crt"] = None
            __props__.__dict__["key"] = None
        super(CngwCertificate, __self__).__init__(
            'tencentcloud:Tse/cngwCertificate:CngwCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bind_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cert_id: Optional[pulumi.Input[str]] = None,
            crt: Optional[pulumi.Input[str]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'CngwCertificate':
        """
        Get an existing CngwCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bind_domains: Domains of the binding.
        :param pulumi.Input[str] cert_id: Certificate ID of ssl platform.
        :param pulumi.Input[str] crt: Pem format of certificate.
        :param pulumi.Input[str] gateway_id: Gateway ID.
        :param pulumi.Input[str] key: Private key of certificate.
        :param pulumi.Input[str] name: Certificate name.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CngwCertificateState.__new__(_CngwCertificateState)

        __props__.__dict__["bind_domains"] = bind_domains
        __props__.__dict__["cert_id"] = cert_id
        __props__.__dict__["crt"] = crt
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        return CngwCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bindDomains")
    def bind_domains(self) -> pulumi.Output[Sequence[str]]:
        """
        Domains of the binding.
        """
        return pulumi.get(self, "bind_domains")

    @property
    @pulumi.getter(name="certId")
    def cert_id(self) -> pulumi.Output[str]:
        """
        Certificate ID of ssl platform.
        """
        return pulumi.get(self, "cert_id")

    @property
    @pulumi.getter
    def crt(self) -> pulumi.Output[str]:
        """
        Pem format of certificate.
        """
        return pulumi.get(self, "crt")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        Gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        Private key of certificate.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Certificate name.
        """
        return pulumi.get(self, "name")

