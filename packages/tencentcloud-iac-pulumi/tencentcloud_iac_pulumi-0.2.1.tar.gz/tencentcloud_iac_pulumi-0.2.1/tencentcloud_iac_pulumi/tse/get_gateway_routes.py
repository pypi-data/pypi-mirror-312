# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetGatewayRoutesResult',
    'AwaitableGetGatewayRoutesResult',
    'get_gateway_routes',
    'get_gateway_routes_output',
]

@pulumi.output_type
class GetGatewayRoutesResult:
    """
    A collection of values returned by getGatewayRoutes.
    """
    def __init__(__self__, gateway_id=None, id=None, result_output_file=None, results=None, route_name=None, service_name=None):
        if gateway_id and not isinstance(gateway_id, str):
            raise TypeError("Expected argument 'gateway_id' to be a str")
        pulumi.set(__self__, "gateway_id", gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)
        if route_name and not isinstance(route_name, str):
            raise TypeError("Expected argument 'route_name' to be a str")
        pulumi.set(__self__, "route_name", route_name)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetGatewayRoutesResultResult']:
        """
        result.
        """
        return pulumi.get(self, "results")

    @property
    @pulumi.getter(name="routeName")
    def route_name(self) -> Optional[str]:
        return pulumi.get(self, "route_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        service name.
        """
        return pulumi.get(self, "service_name")


class AwaitableGetGatewayRoutesResult(GetGatewayRoutesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewayRoutesResult(
            gateway_id=self.gateway_id,
            id=self.id,
            result_output_file=self.result_output_file,
            results=self.results,
            route_name=self.route_name,
            service_name=self.service_name)


def get_gateway_routes(gateway_id: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       route_name: Optional[str] = None,
                       service_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewayRoutesResult:
    """
    Use this data source to query detailed information of tse gateway_routes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    gateway_routes = tencentcloud.Tse.get_gateway_routes(gateway_id="gateway-ddbb709b",
        route_name="keep-routes",
        service_name="test")
    ```
    <!--End PulumiCodeChooser -->


    :param str gateway_id: gateway ID.
    :param str result_output_file: Used to save results.
    :param str route_name: route name.
    :param str service_name: service name.
    """
    __args__ = dict()
    __args__['gatewayId'] = gateway_id
    __args__['resultOutputFile'] = result_output_file
    __args__['routeName'] = route_name
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tse/getGatewayRoutes:getGatewayRoutes', __args__, opts=opts, typ=GetGatewayRoutesResult).value

    return AwaitableGetGatewayRoutesResult(
        gateway_id=pulumi.get(__ret__, 'gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        results=pulumi.get(__ret__, 'results'),
        route_name=pulumi.get(__ret__, 'route_name'),
        service_name=pulumi.get(__ret__, 'service_name'))


@_utilities.lift_output_func(get_gateway_routes)
def get_gateway_routes_output(gateway_id: Optional[pulumi.Input[str]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              route_name: Optional[pulumi.Input[Optional[str]]] = None,
                              service_name: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGatewayRoutesResult]:
    """
    Use this data source to query detailed information of tse gateway_routes

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    gateway_routes = tencentcloud.Tse.get_gateway_routes(gateway_id="gateway-ddbb709b",
        route_name="keep-routes",
        service_name="test")
    ```
    <!--End PulumiCodeChooser -->


    :param str gateway_id: gateway ID.
    :param str result_output_file: Used to save results.
    :param str route_name: route name.
    :param str service_name: service name.
    """
    ...
